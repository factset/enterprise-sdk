{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "VRS API documentation",
    "contact": {
      "name": "FactSet Research Systems",
      "email": "api@factset.com",
      "url": "https://developer.factset.com/contact"
    },
    "license": {
      "name": "Apache License, Version 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "description": "Documentation on all available end points in the VRSAPI"
  },
  "security": [
    {
      "FactSetApiKey": []
    },
    {
      "FactSetOAuth2": []
    }
  ],
  "externalDocs": {
    "description": "API Documentation",
    "url": "https://developer.factset.com/api-catalog/vermilion-api"
  },
  "tags": [
    {
      "name": "Datasource"
    },
    {
      "name": "Entity"
    },
    {
      "name": "Report"
    },
    {
      "name": "Report instance"
    },
    {
      "name": "SCIM"
    },
    {
      "name": "Version"
    }
  ],
  "paths": {
    "/v1/{tenant}/data-sources": {
      "get": {
        "operationId": "getAllDataSources",
        "tags": [
          "Datasource"
        ],
        "summary": "Lists all datasources",
        "description": "List all datasources the user has permission to see",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Append - to sort in descending order. If parameter is not given, no sorting will be done",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "name": {
                "value": [
                  "name"
                ],
                "description": "The name of the datasource to sort"
              },
              "type": {
                "value": [
                  "type"
                ],
                "description": "The type of the datasource to sort"
              },
              "outputRecordSet": {
                "value": [
                  "outputRecordSet"
                ],
                "description": "The output recordset of the datasource to sort"
              },
              "code": {
                "value": [
                  "code"
                ],
                "description": "The code of the datasource to sort"
              },
              "releaseTag": {
                "value": [
                  "releaseTag"
                ],
                "description": "The release tag of the datasource to sort"
              },
              "lastUpdatedBy": {
                "value": [
                  "lastUpdatedBy"
                ],
                "description": "The last updated by user of the datasource to sort"
              },
              "lastUpdated": {
                "value": [
                  "lastUpdated"
                ],
                "description": "The last updated by date of the datasource to sort"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return. Default is 25",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip. Default is 0",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    },
                    "sort": [
                      "name"
                    ]
                  },
                  "data": [
                    {
                      "dataSourceId": 123456,
                      "name": "Metadata DS",
                      "code": "METADATADS",
                      "dsType": "AUTOMATIC",
                      "entities": [
                        {
                          "entityId": 234,
                          "name": "Date",
                          "code": "SYSTEM_DATE"
                        }
                      ],
                      "outputRecordSet": "Meta Data RS",
                      "releaseTag": "Build123",
                      "defaultDataSourceName": "Default DS",
                      "dataPreview": "Component123",
                      "lastUpdatedBy": "user123",
                      "lastUpdated": 1715665983563
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view datasources in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/data-sources/{dataSourceCode}": {
      "get": {
        "operationId": "getDataSourceByCode",
        "tags": [
          "Datasource"
        ],
        "summary": "Gets a datasource",
        "description": "Gets a datasource based on the code passed",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "dataSourceCode",
            "description": "The code of the datasource",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "DSCODE"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceData"
                },
                "example": {
                  "data": {
                    "dataSourceId": 123456,
                    "name": "Metadata DS",
                    "code": "METADATADS",
                    "dsType": "AUTOMATIC",
                    "entities": [
                      {
                        "entityId": 234,
                        "name": "Date",
                        "code": "SYSTEM_DATE"
                      }
                    ],
                    "outputRecordSet": "Meta Data RS",
                    "releaseTag": "Build123",
                    "defaultDataSourceName": "Default DS",
                    "dataPreview": "Component123",
                    "lastUpdatedBy": "user123",
                    "lastUpdated": 1715665983563
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view datasources in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied datasource code was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The datasource code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/data-sources/{dataSourceCode}/data": {
      "get": {
        "operationId": "getDataSourceData",
        "tags": [
          "Datasource"
        ],
        "summary": "Gets the data for the datasource",
        "description": "Gets the data for the datasource. There are optional query parameters to filter the data",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "dataSourceCode",
            "description": "The code of the datasource",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "DSCODE"
          },
          {
            "in": "query",
            "name": "entityCodes",
            "description": "A series of query parameter used to filter the data for a datasource. This represents the entities for the datasource. E.g.: entityCodes=ACCOUNT&entityCodes=FUNDS",
            "schema": {
              "type": "string"
            },
            "example": "FUNDS"
          },
          {
            "in": "query",
            "name": "entityKeys",
            "description": "A series of query parameter used to filter the data for a datasource. This is the entity key value for an entity selection. E.g.: entityKeys=1&entityKeys=Test2",
            "schema": {
              "type": "string"
            },
            "example": "Test2"
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return. Default is 25",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip. Default is 0",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - returns data for the datasource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceDataInstance"
                },
                "example": {
                  "data": {
                    "fields": [
                      {
                        "fieldType": "TEXT",
                        "id": 4567,
                        "hide": "false",
                        "name": "Pet"
                      }
                    ],
                    "dstInstance": {
                      "dstInstanceId": 123456,
                      "dstInstanceType": "AUTOMATIC",
                      "rows": [
                        {
                          "rowId": 123,
                          "order": 1,
                          "fields": [
                            {
                              "fieldId": 4567,
                              "fieldType": "TEXT",
                              "fieldValue": "Dog"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The supplied datasource code was either missing or invalid, or the query parameters are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The datasource code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view datasources in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied datasource code was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The datasource code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/entities/{entityCode}/values": {
      "get": {
        "operationId": "getEntityValuesByCode",
        "tags": [
          "Entity"
        ],
        "summary": "Gets the entity values",
        "description": "Gets the entity values for the specified entity",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "entityCode",
            "description": "The code of the entity",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "ENTCODE"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The entity field to sort on. Can only be sorted on entity key, description or secondary key fields. Append \"-\" to sort in descending order. If no parameter given, it will be sorted by key field in ascending order by default",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "entity key field": {
                "value": [
                  "entity key field"
                ],
                "description": "The name of the entity key field"
              },
              "entity description field": {
                "value": [
                  "entity description field"
                ],
                "description": "The name of the entity description field"
              },
              "entity secondary key field": {
                "value": [
                  "entity secondary key field"
                ],
                "description": "The name of the entity secondary key field"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return. Default is 25",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip. Default is 0",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          },
          {
            "in": "query",
            "name": "showAll",
            "description": "Whether to show all field values for each entity row. Value should either be 1 or 0. Default is 0 (false). Otherwise, show all field values in a JSON array named \"fieldsWithValues\", with each array value being a string in the format of \"**<FIELD_NAME> : <FIELD_VALUE>**\". Both key and description field values will be included in this JSON array too.",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityFieldValueDTO"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    },
                    "sort": [
                      "entityKey"
                    ]
                  },
                  "data": [
                    {
                      "entityRowId": 27706,
                      "keyValue": "en-gb",
                      "descriptionValue": "English (GB)",
                      "fieldsWithValues": [
                        "language_code : en-gb",
                        "language_desc : English (GB)"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The supplied entity code was either missing or invalid, or the entity was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The entity code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view datasources in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied entity code was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The entity code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/reports": {
      "get": {
        "operationId": "getAllReportDefinitions",
        "tags": [
          "Report"
        ],
        "summary": "Gets all report definitions",
        "description": "Gets all report definitions the user has permissions for",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Can add - to sort",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "name": {
                "value": [
                  "name"
                ],
                "description": "The name of the report to sort"
              },
              "type": {
                "value": [
                  "templateOwner"
                ],
                "description": "The template owner of the report to sort"
              },
              "code": {
                "value": [
                  "code"
                ],
                "description": "The code of the report to sort"
              },
              "releaseTag": {
                "value": [
                  "releaseTag"
                ],
                "description": "The release tag of the report to sort"
              },
              "lastUpdatedBy": {
                "value": [
                  "lastUpdatedBy"
                ],
                "description": "The last updated by user of the report to sort"
              },
              "lastModifiedBy": {
                "value": [
                  "lastModifiedBy"
                ],
                "description": "The last updated by date of the report to sort"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDefinitionList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    }
                  },
                  "data": [
                    {
                      "name": "Test Report",
                      "code": "TEST_REPORT",
                      "releaseTag": "rel1.1",
                      "entities": [
                        {
                          "entityId": 234,
                          "name": "Date",
                          "code": "SYSTEM_DATE"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The supplied report definition code was either missing or invalid, or the report definition was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The report definition code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/reports/{reportDefinitionCode}": {
      "get": {
        "operationId": "getReportDefinitionByCode",
        "tags": [
          "Report"
        ],
        "summary": "Gets a report definition",
        "description": "Gets a report defintion based on the code specified",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "reportDefinitionCode",
            "description": "The code of the report definition",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "RPCODE"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDefinitionData"
                },
                "example": {
                  "data": {
                    "name": "Test Report",
                    "code": "TEST_REPORT",
                    "releaseTag": "rel1.1",
                    "entities": [
                      {
                        "entityId": 234,
                        "name": "Date",
                        "code": "SYSTEM_DATE"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The supplied report definition code was either missing or invalid, or the report definition was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The report definition code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied report definition code was was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The report definition code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/report-instances/generate": {
      "post": {
        "operationId": "startReportGeneration",
        "tags": [
          "Report instance"
        ],
        "summary": "Generates a report",
        "description": "Generates a report using the specified ID and the JSON in the request body",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportGenerationRequestBody"
              },
              "example": {
                "vrs": {
                  "1": {
                    "report": "MONTHLY_REPORT",
                    "tenancy": "CLIENT_REPORTING",
                    "outputFormat": "PDF",
                    "sectionFilter": "Section One",
                    "priority": "2",
                    "startDate": "15 December 2023 00:00:00",
                    "entitySelection": {
                      "ACCOUNT": {
                        "key": "Account name"
                      },
                      "PORTFOLIO": {
                        "key": "Test fund"
                      },
                      "DATE": {
                        "key": "01 January 2020 00:00:00"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Report generation request succeeded and report generation is in progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInstanceDataResponse"
                },
                "example": {
                  "data": {
                    "reportInstanceId": 123456
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "End point location to retrieve the latest status of the report generation. This is v1/{tenant}/report-instances/{reportInstanceId}"
              }
            }
          },
          "400": {
            "description": "The supplied report definition code was either missing or invalid, or the report definition was not found",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "End point location to retrieve the latest status of the report generation. This is v1/{tenant}/report-instances/{reportInstanceId}"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The report definition code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "End point location to retrieve the latest status of the report generation. This is v1/{tenant}/report-instances/{reportInstanceId}"
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The report code could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The report definition code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/report-instances/{reportInstanceId}": {
      "delete": {
        "operationId": "cancelReportGeneration",
        "tags": [
          "Report instance"
        ],
        "summary": "Cancels a report generation",
        "description": "Sends a request to cancel a report generation based on the report instance id passed",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "reportInstanceId",
            "description": "The id of the report instance",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "123456"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation - no response"
          },
          "400": {
            "description": "The supplied report instance id was either missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The ID passed is not a numerical value"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied report instance ID could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The report definition code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getReportInstanceById",
        "tags": [
          "Report instance"
        ],
        "summary": "Gets a report instance based on the ID",
        "description": "Gets a report instance object based on the ID passed",
        "parameters": [
          {
            "in": "path",
            "name": "reportInstanceId",
            "description": "The ID of the report instance",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          },
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInstanceData"
                },
                "example": {
                  "data": {
                    "reportInstanceId": 123456,
                    "reportDefinitionId": 12021,
                    "reportDefinitionName": "Sample Report Name",
                    "reportName": "rep_929_67715_1709130994429.pdf",
                    "userFriendlyReportName": "Sample Report.pdf",
                    "extension": "pdf",
                    "reportRevision": {
                      "reportStatus": "COMPLETED",
                      "startDate": "1709130994000",
                      "finishDate": "1709113002873",
                      "signOffStatus": "PENDING",
                      "signOffNotes": "",
                      "reportReasonCd": "",
                      "description": "Sample report",
                      "languageCode": "en-gb",
                      "outputFormat": "pdf",
                      "percentageComplete": 100
                    },
                    "name": "Sample Report.pdf"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the report file on VRS ready to download"
              }
            }
          },
          "400": {
            "description": "The supplied report instance id was either missing or invalid, or the report instance was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The ID passed is not a numerical value"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied report instance ID could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The report definition code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/report-instances": {
      "get": {
        "operationId": "getAllReportInstances",
        "tags": [
          "Report instance"
        ],
        "summary": "Gets a list of report instances",
        "description": "Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "query",
            "name": "reportDefinitionCode",
            "description": "Acts as a filter for the retrieval process. Filters the report instances that match the report definition code",
            "schema": {
              "type": "string"
            },
            "example": "RPCODE"
          },
          {
            "in": "query",
            "name": "entityCodes",
            "description": "A series of query parameters used to filter the report instances by entity code. E.g: entityCode=DATE&entityCode=SYSTEM_LANG",
            "schema": {
              "type": "string"
            },
            "example": "SYSTEM_LANG"
          },
          {
            "in": "query",
            "name": "entityKeys",
            "description": "A series of query parameters used to filter the report instances by entity keys. E.g: entityKey=en-gb",
            "schema": {
              "type": "string"
            },
            "example": "en-gb"
          },
          {
            "in": "query",
            "name": "sectionFilter",
            "description": "Acts as a filter for the retrieval process. Filters the report instances that match the section filter",
            "schema": {
              "type": "string"
            },
            "example": "testFilter"
          },
          {
            "in": "query",
            "name": "outputFormat",
            "description": "Acts as a filter for the retrieval process. Filters the report instances that match the output format",
            "schema": {
              "type": "string"
            },
            "example": "pdf"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "reportInstanceId": {
                "value": [
                  "reportInstanceId"
                ],
                "description": "The id of report instance to sort"
              },
              "reportStatus": {
                "value": [
                  "reportStatus"
                ],
                "description": "The status of the report to sort"
              },
              "startDate": {
                "value": [
                  "startDate"
                ],
                "description": "The start date of the report to sort"
              },
              "finishDate": {
                "value": [
                  "finishDate"
                ],
                "description": "The finish date of the report to sort"
              },
              "signOffStatus": {
                "value": [
                  "signOffStatus"
                ],
                "description": "The sign off status of the report to sort"
              },
              "outputFormat": {
                "value": [
                  "outputFormat"
                ],
                "description": "The output format of report to sort"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInstanceList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    }
                  },
                  "data": [
                    {
                      "reportInstanceId": 123456,
                      "reportDefinitionId": 12021,
                      "reportDefinitionName": "Sample Report Name",
                      "reportName": "rep_929_67715_1709130994429.pdf",
                      "userFriendlyReportName": "Sample Report.pdf",
                      "extension": "pdf",
                      "reportRevision": {
                        "reportStatus": "COMPLETED",
                        "startDate": "1709130994000",
                        "finishDate": "1709113002873",
                        "signOffStatus": "PENDING",
                        "signOffNotes": "",
                        "reportReasonCd": "",
                        "description": "Sample report",
                        "languageCode": "en-gb",
                        "outputFormat": "pdf",
                        "percentageComplete": 100
                      },
                      "name": "Sample Report.pdf"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/report-instances/{reportInstanceId}/results/{reportFileName}": {
      "get": {
        "operationId": "downloadReportFile",
        "tags": [
          "Report instance"
        ],
        "summary": "Gets the generated file",
        "description": "Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation.\n| outputFormat | Content-Type |\n| ---------------- | ------------|\n|WORD     | application/msword |\n|WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document|\n|EXCEL    |   application/vnd.ms-excel|\n|EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|\n|PPT      |   application/vnd.ms-powerpoint|\n|PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation|\n|PDF      |   application/pdf|\n|CSV      |   text/csv|\n|XML      |   application/xml|\n|VXML     |   application/xml|\n|HTML     |   text/html|\n|PS       |   application/postscript|",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "reportInstanceId",
            "description": "Used to validate that report file name belongs to the report instance passed",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          },
          {
            "in": "path",
            "name": "reportFileName",
            "description": "The report file name that has to be retrieved. report file name. E.g: xyz.pdf",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "xyz.pdf"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/vnd.ms-powerpoint": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/msword": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/postscript": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The supplied report instance id was either missing or invalid or the report instance was not found. The supplied report file name was either invalid or not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The ID passed is not a numerical value"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view the generated file in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header."
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/report-instances/{reportInstanceId}/logs": {
      "get": {
        "operationId": "getReportGenerationLogs",
        "tags": [
          "Report instance"
        ],
        "summary": "Gets a list of logs for the report instance generation",
        "description": "Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors & warnings'",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "reportInstanceId",
            "description": "Used to validate that report file name belongs to the report instance passed",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          },
          {
            "in": "query",
            "name": "errorsOnly",
            "description": "If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly=true",
            "schema": {
              "type": "string"
            },
            "example": "true"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Can add - to sort",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "sequenceNumber": {
                "value": [
                  "sequenceNumber"
                ],
                "description": "The sequence number of the log entry"
              },
              "message": {
                "value": [
                  "message"
                ],
                "description": "The log message to sort"
              },
              "type": {
                "value": [
                  "type"
                ],
                "description": "The type of the log to sort"
              },
              "updatedDate": {
                "value": [
                  "updatdeDate"
                ],
                "description": "The updated date of the log to sort"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInstanceLogList"
                },
                "example": {
                  "data": [
                    {
                      "sequenceNumber": 9464295,
                      "message": "Get Data Completed",
                      "type": "LOG",
                      "updateDate": "1709176498527"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied report instance ID could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The report instance ID passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to\n    application/json"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/scim/v2/Users": {
      "get": {
        "operationId": "getAllUsers",
        "tags": [
          "SCIM"
        ],
        "summary": "Retrieves a list of VRS users",
        "description": "Retrieves a list of VRS users",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer"
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "startIndex",
            "description": "The 1-based index of the first query result",
            "schema": {
              "type": "integer"
            },
            "example": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUserListResponse"
                },
                "example": {
                  "totalResults": 10,
                  "itemsPerPage": 10,
                  "startIndex": 5,
                  "Resources": [
                    {
                      "schemas": [
                        "urn:scim:schemas:extension:FactSet:VRS:1.0:User"
                      ],
                      "id": "123456",
                      "userName": "TestUser",
                      "name": {
                        "formatted": "Test User"
                      },
                      "userType": "0",
                      "active": true,
                      "authenticatedUserName": "TestUser",
                      "tenant": "TENANT",
                      "phoneNumbers": [
                        {
                          "value": "9876543210",
                          "type": "work",
                          "primary": true
                        }
                      ],
                      "emails": [
                        {
                          "value": "dummy@ex.com",
                          "type": "work",
                          "primary": true
                        }
                      ],
                      "photos": [
                        {
                          "value": "Photopath",
                          "type": "work",
                          "primary": true
                        }
                      ],
                      "tenancies": [
                        {
                          "value": "TENANT"
                        }
                      ],
                      "groups": [
                        {
                          "value": "218",
                          "$ref": "https://api.factset.com/vrsapi/scim/v2/Groups/218",
                          "type": "Group",
                          "display": "API Group"
                        }
                      ],
                      "domainCode": "TESTDOMAIN",
                      "isAdministrator": false,
                      "meta": {
                        "resourceType": "VRSUser",
                        "created": "2024-03-13T08:01:32.297Z",
                        "lastModified": "2024-03-15T09:48:21.375Z",
                        "location": "https://api.factset.com/vrsapi/scim/v2/Users/123456"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to view users",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have view or update permission",
                  "status": "403"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createUser",
        "tags": [
          "SCIM"
        ],
        "summary": "Creates a user",
        "description": "Creates a VRS user",
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScimUserJSONRequest"
              },
              "example": {
                "userName": "vrstestuser",
                "name": {
                  "formatted": "Vrstest User"
                },
                "userType": "Employee",
                "active": true,
                "authenticatedUserName": "vrstestuser",
                "tenant": "XXXXXXXXXX",
                "emails": [
                  {
                    "value": "xyz@email.com",
                    "type": "work",
                    "primary": true
                  }
                ],
                "phoneNumbers": [
                  {
                    "value": "1234567890",
                    "type": "work",
                    "primary": true
                  }
                ],
                "domainCode": "XXXXXXXXXX"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedScimUserJSONResponse"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:User"
                  ],
                  "id": "218",
                  "userName": "vrstestuser",
                  "name": {
                    "formatted": "Vrstest User"
                  },
                  "userType": "0",
                  "preferredLanguage": "en-gb",
                  "active": true,
                  "authenticatedUserName": "vrstestuser",
                  "tenant": "XXXXXXXXXX",
                  "phoneNumbers": [
                    {
                      "value": "1234567890",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "emails": [
                    {
                      "value": "xyz@email.com",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "tenancies": [
                    {
                      "value": "XXXXXXXXXX"
                    }
                  ],
                  "photos": [
                    {
                      "value": "Photopath",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "domainCode": "XXXXXXXXXX",
                  "isAdministrator": false,
                  "meta": {
                    "resourceType": "VRSUser",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-13T08:01:32.297Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Users/218"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the newly create user, for example https://example.com/VRSAPI/scim/v2/Users/1"
              }
            }
          },
          "400": {
            "description": "Bad Request, required values not provided in JSON request body (e.g. tenant, name or userName (loginID)",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "No tenant code given",
                  "status": "400"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to create users or it does not have requested tenancy assigned to it",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have update permission for users",
                  "status": "403"
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User already exists",
                  "status": "409"
                }
              }
            }
          }
        }
      }
    },
    "/scim/v2/Users/{userId}": {
      "get": {
        "operationId": "getUserById",
        "tags": [
          "SCIM"
        ],
        "summary": "Retrieves a VRS User",
        "description": "Retrieves a VRS user based on their ID",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:User"
                  ],
                  "id": "123456",
                  "userName": "TestUser",
                  "name": {
                    "formatted": "Test User"
                  },
                  "userType": "0",
                  "active": true,
                  "authenticatedUserName": "TestUser",
                  "tenant": "TENANT",
                  "phoneNumbers": [
                    {
                      "value": "9876543210",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "emails": [
                    {
                      "value": "dummy@ex.com",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "photos": [
                    {
                      "value": "Photopath",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "tenancies": [
                    {
                      "value": "TENANT"
                    }
                  ],
                  "groups": [
                    {
                      "value": "218",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Groups/218",
                      "type": "Group",
                      "display": "API Group"
                    }
                  ],
                  "domainCode": "TESTDOMAIN",
                  "isAdministrator": false,
                  "meta": {
                    "resourceType": "VRSUser",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Users/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the user, for example https://example.com/VRSAPI/scim/v2/Users/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to view users",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to view users",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteUserById",
        "tags": [
          "SCIM"
        ],
        "summary": "Deletes a VRS user",
        "description": "Deletes a VRS user (this marks them as 'Deleted' in the database)",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden, user does not have permission to delete users",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to delete users",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchUserById",
        "tags": [
          "SCIM"
        ],
        "summary": "Add or remove VRS user attributes",
        "description": "Adds or removes VRS user attributes based on the JSON properties",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/ScimUserPatchRequestBody"
              },
              "example": {
                "schemas": [
                  "urn:ietf:params:scim:api:messages:2.0:PatchOp"
                ],
                "Operations": [
                  {
                    "op": "replace",
                    "path": "name.formatted",
                    "value": "Vrs Test User"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:User"
                  ],
                  "id": "123456",
                  "userName": "TestUser",
                  "name": {
                    "formatted": "Vrs Test User"
                  },
                  "userType": "0",
                  "active": true,
                  "authenticatedUserName": "TestUser",
                  "tenant": "TENANT",
                  "phoneNumbers": [
                    {
                      "value": "9876543210",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "emails": [
                    {
                      "value": "dummy@ex.com",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "photos": [
                    {
                      "value": "Photopath",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "tenancies": [
                    {
                      "value": "TENANT"
                    }
                  ],
                  "groups": [
                    {
                      "value": "218",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Groups/218",
                      "type": "Group",
                      "display": "API Group"
                    }
                  ],
                  "domainCode": "TESTDOMAIN",
                  "isAdministrator": false,
                  "meta": {
                    "resourceType": "VRSUser",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Users/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the updated user, for example https://example.com/VRSAPI/scim/v2/Users/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to update users",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to update users",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateUserById",
        "tags": [
          "SCIM"
        ],
        "summary": "Updates a VRS user",
        "description": "Updates (replaces) a VRS user with the properties in the JSON",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/ScimUser"
              },
              "example": {
                "userName": "vrstestuser",
                "name": {
                  "formatted": "Vrstest User"
                },
                "userType": "Employee",
                "active": true,
                "authenticatedUserName": "vrstestuser",
                "tenant": "XXXXXXXXXX",
                "emails": [
                  {
                    "value": "xyz@email.com",
                    "type": "work",
                    "primary": true
                  }
                ],
                "phoneNumbers": [
                  {
                    "value": "1234567890",
                    "type": "work",
                    "primary": true
                  }
                ],
                "domainCode": "XXXXXXXXXX"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:User"
                  ],
                  "id": "123456",
                  "userName": "vrstestuser",
                  "name": {
                    "formatted": "Vrstest User"
                  },
                  "userType": "0",
                  "active": true,
                  "authenticatedUserName": "vrstestuser",
                  "tenant": "XXXXXXXXXX",
                  "phoneNumbers": [
                    {
                      "value": "1234567890",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "emails": [
                    {
                      "value": "xyz@email.com",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "photos": [
                    {
                      "value": "Photopath",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "tenancies": [
                    {
                      "value": "XXXXXXXXXX"
                    }
                  ],
                  "groups": [
                    {
                      "value": "218",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Groups/218",
                      "type": "Group",
                      "display": "API Group"
                    }
                  ],
                  "domainCode": "XXXXXXXXXX",
                  "isAdministrator": false,
                  "meta": {
                    "resourceType": "VRSUser",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Users/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the updated user, for example https://example.com/VRSAPI/scim/v2/Users/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to update users",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to update users",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          }
        }
      }
    },
    "/scim/v2/Groups": {
      "get": {
        "operationId": "getAllGroups",
        "tags": [
          "SCIM"
        ],
        "summary": "Retrieves a list of VRS role",
        "description": "Retrieves a VRS roles",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer"
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "startIndex",
            "description": "The 1-based index of the first query result",
            "schema": {
              "type": "integer"
            },
            "example": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroupListResponse"
                },
                "example": {
                  "totalResults": 10,
                  "itemsPerPage": 10,
                  "startIndex": 5,
                  "Resources": [
                    {
                      "schemas": [
                        "urn:scim:schemas:extension:FactSet:VRS:1.0:Group"
                      ],
                      "id": "123456",
                      "displayName": "API Group",
                      "members": [
                        {
                          "value": "45678",
                          "$ref": "https://api.factset.com/vrsapi/scim/v2/Users/45678",
                          "type": "User"
                        }
                      ],
                      "tenant": "TENANT",
                      "domainCode": "TESTDOMAIN"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to view roles",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to view roles",
                  "status": "403"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createGroup",
        "tags": [
          "SCIM"
        ],
        "summary": "Creates a role",
        "description": "Creates a VRS role",
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/ScimGroup"
              },
              "example": {
                "displayName": "vrstestgroup",
                "members": [
                  {
                    "value": "218",
                    "type": "user",
                    "$ref": "VRSAPI/scim/v2/Users/218"
                  }
                ],
                "tenant": "XXXXXXXXXX",
                "domainCode": "XXXXXXXXXX"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroup"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:Group"
                  ],
                  "id": "123456",
                  "displayName": "vrstestgroup",
                  "members": [
                    {
                      "value": "218",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Users/218",
                      "type": "User"
                    }
                  ],
                  "tenant": "XXXXXXXXXX",
                  "domainCode": "XXXXXXXXXX",
                  "meta": {
                    "resourceType": "VRSGroup",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Groups/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the newly create role, for example https://example.com/VRSAPI/scim/v2/Groups/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to create roles",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to create groups",
                  "status": "403"
                }
              }
            }
          },
          "409": {
            "description": "Group already exists",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Group already exists",
                  "status": "409"
                }
              }
            }
          }
        }
      }
    },
    "/scim/v2/Groups/{groupId}": {
      "get": {
        "operationId": "getGroupById",
        "tags": [
          "SCIM"
        ],
        "summary": "Retrieves a VRS role",
        "description": "Retrieves a VRS role based on the ID",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The ID of the role",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroup"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:Group"
                  ],
                  "id": "123456",
                  "displayName": "API Group",
                  "members": [
                    {
                      "value": "218",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Users/218",
                      "type": "User"
                    }
                  ],
                  "tenant": "TENANT",
                  "domainCode": "TESTDOMAIN",
                  "meta": {
                    "resourceType": "VRSGroup",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Groups/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the newly create role, for example https://example.com/VRSAPI/scim/v2/Groups/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to view roles",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to view roles",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteGroupById",
        "tags": [
          "SCIM"
        ],
        "summary": "Deletes a VRS role",
        "description": "Deletes a VRS role",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The ID of the group",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden, user does not have permission to delete roles",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to delete roles",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchGroupById",
        "tags": [
          "SCIM"
        ],
        "summary": "Add or remove a user to/from a group",
        "description": "Adds or removes a VRS user to/from a VRS role",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The ID of the role",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/ScimGroupPatchRequestBody"
              },
              "example": {
                "schemas": [
                  "urn:ietf:params:scim:api:messages:2.0:PatchOp"
                ],
                "Operations": [
                  {
                    "op": "add",
                    "path": "members",
                    "value": {
                      "display": "Test user",
                      "$ref": "VRSAPI/scim/v2/Users/45678",
                      "value": "45678"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added user to group",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroup"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:Group"
                  ],
                  "id": "123456",
                  "displayName": "API Group",
                  "members": [
                    {
                      "value": "45678",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Users/45678",
                      "type": "User"
                    }
                  ],
                  "tenant": "TENANT",
                  "domainCode": "TESTDOMAIN",
                  "meta": {
                    "resourceType": "VRSGroup",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Groups/123456"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateGroupById",
        "tags": [
          "SCIM"
        ],
        "summary": "Updates a VRS Group",
        "description": "Updates (replaces) a VRS Group with the properties in the JSON",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The ID of the group",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/ScimGroup"
              },
              "example": {
                "displayName": "vrstestgroup",
                "members": [
                  {
                    "value": "45678",
                    "type": "user",
                    "$ref": "VRSAPI/scim/v2/Users/45678"
                  }
                ],
                "tenant": "XXXXXXXXXX",
                "domainCode": "XXXXXXXXXX"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated group",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroup"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:Group"
                  ],
                  "id": "123456",
                  "displayName": "vrstestgroup",
                  "members": [
                    {
                      "value": "45678",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Users/45678",
                      "type": "User"
                    }
                  ],
                  "tenant": "XXXXXXXXXX",
                  "domainCode": "XXXXXXXXXX",
                  "meta": {
                    "resourceType": "VRSGroup",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Groups/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the updated group, for example https://example.com/VRSAPI/scim/v2/Groups/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to update groups",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to update groups",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          }
        }
      }
    },
    "/v1/version": {
      "get": {
        "operationId": "getVersion",
        "tags": [
          "Version"
        ],
        "summary": "Gets the version of VRS,WRS and DBServer",
        "description": "Gets the version of VRS,WRS and DBServer",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionResponseBody"
                },
                "example": {
                  "data": {
                    "vrsVersion": "21.58",
                    "wrsVersion": "20.2.42",
                    "dbServer": "Microsoft SQL Server 2016"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "FactSetOAuth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth.factset.com/as/token.oauth2",
            "scopes": {}
          }
        }
      },
      "FactSetApiKey": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "DataSourceList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "pagination": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer"
                  },
                  "isEstimatedTotal": {
                    "type": "boolean"
                  }
                }
              },
              "sort": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSourceDTO"
            }
          }
        }
      },
      "DataSourceData": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataSourceDTO"
          }
        }
      },
      "DataSourceDTO": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "dsType": {
            "type": "string",
            "enum": [
              "AUTOMATIC",
              "MANUAL",
              "FILTER"
            ]
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityDTO"
            }
          },
          "outputRecordSet": {
            "type": "string"
          },
          "releaseTag": {
            "type": "string"
          },
          "defaultDataSourceName": {
            "type": "string"
          },
          "dataPreview": {
            "type": "string"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "number"
          }
        }
      },
      "DataSourceDataInstance": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataSourceAllData"
          }
        }
      },
      "DataSourceAllData": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordSetFields"
            }
          },
          "dstInstance": {
            "$ref": "#/components/schemas/DataSourceInstance"
          }
        }
      },
      "DataSourceInstance": {
        "type": "object",
        "properties": {
          "dstInstanceId": {
            "type": "integer"
          },
          "dstInstanceType": {
            "type": "string"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSourceInstanceRows"
            }
          }
        }
      },
      "DataSourceInstanceRows": {
        "type": "object",
        "properties": {
          "rowId": {
            "type": "integer"
          },
          "order": {
            "type": "integer"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordSetFieldValues"
            }
          }
        }
      },
      "RecordSetFieldValues": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer"
          },
          "fieldType": {
            "type": "string",
            "enum": [
              "BOOLEAN",
              "COLOUR",
              "DATETIME",
              "DECIMAL",
              "FONT",
              "FONTSIZE",
              "HTML",
              "INTEGER",
              "TEXT"
            ]
          },
          "fieldValue": {
            "type": "string"
          }
        }
      },
      "RecordSetFields": {
        "type": "object",
        "properties": {
          "fieldType": {
            "type": "string",
            "enum": [
              "BOOLEAN",
              "COLOUR",
              "DATETIME",
              "DECIMAL",
              "FONT",
              "FONTSIZE",
              "HTML",
              "INTEGER",
              "TEXT"
            ]
          },
          "format": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "hide": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "EntityDTO": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "EntityFieldValueDTO": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "pagination": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer"
                  },
                  "isEstimatedTotal": {
                    "type": "boolean"
                  }
                }
              },
              "sort": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "properties": {
                "entityRowId": {
                  "type": "integer"
                },
                "keyValue": {
                  "type": "string"
                },
                "descriptionValue": {
                  "type": "string"
                },
                "fieldsWithValues": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "ReportInstanceDataResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportInstanceId"
          }
        }
      },
      "ReportInstanceId": {
        "type": "object",
        "properties": {
          "reportInstanceId": {
            "type": "integer"
          }
        }
      },
      "ReportInstanceList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "pagination": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer"
                  },
                  "isEstimatedTotal": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportInstanceDTO"
            }
          }
        }
      },
      "ReportInstanceLogList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportInstanceLogDTO"
            }
          }
        }
      },
      "ReportInstanceData": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportInstanceDTO"
          }
        }
      },
      "ReportInstanceDTO": {
        "type": "object",
        "properties": {
          "reportInstanceId": {
            "type": "integer",
            "format": "int32"
          },
          "reportDefinitionId": {
            "type": "integer",
            "format": "int32"
          },
          "reportDefinitionName": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "userFriendlyReportName": {
            "type": "string"
          },
          "extension": {
            "type": "string"
          },
          "reportRevision": {
            "$ref": "#/components/schemas/ReportRevisionDTO"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ReportInstanceLogDTO": {
        "type": "object",
        "properties": {
          "sequenceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LOG",
              "ERROR"
            ]
          },
          "updateDate": {
            "type": "string"
          }
        }
      },
      "ReportDefinitionList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "pagination": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer"
                  },
                  "isEstimatedTotal": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportDefinitionDTO"
            }
          }
        }
      },
      "ReportDefinitionData": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportDefinitionDTO"
          }
        }
      },
      "ReportDefinitionDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "releaseTag": {
            "type": "string"
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityDTO"
            }
          }
        }
      },
      "ReportRevisionDTO": {
        "type": "object",
        "properties": {
          "reportStatus": {
            "type": "string",
            "enum": [
              "WAITING",
              "STARTING",
              "RETRIEVING_REQUEST",
              "CONTENT_FILTER",
              "STYLE_PROCESSING",
              "STYLE_PREPROCESSING",
              "RULE_PROCESSING",
              "GETTING_DATA",
              "RI_PROCESSING",
              "COMPILE",
              "SUBSTITUTION",
              "TRANSLATION",
              "GRID_PROCESSING",
              "CHART_PROCESSING",
              "IMPORTED_FILE_PROCESSING",
              "TEXT_PROCESSING_STATUS",
              "TOC_PROCESSING_STATUS",
              "COMPONENT_PROCESSING",
              "POST_PROCESSING",
              "POSTING_TO_WRS",
              "POSTED_TO_WRS",
              "RENDERING",
              "DOC_CREATION",
              "PDF_CONVERSION",
              "ABORTED",
              "COMPLETED",
              "COMPLETED_CAUTIONS",
              "COMPLETED_ERROR",
              "COMPLETED_MODIFYING",
              "COMPLETED_CHANGED",
              "DELETING",
              "REPORT_ORIGINAL_GENERATION",
              "REPORT_PREVIOUS_REVISION",
              "GENERATING"
            ]
          },
          "startDate": {
            "type": "string"
          },
          "finishDate": {
            "type": "string"
          },
          "signOffStatus": {
            "type": "string",
            "enum": [
              "REJECTED",
              "PENDING",
              "APPROVED"
            ]
          },
          "signOffNotes": {
            "type": "string"
          },
          "reportReasonCd": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "outputFormat": {
            "type": "string"
          },
          "percentageComplete": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReportGenerationRequestBody": {
        "type": "object",
        "properties": {
          "vrs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReportGenerationRequest"
            }
          }
        }
      },
      "ReportGenerationRequest": {
        "type": "object",
        "properties": {
          "report": {
            "type": "string"
          },
          "tenancy": {
            "type": "string"
          },
          "outputFormat": {
            "type": "string",
            "enum": [
              "WORD",
              "WORD2010",
              "EXCEL",
              "EXCEL2010",
              "PPT",
              "PPT2010",
              "PDF",
              "CSV",
              "XML",
              "VXML",
              "HTML",
              "PS"
            ]
          },
          "sectionFilter": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "entitySelection": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EntitySelection"
            }
          }
        }
      },
      "EntitySelection": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "ReportDataResponse": {
        "type": "string",
        "format": "binary"
      },
      "ScimUser": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "name": {
            "type": "object",
            "properties": {
              "formatted": {
                "type": "string"
              }
            }
          },
          "userType": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "authenticatedUserName": {
            "type": "string"
          },
          "tenant": {
            "type": "string"
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimPhone"
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimEmail"
            }
          },
          "photos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimPhoto"
            }
          },
          "tenancies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenancy"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimUserGroup"
            }
          },
          "domainCode": {
            "type": "string"
          },
          "isAdministrator": {
            "type": "boolean"
          },
          "meta": {
            "$ref": "#/components/schemas/ScimMeta"
          }
        }
      },
      "CreatedScimUserJSONResponse": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "name": {
            "type": "object",
            "properties": {
              "formatted": {
                "type": "string"
              }
            }
          },
          "userType": {
            "type": "string"
          },
          "preferredLanguage": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "authenticatedUserName": {
            "type": "string"
          },
          "tenant": {
            "type": "string"
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimPhone"
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimEmail"
            }
          },
          "tenancies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenancy"
            }
          },
          "photos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimPhoto"
            }
          },
          "domainCode": {
            "type": "string"
          },
          "isAdministrator": {
            "type": "boolean"
          },
          "meta": {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string"
              },
              "created": {
                "type": "string"
              },
              "lastModified": {
                "type": "string"
              },
              "location": {
                "type": "string"
              }
            }
          }
        }
      },
      "CreateScimUserJSONRequest": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "name": {
            "type": "object",
            "properties": {
              "formatted": {
                "type": "string"
              }
            }
          },
          "preferredLanguage": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "authenticatedUserName": {
            "type": "string"
          },
          "tenant": {
            "type": "string"
          },
          "domainCode": {
            "type": "string"
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimPhone"
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimEmail"
            }
          },
          "photos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimPhoto"
            }
          },
          "tenancies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenancy"
            }
          }
        }
      },
      "ScimUserPatchRequestBody": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimUserPatchOperation"
            }
          }
        }
      },
      "ScimGroupPatchRequestBody": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimGroupPatchOperation"
            }
          }
        }
      },
      "ScimUserPatchOperation": {
        "type": "object",
        "properties": {
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ScimGroupPatchOperation": {
        "type": "object",
        "properties": {
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "object",
            "properties": {
              "display": {
                "type": "string"
              },
              "$ref": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        }
      },
      "ScimPhone": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "primary": {
            "type": "boolean"
          }
        }
      },
      "ScimEmail": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "primary": {
            "type": "boolean"
          }
        }
      },
      "ScimPhoto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "primary": {
            "type": "boolean"
          }
        }
      },
      "Tenancy": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "ScimGroup": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimGroupMember"
            }
          },
          "tenant": {
            "type": "string"
          },
          "domainCode": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/ScimMeta"
          }
        }
      },
      "ScimGroupMember": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "$ref": {
            "type": "string",
            "description": "A callback link which can be used to get the information of the group"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ScimUserGroup": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "$ref": {
            "type": "string",
            "description": "A callback link which can be used to get the information of the user"
          },
          "type": {
            "type": "string"
          },
          "display": {
            "type": "string",
            "description": "Name of the group"
          }
        }
      },
      "ScimGroupListResponse": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "integer"
          },
          "itemsPerPage": {
            "type": "integer"
          },
          "startIndex": {
            "type": "integer"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimGroup"
            }
          }
        }
      },
      "ScimUserListResponse": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "integer"
          },
          "itemsPerPage": {
            "type": "integer"
          },
          "startIndex": {
            "type": "integer"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimUser"
            }
          }
        }
      },
      "ScimMeta": {
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "lastModified": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "ErrorList": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ScimError": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "detail": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "VersionResponseBody": {
        "type": "object",
        "description": "details of VRS WRS versions",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "vrsVersion": {
                "type": "string",
                "description": "VRS version"
              },
              "wrsVersion": {
                "type": "string",
                "description": "WRS version"
              },
              "dbServer": {
                "type": "string",
                "description": "DB version"
              }
            }
          }
        }
      }
    }
  }
}