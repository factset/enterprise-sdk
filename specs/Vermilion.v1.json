{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "VRS API documentation",
    "contact": {
      "name": "FactSet Research Systems",
      "email": "api@factset.com",
      "url": "https://developer.factset.com/contact"
    },
    "license": {
      "name": "Apache License, Version 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "description": "Documentation on all available end points in the VRSAPI"
  },
  "security": [
    {
      "FactSetApiKey": []
    },
    {
      "FactSetOAuth2": []
    }
  ],
  "externalDocs": {
    "description": "API Documentation",
    "url": "https://developer.factset.com/api-catalog/vermilion-api"
  },
  "tags": [
    {
      "name": "Datasource",
      "description": "Endpoints for Data Source."
    },
    {
      "name": "Entity",
      "description": "Endpoints for Entities."
    },
    {
      "name": "Report",
      "description": "Endpoints for Reports."
    },
    {
      "name": "Report instance",
      "description": "Endpoints for Report instances."
    },
    {
      "name": "Workflow",
      "description": "Endpoints for Workflow."
    },
    {
      "name": "SCIM",
      "description": "Endpoints for Users and Groups."
    },
    {
      "name": "Version",
      "description": "Endpoints to retrieve the version details."
    }
  ],
  "paths": {
    "/v1/{tenant}/data-sources": {
      "get": {
        "operationId": "getAllDataSources",
        "tags": [
          "Datasource"
        ],
        "summary": "Lists all datasources",
        "description": "List all datasources the user has permission to see",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Append - to sort in descending order. If parameter is not given, no sorting will be done",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "name": {
                "value": [
                  "name"
                ],
                "description": "The name of the datasource to sort"
              },
              "type": {
                "value": [
                  "type"
                ],
                "description": "The type of the datasource to sort"
              },
              "outputRecordSet": {
                "value": [
                  "outputRecordSet"
                ],
                "description": "The output recordset of the datasource to sort"
              },
              "code": {
                "value": [
                  "code"
                ],
                "description": "The code of the datasource to sort"
              },
              "releaseTag": {
                "value": [
                  "releaseTag"
                ],
                "description": "The release tag of the datasource to sort"
              },
              "lastUpdatedBy": {
                "value": [
                  "lastUpdatedBy"
                ],
                "description": "The last updated by user of the datasource to sort"
              },
              "lastUpdated": {
                "value": [
                  "lastUpdated"
                ],
                "description": "The last updated by date of the datasource to sort"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return. Default is 25",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip. Default is 0",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    },
                    "sort": [
                      "name"
                    ]
                  },
                  "data": [
                    {
                      "dataSourceId": 123456,
                      "name": "Metadata DS",
                      "code": "METADATADS",
                      "dsType": "AUTOMATIC",
                      "entities": [
                        {
                          "entityId": 234,
                          "name": "Date",
                          "code": "SYSTEM_DATE"
                        }
                      ],
                      "outputRecordSet": "Meta Data RS",
                      "releaseTag": "Build123",
                      "defaultDataSourceName": "Default DS",
                      "dataPreview": "Component123",
                      "lastUpdatedBy": "user123",
                      "lastUpdated": 1715665983563
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view datasources in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/data-sources/{dataSourceCode}": {
      "get": {
        "operationId": "getDataSourceByCode",
        "tags": [
          "Datasource"
        ],
        "summary": "Gets a datasource",
        "description": "Gets a datasource based on the code passed",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "dataSourceCode",
            "description": "The code of the datasource",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "DSCODE"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceData"
                },
                "example": {
                  "data": {
                    "dataSourceId": 123456,
                    "name": "Metadata DS",
                    "code": "METADATADS",
                    "dsType": "AUTOMATIC",
                    "entities": [
                      {
                        "entityId": 234,
                        "name": "Date",
                        "code": "SYSTEM_DATE"
                      }
                    ],
                    "outputRecordSet": "Meta Data RS",
                    "releaseTag": "Build123",
                    "defaultDataSourceName": "Default DS",
                    "dataPreview": "Component123",
                    "lastUpdatedBy": "user123",
                    "lastUpdated": 1715665983563
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view datasources in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied datasource code was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The datasource code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/data-sources/{dataSourceCode}/data": {
      "get": {
        "operationId": "getDataSourceData",
        "tags": [
          "Datasource"
        ],
        "summary": "Gets the data for the datasource",
        "description": "Gets the data for the datasource. There are optional query parameters to filter the data",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "dataSourceCode",
            "description": "The code of the datasource",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "DSCODE"
          },
          {
            "in": "query",
            "name": "entityCodes",
            "description": "A series of query parameter used to filter the data for a datasource. This represents the entities for the datasource. E.g.: entityCodes=ACCOUNT~FUNDS",
            "schema": {
              "type": "string"
            },
            "example": "FUNDS"
          },
          {
            "in": "query",
            "name": "entityKeys",
            "description": "A series of query parameter used to filter the data for a datasource. This is the entity key value for an entity selection. E.g.: entityKeys=1~Test2",
            "schema": {
              "type": "string"
            },
            "example": "Test2"
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return. Default is 25",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip. Default is 0",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - returns data for the datasource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceDataInstance"
                },
                "example": {
                  "data": {
                    "fields": [
                      {
                        "fieldType": "TEXT",
                        "id": 4567,
                        "hide": "false",
                        "name": "Pet",
                        "order": 10
                      }
                    ],
                    "dstInstance": {
                      "dstInstanceId": 123456,
                      "dstInstanceType": "AUTOMATIC",
                      "rows": [
                        {
                          "rowId": 123,
                          "order": 1,
                          "fields": [
                            {
                              "fieldId": 4567,
                              "fieldType": "TEXT",
                              "fieldValue": "Dog"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The supplied datasource code was either missing or invalid, or the query parameters are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The datasource code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view datasources in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied datasource code was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The datasource code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/entities/{entityCode}/values": {
      "get": {
        "operationId": "getEntityValuesByCode",
        "tags": [
          "Entity"
        ],
        "summary": "Gets the entity values",
        "description": "Gets the entity values for the specified entity",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "entityCode",
            "description": "The code of the entity",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "ENTCODE"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The entity field to sort on. Can only be sorted on entity key, description or secondary key fields. Append \"-\" to sort in descending order. If no parameter given, it will be sorted by key field in ascending order by default",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "entity key field": {
                "value": [
                  "entity key field"
                ],
                "description": "The name of the entity key field"
              },
              "entity description field": {
                "value": [
                  "entity description field"
                ],
                "description": "The name of the entity description field"
              },
              "entity secondary key field": {
                "value": [
                  "entity secondary key field"
                ],
                "description": "The name of the entity secondary key field"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return. Default is 25",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip. Default is 0",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          },
          {
            "in": "query",
            "name": "showAll",
            "description": "Whether to show all field values for each entity row. Value should either be 1 or 0. Default is 0 (false). Otherwise, show all field values in a JSON array named \"fieldsWithValues\", with each array value being a string in the format of \"**<FIELD_NAME> : <FIELD_VALUE>**\". Both key and description field values will be included in this JSON array too.",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityFieldValueDTO"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    },
                    "sort": [
                      "entityKey"
                    ]
                  },
                  "data": [
                    {
                      "entityRowId": 27706,
                      "keyValue": "en-gb",
                      "descriptionValue": "English (GB)",
                      "fieldsWithValues": [
                        "language_code : en-gb",
                        "language_desc : English (GB)"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The supplied entity code was either missing or invalid, or the entity was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The entity code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view datasources in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied entity code was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The entity code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/reports": {
      "get": {
        "operationId": "getAllReportDefinitions",
        "tags": [
          "Report"
        ],
        "summary": "Gets all report definitions",
        "description": "Gets all report definitions the user has permissions for",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Can add - to sort",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "name": {
                "value": [
                  "name"
                ],
                "description": "The name of the report to sort"
              },
              "type": {
                "value": [
                  "templateOwner"
                ],
                "description": "The template owner of the report to sort"
              },
              "code": {
                "value": [
                  "code"
                ],
                "description": "The code of the report to sort"
              },
              "releaseTag": {
                "value": [
                  "releaseTag"
                ],
                "description": "The release tag of the report to sort"
              },
              "lastUpdatedBy": {
                "value": [
                  "lastUpdatedBy"
                ],
                "description": "The last updated by user of the report to sort"
              },
              "lastModifiedBy": {
                "value": [
                  "lastModifiedBy"
                ],
                "description": "The last updated by date of the report to sort"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDefinitionList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    }
                  },
                  "data": [
                    {
                      "name": "Test Report",
                      "code": "TEST_REPORT",
                      "releaseTag": "rel1.1",
                      "entities": [
                        {
                          "entityId": 234,
                          "name": "Date",
                          "code": "SYSTEM_DATE"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The supplied report definition code was either missing or invalid, or the report definition was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The report definition code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/reports/{reportDefinitionCode}": {
      "get": {
        "operationId": "getReportDefinitionByCode",
        "tags": [
          "Report"
        ],
        "summary": "Gets a report definition",
        "description": "Gets a report defintion based on the code specified",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "reportDefinitionCode",
            "description": "The code of the report definition",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "RPCODE"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDefinitionData"
                },
                "example": {
                  "data": {
                    "name": "Test Report",
                    "code": "TEST_REPORT",
                    "releaseTag": "rel1.1",
                    "entities": [
                      {
                        "entityId": 234,
                        "name": "Date",
                        "code": "SYSTEM_DATE"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The supplied report definition code was either missing or invalid, or the report definition was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The report definition code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied report definition code was was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The report definition code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/report-instances/generate": {
      "post": {
        "operationId": "startReportGeneration",
        "tags": [
          "Report instance"
        ],
        "summary": "Generates a report",
        "description": "Generates a report using the specified ID and the JSON in the request body",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportGenerationRequestBody"
              },
              "example": {
                "vrs": {
                  "1": {
                    "report": "MONTHLY_REPORT",
                    "tenancy": "CLIENT_REPORTING",
                    "outputFormat": "PDF",
                    "sectionFilter": "Section One",
                    "priority": "2",
                    "startDate": "15 December 2023 00:00:00",
                    "entitySelection": {
                      "ACCOUNT": {
                        "key": "Account name"
                      },
                      "PORTFOLIO": {
                        "key": "Test fund"
                      },
                      "DATE": {
                        "key": "01 January 2020 00:00:00"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Report generation request succeeded and report generation is in progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInstanceDataResponse"
                },
                "example": {
                  "data": {
                    "reportInstanceId": 123456
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "End point location to retrieve the latest status of the report generation. This is v1/{tenant}/report-instances/{reportInstanceId}"
              }
            }
          },
          "400": {
            "description": "The supplied report definition code was either missing or invalid, or the report definition was not found",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "End point location to retrieve the latest status of the report generation. This is v1/{tenant}/report-instances/{reportInstanceId}"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The report definition code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "End point location to retrieve the latest status of the report generation. This is v1/{tenant}/report-instances/{reportInstanceId}"
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The report code could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The report definition code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/report-instances/{reportInstanceId}": {
      "delete": {
        "operationId": "cancelReportGeneration",
        "tags": [
          "Report instance"
        ],
        "summary": "Cancels a report generation",
        "description": "Sends a request to cancel a report generation based on the report instance id passed",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "reportInstanceId",
            "description": "The id of the report instance",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "123456"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation - no response"
          },
          "400": {
            "description": "The supplied report instance id was either missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The ID passed is not a numerical value"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied report instance ID could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The report definition code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getReportInstanceById",
        "tags": [
          "Report instance"
        ],
        "summary": "Gets a report instance based on the ID",
        "description": "Gets a report instance object based on the ID passed",
        "parameters": [
          {
            "in": "path",
            "name": "reportInstanceId",
            "description": "The ID of the report instance",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          },
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInstanceData"
                },
                "example": {
                  "data": {
                    "reportInstanceId": 123456,
                    "reportDefinitionId": 12021,
                    "reportDefinitionName": "Sample Report Name",
                    "reportName": "rep_929_67715_1709130994429.pdf",
                    "userFriendlyReportName": "Sample Report.pdf",
                    "extension": "pdf",
                    "reportRevision": {
                      "reportStatus": "COMPLETED",
                      "startDate": "1709130994000",
                      "finishDate": "1709113002873",
                      "signOffStatus": "PENDING",
                      "signOffNotes": "",
                      "reportReasonCd": "",
                      "description": "Sample report",
                      "languageCode": "en-gb",
                      "outputFormat": "pdf",
                      "percentageComplete": 100
                    },
                    "name": "Sample Report.pdf"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the report file on VRS ready to download"
              }
            }
          },
          "400": {
            "description": "The supplied report instance id was either missing or invalid, or the report instance was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The ID passed is not a numerical value"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied report instance ID could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The report definition code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/report-instances": {
      "get": {
        "operationId": "getAllReportInstances",
        "tags": [
          "Report instance"
        ],
        "summary": "Gets a list of report instances",
        "description": "Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "query",
            "name": "reportDefinitionCode",
            "description": "Acts as a filter for the retrieval process. Filters the report instances that match the report definition code",
            "schema": {
              "type": "string"
            },
            "example": "RPCODE"
          },
          {
            "in": "query",
            "name": "entityCodes",
            "description": "A series of query parameters used to filter the report instances by entity code. E.g: entityCode=DATE&entityCode=SYSTEM_LANG",
            "schema": {
              "type": "string"
            },
            "example": "SYSTEM_LANG"
          },
          {
            "in": "query",
            "name": "entityKeys",
            "description": "A series of query parameters used to filter the report instances by entity keys. E.g: entityKey=en-gb",
            "schema": {
              "type": "string"
            },
            "example": "en-gb"
          },
          {
            "in": "query",
            "name": "sectionFilter",
            "description": "Acts as a filter for the retrieval process. Filters the report instances that match the section filter",
            "schema": {
              "type": "string"
            },
            "example": "testFilter"
          },
          {
            "in": "query",
            "name": "outputFormat",
            "description": "Acts as a filter for the retrieval process. Filters the report instances that match the output format",
            "schema": {
              "type": "string"
            },
            "example": "pdf"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "reportInstanceId": {
                "value": [
                  "reportInstanceId"
                ],
                "description": "The id of report instance to sort"
              },
              "reportStatus": {
                "value": [
                  "reportStatus"
                ],
                "description": "The status of the report to sort"
              },
              "startDate": {
                "value": [
                  "startDate"
                ],
                "description": "The start date of the report to sort"
              },
              "finishDate": {
                "value": [
                  "finishDate"
                ],
                "description": "The finish date of the report to sort"
              },
              "signOffStatus": {
                "value": [
                  "signOffStatus"
                ],
                "description": "The sign off status of the report to sort"
              },
              "outputFormat": {
                "value": [
                  "outputFormat"
                ],
                "description": "The output format of report to sort"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInstanceList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    }
                  },
                  "data": [
                    {
                      "reportInstanceId": 123456,
                      "reportDefinitionId": 12021,
                      "reportDefinitionName": "Sample Report Name",
                      "reportName": "rep_929_67715_1709130994429.pdf",
                      "userFriendlyReportName": "Sample Report.pdf",
                      "extension": "pdf",
                      "reportRevision": {
                        "reportStatus": "COMPLETED",
                        "startDate": "1709130994000",
                        "finishDate": "1709113002873",
                        "signOffStatus": "PENDING",
                        "signOffNotes": "",
                        "reportReasonCd": "",
                        "description": "Sample report",
                        "languageCode": "en-gb",
                        "outputFormat": "pdf",
                        "percentageComplete": 100
                      },
                      "name": "Sample Report.pdf"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/report-instances/{reportInstanceId}/results/{reportFileName}": {
      "get": {
        "operationId": "downloadReportFile",
        "tags": [
          "Report instance"
        ],
        "summary": "Gets the generated file",
        "description": "Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation.\n| outputFormat | Content-Type |\n| ---------------- | ------------|\n|WORD     | application/msword |\n|WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document|\n|EXCEL    |   application/vnd.ms-excel|\n|EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|\n|PPT      |   application/vnd.ms-powerpoint|\n|PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation|\n|PDF      |   application/pdf|\n|CSV      |   text/csv|\n|XML      |   application/xml|\n|VXML     |   application/xml|\n|HTML     |   text/html|\n|PS       |   application/postscript|",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "reportInstanceId",
            "description": "Used to validate that report file name belongs to the report instance passed",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          },
          {
            "in": "path",
            "name": "reportFileName",
            "description": "The report file name that has to be retrieved. report file name. E.g: xyz.pdf",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "xyz.pdf"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/vnd.ms-powerpoint": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/msword": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/postscript": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The supplied report instance id was either missing or invalid or the report instance was not found. The supplied report file name was either invalid or not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The ID passed is not a numerical value"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view the generated file in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/report-instances/{reportInstanceId}/logs": {
      "get": {
        "operationId": "getReportGenerationLogs",
        "tags": [
          "Report instance"
        ],
        "summary": "Gets a list of logs for the report instance generation",
        "description": "Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors & warnings'",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "reportInstanceId",
            "description": "Used to validate that report file name belongs to the report instance passed",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          },
          {
            "in": "query",
            "name": "errorsOnly",
            "description": "If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly=true",
            "schema": {
              "type": "string"
            },
            "example": "true"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Can add - to sort",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "sequenceNumber": {
                "value": [
                  "sequenceNumber"
                ],
                "description": "The sequence number of the log entry"
              },
              "message": {
                "value": [
                  "message"
                ],
                "description": "The log message to sort"
              },
              "type": {
                "value": [
                  "type"
                ],
                "description": "The type of the log to sort"
              },
              "updatedDate": {
                "value": [
                  "updatdeDate"
                ],
                "description": "The updated date of the log to sort"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInstanceLogList"
                },
                "example": {
                  "data": [
                    {
                      "sequenceNumber": 9464295,
                      "message": "Get Data Completed",
                      "type": "LOG",
                      "updateDate": "1709176498527"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view reports in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied report instance ID could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The report instance ID passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to\n    application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/schedule-definitions": {
      "get": {
        "operationId": "getScheduleDefinitions",
        "tags": [
          "Workflow"
        ],
        "summary": "Retrieves a list of all schedule definitions",
        "description": "Retrieves all schedule definitions the user has permissions for. User has sort and filter parameters available to use.",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "query",
            "name": "scheduleType",
            "description": "Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule type. Accepts multiple values separated by a comma, e.g. ?scheduleType=REPEATING,MANUAL",
            "schema": {
              "type": "string",
              "enum": [
                "MANUAL",
                "REPEATING"
              ]
            },
            "example": "MANUAL"
          },
          {
            "in": "query",
            "name": "reportDate",
            "description": "Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule report date.  Accepts multiple values separated by a comma, e.g. ?reportDate=LAST_DAY_OF_PREV_MONTH,CREATION_DATE",
            "schema": {
              "type": "string",
              "enum": [
                "LAST_DAY_OF_PREV_MONTH",
                "LAST_BUSINESS_DAY_OF_PREV_MONTH",
                "CREATION_DATE",
                "DAY_BEFORE_CREATION_DATE",
                "BUSINESS_DAY_BEFORE_CREATION_DATE",
                "LAST_DAY_OF_MONTH_SCHEDULE_CREATED",
                "LAST_BUSINESS_DAY_OF_MONTH_SCHEDULE_CREATED",
                "LAST_BUSINESS_DAY_OF_PREVIOUS_WEEK_SCHEDULE_CREATED",
                "LAST_BUSINESS_DAY_OF_WEEK_SCHEDULE_CREATED",
                "TWO_BUSINESS_DAYS_BEFORE_SCHEDULE_CREATED"
              ]
            },
            "example": "LAST_BUSINESS_DAY_OF_PREV_MONTH"
          },
          {
            "in": "query",
            "name": "lastUpdatedBy",
            "description": "Acts as a filter for the retrieval process. Filters the schedule definitions where the provided parameter value matches or is a substring of the last updated by value of the schedule definitions",
            "schema": {
              "type": "string"
            },
            "example": "John"
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00).",
            "schema": {
              "type": "string"
            },
            "example": "25 March 2024 00:00:00"
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00).",
            "schema": {
              "type": "string"
            },
            "example": "25 March 2024 00:00:00"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Can add '-' to the start of the parameter value to sort in descending order.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "name": {
                "value": [
                  "name"
                ],
                "description": "The name of the schedule definition"
              },
              "scheduleGroup": {
                "value": [
                  "scheduleGroup"
                ],
                "description": "The schedule group of the schedule definition"
              },
              "scheduleType": {
                "value": [
                  "scheduleType"
                ],
                "description": "The schedule type"
              },
              "owner": {
                "value": [
                  "owner"
                ],
                "description": "The owner role name of the schedule definition"
              },
              "code": {
                "value": [
                  "code"
                ],
                "description": "The code of the schedule definition"
              },
              "businessCalendar": {
                "value": [
                  "businessCalendar"
                ],
                "description": "The country of the business calender the schedule definition follows"
              },
              "reportDate": {
                "value": [
                  "reportDate"
                ],
                "description": "The reporting date of the schedule"
              },
              "lastUpdated": {
                "value": [
                  "lastUpdated"
                ],
                "description": "The last updated date of the schedule definition"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleDefinitionsList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    },
                    "sort": [
                      "name"
                    ]
                  },
                  "data": [
                    {
                      "scheduleDefinitionId": 42,
                      "lastUpdatedBy": "John",
                      "notes": "",
                      "name": "Flash Report to Portal",
                      "code": "FLASH_REPORT",
                      "scheduleGroup": "Flash Report",
                      "businessCalendar": "United States",
                      "deleteScheduleAfterDays": 3,
                      "scheduleType": "MANUAL",
                      "reportDate": "TWO_BUSINESS_DAYS_BEFORE_SCHEDULE_CREATED",
                      "numberOfObligations": 1,
                      "ownerRole": {
                        "code": "ADMIN",
                        "name": "Admin",
                        "roleId": 21
                      },
                      "entities": [
                        {
                          "entityId": 97,
                          "name": "Date",
                          "code": "SYSTEM_DATE"
                        }
                      ],
                      "numberOfPackages": 0,
                      "lastUpdated": "1713435311043"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Required values not provided in request parameter or invalid values given (e.g. tenant, scheduleType)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The tenancy provided is invalid or not active"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. No permissions to view schedule definitions in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to\n    application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/schedules/{scheduleId}": {
      "get": {
        "operationId": "getScheduleById",
        "tags": [
          "Workflow"
        ],
        "summary": "Gets a schedule based on the schedule ID",
        "description": "Gets a schedule Object based on the schedule ID passed.",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "scheduleId",
            "description": "The Id of the schedule",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "16304"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponseData"
                },
                "example": {
                  "data": {
                    "scheduleId": 16304,
                    "lastUpdatedBy": "test_user",
                    "notes": "Automatically created at 2017-05-31 10:17:05 Europe/London",
                    "name": "Test schddefn _1234 (2017.05.31 10:17)",
                    "definitionName": "Test schddefn _1234",
                    "startDate": "1586870729577",
                    "finishDate": "1694588295897",
                    "scheduleGroup": "test_group",
                    "businessCalendar": "United Kingdom",
                    "reportDate": "1586802600577",
                    "lastUpdated": "1694608095920",
                    "noOfTasks": 12,
                    "owner": "Admin",
                    "status": "RUNNING",
                    "hasTaskGenIssues": false
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Required values not provided in request parameter or invalid values given (e.g. tenant)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The tenancy provided is invalid or not active"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. No permissions to view schedule in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item. Invalid role permission for schedule id 34567"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied schedule ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The Schedule id [351865] passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/schedules": {
      "get": {
        "operationId": "getSchedules",
        "tags": [
          "Workflow"
        ],
        "summary": "Retrieves a list of all schedules",
        "description": "Retrieves all schedules the user has permissions for. User has sort and filter parameters available to use.",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Acts as a filter for the retrieval process. Filters the schedules that match the given status. Accepts multiple values separated by a comma, e.g. ?status=INITIALISED,RUNNING",
            "schema": {
              "type": "string",
              "enum": [
                "INITIALISED",
                "RUNNING",
                "CANCELLED",
                "SUSPENDED",
                "FINISHED",
                "CLOSED",
                "GENERATING_TASKS"
              ]
            },
            "example": "RUNNING"
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00).",
            "schema": {
              "type": "string"
            },
            "example": "14 June 2024 00:00:00"
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00).",
            "schema": {
              "type": "string"
            },
            "example": "14 June 2024 00:00:00"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Can add '-' to the start of the parameter value to sort in descending order.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "scheduleId": {
                "value": [
                  "scheduleId"
                ],
                "description": "The id of the schedule"
              },
              "name": {
                "value": [
                  "name"
                ],
                "description": "The name of the schedule"
              },
              "scheduleGroup": {
                "value": [
                  "scheduleGroup"
                ],
                "description": "The schedule group of the schedule"
              },
              "status": {
                "value": [
                  "status"
                ],
                "description": "The status of the schedule"
              },
              "lastUpdated": {
                "value": [
                  "lastUpdated"
                ],
                "description": "The last updated date/time of the schedule"
              },
              "owner": {
                "value": [
                  "owner"
                ],
                "description": "The owner of the schedule"
              },
              "noOfTasks": {
                "value": [
                  "noOfTasks"
                ],
                "description": "The no of tasks in the schedule"
              },
              "businessCalendar": {
                "value": [
                  "businessCalendar"
                ],
                "description": "The business calendar of the schedule"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulesList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    },
                    "sort": [
                      "name"
                    ]
                  },
                  "data": [
                    {
                      "scheduleId": 16304,
                      "lastUpdatedBy": "test_user",
                      "notes": "Automatically created at 2017-05-31 10:17:05 Europe/London",
                      "name": "Test schddefn _1234 (2017.05.31 10:17)",
                      "definitionName": "Test schddefn _1234",
                      "startDate": "1586870729577",
                      "finishDate": "1694588295897",
                      "scheduleGroup": "test_group",
                      "businessCalendar": "United Kingdom",
                      "reportDate": "1586802600577",
                      "lastUpdated": "1694608095920",
                      "noOfTasks": 12,
                      "owner": "Admin",
                      "status": "RUNNING"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Required values not provided in request parameter or invalid values given (e.g. tenant, status)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The tenancy provided is invalid or not active"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. No permissions to view schedule definitions in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to\n    application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/schedules/{scheduleDefinitionCode}": {
      "post": {
        "operationId": "generateSchedule",
        "tags": [
          "Workflow"
        ],
        "summary": "Creates schedule for the specified schedule definition",
        "description": "Creates schedule for the specified Schedule Definition code and sets to running based on the param in the JSON in the request body",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "scheduleDefinitionCode",
            "description": "The schedule definition code for which to generate the schedule",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TEST_SCHEDULE_DEF"
          },
          {
            "in": "query",
            "name": "setToRunning",
            "description": "This parameter is used to set the generated schedule's status to Running.If parameter is set to true, the generated schedule will be set to Running. If no value is provided, the schedule will remain in Initialised status.",
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "202": {
            "description": "Schedule generation request succeeded and tasks have been generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateScheduleResponse"
                },
                "example": {
                  "data": {
                    "scheduleInstanceId": 16304,
                    "status": "RUNNING"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The supplied schedule definition code missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The schedule definition code passed was invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to create schedule in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The schedule definition code could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The schedule definition code passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/schedules/{scheduleId}/{status}": {
      "patch": {
        "operationId": "updateScheduleStatus",
        "tags": [
          "Workflow"
        ],
        "summary": "Update schedule status for specified schedule",
        "description": "Updated the schedule status for the specified schedule id based on the given status",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "scheduleId",
            "description": "The schedule id for which to update the status",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          },
          {
            "in": "path",
            "name": "status",
            "description": "The schedule status that needs to be updated only if the transition is valid",
            "schema": {
              "type": "string",
              "enum": [
                "INITIALISED",
                "RUNNING",
                "CANCELLED",
                "SUSPENDED",
                "FINISHED",
                "CLOSED",
                "GENERATING_TASKS"
              ]
            },
            "required": true,
            "example": "RUNNING"
          }
        ],
        "responses": {
          "200": {
            "description": "Update schedule request succeeded and status has been changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleStatusUpdateResponse"
                },
                "example": {
                  "data": {
                    "scheduleId": 16304,
                    "lastUpdatedBy": "test_user",
                    "notes": "Automatically created at 2017-05-31 10:17:05 Europe/London",
                    "name": "Test schddefn _1234 (2017.05.31 10:17)",
                    "definitionName": "Test schddefn _1234",
                    "startDate": "1586870729577",
                    "finishDate": "1694588295897",
                    "scheduleGroup": "test_group",
                    "businessCalendar": "United Kingdom",
                    "reportDate": "1586802600577",
                    "lastUpdated": "1694608095920",
                    "noOfTasks": 12,
                    "owner": "Admin",
                    "status": "RUNNING"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Schedule status in the request is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "Schedule status is missing or invalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to update schedule in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to update this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The schedule id could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "JPQL query: No records returned"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/schedules/{scheduleId}/generate-tasks": {
      "post": {
        "operationId": "generateScheduleTasks",
        "tags": [
          "Workflow"
        ],
        "summary": "Generates the tasks for the initialised schedule",
        "description": "Generates the schedule tasks for the specified schedule id",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "scheduleId",
            "description": "The schedule id for which to generate the tasks",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "responses": {
          "202": {
            "description": "Task generation request succeeded and task generation is in progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleStatusUpdateResponse"
                },
                "example": {
                  "data": {
                    "scheduleId": 16304,
                    "lastUpdatedBy": "test_user",
                    "notes": "Automatically created at 2017-05-31 10:17:05 Europe/London",
                    "name": "Test schddefn _1234 (2017.05.31 10:17)",
                    "definitionName": "Test schddefn _1234",
                    "startDate": "1586870729577",
                    "finishDate": "1694588295897",
                    "scheduleGroup": "test_group",
                    "businessCalendar": "United Kingdom",
                    "reportDate": "1586802600577",
                    "lastUpdated": "1694608095920",
                    "noOfTasks": 12,
                    "owner": "Admin",
                    "status": "Running"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Tasks could not be generated because the schedule is not in an initialized state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "Could not generate the tasks because the schedule is not in an initialized state"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to generate tasks for the schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item. User has no function permissions for Workflow Schedules"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The schedule id could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The schedule id [3581196] passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server might have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/schedules/{scheduleId}/logs": {
      "get": {
        "operationId": "getScheduleGenerationLogs",
        "tags": [
          "Workflow"
        ],
        "summary": "Gets the generation logs for a specific schedule",
        "description": "Gets the generation logs for a specific schedule based on the Schedule ID. Allows the user to sort and filter logs.",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "scheduleId",
            "description": "The scheduleId for which the logs are requested",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Acts as a filter for the retrieval process. Filters the log instances that match the input type",
            "schema": {
              "type": "string",
              "enum": [
                "INFO",
                "WARN",
                "ERROR",
                "DEBUG"
              ]
            },
            "example": "INFO"
          },
          {
            "in": "query",
            "name": "message",
            "description": "Acts as a filter for the retrieval process. Filters the log instances that match the input message",
            "schema": {
              "type": "string"
            },
            "example": "package definition"
          },
          {
            "in": "query",
            "name": "logSet",
            "description": "Acts as a filter for the retrieval process. Filters the log instances that match the input logset",
            "schema": {
              "type": "string"
            },
            "example": "1"
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00).",
            "schema": {
              "type": "string"
            },
            "example": "25 March 2024 00:00:00"
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00).",
            "schema": {
              "type": "string"
            },
            "example": "25 March 2024 00:00:00"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Can add - to sort",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "sequenceNumber": {
                "value": [
                  "sequenceNumber"
                ],
                "description": "The sequence number of the log entry"
              },
              "type": {
                "value": [
                  "type"
                ],
                "description": "The type of the log to sort"
              },
              "lastUpdated": {
                "value": [
                  "lastUpdated"
                ],
                "description": "The date of the log to sort"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleGenerationLogList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    },
                    "sort": [
                      "name"
                    ]
                  },
                  "data": [
                    {
                      "sequenceNumber": 10,
                      "message": "Creating tasks",
                      "type": "INFO",
                      "lastUpdated": "1709176498527",
                      "logSet": 1
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Required values not provided in request parameter or invalid values given (e.g. tenant, type)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The tenancy provided is invalid or not active"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view schedule logs in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to\n    application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/tasks": {
      "get": {
        "operationId": "getTasks",
        "tags": [
          "Workflow"
        ],
        "summary": "Retrieves a list of all tasks",
        "description": "Retrieves all tasks the user has permissions for. User has sort and filter parameters available to use.",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "query",
            "name": "taskType",
            "description": "Acts as a filter for the retrieval process. Filters the tasks that match the given task type. Accepts multiple values separated by a comma, e.g. ?taskType=SIGNOFF_DATA,PACKAGE_REPORTS",
            "schema": {
              "type": "string",
              "enum": [
                "WAIT_FOR_DATA",
                "CUSTOM_DATA",
                "CREATE_MANUAL_DATA",
                "CREATE_FILTERED_DATA",
                "GET_DATA",
                "GENERATE_PREVIEW",
                "SIGNOFF_DATA",
                "CUSTOM_GENERATE",
                "GENERATE_REPORT",
                "SIGNOFF_REPORT",
                "CUSTOM_DELIVERY",
                "EMAIL_REPORT",
                "POST_REPORT",
                "FTP_REPORT",
                "CUSTOM_OTHER",
                "COPY_REPORT_FILE",
                "PACKAGE_REPORTS"
              ]
            },
            "example": "PACKAGE_REPORTS"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Acts as a filter for the retrieval process. Filters the tasks that match the given status. Accepts multiple values separated by a comma, e.g. ?status=PENDING,AWAITING_CORRECTION",
            "schema": {
              "type": "string",
              "enum": [
                "COMPLETED",
                "IN_PROGRESS",
                "AWAITING_CORRECTION",
                "PENDING",
                "SKIPPED",
                "FAILED_REJECTED"
              ]
            },
            "example": "PENDING"
          },
          {
            "in": "query",
            "name": "role",
            "description": "Acts as a filter for the retrieval process. Filters the tasks that match the input role assigned to the task",
            "schema": {
              "type": "string"
            },
            "example": "Client Reporting Manager"
          },
          {
            "in": "query",
            "name": "user",
            "description": "Acts as a filter for the retrieval process. Filters the tasks that match the input user name assigned to the task",
            "schema": {
              "type": "string"
            },
            "example": "John"
          },
          {
            "in": "query",
            "name": "immediateTasksOnly",
            "description": "Acts as a filter for the retrieval process. Filters the immediate tasks if the parameter value is set to true",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "in": "query",
            "name": "scheduleId",
            "description": "Acts as a filter for the retrieval process. Filters the schedule tasks for the Schedule Id passed in the parameter value",
            "schema": {
              "type": "integer"
            },
            "example": 37325
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Can add '-' to the start of the parameter value to sort in descending order.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "taskId": {
                "value": [
                  "taskId"
                ],
                "description": "The id of the task"
              },
              "scheduleName": {
                "value": [
                  "scheduleName"
                ],
                "description": "The name of the schedule for the task"
              },
              "taskType": {
                "value": [
                  "taskType"
                ],
                "description": "The type of the task"
              },
              "lastUpdatedBy": {
                "value": [
                  "lastUpdatedBy"
                ],
                "description": "The last updated user of the task"
              },
              "escalationLevel": {
                "value": [
                  "escalationLevel"
                ],
                "description": "The escalation level of the task"
              },
              "status": {
                "value": [
                  "status"
                ],
                "description": "The status of the task"
              },
              "description": {
                "value": [
                  "description"
                ],
                "description": "The description of the task"
              },
              "role": {
                "value": [
                  "role"
                ],
                "description": "The role assigned to the task"
              },
              "user": {
                "value": [
                  "user"
                ],
                "description": "The user assigned to the task"
              },
              "expectedStartDate": {
                "value": [
                  "expectedStartDate"
                ],
                "description": "The expected start date date/time of the task"
              },
              "expectedEndDate": {
                "value": [
                  "expectedEndDate"
                ],
                "description": "The expected end date date/time of the task"
              },
              "actualStartDate": {
                "value": [
                  "actualStartDate"
                ],
                "description": "The actual start date date/time of the task"
              },
              "lastUpdated": {
                "value": [
                  "lastUpdated"
                ],
                "description": "The last updated date/time of the task"
              },
              "order": {
                "value": [
                  "order"
                ],
                "description": "The order of the task"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    },
                    "sort": [
                      "taskId"
                    ]
                  },
                  "data": [
                    {
                      "taskId": 135621,
                      "lastUpdatedBy": "test user",
                      "description": "Sign Off 9491 ds(Bat/Germany/U.S. Dollars)",
                      "taskType": "SIGNOFF_DATA",
                      "status": "PENDING",
                      "expectedStartDate": 1725129000000,
                      "expectedEndDate": 1725129000000,
                      "actualStartDate": null,
                      "notes": "",
                      "escalationLevel": 4,
                      "immediate": true,
                      "reason": null,
                      "outputFormat": null,
                      "order": 7,
                      "scheduleName": "mytaskonly (2024.09.30 15:28)",
                      "mandatoryTaskApproveNotes": false,
                      "lastUpdated": 1727710396000,
                      "role": "Admin",
                      "action": true,
                      "user": "test user"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Required values not provided in request parameter or invalid values given (e.g. tenant, status)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The tenancy provided is invalid or not active"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. No permissions to view tasks in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The supplied schedule Id was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notFound",
                      "title": "The schedule Id passed was not found"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/tasks/{taskId}": {
      "get": {
        "operationId": "getTask",
        "tags": [
          "Workflow"
        ],
        "summary": "Gets a task based on the task ID",
        "description": "Gets a task Object based on the task ID passed.",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "taskId",
            "description": "The Id of the task",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "135709"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsObject"
                },
                "example": {
                  "data": {
                    "lastUpdatedBy": "testUser",
                    "description": "Package Reports task",
                    "taskType": "PACKAGE_REPORTS",
                    "status": "PENDING",
                    "expectedStartDate": 1730399400000,
                    "expectedEndDate": 1730399400000,
                    "actualStartDate": null,
                    "notes": "sent for review",
                    "immediate": false,
                    "reason": null,
                    "outputFormat": null,
                    "scheduleName": "Dummy Schedule",
                    "mandatoryTaskApproveNotes": false,
                    "lastUpdated": 1730399400000,
                    "role": "Admin",
                    "action": false,
                    "user": "test user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Required values not provided in request parameter or invalid values given (e.g. tenant)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The tenancy provided is invalid or not active"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. No permissions to view tasks in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "updateTaskDetails",
        "tags": [
          "Workflow"
        ],
        "summary": "Updates the task details for the specified task.",
        "description": "Updates the task details for the specified task.",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "taskId",
            "description": "The unique identifier for task",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskPatchRequestBody"
              },
              "example": {
                "data": {
                  "status": "COMPLETED",
                  "expectedStartDate": "25 December 2024 00:00:00",
                  "expectedEndDate": "25 December 2024 01:00:00",
                  "actualStartDate": "25 December 2024 00:00:00",
                  "notes": "string",
                  "role": "Admin",
                  "user": "user1",
                  "action": "Reject",
                  "reason": "Reason for rejection"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPatchResponseObject"
                },
                "example": {
                  "data": {
                    "task": {
                      "lastUpdatedBy": "testUser",
                      "description": "Package Reports task",
                      "taskType": "PACKAGE_REPORTS",
                      "status": "PENDING",
                      "expectedStartDate": 1730399400000,
                      "expectedEndDate": 1730399400000,
                      "actualStartDate": null,
                      "notes": "sent for review",
                      "immediate": false,
                      "reason": null,
                      "outputFormat": null,
                      "scheduleName": "Dummy Schedule",
                      "mandatoryTaskApproveNotes": false,
                      "lastUpdated": 1730399400000,
                      "role": "Admin",
                      "action": false,
                      "user": "test user"
                    },
                    "messages": [
                      null
                    ]
                  }
                }
              }
            }
          },
          "206": {
            "description": "Request was partially successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPatchResponseObject"
                },
                "example": {
                  "data": {
                    "task": {
                      "lastUpdatedBy": "testUser",
                      "description": "Package Reports task",
                      "taskType": "PACKAGE_REPORTS",
                      "status": "PENDING",
                      "expectedStartDate": 1730399400000,
                      "expectedEndDate": 1730399400000,
                      "actualStartDate": null,
                      "notes": "sent for review",
                      "immediate": false,
                      "reason": null,
                      "outputFormat": null,
                      "scheduleName": "Dummy Schedule",
                      "mandatoryTaskApproveNotes": false,
                      "lastUpdated": 1730399400000,
                      "role": "Admin",
                      "action": false,
                      "user": "test user"
                    },
                    "messages": [
                      "Task status cannot be updated as the schedule is Cancelled/Closed/Finished"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Required values not provided in request parameter or invalid values given (e.g. tenant)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The tenancy provided is invalid or not active"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. No permissions to view the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/tasks/{taskId}/history": {
      "get": {
        "operationId": "getTaskHistory",
        "tags": [
          "Workflow"
        ],
        "summary": "Gets the task history for a specific task",
        "description": "Gets the task history for a specific task based on the Task ID. Allows the user to sort and filter the task history entries.",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "The code of the tenancy",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "TENANT"
          },
          {
            "in": "path",
            "name": "taskId",
            "description": "The taskId for which the history of the specific task is requested",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          },
          {
            "in": "query",
            "name": "actionType",
            "description": "Acts as a filter for the retrieval process. Filters the task history entries that match the given action type",
            "schema": {
              "type": "string",
              "enum": [
                "Status Changed",
                "Notes Changed",
                "Reason code Changed",
                "Current Role Changed",
                "Current User Changed",
                "Expected Start Changed",
                "Expected End Changed",
                "Actual Start Changed",
                "Task Dependency Added",
                "Task Dependency Removed"
              ]
            },
            "example": "Status Changed"
          },
          {
            "in": "query",
            "name": "reasonCode",
            "description": "Acts as a filter for the retrieval process. Filters the task history entries that match the given reason code",
            "schema": {
              "type": "string"
            },
            "example": "Missing Data"
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Acts as a filter for the retrieval process. Filters the task history events based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00).",
            "schema": {
              "type": "string"
            },
            "example": "25 March 2024 00:00:00"
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "Acts as a filter for the retrieval process. Filters the task history events based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00).",
            "schema": {
              "type": "string"
            },
            "example": "25 March 2024 00:00:00"
          },
          {
            "in": "query",
            "name": "_sort",
            "description": "The column to sort on. Can add - to sort for descending order",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "dateAndTime": {
                "value": [
                  "dateAndTime"
                ],
                "description": "The date and time of the task history event"
              },
              "actionType": {
                "value": [
                  "actionType"
                ],
                "description": "The action type of the task history event"
              },
              "reasonCode": {
                "value": [
                  "reasonCode"
                ],
                "description": "The reason code of the task history event"
              }
            }
          },
          {
            "in": "query",
            "name": "_paginationLimit",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "_paginationOffset",
            "description": "Non-negative number of entries to skip",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskHistoryList"
                },
                "example": {
                  "meta": {
                    "pagination": {
                      "total": 10,
                      "isEstimatedTotal": false
                    },
                    "sort": [
                      "dateAndTime"
                    ]
                  },
                  "data": [
                    {
                      "taskType": "GENERATE_REPORT",
                      "description": "Generate Simple Report",
                      "dateAndTime": 1730399400000,
                      "actionType": "Status Changed",
                      "notes": "Start generating",
                      "reasonCode": "Start generating",
                      "details": "Status is changed to In-progress"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Required values not provided in request parameter or invalid values given (e.g. tenant, taskId)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "parameterError",
                      "title": "The tenancy provided is invalid or not active"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "No permissions to view task in VRS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthorized",
                      "title": "No permissions to view this item"
                    }
                  ]
                }
              }
            }
          },
          "406": {
            "description": "Unsupported Accept header. Header needs to be set to application/json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAcceptable",
                      "title": "Unsupported Accept header. Header needs to be set to application/json"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/scim/v2/Users": {
      "get": {
        "operationId": "getAllUsers",
        "tags": [
          "SCIM"
        ],
        "summary": "Retrieves a list of VRS users",
        "description": "Retrieves a list of VRS users",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer"
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "startIndex",
            "description": "The 1-based index of the first query result",
            "schema": {
              "type": "integer"
            },
            "example": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUserListResponse"
                },
                "example": {
                  "totalResults": 10,
                  "itemsPerPage": 10,
                  "startIndex": 5,
                  "Resources": [
                    {
                      "schemas": [
                        "urn:scim:schemas:extension:FactSet:VRS:1.0:User"
                      ],
                      "id": "123456",
                      "userName": "TestUser",
                      "name": {
                        "formatted": "Test User"
                      },
                      "userType": "0",
                      "active": true,
                      "authenticatedUserName": "TestUser",
                      "tenant": "TENANT",
                      "phoneNumbers": [
                        {
                          "value": "9876543210",
                          "type": "work",
                          "primary": true
                        }
                      ],
                      "emails": [
                        {
                          "value": "dummy@ex.com",
                          "type": "work",
                          "primary": true
                        }
                      ],
                      "photos": [
                        {
                          "value": "Photopath",
                          "type": "work",
                          "primary": true
                        }
                      ],
                      "tenancies": [
                        {
                          "value": "TENANT"
                        }
                      ],
                      "groups": [
                        {
                          "value": "218",
                          "$ref": "https://api.factset.com/vrsapi/scim/v2/Groups/218",
                          "type": "Group",
                          "display": "API Group"
                        }
                      ],
                      "domainCode": "TESTDOMAIN",
                      "isAdministrator": false,
                      "meta": {
                        "resourceType": "VRSUser",
                        "created": "2024-03-13T08:01:32.297Z",
                        "lastModified": "2024-03-15T09:48:21.375Z",
                        "location": "https://api.factset.com/vrsapi/scim/v2/Users/123456"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to view users",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have view or update permission",
                  "status": "403"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createUser",
        "tags": [
          "SCIM"
        ],
        "summary": "Creates a user",
        "description": "Creates a VRS user",
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScimUserJSONRequest"
              },
              "example": {
                "userName": "vrstestuser",
                "name": {
                  "formatted": "Vrstest User"
                },
                "userType": "Employee",
                "active": true,
                "authenticatedUserName": "vrstestuser",
                "tenant": "XXXXXXXXXX",
                "emails": [
                  {
                    "value": "xyz@email.com",
                    "type": "work",
                    "primary": true
                  }
                ],
                "phoneNumbers": [
                  {
                    "value": "1234567890",
                    "type": "work",
                    "primary": true
                  }
                ],
                "domainCode": "XXXXXXXXXX"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedScimUserJSONResponse"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:User"
                  ],
                  "id": "218",
                  "userName": "vrstestuser",
                  "name": {
                    "formatted": "Vrstest User"
                  },
                  "userType": "0",
                  "preferredLanguage": "en-gb",
                  "active": true,
                  "authenticatedUserName": "vrstestuser",
                  "tenant": "XXXXXXXXXX",
                  "phoneNumbers": [
                    {
                      "value": "1234567890",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "emails": [
                    {
                      "value": "xyz@email.com",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "tenancies": [
                    {
                      "value": "XXXXXXXXXX"
                    }
                  ],
                  "photos": [
                    {
                      "value": "Photopath",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "domainCode": "XXXXXXXXXX",
                  "isAdministrator": false,
                  "meta": {
                    "resourceType": "VRSUser",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-13T08:01:32.297Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Users/218"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the newly create user, for example https://example.com/VRSAPI/scim/v2/Users/1"
              }
            }
          },
          "400": {
            "description": "Bad Request, required values not provided in JSON request body (e.g. tenant, name or userName (loginID)",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "No tenant code given",
                  "status": "400"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to create users or it does not have requested tenancy assigned to it",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have update permission for users",
                  "status": "403"
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User already exists",
                  "status": "409"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      }
    },
    "/scim/v2/Users/{userId}": {
      "get": {
        "operationId": "getUserById",
        "tags": [
          "SCIM"
        ],
        "summary": "Retrieves a VRS User",
        "description": "Retrieves a VRS user based on their ID",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:User"
                  ],
                  "id": "123456",
                  "userName": "TestUser",
                  "name": {
                    "formatted": "Test User"
                  },
                  "userType": "0",
                  "active": true,
                  "authenticatedUserName": "TestUser",
                  "tenant": "TENANT",
                  "phoneNumbers": [
                    {
                      "value": "9876543210",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "emails": [
                    {
                      "value": "dummy@ex.com",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "photos": [
                    {
                      "value": "Photopath",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "tenancies": [
                    {
                      "value": "TENANT"
                    }
                  ],
                  "groups": [
                    {
                      "value": "218",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Groups/218",
                      "type": "Group",
                      "display": "API Group"
                    }
                  ],
                  "domainCode": "TESTDOMAIN",
                  "isAdministrator": false,
                  "meta": {
                    "resourceType": "VRSUser",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Users/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the user, for example https://example.com/VRSAPI/scim/v2/Users/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to view users",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to view users",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteUserById",
        "tags": [
          "SCIM"
        ],
        "summary": "Deletes a VRS user",
        "description": "Deletes a VRS user (this marks them as 'Deleted' in the database)",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden, user does not have permission to delete users",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to delete users",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchUserById",
        "tags": [
          "SCIM"
        ],
        "summary": "Add or remove VRS user attributes",
        "description": "Adds or removes VRS user attributes based on the JSON properties",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/ScimUserPatchRequestBody"
              },
              "example": {
                "schemas": [
                  "urn:ietf:params:scim:api:messages:2.0:PatchOp"
                ],
                "Operations": [
                  {
                    "op": "replace",
                    "path": "name.formatted",
                    "value": "Vrs Test User"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:User"
                  ],
                  "id": "123456",
                  "userName": "TestUser",
                  "name": {
                    "formatted": "Vrs Test User"
                  },
                  "userType": "0",
                  "active": true,
                  "authenticatedUserName": "TestUser",
                  "tenant": "TENANT",
                  "phoneNumbers": [
                    {
                      "value": "9876543210",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "emails": [
                    {
                      "value": "dummy@ex.com",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "photos": [
                    {
                      "value": "Photopath",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "tenancies": [
                    {
                      "value": "TENANT"
                    }
                  ],
                  "groups": [
                    {
                      "value": "218",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Groups/218",
                      "type": "Group",
                      "display": "API Group"
                    }
                  ],
                  "domainCode": "TESTDOMAIN",
                  "isAdministrator": false,
                  "meta": {
                    "resourceType": "VRSUser",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Users/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the updated user, for example https://example.com/VRSAPI/scim/v2/Users/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to update users",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to update users",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateUserById",
        "tags": [
          "SCIM"
        ],
        "summary": "Updates a VRS user",
        "description": "Updates (replaces) a VRS user with the properties in the JSON",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/ScimUser"
              },
              "example": {
                "userName": "vrstestuser",
                "name": {
                  "formatted": "Vrstest User"
                },
                "userType": "Employee",
                "active": true,
                "authenticatedUserName": "vrstestuser",
                "tenant": "XXXXXXXXXX",
                "emails": [
                  {
                    "value": "xyz@email.com",
                    "type": "work",
                    "primary": true
                  }
                ],
                "phoneNumbers": [
                  {
                    "value": "1234567890",
                    "type": "work",
                    "primary": true
                  }
                ],
                "domainCode": "XXXXXXXXXX"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:User"
                  ],
                  "id": "123456",
                  "userName": "vrstestuser",
                  "name": {
                    "formatted": "Vrstest User"
                  },
                  "userType": "0",
                  "active": true,
                  "authenticatedUserName": "vrstestuser",
                  "tenant": "XXXXXXXXXX",
                  "phoneNumbers": [
                    {
                      "value": "1234567890",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "emails": [
                    {
                      "value": "xyz@email.com",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "photos": [
                    {
                      "value": "Photopath",
                      "type": "work",
                      "primary": true
                    }
                  ],
                  "tenancies": [
                    {
                      "value": "XXXXXXXXXX"
                    }
                  ],
                  "groups": [
                    {
                      "value": "218",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Groups/218",
                      "type": "Group",
                      "display": "API Group"
                    }
                  ],
                  "domainCode": "XXXXXXXXXX",
                  "isAdministrator": false,
                  "meta": {
                    "resourceType": "VRSUser",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Users/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the updated user, for example https://example.com/VRSAPI/scim/v2/Users/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to update users",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to update users",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      }
    },
    "/scim/v2/Groups": {
      "get": {
        "operationId": "getAllGroups",
        "tags": [
          "SCIM"
        ],
        "summary": "Retrieves a list of VRS role",
        "description": "Retrieves VRS roles",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "description": "Non-negative maximum number of entries to return",
            "schema": {
              "type": "integer"
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "startIndex",
            "description": "The 1-based index of the first query result",
            "schema": {
              "type": "integer"
            },
            "example": 5
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Acts as a filter for the retrieval process. if filter=tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter=tenant eq MASTER,DEMO",
            "schema": {
              "type": "string"
            },
            "example": "tenant eq \"MASTER,DEMO\""
          },
          {
            "in": "query",
            "name": "sortBy",
            "description": "The column to sort on. If parameter is not given, no sorting will be done",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "displayName": {
                "value": [
                  "displayName"
                ],
                "description": "The display name of the group to sort"
              }
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "ascending": {
                "value": [
                  "ascending"
                ],
                "description": "The sort will be applied in ascending order"
              },
              "descending": {
                "value": [
                  "descending"
                ],
                "description": "The sort will be applied in descending order"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroupListResponse"
                },
                "example": {
                  "totalResults": 10,
                  "itemsPerPage": 10,
                  "startIndex": 5,
                  "Resources": [
                    {
                      "schemas": [
                        "urn:scim:schemas:extension:FactSet:VRS:1.0:Group"
                      ],
                      "id": "123456",
                      "displayName": "API Group",
                      "members": [
                        {
                          "value": "45678",
                          "$ref": "https://api.factset.com/vrsapi/scim/v2/Users/45678",
                          "type": "User"
                        }
                      ],
                      "tenant": "TENANT",
                      "domainCode": "TESTDOMAIN"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to view roles",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to view roles",
                  "status": "403"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createGroup",
        "tags": [
          "SCIM"
        ],
        "summary": "Creates a role",
        "description": "Creates a VRS role",
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/ScimGroup"
              },
              "example": {
                "displayName": "vrstestgroup",
                "members": [
                  {
                    "value": "scimuser1",
                    "type": "user",
                    "$ref": "VRSAPI/scim/v2/Users/1"
                  }
                ],
                "tenant": "XXXXXXXXXX",
                "domainCode": "XXXXXXXXXX"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroup"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:Group"
                  ],
                  "id": "123456",
                  "displayName": "vrstestgroup",
                  "members": [
                    {
                      "value": "218",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Users/218",
                      "type": "User"
                    }
                  ],
                  "tenant": "XXXXXXXXXX",
                  "domainCode": "XXXXXXXXXX",
                  "meta": {
                    "resourceType": "VRSGroup",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Groups/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the newly create role, for example https://example.com/VRSAPI/scim/v2/Groups/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to create roles",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to create groups",
                  "status": "403"
                }
              }
            }
          },
          "409": {
            "description": "Group already exists",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Group already exists",
                  "status": "409"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      }
    },
    "/scim/v2/Groups/{groupId}": {
      "get": {
        "operationId": "getGroupById",
        "tags": [
          "SCIM"
        ],
        "summary": "Retrieves a VRS role",
        "description": "Retrieves a VRS role based on the ID",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The ID of the role",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroup"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:Group"
                  ],
                  "id": "123456",
                  "displayName": "API Group",
                  "members": [
                    {
                      "value": "218",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Users/218",
                      "type": "User"
                    }
                  ],
                  "tenant": "TENANT",
                  "domainCode": "TESTDOMAIN",
                  "meta": {
                    "resourceType": "VRSGroup",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Groups/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the newly create role, for example https://example.com/VRSAPI/scim/v2/Groups/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to view roles",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to view roles",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteGroupById",
        "tags": [
          "SCIM"
        ],
        "summary": "Deletes a VRS role",
        "description": "Deletes a VRS role",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The ID of the group",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden, user does not have permission to delete roles",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to delete roles",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchGroupById",
        "tags": [
          "SCIM"
        ],
        "summary": "Add or remove a user to/from a group",
        "description": "Adds or removes a VRS user to/from a VRS role",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The ID of the role",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/ScimGroupPatchRequestBody"
              },
              "example": {
                "schemas": [
                  "urn:ietf:params:scim:api:messages:2.0:PatchOp"
                ],
                "Operations": [
                  {
                    "op": "add",
                    "path": "members",
                    "value": {
                      "display": "Test user",
                      "$ref": "VRSAPI/scim/v2/Users/45678",
                      "value": "45678"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added user to group",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroup"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:Group"
                  ],
                  "id": "123456",
                  "displayName": "API Group",
                  "members": [
                    {
                      "value": "45678",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Users/45678",
                      "type": "User"
                    }
                  ],
                  "tenant": "TENANT",
                  "domainCode": "TESTDOMAIN",
                  "meta": {
                    "resourceType": "VRSGroup",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Groups/123456"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid values provided in JSON request body.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "the attribute with the name 'tenants' is unknown to resource type 'VRSGroup'",
                  "status": "400"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateGroupById",
        "tags": [
          "SCIM"
        ],
        "summary": "Updates a VRS Group",
        "description": "Updates (replaces) a VRS Group with the properties in the JSON",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The ID of the group",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "123456"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/ScimGroup"
              },
              "example": {
                "displayName": "vrstestgroup",
                "members": [
                  {
                    "value": "scimuser1",
                    "type": "user",
                    "$ref": "VRSAPI/scim/v2/Users/1"
                  }
                ],
                "tenant": "XXXXXXXXXX",
                "domainCode": "XXXXXXXXXX"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated group",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroup"
                },
                "example": {
                  "schemas": [
                    "urn:scim:schemas:extension:FactSet:VRS:1.0:Group"
                  ],
                  "id": "123456",
                  "displayName": "vrstestgroup",
                  "members": [
                    {
                      "value": "45678",
                      "$ref": "https://api.factset.com/vrsapi/scim/v2/Users/45678",
                      "type": "User"
                    }
                  ],
                  "tenant": "XXXXXXXXXX",
                  "domainCode": "XXXXXXXXXX",
                  "meta": {
                    "resourceType": "VRSGroup",
                    "created": "2024-03-13T08:01:32.297Z",
                    "lastModified": "2024-03-15T09:48:21.375Z",
                    "location": "https://api.factset.com/vrsapi/scim/v2/Groups/123456"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "A callback URL to the updated group, for example https://example.com/VRSAPI/scim/v2/Groups/1"
              }
            }
          },
          "403": {
            "description": "Forbidden, user does not have permission to update groups",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "User does not have permission to update groups",
                  "status": "403"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "Resource 1 not found",
                  "status": "404"
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimError"
                },
                "example": {
                  "schemas": [
                    "urn:ietf:params:scim:api:messages:2.0:Error"
                  ],
                  "detail": "An internal error has occurred.",
                  "status": "500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/version": {
      "get": {
        "operationId": "getVersion",
        "tags": [
          "Version"
        ],
        "summary": "Gets the version of VRS,WRS and DBServer",
        "description": "Gets the version of VRS,WRS and DBServer",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionResponseBody"
                },
                "example": {
                  "data": {
                    "vrsVersion": "21.58",
                    "wrsVersion": "20.2.42",
                    "dbServer": "Microsoft SQL Server 2016"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "notAuthenticated",
                      "title": "User is not authenticated"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "The server have encountered an unhandled error due to which request was not fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                },
                "example": {
                  "errors": [
                    {
                      "id": "ID of the error",
                      "code": "genericServerError",
                      "title": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "FactSetOAuth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth.factset.com/as/token.oauth2",
            "scopes": {}
          }
        }
      },
      "FactSetApiKey": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "DataSourceList": {
        "type": "object",
        "description": "A list of Data Sources.",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta data of Data Source List.",
            "properties": {
              "pagination": {
                "type": "object",
                "description": "Pagination information for the Data Source list response.",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "The total number of Data Sources available in the response."
                  },
                  "isEstimatedTotal": {
                    "type": "boolean",
                    "description": "A flag that specifies if the total number of records returned is an estimate (true) or an exact count (false)."
                  }
                }
              },
              "sort": {
                "type": "array",
                "description": "A set of fields used in sorting the Data Source list.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "data": {
            "type": "array",
            "description": "An array of Data Sources.",
            "items": {
              "$ref": "#/components/schemas/DataSourceDTO"
            }
          }
        }
      },
      "DataSourceData": {
        "type": "object",
        "description": "Data object for the Data Source.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataSourceDTO"
          }
        }
      },
      "DataSourceDTO": {
        "type": "object",
        "description": "A DataSource object aggregates data from multiple providers, such as APIs, databases, or file systems, to simplify access and processing.",
        "properties": {
          "dataSourceId": {
            "type": "integer",
            "description": "Unique Identifier for the Data Source.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the Data Source."
          },
          "code": {
            "type": "string",
            "description": "Code of the Data Source."
          },
          "dsType": {
            "type": "string",
            "description": "Type of the Data Source.",
            "enum": [
              "AUTOMATIC",
              "MANUAL",
              "FILTER"
            ]
          },
          "entities": {
            "type": "array",
            "description": "An array of entities that are used in the Data Source.",
            "items": {
              "$ref": "#/components/schemas/EntityDTO"
            }
          },
          "outputRecordSet": {
            "type": "string",
            "description": "Recordset name that is used for output in the Data Source."
          },
          "releaseTag": {
            "type": "string",
            "description": "Release tag associated with the Data Source."
          },
          "defaultDataSourceName": {
            "type": "string",
            "description": "Name of the default Data Source."
          },
          "dataPreview": {
            "type": "string",
            "description": "Name of the component/report used for Data Source preview."
          },
          "lastUpdatedBy": {
            "type": "string",
            "description": "Indicates the username of the person who last updated the Data Source."
          },
          "lastUpdated": {
            "type": "number",
            "description": "The timestamp of the most recent update in epoch format of the Data Source"
          }
        }
      },
      "DataSourceDataInstance": {
        "type": "object",
        "description": "Response for view data request.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataSourceAllData"
          }
        }
      },
      "DataSourceAllData": {
        "type": "object",
        "description": "Data and Meta data from the Data Source, including any retrieval errors.",
        "properties": {
          "fields": {
            "type": "array",
            "description": "An array of fields from the input Record Set.",
            "items": {
              "$ref": "#/components/schemas/RecordSetFields"
            }
          },
          "dstInstance": {
            "$ref": "#/components/schemas/DataSourceInstance"
          }
        }
      },
      "DataSourceInstance": {
        "type": "object",
        "description": "Data Source instance object.",
        "properties": {
          "dstInstanceId": {
            "type": "integer",
            "description": "Unique Identifier of the Data Source Instance."
          },
          "dstInstanceType": {
            "type": "string",
            "description": "Type of the Data source"
          },
          "rows": {
            "type": "array",
            "description": "An array of data row of the Data source",
            "items": {
              "$ref": "#/components/schemas/DataSourceInstanceRows"
            }
          }
        }
      },
      "DataSourceInstanceRows": {
        "type": "object",
        "description": "Each data row of the Data source",
        "properties": {
          "rowId": {
            "type": "integer",
            "description": "Unique Identifier of the data row."
          },
          "order": {
            "type": "integer",
            "description": "The display or processing order of the data row."
          },
          "fields": {
            "type": "array",
            "description": "An array of values for each input Record Set fields.",
            "items": {
              "$ref": "#/components/schemas/RecordSetFieldValues"
            }
          }
        }
      },
      "RecordSetFieldValues": {
        "type": "object",
        "description": "Field value and associated metadata for the record set field.",
        "properties": {
          "fieldId": {
            "type": "integer",
            "description": "Unique identifier for the field."
          },
          "fieldType": {
            "type": "string",
            "description": "The type of the field indicating the kind of data it holds.",
            "enum": [
              "BOOLEAN",
              "COLOUR",
              "DATETIME",
              "DECIMAL",
              "FONT",
              "FONTSIZE",
              "HTML",
              "INTEGER",
              "TEXT"
            ]
          },
          "fieldValue": {
            "type": "string",
            "description": "The value assigned to the field."
          }
        }
      },
      "RecordSetFields": {
        "type": "object",
        "description": "Defines the properties and attributes of a record set field.",
        "properties": {
          "fieldType": {
            "type": "string",
            "description": "The type of the field indicating the kind of data it holds.",
            "enum": [
              "BOOLEAN",
              "COLOUR",
              "DATETIME",
              "DECIMAL",
              "FONT",
              "FONTSIZE",
              "HTML",
              "INTEGER",
              "TEXT"
            ]
          },
          "format": {
            "type": "string",
            "description": "The format applied to the field's value."
          },
          "id": {
            "type": "integer",
            "description": "Unique identifier for the field."
          },
          "hide": {
            "type": "string",
            "description": "Indicates whether the field is hidden."
          },
          "name": {
            "type": "string",
            "description": "The name of the field."
          },
          "order": {
            "type": "integer",
            "description": "The ordering of the record set field."
          }
        }
      },
      "EntityDTO": {
        "type": "object",
        "description": "Entity with its unique identifiers and attributes.",
        "properties": {
          "entityId": {
            "type": "integer",
            "description": "Unique identifier for the Entity.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the Entity."
          },
          "code": {
            "type": "string",
            "description": "Code of the Entity."
          }
        }
      },
      "EntityFieldValueDTO": {
        "type": "object",
        "description": "Entity value with its unique identifiers and attributes.",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta data of Entity Values.",
            "properties": {
              "pagination": {
                "type": "object",
                "description": "Pagination information for the Entity Values.",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "The total number of Entity Values available in the response."
                  },
                  "isEstimatedTotal": {
                    "type": "boolean",
                    "description": "A flag that specifies if the total number of records returned is an estimate (true) or an exact count (false)."
                  }
                }
              },
              "sort": {
                "type": "array",
                "description": "Set of Entity fields used in sorting the Entity values.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "data": {
            "type": "array",
            "description": "Collection of Entity rows with their associated values and fields.",
            "items": {
              "properties": {
                "entityRowId": {
                  "type": "integer",
                  "description": "Unique Identifier for the Entity row."
                },
                "keyValue": {
                  "type": "string",
                  "description": "Key value associated with the Entity row."
                },
                "descriptionValue": {
                  "type": "string",
                  "description": "Descriptive value for the Entity row."
                },
                "fieldsWithValues": {
                  "type": "array",
                  "description": "An array of values associated with specific fields in the Entity row.",
                  "items": {
                    "type": "string",
                    "description": "The value along with field name, Example 'Field:Value'."
                  }
                }
              }
            }
          }
        }
      },
      "ReportInstanceDataResponse": {
        "type": "object",
        "description": "Response containing details of the Report instance.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportInstanceId"
          }
        }
      },
      "ReportInstanceId": {
        "type": "object",
        "description": "Report instance Object.",
        "properties": {
          "reportInstanceId": {
            "type": "integer",
            "description": "Unique Identifier for the Report instance."
          }
        }
      },
      "ReportInstanceList": {
        "type": "object",
        "description": "List of Report instances along with metadata.",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta data of Report instance list.",
            "properties": {
              "pagination": {
                "type": "object",
                "description": "Pagination information for the List of Report instance.",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "The total number of Report instances available in the response."
                  },
                  "isEstimatedTotal": {
                    "type": "boolean",
                    "description": "A flag that specifies if the total number of records returned is an estimate (true) or an exact count (false)."
                  }
                }
              }
            }
          },
          "data": {
            "type": "array",
            "description": "A list of Report instances.",
            "items": {
              "$ref": "#/components/schemas/ReportInstanceDTO"
            }
          }
        }
      },
      "ReportInstanceLogList": {
        "type": "object",
        "description": "List of report generation logs associated with Report instances.",
        "properties": {
          "data": {
            "type": "array",
            "description": "An array of Report generation log entries for the Report instance.",
            "items": {
              "$ref": "#/components/schemas/ReportInstanceLogDTO"
            }
          }
        }
      },
      "ReportInstanceData": {
        "type": "object",
        "description": "Single Report instance data response.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportInstanceDTO"
          }
        }
      },
      "ReportInstanceDTO": {
        "type": "object",
        "description": "Details of the Report instance.",
        "properties": {
          "reportInstanceId": {
            "type": "integer",
            "description": "Unique Identifier of the Report instance.",
            "format": "int32"
          },
          "reportDefinitionId": {
            "type": "integer",
            "description": "Unique Identifier for the associated Report definition.",
            "format": "int32"
          },
          "reportDefinitionName": {
            "type": "string",
            "description": "Name of the Report definition."
          },
          "reportName": {
            "type": "string",
            "description": "Name of the generated Report."
          },
          "userFriendlyReportName": {
            "type": "string",
            "description": "A user-friendly display name for the generated report file."
          },
          "extension": {
            "type": "string",
            "description": "File extension for the report output."
          },
          "reportRevision": {
            "$ref": "#/components/schemas/ReportRevisionDTO"
          },
          "name": {
            "type": "string",
            "description": "Display name for the generated report file."
          }
        }
      },
      "ReportInstanceLogDTO": {
        "type": "object",
        "description": "Report Generation log details.",
        "properties": {
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequential number of the log entry.",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Detailed message describing the log event or error."
          },
          "type": {
            "type": "string",
            "description": "Indicates the type of log entry, either a general log or an error.",
            "enum": [
              "LOG",
              "ERROR"
            ]
          },
          "updateDate": {
            "type": "string",
            "description": "The date and time of the last update for this log entry."
          }
        }
      },
      "ReportDefinitionList": {
        "type": "object",
        "description": "List of Report Definitions.",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta data of Report Definition list.",
            "properties": {
              "pagination": {
                "type": "object",
                "description": "Pagination information for the list of Report Definition.",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "The total number of Report Definitions available in the response."
                  },
                  "isEstimatedTotal": {
                    "type": "boolean",
                    "description": "A flag that specifies if the total number of records returned is an estimate (true) or an exact count (false)."
                  }
                }
              }
            }
          },
          "data": {
            "type": "array",
            "description": "A list of Report Definitions.",
            "items": {
              "$ref": "#/components/schemas/ReportDefinitionDTO"
            }
          }
        }
      },
      "ReportDefinitionData": {
        "type": "object",
        "description": "Contains detailed data for a single Report definition.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportDefinitionDTO"
          }
        }
      },
      "ReportDefinitionDTO": {
        "type": "object",
        "description": "Defines the details of the Report definition.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Report definition."
          },
          "code": {
            "type": "string",
            "description": "Code of the Report definition."
          },
          "releaseTag": {
            "type": "string",
            "description": "Release tag associated with the Report definition."
          },
          "entities": {
            "type": "array",
            "description": "A list of entities associated with the Report definition.",
            "items": {
              "$ref": "#/components/schemas/EntityDTO"
            }
          }
        }
      },
      "ReportRevisionDTO": {
        "type": "object",
        "description": "Contains details about the Report revision.",
        "properties": {
          "reportStatus": {
            "type": "string",
            "description": "The current status of the Report generation process.",
            "enum": [
              "WAITING",
              "STARTING",
              "RETRIEVING_REQUEST",
              "CONTENT_FILTER",
              "STYLE_PROCESSING",
              "STYLE_PREPROCESSING",
              "RULE_PROCESSING",
              "GETTING_DATA",
              "RI_PROCESSING",
              "COMPILE",
              "SUBSTITUTION",
              "TRANSLATION",
              "GRID_PROCESSING",
              "CHART_PROCESSING",
              "IMPORTED_FILE_PROCESSING",
              "TEXT_PROCESSING_STATUS",
              "TOC_PROCESSING_STATUS",
              "COMPONENT_PROCESSING",
              "POST_PROCESSING",
              "POSTING_TO_WRS",
              "POSTED_TO_WRS",
              "RENDERING",
              "DOC_CREATION",
              "PDF_CONVERSION",
              "ABORTED",
              "COMPLETED",
              "COMPLETED_CAUTIONS",
              "COMPLETED_ERROR",
              "COMPLETED_MODIFYING",
              "COMPLETED_CHANGED",
              "DELETING",
              "REPORT_ORIGINAL_GENERATION",
              "REPORT_PREVIOUS_REVISION",
              "GENERATING"
            ]
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the Report generation process."
          },
          "finishDate": {
            "type": "string",
            "description": "Completion date of the Report generation process."
          },
          "signOffStatus": {
            "type": "string",
            "description": "Sign-off status of the Report.",
            "enum": [
              "REJECTED",
              "PENDING",
              "APPROVED"
            ]
          },
          "signOffNotes": {
            "type": "string",
            "description": "Additional notes related to the sign-off process."
          },
          "reportReasonCd": {
            "type": "string",
            "description": "Reason code for generating the Report."
          },
          "description": {
            "type": "string",
            "description": "Description of the Report revision."
          },
          "languageCode": {
            "type": "string",
            "description": "Language code of the Report."
          },
          "outputFormat": {
            "type": "string",
            "description": "Output format of the Report."
          },
          "percentageComplete": {
            "type": "number",
            "description": "Percentage of completion for the Report generation."
          }
        }
      },
      "ReportGenerationRequestBody": {
        "type": "object",
        "description": "Defines the request body for generating a report, encapsulating various generation parameters.",
        "properties": {
          "vrs": {
            "type": "object",
            "description": "Contains report generation requests.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReportGenerationRequest"
            }
          }
        }
      },
      "ReportGenerationRequest": {
        "type": "object",
        "description": "details needed to request the generation of a report.",
        "properties": {
          "report": {
            "type": "string",
            "description": "The Report definition code."
          },
          "tenancy": {
            "type": "string",
            "description": "The tenancy code in which the report generation occurs."
          },
          "outputFormat": {
            "type": "string",
            "description": "The desired output format for the generated report.",
            "enum": [
              "WORD",
              "WORD2010",
              "EXCEL",
              "EXCEL2010",
              "PPT",
              "PPT2010",
              "PDF",
              "CSV",
              "XML",
              "VXML",
              "HTML",
              "PS"
            ]
          },
          "sectionFilter": {
            "type": "string",
            "description": "Section filter that has to be used in the report generation process."
          },
          "priority": {
            "type": "string",
            "description": "The priority level assigned to the report generation request."
          },
          "startDate": {
            "type": "string",
            "description": "The scheduled start date for generating the report."
          },
          "entitySelection": {
            "type": "object",
            "description": "Specifies the Entity selections for the report generation.",
            "additionalProperties": {
              "$ref": "#/components/schemas/EntitySelection"
            }
          }
        }
      },
      "EntitySelection": {
        "type": "object",
        "description": "Specifies an Entity or a set of entities selected for inclusion in a report.",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key value for the selected Entity."
          }
        }
      },
      "ReportDataResponse": {
        "type": "string",
        "format": "binary",
        "description": "Binary data of the generated report response."
      },
      "ScheduleDefinitionsList": {
        "type": "object",
        "description": "A list of Schedule Definition.",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta data of list of Schedule Definition.",
            "properties": {
              "pagination": {
                "type": "object",
                "description": "Pagination information for the list of Schedule Definition.",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "The total number of Schedule Definitions available in the response."
                  },
                  "isEstimatedTotal": {
                    "type": "boolean",
                    "description": "A flag that specifies if the total number of records returned is an estimate (true) or an exact count (false)."
                  }
                }
              },
              "sort": {
                "type": "array",
                "description": "A set of fields used in sorting the Schedule Definition list.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "data": {
            "type": "array",
            "description": "An array of Schedule Definitions.",
            "items": {
              "$ref": "#/components/schemas/ScheduleDefinition"
            }
          }
        }
      },
      "ScheduleDefinition": {
        "type": "object",
        "description": "List of Schedule Definition.",
        "properties": {
          "scheduleDefinitionId": {
            "type": "integer",
            "description": "Unique Identifier for the Schedule Definition.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the Schedule Definition."
          },
          "code": {
            "type": "string",
            "description": "Code of the Schedule Definition."
          },
          "scheduleType": {
            "type": "string",
            "description": "Type of Schedule Definition.",
            "enum": [
              "MANUAL",
              "REPEATING"
            ]
          },
          "scheduleGroup": {
            "type": "string",
            "description": "Group of the Schedule Definition."
          },
          "reportDate": {
            "type": "string",
            "description": "Report Date of the Schedule Definition.",
            "enum": [
              "LAST_DAY_OF_PREV_MONTH",
              "LAST_BUSINESS_DAY_OF_PREV_MONTH",
              "CREATION_DATE",
              "DAY_BEFORE_CREATION_DATE",
              "BUSINESS_DAY_BEFORE_CREATION_DATE",
              "LAST_DAY_OF_MONTH_SCHEDULE_CREATED",
              "LAST_BUSINESS_DAY_OF_MONTH_SCHEDULE_CREATED",
              "LAST_BUSINESS_DAY_OF_PREVIOUS_WEEK_SCHEDULE_CREATED",
              "LAST_BUSINESS_DAY_OF_WEEK_SCHEDULE_CREATED",
              "TWO_BUSINESS_DAYS_BEFORE_SCHEDULE_CREATED"
            ]
          },
          "numberOfObligations": {
            "type": "integer",
            "description": "Number of obligations used in the Schedule Definition.",
            "format": "int32"
          },
          "businessCalendar": {
            "type": "string",
            "description": "Calender name used in the Schedule Definition."
          },
          "deleteScheduleAfterDays": {
            "type": "integer",
            "description": "Indicates after how many days the Schedule should be deleted.",
            "format": "int32"
          },
          "numberOfPackages": {
            "type": "integer",
            "description": "Indicates number of packages involved in the Schedule Definition.",
            "format": "int32"
          },
          "entities": {
            "type": "array",
            "description": "A set of entities used in Schedule Definition.",
            "items": {
              "$ref": "#/components/schemas/EntityDTO"
            }
          },
          "ownerRole": {
            "type": "object",
            "description": "The owner of the Schedule Definition (Role)",
            "properties": {
              "roleId": {
                "type": "integer",
                "description": "Unique ID of Owner role for the Schedule Definition.",
                "format": "int32"
              },
              "name": {
                "type": "string",
                "description": "Name of Owner role for the Schedule Definition."
              },
              "code": {
                "type": "string",
                "description": "Code of Owner role for the Schedule Definition."
              }
            }
          },
          "notes": {
            "type": "string",
            "description": "Notes of the Schedule Definition."
          },
          "lastUpdatedBy": {
            "type": "string",
            "description": "Indicates the username of the person who last updated the Data Source."
          },
          "lastUpdated": {
            "type": "string",
            "description": "The timestamp of the most recent update in epoch format for a specific Schedule Definition"
          }
        }
      },
      "SchedulesList": {
        "type": "object",
        "description": "List of Schedules.",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta data of list of Schedules.",
            "properties": {
              "pagination": {
                "type": "object",
                "description": "Pagination information for the list of Schedules.",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "The total number of Schedules available in the response."
                  },
                  "isEstimatedTotal": {
                    "type": "boolean",
                    "description": "A flag that specifies if the total number of records returned is an estimate (true) or an exact count (false)."
                  }
                }
              },
              "sort": {
                "type": "array",
                "description": "A set of fields used in sorting the Schedule list.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "data": {
            "type": "array",
            "description": "An array of schedule objects.",
            "items": {
              "$ref": "#/components/schemas/ScheduleData"
            }
          }
        }
      },
      "ScheduleStatusUpdateResponse": {
        "type": "object",
        "description": "Response object for updating the status of a schedule.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ScheduleData"
          }
        }
      },
      "ScheduleData": {
        "type": "object",
        "description": "Details of an individual schedule.",
        "properties": {
          "scheduleId": {
            "type": "integer",
            "description": "Unique identifier of the Schedule.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the Schedule."
          },
          "definitionName": {
            "type": "string",
            "description": "Name of Schedule Definition from which the Schedule has been generated."
          },
          "status": {
            "type": "string",
            "description": "Status of the Schedule.",
            "enum": [
              "INITIALISED",
              "RUNNING",
              "CANCELLED",
              "SUSPENDED",
              "FINISHED",
              "CLOSED",
              "GENERATING_TASKS"
            ]
          },
          "scheduleGroup": {
            "type": "string",
            "description": "Group of the Schedule."
          },
          "reportDate": {
            "type": "string",
            "description": "The timestamp of the report date in epoch format for a specific Schedule"
          },
          "noOfTasks": {
            "type": "integer",
            "description": "No of tasks generated for the Schedule",
            "format": "int32"
          },
          "businessCalendar": {
            "type": "string",
            "description": "Name of Business Calender used in the Schedule"
          },
          "owner": {
            "type": "string",
            "description": "Owner role used in the Schedule"
          },
          "notes": {
            "type": "string",
            "description": "Notes of the Schedule"
          },
          "finishDate": {
            "type": "string",
            "description": "The timestamp of the Finish Date in epoch format of the Schedule"
          },
          "startDate": {
            "type": "string",
            "description": "The timestamp of the Start Date in epoch format of the Schedule"
          },
          "lastUpdatedBy": {
            "type": "string",
            "description": "Indicates the username of the person who last updated Schedule"
          },
          "lastUpdated": {
            "type": "string",
            "description": "The timestamp of the most recent update in epoch format for a specific Schedule"
          }
        }
      },
      "ScheduleResponseData": {
        "type": "object",
        "description": "Data object for the Schedule response.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ScheduleAPIDTO"
          }
        }
      },
      "ScheduleAPIDTO": {
        "type": "object",
        "description": "Schedule along with an extra property to indicate the task generation log warning(s)/error(s)",
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleData"
          },
          {
            "type": "object",
            "properties": {
              "hasTaskGenIssues": {
                "type": "boolean",
                "description": "A flag that specifies if task generation has warning or error logs."
              }
            }
          }
        ]
      },
      "GenerateScheduleResponse": {
        "type": "object",
        "description": "Response object for schedule generation.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ScheduleInstanceData"
          }
        }
      },
      "ScheduleInstanceData": {
        "type": "object",
        "description": "Details of an individual schedule instance.",
        "properties": {
          "scheduleInstanceId": {
            "type": "integer",
            "description": "Unique identifier of the schedule instance.",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "description": "Current status of the schedule instance.",
            "enum": [
              "INITIALISED",
              "RUNNING",
              "CANCELLED",
              "SUSPENDED",
              "FINISHED",
              "CLOSED",
              "GENERATING_TASKS"
            ]
          }
        }
      },
      "ScheduleGenerationLogList": {
        "type": "object",
        "description": "List of task generation logs.",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta data of Task Generation Logs.",
            "properties": {
              "pagination": {
                "type": "object",
                "description": "Pagination information for the Task Generation Logs.",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "The total number of Task Generation logs available in the response."
                  },
                  "isEstimatedTotal": {
                    "type": "boolean",
                    "description": "A flag that specifies if the total number of records returned is an estimate (true) or an exact count (false)."
                  }
                }
              },
              "sort": {
                "type": "array",
                "description": "A set of fields used in sorting the Task Generation Logs.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "data": {
            "type": "array",
            "description": "A set of fields used in sorting the Task Generation Logs.",
            "items": {
              "$ref": "#/components/schemas/ScheduleGenerationLog"
            }
          }
        }
      },
      "ScheduleGenerationLog": {
        "type": "object",
        "description": "Details of an individual task generation log.",
        "properties": {
          "sequenceNumber": {
            "type": "integer",
            "description": "The sequence number of the log entry.",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "A detailed message describing the log event or error."
          },
          "type": {
            "type": "string",
            "description": "Type of log entry.",
            "enum": [
              "INFO",
              "WARN",
              "ERROR",
              "DEBUG"
            ]
          },
          "logSet": {
            "type": "integer",
            "description": "Identifier for the set of logs this entry belongs to.",
            "format": "int32"
          },
          "lastUpdated": {
            "type": "string",
            "description": "The timestamp of the most recent update in epoch format for a specific Task Generation log"
          }
        }
      },
      "TaskList": {
        "type": "object",
        "description": "List of Tasks.",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta data of list of Tasks.",
            "properties": {
              "pagination": {
                "type": "object",
                "description": "Pagination information for the list of Tasks.",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "The total number of Tasks available in the response."
                  },
                  "isEstimatedTotal": {
                    "type": "boolean",
                    "description": "A flag that specifies if the total number of records returned is an estimate (true) or an exact count (false)."
                  }
                }
              },
              "sort": {
                "type": "array",
                "description": "A set of fields used in sorting the Task list.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "data": {
            "type": "array",
            "description": "An array of task objects.",
            "items": {
              "$ref": "#/components/schemas/TaskListItemDetails"
            }
          }
        }
      },
      "TaskListItemDetails": {
        "type": "object",
        "description": "Task Object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskDetails"
          },
          {
            "type": "object",
            "properties": {
              "taskId": {
                "type": "integer",
                "description": "Unique identifier of the Task.",
                "format": "int32"
              },
              "escalationLevel": {
                "type": "integer",
                "description": "The escalation level of the task.",
                "format": "int32"
              },
              "order": {
                "type": "integer",
                "description": "The order of the task.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "TaskDetailsObject": {
        "type": "object",
        "description": "Contains all details about the task.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TaskDetails"
          }
        }
      },
      "TaskDetails": {
        "type": "object",
        "description": "Contains all details about the task.",
        "properties": {
          "lastUpdatedBy": {
            "type": "string",
            "description": "Indicates the username of the person who last updated task"
          },
          "description": {
            "type": "string",
            "description": "Task description."
          },
          "taskType": {
            "type": "string",
            "description": "Type of the task.",
            "enum": [
              "WAIT_FOR_DATA",
              "CUSTOM_DATA",
              "CREATE_MANUAL_DATA",
              "CREATE_FILTERED_DATA",
              "GET_DATA",
              "GENERATE_PREVIEW",
              "SIGNOFF_DATA",
              "CUSTOM_GENERATE",
              "GENERATE_REPORT",
              "SIGNOFF_REPORT",
              "CUSTOM_DELIVERY",
              "EMAIL_REPORT",
              "POST_REPORT",
              "FTP_REPORT",
              "CUSTOM_OTHER",
              "COPY_REPORT_FILE",
              "PACKAGE_REPORTS"
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of the task.",
            "enum": [
              "COMPLETED",
              "IN_PROGRESS",
              "AWAITING_CORRECTION",
              "PENDING",
              "SKIPPED",
              "FAILED_REJECTED"
            ]
          },
          "expectedStartDate": {
            "type": "string",
            "description": "Expected start date of the task."
          },
          "expectedEndDate": {
            "type": "string",
            "description": "Expected end date of the task."
          },
          "actualStartDate": {
            "type": "string",
            "description": "Actual start date of the task."
          },
          "notes": {
            "type": "string",
            "description": "Notes for the task."
          },
          "immediate": {
            "type": "boolean",
            "description": "Boolean flag to indicate whether the task is an immediate task."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the task action."
          },
          "outputFormat": {
            "type": "string",
            "description": "Output Format for thet task."
          },
          "scheduleName": {
            "type": "string",
            "description": "Name of the schedule to which this task belongs to."
          },
          "mandatoryTaskApproveNotes": {
            "type": "boolean",
            "description": "The flag if task approve notes are mandatory for the task"
          },
          "lastUpdated": {
            "type": "string",
            "description": "The timestamp of the most recent update in epoch format for a specific task"
          },
          "role": {
            "type": "string",
            "description": "Role associated with the task."
          },
          "action": {
            "type": "boolean",
            "description": "Indicates if a task is actionable by the user."
          },
          "user": {
            "type": "string",
            "description": "User associated with the task."
          }
        }
      },
      "TaskPatchRequestBody": {
        "type": "object",
        "description": "Request body for task patch operation, other task properties will be ignored.",
        "properties": {
          "data": {
            "type": "object",
            "description": "Task data object.",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the task, status cannot be changed to IN_PROGRESS. It is case-sensitive and should be in upper case.",
                "enum": [
                  "COMPLETED",
                  "IN_PROGRESS",
                  "AWAITING_CORRECTION",
                  "PENDING",
                  "SKIPPED",
                  "FAILED_REJECTED"
                ]
              },
              "expectedStartDate": {
                "type": "string",
                "description": "Expected start date of task, date format should be 'd MMMMM yyyy HH:mm:ss' and will be converted to server time zone."
              },
              "expectedEndDate": {
                "type": "string",
                "description": "Expected end date of task, date format should be 'd MMMMM yyyy HH:mm:ss' and will be converted to server time zone."
              },
              "actualStartDate": {
                "type": "string",
                "description": "Actual start date of task, date format should be 'd MMMMM yyyy HH:mm:ss' and will be converted to server time zone."
              },
              "notes": {
                "type": "string",
                "description": "Notes for the task."
              },
              "role": {
                "type": "string",
                "description": "Role assigned to the task, It can't be null or empty."
              },
              "user": {
                "type": "string",
                "description": "User name assigned to the task."
              },
              "action": {
                "type": "string",
                "description": "task action to be performed, Approve and Reject are the possible values."
              },
              "reason": {
                "type": "string",
                "description": "Reason code for rejection or approval, It will be validated against values from VRSReasonCodes.properties."
              }
            }
          }
        }
      },
      "TaskPatchResponseObject": {
        "type": "object",
        "description": "Response body for task patch operation.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TaskPatchResponse"
          }
        }
      },
      "TaskPatchResponse": {
        "type": "object",
        "description": "Response with task details and error messages if there are any.",
        "properties": {
          "task": {
            "$ref": "#/components/schemas/TaskDetails"
          },
          "messages": {
            "type": "array",
            "description": "Array of error messages.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TaskHistoryList": {
        "type": "object",
        "description": "List of task history events.",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Meta data of list of Task History Events.",
            "properties": {
              "pagination": {
                "type": "object",
                "description": "Pagination information for the Task History Events.",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "The total number of Task History Events available in the response."
                  },
                  "isEstimatedTotal": {
                    "type": "boolean",
                    "description": "A flag that specifies if the total number of records returned is an estimate (true) or an exact count (false)."
                  }
                }
              },
              "sort": {
                "type": "array",
                "description": "A set of fields used in sorting the Task History Events.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "data": {
            "type": "array",
            "description": "An array of task history objects.",
            "items": {
              "$ref": "#/components/schemas/TaskHistoryObject"
            }
          }
        }
      },
      "TaskHistoryObject": {
        "type": "object",
        "description": "Details of an individual task history event.",
        "properties": {
          "taskType": {
            "type": "string",
            "description": "The task type of the task."
          },
          "description": {
            "type": "string",
            "description": "A description of the task."
          },
          "dateAndTime": {
            "type": "string",
            "description": "The timestamp of the task history event in epoch format"
          },
          "actionType": {
            "type": "string",
            "description": "The action type of the task history event."
          },
          "notes": {
            "type": "string",
            "description": "The notes associated with the task history event."
          },
          "reasonCode": {
            "type": "string",
            "description": "The reason code associated with the task history event."
          },
          "details": {
            "type": "string",
            "description": "The details associated with the action of the task history event."
          }
        }
      },
      "ScimUser": {
        "type": "object",
        "description": "A user object representing identity information, including attributes like username, email, with links for retrieving additional group details.",
        "properties": {
          "schemas": {
            "type": "array",
            "description": "Array of schema URIs applicable to this resource.",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the user."
          },
          "userName": {
            "type": "string",
            "description": "Username used for identifying and logging in the user."
          },
          "name": {
            "type": "object",
            "description": "User's full name object.",
            "properties": {
              "formatted": {
                "type": "string",
                "description": "Full formatted name of the user."
              }
            }
          },
          "userType": {
            "type": "string",
            "description": "Type of user."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the user account is active."
          },
          "authenticatedUserName": {
            "type": "string",
            "description": "Authenticated username used for the SSO logins."
          },
          "tenant": {
            "type": "string",
            "description": "Tenancy code in which user was created."
          },
          "phoneNumbers": {
            "type": "array",
            "description": "Array of phone numbers associated with the user.",
            "items": {
              "$ref": "#/components/schemas/ScimPhone"
            }
          },
          "emails": {
            "type": "array",
            "description": "Array of email addresses linked to the user account.",
            "items": {
              "$ref": "#/components/schemas/ScimEmail"
            }
          },
          "photos": {
            "type": "array",
            "description": "Array of URLs to the user's profile pictures.",
            "items": {
              "$ref": "#/components/schemas/ScimPhoto"
            }
          },
          "tenancies": {
            "type": "array",
            "description": "Array of tenancies assigned to the user.",
            "items": {
              "$ref": "#/components/schemas/Tenancy"
            }
          },
          "groups": {
            "type": "array",
            "description": "Array of groups/roles assigned to the user.",
            "items": {
              "$ref": "#/components/schemas/ScimUserGroup"
            }
          },
          "domainCode": {
            "type": "string",
            "description": "Domain code representing the user's domain."
          },
          "isAdministrator": {
            "type": "boolean",
            "description": "Flag indicating if the user has admin privileges."
          },
          "meta": {
            "$ref": "#/components/schemas/ScimMeta"
          }
        }
      },
      "CreatedScimUserJSONResponse": {
        "type": "object",
        "description": "Response object for creating a new SCIM user, containing core identity details, contact information, and account settings.",
        "properties": {
          "schemas": {
            "type": "array",
            "description": "Array listing the schema URIs associated with the user resource.",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the newly created user."
          },
          "userName": {
            "type": "string",
            "description": "Username used for identifying and logging in the user."
          },
          "name": {
            "type": "object",
            "description": "User's full name object.",
            "properties": {
              "formatted": {
                "type": "string",
                "description": "Full formatted name of the user."
              }
            }
          },
          "userType": {
            "type": "string",
            "description": "Type of user."
          },
          "preferredLanguage": {
            "type": "string",
            "description": "User's preferred language."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the user's account is currently active."
          },
          "authenticatedUserName": {
            "type": "string",
            "description": "Authenticated username used by SSO login."
          },
          "tenant": {
            "type": "string",
            "description": "Tenancy code in which the user was created."
          },
          "phoneNumbers": {
            "type": "array",
            "description": "Array of phone numbers for the user, each with a type and value.",
            "items": {
              "$ref": "#/components/schemas/ScimPhone"
            }
          },
          "emails": {
            "type": "array",
            "description": "Array of email addresses linked to the user account.",
            "items": {
              "$ref": "#/components/schemas/ScimEmail"
            }
          },
          "tenancies": {
            "type": "array",
            "description": "List of tenancies the user is associated with.",
            "items": {
              "$ref": "#/components/schemas/Tenancy"
            }
          },
          "photos": {
            "type": "array",
            "description": "Array of URLs to the user's profile photos or avatars.",
            "items": {
              "$ref": "#/components/schemas/ScimPhoto"
            }
          },
          "domainCode": {
            "type": "string",
            "description": "Domain code representing the user's domain."
          },
          "isAdministrator": {
            "type": "boolean",
            "description": "Flag indicating if the user has admin privileges."
          },
          "meta": {
            "type": "object",
            "description": "Metadata about the user resource.",
            "properties": {
              "resourceType": {
                "type": "string",
                "description": "Type of the resource."
              },
              "created": {
                "type": "string",
                "description": "Timestamp indicating when the user resource was created."
              },
              "lastModified": {
                "type": "string",
                "description": "Timestamp of the last modification to the user resource."
              },
              "location": {
                "type": "string",
                "description": "URL indicating the location of the user resource."
              }
            }
          }
        }
      },
      "CreateScimUserJSONRequest": {
        "type": "object",
        "description": "Payload to create a new user in the system, including attributes like username, password, contact information, and tenant details.",
        "properties": {
          "userName": {
            "type": "string",
            "description": "Unique identifier for the user within the system, typically their loginID."
          },
          "password": {
            "type": "string",
            "description": "Password associated with the user's account for authentication."
          },
          "name": {
            "type": "object",
            "description": "User's full name object.",
            "properties": {
              "formatted": {
                "type": "string",
                "description": "The full formatted name of the user."
              }
            }
          },
          "preferredLanguage": {
            "type": "string",
            "description": "The preferred language of the user."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the user account is active."
          },
          "authenticatedUserName": {
            "type": "string",
            "description": "Authenticated username used by the SSO logins."
          },
          "tenant": {
            "type": "string",
            "description": "Tenancy code in which user should be created."
          },
          "domainCode": {
            "type": "string",
            "description": "Domain associated with the user"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "A list of phone numbers associated with the user.",
            "items": {
              "$ref": "#/components/schemas/ScimPhone"
            }
          },
          "emails": {
            "type": "array",
            "description": "A list of email addresses associated with the user.",
            "items": {
              "$ref": "#/components/schemas/ScimEmail"
            }
          },
          "photos": {
            "type": "array",
            "description": "A list of profile photos or images associated with the user.",
            "items": {
              "$ref": "#/components/schemas/ScimPhoto"
            }
          },
          "tenancies": {
            "type": "array",
            "description": "A list of tenancies that need to be assigned to the user.",
            "items": {
              "$ref": "#/components/schemas/Tenancy"
            }
          }
        }
      },
      "ScimUserPatchRequestBody": {
        "type": "object",
        "description": "Defines the request payload for updating a user's attributes. The patch operation modifies specific fields of a user.",
        "properties": {
          "schemas": {
            "type": "array",
            "description": "A list of URIs that indicate the namespaces of the schema used in this request.",
            "items": {
              "type": "string",
              "description": "A URI string representing the namespace applicable to the patch request."
            }
          },
          "Operations": {
            "type": "array",
            "description": "A list of operations defining the specific changes to apply to the user's attributes. Each operation specifies an action (e.g., add, remove, replace) the target attribute and value",
            "items": {
              "$ref": "#/components/schemas/ScimUserPatchOperation"
            }
          }
        }
      },
      "ScimGroupPatchRequestBody": {
        "type": "object",
        "description": "Defines the request payload for updating a group's attributes in SCIM. This patch operation allows for specific modifications to a group's properties.",
        "properties": {
          "schemas": {
            "type": "array",
            "description": "An array of URIs representing the schema namespaces applied to this request.",
            "items": {
              "type": "string",
              "description": "A URI string for the schema namespace associated with the patch request."
            }
          },
          "Operations": {
            "type": "array",
            "description": "A list of operations specifying the actions to perform on the group's attributes, such as adding, removing, or updating members.",
            "items": {
              "$ref": "#/components/schemas/ScimGroupPatchOperation"
            }
          }
        }
      },
      "ScimUserPatchOperation": {
        "type": "object",
        "description": "Patch operation to modify a user's attributes. It includes the action to be performed, the attribute to modify, and the new value.",
        "properties": {
          "op": {
            "type": "string",
            "description": "Action to perform on the attribute."
          },
          "path": {
            "type": "string",
            "description": "The user attribute path to modify."
          },
          "value": {
            "type": "string",
            "description": "The value to set for the attribute."
          }
        }
      },
      "ScimGroupPatchOperation": {
        "type": "object",
        "description": "Patch operation to modify a group's attributes. It defines the action to take, the attribute to modify, and the new value.",
        "properties": {
          "op": {
            "type": "string",
            "description": "Action to perform on the group attribute."
          },
          "path": {
            "type": "string",
            "description": "The group/role attribute path to modify."
          },
          "value": {
            "type": "object",
            "description": "The new value for the attribute.",
            "properties": {
              "display": {
                "type": "string",
                "description": "The value to set for the group's/role's attribute."
              },
              "$ref": {
                "type": "string",
                "description": "A reference to another object."
              },
              "value": {
                "type": "string",
                "description": "The actual value for the attribute."
              }
            }
          }
        }
      },
      "ScimPhone": {
        "type": "object",
        "description": "User's phone number details.",
        "properties": {
          "value": {
            "type": "string",
            "description": "The phone number of the user."
          },
          "type": {
            "type": "string",
            "description": "The type of phone number (e.g., home, mobile, work)."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if this is the primary phone number for the user."
          }
        }
      },
      "ScimEmail": {
        "type": "object",
        "description": "User's email address details.",
        "properties": {
          "value": {
            "type": "string",
            "description": "The email address of the user."
          },
          "type": {
            "type": "string",
            "description": "The type of email address (e.g., personal, work)."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if this is the primary email address for the user."
          }
        }
      },
      "ScimPhoto": {
        "type": "object",
        "description": "User's profile photo details.",
        "properties": {
          "value": {
            "type": "string",
            "description": "The URL to the user's profile photo."
          },
          "type": {
            "type": "string",
            "description": "The type of photo (e.g., profile picture, avatar)."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates if this is the primary photo for the user."
          }
        }
      },
      "Tenancy": {
        "type": "object",
        "description": "Represents tenancy information.",
        "properties": {
          "value": {
            "type": "string",
            "description": "Tenancy code."
          }
        }
      },
      "ScimGroup": {
        "type": "object",
        "description": "Role details, defining permissions and access.",
        "properties": {
          "schemas": {
            "type": "array",
            "description": "List of schema URIs for the group/role.",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the group/role."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the group/role."
          },
          "members": {
            "type": "array",
            "description": "A list of users assigned to the group/role.",
            "items": {
              "$ref": "#/components/schemas/ScimGroupMember"
            }
          },
          "tenant": {
            "type": "string",
            "description": "Tenant associated with the group/role."
          },
          "domainCode": {
            "type": "string",
            "description": "Domain code for the group."
          },
          "meta": {
            "$ref": "#/components/schemas/ScimMeta"
          }
        }
      },
      "ScimGroupMember": {
        "type": "object",
        "description": "User in a group/role.",
        "properties": {
          "value": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "$ref": {
            "type": "string",
            "description": "A callback link which can be used to get the information of the user"
          },
          "type": {
            "type": "string",
            "description": "Type of the resource."
          }
        }
      },
      "ScimUserGroup": {
        "type": "object",
        "description": "Group/role the user was assigned with.",
        "properties": {
          "value": {
            "type": "string",
            "description": "Unique identifier of the user's group."
          },
          "$ref": {
            "type": "string",
            "description": "A callback link which can be used to get the information of the group"
          },
          "type": {
            "type": "string",
            "description": "Type of the resource."
          },
          "display": {
            "type": "string",
            "description": "Name of the group"
          }
        }
      },
      "ScimGroupListResponse": {
        "type": "object",
        "description": "List of groups/roles.",
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of groups/roles available."
          },
          "itemsPerPage": {
            "type": "integer",
            "description": "The number of groups per page."
          },
          "startIndex": {
            "type": "integer",
            "description": "The starting index for the returned groups."
          },
          "Resources": {
            "type": "array",
            "description": "List of groups/roles returned in the response.",
            "items": {
              "$ref": "#/components/schemas/ScimGroup"
            }
          }
        }
      },
      "ScimUserListResponse": {
        "type": "object",
        "description": "List of users with pagination details.",
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The total number of users available."
          },
          "itemsPerPage": {
            "type": "integer",
            "description": "The number of users per page."
          },
          "startIndex": {
            "type": "integer",
            "description": "The starting index for the returned users."
          },
          "Resources": {
            "type": "array",
            "description": "The list of users returned in the response.",
            "items": {
              "$ref": "#/components/schemas/ScimUser"
            }
          }
        }
      },
      "ScimMeta": {
        "type": "object",
        "description": "Metadata information for the resource.",
        "properties": {
          "resourceType": {
            "type": "string",
            "description": "The type of resource (e.g., VRSUser, VRSGroup)."
          },
          "created": {
            "type": "string",
            "description": "The timestamp of when the resource was created."
          },
          "lastModified": {
            "type": "string",
            "description": "The timestamp of when the resource was last modified."
          },
          "location": {
            "type": "string",
            "description": "The URI location of the resource."
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "Represents an error response with an ID, code, and title.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the error."
          },
          "code": {
            "type": "string",
            "description": "The error code."
          },
          "title": {
            "type": "string",
            "description": "A short description of the error."
          }
        }
      },
      "ErrorList": {
        "type": "object",
        "description": "List of errors.",
        "properties": {
          "errors": {
            "type": "array",
            "description": "A list of errors encountered.",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ScimError": {
        "type": "object",
        "description": "Represents an error with detailed information, status, and schema.",
        "properties": {
          "schemas": {
            "type": "array",
            "description": "Schemas associated with the error.",
            "items": {
              "type": "string"
            }
          },
          "detail": {
            "type": "string",
            "description": "Detailed description of the error."
          },
          "status": {
            "type": "string",
            "description": "HTTP status code related to the error."
          }
        }
      },
      "VersionResponseBody": {
        "type": "object",
        "description": "details of VRS WRS versions",
        "properties": {
          "data": {
            "type": "object",
            "description": "Version details of VRS and WRS systems.",
            "properties": {
              "vrsVersion": {
                "type": "string",
                "description": "VRS version"
              },
              "wrsVersion": {
                "type": "string",
                "description": "WRS version"
              },
              "dbServer": {
                "type": "string",
                "description": "DB version"
              }
            }
          }
        }
      }
    }
  }
}