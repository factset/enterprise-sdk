{
  "openapi": "3.0.1",
  "info": {
    "title": "DSOTM API",
    "description": "Allow clients to send transactions data to FactSet.",
    "contact": {
      "name": "FactSet Research Systems",
      "url": "https://developer.factset.com/contact",
      "email": "api@factset.com"
    },
    "license": {
      "name": "Apache License, Version 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "1.5.0"
  },
  "servers": [
    {
      "url": "https://api.factset.com/analytics/dsotm/v1"
    }
  ],
  "paths": {
    "/transactions": {
      "post": {
        "tags": [
          "DSOTM"
        ],
        "summary": "Push transactions data into FactSet.",
        "description": "This endpoint takes the transactions data and pushes them into FactSet.",
        "operationId": "sendTransactions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transactions"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Expected response.",
            "headers": {
              "X-DataDirect-Request-Key": {
                "description": "FactSet’s request key header.",
                "schema": {
                  "type": "string",
                  "description": "FactSet’s request key header."
                }
              },
              "X-FactSet-Api-Request-Key": {
                "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication.",
                "schema": {
                  "type": "string",
                  "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication."
                }
              }
            }
          },
          "400": {
            "description": "Invalid POST body.",
            "headers": {
              "X-DataDirect-Request-Key": {
                "description": "FactSet’s request key header.",
                "schema": {
                  "type": "string",
                  "description": "FactSet’s request key header."
                }
              },
              "X-FactSet-Api-Request-Key": {
                "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication.",
                "schema": {
                  "type": "string",
                  "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid authentication.",
            "headers": {
              "X-DataDirect-Request-Key": {
                "description": "FactSet’s request key header.",
                "schema": {
                  "type": "string",
                  "description": "FactSet’s request key header."
                }
              },
              "X-FactSet-Api-Request-Key": {
                "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication.",
                "schema": {
                  "type": "string",
                  "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication."
                }
              }
            }
          },
          "403": {
            "description": "User is forbidden with current credentials",
            "headers": {
              "X-DataDirect-Request-Key": {
                "description": "FactSet’s request key header.",
                "schema": {
                  "type": "string",
                  "description": "FactSet’s request key header."
                }
              },
              "X-FactSet-Api-Request-Key": {
                "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication.",
                "schema": {
                  "type": "string",
                  "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication."
                }
              }
            }
          },
          "415": {
            "description": "Missing/Invalid Content-Type header. Header needs to be set to application/json.",
            "headers": {
              "X-DataDirect-Request-Key": {
                "description": "FactSet’s request key header.",
                "schema": {
                  "type": "string",
                  "description": "FactSet’s request key header."
                }
              },
              "X-FactSet-Api-Request-Key": {
                "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication.",
                "schema": {
                  "type": "string",
                  "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication."
                }
              }
            }
          },
          "429": {
            "description": "Rate limit reached. Retry the requests after waiting the time specified in the retry-after header.",
            "headers": {
              "X-DataDirect-Request-Key": {
                "description": "FactSet’s request key header.",
                "schema": {
                  "type": "string",
                  "description": "FactSet’s request key header."
                }
              },
              "X-FactSet-Api-Request-Key": {
                "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication.",
                "schema": {
                  "type": "string",
                  "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication."
                }
              }
            }
          },
          "500": {
            "description": "Server error. Log the X-DataDirectRequest-Key header to assist in troubleshooting.",
            "headers": {
              "X-DataDirect-Request-Key": {
                "description": "FactSet’s request key header.",
                "schema": {
                  "type": "string",
                  "description": "FactSet’s request key header."
                }
              },
              "X-FactSet-Api-Request-Key": {
                "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication.",
                "schema": {
                  "type": "string",
                  "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication."
                }
              }
            }
          },
          "503": {
            "description": "Request timed out. Retry the request in sometime.",
            "headers": {
              "X-DataDirect-Request-Key": {
                "description": "FactSet’s request key header.",
                "schema": {
                  "type": "string",
                  "description": "FactSet’s request key header."
                }
              },
              "X-FactSet-Api-Request-Key": {
                "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication.",
                "schema": {
                  "type": "string",
                  "description": "Key to uniquely identify an Analytics API request. Only available after successful authentication."
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ExecutionParameters": {
        "required": [
          "currencyISO",
          "description",
          "gross",
          "net",
          "portfolio",
          "quantity",
          "settlementCurrencyISO",
          "settlementDate",
          "settlementValue",
          "symbol",
          "tradeDate",
          "tradeType",
          "transactionId",
          "transactionStatus",
          "unitType"
        ],
        "type": "object",
        "properties": {
          "transactionStatus": {
            "type": "string",
            "description": "Transaction Status of an Execution could be any of the following values: Executed, Booked, Cancelled."
          },
          "parentId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id of the placement which spawned this execution",
            "nullable": true
          },
          "net": {
            "type": "number",
            "description": "Cash value of the transaction, net of brokerage costs.",
            "format": "double"
          },
          "settlementDate": {
            "type": "string",
            "description": "Settlement date in YYYY-MM-DD format"
          },
          "settlementCurrencyISO": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Currency code for Settlement Value"
          },
          "settlementValue": {
            "type": "number",
            "description": "Cash value of the transaction in settlement currency",
            "format": "double"
          },
          "foreignExchangeRate": {
            "type": "number",
            "description": "FX rate to convert the net, gross fields to reporting currency.",
            "format": "float"
          },
          "broker": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Execution broker id."
          },
          "custodian": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Execution custodian Id."
          },
          "accruedInterest": {
            "type": "number",
            "description": "Execution accrued interest.",
            "format": "double"
          },
          "commission": {
            "type": "number",
            "description": "Execution commission value.",
            "format": "double"
          },
          "clearingCommission": {
            "type": "number",
            "description": "Execution clearing commission value.",
            "format": "double"
          },
          "localTax": {
            "type": "number",
            "description": "Execution local tax value.",
            "format": "double"
          },
          "localFee": {
            "type": "number",
            "description": "Execution local fee value.",
            "format": "double"
          },
          "brokerFee": {
            "type": "number",
            "description": "Execution broker fee value.",
            "format": "double"
          },
          "exchangeFee": {
            "type": "number",
            "description": "Execution exchange fee value.",
            "format": "double"
          },
          "miscellaneousFee": {
            "type": "number",
            "description": "Execution miscellaneous fee value.",
            "format": "double"
          },
          "transactionId": {
            "maxLength": 252,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id for the transaction"
          },
          "orderId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id of the order which originated the record",
            "nullable": true
          },
          "portfolio": {
            "type": "string",
            "description": "Path of the portfolio (Ex: Client:/folder1/testing.ofdb)"
          },
          "symbol": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Symbol corresponding to the traded instrument."
          },
          "description": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Description"
          },
          "tradeType": {
            "type": "string",
            "description": "Trade type could be any of the following values BL, BC, SL, SS.\r\nwhich stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively."
          },
          "unitType": {
            "type": "string",
            "description": "Unit type could be one of Quantity or Value."
          },
          "transactionLeaves": {
            "type": "number",
            "description": "Shares that have been ordered and not executed",
            "format": "double"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the instrument traded.",
            "format": "double"
          },
          "gross": {
            "type": "number",
            "description": "Cash value of the transaction",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "The transaction price",
            "format": "double"
          },
          "currencyISO": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The currency code of cash valued fields, Net Amount and Gross Amount."
          },
          "tradeDate": {
            "type": "string",
            "description": "Trade date which is in the format YYYY-MM-DD"
          },
          "addedDateTime": {
            "type": "string",
            "description": "Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF"
          },
          "updatedDateTime": {
            "type": "string",
            "description": "Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF"
          },
          "entity": {
            "type": "string",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "PlacementParameters": {
        "required": [
          "currencyISO",
          "description",
          "gross",
          "portfolio",
          "quantity",
          "symbol",
          "tradeDate",
          "tradeType",
          "transactionId",
          "transactionStatus",
          "unitType"
        ],
        "type": "object",
        "properties": {
          "transactionStatus": {
            "type": "string",
            "description": "Transaction Status of a Placement could be any of the following values: Placed, PartialFilled, Filled, Expired, Cancelled, Rejected."
          },
          "parentId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id of the order which spawned this placement",
            "nullable": true
          },
          "instructionType": {
            "type": "string",
            "description": "Instruction Type of a Placement could be any of the following values: Market, Limit, Stop"
          },
          "instructionValue": {
            "type": "number",
            "description": "InstructionValue for a Placement",
            "format": "double"
          },
          "tif": {
            "type": "string",
            "description": "TIF of an Order could be any of the following values: GTC, GTD, D, W"
          },
          "tifDate": {
            "type": "string",
            "description": "TIF date which is in the format YYYY-MM-DD"
          },
          "transactionId": {
            "maxLength": 252,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id for the transaction"
          },
          "orderId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id of the order which originated the record",
            "nullable": true
          },
          "portfolio": {
            "type": "string",
            "description": "Path of the portfolio (Ex: Client:/folder1/testing.ofdb)"
          },
          "symbol": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Symbol corresponding to the traded instrument."
          },
          "description": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Description"
          },
          "tradeType": {
            "type": "string",
            "description": "Trade type could be any of the following values BL, BC, SL, SS.\r\nwhich stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively."
          },
          "unitType": {
            "type": "string",
            "description": "Unit type could be one of Quantity or Value."
          },
          "transactionLeaves": {
            "type": "number",
            "description": "Shares that have been ordered and not executed",
            "format": "double"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the instrument traded.",
            "format": "double"
          },
          "gross": {
            "type": "number",
            "description": "Cash value of the transaction",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "The transaction price",
            "format": "double"
          },
          "currencyISO": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The currency code of cash valued fields, Net Amount and Gross Amount."
          },
          "tradeDate": {
            "type": "string",
            "description": "Trade date which is in the format YYYY-MM-DD"
          },
          "addedDateTime": {
            "type": "string",
            "description": "Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF"
          },
          "updatedDateTime": {
            "type": "string",
            "description": "Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF"
          },
          "entity": {
            "type": "string",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "OrderParameters": {
        "required": [
          "currencyISO",
          "description",
          "gross",
          "portfolio",
          "quantity",
          "symbol",
          "tradeDate",
          "tradeType",
          "transactionId",
          "transactionStatus",
          "unitType"
        ],
        "type": "object",
        "properties": {
          "transactionStatus": {
            "type": "string",
            "description": "Transaction Status of an Order could be any of the following values: PendingApproval, Open, Placed, PartialFilled, Filled, Expired, Cancelled, Rejected, Booked."
          },
          "instructionType": {
            "type": "string",
            "description": "Instruction Type of an Order could be any of the following values: Market, Limit, Stop"
          },
          "instructionValue": {
            "type": "number",
            "description": "Instruction Value of an Order",
            "format": "double"
          },
          "tif": {
            "type": "string",
            "description": "TIF of an Order could be any of the following values: GTC, GTD, D, W"
          },
          "tifDate": {
            "type": "string",
            "description": "TIF date which is in the format YYYY-MM-DD"
          },
          "fundTeam": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Fund Team of an Order"
          },
          "tradingTeam": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Trading Team of an Order"
          },
          "trader": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "User Id of assigned trader."
          },
          "transactionId": {
            "maxLength": 252,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id for the transaction"
          },
          "orderId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Unique Id of the order which originated the record",
            "nullable": true
          },
          "portfolio": {
            "type": "string",
            "description": "Path of the portfolio (Ex: Client:/folder1/testing.ofdb)"
          },
          "symbol": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Symbol corresponding to the traded instrument."
          },
          "description": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Description"
          },
          "tradeType": {
            "type": "string",
            "description": "Trade type could be any of the following values BL, BC, SL, SS.\r\nwhich stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively."
          },
          "unitType": {
            "type": "string",
            "description": "Unit type could be one of Quantity or Value."
          },
          "transactionLeaves": {
            "type": "number",
            "description": "Shares that have been ordered and not executed",
            "format": "double"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the instrument traded.",
            "format": "double"
          },
          "gross": {
            "type": "number",
            "description": "Cash value of the transaction",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "The transaction price",
            "format": "double"
          },
          "currencyISO": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The currency code of cash valued fields, Net Amount and Gross Amount."
          },
          "tradeDate": {
            "type": "string",
            "description": "Trade date which is in the format YYYY-MM-DD"
          },
          "addedDateTime": {
            "type": "string",
            "description": "Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF"
          },
          "updatedDateTime": {
            "type": "string",
            "description": "Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF"
          },
          "entity": {
            "type": "string",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Transactions": {
        "type": "object",
        "properties": {
          "executions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutionParameters"
            },
            "description": "List of executions",
            "nullable": true
          },
          "placements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementParameters"
            },
            "description": "List of placements",
            "nullable": true
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderParameters"
            },
            "description": "List of orders",
            "nullable": true
          }
        }
      },
      "ErrorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "nullable": true
          },
          "parameter": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/ErrorSource"
          }
        }
      },
      "ClientErrorResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "FactSetOAuth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth.factset.com/as/token.oauth2",
            "scopes": {}
          }
        }
      },
      "FactSetApiKey": {
        "type": "http",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "FactSetApiKey": []
    },
    {
      "FactSetOAuth2": []
    }
  ],
  "externalDocs": {
    "description": "API Documentation",
    "url": "https://developer.factset.com/api-catalog/direct-streaming-transaction-messages-api"
  }
}