"""
    FactSet Funds API

    FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.FactSetFunds.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.FactSetFunds.exceptions import ApiAttributeError



class Summaries(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'fsym_id': (str, none_type,),  # noqa: E501
            'fsym_entity_id': (str, none_type,),  # noqa: E501
            'fsym_regional_id': (str, none_type,),  # noqa: E501
            'fsym_ticker_region': (str, none_type,),  # noqa: E501
            'fsym_ultimate_parent_id': (str, none_type,),  # noqa: E501
            'request_id': (str,),  # noqa: E501
            'active_flag': (int, none_type,),  # noqa: E501
            'actively_managed_flag': (int, none_type,),  # noqa: E501
            'brand': (str, none_type,),  # noqa: E501
            'country_domicile': (str, none_type,),  # noqa: E501
            'currency': (str, none_type,),  # noqa: E501
            'desc_info': (str, none_type,),  # noqa: E501
            'fund_of_funds_id': (str, none_type,),  # noqa: E501
            'inception_date': (date, none_type,),  # noqa: E501
            'insight': (str, none_type,),  # noqa: E501
            'issuer_id': (str, none_type,),  # noqa: E501
            'issuer_name': (str, none_type,),  # noqa: E501
            'legal_structure': (str, none_type,),  # noqa: E501
            'leverage_factor': (float, none_type,),  # noqa: E501
            'leverage_inverse': (str, none_type,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'nav_currency': (str, none_type,),  # noqa: E501
            'objective': (str, none_type,),  # noqa: E501
            'price_first_date': (date, none_type,),  # noqa: E501
            'price_recent_date': (date, none_type,),  # noqa: E501
            'shr_class': (str, none_type,),  # noqa: E501
            'shr_class_active_flag': (int, none_type,),  # noqa: E501
            'shr_cls_actively_managed_flag': (int, none_type,),  # noqa: E501
            'shr_cls_currency': (str, none_type,),  # noqa: E501
            'shr_cls_incept_date': (date, none_type,),  # noqa: E501
            'shr_cls_name': (str, none_type,),  # noqa: E501
            'shr_cls_term_date': (date, none_type,),  # noqa: E501
            'termination_date': (date, none_type,),  # noqa: E501
            'type': (str, none_type,),  # noqa: E501
            'web_site': (str, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'fsym_id': 'fsymId',  # noqa: E501
        'fsym_entity_id': 'fsymEntityId',  # noqa: E501
        'fsym_regional_id': 'fsymRegionalId',  # noqa: E501
        'fsym_ticker_region': 'fsymTickerRegion',  # noqa: E501
        'fsym_ultimate_parent_id': 'fsymUltimateParentId',  # noqa: E501
        'request_id': 'requestId',  # noqa: E501
        'active_flag': 'activeFlag',  # noqa: E501
        'actively_managed_flag': 'activelyManagedFlag',  # noqa: E501
        'brand': 'brand',  # noqa: E501
        'country_domicile': 'countryDomicile',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'desc_info': 'descInfo',  # noqa: E501
        'fund_of_funds_id': 'fundOfFundsId',  # noqa: E501
        'inception_date': 'inceptionDate',  # noqa: E501
        'insight': 'insight',  # noqa: E501
        'issuer_id': 'issuerId',  # noqa: E501
        'issuer_name': 'issuerName',  # noqa: E501
        'legal_structure': 'legalStructure',  # noqa: E501
        'leverage_factor': 'leverageFactor',  # noqa: E501
        'leverage_inverse': 'leverageInverse',  # noqa: E501
        'name': 'name',  # noqa: E501
        'nav_currency': 'navCurrency',  # noqa: E501
        'objective': 'objective',  # noqa: E501
        'price_first_date': 'priceFirstDate',  # noqa: E501
        'price_recent_date': 'priceRecentDate',  # noqa: E501
        'shr_class': 'shrClass',  # noqa: E501
        'shr_class_active_flag': 'shrClassActiveFlag',  # noqa: E501
        'shr_cls_actively_managed_flag': 'shrClsActivelyManagedFlag',  # noqa: E501
        'shr_cls_currency': 'shrClsCurrency',  # noqa: E501
        'shr_cls_incept_date': 'shrClsInceptDate',  # noqa: E501
        'shr_cls_name': 'shrClsName',  # noqa: E501
        'shr_cls_term_date': 'shrClsTermDate',  # noqa: E501
        'termination_date': 'terminationDate',  # noqa: E501
        'type': 'type',  # noqa: E501
        'web_site': 'webSite',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Summaries - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            fsym_id (str, none_type): FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.. [optional]  # noqa: E501
            fsym_entity_id (str, none_type): FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E), resolved from the requestId of the Fund requested.. [optional]  # noqa: E501
            fsym_regional_id (str, none_type): FactSet Regional Identifier. Six alpha-numeric characters, excluding vowels, with a -R suffix (XXXXXX-R), resolved from the requestId of the Fund requested.. [optional]  # noqa: E501
            fsym_ticker_region (str, none_type): FactSet Ticker-Region for the requested fund.. [optional]  # noqa: E501
            fsym_ultimate_parent_id (str, none_type): The FactSet Ultimate Parent Entity Identifer, with a -E suffix (XXXXXX-E).. [optional]  # noqa: E501
            request_id (str): The requested Id sent as input.. [optional]  # noqa: E501
            active_flag (int, none_type): Binary flag to indicate whether the fund is currently active, where 1 is active and 0 is inactive.. [optional]  # noqa: E501
            actively_managed_flag (int, none_type): Binary indicator of whether the fund is actively managed, where 1 is active and 0 is inactive.. [optional]  # noqa: E501
            brand (str, none_type): The Funds Brand Name in proper format.. [optional]  # noqa: E501
            country_domicile (str, none_type): Returns the fund's country of domicile in ISO2 format. Only available for Mutual Funds.. [optional]  # noqa: E501
            currency (str, none_type): The fund's currency.. [optional]  # noqa: E501
            desc_info (str, none_type): The Fund's Investment Strategy short description.. [optional]  # noqa: E501
            fund_of_funds_id (str, none_type): The fund of fund's id if applicable. Will provide plain Fund of Funds text.. [optional]  # noqa: E501
            inception_date (date, none_type): The fund's inception date in YYYY-MM-DD format.. [optional]  # noqa: E501
            insight (str, none_type): The fund's investment strategy long description. Use `descInfo` if needing short description.. [optional]  # noqa: E501
            issuer_id (str, none_type): The Issuer Identifier.. [optional]  # noqa: E501
            issuer_name (str, none_type): The Issuer Name in proper format.. [optional]  # noqa: E501
            legal_structure (str, none_type): The legal structure of the fund, e.g. Open-Ended Fund, close-ended fund. [optional]  # noqa: E501
            leverage_factor (float, none_type): The leverage factor of the fund.. [optional]  # noqa: E501
            leverage_inverse (str, none_type): Indicates whether the fund is leveraged, inverse, or neither in proper format.. [optional]  # noqa: E501
            name (str, none_type): The Fund security's name in proper format.. [optional]  # noqa: E501
            nav_currency (str, none_type): The NAV currency for the specified share class.. [optional]  # noqa: E501
            objective (str, none_type): The Fund's objective long description.. [optional]  # noqa: E501
            price_first_date (date, none_type): The fund's first available date for prices (NAV) in YYYY-MM-DD format. This can be used to fetch the first available price from FactSet. *NOTE: This is not the inception date of fund.*. [optional]  # noqa: E501
            price_recent_date (date, none_type): The fund's most recent available date for prices (NAV) in YYYY-MM-DD format.. [optional]  # noqa: E501
            shr_class (str, none_type): The Funds Share class type name in proper format.. [optional]  # noqa: E501
            shr_class_active_flag (int, none_type): Returns a binary indicator of whether the specified share class is currently active, where 1 is active and 0 is inactive.. [optional]  # noqa: E501
            shr_cls_actively_managed_flag (int, none_type): Returns a binary indicator of whether the specified share class is actively managed, where 1 is active and 0 is inactive.. [optional]  # noqa: E501
            shr_cls_currency (str, none_type): The currency for the specified share class.. [optional]  # noqa: E501
            shr_cls_incept_date (date, none_type): The specified share class's inception date in YYYY-MM-DD format.. [optional]  # noqa: E501
            shr_cls_name (str, none_type): The specified share class name for the fund in proper format.. [optional]  # noqa: E501
            shr_cls_term_date (date, none_type): The Share class Termination Date in YYYY-MM-DD format. If still active, value will be null.. [optional]  # noqa: E501
            termination_date (date, none_type): The Termination Date in YYYY-MM-DD format. If still active, value will be null.. [optional]  # noqa: E501
            type (str, none_type): The Type of Fund, e.g. Mutual Fund, Unit Investment Trust. [optional]  # noqa: E501
            web_site (str, none_type): The URL of the Fund.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Summaries - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            fsym_id (str, none_type): FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.. [optional]  # noqa: E501
            fsym_entity_id (str, none_type): FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E), resolved from the requestId of the Fund requested.. [optional]  # noqa: E501
            fsym_regional_id (str, none_type): FactSet Regional Identifier. Six alpha-numeric characters, excluding vowels, with a -R suffix (XXXXXX-R), resolved from the requestId of the Fund requested.. [optional]  # noqa: E501
            fsym_ticker_region (str, none_type): FactSet Ticker-Region for the requested fund.. [optional]  # noqa: E501
            fsym_ultimate_parent_id (str, none_type): The FactSet Ultimate Parent Entity Identifer, with a -E suffix (XXXXXX-E).. [optional]  # noqa: E501
            request_id (str): The requested Id sent as input.. [optional]  # noqa: E501
            active_flag (int, none_type): Binary flag to indicate whether the fund is currently active, where 1 is active and 0 is inactive.. [optional]  # noqa: E501
            actively_managed_flag (int, none_type): Binary indicator of whether the fund is actively managed, where 1 is active and 0 is inactive.. [optional]  # noqa: E501
            brand (str, none_type): The Funds Brand Name in proper format.. [optional]  # noqa: E501
            country_domicile (str, none_type): Returns the fund's country of domicile in ISO2 format. Only available for Mutual Funds.. [optional]  # noqa: E501
            currency (str, none_type): The fund's currency.. [optional]  # noqa: E501
            desc_info (str, none_type): The Fund's Investment Strategy short description.. [optional]  # noqa: E501
            fund_of_funds_id (str, none_type): The fund of fund's id if applicable. Will provide plain Fund of Funds text.. [optional]  # noqa: E501
            inception_date (date, none_type): The fund's inception date in YYYY-MM-DD format.. [optional]  # noqa: E501
            insight (str, none_type): The fund's investment strategy long description. Use `descInfo` if needing short description.. [optional]  # noqa: E501
            issuer_id (str, none_type): The Issuer Identifier.. [optional]  # noqa: E501
            issuer_name (str, none_type): The Issuer Name in proper format.. [optional]  # noqa: E501
            legal_structure (str, none_type): The legal structure of the fund, e.g. Open-Ended Fund, close-ended fund. [optional]  # noqa: E501
            leverage_factor (float, none_type): The leverage factor of the fund.. [optional]  # noqa: E501
            leverage_inverse (str, none_type): Indicates whether the fund is leveraged, inverse, or neither in proper format.. [optional]  # noqa: E501
            name (str, none_type): The Fund security's name in proper format.. [optional]  # noqa: E501
            nav_currency (str, none_type): The NAV currency for the specified share class.. [optional]  # noqa: E501
            objective (str, none_type): The Fund's objective long description.. [optional]  # noqa: E501
            price_first_date (date, none_type): The fund's first available date for prices (NAV) in YYYY-MM-DD format. This can be used to fetch the first available price from FactSet. *NOTE: This is not the inception date of fund.*. [optional]  # noqa: E501
            price_recent_date (date, none_type): The fund's most recent available date for prices (NAV) in YYYY-MM-DD format.. [optional]  # noqa: E501
            shr_class (str, none_type): The Funds Share class type name in proper format.. [optional]  # noqa: E501
            shr_class_active_flag (int, none_type): Returns a binary indicator of whether the specified share class is currently active, where 1 is active and 0 is inactive.. [optional]  # noqa: E501
            shr_cls_actively_managed_flag (int, none_type): Returns a binary indicator of whether the specified share class is actively managed, where 1 is active and 0 is inactive.. [optional]  # noqa: E501
            shr_cls_currency (str, none_type): The currency for the specified share class.. [optional]  # noqa: E501
            shr_cls_incept_date (date, none_type): The specified share class's inception date in YYYY-MM-DD format.. [optional]  # noqa: E501
            shr_cls_name (str, none_type): The specified share class name for the fund in proper format.. [optional]  # noqa: E501
            shr_cls_term_date (date, none_type): The Share class Termination Date in YYYY-MM-DD format. If still active, value will be null.. [optional]  # noqa: E501
            termination_date (date, none_type): The Termination Date in YYYY-MM-DD format. If still active, value will be null.. [optional]  # noqa: E501
            type (str, none_type): The Type of Fund, e.g. Mutual Fund, Unit Investment Trust. [optional]  # noqa: E501
            web_site (str, none_type): The URL of the Fund.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
