"""
    FactSet Funds API

    FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>   # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
from multiprocessing.pool import ApplyResult
import typing

from fds.sdk.FactSetFunds.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.FactSetFunds.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.FactSetFunds.exceptions import ApiException
from fds.sdk.FactSetFunds.model.content_sets_response import ContentSetsResponse
from fds.sdk.FactSetFunds.model.create_content_set_request import CreateContentSetRequest
from fds.sdk.FactSetFunds.model.create_content_set_response import CreateContentSetResponse
from fds.sdk.FactSetFunds.model.distinct_count_request import DistinctCountRequest
from fds.sdk.FactSetFunds.model.distinct_count_response import DistinctCountResponse
from fds.sdk.FactSetFunds.model.error_response import ErrorResponse
from fds.sdk.FactSetFunds.model.error_response_screener import ErrorResponseScreener
from fds.sdk.FactSetFunds.model.fields_response import FieldsResponse
from fds.sdk.FactSetFunds.model.search_request import SearchRequest
from fds.sdk.FactSetFunds.model.search_response import SearchResponse
from fds.sdk.FactSetFunds.model.statistics_request import StatisticsRequest
from fds.sdk.FactSetFunds.model.statistics_response import StatisticsResponse





class ScreeningOperationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.create_content_set_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 201: (CreateContentSetResponse,), 400: (ErrorResponse,), 401: (ErrorResponse,), 403: (ErrorResponse,), 404: (ErrorResponse,), 415: (ErrorResponse,), 500: (ErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-funds/v1/screener/content-sets/create',
                'operation_id': 'create_content_set',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_content_set_request',
                ],
                'required': [
                    'create_content_set_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_content_set_request':
                        (CreateContentSetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_content_set_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

        self.delete_content_set_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-funds/v1/screener/content-sets/{name}',
                'operation_id': 'delete_content_set',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.get_content_sets_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (ContentSetsResponse,), 400: (ErrorResponseScreener,), 401: (ErrorResponse,), 403: (ErrorResponse,), 404: (ErrorResponse,), 415: (ErrorResponse,), 500: (ErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-funds/v1/screener/content-sets',
                'operation_id': 'get_content_sets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.get_distinct_count_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (DistinctCountResponse,), 400: (ErrorResponse,), 401: (ErrorResponse,), 403: (ErrorResponse,), 404: (ErrorResponse,), 415: (ErrorResponse,), 500: (ErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-funds/v1/screener/distinct-count',
                'operation_id': 'get_distinct_count',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'distinct_count_request',
                ],
                'required': [
                    'distinct_count_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'distinct_count_request':
                        (DistinctCountRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'distinct_count_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

        self.get_fields_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (FieldsResponse,), 400: (ErrorResponse,), 401: (ErrorResponse,), 403: (ErrorResponse,), 404: (ErrorResponse,), 415: (ErrorResponse,), 500: (ErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-funds/v1/screener/fields',
                'operation_id': 'get_fields',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_sets',
                ],
                'required': [
                    'content_sets',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'content_sets',
                ]
            },
            root_map={
                'validations': {
                    ('content_sets',): {

                        'max_items': 10,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_sets':
                        ([str],),
                },
                'attribute_map': {
                    'content_sets': 'contentSets',
                },
                'location_map': {
                    'content_sets': 'query',
                },
                'collection_format_map': {
                    'content_sets': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.get_screener_data_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (SearchResponse,), 400: (ErrorResponse,), 401: (ErrorResponse,), 403: (ErrorResponse,), 404: (ErrorResponse,), 415: (ErrorResponse,), 500: (ErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-funds/v1/screener/search',
                'operation_id': 'get_screener_data',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'search_request',
                ],
                'required': [
                    'search_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search_request':
                        (SearchRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'search_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

        self.get_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (StatisticsResponse,), 400: (ErrorResponse,), 401: (ErrorResponse,), 403: (ErrorResponse,), 404: (ErrorResponse,), 415: (ErrorResponse,), 500: (ErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-funds/v1/screener/statistics',
                'operation_id': 'get_statistics',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'statistics_request',
                ],
                'required': [
                    'statistics_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'statistics_request':
                        (StatisticsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'statistics_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )


    @staticmethod
    def apply_kwargs_defaults(kwargs, return_http_data_only, async_req):
        kwargs["async_req"] = async_req
        kwargs["_return_http_data_only"] = return_http_data_only
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")


    def create_content_set(
        self,
        create_content_set_request,
        **kwargs
    ) -> CreateContentSetResponse:
        """Create a new custom content set with required fields from the default content sets.  # noqa: E501

        Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The `/screener/content-sets` and `/screener/fields` endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique.   # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            create_content_set_request (CreateContentSetRequest): Request object for create content-set endpoint.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            CreateContentSetResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['create_content_set_request'] = \
            create_content_set_request
        return self.create_content_set_endpoint.call_with_http_info(**kwargs)

    def create_content_set_with_http_info(
        self,
        create_content_set_request,
        **kwargs
    ) -> typing.Tuple[CreateContentSetResponse, int, typing.MutableMapping]:
        """Create a new custom content set with required fields from the default content sets.  # noqa: E501

        Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The `/screener/content-sets` and `/screener/fields` endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique.   # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            create_content_set_request (CreateContentSetRequest): Request object for create content-set endpoint.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            CreateContentSetResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['create_content_set_request'] = \
            create_content_set_request
        return self.create_content_set_endpoint.call_with_http_info(**kwargs)

    def create_content_set_async(
        self,
        create_content_set_request,
        **kwargs
    ) -> "ApplyResult[CreateContentSetResponse]":
        """Create a new custom content set with required fields from the default content sets.  # noqa: E501

        Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The `/screener/content-sets` and `/screener/fields` endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            create_content_set_request (CreateContentSetRequest): Request object for create content-set endpoint.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[CreateContentSetResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['create_content_set_request'] = \
            create_content_set_request
        return self.create_content_set_endpoint.call_with_http_info(**kwargs)

    def create_content_set_with_http_info_async(
        self,
        create_content_set_request,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[CreateContentSetResponse, int, typing.MutableMapping]]":
        """Create a new custom content set with required fields from the default content sets.  # noqa: E501

        Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The `/screener/content-sets` and `/screener/fields` endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            create_content_set_request (CreateContentSetRequest): Request object for create content-set endpoint.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(CreateContentSetResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['create_content_set_request'] = \
            create_content_set_request
        return self.create_content_set_endpoint.call_with_http_info(**kwargs)


    def delete_content_set(
        self,
        name,
        **kwargs
    ) -> None:
        """Delete a custom content set.  # noqa: E501

        Delete a custom content set by providing the content set name.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            name (str): The name of the content set to be deleted.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            None
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['name'] = \
            name
        return self.delete_content_set_endpoint.call_with_http_info(**kwargs)

    def delete_content_set_with_http_info(
        self,
        name,
        **kwargs
    ) -> typing.Tuple[None, int, typing.MutableMapping]:
        """Delete a custom content set.  # noqa: E501

        Delete a custom content set by providing the content set name.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            name (str): The name of the content set to be deleted.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            None
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['name'] = \
            name
        return self.delete_content_set_endpoint.call_with_http_info(**kwargs)

    def delete_content_set_async(
        self,
        name,
        **kwargs
    ) -> "ApplyResult[None]":
        """Delete a custom content set.  # noqa: E501

        Delete a custom content set by providing the content set name.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            name (str): The name of the content set to be deleted.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[None]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['name'] = \
            name
        return self.delete_content_set_endpoint.call_with_http_info(**kwargs)

    def delete_content_set_with_http_info_async(
        self,
        name,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[None, int, typing.MutableMapping]]":
        """Delete a custom content set.  # noqa: E501

        Delete a custom content set by providing the content set name.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            name (str): The name of the content set to be deleted.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(None, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['name'] = \
            name
        return self.delete_content_set_endpoint.call_with_http_info(**kwargs)


    def get_content_sets(
        self,
        **kwargs
    ) -> ContentSetsResponse:
        """Get the content sets that are permissioned for the user.  # noqa: E501

        Gets the content sets that are permissioned for the user. for example: `Factset Fundamentals`, `Factset Funds`, etc.   # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ContentSetsResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.get_content_sets_endpoint.call_with_http_info(**kwargs)

    def get_content_sets_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[ContentSetsResponse, int, typing.MutableMapping]:
        """Get the content sets that are permissioned for the user.  # noqa: E501

        Gets the content sets that are permissioned for the user. for example: `Factset Fundamentals`, `Factset Funds`, etc.   # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ContentSetsResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.get_content_sets_endpoint.call_with_http_info(**kwargs)

    def get_content_sets_async(
        self,
        **kwargs
    ) -> "ApplyResult[ContentSetsResponse]":
        """Get the content sets that are permissioned for the user.  # noqa: E501

        Gets the content sets that are permissioned for the user. for example: `Factset Fundamentals`, `Factset Funds`, etc.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[ContentSetsResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.get_content_sets_endpoint.call_with_http_info(**kwargs)

    def get_content_sets_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[ContentSetsResponse, int, typing.MutableMapping]]":
        """Get the content sets that are permissioned for the user.  # noqa: E501

        Gets the content sets that are permissioned for the user. for example: `Factset Fundamentals`, `Factset Funds`, etc.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(ContentSetsResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.get_content_sets_endpoint.call_with_http_info(**kwargs)


    def get_distinct_count(
        self,
        distinct_count_request,
        **kwargs
    ) -> DistinctCountResponse:
        """Returns the number of records for a given field spread across all possible values.  # noqa: E501

        Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported.   # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            distinct_count_request (DistinctCountRequest): Request object for `distinct-count`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            DistinctCountResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['distinct_count_request'] = \
            distinct_count_request
        return self.get_distinct_count_endpoint.call_with_http_info(**kwargs)

    def get_distinct_count_with_http_info(
        self,
        distinct_count_request,
        **kwargs
    ) -> typing.Tuple[DistinctCountResponse, int, typing.MutableMapping]:
        """Returns the number of records for a given field spread across all possible values.  # noqa: E501

        Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported.   # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            distinct_count_request (DistinctCountRequest): Request object for `distinct-count`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            DistinctCountResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['distinct_count_request'] = \
            distinct_count_request
        return self.get_distinct_count_endpoint.call_with_http_info(**kwargs)

    def get_distinct_count_async(
        self,
        distinct_count_request,
        **kwargs
    ) -> "ApplyResult[DistinctCountResponse]":
        """Returns the number of records for a given field spread across all possible values.  # noqa: E501

        Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            distinct_count_request (DistinctCountRequest): Request object for `distinct-count`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[DistinctCountResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['distinct_count_request'] = \
            distinct_count_request
        return self.get_distinct_count_endpoint.call_with_http_info(**kwargs)

    def get_distinct_count_with_http_info_async(
        self,
        distinct_count_request,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[DistinctCountResponse, int, typing.MutableMapping]]":
        """Returns the number of records for a given field spread across all possible values.  # noqa: E501

        Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            distinct_count_request (DistinctCountRequest): Request object for `distinct-count`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(DistinctCountResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['distinct_count_request'] = \
            distinct_count_request
        return self.get_distinct_count_endpoint.call_with_http_info(**kwargs)


    def get_fields(
        self,
        content_sets,
        **kwargs
    ) -> FieldsResponse:
        """Get the list of fields available for given content set.  # noqa: E501

        Gets the list of fields available for a given content set (or combination of content sets). For example: `Factset Fundamentals`, `Factset Funds`, etc.  Both default and custom content sets are supported.   # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            content_sets ([str]): The content sets from which the fields are requested. For example: `Factset Fundamentals`,  `Factset Funds`, etc. 

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            FieldsResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['content_sets'] = \
            content_sets
        return self.get_fields_endpoint.call_with_http_info(**kwargs)

    def get_fields_with_http_info(
        self,
        content_sets,
        **kwargs
    ) -> typing.Tuple[FieldsResponse, int, typing.MutableMapping]:
        """Get the list of fields available for given content set.  # noqa: E501

        Gets the list of fields available for a given content set (or combination of content sets). For example: `Factset Fundamentals`, `Factset Funds`, etc.  Both default and custom content sets are supported.   # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            content_sets ([str]): The content sets from which the fields are requested. For example: `Factset Fundamentals`,  `Factset Funds`, etc. 

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            FieldsResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['content_sets'] = \
            content_sets
        return self.get_fields_endpoint.call_with_http_info(**kwargs)

    def get_fields_async(
        self,
        content_sets,
        **kwargs
    ) -> "ApplyResult[FieldsResponse]":
        """Get the list of fields available for given content set.  # noqa: E501

        Gets the list of fields available for a given content set (or combination of content sets). For example: `Factset Fundamentals`, `Factset Funds`, etc.  Both default and custom content sets are supported.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            content_sets ([str]): The content sets from which the fields are requested. For example: `Factset Fundamentals`,  `Factset Funds`, etc. 

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[FieldsResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['content_sets'] = \
            content_sets
        return self.get_fields_endpoint.call_with_http_info(**kwargs)

    def get_fields_with_http_info_async(
        self,
        content_sets,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[FieldsResponse, int, typing.MutableMapping]]":
        """Get the list of fields available for given content set.  # noqa: E501

        Gets the list of fields available for a given content set (or combination of content sets). For example: `Factset Fundamentals`, `Factset Funds`, etc.  Both default and custom content sets are supported.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            content_sets ([str]): The content sets from which the fields are requested. For example: `Factset Fundamentals`,  `Factset Funds`, etc. 

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(FieldsResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['content_sets'] = \
            content_sets
        return self.get_fields_endpoint.call_with_http_info(**kwargs)


    def get_screener_data(
        self,
        search_request,
        **kwargs
    ) -> SearchResponse:
        """Returns all the records that match the given criteria.  # noqa: E501

        Returns the records that match the given criteria. The request object for `Search` allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses `displayName`.   # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            search_request (SearchRequest): Request object for `Search`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            SearchResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['search_request'] = \
            search_request
        return self.get_screener_data_endpoint.call_with_http_info(**kwargs)

    def get_screener_data_with_http_info(
        self,
        search_request,
        **kwargs
    ) -> typing.Tuple[SearchResponse, int, typing.MutableMapping]:
        """Returns all the records that match the given criteria.  # noqa: E501

        Returns the records that match the given criteria. The request object for `Search` allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses `displayName`.   # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            search_request (SearchRequest): Request object for `Search`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            SearchResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['search_request'] = \
            search_request
        return self.get_screener_data_endpoint.call_with_http_info(**kwargs)

    def get_screener_data_async(
        self,
        search_request,
        **kwargs
    ) -> "ApplyResult[SearchResponse]":
        """Returns all the records that match the given criteria.  # noqa: E501

        Returns the records that match the given criteria. The request object for `Search` allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses `displayName`.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            search_request (SearchRequest): Request object for `Search`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[SearchResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['search_request'] = \
            search_request
        return self.get_screener_data_endpoint.call_with_http_info(**kwargs)

    def get_screener_data_with_http_info_async(
        self,
        search_request,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[SearchResponse, int, typing.MutableMapping]]":
        """Returns all the records that match the given criteria.  # noqa: E501

        Returns the records that match the given criteria. The request object for `Search` allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses `displayName`.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            search_request (SearchRequest): Request object for `Search`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(SearchResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['search_request'] = \
            search_request
        return self.get_screener_data_endpoint.call_with_http_info(**kwargs)


    def get_statistics(
        self,
        statistics_request,
        **kwargs
    ) -> StatisticsResponse:
        """Returns the statistics and histogram data for a given field within the specified content sets.  # noqa: E501

        Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned.   # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            statistics_request (StatisticsRequest): Request object for `Statistics`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            StatisticsResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['statistics_request'] = \
            statistics_request
        return self.get_statistics_endpoint.call_with_http_info(**kwargs)

    def get_statistics_with_http_info(
        self,
        statistics_request,
        **kwargs
    ) -> typing.Tuple[StatisticsResponse, int, typing.MutableMapping]:
        """Returns the statistics and histogram data for a given field within the specified content sets.  # noqa: E501

        Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned.   # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            statistics_request (StatisticsRequest): Request object for `Statistics`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            StatisticsResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['statistics_request'] = \
            statistics_request
        return self.get_statistics_endpoint.call_with_http_info(**kwargs)

    def get_statistics_async(
        self,
        statistics_request,
        **kwargs
    ) -> "ApplyResult[StatisticsResponse]":
        """Returns the statistics and histogram data for a given field within the specified content sets.  # noqa: E501

        Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            statistics_request (StatisticsRequest): Request object for `Statistics`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[StatisticsResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['statistics_request'] = \
            statistics_request
        return self.get_statistics_endpoint.call_with_http_info(**kwargs)

    def get_statistics_with_http_info_async(
        self,
        statistics_request,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[StatisticsResponse, int, typing.MutableMapping]]":
        """Returns the statistics and histogram data for a given field within the specified content sets.  # noqa: E501

        Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            statistics_request (StatisticsRequest): Request object for `Statistics`.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(StatisticsResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['statistics_request'] = \
            statistics_request
        return self.get_statistics_endpoint.call_with_http_info(**kwargs)


