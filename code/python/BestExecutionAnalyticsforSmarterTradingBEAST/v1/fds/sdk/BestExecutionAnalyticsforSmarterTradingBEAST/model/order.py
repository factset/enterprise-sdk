"""
    Best Execution Analytics for Smarter Trading (BEAST) API

    Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.model.multi_day_benchmarks import MultiDayBenchmarks
    globals()['MultiDayBenchmarks'] = MultiDayBenchmarks


class Order(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('message_type',): {
            'UNDEFINED': "undefined",
            'PARENT': "parent",
            'CHILD': "child",


        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'basket_id': (str,),  # noqa: E501
            'parent_id': (str,),  # noqa: E501
            'grand_parent_id': (str,),  # noqa: E501
            'order_id': (str,),  # noqa: E501
            'master_order_id': (str,),  # noqa: E501
            'composite_id': (str,),  # noqa: E501
            'symbol': (str,),  # noqa: E501
            'isin': (str,),  # noqa: E501
            'security_id': (str,),  # noqa: E501
            'company_name': (str,),  # noqa: E501
            'side': (str,),  # noqa: E501
            'synthetic': (bool,),  # noqa: E501
            'order_volume': (float,),  # noqa: E501
            'volume': (float,),  # noqa: E501
            'price': (float,),  # noqa: E501
            'limit_price': (float,),  # noqa: E501
            'currency': (str,),  # noqa: E501
            'open_price': (float,),  # noqa: E501
            'close_price': (float,),  # noqa: E501
            'ref_value': (float,),  # noqa: E501
            'vwap_ff_close': (float,),  # noqa: E501
            'vwap_open_close': (float,),  # noqa: E501
            'first_fill_mid': (float,),  # noqa: E501
            'first_fill_mid_perf_bps': (float,),  # noqa: E501
            'open_perf_bps': (float,),  # noqa: E501
            'last_fill_mid': (float,),  # noqa: E501
            'last_fill_mid_perf_bps': (float,),  # noqa: E501
            'reversion5_min_mid_price': (float,),  # noqa: E501
            'reversion5_min_mid_bps': (float,),  # noqa: E501
            'reversion10_min_mid_price': (float,),  # noqa: E501
            'reversion10_min_mid_bps': (float,),  # noqa: E501
            'reversion15_min_mid_price': (float,),  # noqa: E501
            'reversion15_min_mid_bps': (float,),  # noqa: E501
            'reversion60_min_mid_price': (float,),  # noqa: E501
            'reversion60_min_mid_bps': (float,),  # noqa: E501
            'intra_order_volatility': (float,),  # noqa: E501
            'vwap_ff_lf': (float,),  # noqa: E501
            'vwap_ff_lf_perf_bps': (float,),  # noqa: E501
            'close_perf_bps': (float,),  # noqa: E501
            'duration_bin_min': (float,),  # noqa: E501
            'duration_bin_sec': (float,),  # noqa: E501
            'participation_rate_pct': (float,),  # noqa: E501
            'spread_cross': (float,),  # noqa: E501
            'duration': (float,),  # noqa: E501
            'pwp20_price': (float,),  # noqa: E501
            'pwp20_volume': (float,),  # noqa: E501
            'pwp20_perf_bps': (float,),  # noqa: E501
            'pwp10_price': (float,),  # noqa: E501
            'pwp10_volume': (float,),  # noqa: E501
            'pwp10_perf_bps': (float,),  # noqa: E501
            'pwp05_price': (float,),  # noqa: E501
            'pwp05_volume': (float,),  # noqa: E501
            'pwp05_perf_bps': (float,),  # noqa: E501
            'pwp01_price': (float,),  # noqa: E501
            'pwp01_volume': (float,),  # noqa: E501
            'pwp01_perf_bps': (float,),  # noqa: E501
            'pwp02_price': (float,),  # noqa: E501
            'pwp02_volume': (float,),  # noqa: E501
            'pwp02_perf_bps': (float,),  # noqa: E501
            'pwp03_price': (float,),  # noqa: E501
            'pwp03_volume': (float,),  # noqa: E501
            'pwp03_perf_bps': (float,),  # noqa: E501
            'pwp50_price': (float,),  # noqa: E501
            'pwp50_volume': (float,),  # noqa: E501
            'pwp50_perf_bps': (float,),  # noqa: E501
            'pwp100_price': (float,),  # noqa: E501
            'pwp100_volume': (float,),  # noqa: E501
            'pwp100_perf_bps': (float,),  # noqa: E501
            'market_adjustment': (float,),  # noqa: E501
            'intra_order_volatility_bps': (float,),  # noqa: E501
            'ref_currency': (str,),  # noqa: E501
            'vwap_ff_lf_volume': (float,),  # noqa: E501
            'limit_vwap_ff_lf_volume': (float,),  # noqa: E501
            'limit_vwap_ff_lf': (float,),  # noqa: E501
            'limit_vwap_ff_lf_perf_bps': (float,),  # noqa: E501
            'limit_participation_rate_pct': (float,),  # noqa: E501
            'market_spread_cross': (float,),  # noqa: E501
            'limit_pwp20_price': (float,),  # noqa: E501
            'limit_pwp20_volume': (float,),  # noqa: E501
            'limit_pwp20_perf_bps': (float,),  # noqa: E501
            'limit_pwp10_price': (float,),  # noqa: E501
            'limit_pwp10_volume': (float,),  # noqa: E501
            'limit_pwp10_perf_bps': (float,),  # noqa: E501
            'limit_pwp05_price': (float,),  # noqa: E501
            'limit_pwp05_volume': (float,),  # noqa: E501
            'limit_pwp05_perf_bps': (float,),  # noqa: E501
            'limit_pwp01_price': (float,),  # noqa: E501
            'limit_pwp01_volume': (float,),  # noqa: E501
            'limit_pwp01_perf_bps': (float,),  # noqa: E501
            'limit_pwp02_price': (float,),  # noqa: E501
            'limit_pwp02_volume': (float,),  # noqa: E501
            'limit_pwp02_perf_bps': (float,),  # noqa: E501
            'limit_pwp03_price': (float,),  # noqa: E501
            'limit_pwp03_volume': (float,),  # noqa: E501
            'limit_pwp03_perf_bps': (float,),  # noqa: E501
            'limit_pwp50_price': (float,),  # noqa: E501
            'limit_pwp50_volume': (float,),  # noqa: E501
            'limit_pwp50_perf_bps': (float,),  # noqa: E501
            'limit_pwp100_price': (float,),  # noqa: E501
            'limit_pwp100_volume': (float,),  # noqa: E501
            'limit_pwp100_perf_bps': (float,),  # noqa: E501
            'fx_rate': (float,),  # noqa: E501
            'twas': (float,),  # noqa: E501
            'twas_ask_size': (float,),  # noqa: E501
            'twas_bid_size': (float,),  # noqa: E501
            'time_zone_name': (str,),  # noqa: E501
            'time_zone': (str,),  # noqa: E501
            'region': (str,),  # noqa: E501
            'country': (str,),  # noqa: E501
            'date_id': (str,),  # noqa: E501
            'parent_creation_time_utc': (str,),  # noqa: E501
            'order_entry_time_utc': (str,),  # noqa: E501
            'first_fill_time': (str,),  # noqa: E501
            'first_fill_time_utc': (str,),  # noqa: E501
            'last_fill_time': (str,),  # noqa: E501
            'last_fill_time_utc': (str,),  # noqa: E501
            'fill_time_utc': (str,),  # noqa: E501
            'strategy': (str,),  # noqa: E501
            'venue': (str,),  # noqa: E501
            'broker': (str,),  # noqa: E501
            'algo': (str,),  # noqa: E501
            'trader': (str,),  # noqa: E501
            'note': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'error_codes': (str,),  # noqa: E501
            'processed_time': (str,),  # noqa: E501
            'client_id': (str,),  # noqa: E501
            'destination': (str,),  # noqa: E501
            'destination_type': (str,),  # noqa: E501
            'order_type': (str,),  # noqa: E501
            'message_type': (str,),  # noqa: E501
            'related_order_id': ([str],),  # noqa: E501
            'children': ([Order],),  # noqa: E501
            'multi_day_benchmarks': (MultiDayBenchmarks,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'basket_id': 'basketId',  # noqa: E501
        'parent_id': 'parentId',  # noqa: E501
        'grand_parent_id': 'grandParentId',  # noqa: E501
        'order_id': 'orderId',  # noqa: E501
        'master_order_id': 'masterOrderId',  # noqa: E501
        'composite_id': 'compositeId',  # noqa: E501
        'symbol': 'symbol',  # noqa: E501
        'isin': 'isin',  # noqa: E501
        'security_id': 'securityId',  # noqa: E501
        'company_name': 'companyName',  # noqa: E501
        'side': 'side',  # noqa: E501
        'synthetic': 'synthetic',  # noqa: E501
        'order_volume': 'orderVolume',  # noqa: E501
        'volume': 'volume',  # noqa: E501
        'price': 'price',  # noqa: E501
        'limit_price': 'limitPrice',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'open_price': 'openPrice',  # noqa: E501
        'close_price': 'closePrice',  # noqa: E501
        'ref_value': 'refValue',  # noqa: E501
        'vwap_ff_close': 'vwapFfClose',  # noqa: E501
        'vwap_open_close': 'vwapOpenClose',  # noqa: E501
        'first_fill_mid': 'firstFillMid',  # noqa: E501
        'first_fill_mid_perf_bps': 'firstFillMidPerfBps',  # noqa: E501
        'open_perf_bps': 'openPerfBps',  # noqa: E501
        'last_fill_mid': 'lastFillMid',  # noqa: E501
        'last_fill_mid_perf_bps': 'lastFillMidPerfBps',  # noqa: E501
        'reversion5_min_mid_price': 'reversion5MinMidPrice',  # noqa: E501
        'reversion5_min_mid_bps': 'reversion5MinMidBps',  # noqa: E501
        'reversion10_min_mid_price': 'reversion10MinMidPrice',  # noqa: E501
        'reversion10_min_mid_bps': 'reversion10MinMidBps',  # noqa: E501
        'reversion15_min_mid_price': 'reversion15MinMidPrice',  # noqa: E501
        'reversion15_min_mid_bps': 'reversion15MinMidBps',  # noqa: E501
        'reversion60_min_mid_price': 'reversion60MinMidPrice',  # noqa: E501
        'reversion60_min_mid_bps': 'reversion60MinMidBps',  # noqa: E501
        'intra_order_volatility': 'intraOrderVolatility',  # noqa: E501
        'vwap_ff_lf': 'vwapFfLf',  # noqa: E501
        'vwap_ff_lf_perf_bps': 'vwapFfLfPerfBps',  # noqa: E501
        'close_perf_bps': 'closePerfBps',  # noqa: E501
        'duration_bin_min': 'durationBinMin',  # noqa: E501
        'duration_bin_sec': 'durationBinSec',  # noqa: E501
        'participation_rate_pct': 'participationRatePct',  # noqa: E501
        'spread_cross': 'spreadCross',  # noqa: E501
        'duration': 'duration',  # noqa: E501
        'pwp20_price': 'pwp20Price',  # noqa: E501
        'pwp20_volume': 'pwp20Volume',  # noqa: E501
        'pwp20_perf_bps': 'pwp20PerfBps',  # noqa: E501
        'pwp10_price': 'pwp10Price',  # noqa: E501
        'pwp10_volume': 'pwp10Volume',  # noqa: E501
        'pwp10_perf_bps': 'pwp10PerfBps',  # noqa: E501
        'pwp05_price': 'pwp05Price',  # noqa: E501
        'pwp05_volume': 'pwp05Volume',  # noqa: E501
        'pwp05_perf_bps': 'pwp05PerfBps',  # noqa: E501
        'pwp01_price': 'pwp01Price',  # noqa: E501
        'pwp01_volume': 'pwp01Volume',  # noqa: E501
        'pwp01_perf_bps': 'pwp01PerfBps',  # noqa: E501
        'pwp02_price': 'pwp02Price',  # noqa: E501
        'pwp02_volume': 'pwp02Volume',  # noqa: E501
        'pwp02_perf_bps': 'pwp02PerfBps',  # noqa: E501
        'pwp03_price': 'pwp03Price',  # noqa: E501
        'pwp03_volume': 'pwp03Volume',  # noqa: E501
        'pwp03_perf_bps': 'pwp03PerfBps',  # noqa: E501
        'pwp50_price': 'pwp50Price',  # noqa: E501
        'pwp50_volume': 'pwp50Volume',  # noqa: E501
        'pwp50_perf_bps': 'pwp50PerfBps',  # noqa: E501
        'pwp100_price': 'pwp100Price',  # noqa: E501
        'pwp100_volume': 'pwp100Volume',  # noqa: E501
        'pwp100_perf_bps': 'pwp100PerfBps',  # noqa: E501
        'market_adjustment': 'marketAdjustment',  # noqa: E501
        'intra_order_volatility_bps': 'intraOrderVolatilityBps',  # noqa: E501
        'ref_currency': 'refCurrency',  # noqa: E501
        'vwap_ff_lf_volume': 'vwapFfLfVolume',  # noqa: E501
        'limit_vwap_ff_lf_volume': 'limitVwapFfLfVolume',  # noqa: E501
        'limit_vwap_ff_lf': 'limitVwapFfLf',  # noqa: E501
        'limit_vwap_ff_lf_perf_bps': 'limitVwapFfLfPerfBps',  # noqa: E501
        'limit_participation_rate_pct': 'limitParticipationRatePct',  # noqa: E501
        'market_spread_cross': 'marketSpreadCross',  # noqa: E501
        'limit_pwp20_price': 'limitPwp20Price',  # noqa: E501
        'limit_pwp20_volume': 'limitPwp20Volume',  # noqa: E501
        'limit_pwp20_perf_bps': 'limitPwp20PerfBps',  # noqa: E501
        'limit_pwp10_price': 'limitPwp10Price',  # noqa: E501
        'limit_pwp10_volume': 'limitPwp10Volume',  # noqa: E501
        'limit_pwp10_perf_bps': 'limitPwp10PerfBps',  # noqa: E501
        'limit_pwp05_price': 'limitPwp05Price',  # noqa: E501
        'limit_pwp05_volume': 'limitPwp05Volume',  # noqa: E501
        'limit_pwp05_perf_bps': 'limitPwp05PerfBps',  # noqa: E501
        'limit_pwp01_price': 'limitPwp01Price',  # noqa: E501
        'limit_pwp01_volume': 'limitPwp01Volume',  # noqa: E501
        'limit_pwp01_perf_bps': 'limitPwp01PerfBps',  # noqa: E501
        'limit_pwp02_price': 'limitPwp02Price',  # noqa: E501
        'limit_pwp02_volume': 'limitPwp02Volume',  # noqa: E501
        'limit_pwp02_perf_bps': 'limitPwp02PerfBps',  # noqa: E501
        'limit_pwp03_price': 'limitPwp03Price',  # noqa: E501
        'limit_pwp03_volume': 'limitPwp03Volume',  # noqa: E501
        'limit_pwp03_perf_bps': 'limitPwp03PerfBps',  # noqa: E501
        'limit_pwp50_price': 'limitPwp50Price',  # noqa: E501
        'limit_pwp50_volume': 'limitPwp50Volume',  # noqa: E501
        'limit_pwp50_perf_bps': 'limitPwp50PerfBps',  # noqa: E501
        'limit_pwp100_price': 'limitPwp100Price',  # noqa: E501
        'limit_pwp100_volume': 'limitPwp100Volume',  # noqa: E501
        'limit_pwp100_perf_bps': 'limitPwp100PerfBps',  # noqa: E501
        'fx_rate': 'fxRate',  # noqa: E501
        'twas': 'twas',  # noqa: E501
        'twas_ask_size': 'twasAskSize',  # noqa: E501
        'twas_bid_size': 'twasBidSize',  # noqa: E501
        'time_zone_name': 'timeZoneName',  # noqa: E501
        'time_zone': 'timeZone',  # noqa: E501
        'region': 'region',  # noqa: E501
        'country': 'country',  # noqa: E501
        'date_id': 'dateId',  # noqa: E501
        'parent_creation_time_utc': 'parentCreationTimeUtc',  # noqa: E501
        'order_entry_time_utc': 'orderEntryTimeUtc',  # noqa: E501
        'first_fill_time': 'firstFillTime',  # noqa: E501
        'first_fill_time_utc': 'firstFillTimeUtc',  # noqa: E501
        'last_fill_time': 'lastFillTime',  # noqa: E501
        'last_fill_time_utc': 'lastFillTimeUtc',  # noqa: E501
        'fill_time_utc': 'fillTimeUtc',  # noqa: E501
        'strategy': 'strategy',  # noqa: E501
        'venue': 'venue',  # noqa: E501
        'broker': 'broker',  # noqa: E501
        'algo': 'algo',  # noqa: E501
        'trader': 'trader',  # noqa: E501
        'note': 'note',  # noqa: E501
        'status': 'status',  # noqa: E501
        'error_codes': 'errorCodes',  # noqa: E501
        'processed_time': 'processedTime',  # noqa: E501
        'client_id': 'clientId',  # noqa: E501
        'destination': 'destination',  # noqa: E501
        'destination_type': 'destinationType',  # noqa: E501
        'order_type': 'orderType',  # noqa: E501
        'message_type': 'messageType',  # noqa: E501
        'related_order_id': 'relatedOrderId',  # noqa: E501
        'children': 'children',  # noqa: E501
        'multi_day_benchmarks': 'multiDayBenchmarks',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Order - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): Unique identifier for the Order. [optional]  # noqa: E501
            basket_id (str): Order Basket Id. [optional]  # noqa: E501
            parent_id (str): Order Parent Id. [optional]  # noqa: E501
            grand_parent_id (str): Order Grand Parent Id. [optional]  # noqa: E501
            order_id (str): Order Id. [optional]  # noqa: E501
            master_order_id (str): Master Order Id. [optional]  # noqa: E501
            composite_id (str): Composite Id. [optional]  # noqa: E501
            symbol (str): Order Symbol. [optional]  # noqa: E501
            isin (str): Order ISIN. [optional]  # noqa: E501
            security_id (str): Order Security Id. [optional]  # noqa: E501
            company_name (str): Company Name. [optional]  # noqa: E501
            side (str): Side of the order. [optional]  # noqa: E501
            synthetic (bool): Order Synthetic flag. [optional]  # noqa: E501
            order_volume (float): Order Volume. [optional]  # noqa: E501
            volume (float): Volume. [optional]  # noqa: E501
            price (float): Order Price. [optional]  # noqa: E501
            limit_price (float): Order Limit Price. [optional]  # noqa: E501
            currency (str): Order Currency. [optional]  # noqa: E501
            open_price (float): Order Open Price. [optional]  # noqa: E501
            close_price (float): Order Close Price. [optional]  # noqa: E501
            ref_value (float): Order Ref Value. [optional]  # noqa: E501
            vwap_ff_close (float): Order VWAP FfClose. [optional]  # noqa: E501
            vwap_open_close (float): Order VWAP OpenClose. [optional]  # noqa: E501
            first_fill_mid (float): Order firstFillMid. [optional]  # noqa: E501
            first_fill_mid_perf_bps (float): Order firstFillMidPerfBps. [optional]  # noqa: E501
            open_perf_bps (float): Order openPerfBps. [optional]  # noqa: E501
            last_fill_mid (float): Order lastFillMid. [optional]  # noqa: E501
            last_fill_mid_perf_bps (float): Order lastFillMidPerfBps. [optional]  # noqa: E501
            reversion5_min_mid_price (float): Order reversion5MinMidPrice. [optional]  # noqa: E501
            reversion5_min_mid_bps (float): Order reversion5MinMidBps. [optional]  # noqa: E501
            reversion10_min_mid_price (float): Order reversion10MinMidPrice. [optional]  # noqa: E501
            reversion10_min_mid_bps (float): Order reversion10MinMidBps. [optional]  # noqa: E501
            reversion15_min_mid_price (float): Order reversion15MinMidPrice. [optional]  # noqa: E501
            reversion15_min_mid_bps (float): Order reversion15MinMidBps. [optional]  # noqa: E501
            reversion60_min_mid_price (float): Order reversion60MinMidPrice. [optional]  # noqa: E501
            reversion60_min_mid_bps (float): Order reversion60MinMidBps. [optional]  # noqa: E501
            intra_order_volatility (float): Order intraOrderVolatility. [optional]  # noqa: E501
            vwap_ff_lf (float): Order vwapFfLf. [optional]  # noqa: E501
            vwap_ff_lf_perf_bps (float): Order vwapFfLfPerfBps. [optional]  # noqa: E501
            close_perf_bps (float): Order closePerfBps. [optional]  # noqa: E501
            duration_bin_min (float): Order Duration Bin Min. [optional]  # noqa: E501
            duration_bin_sec (float): Order Duration Bin Sec. [optional]  # noqa: E501
            participation_rate_pct (float): Order Participation Rate Percentage. [optional]  # noqa: E501
            spread_cross (float): Order spreadCross. [optional]  # noqa: E501
            duration (float): Order duration. [optional]  # noqa: E501
            pwp20_price (float): Order pwp20Price. [optional]  # noqa: E501
            pwp20_volume (float): Order pwp20Volume. [optional]  # noqa: E501
            pwp20_perf_bps (float): Order pwp20PerfBps. [optional]  # noqa: E501
            pwp10_price (float): Order pwp10Price. [optional]  # noqa: E501
            pwp10_volume (float): Order pwp10Volume. [optional]  # noqa: E501
            pwp10_perf_bps (float): Order pwp10PerfBps. [optional]  # noqa: E501
            pwp05_price (float): Order pwp05Price. [optional]  # noqa: E501
            pwp05_volume (float): Order pwp05Volume. [optional]  # noqa: E501
            pwp05_perf_bps (float): Order pwp05PerfBps. [optional]  # noqa: E501
            pwp01_price (float): Order pwp01Price. [optional]  # noqa: E501
            pwp01_volume (float): Order pwp01Volume. [optional]  # noqa: E501
            pwp01_perf_bps (float): Order pwp01PerfBps. [optional]  # noqa: E501
            pwp02_price (float): Order pwp02Price. [optional]  # noqa: E501
            pwp02_volume (float): Order pwp02Volume. [optional]  # noqa: E501
            pwp02_perf_bps (float): Order pwp02PerfBps. [optional]  # noqa: E501
            pwp03_price (float): Order pwp03Price. [optional]  # noqa: E501
            pwp03_volume (float): Order pwp03Volume. [optional]  # noqa: E501
            pwp03_perf_bps (float): Order pwp03PerfBps. [optional]  # noqa: E501
            pwp50_price (float): Order pwp50Price. [optional]  # noqa: E501
            pwp50_volume (float): Order pwp50Volume. [optional]  # noqa: E501
            pwp50_perf_bps (float): Order pwp50PerfBps. [optional]  # noqa: E501
            pwp100_price (float): Order pwp100Price. [optional]  # noqa: E501
            pwp100_volume (float): Order pwp100Volume. [optional]  # noqa: E501
            pwp100_perf_bps (float): Order pwp100PerfBps. [optional]  # noqa: E501
            market_adjustment (float): Market Adjustment. [optional]  # noqa: E501
            intra_order_volatility_bps (float): intraOrderVolatilityBps. [optional]  # noqa: E501
            ref_currency (str): Order Reference Currency. [optional]  # noqa: E501
            vwap_ff_lf_volume (float): vwapFfLfVolume. [optional]  # noqa: E501
            limit_vwap_ff_lf_volume (float): limitVwapFfLfVolume. [optional]  # noqa: E501
            limit_vwap_ff_lf (float): limitVwapFfLf. [optional]  # noqa: E501
            limit_vwap_ff_lf_perf_bps (float): limitVwapFfLfPerfBps. [optional]  # noqa: E501
            limit_participation_rate_pct (float): limitParticipationRatePct. [optional]  # noqa: E501
            market_spread_cross (float): marketSpreadCross. [optional]  # noqa: E501
            limit_pwp20_price (float): limitPwp20Price. [optional]  # noqa: E501
            limit_pwp20_volume (float): limitPwp20Volume. [optional]  # noqa: E501
            limit_pwp20_perf_bps (float): limitPwp20PerfBps. [optional]  # noqa: E501
            limit_pwp10_price (float): limitPwp10Price. [optional]  # noqa: E501
            limit_pwp10_volume (float): limitPwp10Volume. [optional]  # noqa: E501
            limit_pwp10_perf_bps (float): limitPwp10PerfBps. [optional]  # noqa: E501
            limit_pwp05_price (float): limitPwp05Price. [optional]  # noqa: E501
            limit_pwp05_volume (float): limitPwp05Volume. [optional]  # noqa: E501
            limit_pwp05_perf_bps (float): limitPwp05PerfBps. [optional]  # noqa: E501
            limit_pwp01_price (float): limitPwp01Price. [optional]  # noqa: E501
            limit_pwp01_volume (float): limitPwp01Volume. [optional]  # noqa: E501
            limit_pwp01_perf_bps (float): limitPwp01PerfBps. [optional]  # noqa: E501
            limit_pwp02_price (float): limitPwp02Price. [optional]  # noqa: E501
            limit_pwp02_volume (float): limitPwp02Volume. [optional]  # noqa: E501
            limit_pwp02_perf_bps (float): limitPwp02PerfBps. [optional]  # noqa: E501
            limit_pwp03_price (float): limitPwp03Price. [optional]  # noqa: E501
            limit_pwp03_volume (float): limitPwp03Volume. [optional]  # noqa: E501
            limit_pwp03_perf_bps (float): limitPwp03PerfBps. [optional]  # noqa: E501
            limit_pwp50_price (float): limitPwp50Price. [optional]  # noqa: E501
            limit_pwp50_volume (float): limitPwp50Volume. [optional]  # noqa: E501
            limit_pwp50_perf_bps (float): limitPwp50PerfBps. [optional]  # noqa: E501
            limit_pwp100_price (float): limitPwp100Price. [optional]  # noqa: E501
            limit_pwp100_volume (float): limitPwp100Volume. [optional]  # noqa: E501
            limit_pwp100_perf_bps (float): limitPwp100PerfBps. [optional]  # noqa: E501
            fx_rate (float): Order FX Rate. [optional]  # noqa: E501
            twas (float): Order twas. [optional]  # noqa: E501
            twas_ask_size (float): Order twasAskSize. [optional]  # noqa: E501
            twas_bid_size (float): Order twasBidSize. [optional]  # noqa: E501
            time_zone_name (str): The timezone abbreviation as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. [optional]  # noqa: E501
            time_zone (str): The timezone identifier as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. [optional]  # noqa: E501
            region (str): The two character ISO country code of the trading region. EMEA is used for the European trading region. [optional]  # noqa: E501
            country (str): The two character ISO country code. [optional]  # noqa: E501
            date_id (str): Order Date. [optional]  # noqa: E501
            parent_creation_time_utc (str): Order Parent Creation Time. [optional]  # noqa: E501
            order_entry_time_utc (str): Order Entry Time UTC. [optional]  # noqa: E501
            first_fill_time (str): Order First Fill Time. [optional]  # noqa: E501
            first_fill_time_utc (str): Order First Fill Time UTC. [optional]  # noqa: E501
            last_fill_time (str): Order Last Fill Time. [optional]  # noqa: E501
            last_fill_time_utc (str): Order Last Fill Time UTC. [optional]  # noqa: E501
            fill_time_utc (str): Order Fill Time UTC. [optional]  # noqa: E501
            strategy (str): Order Strategy. [optional]  # noqa: E501
            venue (str): Order Venue. [optional]  # noqa: E501
            broker (str): Order Broker. [optional]  # noqa: E501
            algo (str): Order Algo. [optional]  # noqa: E501
            trader (str): Order Trader. [optional]  # noqa: E501
            note (str): Order Note. [optional]  # noqa: E501
            status (str): Order Status. [optional]  # noqa: E501
            error_codes (str): Order Error Codes. [optional]  # noqa: E501
            processed_time (str): Order Processed Time. [optional]  # noqa: E501
            client_id (str): Order Client Id. [optional]  # noqa: E501
            destination (str): Order Destination. [optional]  # noqa: E501
            destination_type (str): Order Destination Type. [optional]  # noqa: E501
            order_type (str): Order Type. [optional]  # noqa: E501
            message_type (str): Order type. [optional]  # noqa: E501
            related_order_id ([str]): Related Order Ids. [optional]  # noqa: E501
            children ([Order]): Child Orders. [optional]  # noqa: E501
            multi_day_benchmarks (MultiDayBenchmarks): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Order - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): Unique identifier for the Order. [optional]  # noqa: E501
            basket_id (str): Order Basket Id. [optional]  # noqa: E501
            parent_id (str): Order Parent Id. [optional]  # noqa: E501
            grand_parent_id (str): Order Grand Parent Id. [optional]  # noqa: E501
            order_id (str): Order Id. [optional]  # noqa: E501
            master_order_id (str): Master Order Id. [optional]  # noqa: E501
            composite_id (str): Composite Id. [optional]  # noqa: E501
            symbol (str): Order Symbol. [optional]  # noqa: E501
            isin (str): Order ISIN. [optional]  # noqa: E501
            security_id (str): Order Security Id. [optional]  # noqa: E501
            company_name (str): Company Name. [optional]  # noqa: E501
            side (str): Side of the order. [optional]  # noqa: E501
            synthetic (bool): Order Synthetic flag. [optional]  # noqa: E501
            order_volume (float): Order Volume. [optional]  # noqa: E501
            volume (float): Volume. [optional]  # noqa: E501
            price (float): Order Price. [optional]  # noqa: E501
            limit_price (float): Order Limit Price. [optional]  # noqa: E501
            currency (str): Order Currency. [optional]  # noqa: E501
            open_price (float): Order Open Price. [optional]  # noqa: E501
            close_price (float): Order Close Price. [optional]  # noqa: E501
            ref_value (float): Order Ref Value. [optional]  # noqa: E501
            vwap_ff_close (float): Order VWAP FfClose. [optional]  # noqa: E501
            vwap_open_close (float): Order VWAP OpenClose. [optional]  # noqa: E501
            first_fill_mid (float): Order firstFillMid. [optional]  # noqa: E501
            first_fill_mid_perf_bps (float): Order firstFillMidPerfBps. [optional]  # noqa: E501
            open_perf_bps (float): Order openPerfBps. [optional]  # noqa: E501
            last_fill_mid (float): Order lastFillMid. [optional]  # noqa: E501
            last_fill_mid_perf_bps (float): Order lastFillMidPerfBps. [optional]  # noqa: E501
            reversion5_min_mid_price (float): Order reversion5MinMidPrice. [optional]  # noqa: E501
            reversion5_min_mid_bps (float): Order reversion5MinMidBps. [optional]  # noqa: E501
            reversion10_min_mid_price (float): Order reversion10MinMidPrice. [optional]  # noqa: E501
            reversion10_min_mid_bps (float): Order reversion10MinMidBps. [optional]  # noqa: E501
            reversion15_min_mid_price (float): Order reversion15MinMidPrice. [optional]  # noqa: E501
            reversion15_min_mid_bps (float): Order reversion15MinMidBps. [optional]  # noqa: E501
            reversion60_min_mid_price (float): Order reversion60MinMidPrice. [optional]  # noqa: E501
            reversion60_min_mid_bps (float): Order reversion60MinMidBps. [optional]  # noqa: E501
            intra_order_volatility (float): Order intraOrderVolatility. [optional]  # noqa: E501
            vwap_ff_lf (float): Order vwapFfLf. [optional]  # noqa: E501
            vwap_ff_lf_perf_bps (float): Order vwapFfLfPerfBps. [optional]  # noqa: E501
            close_perf_bps (float): Order closePerfBps. [optional]  # noqa: E501
            duration_bin_min (float): Order Duration Bin Min. [optional]  # noqa: E501
            duration_bin_sec (float): Order Duration Bin Sec. [optional]  # noqa: E501
            participation_rate_pct (float): Order Participation Rate Percentage. [optional]  # noqa: E501
            spread_cross (float): Order spreadCross. [optional]  # noqa: E501
            duration (float): Order duration. [optional]  # noqa: E501
            pwp20_price (float): Order pwp20Price. [optional]  # noqa: E501
            pwp20_volume (float): Order pwp20Volume. [optional]  # noqa: E501
            pwp20_perf_bps (float): Order pwp20PerfBps. [optional]  # noqa: E501
            pwp10_price (float): Order pwp10Price. [optional]  # noqa: E501
            pwp10_volume (float): Order pwp10Volume. [optional]  # noqa: E501
            pwp10_perf_bps (float): Order pwp10PerfBps. [optional]  # noqa: E501
            pwp05_price (float): Order pwp05Price. [optional]  # noqa: E501
            pwp05_volume (float): Order pwp05Volume. [optional]  # noqa: E501
            pwp05_perf_bps (float): Order pwp05PerfBps. [optional]  # noqa: E501
            pwp01_price (float): Order pwp01Price. [optional]  # noqa: E501
            pwp01_volume (float): Order pwp01Volume. [optional]  # noqa: E501
            pwp01_perf_bps (float): Order pwp01PerfBps. [optional]  # noqa: E501
            pwp02_price (float): Order pwp02Price. [optional]  # noqa: E501
            pwp02_volume (float): Order pwp02Volume. [optional]  # noqa: E501
            pwp02_perf_bps (float): Order pwp02PerfBps. [optional]  # noqa: E501
            pwp03_price (float): Order pwp03Price. [optional]  # noqa: E501
            pwp03_volume (float): Order pwp03Volume. [optional]  # noqa: E501
            pwp03_perf_bps (float): Order pwp03PerfBps. [optional]  # noqa: E501
            pwp50_price (float): Order pwp50Price. [optional]  # noqa: E501
            pwp50_volume (float): Order pwp50Volume. [optional]  # noqa: E501
            pwp50_perf_bps (float): Order pwp50PerfBps. [optional]  # noqa: E501
            pwp100_price (float): Order pwp100Price. [optional]  # noqa: E501
            pwp100_volume (float): Order pwp100Volume. [optional]  # noqa: E501
            pwp100_perf_bps (float): Order pwp100PerfBps. [optional]  # noqa: E501
            market_adjustment (float): Market Adjustment. [optional]  # noqa: E501
            intra_order_volatility_bps (float): intraOrderVolatilityBps. [optional]  # noqa: E501
            ref_currency (str): Order Reference Currency. [optional]  # noqa: E501
            vwap_ff_lf_volume (float): vwapFfLfVolume. [optional]  # noqa: E501
            limit_vwap_ff_lf_volume (float): limitVwapFfLfVolume. [optional]  # noqa: E501
            limit_vwap_ff_lf (float): limitVwapFfLf. [optional]  # noqa: E501
            limit_vwap_ff_lf_perf_bps (float): limitVwapFfLfPerfBps. [optional]  # noqa: E501
            limit_participation_rate_pct (float): limitParticipationRatePct. [optional]  # noqa: E501
            market_spread_cross (float): marketSpreadCross. [optional]  # noqa: E501
            limit_pwp20_price (float): limitPwp20Price. [optional]  # noqa: E501
            limit_pwp20_volume (float): limitPwp20Volume. [optional]  # noqa: E501
            limit_pwp20_perf_bps (float): limitPwp20PerfBps. [optional]  # noqa: E501
            limit_pwp10_price (float): limitPwp10Price. [optional]  # noqa: E501
            limit_pwp10_volume (float): limitPwp10Volume. [optional]  # noqa: E501
            limit_pwp10_perf_bps (float): limitPwp10PerfBps. [optional]  # noqa: E501
            limit_pwp05_price (float): limitPwp05Price. [optional]  # noqa: E501
            limit_pwp05_volume (float): limitPwp05Volume. [optional]  # noqa: E501
            limit_pwp05_perf_bps (float): limitPwp05PerfBps. [optional]  # noqa: E501
            limit_pwp01_price (float): limitPwp01Price. [optional]  # noqa: E501
            limit_pwp01_volume (float): limitPwp01Volume. [optional]  # noqa: E501
            limit_pwp01_perf_bps (float): limitPwp01PerfBps. [optional]  # noqa: E501
            limit_pwp02_price (float): limitPwp02Price. [optional]  # noqa: E501
            limit_pwp02_volume (float): limitPwp02Volume. [optional]  # noqa: E501
            limit_pwp02_perf_bps (float): limitPwp02PerfBps. [optional]  # noqa: E501
            limit_pwp03_price (float): limitPwp03Price. [optional]  # noqa: E501
            limit_pwp03_volume (float): limitPwp03Volume. [optional]  # noqa: E501
            limit_pwp03_perf_bps (float): limitPwp03PerfBps. [optional]  # noqa: E501
            limit_pwp50_price (float): limitPwp50Price. [optional]  # noqa: E501
            limit_pwp50_volume (float): limitPwp50Volume. [optional]  # noqa: E501
            limit_pwp50_perf_bps (float): limitPwp50PerfBps. [optional]  # noqa: E501
            limit_pwp100_price (float): limitPwp100Price. [optional]  # noqa: E501
            limit_pwp100_volume (float): limitPwp100Volume. [optional]  # noqa: E501
            limit_pwp100_perf_bps (float): limitPwp100PerfBps. [optional]  # noqa: E501
            fx_rate (float): Order FX Rate. [optional]  # noqa: E501
            twas (float): Order twas. [optional]  # noqa: E501
            twas_ask_size (float): Order twasAskSize. [optional]  # noqa: E501
            twas_bid_size (float): Order twasBidSize. [optional]  # noqa: E501
            time_zone_name (str): The timezone abbreviation as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. [optional]  # noqa: E501
            time_zone (str): The timezone identifier as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. [optional]  # noqa: E501
            region (str): The two character ISO country code of the trading region. EMEA is used for the European trading region. [optional]  # noqa: E501
            country (str): The two character ISO country code. [optional]  # noqa: E501
            date_id (str): Order Date. [optional]  # noqa: E501
            parent_creation_time_utc (str): Order Parent Creation Time. [optional]  # noqa: E501
            order_entry_time_utc (str): Order Entry Time UTC. [optional]  # noqa: E501
            first_fill_time (str): Order First Fill Time. [optional]  # noqa: E501
            first_fill_time_utc (str): Order First Fill Time UTC. [optional]  # noqa: E501
            last_fill_time (str): Order Last Fill Time. [optional]  # noqa: E501
            last_fill_time_utc (str): Order Last Fill Time UTC. [optional]  # noqa: E501
            fill_time_utc (str): Order Fill Time UTC. [optional]  # noqa: E501
            strategy (str): Order Strategy. [optional]  # noqa: E501
            venue (str): Order Venue. [optional]  # noqa: E501
            broker (str): Order Broker. [optional]  # noqa: E501
            algo (str): Order Algo. [optional]  # noqa: E501
            trader (str): Order Trader. [optional]  # noqa: E501
            note (str): Order Note. [optional]  # noqa: E501
            status (str): Order Status. [optional]  # noqa: E501
            error_codes (str): Order Error Codes. [optional]  # noqa: E501
            processed_time (str): Order Processed Time. [optional]  # noqa: E501
            client_id (str): Order Client Id. [optional]  # noqa: E501
            destination (str): Order Destination. [optional]  # noqa: E501
            destination_type (str): Order Destination Type. [optional]  # noqa: E501
            order_type (str): Order Type. [optional]  # noqa: E501
            message_type (str): Order type. [optional]  # noqa: E501
            related_order_id ([str]): Related Order Ids. [optional]  # noqa: E501
            children ([Order]): Child Orders. [optional]  # noqa: E501
            multi_day_benchmarks (MultiDayBenchmarks): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
