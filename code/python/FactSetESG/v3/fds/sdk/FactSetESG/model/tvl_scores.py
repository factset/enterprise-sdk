"""
    FactSet ESG API

    FactSet ESG (powered by FactSet Truvalue) applies Natural Language Processing and Machine Learning to uncover risks and opportunities from companies' Environmental, Social and Governance (ESG) behavior, which are aggregated and categorized into continuously updated, material ESG scores. The service focuses on company ESG behavior from external sources and includes both positive and negative events that go beyond traditional sources of ESG risk data.<p> FactSet ESG extracts, analyzes, and generates scores from millions of documents each month collected from more than 200,000 data sources in over 38 languages. Sources include news, trade journals, NGOs, watchdog groups, trade blogs and industry reports. Products deliver investable insights by revealing value and risk factors from unstructured data at the speed of current events.</p>   # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.FactSetESG.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.FactSetESG.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.FactSetESG.model.invalid_id_error_object import InvalidIdErrorObject
    globals()['InvalidIdErrorObject'] = InvalidIdErrorObject


class TvlScores(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('fsym_id',): {
            'max_length': 40,
            'regex': {
                'pattern': r'^[A-Za-z0-9 -]+$',  # noqa: E501
            },
        },
        ('request_id',): {
            'max_length': 60,
            'regex': {
                'pattern': r'^[A-Za-z0-9 -]+$',  # noqa: E501
            },
        },
        ('score_type',): {
            'max_length': 30,
            'regex': {
                'pattern': r'^[A-Za-z _]+$',  # noqa: E501
            },
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'date': (date, none_type,),  # noqa: E501
            'fsym_id': (str, none_type,),  # noqa: E501
            'request_id': (str,),  # noqa: E501
            'score_type': (str, none_type,),  # noqa: E501
            'all_categories_pulse': (float, none_type,),  # noqa: E501
            'materiality_pulse': (float, none_type,),  # noqa: E501
            'access_afford_pulse': (float, none_type,),  # noqa: E501
            'air_quality_pulse': (float, none_type,),  # noqa: E501
            'business_ethics_pulse': (float, none_type,),  # noqa: E501
            'business_model_pulse': (float, none_type,),  # noqa: E501
            'competitive_pulse': (float, none_type,),  # noqa: E501
            'critical_risk_pulse': (float, none_type,),  # noqa: E501
            'customer_priv_pulse': (float, none_type,),  # noqa: E501
            'custome_pelfare_pulse': (float, none_type,),  # noqa: E501
            'data_security_pulse': (float, none_type,),  # noqa: E501
            'ecological_pulse': (float, none_type,),  # noqa: E501
            'employee_engagement_pulse': (float, none_type,),  # noqa: E501
            'employee_health_pulse': (float, none_type,),  # noqa: E501
            'energy_pulse': (float, none_type,),  # noqa: E501
            'ghg_emissions_pulse': (float, none_type,),  # noqa: E501
            'human_rights_pulse': (float, none_type,),  # noqa: E501
            'labor_practices_pulse': (float, none_type,),  # noqa: E501
            'legal_regulations_pulse': (float, none_type,),  # noqa: E501
            'material_sourcing_pulse': (float, none_type,),  # noqa: E501
            'climate_change_pulse': (float, none_type,),  # noqa: E501
            'product_lifecycle_pulse': (float, none_type,),  # noqa: E501
            'product_quality_pulse': (float, none_type,),  # noqa: E501
            'selling_practices_pulse': (float, none_type,),  # noqa: E501
            'supply_chain_pulse': (float, none_type,),  # noqa: E501
            'systemic_risk_pulse': (float, none_type,),  # noqa: E501
            'hazardous_materials_pulse': (float, none_type,),  # noqa: E501
            'water_waste_water_pulse': (float, none_type,),  # noqa: E501
            'dim_business_catvol_day': (float, none_type,),  # noqa: E501
            'dim_environment_catvol_day': (float, none_type,),  # noqa: E501
            'dim_humancap_catvol_day': (float, none_type,),  # noqa: E501
            'dim_leadership_catvol_day': (float, none_type,),  # noqa: E501
            'dim_socialcap_catvol_day': (float, none_type,),  # noqa: E501
            'error': (InvalidIdErrorObject,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'date': 'date',  # noqa: E501
        'fsym_id': 'fsymId',  # noqa: E501
        'request_id': 'requestId',  # noqa: E501
        'score_type': 'scoreType',  # noqa: E501
        'all_categories_pulse': 'allCategoriesPulse',  # noqa: E501
        'materiality_pulse': 'materialityPulse',  # noqa: E501
        'access_afford_pulse': 'accessAffordPulse',  # noqa: E501
        'air_quality_pulse': 'airQualityPulse',  # noqa: E501
        'business_ethics_pulse': 'businessEthicsPulse',  # noqa: E501
        'business_model_pulse': 'businessModelPulse',  # noqa: E501
        'competitive_pulse': 'competitivePulse',  # noqa: E501
        'critical_risk_pulse': 'criticalRiskPulse',  # noqa: E501
        'customer_priv_pulse': 'customerPrivPulse',  # noqa: E501
        'custome_pelfare_pulse': 'customePelfarePulse',  # noqa: E501
        'data_security_pulse': 'dataSecurityPulse',  # noqa: E501
        'ecological_pulse': 'ecologicalPulse',  # noqa: E501
        'employee_engagement_pulse': 'employeeEngagementPulse',  # noqa: E501
        'employee_health_pulse': 'employeeHealthPulse',  # noqa: E501
        'energy_pulse': 'energyPulse',  # noqa: E501
        'ghg_emissions_pulse': 'ghgEmissionsPulse',  # noqa: E501
        'human_rights_pulse': 'humanRightsPulse',  # noqa: E501
        'labor_practices_pulse': 'laborPracticesPulse',  # noqa: E501
        'legal_regulations_pulse': 'legalRegulationsPulse',  # noqa: E501
        'material_sourcing_pulse': 'materialSourcingPulse',  # noqa: E501
        'climate_change_pulse': 'climateChangePulse',  # noqa: E501
        'product_lifecycle_pulse': 'productLifecyclePulse',  # noqa: E501
        'product_quality_pulse': 'productQualityPulse',  # noqa: E501
        'selling_practices_pulse': 'sellingPracticesPulse',  # noqa: E501
        'supply_chain_pulse': 'supplyChainPulse',  # noqa: E501
        'systemic_risk_pulse': 'systemicRiskPulse',  # noqa: E501
        'hazardous_materials_pulse': 'hazardousMaterialsPulse',  # noqa: E501
        'water_waste_water_pulse': 'waterWasteWaterPulse',  # noqa: E501
        'dim_business_catvol_day': 'dimBusinessCatvolDay',  # noqa: E501
        'dim_environment_catvol_day': 'dimEnvironmentCatvolDay',  # noqa: E501
        'dim_humancap_catvol_day': 'dimHumancapCatvolDay',  # noqa: E501
        'dim_leadership_catvol_day': 'dimLeadershipCatvolDay',  # noqa: E501
        'dim_socialcap_catvol_day': 'dimSocialcapCatvolDay',  # noqa: E501
        'error': 'error',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """TvlScores - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            date (date, none_type): Date for the period requested expressed in YYYY-MM-DD format.. [optional]  # noqa: E501
            fsym_id (str, none_type): FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).. [optional]  # noqa: E501
            request_id (str): Identifier that was used for the request.. [optional]  # noqa: E501
            score_type (str, none_type): The name of the specific SASB Score type being shown in the response. This will be represented by the scoreTypes input: PULSE, INSIGHT, MOMENTUM, ART_VOL_TTM, CAT_VOL_TTM, or DYNAMIC_MAT.. [optional]  # noqa: E501
            all_categories_pulse (float, none_type): The overall pulse across all categories.. [optional]  # noqa: E501
            materiality_pulse (float, none_type): The pulse related to materiality.. [optional]  # noqa: E501
            access_afford_pulse (float, none_type): The pulse related to access affordability.. [optional]  # noqa: E501
            air_quality_pulse (float, none_type): The pulse related to air quality.. [optional]  # noqa: E501
            business_ethics_pulse (float, none_type): The pulse related to business ethics.. [optional]  # noqa: E501
            business_model_pulse (float, none_type): The pulse related to the business model.. [optional]  # noqa: E501
            competitive_pulse (float, none_type): The pulse related to competitive factors.. [optional]  # noqa: E501
            critical_risk_pulse (float, none_type): The pulse related to critical risks.. [optional]  # noqa: E501
            customer_priv_pulse (float, none_type): The pulse related to customer privacy.. [optional]  # noqa: E501
            custome_pelfare_pulse (float, none_type): The pulse related to customer welfare.. [optional]  # noqa: E501
            data_security_pulse (float, none_type): The pulse related to data security.. [optional]  # noqa: E501
            ecological_pulse (float, none_type): The pulse related to ecological factors.. [optional]  # noqa: E501
            employee_engagement_pulse (float, none_type): The pulse related to employee engagement.. [optional]  # noqa: E501
            employee_health_pulse (float, none_type): The pulse related to employee health.. [optional]  # noqa: E501
            energy_pulse (float, none_type): The pulse related to energy.. [optional]  # noqa: E501
            ghg_emissions_pulse (float, none_type): The pulse related to greenhouse gas emissions.. [optional]  # noqa: E501
            human_rights_pulse (float, none_type): The pulse related to human rights.. [optional]  # noqa: E501
            labor_practices_pulse (float, none_type): The pulse related to labor practices.. [optional]  # noqa: E501
            legal_regulations_pulse (float, none_type): The pulse related to legal regulations.. [optional]  # noqa: E501
            material_sourcing_pulse (float, none_type): The pulse related to material sourcing.. [optional]  # noqa: E501
            climate_change_pulse (float, none_type): The pulse related to climate change.. [optional]  # noqa: E501
            product_lifecycle_pulse (float, none_type): The pulse related to the product lifecycle.. [optional]  # noqa: E501
            product_quality_pulse (float, none_type): The pulse related to product quality.. [optional]  # noqa: E501
            selling_practices_pulse (float, none_type): The pulse related to selling practices.. [optional]  # noqa: E501
            supply_chain_pulse (float, none_type): The pulse related to supply chain practices.. [optional]  # noqa: E501
            systemic_risk_pulse (float, none_type): The pulse related to systemic risks.. [optional]  # noqa: E501
            hazardous_materials_pulse (float, none_type): The pulse related to management of hazardous materials.. [optional]  # noqa: E501
            water_waste_water_pulse (float, none_type): The pulse related to water and wastewater management.. [optional]  # noqa: E501
            dim_business_catvol_day (float, none_type): Category volume related to Business dimension.. [optional]  # noqa: E501
            dim_environment_catvol_day (float, none_type): Category volume related to Environment dimension.. [optional]  # noqa: E501
            dim_humancap_catvol_day (float, none_type): Category volume related to Human Capital dimension.. [optional]  # noqa: E501
            dim_leadership_catvol_day (float, none_type): Category volume related to Leadership dimension.. [optional]  # noqa: E501
            dim_socialcap_catvol_day (float, none_type): Category volume related to Social Capital dimension.. [optional]  # noqa: E501
            error (InvalidIdErrorObject): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """TvlScores - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            date (date, none_type): Date for the period requested expressed in YYYY-MM-DD format.. [optional]  # noqa: E501
            fsym_id (str, none_type): FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).. [optional]  # noqa: E501
            request_id (str): Identifier that was used for the request.. [optional]  # noqa: E501
            score_type (str, none_type): The name of the specific SASB Score type being shown in the response. This will be represented by the scoreTypes input: PULSE, INSIGHT, MOMENTUM, ART_VOL_TTM, CAT_VOL_TTM, or DYNAMIC_MAT.. [optional]  # noqa: E501
            all_categories_pulse (float, none_type): The overall pulse across all categories.. [optional]  # noqa: E501
            materiality_pulse (float, none_type): The pulse related to materiality.. [optional]  # noqa: E501
            access_afford_pulse (float, none_type): The pulse related to access affordability.. [optional]  # noqa: E501
            air_quality_pulse (float, none_type): The pulse related to air quality.. [optional]  # noqa: E501
            business_ethics_pulse (float, none_type): The pulse related to business ethics.. [optional]  # noqa: E501
            business_model_pulse (float, none_type): The pulse related to the business model.. [optional]  # noqa: E501
            competitive_pulse (float, none_type): The pulse related to competitive factors.. [optional]  # noqa: E501
            critical_risk_pulse (float, none_type): The pulse related to critical risks.. [optional]  # noqa: E501
            customer_priv_pulse (float, none_type): The pulse related to customer privacy.. [optional]  # noqa: E501
            custome_pelfare_pulse (float, none_type): The pulse related to customer welfare.. [optional]  # noqa: E501
            data_security_pulse (float, none_type): The pulse related to data security.. [optional]  # noqa: E501
            ecological_pulse (float, none_type): The pulse related to ecological factors.. [optional]  # noqa: E501
            employee_engagement_pulse (float, none_type): The pulse related to employee engagement.. [optional]  # noqa: E501
            employee_health_pulse (float, none_type): The pulse related to employee health.. [optional]  # noqa: E501
            energy_pulse (float, none_type): The pulse related to energy.. [optional]  # noqa: E501
            ghg_emissions_pulse (float, none_type): The pulse related to greenhouse gas emissions.. [optional]  # noqa: E501
            human_rights_pulse (float, none_type): The pulse related to human rights.. [optional]  # noqa: E501
            labor_practices_pulse (float, none_type): The pulse related to labor practices.. [optional]  # noqa: E501
            legal_regulations_pulse (float, none_type): The pulse related to legal regulations.. [optional]  # noqa: E501
            material_sourcing_pulse (float, none_type): The pulse related to material sourcing.. [optional]  # noqa: E501
            climate_change_pulse (float, none_type): The pulse related to climate change.. [optional]  # noqa: E501
            product_lifecycle_pulse (float, none_type): The pulse related to the product lifecycle.. [optional]  # noqa: E501
            product_quality_pulse (float, none_type): The pulse related to product quality.. [optional]  # noqa: E501
            selling_practices_pulse (float, none_type): The pulse related to selling practices.. [optional]  # noqa: E501
            supply_chain_pulse (float, none_type): The pulse related to supply chain practices.. [optional]  # noqa: E501
            systemic_risk_pulse (float, none_type): The pulse related to systemic risks.. [optional]  # noqa: E501
            hazardous_materials_pulse (float, none_type): The pulse related to management of hazardous materials.. [optional]  # noqa: E501
            water_waste_water_pulse (float, none_type): The pulse related to water and wastewater management.. [optional]  # noqa: E501
            dim_business_catvol_day (float, none_type): Category volume related to Business dimension.. [optional]  # noqa: E501
            dim_environment_catvol_day (float, none_type): Category volume related to Environment dimension.. [optional]  # noqa: E501
            dim_humancap_catvol_day (float, none_type): Category volume related to Human Capital dimension.. [optional]  # noqa: E501
            dim_leadership_catvol_day (float, none_type): Category volume related to Leadership dimension.. [optional]  # noqa: E501
            dim_socialcap_catvol_day (float, none_type): Category volume related to Social Capital dimension.. [optional]  # noqa: E501
            error (InvalidIdErrorObject): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
