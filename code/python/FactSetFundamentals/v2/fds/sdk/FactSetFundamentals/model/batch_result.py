"""
    FactSet Fundamentals API

    Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>   # noqa: E501

    The version of the OpenAPI document: 2.5.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.FactSetFundamentals.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.FactSetFundamentals.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.FactSetFundamentals.model.fundamental import Fundamental
    from fds.sdk.FactSetFundamentals.model.fundamental_value import FundamentalValue
    from fds.sdk.FactSetFundamentals.model.fundamentals_pit_data import FundamentalsPITData
    from fds.sdk.FactSetFundamentals.model.period_info import PeriodInfo
    from fds.sdk.FactSetFundamentals.model.segment import Segment
    globals()['Fundamental'] = Fundamental
    globals()['FundamentalValue'] = FundamentalValue
    globals()['FundamentalsPITData'] = FundamentalsPITData
    globals()['PeriodInfo'] = PeriodInfo
    globals()['Segment'] = Segment


class BatchResult(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'request_id': (str,),  # noqa: E501
            'fsym_id': (str, none_type,),  # noqa: E501
            'metric': (str, none_type,),  # noqa: E501
            'periodicity': (str, none_type,),  # noqa: E501
            'fiscal_year': (int, none_type,),  # noqa: E501
            'fiscal_period_length': (int, none_type,),  # noqa: E501
            'fiscal_end_date': (date, none_type,),  # noqa: E501
            'report_date': (date, none_type,),  # noqa: E501
            'eps_report_date': (date, none_type,),  # noqa: E501
            'update_type': (str, none_type,),  # noqa: E501
            'currency': (str, none_type,),  # noqa: E501
            'value': (FundamentalValue,),  # noqa: E501
            'date': (date, none_type,),  # noqa: E501
            'pit_start': (datetime, none_type,),  # noqa: E501
            'pit_end': (datetime, none_type,),  # noqa: E501
            'fiscal_interim_number': (int, none_type,),  # noqa: E501
            'fiscal_date': (date, none_type,),  # noqa: E501
            'fye_change': (bool, none_type,),  # noqa: E501
            'fiscal_period': (int, none_type,),  # noqa: E501
            'label': (str, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'request_id': 'requestId',  # noqa: E501
        'fsym_id': 'fsymId',  # noqa: E501
        'metric': 'metric',  # noqa: E501
        'periodicity': 'periodicity',  # noqa: E501
        'fiscal_year': 'fiscalYear',  # noqa: E501
        'fiscal_period_length': 'fiscalPeriodLength',  # noqa: E501
        'fiscal_end_date': 'fiscalEndDate',  # noqa: E501
        'report_date': 'reportDate',  # noqa: E501
        'eps_report_date': 'epsReportDate',  # noqa: E501
        'update_type': 'updateType',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'value': 'value',  # noqa: E501
        'date': 'date',  # noqa: E501
        'pit_start': 'pitStart',  # noqa: E501
        'pit_end': 'pitEnd',  # noqa: E501
        'fiscal_interim_number': 'fiscalInterimNumber',  # noqa: E501
        'fiscal_date': 'fiscalDate',  # noqa: E501
        'fye_change': 'fyeChange',  # noqa: E501
        'fiscal_period': 'fiscalPeriod',  # noqa: E501
        'label': 'label',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """BatchResult - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            request_id (str): The identifier provided in the input request that corresponds to this period information.. [optional]  # noqa: E501
            fsym_id (str, none_type): FactSet Regional Security Identifier representing the specific data series for the requested `requestId`.. [optional]  # noqa: E501
            metric (str, none_type): The identifier of the fundamental metric being reported (e.g., `FF_SALES`).. [optional]  # noqa: E501
            periodicity (str, none_type): Periodicity code for this fiscal period (e.g., `QTR`, `ANN`).. [optional]  # noqa: E501
            fiscal_year (int, none_type): Fiscal year of the reported period, expressed in a YYYY format.. [optional]  # noqa: E501
            fiscal_period_length (int, none_type): Length of the fiscal period in days.. [optional]  # noqa: E501
            fiscal_end_date (date, none_type): The official ending date of the fiscal period (YYYY-MM-DD).. [optional]  # noqa: E501
            report_date (date, none_type): The date the reported fiscal period ended.. [optional]  # noqa: E501
            eps_report_date (date, none_type): The date the EPS was reported for the requested periodicity. In YYYY-MM-DD format.. [optional]  # noqa: E501
            update_type (str, none_type): Indicates the status of the source filing when this data point was recorded (`Preliminary` or `Final`).. [optional]  # noqa: E501
            currency (str, none_type): Currency of the reported `value`, expressed as a 3-character ISO 4217 code. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).. [optional]  # noqa: E501
            value (FundamentalValue): [optional]  # noqa: E501
            date (date, none_type): Date for the period requested expressed in YYYY-MM-DD format. [optional]  # noqa: E501
            pit_start (datetime, none_type): The UTC timestamp for when the fiscal period information was first published and became available.. [optional]  # noqa: E501
            pit_end (datetime, none_type): The UTC timestamp for when this version of the fiscal period information was superseded by a newer version. A `null` value indicates that this is the latest available version.. [optional]  # noqa: E501
            fiscal_interim_number (int, none_type): The sequential number of the interim period within the fiscal year (e.g., 1 for Q1, 2 for Q2).. [optional]  # noqa: E501
            fiscal_date (date, none_type): The specific date used for reporting the period end, which may occasionally differ slightly from the period's actual calendar end date (YYYY-MM-DD).. [optional]  # noqa: E501
            fye_change (bool, none_type): Flag indicating if a Fiscal Year End (FYE) change occurred during or impacted this specific period (`true` if changed, `false` otherwise).. [optional]  # noqa: E501
            fiscal_period (int, none_type): Integer representing the fiscal period. For `QTR` periodicity, possible values are 1, 2, 3, or 4. For `SEMI` periodicity, possible values are 1 or 2.. [optional]  # noqa: E501
            label (str, none_type): Report labels of the segment type requested.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """BatchResult - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            request_id (str): The identifier provided in the input request that corresponds to this period information.. [optional]  # noqa: E501
            fsym_id (str, none_type): FactSet Regional Security Identifier representing the specific data series for the requested `requestId`.. [optional]  # noqa: E501
            metric (str, none_type): The identifier of the fundamental metric being reported (e.g., `FF_SALES`).. [optional]  # noqa: E501
            periodicity (str, none_type): Periodicity code for this fiscal period (e.g., `QTR`, `ANN`).. [optional]  # noqa: E501
            fiscal_year (int, none_type): Fiscal year of the reported period, expressed in a YYYY format.. [optional]  # noqa: E501
            fiscal_period_length (int, none_type): Length of the fiscal period in days.. [optional]  # noqa: E501
            fiscal_end_date (date, none_type): The official ending date of the fiscal period (YYYY-MM-DD).. [optional]  # noqa: E501
            report_date (date, none_type): The date the reported fiscal period ended.. [optional]  # noqa: E501
            eps_report_date (date, none_type): The date the EPS was reported for the requested periodicity. In YYYY-MM-DD format.. [optional]  # noqa: E501
            update_type (str, none_type): Indicates the status of the source filing when this data point was recorded (`Preliminary` or `Final`).. [optional]  # noqa: E501
            currency (str, none_type): Currency of the reported `value`, expressed as a 3-character ISO 4217 code. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).. [optional]  # noqa: E501
            value (FundamentalValue): [optional]  # noqa: E501
            date (date, none_type): Date for the period requested expressed in YYYY-MM-DD format. [optional]  # noqa: E501
            pit_start (datetime, none_type): The UTC timestamp for when the fiscal period information was first published and became available.. [optional]  # noqa: E501
            pit_end (datetime, none_type): The UTC timestamp for when this version of the fiscal period information was superseded by a newer version. A `null` value indicates that this is the latest available version.. [optional]  # noqa: E501
            fiscal_interim_number (int, none_type): The sequential number of the interim period within the fiscal year (e.g., 1 for Q1, 2 for Q2).. [optional]  # noqa: E501
            fiscal_date (date, none_type): The specific date used for reporting the period end, which may occasionally differ slightly from the period's actual calendar end date (YYYY-MM-DD).. [optional]  # noqa: E501
            fye_change (bool, none_type): Flag indicating if a Fiscal Year End (FYE) change occurred during or impacted this specific period (`true` if changed, `false` otherwise).. [optional]  # noqa: E501
            fiscal_period (int, none_type): Integer representing the fiscal period. For `QTR` periodicity, possible values are 1, 2, 3, or 4. For `SEMI` periodicity, possible values are 1 or 2.. [optional]  # noqa: E501
            label (str, none_type): Report labels of the segment type requested.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
          ],
          'oneOf': [
              Fundamental,
              FundamentalsPITData,
              PeriodInfo,
              Segment,
          ],
        }
