"""
    FactSet Fundamentals API

    Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>   # noqa: E501

    The version of the OpenAPI document: 2.2.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.FactSetFundamentals.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.FactSetFundamentals.exceptions import ApiAttributeError



class Ratios(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'asset_turnover_ratio': (float, none_type,),  # noqa: E501
            'current_ratio': (float, none_type,),  # noqa: E501
            'quick_ratio': (float, none_type,),  # noqa: E501
            'ebit_margin': (float, none_type,),  # noqa: E501
            'ebitda_margin': (float, none_type,),  # noqa: E501
            'gross_margin': (float, none_type,),  # noqa: E501
            'inventory_turnover': (float, none_type,),  # noqa: E501
            'long_term_debt_to_equity': (float, none_type,),  # noqa: E501
            'payout_ratio': (float, none_type,),  # noqa: E501
            'pretax_margin': (float, none_type,),  # noqa: E501
            'price_to_book_ratio': (float, none_type,),  # noqa: E501
            'price_to_cash_flow_ratio': (float, none_type,),  # noqa: E501
            'price_to_earnings_ratio': (float, none_type,),  # noqa: E501
            'price_to_sales_ratio': (float, none_type,),  # noqa: E501
            'return_on_assets': (float, none_type,),  # noqa: E501
            'return_on_equity': (float, none_type,),  # noqa: E501
            'return_on_invested_capital': (float, none_type,),  # noqa: E501
            'total_debt_to_equity': (float, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'asset_turnover_ratio': 'assetTurnoverRatio',  # noqa: E501
        'current_ratio': 'currentRatio',  # noqa: E501
        'quick_ratio': 'quickRatio',  # noqa: E501
        'ebit_margin': 'ebitMargin',  # noqa: E501
        'ebitda_margin': 'ebitdaMargin',  # noqa: E501
        'gross_margin': 'grossMargin',  # noqa: E501
        'inventory_turnover': 'inventoryTurnover',  # noqa: E501
        'long_term_debt_to_equity': 'longTermDebtToEquity',  # noqa: E501
        'payout_ratio': 'payoutRatio',  # noqa: E501
        'pretax_margin': 'pretaxMargin',  # noqa: E501
        'price_to_book_ratio': 'priceToBookRatio',  # noqa: E501
        'price_to_cash_flow_ratio': 'priceToCashFlowRatio',  # noqa: E501
        'price_to_earnings_ratio': 'priceToEarningsRatio',  # noqa: E501
        'price_to_sales_ratio': 'priceToSalesRatio',  # noqa: E501
        'return_on_assets': 'returnOnAssets',  # noqa: E501
        'return_on_equity': 'returnOnEquity',  # noqa: E501
        'return_on_invested_capital': 'returnOnInvestedCapital',  # noqa: E501
        'total_debt_to_equity': 'totalDebtToEquity',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Ratios - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            asset_turnover_ratio (float, none_type): The asset turnover ratio measures the value of a company's sales or revenues relative to the value of its assets. [optional]  # noqa: E501
            current_ratio (float, none_type): The current ratio is a liquidity ratio that measures a company's ability to pay short-term and long-term obligations. The ratio is calculated by comparing current assets to current liabilities. [optional]  # noqa: E501
            quick_ratio (float, none_type): The quick ratio measures the dollar amount of liquid assets available with the company against the dollar amount of its current liabilities. [optional]  # noqa: E501
            ebit_margin (float, none_type): EBIT margin is an assessment of a firm's operating profitability as a percentage of its total revenue. It is equal to earnings before interest and tax (EBIT) divided by total revenue. [optional]  # noqa: E501
            ebitda_margin (float, none_type): EBITDA margin is an assessment of a firm's operating profitability as a percentage of its total revenue. It is equal to earnings before interest, tax, depreciation and amortization (EBITDA) divided by total revenue. [optional]  # noqa: E501
            gross_margin (float, none_type): Gross profit margin is the proportion of money left over from revenues after accounting for the cost of goods sold, calculated by dividing gross profit by revenues.. [optional]  # noqa: E501
            inventory_turnover (float, none_type): Inventory turnover is a ratio showing how many times a company has sold and replaced inventory during a given period. [optional]  # noqa: E501
            long_term_debt_to_equity (float, none_type): Long-term debt consists of loans and financial obligations lasting over one year. The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities lasting over one year by its shareholder equity. [optional]  # noqa: E501
            payout_ratio (float, none_type): The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company. [optional]  # noqa: E501
            pretax_margin (float, none_type): The pretax margin is the ratio of a company's pre-tax earnings to its total sales. [optional]  # noqa: E501
            price_to_book_ratio (float, none_type): Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share (BVPS) .. [optional]  # noqa: E501
            price_to_cash_flow_ratio (float, none_type): The price-to-cash flow ratio is a stock valuation indicator or multiple that measures the value of a stockâ€™s price relative to its operating cash flow per share.. [optional]  # noqa: E501
            price_to_earnings_ratio (float, none_type): The price-to-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings. [optional]  # noqa: E501
            price_to_sales_ratio (float, none_type): The price-to-sales ratio (P/S ratio) is a valuation ratio that compares a companyâ€™s stock price to its revenues. [optional]  # noqa: E501
            return_on_assets (float, none_type): Return on net assets (RONA) is a measure of financial performance calculated as net income divided by the sum of fixed assets and net working capital. [optional]  # noqa: E501
            return_on_equity (float, none_type): Return on equity (ROE) is a measure of financial performance calculated as net income divided by shareholders' equity. [optional]  # noqa: E501
            return_on_invested_capital (float, none_type): Return on Investment (ROI) measures how well an investment is performing. [optional]  # noqa: E501
            total_debt_to_equity (float, none_type): The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities by its shareholder equity. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Ratios - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            asset_turnover_ratio (float, none_type): The asset turnover ratio measures the value of a company's sales or revenues relative to the value of its assets. [optional]  # noqa: E501
            current_ratio (float, none_type): The current ratio is a liquidity ratio that measures a company's ability to pay short-term and long-term obligations. The ratio is calculated by comparing current assets to current liabilities. [optional]  # noqa: E501
            quick_ratio (float, none_type): The quick ratio measures the dollar amount of liquid assets available with the company against the dollar amount of its current liabilities. [optional]  # noqa: E501
            ebit_margin (float, none_type): EBIT margin is an assessment of a firm's operating profitability as a percentage of its total revenue. It is equal to earnings before interest and tax (EBIT) divided by total revenue. [optional]  # noqa: E501
            ebitda_margin (float, none_type): EBITDA margin is an assessment of a firm's operating profitability as a percentage of its total revenue. It is equal to earnings before interest, tax, depreciation and amortization (EBITDA) divided by total revenue. [optional]  # noqa: E501
            gross_margin (float, none_type): Gross profit margin is the proportion of money left over from revenues after accounting for the cost of goods sold, calculated by dividing gross profit by revenues.. [optional]  # noqa: E501
            inventory_turnover (float, none_type): Inventory turnover is a ratio showing how many times a company has sold and replaced inventory during a given period. [optional]  # noqa: E501
            long_term_debt_to_equity (float, none_type): Long-term debt consists of loans and financial obligations lasting over one year. The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities lasting over one year by its shareholder equity. [optional]  # noqa: E501
            payout_ratio (float, none_type): The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company. [optional]  # noqa: E501
            pretax_margin (float, none_type): The pretax margin is the ratio of a company's pre-tax earnings to its total sales. [optional]  # noqa: E501
            price_to_book_ratio (float, none_type): Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share (BVPS) .. [optional]  # noqa: E501
            price_to_cash_flow_ratio (float, none_type): The price-to-cash flow ratio is a stock valuation indicator or multiple that measures the value of a stockâ€™s price relative to its operating cash flow per share.. [optional]  # noqa: E501
            price_to_earnings_ratio (float, none_type): The price-to-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings. [optional]  # noqa: E501
            price_to_sales_ratio (float, none_type): The price-to-sales ratio (P/S ratio) is a valuation ratio that compares a companyâ€™s stock price to its revenues. [optional]  # noqa: E501
            return_on_assets (float, none_type): Return on net assets (RONA) is a measure of financial performance calculated as net income divided by the sum of fixed assets and net working capital. [optional]  # noqa: E501
            return_on_equity (float, none_type): Return on equity (ROE) is a measure of financial performance calculated as net income divided by shareholders' equity. [optional]  # noqa: E501
            return_on_invested_capital (float, none_type): Return on Investment (ROI) measures how well an investment is performing. [optional]  # noqa: E501
            total_debt_to_equity (float, none_type): The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities by its shareholder equity. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
