"""
    FactSet Fundamentals API

    Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>   # noqa: E501

    The version of the OpenAPI document: 2.2.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.FactSetFundamentals.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.FactSetFundamentals.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.FactSetFundamentals.model.company_report_error_object import CompanyReportErrorObject
    from fds.sdk.FactSetFundamentals.model.dividend import Dividend
    from fds.sdk.FactSetFundamentals.model.per_share import PerShare
    from fds.sdk.FactSetFundamentals.model.ratios import Ratios
    globals()['CompanyReportErrorObject'] = CompanyReportErrorObject
    globals()['Dividend'] = Dividend
    globals()['PerShare'] = PerShare
    globals()['Ratios'] = Ratios


class Fundamentals(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'request_id': (str,),  # noqa: E501
            'error': (CompanyReportErrorObject,),  # noqa: E501
            'fsym_id': (str, none_type,),  # noqa: E501
            'as_of_date': (date, none_type,),  # noqa: E501
            'currency': (str, none_type,),  # noqa: E501
            'per_share': (PerShare,),  # noqa: E501
            'ratios': (Ratios,),  # noqa: E501
            'dividend': (Dividend,),  # noqa: E501
            'enterprise_value': (float, none_type,),  # noqa: E501
            'five_year_average_yield': (float, none_type,),  # noqa: E501
            'five_year_dividend_growth_rate': (float, none_type,),  # noqa: E501
            'floating_shares_outstanding': (float, none_type,),  # noqa: E501
            'net_income': (float, none_type,),  # noqa: E501
            'number_of_employees': (int, none_type,),  # noqa: E501
            'sales_per_employee': (float, none_type,),  # noqa: E501
            'share_holder_equity': (float, none_type,),  # noqa: E501
            'three_year_average_yield': (float, none_type,),  # noqa: E501
            'three_year_dividend_growth_rate': (float, none_type,),  # noqa: E501
            'total_assets': (float, none_type,),  # noqa: E501
            'total_revenue': (float, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'request_id': 'requestId',  # noqa: E501
        'error': 'error',  # noqa: E501
        'fsym_id': 'fsymId',  # noqa: E501
        'as_of_date': 'asOfDate',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'per_share': 'perShare',  # noqa: E501
        'ratios': 'ratios',  # noqa: E501
        'dividend': 'dividend',  # noqa: E501
        'enterprise_value': 'enterpriseValue',  # noqa: E501
        'five_year_average_yield': 'fiveYearAverageYield',  # noqa: E501
        'five_year_dividend_growth_rate': 'fiveYearDividendGrowthRate',  # noqa: E501
        'floating_shares_outstanding': 'floatingSharesOutstanding',  # noqa: E501
        'net_income': 'netIncome',  # noqa: E501
        'number_of_employees': 'numberOfEmployees',  # noqa: E501
        'sales_per_employee': 'salesPerEmployee',  # noqa: E501
        'share_holder_equity': 'shareHolderEquity',  # noqa: E501
        'three_year_average_yield': 'threeYearAverageYield',  # noqa: E501
        'three_year_dividend_growth_rate': 'threeYearDividendGrowthRate',  # noqa: E501
        'total_assets': 'totalAssets',  # noqa: E501
        'total_revenue': 'totalRevenue',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Fundamentals - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            request_id (str): Identifier that was used for the request.. [optional]  # noqa: E501
            error (CompanyReportErrorObject): [optional]  # noqa: E501
            fsym_id (str, none_type): FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.. [optional]  # noqa: E501
            as_of_date (date, none_type): Date on which the specified fundamentals data or information is accurate or relevant.. [optional]  # noqa: E501
            currency (str, none_type): Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).. [optional]  # noqa: E501
            per_share (PerShare): [optional]  # noqa: E501
            ratios (Ratios): [optional]  # noqa: E501
            dividend (Dividend): [optional]  # noqa: E501
            enterprise_value (float, none_type): Enterprise Value (EV) is the measure of a company's total value for the period and date(s) requested in local currency by default. [optional]  # noqa: E501
            five_year_average_yield (float, none_type): Average of the dividend yield with yield calculated for each of the past five years. [optional]  # noqa: E501
            five_year_dividend_growth_rate (float, none_type): The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over five years of time. [optional]  # noqa: E501
            floating_shares_outstanding (float, none_type): Represents the number of shares outstanding less closely held shares for the period and date(s) requested. [optional]  # noqa: E501
            net_income (float, none_type): This equals to net earnings (profit) calculated as sales less cost of goods sold, selling, general and administrative expenses, operating expenses, depreciation, interest, taxes and other expenses. [optional]  # noqa: E501
            number_of_employees (int, none_type): Represents the number of employees under the company's payroll as reported by the management to the shareholders within 90 days of the fiscal year-end.. [optional]  # noqa: E501
            sales_per_employee (float, none_type): Revenue per employee is a ratio that is calculated as a company's total revenue divided by its current number of employees. [optional]  # noqa: E501
            share_holder_equity (float, none_type): Shareholder equity represents the amount of financing the company experiences through common and preferred shares. [optional]  # noqa: E501
            three_year_average_yield (float, none_type): Average of the dividend yield with yield calculated for each of the past three years. [optional]  # noqa: E501
            three_year_dividend_growth_rate (float, none_type): The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over three years of time. [optional]  # noqa: E501
            total_assets (float, none_type): Total amount of assets owned by entity.. [optional]  # noqa: E501
            total_revenue (float, none_type): Revenue is the amount of money (in Million) that a company actually receives during a specific period, including discounts and deductions for returned merchandise.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Fundamentals - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            request_id (str): Identifier that was used for the request.. [optional]  # noqa: E501
            error (CompanyReportErrorObject): [optional]  # noqa: E501
            fsym_id (str, none_type): FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.. [optional]  # noqa: E501
            as_of_date (date, none_type): Date on which the specified fundamentals data or information is accurate or relevant.. [optional]  # noqa: E501
            currency (str, none_type): Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).. [optional]  # noqa: E501
            per_share (PerShare): [optional]  # noqa: E501
            ratios (Ratios): [optional]  # noqa: E501
            dividend (Dividend): [optional]  # noqa: E501
            enterprise_value (float, none_type): Enterprise Value (EV) is the measure of a company's total value for the period and date(s) requested in local currency by default. [optional]  # noqa: E501
            five_year_average_yield (float, none_type): Average of the dividend yield with yield calculated for each of the past five years. [optional]  # noqa: E501
            five_year_dividend_growth_rate (float, none_type): The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over five years of time. [optional]  # noqa: E501
            floating_shares_outstanding (float, none_type): Represents the number of shares outstanding less closely held shares for the period and date(s) requested. [optional]  # noqa: E501
            net_income (float, none_type): This equals to net earnings (profit) calculated as sales less cost of goods sold, selling, general and administrative expenses, operating expenses, depreciation, interest, taxes and other expenses. [optional]  # noqa: E501
            number_of_employees (int, none_type): Represents the number of employees under the company's payroll as reported by the management to the shareholders within 90 days of the fiscal year-end.. [optional]  # noqa: E501
            sales_per_employee (float, none_type): Revenue per employee is a ratio that is calculated as a company's total revenue divided by its current number of employees. [optional]  # noqa: E501
            share_holder_equity (float, none_type): Shareholder equity represents the amount of financing the company experiences through common and preferred shares. [optional]  # noqa: E501
            three_year_average_yield (float, none_type): Average of the dividend yield with yield calculated for each of the past three years. [optional]  # noqa: E501
            three_year_dividend_growth_rate (float, none_type): The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over three years of time. [optional]  # noqa: E501
            total_assets (float, none_type): Total amount of assets owned by entity.. [optional]  # noqa: E501
            total_revenue (float, none_type): Revenue is the amount of money (in Million) that a company actually receives during a specific period, including discounts and deductions for returned merchandise.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
