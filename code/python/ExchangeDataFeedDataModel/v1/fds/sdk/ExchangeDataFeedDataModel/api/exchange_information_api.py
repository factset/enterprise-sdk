"""
    FactSet Real-Time Data Model API

    FactSetâ€™s Real-time market data products provide access to consolidated real-time and delayed global exchange data. Proprietary technology normalizes over 250 global venues, 18+ million instruments, and 150+ data fields. Asset types integrated include equities, futures, options, warrants, fixed income, mutual funds, ETFs, indices, commodities, and FX rates. Innovative technology ensures reliability and provides scalability that allows clients to make requests based on a symbol list or an exchange. Reduce development time by powering proprietary and third-party applications with exchange data from a unified data model. <p>The Real-time Data Model API provides mappings for enumerations used in our Real-Time DataFeed products and should be used in conjunction with the DataFeed Data Model documentation available for each product. <p>The initial version of this API is limited to include mapping tables for the product codes and exchanges only.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
from multiprocessing.pool import ApplyResult
import typing

from fds.sdk.ExchangeDataFeedDataModel.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.ExchangeDataFeedDataModel.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.ExchangeDataFeedDataModel.exceptions import ApiException
from fds.sdk.ExchangeDataFeedDataModel.model.error_response import ErrorResponse
from fds.sdk.ExchangeDataFeedDataModel.model.exchanges_response import ExchangesResponse





class ExchangeInformationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.get_exchanges_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (ExchangesResponse,), 401: (ErrorResponse,), 402: (ErrorResponse,), 404: (ErrorResponse,), 500: (ErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/exchanges',
                'operation_id': 'get_exchanges',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'product_code',
                    'exchange_code',
                    'iso_code',
                    'format',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "JSON": "json",
                        "XML": "xml",
                        "CSV": "csv"
                    },
                },
                'openapi_types': {
                    'product_code':
                        ([int],),
                    'exchange_code':
                        ([int],),
                    'iso_code':
                        ([str],),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'product_code': 'product_code',
                    'exchange_code': 'exchange_code',
                    'iso_code': 'iso_code',
                    'format': 'format',
                },
                'location_map': {
                    'product_code': 'query',
                    'exchange_code': 'query',
                    'iso_code': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'product_code': 'csv',
                    'exchange_code': 'csv',
                    'iso_code': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml'
                ],
                'content_type': [],
            },
            api_client=api_client
        )


    @staticmethod
    def apply_kwargs_defaults(kwargs, return_http_data_only, async_req):
        kwargs["async_req"] = async_req
        kwargs["_return_http_data_only"] = return_http_data_only
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")


    def get_exchanges(
        self,
        **kwargs
    ) -> ExchangesResponse:
        """Request metadata for covered Real-Time market data venues at FactSet.  # noqa: E501

        Returns a list of exchanges with details like exchange code, name, market open and close times, etc.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            product_code ([int]): Allows filtering of specific product codes in the response.. [optional]
            exchange_code ([int]): Allows filtering of specific exchange codes in the response.. [optional]
            iso_code ([str]): Allows filtering on specific ISO code in the response.. [optional]
            format (str): The format of the output file.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ExchangesResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.get_exchanges_endpoint.call_with_http_info(**kwargs)

    def get_exchanges_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[ExchangesResponse, int, typing.MutableMapping]:
        """Request metadata for covered Real-Time market data venues at FactSet.  # noqa: E501

        Returns a list of exchanges with details like exchange code, name, market open and close times, etc.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            product_code ([int]): Allows filtering of specific product codes in the response.. [optional]
            exchange_code ([int]): Allows filtering of specific exchange codes in the response.. [optional]
            iso_code ([str]): Allows filtering on specific ISO code in the response.. [optional]
            format (str): The format of the output file.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ExchangesResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.get_exchanges_endpoint.call_with_http_info(**kwargs)

    def get_exchanges_async(
        self,
        **kwargs
    ) -> "ApplyResult[ExchangesResponse]":
        """Request metadata for covered Real-Time market data venues at FactSet.  # noqa: E501

        Returns a list of exchanges with details like exchange code, name, market open and close times, etc.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            product_code ([int]): Allows filtering of specific product codes in the response.. [optional]
            exchange_code ([int]): Allows filtering of specific exchange codes in the response.. [optional]
            iso_code ([str]): Allows filtering on specific ISO code in the response.. [optional]
            format (str): The format of the output file.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[ExchangesResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.get_exchanges_endpoint.call_with_http_info(**kwargs)

    def get_exchanges_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[ExchangesResponse, int, typing.MutableMapping]]":
        """Request metadata for covered Real-Time market data venues at FactSet.  # noqa: E501

        Returns a list of exchanges with details like exchange code, name, market open and close times, etc.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            product_code ([int]): Allows filtering of specific product codes in the response.. [optional]
            exchange_code ([int]): Allows filtering of specific exchange codes in the response.. [optional]
            iso_code ([str]): Allows filtering on specific ISO code in the response.. [optional]
            format (str): The format of the output file.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(ExchangesResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.get_exchanges_endpoint.call_with_http_info(**kwargs)


