"""
    IRN API v1

    Allows users to extract, create, update and configure IRN data.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
from multiprocessing.pool import ApplyResult
import typing

from fds.sdk.IRNCustomSymbols.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.IRNCustomSymbols.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.IRNCustomSymbols.exceptions import ApiException
from fds.sdk.IRNCustomSymbols.model.create_standard_symbol_metadata_dto import CreateStandardSymbolMetadataDto
from fds.sdk.IRNCustomSymbols.model.new_item_dto import NewItemDto
from fds.sdk.IRNCustomSymbols.model.operation import Operation
from fds.sdk.IRNCustomSymbols.model.problem_details import ProblemDetails





class HybridSymbolsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.create_standard_symbol_metadata_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 201: (NewItemDto,), 400: (ProblemDetails,), 0: (ProblemDetails,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/custom-symbols/standard-symbol-metadata',
                'operation_id': 'create_standard_symbol_metadata',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_standard_symbol_metadata_dto',
                ],
                'required': [],
                'nullable': [
                    'create_standard_symbol_metadata_dto',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_standard_symbol_metadata_dto':
                        (CreateStandardSymbolMetadataDto,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_standard_symbol_metadata_dto': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )

        self.get_standard_symbol_metadata_guid_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (str,), 404: (str,), 0: (ProblemDetails,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/custom-symbols/standard-symbol-metadata/{standardSymbol}',
                'operation_id': 'get_standard_symbol_metadata_guid',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'standard_symbol',
                ],
                'required': [
                    'standard_symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'standard_symbol':
                        (str,),
                },
                'attribute_map': {
                    'standard_symbol': 'standardSymbol',
                },
                'location_map': {
                    'standard_symbol': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.patch_standard_symbol_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/custom-symbols/standard-symbol-metadata/{standardSymbolId}',
                'operation_id': 'patch_standard_symbol',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'standard_symbol_id',
                    'operation',
                ],
                'required': [
                    'standard_symbol_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'standard_symbol_id':
                        (str,),
                    'operation':
                        ([Operation],),
                },
                'attribute_map': {
                    'standard_symbol_id': 'standardSymbolId',
                },
                'location_map': {
                    'standard_symbol_id': 'path',
                    'operation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )


    @staticmethod
    def apply_kwargs_defaults(kwargs, return_http_data_only, async_req):
        kwargs["async_req"] = async_req
        kwargs["_return_http_data_only"] = return_http_data_only
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")


    def create_standard_symbol_metadata(
        self,
        **kwargs
    ) -> NewItemDto:
        """Create standard symbol metadata  # noqa: E501

        Create standard symbol metadata  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            create_standard_symbol_metadata_dto (CreateStandardSymbolMetadataDto): createStandardSymbolMetadataDto object to save. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            NewItemDto
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.create_standard_symbol_metadata_endpoint.call_with_http_info(**kwargs)

    def create_standard_symbol_metadata_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[NewItemDto, int, typing.MutableMapping]:
        """Create standard symbol metadata  # noqa: E501

        Create standard symbol metadata  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            create_standard_symbol_metadata_dto (CreateStandardSymbolMetadataDto): createStandardSymbolMetadataDto object to save. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            NewItemDto
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.create_standard_symbol_metadata_endpoint.call_with_http_info(**kwargs)

    def create_standard_symbol_metadata_async(
        self,
        **kwargs
    ) -> "ApplyResult[NewItemDto]":
        """Create standard symbol metadata  # noqa: E501

        Create standard symbol metadata  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            create_standard_symbol_metadata_dto (CreateStandardSymbolMetadataDto): createStandardSymbolMetadataDto object to save. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[NewItemDto]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.create_standard_symbol_metadata_endpoint.call_with_http_info(**kwargs)

    def create_standard_symbol_metadata_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[NewItemDto, int, typing.MutableMapping]]":
        """Create standard symbol metadata  # noqa: E501

        Create standard symbol metadata  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            create_standard_symbol_metadata_dto (CreateStandardSymbolMetadataDto): createStandardSymbolMetadataDto object to save. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(NewItemDto, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.create_standard_symbol_metadata_endpoint.call_with_http_info(**kwargs)


    def get_standard_symbol_metadata_guid(
        self,
        standard_symbol,
        **kwargs
    ) -> str:
        """Get all custom field and standard field details on a specific standard symbol  # noqa: E501

        Get all custom field and standard field details on a specific standard symbol  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            standard_symbol (str): Standard symbol to get associated customSymbolId

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            str
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['standard_symbol'] = \
            standard_symbol
        return self.get_standard_symbol_metadata_guid_endpoint.call_with_http_info(**kwargs)

    def get_standard_symbol_metadata_guid_with_http_info(
        self,
        standard_symbol,
        **kwargs
    ) -> typing.Tuple[str, int, typing.MutableMapping]:
        """Get all custom field and standard field details on a specific standard symbol  # noqa: E501

        Get all custom field and standard field details on a specific standard symbol  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            standard_symbol (str): Standard symbol to get associated customSymbolId

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            str
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['standard_symbol'] = \
            standard_symbol
        return self.get_standard_symbol_metadata_guid_endpoint.call_with_http_info(**kwargs)

    def get_standard_symbol_metadata_guid_async(
        self,
        standard_symbol,
        **kwargs
    ) -> "ApplyResult[str]":
        """Get all custom field and standard field details on a specific standard symbol  # noqa: E501

        Get all custom field and standard field details on a specific standard symbol  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            standard_symbol (str): Standard symbol to get associated customSymbolId

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[str]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['standard_symbol'] = \
            standard_symbol
        return self.get_standard_symbol_metadata_guid_endpoint.call_with_http_info(**kwargs)

    def get_standard_symbol_metadata_guid_with_http_info_async(
        self,
        standard_symbol,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[str, int, typing.MutableMapping]]":
        """Get all custom field and standard field details on a specific standard symbol  # noqa: E501

        Get all custom field and standard field details on a specific standard symbol  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            standard_symbol (str): Standard symbol to get associated customSymbolId

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(str, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['standard_symbol'] = \
            standard_symbol
        return self.get_standard_symbol_metadata_guid_endpoint.call_with_http_info(**kwargs)


    def patch_standard_symbol(
        self,
        standard_symbol_id,
        **kwargs
    ) -> None:
        """Edit a standard symbol’s standard field and custom field data  # noqa: E501

        Edit a standard symbol’s standard field and custom field data  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            standard_symbol_id (str): standardSymbolId to update associated standard symbol

        Keyword Args:
            operation ([Operation]): updateCustomSymbolDto object to update. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            None
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['standard_symbol_id'] = \
            standard_symbol_id
        return self.patch_standard_symbol_endpoint.call_with_http_info(**kwargs)

    def patch_standard_symbol_with_http_info(
        self,
        standard_symbol_id,
        **kwargs
    ) -> typing.Tuple[None, int, typing.MutableMapping]:
        """Edit a standard symbol’s standard field and custom field data  # noqa: E501

        Edit a standard symbol’s standard field and custom field data  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            standard_symbol_id (str): standardSymbolId to update associated standard symbol

        Keyword Args:
            operation ([Operation]): updateCustomSymbolDto object to update. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            None
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['standard_symbol_id'] = \
            standard_symbol_id
        return self.patch_standard_symbol_endpoint.call_with_http_info(**kwargs)

    def patch_standard_symbol_async(
        self,
        standard_symbol_id,
        **kwargs
    ) -> "ApplyResult[None]":
        """Edit a standard symbol’s standard field and custom field data  # noqa: E501

        Edit a standard symbol’s standard field and custom field data  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            standard_symbol_id (str): standardSymbolId to update associated standard symbol

        Keyword Args:
            operation ([Operation]): updateCustomSymbolDto object to update. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[None]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['standard_symbol_id'] = \
            standard_symbol_id
        return self.patch_standard_symbol_endpoint.call_with_http_info(**kwargs)

    def patch_standard_symbol_with_http_info_async(
        self,
        standard_symbol_id,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[None, int, typing.MutableMapping]]":
        """Edit a standard symbol’s standard field and custom field data  # noqa: E501

        Edit a standard symbol’s standard field and custom field data  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            standard_symbol_id (str): standardSymbolId to update associated standard symbol

        Keyword Args:
            operation ([Operation]): updateCustomSymbolDto object to update. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(None, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['standard_symbol_id'] = \
            standard_symbol_id
        return self.patch_standard_symbol_endpoint.call_with_http_info(**kwargs)


