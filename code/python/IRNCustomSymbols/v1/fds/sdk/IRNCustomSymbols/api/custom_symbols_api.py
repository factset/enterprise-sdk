"""
    IRN API v1

    Allows users to extract, create, update and configure IRN data.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
from multiprocessing.pool import ApplyResult
import typing

from fds.sdk.IRNCustomSymbols.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.IRNCustomSymbols.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.IRNCustomSymbols.exceptions import ApiException
from fds.sdk.IRNCustomSymbols.model.create_custom_symbol_dto import CreateCustomSymbolDto
from fds.sdk.IRNCustomSymbols.model.custom_symbol_dto import CustomSymbolDto
from fds.sdk.IRNCustomSymbols.model.new_item_dto import NewItemDto
from fds.sdk.IRNCustomSymbols.model.operation import Operation
from fds.sdk.IRNCustomSymbols.model.problem_details import ProblemDetails
from fds.sdk.IRNCustomSymbols.model.record_preview_dto import RecordPreviewDto
from fds.sdk.IRNCustomSymbols.model.standard_symbol_dto import StandardSymbolDto





class CustomSymbolsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.create_custom_symbol_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 201: (NewItemDto,), 400: (ProblemDetails,), 0: (ProblemDetails,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/custom-symbols',
                'operation_id': 'create_custom_symbol',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_custom_symbol_dto',
                ],
                'required': [],
                'nullable': [
                    'create_custom_symbol_dto',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_custom_symbol_dto':
                        (CreateCustomSymbolDto,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_custom_symbol_dto': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )

        self.delete_custom_symbol_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/custom-symbols/{customSymbolId}',
                'operation_id': 'delete_custom_symbol',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'custom_symbol_id',
                ],
                'required': [
                    'custom_symbol_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'custom_symbol_id':
                        (str,),
                },
                'attribute_map': {
                    'custom_symbol_id': 'customSymbolId',
                },
                'location_map': {
                    'custom_symbol_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.get_custom_symbol_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (CustomSymbolDto,), 404: (ProblemDetails,), 0: (ProblemDetails,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/custom-symbols/{customSymbolId}',
                'operation_id': 'get_custom_symbol',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'custom_symbol_id',
                ],
                'required': [
                    'custom_symbol_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'custom_symbol_id':
                        (str,),
                },
                'attribute_map': {
                    'custom_symbol_id': 'customSymbolId',
                },
                'location_map': {
                    'custom_symbol_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.get_custom_symbol_records_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: ([RecordPreviewDto],), 404: (ProblemDetails,), 0: (ProblemDetails,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/custom-symbols/{customSymbolId}/records',
                'operation_id': 'get_custom_symbol_records',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'custom_symbol_id',
                ],
                'required': [
                    'custom_symbol_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'custom_symbol_id':
                        (str,),
                },
                'attribute_map': {
                    'custom_symbol_id': 'customSymbolId',
                },
                'location_map': {
                    'custom_symbol_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.get_custom_symbols_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: ([CustomSymbolDto],), 400: (ProblemDetails,), 404: (str,), 0: (ProblemDetails,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/custom-symbols',
                'operation_id': 'get_custom_symbols',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'type_name',
                    'query',
                    'include_custom_field_values',
                    'exclude_linked_custom_symbol',
                    'modified_since',
                    'job_id',
                    'batch_job_id',
                    'include_deleted',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'type_name':
                        (str,),
                    'query':
                        (str,),
                    'include_custom_field_values':
                        (bool,),
                    'exclude_linked_custom_symbol':
                        (bool,),
                    'modified_since':
                        (str,),
                    'job_id':
                        (str,),
                    'batch_job_id':
                        (str,),
                    'include_deleted':
                        (bool,),
                },
                'attribute_map': {
                    'type_name': 'typeName',
                    'query': 'query',
                    'include_custom_field_values': 'includeCustomFieldValues',
                    'exclude_linked_custom_symbol': 'excludeLinkedCustomSymbol',
                    'modified_since': 'modifiedSince',
                    'job_id': 'jobId',
                    'batch_job_id': 'batchJobId',
                    'include_deleted': 'includeDeleted',
                },
                'location_map': {
                    'type_name': 'query',
                    'query': 'query',
                    'include_custom_field_values': 'query',
                    'exclude_linked_custom_symbol': 'query',
                    'modified_since': 'query',
                    'job_id': 'query',
                    'batch_job_id': 'query',
                    'include_deleted': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.link_custom_symbol_to_standard_symbol_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/custom-symbols/{customSymbolId}/link-standard-symbol',
                'operation_id': 'link_custom_symbol_to_standard_symbol',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'custom_symbol_id',
                    'standard_symbol_dto',
                ],
                'required': [
                    'custom_symbol_id',
                ],
                'nullable': [
                    'standard_symbol_dto',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'custom_symbol_id':
                        (str,),
                    'standard_symbol_dto':
                        (StandardSymbolDto,),
                },
                'attribute_map': {
                    'custom_symbol_id': 'customSymbolId',
                },
                'location_map': {
                    'custom_symbol_id': 'path',
                    'standard_symbol_dto': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )

        self.patch_custom_symbol_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/custom-symbols/{customSymbolId}',
                'operation_id': 'patch_custom_symbol',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'custom_symbol_id',
                    'operation',
                ],
                'required': [
                    'custom_symbol_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'custom_symbol_id':
                        (str,),
                    'operation':
                        ([Operation],),
                },
                'attribute_map': {
                    'custom_symbol_id': 'customSymbolId',
                },
                'location_map': {
                    'custom_symbol_id': 'path',
                    'operation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )


    @staticmethod
    def apply_kwargs_defaults(kwargs, return_http_data_only, async_req):
        kwargs["async_req"] = async_req
        kwargs["_return_http_data_only"] = return_http_data_only
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")


    def create_custom_symbol(
        self,
        **kwargs
    ) -> NewItemDto:
        """Create a custom symbol  # noqa: E501

        Create a custom symbol  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            create_custom_symbol_dto (CreateCustomSymbolDto): createCustomSymbolDto object to save. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            NewItemDto
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.create_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def create_custom_symbol_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[NewItemDto, int, typing.MutableMapping]:
        """Create a custom symbol  # noqa: E501

        Create a custom symbol  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            create_custom_symbol_dto (CreateCustomSymbolDto): createCustomSymbolDto object to save. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            NewItemDto
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.create_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def create_custom_symbol_async(
        self,
        **kwargs
    ) -> "ApplyResult[NewItemDto]":
        """Create a custom symbol  # noqa: E501

        Create a custom symbol  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            create_custom_symbol_dto (CreateCustomSymbolDto): createCustomSymbolDto object to save. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[NewItemDto]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.create_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def create_custom_symbol_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[NewItemDto, int, typing.MutableMapping]]":
        """Create a custom symbol  # noqa: E501

        Create a custom symbol  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            create_custom_symbol_dto (CreateCustomSymbolDto): createCustomSymbolDto object to save. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(NewItemDto, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.create_custom_symbol_endpoint.call_with_http_info(**kwargs)


    def delete_custom_symbol(
        self,
        custom_symbol_id,
        **kwargs
    ) -> None:
        """Delete a custom symbol  # noqa: E501

        Delete a custom symbol  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            custom_symbol_id (str): customSymbolId to delete associated custom symbol

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            None
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.delete_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def delete_custom_symbol_with_http_info(
        self,
        custom_symbol_id,
        **kwargs
    ) -> typing.Tuple[None, int, typing.MutableMapping]:
        """Delete a custom symbol  # noqa: E501

        Delete a custom symbol  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            custom_symbol_id (str): customSymbolId to delete associated custom symbol

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            None
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.delete_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def delete_custom_symbol_async(
        self,
        custom_symbol_id,
        **kwargs
    ) -> "ApplyResult[None]":
        """Delete a custom symbol  # noqa: E501

        Delete a custom symbol  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            custom_symbol_id (str): customSymbolId to delete associated custom symbol

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[None]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.delete_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def delete_custom_symbol_with_http_info_async(
        self,
        custom_symbol_id,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[None, int, typing.MutableMapping]]":
        """Delete a custom symbol  # noqa: E501

        Delete a custom symbol  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            custom_symbol_id (str): customSymbolId to delete associated custom symbol

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(None, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.delete_custom_symbol_endpoint.call_with_http_info(**kwargs)


    def get_custom_symbol(
        self,
        custom_symbol_id,
        **kwargs
    ) -> CustomSymbolDto:
        """Get all custom field and standard field details on a specific custom symbol  # noqa: E501

        Get all custom field and standard field details on a specific custom symbol  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            custom_symbol_id (str): customSymbolId to get associated custom symbol

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            CustomSymbolDto
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.get_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def get_custom_symbol_with_http_info(
        self,
        custom_symbol_id,
        **kwargs
    ) -> typing.Tuple[CustomSymbolDto, int, typing.MutableMapping]:
        """Get all custom field and standard field details on a specific custom symbol  # noqa: E501

        Get all custom field and standard field details on a specific custom symbol  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            custom_symbol_id (str): customSymbolId to get associated custom symbol

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            CustomSymbolDto
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.get_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def get_custom_symbol_async(
        self,
        custom_symbol_id,
        **kwargs
    ) -> "ApplyResult[CustomSymbolDto]":
        """Get all custom field and standard field details on a specific custom symbol  # noqa: E501

        Get all custom field and standard field details on a specific custom symbol  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            custom_symbol_id (str): customSymbolId to get associated custom symbol

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[CustomSymbolDto]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.get_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def get_custom_symbol_with_http_info_async(
        self,
        custom_symbol_id,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[CustomSymbolDto, int, typing.MutableMapping]]":
        """Get all custom field and standard field details on a specific custom symbol  # noqa: E501

        Get all custom field and standard field details on a specific custom symbol  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            custom_symbol_id (str): customSymbolId to get associated custom symbol

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(CustomSymbolDto, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.get_custom_symbol_endpoint.call_with_http_info(**kwargs)


    def get_custom_symbol_records(
        self,
        custom_symbol_id,
        **kwargs
    ) -> typing.List[RecordPreviewDto]:
        """Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier  # noqa: E501

        Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            custom_symbol_id (str): CustomSymbolId to get associated records

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            typing.List[RecordPreviewDto]
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.get_custom_symbol_records_endpoint.call_with_http_info(**kwargs)

    def get_custom_symbol_records_with_http_info(
        self,
        custom_symbol_id,
        **kwargs
    ) -> typing.Tuple[typing.List[RecordPreviewDto], int, typing.MutableMapping]:
        """Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier  # noqa: E501

        Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            custom_symbol_id (str): CustomSymbolId to get associated records

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            typing.List[RecordPreviewDto]
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.get_custom_symbol_records_endpoint.call_with_http_info(**kwargs)

    def get_custom_symbol_records_async(
        self,
        custom_symbol_id,
        **kwargs
    ) -> "ApplyResult[typing.List[RecordPreviewDto]]":
        """Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier  # noqa: E501

        Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            custom_symbol_id (str): CustomSymbolId to get associated records

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[typing.List[RecordPreviewDto]]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.get_custom_symbol_records_endpoint.call_with_http_info(**kwargs)

    def get_custom_symbol_records_with_http_info_async(
        self,
        custom_symbol_id,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[typing.List[RecordPreviewDto], int, typing.MutableMapping]]":
        """Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier  # noqa: E501

        Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            custom_symbol_id (str): CustomSymbolId to get associated records

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(typing.List[RecordPreviewDto], int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.get_custom_symbol_records_endpoint.call_with_http_info(**kwargs)


    def get_custom_symbols(
        self,
        **kwargs
    ) -> typing.List[CustomSymbolDto]:
        """Get list of all custom symbols in your group along with some of their standard field and custom fields data  # noqa: E501

        Get list of all custom symbols in your group along with some of their standard field and custom fields data  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            type_name (str): filter custom symbols based on custom symbol type. [optional]
            query (str): filter custom symbols based on custom symbol code, name or linked factset entity's properties. [optional]
            include_custom_field_values (bool): Whether or not to include customFieldValues. [optional] if omitted the server will use the default value of False
            exclude_linked_custom_symbol (bool): Whether or not to exclude linked custom symbol. [optional] if omitted the server will use the default value of False
            modified_since (str): Only return Custom Symbols which have been modified or created since a particular time. [optional]
            job_id (str): Filter custom symbols based on custom symbol sync job. [optional]
            batch_job_id (str): Filter custom symbols based on rbl custom symbol job. [optional]
            include_deleted (bool): Whether or not to include deleted custom symbols. [optional] if omitted the server will use the default value of False
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            typing.List[CustomSymbolDto]
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.get_custom_symbols_endpoint.call_with_http_info(**kwargs)

    def get_custom_symbols_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[typing.List[CustomSymbolDto], int, typing.MutableMapping]:
        """Get list of all custom symbols in your group along with some of their standard field and custom fields data  # noqa: E501

        Get list of all custom symbols in your group along with some of their standard field and custom fields data  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            type_name (str): filter custom symbols based on custom symbol type. [optional]
            query (str): filter custom symbols based on custom symbol code, name or linked factset entity's properties. [optional]
            include_custom_field_values (bool): Whether or not to include customFieldValues. [optional] if omitted the server will use the default value of False
            exclude_linked_custom_symbol (bool): Whether or not to exclude linked custom symbol. [optional] if omitted the server will use the default value of False
            modified_since (str): Only return Custom Symbols which have been modified or created since a particular time. [optional]
            job_id (str): Filter custom symbols based on custom symbol sync job. [optional]
            batch_job_id (str): Filter custom symbols based on rbl custom symbol job. [optional]
            include_deleted (bool): Whether or not to include deleted custom symbols. [optional] if omitted the server will use the default value of False
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            typing.List[CustomSymbolDto]
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.get_custom_symbols_endpoint.call_with_http_info(**kwargs)

    def get_custom_symbols_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.List[CustomSymbolDto]]":
        """Get list of all custom symbols in your group along with some of their standard field and custom fields data  # noqa: E501

        Get list of all custom symbols in your group along with some of their standard field and custom fields data  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            type_name (str): filter custom symbols based on custom symbol type. [optional]
            query (str): filter custom symbols based on custom symbol code, name or linked factset entity's properties. [optional]
            include_custom_field_values (bool): Whether or not to include customFieldValues. [optional] if omitted the server will use the default value of False
            exclude_linked_custom_symbol (bool): Whether or not to exclude linked custom symbol. [optional] if omitted the server will use the default value of False
            modified_since (str): Only return Custom Symbols which have been modified or created since a particular time. [optional]
            job_id (str): Filter custom symbols based on custom symbol sync job. [optional]
            batch_job_id (str): Filter custom symbols based on rbl custom symbol job. [optional]
            include_deleted (bool): Whether or not to include deleted custom symbols. [optional] if omitted the server will use the default value of False
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[typing.List[CustomSymbolDto]]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.get_custom_symbols_endpoint.call_with_http_info(**kwargs)

    def get_custom_symbols_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[typing.List[CustomSymbolDto], int, typing.MutableMapping]]":
        """Get list of all custom symbols in your group along with some of their standard field and custom fields data  # noqa: E501

        Get list of all custom symbols in your group along with some of their standard field and custom fields data  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            type_name (str): filter custom symbols based on custom symbol type. [optional]
            query (str): filter custom symbols based on custom symbol code, name or linked factset entity's properties. [optional]
            include_custom_field_values (bool): Whether or not to include customFieldValues. [optional] if omitted the server will use the default value of False
            exclude_linked_custom_symbol (bool): Whether or not to exclude linked custom symbol. [optional] if omitted the server will use the default value of False
            modified_since (str): Only return Custom Symbols which have been modified or created since a particular time. [optional]
            job_id (str): Filter custom symbols based on custom symbol sync job. [optional]
            batch_job_id (str): Filter custom symbols based on rbl custom symbol job. [optional]
            include_deleted (bool): Whether or not to include deleted custom symbols. [optional] if omitted the server will use the default value of False
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(typing.List[CustomSymbolDto], int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.get_custom_symbols_endpoint.call_with_http_info(**kwargs)


    def link_custom_symbol_to_standard_symbol(
        self,
        custom_symbol_id,
        **kwargs
    ) -> None:
        """Link custom symbol to standard symbol  # noqa: E501

        Link custom symbol to standard symbol  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            custom_symbol_id (str): customSymbolId associated with custom symbol

        Keyword Args:
            standard_symbol_dto (StandardSymbolDto): standard symbol name. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            None
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.link_custom_symbol_to_standard_symbol_endpoint.call_with_http_info(**kwargs)

    def link_custom_symbol_to_standard_symbol_with_http_info(
        self,
        custom_symbol_id,
        **kwargs
    ) -> typing.Tuple[None, int, typing.MutableMapping]:
        """Link custom symbol to standard symbol  # noqa: E501

        Link custom symbol to standard symbol  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            custom_symbol_id (str): customSymbolId associated with custom symbol

        Keyword Args:
            standard_symbol_dto (StandardSymbolDto): standard symbol name. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            None
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.link_custom_symbol_to_standard_symbol_endpoint.call_with_http_info(**kwargs)

    def link_custom_symbol_to_standard_symbol_async(
        self,
        custom_symbol_id,
        **kwargs
    ) -> "ApplyResult[None]":
        """Link custom symbol to standard symbol  # noqa: E501

        Link custom symbol to standard symbol  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            custom_symbol_id (str): customSymbolId associated with custom symbol

        Keyword Args:
            standard_symbol_dto (StandardSymbolDto): standard symbol name. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[None]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.link_custom_symbol_to_standard_symbol_endpoint.call_with_http_info(**kwargs)

    def link_custom_symbol_to_standard_symbol_with_http_info_async(
        self,
        custom_symbol_id,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[None, int, typing.MutableMapping]]":
        """Link custom symbol to standard symbol  # noqa: E501

        Link custom symbol to standard symbol  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            custom_symbol_id (str): customSymbolId associated with custom symbol

        Keyword Args:
            standard_symbol_dto (StandardSymbolDto): standard symbol name. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(None, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.link_custom_symbol_to_standard_symbol_endpoint.call_with_http_info(**kwargs)


    def patch_custom_symbol(
        self,
        custom_symbol_id,
        **kwargs
    ) -> None:
        """Edit a custom symbol’s standard field and custom field data  # noqa: E501

        Edit a custom symbol’s standard field and custom field data  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            custom_symbol_id (str): customSymbolId to update associated custom symbol

        Keyword Args:
            operation ([Operation]): updateCustomSymbolDto object to update. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            None
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.patch_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def patch_custom_symbol_with_http_info(
        self,
        custom_symbol_id,
        **kwargs
    ) -> typing.Tuple[None, int, typing.MutableMapping]:
        """Edit a custom symbol’s standard field and custom field data  # noqa: E501

        Edit a custom symbol’s standard field and custom field data  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            custom_symbol_id (str): customSymbolId to update associated custom symbol

        Keyword Args:
            operation ([Operation]): updateCustomSymbolDto object to update. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            None
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.patch_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def patch_custom_symbol_async(
        self,
        custom_symbol_id,
        **kwargs
    ) -> "ApplyResult[None]":
        """Edit a custom symbol’s standard field and custom field data  # noqa: E501

        Edit a custom symbol’s standard field and custom field data  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            custom_symbol_id (str): customSymbolId to update associated custom symbol

        Keyword Args:
            operation ([Operation]): updateCustomSymbolDto object to update. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[None]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.patch_custom_symbol_endpoint.call_with_http_info(**kwargs)

    def patch_custom_symbol_with_http_info_async(
        self,
        custom_symbol_id,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[None, int, typing.MutableMapping]]":
        """Edit a custom symbol’s standard field and custom field data  # noqa: E501

        Edit a custom symbol’s standard field and custom field data  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            custom_symbol_id (str): customSymbolId to update associated custom symbol

        Keyword Args:
            operation ([Operation]): updateCustomSymbolDto object to update. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(None, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['custom_symbol_id'] = \
            custom_symbol_id
        return self.patch_custom_symbol_endpoint.call_with_http_info(**kwargs)


