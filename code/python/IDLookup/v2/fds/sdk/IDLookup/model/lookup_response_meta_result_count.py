"""
    ID Lookup API

    The ID Lookup API is a fuzzy search service that allows users to resolve symbols but are unable to find them elsewhere. The ID Lookup API allows users to search for entities in a wide variety of ways including, but not limited to, tickers, CUSIPs, URLs, a companyâ€™s brands, names and descriptions. The API does not require a complete query and will return different lists of results with each additional character, which enables users to iterate and adjust queries to return the desired results. Each search query returns a list of suggestions that can include every entity type offered by the API based on a matching and ranking algorithm.   The API response returns multiple different symbols that map to both internal FactSet identifiers like security or entity IDs as well as external identifiers like exchange tickers, Morningstar symbols and ISINs. This gives users flexibility in mapping identifiers across the FactSet universe.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.IDLookup.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.IDLookup.exceptions import ApiAttributeError



class LookupResponseMetaResultCount(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'equities': (int,),  # noqa: E501
            'equities_real_time': (int,),  # noqa: E501
            'bank_loans': (int,),  # noqa: E501
            'commodities': (int,),  # noqa: E501
            'cep_bonds': (int,),  # noqa: E501
            'countries': (int,),  # noqa: E501
            'deals': (int,),  # noqa: E501
            'economic_reports': (int,),  # noqa: E501
            'economic_series': (int,),  # noqa: E501
            'etfs': (int,),  # noqa: E501
            'etfs_real_time': (int,),  # noqa: E501
            'exchange_rates_real_time': (int,),  # noqa: E501
            'bonds': (int,),  # noqa: E501
            'forex': (int,),  # noqa: E501
            'futures': (int,),  # noqa: E501
            'indices': (int,),  # noqa: E501
            'indices_real_time': (int,),  # noqa: E501
            'industries': (int,),  # noqa: E501
            'markit_loans': (int,),  # noqa: E501
            'mutual_funds': (int,),  # noqa: E501
            'mutual_funds_real_time': (int,),  # noqa: E501
            'ownership_holders': (int,),  # noqa: E501
            'people': (int,),  # noqa: E501
            'private_companies': (int,),  # noqa: E501
            'pevc_firms': (int,),  # noqa: E501
            'pevc_funds': (int,),  # noqa: E501
            'regions': (int,),  # noqa: E501
            'yields': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'equities': 'equities',  # noqa: E501
        'equities_real_time': 'equitiesRealTime',  # noqa: E501
        'bank_loans': 'bankLoans',  # noqa: E501
        'commodities': 'commodities',  # noqa: E501
        'cep_bonds': 'cepBonds',  # noqa: E501
        'countries': 'countries',  # noqa: E501
        'deals': 'deals',  # noqa: E501
        'economic_reports': 'economicReports',  # noqa: E501
        'economic_series': 'economicSeries',  # noqa: E501
        'etfs': 'etfs',  # noqa: E501
        'etfs_real_time': 'etfsRealTime',  # noqa: E501
        'exchange_rates_real_time': 'exchangeRatesRealTime',  # noqa: E501
        'bonds': 'bonds',  # noqa: E501
        'forex': 'forex',  # noqa: E501
        'futures': 'futures',  # noqa: E501
        'indices': 'indices',  # noqa: E501
        'indices_real_time': 'indicesRealTime',  # noqa: E501
        'industries': 'industries',  # noqa: E501
        'markit_loans': 'markitLoans',  # noqa: E501
        'mutual_funds': 'mutualFunds',  # noqa: E501
        'mutual_funds_real_time': 'mutualFundsRealTime',  # noqa: E501
        'ownership_holders': 'ownershipHolders',  # noqa: E501
        'people': 'people',  # noqa: E501
        'private_companies': 'privateCompanies',  # noqa: E501
        'pevc_firms': 'pevcFirms',  # noqa: E501
        'pevc_funds': 'pevcFunds',  # noqa: E501
        'regions': 'regions',  # noqa: E501
        'yields': 'yields',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """LookupResponseMetaResultCount - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            equities (int): Number of equities.. [optional]  # noqa: E501
            equities_real_time (int): Number number of real-time equities.. [optional]  # noqa: E501
            bank_loans (int): Number of bank loans.. [optional]  # noqa: E501
            commodities (int): Number of commodities.. [optional]  # noqa: E501
            cep_bonds (int): Number of continuous evaluated pricing bonds.. [optional]  # noqa: E501
            countries (int): Number of countries.. [optional]  # noqa: E501
            deals (int): Number of deals.. [optional]  # noqa: E501
            economic_reports (int): Number of economic reports.. [optional]  # noqa: E501
            economic_series (int): Number of economic series.. [optional]  # noqa: E501
            etfs (int): Number of ETFs.. [optional]  # noqa: E501
            etfs_real_time (int): Number of real-time ETFs.. [optional]  # noqa: E501
            exchange_rates_real_time (int): Number of real-time exchange rates.. [optional]  # noqa: E501
            bonds (int): Number of bonds. [optional]  # noqa: E501
            forex (int): Number of foreign exchanges.. [optional]  # noqa: E501
            futures (int): Number of futures.. [optional]  # noqa: E501
            indices (int): Number of indices.. [optional]  # noqa: E501
            indices_real_time (int): Number of real-time indices.. [optional]  # noqa: E501
            industries (int): Number of industries.. [optional]  # noqa: E501
            markit_loans (int): Number of markit loans.. [optional]  # noqa: E501
            mutual_funds (int): Number of mutual funds.. [optional]  # noqa: E501
            mutual_funds_real_time (int): Number of real-time mutual funds.. [optional]  # noqa: E501
            ownership_holders (int): Number of ownership holders.. [optional]  # noqa: E501
            people (int): Number of people.. [optional]  # noqa: E501
            private_companies (int): Number of private companies.. [optional]  # noqa: E501
            pevc_firms (int): Number of private equity/venture capital firms.. [optional]  # noqa: E501
            pevc_funds (int): Number of private equity/venture capital funds.. [optional]  # noqa: E501
            regions (int): Number of regions.. [optional]  # noqa: E501
            yields (int): Number of yields.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """LookupResponseMetaResultCount - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            equities (int): Number of equities.. [optional]  # noqa: E501
            equities_real_time (int): Number number of real-time equities.. [optional]  # noqa: E501
            bank_loans (int): Number of bank loans.. [optional]  # noqa: E501
            commodities (int): Number of commodities.. [optional]  # noqa: E501
            cep_bonds (int): Number of continuous evaluated pricing bonds.. [optional]  # noqa: E501
            countries (int): Number of countries.. [optional]  # noqa: E501
            deals (int): Number of deals.. [optional]  # noqa: E501
            economic_reports (int): Number of economic reports.. [optional]  # noqa: E501
            economic_series (int): Number of economic series.. [optional]  # noqa: E501
            etfs (int): Number of ETFs.. [optional]  # noqa: E501
            etfs_real_time (int): Number of real-time ETFs.. [optional]  # noqa: E501
            exchange_rates_real_time (int): Number of real-time exchange rates.. [optional]  # noqa: E501
            bonds (int): Number of bonds. [optional]  # noqa: E501
            forex (int): Number of foreign exchanges.. [optional]  # noqa: E501
            futures (int): Number of futures.. [optional]  # noqa: E501
            indices (int): Number of indices.. [optional]  # noqa: E501
            indices_real_time (int): Number of real-time indices.. [optional]  # noqa: E501
            industries (int): Number of industries.. [optional]  # noqa: E501
            markit_loans (int): Number of markit loans.. [optional]  # noqa: E501
            mutual_funds (int): Number of mutual funds.. [optional]  # noqa: E501
            mutual_funds_real_time (int): Number of real-time mutual funds.. [optional]  # noqa: E501
            ownership_holders (int): Number of ownership holders.. [optional]  # noqa: E501
            people (int): Number of people.. [optional]  # noqa: E501
            private_companies (int): Number of private companies.. [optional]  # noqa: E501
            pevc_firms (int): Number of private equity/venture capital firms.. [optional]  # noqa: E501
            pevc_funds (int): Number of private equity/venture capital funds.. [optional]  # noqa: E501
            regions (int): Number of regions.. [optional]  # noqa: E501
            yields (int): Number of yields.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
