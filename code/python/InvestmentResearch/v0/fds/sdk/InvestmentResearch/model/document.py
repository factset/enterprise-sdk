"""
    Investment Research API

     The Investment Research API provides a comprehensive set of functionalities for searching and retrieving research reports and documents from various contributors.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  FactSet collects research reports and models from brokers, independent research providers, market research firms, rating agencies, and other publishers of research. These documents are processed and made available to clients within about two minutes of receipt.  FactSet delivers this content through two main products:  **FactSet Research Connect** – real-time research for investment managers entitled by the contributors to access the content.  **FactSet Aftermarket Research** – delayed research for investment bankers permitted by contributors to purchase the research.  The meta endpoints namely time-zones, categories, research-contributors, research-analysts, security-types and asset-types provide comprehensive lists of data that is used in the research endpoints.      # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.InvestmentResearch.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.InvestmentResearch.exceptions import ApiAttributeError



class Document(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'headline': (str,),  # noqa: E501
            'source': (str,),  # noqa: E501
            'primary_ids': ([str],),  # noqa: E501
            'all_ids': ([str],),  # noqa: E501
            'categories': ([str],),  # noqa: E501
            'story_date_time': (datetime,),  # noqa: E501
            'link': (str,),  # noqa: E501
            'contributor_name': (str,),  # noqa: E501
            'contributor_id': (int,),  # noqa: E501
            'analyst_name': ([str],),  # noqa: E501
            'analyst_id': ([int],),  # noqa: E501
            'pages': (int,),  # noqa: E501
            'document_id': (str,),  # noqa: E501
            'report_foci': ([str],),  # noqa: E501
            'asset_classes': ([str],),  # noqa: E501
            'asset_types': ([str],),  # noqa: E501
            'coverage_actions': ([str],),  # noqa: E501
            'compilation_indicators': (bool,),  # noqa: E501
            'disciplines': ([str],),  # noqa: E501
            'issuer_types': ([str],),  # noqa: E501
            'periodicities': ([str],),  # noqa: E501
            'purposes': ([str],),  # noqa: E501
            'rating_actions': ([str],),  # noqa: E501
            'research_approaches': ([str],),  # noqa: E501
            'security_types': ([str],),  # noqa: E501
            'target_actions': ([str],),  # noqa: E501
            'weighting_actions': ([str],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'headline': 'headline',  # noqa: E501
        'source': 'source',  # noqa: E501
        'primary_ids': 'primaryIds',  # noqa: E501
        'all_ids': 'allIds',  # noqa: E501
        'categories': 'categories',  # noqa: E501
        'story_date_time': 'storyDateTime',  # noqa: E501
        'link': 'link',  # noqa: E501
        'contributor_name': 'contributorName',  # noqa: E501
        'contributor_id': 'contributorId',  # noqa: E501
        'analyst_name': 'analystName',  # noqa: E501
        'analyst_id': 'analystId',  # noqa: E501
        'pages': 'pages',  # noqa: E501
        'document_id': 'documentId',  # noqa: E501
        'report_foci': 'reportFoci',  # noqa: E501
        'asset_classes': 'assetClasses',  # noqa: E501
        'asset_types': 'assetTypes',  # noqa: E501
        'coverage_actions': 'coverageActions',  # noqa: E501
        'compilation_indicators': 'compilationIndicators',  # noqa: E501
        'disciplines': 'disciplines',  # noqa: E501
        'issuer_types': 'issuerTypes',  # noqa: E501
        'periodicities': 'periodicities',  # noqa: E501
        'purposes': 'purposes',  # noqa: E501
        'rating_actions': 'ratingActions',  # noqa: E501
        'research_approaches': 'researchApproaches',  # noqa: E501
        'security_types': 'securityTypes',  # noqa: E501
        'target_actions': 'targetActions',  # noqa: E501
        'weighting_actions': 'weightingActions',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Document - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            headline (str): Concise title or summary of the research story or document.. [optional]  # noqa: E501
            source (str): Provides source of the document.  • FRC – FactSet Research Connect   • AMR – Aftermarket Research. [optional]  # noqa: E501
            primary_ids ([str]): Refers to the main company a particular document refers to.. [optional]  # noqa: E501
            all_ids ([str]): Refers to all companies mentioned in the document. This could also include the primary company id as well.. [optional]  # noqa: E501
            categories ([str]): Provides the category of the document, list is provided by the `/meta/categories` endpoint.. [optional]  # noqa: E501
            story_date_time (datetime): Publish date and time of the latest version, in RFC 3339 format (a subset of ISO 8601), e.g., 2024-07-03T14:00:00Z (UTC).. [optional]  # noqa: E501
            link (str): The link to download the document.. [optional]  # noqa: E501
            contributor_name (str): Research specific metadata providing the name of the research contributor.. [optional]  # noqa: E501
            contributor_id (int): Research specific metadata providing the ID of the research contributor.. [optional]  # noqa: E501
            analyst_name ([str]): Research specific metadata providing the name of the analyst(s) who wrote the research.. [optional]  # noqa: E501
            analyst_id ([int]): Research specific metadata providing the ID of the analyst(s) who wrote the research.. [optional]  # noqa: E501
            pages (int): Total number of pages in the document.. [optional]  # noqa: E501
            document_id (str): Unique identifier for a document.. [optional]  # noqa: E501
            report_foci ([str]): One or more classification codes indicating the primary focus of the document.. [optional]  # noqa: E501
            asset_classes ([str]): One or more codes indicating asset classes covered in the document.. [optional]  # noqa: E501
            asset_types ([str]): One or more codes indicating asset types.. [optional]  # noqa: E501
            coverage_actions ([str]): One or more codes indicating coverage actions.. [optional]  # noqa: E501
            compilation_indicators (bool): An indication of whether the document contains new material or is a compilation/summary of separately published material.. [optional]  # noqa: E501
            disciplines ([str]): One or more codes indicating the disciplines reflected in the document.. [optional]  # noqa: E501
            issuer_types ([str]): One or more codes indicating issuer types covered in the document.. [optional]  # noqa: E501
            periodicities ([str]): One or more codes indicating the fixed time interval at which the document is published.. [optional]  # noqa: E501
            purposes ([str]): One or more codes indicating the report purpose of the document.. [optional]  # noqa: E501
            rating_actions ([str]): One or more codes indicating rating actions discussed in the document.. [optional]  # noqa: E501
            research_approaches ([str]): One or more codes indicating the research perspective provided in the document.. [optional]  # noqa: E501
            security_types ([str]): One or more codes indicating security types.. [optional]  # noqa: E501
            target_actions ([str]): One or more codes indicating target price actions discussed in the document.. [optional]  # noqa: E501
            weighting_actions ([str]): One or more codes indicating weighting actions discussed in the document.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Document - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            headline (str): Concise title or summary of the research story or document.. [optional]  # noqa: E501
            source (str): Provides source of the document.  • FRC – FactSet Research Connect   • AMR – Aftermarket Research. [optional]  # noqa: E501
            primary_ids ([str]): Refers to the main company a particular document refers to.. [optional]  # noqa: E501
            all_ids ([str]): Refers to all companies mentioned in the document. This could also include the primary company id as well.. [optional]  # noqa: E501
            categories ([str]): Provides the category of the document, list is provided by the `/meta/categories` endpoint.. [optional]  # noqa: E501
            story_date_time (datetime): Publish date and time of the latest version, in RFC 3339 format (a subset of ISO 8601), e.g., 2024-07-03T14:00:00Z (UTC).. [optional]  # noqa: E501
            link (str): The link to download the document.. [optional]  # noqa: E501
            contributor_name (str): Research specific metadata providing the name of the research contributor.. [optional]  # noqa: E501
            contributor_id (int): Research specific metadata providing the ID of the research contributor.. [optional]  # noqa: E501
            analyst_name ([str]): Research specific metadata providing the name of the analyst(s) who wrote the research.. [optional]  # noqa: E501
            analyst_id ([int]): Research specific metadata providing the ID of the analyst(s) who wrote the research.. [optional]  # noqa: E501
            pages (int): Total number of pages in the document.. [optional]  # noqa: E501
            document_id (str): Unique identifier for a document.. [optional]  # noqa: E501
            report_foci ([str]): One or more classification codes indicating the primary focus of the document.. [optional]  # noqa: E501
            asset_classes ([str]): One or more codes indicating asset classes covered in the document.. [optional]  # noqa: E501
            asset_types ([str]): One or more codes indicating asset types.. [optional]  # noqa: E501
            coverage_actions ([str]): One or more codes indicating coverage actions.. [optional]  # noqa: E501
            compilation_indicators (bool): An indication of whether the document contains new material or is a compilation/summary of separately published material.. [optional]  # noqa: E501
            disciplines ([str]): One or more codes indicating the disciplines reflected in the document.. [optional]  # noqa: E501
            issuer_types ([str]): One or more codes indicating issuer types covered in the document.. [optional]  # noqa: E501
            periodicities ([str]): One or more codes indicating the fixed time interval at which the document is published.. [optional]  # noqa: E501
            purposes ([str]): One or more codes indicating the report purpose of the document.. [optional]  # noqa: E501
            rating_actions ([str]): One or more codes indicating rating actions discussed in the document.. [optional]  # noqa: E501
            research_approaches ([str]): One or more codes indicating the research perspective provided in the document.. [optional]  # noqa: E501
            security_types ([str]): One or more codes indicating security types.. [optional]  # noqa: E501
            target_actions ([str]): One or more codes indicating target price actions discussed in the document.. [optional]  # noqa: E501
            weighting_actions ([str]): One or more codes indicating weighting actions discussed in the document.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
