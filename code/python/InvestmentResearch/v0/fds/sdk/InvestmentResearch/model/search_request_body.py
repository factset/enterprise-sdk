"""
    Investment Research API

     The Investment Research API provides a comprehensive set of functionalities for searching and retrieving research reports and documents from various contributors.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  FactSet collects research reports and models from brokers, independent research providers, market research firms, rating agencies, and other publishers of research. These documents are processed and made available to clients within about two minutes of receipt.  FactSet delivers this content through two main products:  **FactSet Research Connect** – real-time research for investment managers entitled by the contributors to access the content.  **FactSet Aftermarket Research** – delayed research for investment bankers permitted by contributors to purchase the research.  The meta endpoints namely time-zones, categories, research-contributors, research-analysts, security-types and asset-types provide comprehensive lists of data that is used in the research endpoints.      # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.InvestmentResearch.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.InvestmentResearch.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.InvestmentResearch.model.analyst_id import AnalystId
    from fds.sdk.InvestmentResearch.model.asset_classes import AssetClasses
    from fds.sdk.InvestmentResearch.model.asset_types import AssetTypes
    from fds.sdk.InvestmentResearch.model.categories import Categories
    from fds.sdk.InvestmentResearch.model.contributor_id import ContributorId
    from fds.sdk.InvestmentResearch.model.coverage_actions import CoverageActions
    from fds.sdk.InvestmentResearch.model.disciplines import Disciplines
    from fds.sdk.InvestmentResearch.model.ids import Ids
    from fds.sdk.InvestmentResearch.model.issuer_types import IssuerTypes
    from fds.sdk.InvestmentResearch.model.periodicities import Periodicities
    from fds.sdk.InvestmentResearch.model.purposes import Purposes
    from fds.sdk.InvestmentResearch.model.rating_actions import RatingActions
    from fds.sdk.InvestmentResearch.model.report_foci import ReportFoci
    from fds.sdk.InvestmentResearch.model.research_approaches import ResearchApproaches
    from fds.sdk.InvestmentResearch.model.security_types import SecurityTypes
    from fds.sdk.InvestmentResearch.model.sources import Sources
    from fds.sdk.InvestmentResearch.model.target_actions import TargetActions
    from fds.sdk.InvestmentResearch.model.weighting_actions import WeightingActions
    globals()['AnalystId'] = AnalystId
    globals()['AssetClasses'] = AssetClasses
    globals()['AssetTypes'] = AssetTypes
    globals()['Categories'] = Categories
    globals()['ContributorId'] = ContributorId
    globals()['CoverageActions'] = CoverageActions
    globals()['Disciplines'] = Disciplines
    globals()['Ids'] = Ids
    globals()['IssuerTypes'] = IssuerTypes
    globals()['Periodicities'] = Periodicities
    globals()['Purposes'] = Purposes
    globals()['RatingActions'] = RatingActions
    globals()['ReportFoci'] = ReportFoci
    globals()['ResearchApproaches'] = ResearchApproaches
    globals()['SecurityTypes'] = SecurityTypes
    globals()['Sources'] = Sources
    globals()['TargetActions'] = TargetActions
    globals()['WeightingActions'] = WeightingActions


class SearchRequestBody(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'ids': (Ids,),  # noqa: E501
            'start_date': (date,),  # noqa: E501
            'end_date': (date,),  # noqa: E501
            'start_date_relative': (int,),  # noqa: E501
            'end_date_relative': (int,),  # noqa: E501
            'sources': (Sources,),  # noqa: E501
            'timezone': (str,),  # noqa: E501
            'categories': (Categories,),  # noqa: E501
            'primary_id': (bool,),  # noqa: E501
            'search_text': (str,),  # noqa: E501
            'contributor_id': (ContributorId,),  # noqa: E501
            'analyst_id': (AnalystId,),  # noqa: E501
            'report_foci': (ReportFoci,),  # noqa: E501
            'security_types': (SecurityTypes,),  # noqa: E501
            'asset_types': (AssetTypes,),  # noqa: E501
            'asset_classes': (AssetClasses,),  # noqa: E501
            'coverage_actions': (CoverageActions,),  # noqa: E501
            'compilation_indicators': (bool,),  # noqa: E501
            'disciplines': (Disciplines,),  # noqa: E501
            'issuer_types': (IssuerTypes,),  # noqa: E501
            'periodicities': (Periodicities,),  # noqa: E501
            'purposes': (Purposes,),  # noqa: E501
            'rating_actions': (RatingActions,),  # noqa: E501
            'research_approaches': (ResearchApproaches,),  # noqa: E501
            'target_actions': (TargetActions,),  # noqa: E501
            'weighting_actions': (WeightingActions,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'ids': 'ids',  # noqa: E501
        'start_date': 'startDate',  # noqa: E501
        'end_date': 'endDate',  # noqa: E501
        'start_date_relative': 'startDateRelative',  # noqa: E501
        'end_date_relative': 'endDateRelative',  # noqa: E501
        'sources': 'sources',  # noqa: E501
        'timezone': 'timezone',  # noqa: E501
        'categories': 'categories',  # noqa: E501
        'primary_id': 'primaryId',  # noqa: E501
        'search_text': 'searchText',  # noqa: E501
        'contributor_id': 'contributorId',  # noqa: E501
        'analyst_id': 'analystId',  # noqa: E501
        'report_foci': 'reportFoci',  # noqa: E501
        'security_types': 'securityTypes',  # noqa: E501
        'asset_types': 'assetTypes',  # noqa: E501
        'asset_classes': 'assetClasses',  # noqa: E501
        'coverage_actions': 'coverageActions',  # noqa: E501
        'compilation_indicators': 'compilationIndicators',  # noqa: E501
        'disciplines': 'disciplines',  # noqa: E501
        'issuer_types': 'issuerTypes',  # noqa: E501
        'periodicities': 'periodicities',  # noqa: E501
        'purposes': 'purposes',  # noqa: E501
        'rating_actions': 'ratingActions',  # noqa: E501
        'research_approaches': 'researchApproaches',  # noqa: E501
        'target_actions': 'targetActions',  # noqa: E501
        'weighting_actions': 'weightingActions',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, ids, *args, **kwargs):  # noqa: E501
        """SearchRequestBody - a model defined in OpenAPI

        Args:
            ids (Ids):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            start_date (date): Start Date. Format is YYYY-MM-DD. If the parameter is not provided, will return the today's results. . [optional]  # noqa: E501
            end_date (date): End Date. Format is YYYY-MM-DD. If the parameter is not provided, will return the today's results. . [optional]  # noqa: E501
            start_date_relative (int): The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.   - *Either `startDate` or `startDateRelative` should be used, but not both.* - *If both `startDate` and `startDateRelative` are provided in the same request, the API will return an error.* - *If users provide future dates in requests for `startDate` or `startDateRelative`, the API will not return any data.* . [optional]  # noqa: E501
            end_date_relative (int): The latest date of the feed file the API should fetch based on the file timestamp.   Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.  - Either `endDate` or `endDateRelative` should be used, but not both. - If both `endDate` and `endDateRelative` are provided in the same request, the API will return an error. - If users provide future dates in requests for `endDate` or `endDateRelative`, the API will not return any data. . [optional]  # noqa: E501
            sources (Sources): [optional]  # noqa: E501
            timezone (str): Returns a list of all time zones supported by the API, formatted in POSIX style (e.g., `America/New_York`, `Africa/Malabo`). These time zones are automatically adjusted for daylight saving time where applicable. This list is used for setting or converting story dates and times accurately across different regions.. [optional] if omitted the server will use the default value of "America/New_York"  # noqa: E501
            categories (Categories): [optional]  # noqa: E501
            primary_id (bool): Type of identifier search — set to true to search by primary identifier.. [optional] if omitted the server will use the default value of False  # noqa: E501
            search_text (str): Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. . [optional]  # noqa: E501
            contributor_id (ContributorId): [optional]  # noqa: E501
            analyst_id (AnalystId): [optional]  # noqa: E501
            report_foci (ReportFoci): [optional]  # noqa: E501
            security_types (SecurityTypes): [optional]  # noqa: E501
            asset_types (AssetTypes): [optional]  # noqa: E501
            asset_classes (AssetClasses): [optional]  # noqa: E501
            coverage_actions (CoverageActions): [optional]  # noqa: E501
            compilation_indicators (bool): An indication of whether the document contains new material or is a compilation/summary of separately published material. If this parameter is not used, it will not return whether the record in the result has complilation indicator or not.    . [optional]  # noqa: E501
            disciplines (Disciplines): [optional]  # noqa: E501
            issuer_types (IssuerTypes): [optional]  # noqa: E501
            periodicities (Periodicities): [optional]  # noqa: E501
            purposes (Purposes): [optional]  # noqa: E501
            rating_actions (RatingActions): [optional]  # noqa: E501
            research_approaches (ResearchApproaches): [optional]  # noqa: E501
            target_actions (TargetActions): [optional]  # noqa: E501
            weighting_actions (WeightingActions): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.ids = ids
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, ids, *args, **kwargs):  # noqa: E501
        """SearchRequestBody - a model defined in OpenAPI

        Args:
            ids (Ids):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            start_date (date): Start Date. Format is YYYY-MM-DD. If the parameter is not provided, will return the today's results. . [optional]  # noqa: E501
            end_date (date): End Date. Format is YYYY-MM-DD. If the parameter is not provided, will return the today's results. . [optional]  # noqa: E501
            start_date_relative (int): The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.   - *Either `startDate` or `startDateRelative` should be used, but not both.* - *If both `startDate` and `startDateRelative` are provided in the same request, the API will return an error.* - *If users provide future dates in requests for `startDate` or `startDateRelative`, the API will not return any data.* . [optional]  # noqa: E501
            end_date_relative (int): The latest date of the feed file the API should fetch based on the file timestamp.   Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.  - Either `endDate` or `endDateRelative` should be used, but not both. - If both `endDate` and `endDateRelative` are provided in the same request, the API will return an error. - If users provide future dates in requests for `endDate` or `endDateRelative`, the API will not return any data. . [optional]  # noqa: E501
            sources (Sources): [optional]  # noqa: E501
            timezone (str): Returns a list of all time zones supported by the API, formatted in POSIX style (e.g., `America/New_York`, `Africa/Malabo`). These time zones are automatically adjusted for daylight saving time where applicable. This list is used for setting or converting story dates and times accurately across different regions.. [optional] if omitted the server will use the default value of "America/New_York"  # noqa: E501
            categories (Categories): [optional]  # noqa: E501
            primary_id (bool): Type of identifier search — set to true to search by primary identifier.. [optional] if omitted the server will use the default value of False  # noqa: E501
            search_text (str): Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. . [optional]  # noqa: E501
            contributor_id (ContributorId): [optional]  # noqa: E501
            analyst_id (AnalystId): [optional]  # noqa: E501
            report_foci (ReportFoci): [optional]  # noqa: E501
            security_types (SecurityTypes): [optional]  # noqa: E501
            asset_types (AssetTypes): [optional]  # noqa: E501
            asset_classes (AssetClasses): [optional]  # noqa: E501
            coverage_actions (CoverageActions): [optional]  # noqa: E501
            compilation_indicators (bool): An indication of whether the document contains new material or is a compilation/summary of separately published material. If this parameter is not used, it will not return whether the record in the result has complilation indicator or not.    . [optional]  # noqa: E501
            disciplines (Disciplines): [optional]  # noqa: E501
            issuer_types (IssuerTypes): [optional]  # noqa: E501
            periodicities (Periodicities): [optional]  # noqa: E501
            purposes (Purposes): [optional]  # noqa: E501
            rating_actions (RatingActions): [optional]  # noqa: E501
            research_approaches (ResearchApproaches): [optional]  # noqa: E501
            target_actions (TargetActions): [optional]  # noqa: E501
            weighting_actions (WeightingActions): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.ids = ids
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
