"""
    FactSet Estimates

    With global coverage since 1999, the FactSet Estimates API provides you with comprehensive estimates and statistics on a wide variety of financial statement items as well as industry-specific metrics. The universe is comprised of over 19,000 active companies across 90+ countries with the following types of data included:   - **Consensus** - **Detail** - **Ratings** - **Surprise** - **Segments** - **Actuals** - **Guidance** - **New Estimates and Ratings Reports Endpoints**  For clients seeking  curated and relevant financial data, the FactSet Estimates API now includes Estimates and Ratings Reports endpoints. These powerful endpoints are designed for easy integration and consumption, delivering a wide array of financial metrics, estimates, and critical statistics in a highly accessible format suitable for both mobile and web applications.   Whether you are an analyst, investor, or financial professional, the Estimates and Ratings Reports endpoints offer detailed and actionable financial insights that can support thorough analyses and strategic decision-making processes.   The Estimates and Ratings Reports endpoints are especially valuable for B2B2C  applications, empowering financial services firms, investment companies, and corporate finance teams to:   - **Elevate Client Engagement:** Enrich user experiences in client-facing applications with comprehensive and up-to-date financial metrics.  - **Build Custom Reporting Tools:** Create tailored dashboards and analytics tools that provide deep insights and foster better financial understanding.  By adopting the FactSet Estimates API with its enriched Estimates and Ratings Reports endpoints, businesses can streamline their financial data integration process, improve operational efficiency, and deliver superior financial insights to their clients and end-users.     <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>  **Download API Specification**        To programmatically download the FactSet Estimates API Specification file in .yaml format, utilize the link below. You must be authorized for this API to extract the specification. This specification can then be used for Codegen to create your own SDKs. You can also access it by selecting the \"Download Spec\" button beside the version information.      [https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml](https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml)   # noqa: E501

    The version of the OpenAPI document: 2.8.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.FactSetEstimates.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.FactSetEstimates.exceptions import ApiAttributeError



class Guidance(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'request_id': (str,),  # noqa: E501
            'fsym_id': (str, none_type,),  # noqa: E501
            'metric': (str, none_type,),  # noqa: E501
            'currency': (str, none_type,),  # noqa: E501
            'estimate_currency': (str, none_type,),  # noqa: E501
            'periodicity': (str, none_type,),  # noqa: E501
            'consensus_date': (date, none_type,),  # noqa: E501
            'fiscal_year': (int, none_type,),  # noqa: E501
            'fiscal_end_date': (date, none_type,),  # noqa: E501
            'relative_period': (int, none_type,),  # noqa: E501
            'fiscal_period': (int, none_type,),  # noqa: E501
            'guidance_date': (date, none_type,),  # noqa: E501
            'guidance_midpoint': (float, none_type,),  # noqa: E501
            'guidance_low': (float, none_type,),  # noqa: E501
            'guidance_high': (float, none_type,),  # noqa: E501
            'guidance_range': (str, none_type,),  # noqa: E501
            'prev_midpoint': (float, none_type,),  # noqa: E501
            'prev_low': (float,),  # noqa: E501
            'prev_high': (float, none_type,),  # noqa: E501
            'mean_before': (float, none_type,),  # noqa: E501
            'mean_surprise_amt': (float, none_type,),  # noqa: E501
            'mean_surprise_amt_percent': (float, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'request_id': 'requestId',  # noqa: E501
        'fsym_id': 'fsymId',  # noqa: E501
        'metric': 'metric',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'estimate_currency': 'estimateCurrency',  # noqa: E501
        'periodicity': 'periodicity',  # noqa: E501
        'consensus_date': 'consensusDate',  # noqa: E501
        'fiscal_year': 'fiscalYear',  # noqa: E501
        'fiscal_end_date': 'fiscalEndDate',  # noqa: E501
        'relative_period': 'relativePeriod',  # noqa: E501
        'fiscal_period': 'fiscalPeriod',  # noqa: E501
        'guidance_date': 'guidanceDate',  # noqa: E501
        'guidance_midpoint': 'guidanceMidpoint',  # noqa: E501
        'guidance_low': 'guidanceLow',  # noqa: E501
        'guidance_high': 'guidanceHigh',  # noqa: E501
        'guidance_range': 'guidanceRange',  # noqa: E501
        'prev_midpoint': 'prevMidpoint',  # noqa: E501
        'prev_low': 'prevLow',  # noqa: E501
        'prev_high': 'prevHigh',  # noqa: E501
        'mean_before': 'meanBefore',  # noqa: E501
        'mean_surprise_amt': 'meanSurpriseAmt',  # noqa: E501
        'mean_surprise_amt_percent': 'meanSurpriseAmtPercent',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Guidance - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            request_id (str): Guidance identifier to be used as `guidance` input in the endpoint.. [optional]  # noqa: E501
            fsym_id (str, none_type): FactSet regional security identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.. [optional]  # noqa: E501
            metric (str, none_type): Company's Financial statement 'metric' that is estimated. Use the factset-estimates/v#/metrics endpoint for a complete list. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034). [optional]  # noqa: E501
            currency (str, none_type): Currency code for adjusting the data. Use 'ESTIMATE' as input value for the values in Estimate Currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).. [optional]  # noqa: E501
            estimate_currency (str, none_type): Estimate currency of the requested Security. [optional]  # noqa: E501
            periodicity (str, none_type): The reporting interval for the estimate. This is derived from Estimate Date and is translated to the Period List = ANN, QTR, SEMI, LTMA, or NMTA.. [optional]  # noqa: E501
            consensus_date (date, none_type): The perspective date representing the current consensus among analysts as of today, visit [Online Assistant Page. [optional]  # noqa: E501
            fiscal_year (int, none_type): Company's 'fiscal year' for the estimate record. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598). [optional]  # noqa: E501
            fiscal_end_date (date, none_type): Company's 'fiscal end date' for the estimate record expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598). [optional]  # noqa: E501
            relative_period (int, none_type): 'Fiscal period' based on relationship to 'estimate date'. This is not applicable for fixed-consensus endpoint. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598). [optional]  # noqa: E501
            fiscal_period (int, none_type): Company's 'fiscal period' for the estimate record.  'Periodicity' defines context for period.. [optional]  # noqa: E501
            guidance_date (date, none_type): Date guidance was issued expressed in YYYY-MM-DD format.. [optional]  # noqa: E501
            guidance_midpoint (float, none_type):  Represents the central value in a range of projected financial guidance.. [optional]  # noqa: E501
            guidance_low (float, none_type): Represents the lower end of the projected financial guidance range.. [optional]  # noqa: E501
            guidance_high (float, none_type): Represents the upper end of the projected financial guidance range.. [optional]  # noqa: E501
            guidance_range (str, none_type): Represents the span between the lowest and highest values in the projected financial guidance.. [optional]  # noqa: E501
            prev_midpoint (float, none_type): This refers to the average or central point of the financial guidance range given in a prior period.. [optional]  # noqa: E501
            prev_low (float): Refers to the lowest value or estimate in a financial guidance range provided in a previous period.. [optional]  # noqa: E501
            prev_high (float, none_type): Refers to the highest value or estimate in a financial guidance range provided in a previous period.. [optional]  # noqa: E501
            mean_before (float, none_type): This is the consensus value the day before the guidance was issued. If guidance was previously issued for the period in question, this consensus will only include estimates that have been updated since the previous update.. [optional]  # noqa: E501
            mean_surprise_amt (float, none_type):  This is the difference between the before value and the guidance.. [optional]  # noqa: E501
            mean_surprise_amt_percent (float, none_type): This represents the percentage difference between the before value and the guidance actual.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Guidance - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            request_id (str): Guidance identifier to be used as `guidance` input in the endpoint.. [optional]  # noqa: E501
            fsym_id (str, none_type): FactSet regional security identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.. [optional]  # noqa: E501
            metric (str, none_type): Company's Financial statement 'metric' that is estimated. Use the factset-estimates/v#/metrics endpoint for a complete list. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034). [optional]  # noqa: E501
            currency (str, none_type): Currency code for adjusting the data. Use 'ESTIMATE' as input value for the values in Estimate Currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).. [optional]  # noqa: E501
            estimate_currency (str, none_type): Estimate currency of the requested Security. [optional]  # noqa: E501
            periodicity (str, none_type): The reporting interval for the estimate. This is derived from Estimate Date and is translated to the Period List = ANN, QTR, SEMI, LTMA, or NMTA.. [optional]  # noqa: E501
            consensus_date (date, none_type): The perspective date representing the current consensus among analysts as of today, visit [Online Assistant Page. [optional]  # noqa: E501
            fiscal_year (int, none_type): Company's 'fiscal year' for the estimate record. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598). [optional]  # noqa: E501
            fiscal_end_date (date, none_type): Company's 'fiscal end date' for the estimate record expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598). [optional]  # noqa: E501
            relative_period (int, none_type): 'Fiscal period' based on relationship to 'estimate date'. This is not applicable for fixed-consensus endpoint. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598). [optional]  # noqa: E501
            fiscal_period (int, none_type): Company's 'fiscal period' for the estimate record.  'Periodicity' defines context for period.. [optional]  # noqa: E501
            guidance_date (date, none_type): Date guidance was issued expressed in YYYY-MM-DD format.. [optional]  # noqa: E501
            guidance_midpoint (float, none_type):  Represents the central value in a range of projected financial guidance.. [optional]  # noqa: E501
            guidance_low (float, none_type): Represents the lower end of the projected financial guidance range.. [optional]  # noqa: E501
            guidance_high (float, none_type): Represents the upper end of the projected financial guidance range.. [optional]  # noqa: E501
            guidance_range (str, none_type): Represents the span between the lowest and highest values in the projected financial guidance.. [optional]  # noqa: E501
            prev_midpoint (float, none_type): This refers to the average or central point of the financial guidance range given in a prior period.. [optional]  # noqa: E501
            prev_low (float): Refers to the lowest value or estimate in a financial guidance range provided in a previous period.. [optional]  # noqa: E501
            prev_high (float, none_type): Refers to the highest value or estimate in a financial guidance range provided in a previous period.. [optional]  # noqa: E501
            mean_before (float, none_type): This is the consensus value the day before the guidance was issued. If guidance was previously issued for the period in question, this consensus will only include estimates that have been updated since the previous update.. [optional]  # noqa: E501
            mean_surprise_amt (float, none_type):  This is the difference between the before value and the guidance.. [optional]  # noqa: E501
            mean_surprise_amt_percent (float, none_type): This represents the percentage difference between the before value and the guidance actual.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
