"""
    Events and Transcripts API

    <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p>   # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
from multiprocessing.pool import ApplyResult
import typing

from fds.sdk.EventsandTranscripts.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.EventsandTranscripts.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.EventsandTranscripts.exceptions import ApiException
from fds.sdk.EventsandTranscripts.model.error import Error
from fds.sdk.EventsandTranscripts.model.investor_slides_response import InvestorSlidesResponse
from fds.sdk.EventsandTranscripts.model.response_type import ResponseType
from fds.sdk.EventsandTranscripts.model.transcripts_collection import TranscriptsCollection
from fds.sdk.EventsandTranscripts.model.transcripts_intelligence_response import TranscriptsIntelligenceResponse
from fds.sdk.EventsandTranscripts.model.transcripts_request import TranscriptsRequest
from fds.sdk.EventsandTranscripts.model.transcripts_response import TranscriptsResponse





class TranscriptsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.get_transcripts_intelligence_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (TranscriptsIntelligenceResponse,), 400: (Error,), 401: (Error,), 403: (Error,), 500: (Error,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/transcripts/intelligence',
                'operation_id': 'get_transcripts_intelligence',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'start_date',
                    'end_date',
                    'start_date_relative',
                    'end_date_relative',
                    'categories',
                    'time_zone',
                    'sort',
                    'pagination_limit',
                    'pagination_offset',
                ],
                'required': [
                    'ids',
                ],
                'nullable': [
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'ids',
                    'start_date_relative',
                    'end_date_relative',
                    'sort',
                ]
            },
            root_map={
                'validations': {
                    ('ids',): {

                        'max_items': 1000,
                    },
                    ('start_date_relative',): {

                        'inclusive_maximum': 0,
                    },
                    ('end_date_relative',): {

                        'inclusive_maximum': 0,
                    },
                    ('sort',): {

                        'max_items': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {

                        "STORYDATETIME": "storyDateTime",
                        "-STORYDATETIME": "-storyDateTime"
                    },
                },
                'openapi_types': {
                    'ids':
                        ([str],),
                    'start_date':
                        (date,),
                    'end_date':
                        (date,),
                    'start_date_relative':
                        (int,),
                    'end_date_relative':
                        (int,),
                    'categories':
                        ([str],),
                    'time_zone':
                        (str,),
                    'sort':
                        ([str],),
                    'pagination_limit':
                        (int,),
                    'pagination_offset':
                        (int,),
                },
                'attribute_map': {
                    'ids': 'ids',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'start_date_relative': 'startDateRelative',
                    'end_date_relative': 'endDateRelative',
                    'categories': 'categories',
                    'time_zone': 'timeZone',
                    'sort': '_sort',
                    'pagination_limit': '_paginationLimit',
                    'pagination_offset': '_paginationOffset',
                },
                'location_map': {
                    'ids': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'start_date_relative': 'query',
                    'end_date_relative': 'query',
                    'categories': 'query',
                    'time_zone': 'query',
                    'sort': 'query',
                    'pagination_limit': 'query',
                    'pagination_offset': 'query',
                },
                'collection_format_map': {
                    'ids': 'csv',
                    'categories': 'multi',
                    'sort': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.get_transcripts_investor_slides_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (InvestorSlidesResponse,), 400: (Error,), 401: (Error,), 403: (Error,), 500: (Error,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/transcripts/investor-slides',
                'operation_id': 'get_transcripts_investor_slides',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'start_date',
                    'end_date',
                    'event_ids',
                    'categories',
                    'search_text',
                    'sort',
                    'pagination_limit',
                    'pagination_offset',
                ],
                'required': [
                    'ids',
                    'start_date',
                    'end_date',
                ],
                'nullable': [
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'ids',
                    'event_ids',
                    'sort',
                ]
            },
            root_map={
                'validations': {
                    ('ids',): {

                        'max_items': 1000,
                    },
                    ('event_ids',): {

                        'max_items': 1000,
                    },
                    ('sort',): {

                        'max_items': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {

                        "STORYDATETIME": "storyDateTime",
                        "-STORYDATETIME": "-storyDateTime"
                    },
                },
                'openapi_types': {
                    'ids':
                        ([str],),
                    'start_date':
                        (date,),
                    'end_date':
                        (date,),
                    'event_ids':
                        ([str],),
                    'categories':
                        ([str],),
                    'search_text':
                        (str,),
                    'sort':
                        ([str],),
                    'pagination_limit':
                        (int,),
                    'pagination_offset':
                        (int,),
                },
                'attribute_map': {
                    'ids': 'ids',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'event_ids': 'eventIds',
                    'categories': 'categories',
                    'search_text': 'searchText',
                    'sort': '_sort',
                    'pagination_limit': '_paginationLimit',
                    'pagination_offset': '_paginationOffset',
                },
                'location_map': {
                    'ids': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'event_ids': 'query',
                    'categories': 'query',
                    'search_text': 'query',
                    'sort': 'query',
                    'pagination_limit': 'query',
                    'pagination_offset': 'query',
                },
                'collection_format_map': {
                    'ids': 'csv',
                    'event_ids': 'csv',
                    'categories': 'multi',
                    'sort': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.get_transcriptsin_xml_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (ResponseType,), 400: (Error,), 401: (Error,), 403: (Error,), 500: (Error,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/transcripts/response-type',
                'operation_id': 'get_transcriptsin_xml',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'report_ids',
                    'format',
                    'pagination_limit',
                    'pagination_offset',
                ],
                'required': [
                    'report_ids',
                    'format',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                    'report_ids',
                ]
            },
            root_map={
                'validations': {
                    ('report_ids',): {

                        'max_items': 1000,
                    },
                },
                'allowed_values': {
                    ('format',): {

                        "XML": "XML",
                        "PDF": "PDF",
                        "DOCVIEWER": "DocViewer",
                        "CONTENTXML": "ContentXML"
                    },
                },
                'openapi_types': {
                    'report_ids':
                        ([str],),
                    'format':
                        (str,),
                    'pagination_limit':
                        (int,),
                    'pagination_offset':
                        (int,),
                },
                'attribute_map': {
                    'report_ids': 'reportIds',
                    'format': 'format',
                    'pagination_limit': '_paginationLimit',
                    'pagination_offset': '_paginationOffset',
                },
                'location_map': {
                    'report_ids': 'query',
                    'format': 'query',
                    'pagination_limit': 'query',
                    'pagination_offset': 'query',
                },
                'collection_format_map': {
                    'report_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.search_transcripts_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (TranscriptsResponse,), 400: (Error,), 401: (Error,), 403: (Error,), 500: (Error,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/transcripts',
                'operation_id': 'search_transcripts',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transcripts_request',
                ],
                'required': [
                    'transcripts_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transcripts_request':
                        (TranscriptsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transcripts_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )


    @staticmethod
    def apply_kwargs_defaults(kwargs, return_http_data_only, async_req):
        kwargs["async_req"] = async_req
        kwargs["_return_http_data_only"] = return_http_data_only
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")


    def get_transcripts_intelligence(
        self,
        ids,
        **kwargs
    ) -> TranscriptsIntelligenceResponse:
        """Returns the StreetAccount Transcript Intelligence documents and related metadata within FactSet coverage based on specific date range and various parameters.  # noqa: E501

        Returns the StreetAccount Transcript Intelligence documents within FactSet coverage along with other response fields.  All StreetAccount Transcript Intelligence stories originate from StreetAccount   # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            ids ([str]): Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID

        Keyword Args:
            start_date (date): Start Date (YYYY-MM-DD). . [optional]
            end_date (date): End Date (YYYY-MM-DD). . [optional]
            start_date_relative (int): The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `startDate` or `startDateRelative` should be used, but not both.* . [optional]
            end_date_relative (int): The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `endDate` or `endDateRelative` should be used, but not both.* . [optional]
            categories ([str]): Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  . [optional]
            time_zone (str): Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the `/meta/time-zones` endpoint to get the list of available time zones.. [optional] if omitted the server will use the default value of "America/New_York"
            sort ([str]): Enables sorting data in ascending or descending chronological order based on eventDate. . [optional] if omitted the server will use the default value of ["-storyDateTime"]
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            TranscriptsIntelligenceResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['ids'] = \
            ids
        return self.get_transcripts_intelligence_endpoint.call_with_http_info(**kwargs)

    def get_transcripts_intelligence_with_http_info(
        self,
        ids,
        **kwargs
    ) -> typing.Tuple[TranscriptsIntelligenceResponse, int, typing.MutableMapping]:
        """Returns the StreetAccount Transcript Intelligence documents and related metadata within FactSet coverage based on specific date range and various parameters.  # noqa: E501

        Returns the StreetAccount Transcript Intelligence documents within FactSet coverage along with other response fields.  All StreetAccount Transcript Intelligence stories originate from StreetAccount   # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            ids ([str]): Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID

        Keyword Args:
            start_date (date): Start Date (YYYY-MM-DD). . [optional]
            end_date (date): End Date (YYYY-MM-DD). . [optional]
            start_date_relative (int): The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `startDate` or `startDateRelative` should be used, but not both.* . [optional]
            end_date_relative (int): The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `endDate` or `endDateRelative` should be used, but not both.* . [optional]
            categories ([str]): Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  . [optional]
            time_zone (str): Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the `/meta/time-zones` endpoint to get the list of available time zones.. [optional] if omitted the server will use the default value of "America/New_York"
            sort ([str]): Enables sorting data in ascending or descending chronological order based on eventDate. . [optional] if omitted the server will use the default value of ["-storyDateTime"]
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            TranscriptsIntelligenceResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['ids'] = \
            ids
        return self.get_transcripts_intelligence_endpoint.call_with_http_info(**kwargs)

    def get_transcripts_intelligence_async(
        self,
        ids,
        **kwargs
    ) -> "ApplyResult[TranscriptsIntelligenceResponse]":
        """Returns the StreetAccount Transcript Intelligence documents and related metadata within FactSet coverage based on specific date range and various parameters.  # noqa: E501

        Returns the StreetAccount Transcript Intelligence documents within FactSet coverage along with other response fields.  All StreetAccount Transcript Intelligence stories originate from StreetAccount   # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            ids ([str]): Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID

        Keyword Args:
            start_date (date): Start Date (YYYY-MM-DD). . [optional]
            end_date (date): End Date (YYYY-MM-DD). . [optional]
            start_date_relative (int): The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `startDate` or `startDateRelative` should be used, but not both.* . [optional]
            end_date_relative (int): The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `endDate` or `endDateRelative` should be used, but not both.* . [optional]
            categories ([str]): Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  . [optional]
            time_zone (str): Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the `/meta/time-zones` endpoint to get the list of available time zones.. [optional] if omitted the server will use the default value of "America/New_York"
            sort ([str]): Enables sorting data in ascending or descending chronological order based on eventDate. . [optional] if omitted the server will use the default value of ["-storyDateTime"]
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[TranscriptsIntelligenceResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['ids'] = \
            ids
        return self.get_transcripts_intelligence_endpoint.call_with_http_info(**kwargs)

    def get_transcripts_intelligence_with_http_info_async(
        self,
        ids,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[TranscriptsIntelligenceResponse, int, typing.MutableMapping]]":
        """Returns the StreetAccount Transcript Intelligence documents and related metadata within FactSet coverage based on specific date range and various parameters.  # noqa: E501

        Returns the StreetAccount Transcript Intelligence documents within FactSet coverage along with other response fields.  All StreetAccount Transcript Intelligence stories originate from StreetAccount   # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            ids ([str]): Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID

        Keyword Args:
            start_date (date): Start Date (YYYY-MM-DD). . [optional]
            end_date (date): End Date (YYYY-MM-DD). . [optional]
            start_date_relative (int): The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `startDate` or `startDateRelative` should be used, but not both.* . [optional]
            end_date_relative (int): The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `endDate` or `endDateRelative` should be used, but not both.* . [optional]
            categories ([str]): Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  . [optional]
            time_zone (str): Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the `/meta/time-zones` endpoint to get the list of available time zones.. [optional] if omitted the server will use the default value of "America/New_York"
            sort ([str]): Enables sorting data in ascending or descending chronological order based on eventDate. . [optional] if omitted the server will use the default value of ["-storyDateTime"]
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(TranscriptsIntelligenceResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['ids'] = \
            ids
        return self.get_transcripts_intelligence_endpoint.call_with_http_info(**kwargs)


    def get_transcripts_investor_slides(
        self,
        ids,
        start_date,
        end_date,
        **kwargs
    ) -> InvestorSlidesResponse:
        """Returns the investor slides in PDF format and related metadata within FactSet coverage based on specific date range and various parameters.  # noqa: E501

        Returns the Factset Callstreet Investor Slides documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Investor Slides.   # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            ids ([str]): Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
            start_date (date): Start Date. Format is YYYY-MM-DD    **The API supports data from 1995 onwards. Ensure that the provided Date falls within this range for accurate results.** 
            end_date (date): End Date. Format is YYYY-MM-DD.

        Keyword Args:
            event_ids ([str]): Requests Event IDs. This is a list with a maximum limit of 1000.. [optional]
            categories ([str]): Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  . [optional]
            search_text (str): Restricts the search to include only document stories which include the text searched.    . [optional]
            sort ([str]): Enables sorting data in ascending or descending chronological order based on eventDate. . [optional] if omitted the server will use the default value of ["-storyDateTime"]
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InvestorSlidesResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['ids'] = \
            ids
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        return self.get_transcripts_investor_slides_endpoint.call_with_http_info(**kwargs)

    def get_transcripts_investor_slides_with_http_info(
        self,
        ids,
        start_date,
        end_date,
        **kwargs
    ) -> typing.Tuple[InvestorSlidesResponse, int, typing.MutableMapping]:
        """Returns the investor slides in PDF format and related metadata within FactSet coverage based on specific date range and various parameters.  # noqa: E501

        Returns the Factset Callstreet Investor Slides documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Investor Slides.   # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            ids ([str]): Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
            start_date (date): Start Date. Format is YYYY-MM-DD    **The API supports data from 1995 onwards. Ensure that the provided Date falls within this range for accurate results.** 
            end_date (date): End Date. Format is YYYY-MM-DD.

        Keyword Args:
            event_ids ([str]): Requests Event IDs. This is a list with a maximum limit of 1000.. [optional]
            categories ([str]): Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  . [optional]
            search_text (str): Restricts the search to include only document stories which include the text searched.    . [optional]
            sort ([str]): Enables sorting data in ascending or descending chronological order based on eventDate. . [optional] if omitted the server will use the default value of ["-storyDateTime"]
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            InvestorSlidesResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['ids'] = \
            ids
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        return self.get_transcripts_investor_slides_endpoint.call_with_http_info(**kwargs)

    def get_transcripts_investor_slides_async(
        self,
        ids,
        start_date,
        end_date,
        **kwargs
    ) -> "ApplyResult[InvestorSlidesResponse]":
        """Returns the investor slides in PDF format and related metadata within FactSet coverage based on specific date range and various parameters.  # noqa: E501

        Returns the Factset Callstreet Investor Slides documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Investor Slides.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            ids ([str]): Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
            start_date (date): Start Date. Format is YYYY-MM-DD    **The API supports data from 1995 onwards. Ensure that the provided Date falls within this range for accurate results.** 
            end_date (date): End Date. Format is YYYY-MM-DD.

        Keyword Args:
            event_ids ([str]): Requests Event IDs. This is a list with a maximum limit of 1000.. [optional]
            categories ([str]): Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  . [optional]
            search_text (str): Restricts the search to include only document stories which include the text searched.    . [optional]
            sort ([str]): Enables sorting data in ascending or descending chronological order based on eventDate. . [optional] if omitted the server will use the default value of ["-storyDateTime"]
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[InvestorSlidesResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['ids'] = \
            ids
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        return self.get_transcripts_investor_slides_endpoint.call_with_http_info(**kwargs)

    def get_transcripts_investor_slides_with_http_info_async(
        self,
        ids,
        start_date,
        end_date,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[InvestorSlidesResponse, int, typing.MutableMapping]]":
        """Returns the investor slides in PDF format and related metadata within FactSet coverage based on specific date range and various parameters.  # noqa: E501

        Returns the Factset Callstreet Investor Slides documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Investor Slides.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            ids ([str]): Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
            start_date (date): Start Date. Format is YYYY-MM-DD    **The API supports data from 1995 onwards. Ensure that the provided Date falls within this range for accurate results.** 
            end_date (date): End Date. Format is YYYY-MM-DD.

        Keyword Args:
            event_ids ([str]): Requests Event IDs. This is a list with a maximum limit of 1000.. [optional]
            categories ([str]): Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  . [optional]
            search_text (str): Restricts the search to include only document stories which include the text searched.    . [optional]
            sort ([str]): Enables sorting data in ascending or descending chronological order based on eventDate. . [optional] if omitted the server will use the default value of ["-storyDateTime"]
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(InvestorSlidesResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['ids'] = \
            ids
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        return self.get_transcripts_investor_slides_endpoint.call_with_http_info(**kwargs)


    def get_transcriptsin_xml(
        self,
        report_ids,
        format,
        **kwargs
    ) -> ResponseType:
        """Returns the requested response type of transcript  # noqa: E501

        Returns the Factset Callstreet documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Transcripts   # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            report_ids ([str]): Requests Report IDs. This is a list with a maximum limit of 1000
            format (str): The format of the output file. Allowed values:   - `XML`: Structured data format ideal for integrations and parsing.   - `PDF`: Printable document format preserving layout and design.   - `DocViewer`: Web-friendly format rendered in an in-browser document viewer.   - `ContentXML`: XML containing only the core content without layout or styling metadata. 

        Keyword Args:
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ResponseType
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['report_ids'] = \
            report_ids
        kwargs['format'] = \
            format
        return self.get_transcriptsin_xml_endpoint.call_with_http_info(**kwargs)

    def get_transcriptsin_xml_with_http_info(
        self,
        report_ids,
        format,
        **kwargs
    ) -> typing.Tuple[ResponseType, int, typing.MutableMapping]:
        """Returns the requested response type of transcript  # noqa: E501

        Returns the Factset Callstreet documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Transcripts   # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            report_ids ([str]): Requests Report IDs. This is a list with a maximum limit of 1000
            format (str): The format of the output file. Allowed values:   - `XML`: Structured data format ideal for integrations and parsing.   - `PDF`: Printable document format preserving layout and design.   - `DocViewer`: Web-friendly format rendered in an in-browser document viewer.   - `ContentXML`: XML containing only the core content without layout or styling metadata. 

        Keyword Args:
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ResponseType
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['report_ids'] = \
            report_ids
        kwargs['format'] = \
            format
        return self.get_transcriptsin_xml_endpoint.call_with_http_info(**kwargs)

    def get_transcriptsin_xml_async(
        self,
        report_ids,
        format,
        **kwargs
    ) -> "ApplyResult[ResponseType]":
        """Returns the requested response type of transcript  # noqa: E501

        Returns the Factset Callstreet documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Transcripts   # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            report_ids ([str]): Requests Report IDs. This is a list with a maximum limit of 1000
            format (str): The format of the output file. Allowed values:   - `XML`: Structured data format ideal for integrations and parsing.   - `PDF`: Printable document format preserving layout and design.   - `DocViewer`: Web-friendly format rendered in an in-browser document viewer.   - `ContentXML`: XML containing only the core content without layout or styling metadata. 

        Keyword Args:
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[ResponseType]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['report_ids'] = \
            report_ids
        kwargs['format'] = \
            format
        return self.get_transcriptsin_xml_endpoint.call_with_http_info(**kwargs)

    def get_transcriptsin_xml_with_http_info_async(
        self,
        report_ids,
        format,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[ResponseType, int, typing.MutableMapping]]":
        """Returns the requested response type of transcript  # noqa: E501

        Returns the Factset Callstreet documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Transcripts   # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            report_ids ([str]): Requests Report IDs. This is a list with a maximum limit of 1000
            format (str): The format of the output file. Allowed values:   - `XML`: Structured data format ideal for integrations and parsing.   - `PDF`: Printable document format preserving layout and design.   - `DocViewer`: Web-friendly format rendered in an in-browser document viewer.   - `ContentXML`: XML containing only the core content without layout or styling metadata. 

        Keyword Args:
            pagination_limit (int): Number of results to return per page.. [optional] if omitted the server will use the default value of 25
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results.. [optional] if omitted the server will use the default value of 0
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(ResponseType, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['report_ids'] = \
            report_ids
        kwargs['format'] = \
            format
        return self.get_transcriptsin_xml_endpoint.call_with_http_info(**kwargs)


    def search_transcripts(
        self,
        transcripts_request,
        **kwargs
    ) -> TranscriptsResponse:
        """Returns transcript documents and related metadata based on different search criteria.  # noqa: E501

        Retrieves transcript documents in XML format and related metadata within FactSet coverage based on various criteria like date range, search text, specific IDs, or event details. Use the appropriate parameters within the `data` object of the request body to specify the search method. Pagination and sorting are controlled via the `meta` object.  All transcripts originate from Factset Callstreet Transcripts.   # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            transcripts_request (TranscriptsRequest): Criteria to search for transcripts. Select one mode of search.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            TranscriptsResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['transcripts_request'] = \
            transcripts_request
        return self.search_transcripts_endpoint.call_with_http_info(**kwargs)

    def search_transcripts_with_http_info(
        self,
        transcripts_request,
        **kwargs
    ) -> typing.Tuple[TranscriptsResponse, int, typing.MutableMapping]:
        """Returns transcript documents and related metadata based on different search criteria.  # noqa: E501

        Retrieves transcript documents in XML format and related metadata within FactSet coverage based on various criteria like date range, search text, specific IDs, or event details. Use the appropriate parameters within the `data` object of the request body to specify the search method. Pagination and sorting are controlled via the `meta` object.  All transcripts originate from Factset Callstreet Transcripts.   # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            transcripts_request (TranscriptsRequest): Criteria to search for transcripts. Select one mode of search.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            TranscriptsResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['transcripts_request'] = \
            transcripts_request
        return self.search_transcripts_endpoint.call_with_http_info(**kwargs)

    def search_transcripts_async(
        self,
        transcripts_request,
        **kwargs
    ) -> "ApplyResult[TranscriptsResponse]":
        """Returns transcript documents and related metadata based on different search criteria.  # noqa: E501

        Retrieves transcript documents in XML format and related metadata within FactSet coverage based on various criteria like date range, search text, specific IDs, or event details. Use the appropriate parameters within the `data` object of the request body to specify the search method. Pagination and sorting are controlled via the `meta` object.  All transcripts originate from Factset Callstreet Transcripts.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            transcripts_request (TranscriptsRequest): Criteria to search for transcripts. Select one mode of search.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[TranscriptsResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['transcripts_request'] = \
            transcripts_request
        return self.search_transcripts_endpoint.call_with_http_info(**kwargs)

    def search_transcripts_with_http_info_async(
        self,
        transcripts_request,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[TranscriptsResponse, int, typing.MutableMapping]]":
        """Returns transcript documents and related metadata based on different search criteria.  # noqa: E501

        Retrieves transcript documents in XML format and related metadata within FactSet coverage based on various criteria like date range, search text, specific IDs, or event details. Use the appropriate parameters within the `data` object of the request body to specify the search method. Pagination and sorting are controlled via the `meta` object.  All transcripts originate from Factset Callstreet Transcripts.   # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            transcripts_request (TranscriptsRequest): Criteria to search for transcripts. Select one mode of search.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(TranscriptsResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['transcripts_request'] = \
            transcripts_request
        return self.search_transcripts_endpoint.call_with_http_info(**kwargs)


