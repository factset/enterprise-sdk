"""
    dsotm API

    Allow clients to send transactions data to FactSet.  # noqa: E501

    The version of the OpenAPI document: 1.6.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.DirectStreamingofTransactionMessages.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.DirectStreamingofTransactionMessages.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.DirectStreamingofTransactionMessages.model.additional_field import AdditionalField
    globals()['AdditionalField'] = AdditionalField


class Placement(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('transaction_status',): {
            'PLACED': "placed",
            'PARTIALFILLED': "partialFilled",
            'FILLED': "filled",
            'EXPIRED': "expired",
            'CANCELLED': "cancelled",
            'REJECTED': "rejected",


        },
        ('side',): {
            'BUY': "buy",
            'BUYCOVER': "buyCover",
            'SELL': "sell",
            'SELLSHORT': "sellShort",


        },
        ('unit_type',): {
            'QUANTITY': "quantity",
            'VALUE': "value",


        },
        ('order_type',): {
            'MARKET': "market",
            'LIMIT': "limit",
            'STOPLIMIT': "stopLimit",
            'STOP': "stop",


        },
        ('tif',): {
            'GOODTILCANCEL': "goodTilCancel",
            'GOODTILDATE': "goodTilDate",
            'DAY': "day",
            'WEEK': "week",


        },
        ('settlement_type',): {
            'REGULAR': "regular",
            'CASH': "cash",
            'NEXTDAY': "nextDay",
            'TPLUS2': "tPlus2",
            'TPLUS3': "tPlus3",
            'TPLUS4': "tPlus4",
            'FUTURE': "future",
            'WHENISSUED': "whenIssued",
            'SELLERSOPTION': "sellersOption",
            'TPLUS5': "tPlus5",


        },
        ('compliance_status',): {
            'UNCHECKED': "unchecked",
            'PASS': "pass",
            'FAIL': "fail",


        },
    }

    validations = {
        ('transaction_id',): {
            'max_length': 252,
            'min_length': 0,
        },
        ('symbol',): {
            'max_length': 32,
            'min_length': 0,
        },
        ('instrument_name',): {
            'max_length': 32,
            'min_length': 0,
        },
        ('currency',): {
            'max_length': 3,
            'min_length': 0,
        },
        ('parent_id',): {
            'max_length': 32,
            'min_length': 0,
        },
        ('order_id',): {
            'max_length': 32,
            'min_length': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'placement_date': (str,),  # noqa: E501
            'transaction_id': (str,),  # noqa: E501
            'transaction_status': (str,),  # noqa: E501
            'account': (str,),  # noqa: E501
            'symbol': (str,),  # noqa: E501
            'instrument_name': (str,),  # noqa: E501
            'side': (str,),  # noqa: E501
            'unit_type': (str,),  # noqa: E501
            'quantity': (float,),  # noqa: E501
            'gross': (float,),  # noqa: E501
            'currency': (str,),  # noqa: E501
            'parent_id': (str, none_type,),  # noqa: E501
            'order_id': (str, none_type,),  # noqa: E501
            'order_type': (str,),  # noqa: E501
            'limit_price': (float,),  # noqa: E501
            'stop_price': (float,),  # noqa: E501
            'tif': (str,),  # noqa: E501
            'tif_date': (str, none_type,),  # noqa: E501
            'settlement_type': (str,),  # noqa: E501
            'settlement_date': (str, none_type,),  # noqa: E501
            'transaction_leaves': (float, none_type,),  # noqa: E501
            'price': (float, none_type,),  # noqa: E501
            'compliance_status': (str,),  # noqa: E501
            'added_date_time': (str, none_type,),  # noqa: E501
            'updated_date_time': (str, none_type,),  # noqa: E501
            'additional_fields': ([AdditionalField], none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'placement_date': 'placementDate',  # noqa: E501
        'transaction_id': 'transactionId',  # noqa: E501
        'transaction_status': 'transactionStatus',  # noqa: E501
        'account': 'account',  # noqa: E501
        'symbol': 'symbol',  # noqa: E501
        'instrument_name': 'instrumentName',  # noqa: E501
        'side': 'side',  # noqa: E501
        'unit_type': 'unitType',  # noqa: E501
        'quantity': 'quantity',  # noqa: E501
        'gross': 'gross',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'parent_id': 'parentId',  # noqa: E501
        'order_id': 'orderId',  # noqa: E501
        'order_type': 'orderType',  # noqa: E501
        'limit_price': 'limitPrice',  # noqa: E501
        'stop_price': 'stopPrice',  # noqa: E501
        'tif': 'tif',  # noqa: E501
        'tif_date': 'tifDate',  # noqa: E501
        'settlement_type': 'settlementType',  # noqa: E501
        'settlement_date': 'settlementDate',  # noqa: E501
        'transaction_leaves': 'transactionLeaves',  # noqa: E501
        'price': 'price',  # noqa: E501
        'compliance_status': 'complianceStatus',  # noqa: E501
        'added_date_time': 'addedDateTime',  # noqa: E501
        'updated_date_time': 'updatedDateTime',  # noqa: E501
        'additional_fields': 'additionalFields',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, placement_date, transaction_id, transaction_status, account, symbol, instrument_name, side, unit_type, quantity, gross, currency, *args, **kwargs):  # noqa: E501
        """Placement - a model defined in OpenAPI

        Args:
            placement_date (str): Placement date which is in the format YYYY-MM-DD
            transaction_id (str): Unique Id of the placement
            transaction_status (str): Status of the Placement
            account (str): Path of the account
            symbol (str): Symbol corresponding to the traded instrument
            instrument_name (str): Name or description of the traded instrument
            side (str): Side of the order
            unit_type (str): Unit type of the order. Indicates if the trade is driven by quantity or value
            quantity (float): Quantity of the instrument traded
            gross (float): Cash value of the transaction
            currency (str): The iso currency code of cash valued fields, Net Amount and Gross Amount

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            parent_id (str, none_type): transactionId of the order which spawned this placement. [optional]  # noqa: E501
            order_id (str, none_type): orderId of the order related to this placement. [optional]  # noqa: E501
            order_type (str): Order type indicating the price type of the Placement. [optional]  # noqa: E501
            limit_price (float): Price related to limit and stopLimit order types. [optional]  # noqa: E501
            stop_price (float): Price related to stop and stopLimit order types. [optional]  # noqa: E501
            tif (str): Time In Force of the Placement. [optional]  # noqa: E501
            tif_date (str, none_type): Time In Force date for goodTilDate placements in YYYY-MM-DD format. [optional]  # noqa: E501
            settlement_type (str): Indicates placement settlement period. [optional]  # noqa: E501
            settlement_date (str, none_type): Settlement date in YYYY-MM-DD format. [optional]  # noqa: E501
            transaction_leaves (float, none_type): Shares that have been ordered and not executed. [optional]  # noqa: E501
            price (float, none_type): The transaction price. [optional]  # noqa: E501
            compliance_status (str): Compliance check status. [optional]  # noqa: E501
            added_date_time (str, none_type): Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF. [optional]  # noqa: E501
            updated_date_time (str, none_type): Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF. [optional]  # noqa: E501
            additional_fields ([AdditionalField], none_type): List of additional fields which can be used for dynamically populating other ofdb fields. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.placement_date = placement_date
        self.transaction_id = transaction_id
        self.transaction_status = transaction_status
        self.account = account
        self.symbol = symbol
        self.instrument_name = instrument_name
        self.side = side
        self.unit_type = unit_type
        self.quantity = quantity
        self.gross = gross
        self.currency = currency
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, placement_date, transaction_id, transaction_status, account, symbol, instrument_name, side, unit_type, quantity, gross, currency, *args, **kwargs):  # noqa: E501
        """Placement - a model defined in OpenAPI

        Args:
            placement_date (str): Placement date which is in the format YYYY-MM-DD
            transaction_id (str): Unique Id of the placement
            transaction_status (str): Status of the Placement
            account (str): Path of the account
            symbol (str): Symbol corresponding to the traded instrument
            instrument_name (str): Name or description of the traded instrument
            side (str): Side of the order
            unit_type (str): Unit type of the order. Indicates if the trade is driven by quantity or value
            quantity (float): Quantity of the instrument traded
            gross (float): Cash value of the transaction
            currency (str): The iso currency code of cash valued fields, Net Amount and Gross Amount

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            parent_id (str, none_type): transactionId of the order which spawned this placement. [optional]  # noqa: E501
            order_id (str, none_type): orderId of the order related to this placement. [optional]  # noqa: E501
            order_type (str): Order type indicating the price type of the Placement. [optional]  # noqa: E501
            limit_price (float): Price related to limit and stopLimit order types. [optional]  # noqa: E501
            stop_price (float): Price related to stop and stopLimit order types. [optional]  # noqa: E501
            tif (str): Time In Force of the Placement. [optional]  # noqa: E501
            tif_date (str, none_type): Time In Force date for goodTilDate placements in YYYY-MM-DD format. [optional]  # noqa: E501
            settlement_type (str): Indicates placement settlement period. [optional]  # noqa: E501
            settlement_date (str, none_type): Settlement date in YYYY-MM-DD format. [optional]  # noqa: E501
            transaction_leaves (float, none_type): Shares that have been ordered and not executed. [optional]  # noqa: E501
            price (float, none_type): The transaction price. [optional]  # noqa: E501
            compliance_status (str): Compliance check status. [optional]  # noqa: E501
            added_date_time (str, none_type): Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF. [optional]  # noqa: E501
            updated_date_time (str, none_type): Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF. [optional]  # noqa: E501
            additional_fields ([AdditionalField], none_type): List of additional fields which can be used for dynamically populating other ofdb fields. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.placement_date = placement_date
        self.transaction_id = transaction_id
        self.transaction_status = transaction_status
        self.account = account
        self.symbol = symbol
        self.instrument_name = instrument_name
        self.side = side
        self.unit_type = unit_type
        self.quantity = quantity
        self.gross = gross
        self.currency = currency
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
