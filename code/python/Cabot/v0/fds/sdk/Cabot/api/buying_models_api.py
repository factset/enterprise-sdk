"""
    Cabot Models API

    Cabot Models API  # noqa: E501

    The version of the OpenAPI document: 0.4.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
from multiprocessing.pool import ApplyResult
import typing

from fds.sdk.Cabot.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.Cabot.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.Cabot.exceptions import ApiException
from fds.sdk.Cabot.model.buy_context_request_body_root import BuyContextRequestBodyRoot
from fds.sdk.Cabot.model.buy_context_response_root import BuyContextResponseRoot
from fds.sdk.Cabot.model.buy_timing_request_body_root import BuyTimingRequestBodyRoot
from fds.sdk.Cabot.model.buy_timing_response_root import BuyTimingResponseRoot
from fds.sdk.Cabot.model.client_error_response import ClientErrorResponse





class BuyingModelsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.get_buy_context_model_analytic_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (BuyContextResponseRoot,), 400: (ClientErrorResponse,), 404: (ClientErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/models/buy-context',
                'operation_id': 'get_buy_context_model_analytic',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'buy_context_request_body_root',
                ],
                'required': [
                    'buy_context_request_body_root',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'buy_context_request_body_root':
                        (BuyContextRequestBodyRoot,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'buy_context_request_body_root': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

        self.get_buy_timing_model_analytic_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (BuyTimingResponseRoot,), 400: (ClientErrorResponse,), 404: (ClientErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/models/buy-timing',
                'operation_id': 'get_buy_timing_model_analytic',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'buy_timing_request_body_root',
                ],
                'required': [
                    'buy_timing_request_body_root',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'buy_timing_request_body_root':
                        (BuyTimingRequestBodyRoot,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'buy_timing_request_body_root': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )


    @staticmethod
    def apply_kwargs_defaults(kwargs, return_http_data_only, async_req):
        kwargs["async_req"] = async_req
        kwargs["_return_http_data_only"] = return_http_data_only
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")


    def get_buy_context_model_analytic(
        self,
        buy_context_request_body_root,
        **kwargs
    ) -> BuyContextResponseRoot:
        """Cabot main path for Buy Context API  # noqa: E501

        Cabot main path for Buy Context API  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            buy_context_request_body_root (BuyContextRequestBodyRoot):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            BuyContextResponseRoot
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['buy_context_request_body_root'] = \
            buy_context_request_body_root
        return self.get_buy_context_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_buy_context_model_analytic_with_http_info(
        self,
        buy_context_request_body_root,
        **kwargs
    ) -> typing.Tuple[BuyContextResponseRoot, int, typing.MutableMapping]:
        """Cabot main path for Buy Context API  # noqa: E501

        Cabot main path for Buy Context API  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            buy_context_request_body_root (BuyContextRequestBodyRoot):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            BuyContextResponseRoot
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['buy_context_request_body_root'] = \
            buy_context_request_body_root
        return self.get_buy_context_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_buy_context_model_analytic_async(
        self,
        buy_context_request_body_root,
        **kwargs
    ) -> "ApplyResult[BuyContextResponseRoot]":
        """Cabot main path for Buy Context API  # noqa: E501

        Cabot main path for Buy Context API  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            buy_context_request_body_root (BuyContextRequestBodyRoot):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[BuyContextResponseRoot]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['buy_context_request_body_root'] = \
            buy_context_request_body_root
        return self.get_buy_context_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_buy_context_model_analytic_with_http_info_async(
        self,
        buy_context_request_body_root,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[BuyContextResponseRoot, int, typing.MutableMapping]]":
        """Cabot main path for Buy Context API  # noqa: E501

        Cabot main path for Buy Context API  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            buy_context_request_body_root (BuyContextRequestBodyRoot):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(BuyContextResponseRoot, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['buy_context_request_body_root'] = \
            buy_context_request_body_root
        return self.get_buy_context_model_analytic_endpoint.call_with_http_info(**kwargs)


    def get_buy_timing_model_analytic(
        self,
        buy_timing_request_body_root,
        **kwargs
    ) -> BuyTimingResponseRoot:
        """Cabot main path for Buy Timing API  # noqa: E501

        Cabot main path for Buy Timing API.    Buy timing examines the timeliness of entry points and measures how quickly new buys contribute to results. This is done by delaying the buys by the specified number of days to see if buying into the position early would have benefited the portfolio.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            buy_timing_request_body_root (BuyTimingRequestBodyRoot):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            BuyTimingResponseRoot
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['buy_timing_request_body_root'] = \
            buy_timing_request_body_root
        return self.get_buy_timing_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_buy_timing_model_analytic_with_http_info(
        self,
        buy_timing_request_body_root,
        **kwargs
    ) -> typing.Tuple[BuyTimingResponseRoot, int, typing.MutableMapping]:
        """Cabot main path for Buy Timing API  # noqa: E501

        Cabot main path for Buy Timing API.    Buy timing examines the timeliness of entry points and measures how quickly new buys contribute to results. This is done by delaying the buys by the specified number of days to see if buying into the position early would have benefited the portfolio.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            buy_timing_request_body_root (BuyTimingRequestBodyRoot):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            BuyTimingResponseRoot
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['buy_timing_request_body_root'] = \
            buy_timing_request_body_root
        return self.get_buy_timing_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_buy_timing_model_analytic_async(
        self,
        buy_timing_request_body_root,
        **kwargs
    ) -> "ApplyResult[BuyTimingResponseRoot]":
        """Cabot main path for Buy Timing API  # noqa: E501

        Cabot main path for Buy Timing API.    Buy timing examines the timeliness of entry points and measures how quickly new buys contribute to results. This is done by delaying the buys by the specified number of days to see if buying into the position early would have benefited the portfolio.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            buy_timing_request_body_root (BuyTimingRequestBodyRoot):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[BuyTimingResponseRoot]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['buy_timing_request_body_root'] = \
            buy_timing_request_body_root
        return self.get_buy_timing_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_buy_timing_model_analytic_with_http_info_async(
        self,
        buy_timing_request_body_root,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[BuyTimingResponseRoot, int, typing.MutableMapping]]":
        """Cabot main path for Buy Timing API  # noqa: E501

        Cabot main path for Buy Timing API.    Buy timing examines the timeliness of entry points and measures how quickly new buys contribute to results. This is done by delaying the buys by the specified number of days to see if buying into the position early would have benefited the portfolio.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            buy_timing_request_body_root (BuyTimingRequestBodyRoot):

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(BuyTimingResponseRoot, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['buy_timing_request_body_root'] = \
            buy_timing_request_body_root
        return self.get_buy_timing_model_analytic_endpoint.call_with_http_info(**kwargs)


