"""
    Cabot Models API

    Cabot Models API  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
from multiprocessing.pool import ApplyResult
import typing

from fds.sdk.Cabot.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.Cabot.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.Cabot.exceptions import ApiException
from fds.sdk.Cabot.model.attributes import Attributes
from fds.sdk.Cabot.model.client_error_response import ClientErrorResponse
from fds.sdk.Cabot.model.regions import Regions
from fds.sdk.Cabot.model.sectors import Sectors
from fds.sdk.Cabot.model.sell_timing_response_root import SellTimingResponseRoot
from fds.sdk.Cabot.model.stop_loss_response_root import StopLossResponseRoot





class SellingModelsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.get_sell_timing_model_analytic_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (SellTimingResponseRoot,), 400: (ClientErrorResponse,), 404: (ClientErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/models/sell-timing',
                'operation_id': 'get_sell_timing_model_analytic',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_path',
                    'benchmark_path',
                    'period',
                    'attribute',
                    'sector',
                    'region',
                ],
                'required': [
                    'account_path',
                    'benchmark_path',
                    'period',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_path':
                        (str,),
                    'benchmark_path':
                        (str,),
                    'period':
                        (str,),
                    'attribute':
                        (Attributes,),
                    'sector':
                        (Sectors,),
                    'region':
                        (Regions,),
                },
                'attribute_map': {
                    'account_path': 'accountPath',
                    'benchmark_path': 'benchmarkPath',
                    'period': 'period',
                    'attribute': 'attribute',
                    'sector': 'sector',
                    'region': 'region',
                },
                'location_map': {
                    'account_path': 'query',
                    'benchmark_path': 'query',
                    'period': 'query',
                    'attribute': 'query',
                    'sector': 'query',
                    'region': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.get_stop_loss_model_analytic_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (StopLossResponseRoot,), 400: (ClientErrorResponse,), 404: (ClientErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/models/stop-loss',
                'operation_id': 'get_stop_loss_model_analytic',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_path',
                    'benchmark_path',
                    'period',
                    'attribute',
                    'sector',
                    'region',
                ],
                'required': [
                    'account_path',
                    'benchmark_path',
                    'period',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_path':
                        (str,),
                    'benchmark_path':
                        (str,),
                    'period':
                        (str,),
                    'attribute':
                        (Attributes,),
                    'sector':
                        (Sectors,),
                    'region':
                        (Regions,),
                },
                'attribute_map': {
                    'account_path': 'accountPath',
                    'benchmark_path': 'benchmarkPath',
                    'period': 'period',
                    'attribute': 'attribute',
                    'sector': 'sector',
                    'region': 'region',
                },
                'location_map': {
                    'account_path': 'query',
                    'benchmark_path': 'query',
                    'period': 'query',
                    'attribute': 'query',
                    'sector': 'query',
                    'region': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )


    @staticmethod
    def apply_kwargs_defaults(kwargs, return_http_data_only, async_req):
        kwargs["async_req"] = async_req
        kwargs["_return_http_data_only"] = return_http_data_only
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")


    def get_sell_timing_model_analytic(
        self,
        account_path,
        benchmark_path,
        period,
        **kwargs
    ) -> SellTimingResponseRoot:
        """Cabot main path for Sell Timing API  # noqa: E501

        Cabot main path for Sell Timing API  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            account_path (str): The account path of the portfolio you want to retrieve the data for.<br /><br />
            benchmark_path (str): The path of the benchmark you want to retrieve the data for.<br /><br />
            period (str): For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />

        Keyword Args:
            attribute (Attributes): The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />. [optional]
            sector (Sectors): Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            region (Regions): Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            SellTimingResponseRoot
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['account_path'] = \
            account_path
        kwargs['benchmark_path'] = \
            benchmark_path
        kwargs['period'] = \
            period
        return self.get_sell_timing_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_sell_timing_model_analytic_with_http_info(
        self,
        account_path,
        benchmark_path,
        period,
        **kwargs
    ) -> typing.Tuple[SellTimingResponseRoot, int, typing.MutableMapping]:
        """Cabot main path for Sell Timing API  # noqa: E501

        Cabot main path for Sell Timing API  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            account_path (str): The account path of the portfolio you want to retrieve the data for.<br /><br />
            benchmark_path (str): The path of the benchmark you want to retrieve the data for.<br /><br />
            period (str): For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />

        Keyword Args:
            attribute (Attributes): The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />. [optional]
            sector (Sectors): Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            region (Regions): Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            SellTimingResponseRoot
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['account_path'] = \
            account_path
        kwargs['benchmark_path'] = \
            benchmark_path
        kwargs['period'] = \
            period
        return self.get_sell_timing_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_sell_timing_model_analytic_async(
        self,
        account_path,
        benchmark_path,
        period,
        **kwargs
    ) -> "ApplyResult[SellTimingResponseRoot]":
        """Cabot main path for Sell Timing API  # noqa: E501

        Cabot main path for Sell Timing API  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            account_path (str): The account path of the portfolio you want to retrieve the data for.<br /><br />
            benchmark_path (str): The path of the benchmark you want to retrieve the data for.<br /><br />
            period (str): For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />

        Keyword Args:
            attribute (Attributes): The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />. [optional]
            sector (Sectors): Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            region (Regions): Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[SellTimingResponseRoot]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['account_path'] = \
            account_path
        kwargs['benchmark_path'] = \
            benchmark_path
        kwargs['period'] = \
            period
        return self.get_sell_timing_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_sell_timing_model_analytic_with_http_info_async(
        self,
        account_path,
        benchmark_path,
        period,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[SellTimingResponseRoot, int, typing.MutableMapping]]":
        """Cabot main path for Sell Timing API  # noqa: E501

        Cabot main path for Sell Timing API  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            account_path (str): The account path of the portfolio you want to retrieve the data for.<br /><br />
            benchmark_path (str): The path of the benchmark you want to retrieve the data for.<br /><br />
            period (str): For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />

        Keyword Args:
            attribute (Attributes): The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />. [optional]
            sector (Sectors): Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            region (Regions): Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(SellTimingResponseRoot, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['account_path'] = \
            account_path
        kwargs['benchmark_path'] = \
            benchmark_path
        kwargs['period'] = \
            period
        return self.get_sell_timing_model_analytic_endpoint.call_with_http_info(**kwargs)


    def get_stop_loss_model_analytic(
        self,
        account_path,
        benchmark_path,
        period,
        **kwargs
    ) -> StopLossResponseRoot:
        """Cabot main path for Stop Loss API  # noqa: E501

        Cabot main path for Stop Loss API  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            account_path (str): The account path of the portfolio you want to retrieve the data for.<br /><br />
            benchmark_path (str): The path of the benchmark you want to retrieve the data for.<br /><br />
            period (str): For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />

        Keyword Args:
            attribute (Attributes): The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />. [optional]
            sector (Sectors): Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            region (Regions): Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            StopLossResponseRoot
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['account_path'] = \
            account_path
        kwargs['benchmark_path'] = \
            benchmark_path
        kwargs['period'] = \
            period
        return self.get_stop_loss_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_stop_loss_model_analytic_with_http_info(
        self,
        account_path,
        benchmark_path,
        period,
        **kwargs
    ) -> typing.Tuple[StopLossResponseRoot, int, typing.MutableMapping]:
        """Cabot main path for Stop Loss API  # noqa: E501

        Cabot main path for Stop Loss API  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            account_path (str): The account path of the portfolio you want to retrieve the data for.<br /><br />
            benchmark_path (str): The path of the benchmark you want to retrieve the data for.<br /><br />
            period (str): For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />

        Keyword Args:
            attribute (Attributes): The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />. [optional]
            sector (Sectors): Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            region (Regions): Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            StopLossResponseRoot
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['account_path'] = \
            account_path
        kwargs['benchmark_path'] = \
            benchmark_path
        kwargs['period'] = \
            period
        return self.get_stop_loss_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_stop_loss_model_analytic_async(
        self,
        account_path,
        benchmark_path,
        period,
        **kwargs
    ) -> "ApplyResult[StopLossResponseRoot]":
        """Cabot main path for Stop Loss API  # noqa: E501

        Cabot main path for Stop Loss API  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            account_path (str): The account path of the portfolio you want to retrieve the data for.<br /><br />
            benchmark_path (str): The path of the benchmark you want to retrieve the data for.<br /><br />
            period (str): For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />

        Keyword Args:
            attribute (Attributes): The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />. [optional]
            sector (Sectors): Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            region (Regions): Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[StopLossResponseRoot]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['account_path'] = \
            account_path
        kwargs['benchmark_path'] = \
            benchmark_path
        kwargs['period'] = \
            period
        return self.get_stop_loss_model_analytic_endpoint.call_with_http_info(**kwargs)

    def get_stop_loss_model_analytic_with_http_info_async(
        self,
        account_path,
        benchmark_path,
        period,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[StopLossResponseRoot, int, typing.MutableMapping]]":
        """Cabot main path for Stop Loss API  # noqa: E501

        Cabot main path for Stop Loss API  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            account_path (str): The account path of the portfolio you want to retrieve the data for.<br /><br />
            benchmark_path (str): The path of the benchmark you want to retrieve the data for.<br /><br />
            period (str): For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />

        Keyword Args:
            attribute (Attributes): The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />. [optional]
            sector (Sectors): Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            region (Regions): Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(StopLossResponseRoot, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['account_path'] = \
            account_path
        kwargs['benchmark_path'] = \
            benchmark_path
        kwargs['period'] = \
            period
        return self.get_stop_loss_model_analytic_endpoint.call_with_http_info(**kwargs)


