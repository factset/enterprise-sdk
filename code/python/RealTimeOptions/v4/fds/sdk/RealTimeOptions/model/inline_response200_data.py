"""
    Real-Time Options API

    The Options API provides detailed information for option contracts (“options”) and option classes. This API presents a consolidated data model that gives access to options data of global options markets such as OPRA, Australia Exchange, Bovespa, CME Group, EUREX, Euronext, Hong Kong, ICE Futures Europe / US, Montreal Exchange, and others.  An option class is a product group of options from the same exchange and with the same underlying. The API includes endpoints to retrieve fundamental data for an option contract such as exercise right, exercise style, strike, maturity, open interest, underlying, etc. as well as risk measures of an option contract such as delta, omega, implied volatility, etc.  Option chains are provided by the /by-class/list endpoint. The list of option contracts for an option class can be filtered by exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The option screener allows you to search for option classes by using text search, root symbol, or ISIN plus additional criteria such as market, underlying, currency, and category. Similar to other screener endpoints in e.g. the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals), the /value-ranges/get endpoint provides the possible values and value ranges plus the number of option contracts for an option class related to the option contracts per criteria such as exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The Options API for Digital Portals seamlessly integrates with the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) that provides real-time, delayed, and end-of-day pricing data and basic security identifier cross-reference. For direct access to price histories for charting, please refer to the [Real-Time Time Series API](https://developer.factset.com/api-catalog/real-time-time-series-api).   # noqa: E501

    The version of the OpenAPI document: 4.1.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.RealTimeOptions.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.RealTimeOptions.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.RealTimeOptions.model.get_option_get_data_type_items import GetOptionGetDataTypeItems
    from fds.sdk.RealTimeOptions.model.inline_response200_data_class import InlineResponse200DataClass
    from fds.sdk.RealTimeOptions.model.inline_response200_data_exercise import InlineResponse200DataExercise
    from fds.sdk.RealTimeOptions.model.inline_response200_data_life_cycle import InlineResponse200DataLifeCycle
    from fds.sdk.RealTimeOptions.model.inline_response200_data_market import InlineResponse200DataMarket
    from fds.sdk.RealTimeOptions.model.inline_response200_data_open_interest import InlineResponse200DataOpenInterest
    from fds.sdk.RealTimeOptions.model.inline_response200_data_settlement import InlineResponse200DataSettlement
    from fds.sdk.RealTimeOptions.model.inline_response200_data_strike_price import InlineResponse200DataStrikePrice
    from fds.sdk.RealTimeOptions.model.inline_response200_data_underlying import InlineResponse200DataUnderlying
    globals()['GetOptionGetDataTypeItems'] = GetOptionGetDataTypeItems
    globals()['InlineResponse200DataClass'] = InlineResponse200DataClass
    globals()['InlineResponse200DataExercise'] = InlineResponse200DataExercise
    globals()['InlineResponse200DataLifeCycle'] = InlineResponse200DataLifeCycle
    globals()['InlineResponse200DataMarket'] = InlineResponse200DataMarket
    globals()['InlineResponse200DataOpenInterest'] = InlineResponse200DataOpenInterest
    globals()['InlineResponse200DataSettlement'] = InlineResponse200DataSettlement
    globals()['InlineResponse200DataStrikePrice'] = InlineResponse200DataStrikePrice
    globals()['InlineResponse200DataUnderlying'] = InlineResponse200DataUnderlying


class InlineResponse200Data(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('type',): {
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id_instrument': (str, none_type,),  # noqa: E501
            'source_identifier': (str, none_type,),  # noqa: E501
            'isin': (str, none_type,),  # noqa: E501
            'normalized_symbol': (str, none_type,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'type': ([GetOptionGetDataTypeItems],),  # noqa: E501
            'market': (InlineResponse200DataMarket,),  # noqa: E501
            '_class': (InlineResponse200DataClass,),  # noqa: E501
            'exercise': (InlineResponse200DataExercise,),  # noqa: E501
            'strike_price': (InlineResponse200DataStrikePrice,),  # noqa: E501
            'life_cycle': (InlineResponse200DataLifeCycle,),  # noqa: E501
            'contract_size': (float, none_type,),  # noqa: E501
            'open_interest': (InlineResponse200DataOpenInterest,),  # noqa: E501
            'tick_size': (float, none_type,),  # noqa: E501
            'settlement': (InlineResponse200DataSettlement,),  # noqa: E501
            'underlying': (InlineResponse200DataUnderlying,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id_instrument': 'idInstrument',  # noqa: E501
        'source_identifier': 'sourceIdentifier',  # noqa: E501
        'isin': 'isin',  # noqa: E501
        'normalized_symbol': 'normalizedSymbol',  # noqa: E501
        'name': 'name',  # noqa: E501
        'type': 'type',  # noqa: E501
        'market': 'market',  # noqa: E501
        '_class': 'class',  # noqa: E501
        'exercise': 'exercise',  # noqa: E501
        'strike_price': 'strikePrice',  # noqa: E501
        'life_cycle': 'lifeCycle',  # noqa: E501
        'contract_size': 'contractSize',  # noqa: E501
        'open_interest': 'openInterest',  # noqa: E501
        'tick_size': 'tickSize',  # noqa: E501
        'settlement': 'settlement',  # noqa: E501
        'underlying': 'underlying',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """InlineResponse200Data - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id_instrument (str, none_type): Identifier of the instrument.. [optional]  # noqa: E501
            source_identifier (str, none_type): Identifier used in the request.. [optional]  # noqa: E501
            isin (str, none_type): International Securities Identification Number of the option.. [optional]  # noqa: E501
            normalized_symbol (str, none_type): Symbol of the option, as normalized by FactSet.. [optional]  # noqa: E501
            name (str, none_type): Name of the option.. [optional]  # noqa: E501
            type ([GetOptionGetDataTypeItems]): Instrument type as defined by FactSet. Instrument types are arranged in a hierarchy, with level 1 representing the most coarse granularity and further levels successively refining the granularity (see MDG category system 18).. [optional]  # noqa: E501
            market (InlineResponse200DataMarket): [optional]  # noqa: E501
            _class (InlineResponse200DataClass): [optional]  # noqa: E501
            exercise (InlineResponse200DataExercise): [optional]  # noqa: E501
            strike_price (InlineResponse200DataStrikePrice): [optional]  # noqa: E501
            life_cycle (InlineResponse200DataLifeCycle): [optional]  # noqa: E501
            contract_size (float, none_type): Quantity of the underlying asset represented by an option. For fixed income and index options it represents the value of one unit of the underlying instrument. For an underlying whose price unit is index points, this is the currency value of the contract per index point. For underlyings whose price unit is percent, this is the nominal value of the underlying.. [optional]  # noqa: E501
            open_interest (InlineResponse200DataOpenInterest): [optional]  # noqa: E501
            tick_size (float, none_type): The minimum price movement of the option.. [optional]  # noqa: E501
            settlement (InlineResponse200DataSettlement): [optional]  # noqa: E501
            underlying (InlineResponse200DataUnderlying): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """InlineResponse200Data - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id_instrument (str, none_type): Identifier of the instrument.. [optional]  # noqa: E501
            source_identifier (str, none_type): Identifier used in the request.. [optional]  # noqa: E501
            isin (str, none_type): International Securities Identification Number of the option.. [optional]  # noqa: E501
            normalized_symbol (str, none_type): Symbol of the option, as normalized by FactSet.. [optional]  # noqa: E501
            name (str, none_type): Name of the option.. [optional]  # noqa: E501
            type ([GetOptionGetDataTypeItems]): Instrument type as defined by FactSet. Instrument types are arranged in a hierarchy, with level 1 representing the most coarse granularity and further levels successively refining the granularity (see MDG category system 18).. [optional]  # noqa: E501
            market (InlineResponse200DataMarket): [optional]  # noqa: E501
            _class (InlineResponse200DataClass): [optional]  # noqa: E501
            exercise (InlineResponse200DataExercise): [optional]  # noqa: E501
            strike_price (InlineResponse200DataStrikePrice): [optional]  # noqa: E501
            life_cycle (InlineResponse200DataLifeCycle): [optional]  # noqa: E501
            contract_size (float, none_type): Quantity of the underlying asset represented by an option. For fixed income and index options it represents the value of one unit of the underlying instrument. For an underlying whose price unit is index points, this is the currency value of the contract per index point. For underlyings whose price unit is percent, this is the nominal value of the underlying.. [optional]  # noqa: E501
            open_interest (InlineResponse200DataOpenInterest): [optional]  # noqa: E501
            tick_size (float, none_type): The minimum price movement of the option.. [optional]  # noqa: E501
            settlement (InlineResponse200DataSettlement): [optional]  # noqa: E501
            underlying (InlineResponse200DataUnderlying): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
