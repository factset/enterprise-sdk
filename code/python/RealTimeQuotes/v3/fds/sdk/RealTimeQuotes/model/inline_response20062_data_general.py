"""
    Quotes API For Digital Portals

    The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news.   # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.RealTimeQuotes.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.RealTimeQuotes.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.RealTimeQuotes.model.inline_response20062_data_general_currency import InlineResponse20062DataGeneralCurrency
    from fds.sdk.RealTimeQuotes.model.inline_response20062_data_general_fund import InlineResponse20062DataGeneralFund
    from fds.sdk.RealTimeQuotes.model.inline_response20062_data_general_guarantor import InlineResponse20062DataGeneralGuarantor
    from fds.sdk.RealTimeQuotes.model.inline_response20062_data_general_issuer import InlineResponse20062DataGeneralIssuer
    from fds.sdk.RealTimeQuotes.model.inline_response20062_data_general_legal_structure import InlineResponse20062DataGeneralLegalStructure
    from fds.sdk.RealTimeQuotes.model.inline_response20062_data_general_manufacturer import InlineResponse20062DataGeneralManufacturer
    from fds.sdk.RealTimeQuotes.model.inline_response20062_data_general_type import InlineResponse20062DataGeneralType
    globals()['InlineResponse20062DataGeneralCurrency'] = InlineResponse20062DataGeneralCurrency
    globals()['InlineResponse20062DataGeneralFund'] = InlineResponse20062DataGeneralFund
    globals()['InlineResponse20062DataGeneralGuarantor'] = InlineResponse20062DataGeneralGuarantor
    globals()['InlineResponse20062DataGeneralIssuer'] = InlineResponse20062DataGeneralIssuer
    globals()['InlineResponse20062DataGeneralLegalStructure'] = InlineResponse20062DataGeneralLegalStructure
    globals()['InlineResponse20062DataGeneralManufacturer'] = InlineResponse20062DataGeneralManufacturer
    globals()['InlineResponse20062DataGeneralType'] = InlineResponse20062DataGeneralType


class InlineResponse20062DataGeneral(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('approval_procedure',): {
            'None': None,
            'PURSUANT': "pursuant",
            'COMPARABLE': "comparable",
            'NOTINACCORDANCE': "notInAccordance",
            'NOTREQUIRED': "notRequired",
            'NOTRELEVANT': "notRelevant",


        },
        ('complex_product',): {
            'None': None,
            'YES': "yes",
            'NO': "no",
            'SITUATIONAL': "situational",
            'NOTRELEVANT': "notRelevant",


        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'isin': (str, none_type,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'currency': (InlineResponse20062DataGeneralCurrency,),  # noqa: E501
            'reporting_date': (date, none_type,),  # noqa: E501
            'legal_structure': (InlineResponse20062DataGeneralLegalStructure,),  # noqa: E501
            'fund': (InlineResponse20062DataGeneralFund,),  # noqa: E501
            'issuer': (InlineResponse20062DataGeneralIssuer,),  # noqa: E501
            'guarantor': (InlineResponse20062DataGeneralGuarantor,),  # noqa: E501
            'type': (InlineResponse20062DataGeneralType,),  # noqa: E501
            'leveraged_or_contingent': (bool, none_type,),  # noqa: E501
            'manufacturer': (InlineResponse20062DataGeneralManufacturer,),  # noqa: E501
            'approval_procedure': (str, none_type,),  # noqa: E501
            'complex_product': (str, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'isin': 'isin',  # noqa: E501
        'name': 'name',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'reporting_date': 'reportingDate',  # noqa: E501
        'legal_structure': 'legalStructure',  # noqa: E501
        'fund': 'fund',  # noqa: E501
        'issuer': 'issuer',  # noqa: E501
        'guarantor': 'guarantor',  # noqa: E501
        'type': 'type',  # noqa: E501
        'leveraged_or_contingent': 'leveragedOrContingent',  # noqa: E501
        'manufacturer': 'manufacturer',  # noqa: E501
        'approval_procedure': 'approvalProcedure',  # noqa: E501
        'complex_product': 'complexProduct',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """InlineResponse20062DataGeneral - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            isin (str, none_type): International Securities Identification Number (ISIN).. [optional]  # noqa: E501
            name (str, none_type): Name of the investment product.. [optional]  # noqa: E501
            currency (InlineResponse20062DataGeneralCurrency): [optional]  # noqa: E501
            reporting_date (date, none_type): The date to which the MiFID II data refers.. [optional]  # noqa: E501
            legal_structure (InlineResponse20062DataGeneralLegalStructure): [optional]  # noqa: E501
            fund (InlineResponse20062DataGeneralFund): [optional]  # noqa: E501
            issuer (InlineResponse20062DataGeneralIssuer): [optional]  # noqa: E501
            guarantor (InlineResponse20062DataGeneralGuarantor): [optional]  # noqa: E501
            type (InlineResponse20062DataGeneralType): [optional]  # noqa: E501
            leveraged_or_contingent (bool, none_type): Indicates whether the investment product has leverage or implies a contingent liability.. [optional]  # noqa: E501
            manufacturer (InlineResponse20062DataGeneralManufacturer): [optional]  # noqa: E501
            approval_procedure (str, none_type): Information on the approval procedure undergone by the investment product.. [optional]  # noqa: E501
            complex_product (str, none_type): Indicates whether the investment product is considered a complex one.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """InlineResponse20062DataGeneral - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            isin (str, none_type): International Securities Identification Number (ISIN).. [optional]  # noqa: E501
            name (str, none_type): Name of the investment product.. [optional]  # noqa: E501
            currency (InlineResponse20062DataGeneralCurrency): [optional]  # noqa: E501
            reporting_date (date, none_type): The date to which the MiFID II data refers.. [optional]  # noqa: E501
            legal_structure (InlineResponse20062DataGeneralLegalStructure): [optional]  # noqa: E501
            fund (InlineResponse20062DataGeneralFund): [optional]  # noqa: E501
            issuer (InlineResponse20062DataGeneralIssuer): [optional]  # noqa: E501
            guarantor (InlineResponse20062DataGeneralGuarantor): [optional]  # noqa: E501
            type (InlineResponse20062DataGeneralType): [optional]  # noqa: E501
            leveraged_or_contingent (bool, none_type): Indicates whether the investment product has leverage or implies a contingent liability.. [optional]  # noqa: E501
            manufacturer (InlineResponse20062DataGeneralManufacturer): [optional]  # noqa: E501
            approval_procedure (str, none_type): Information on the approval procedure undergone by the investment product.. [optional]  # noqa: E501
            complex_product (str, none_type): Indicates whether the investment product is considered a complex one.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
