/*
 * Style Performance and Risk Analysis (SPAR) Engine API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.14.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.SPAREngine.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.SPAREngine.JSON;


/**
 * The account/benchmark parameter for SPAR calculation.
 */
@ApiModel(description = "The account/benchmark parameter for SPAR calculation.")
@JsonPropertyOrder({
  SPARIdentifier.JSON_PROPERTY_ID,
  SPARIdentifier.JSON_PROPERTY_RETURNTYPE,
  SPARIdentifier.JSON_PROPERTY_PREFIX
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class SPARIdentifier implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_RETURNTYPE = "returntype";
  private JsonNullable<String> returntype = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PREFIX = "prefix";
  private JsonNullable<String> prefix = JsonNullable.<String>undefined();

  public SPARIdentifier() { 
  }

  @JsonCreator
  public SPARIdentifier(
    @JsonProperty(value=JSON_PROPERTY_ID, required=true) String id
  ) {
    this();
    this.id = id;
  }

  public SPARIdentifier id(String id) {
    this.id = id;
    return this;
  }

   /**
   * User&#39;s FactSet account OR benchmark id.
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User's FactSet account OR benchmark id.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public SPARIdentifier returntype(String returntype) {
    this.returntype = JsonNullable.<String>of(returntype);
    return this;
  }

   /**
   * Account or benchmark return type.
   * @return returntype
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Account or benchmark return type.")
  @JsonIgnore

  public String getReturntype() {
        return returntype.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RETURNTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getReturntype_JsonNullable() {
    return returntype;
  }
  
  @JsonProperty(JSON_PROPERTY_RETURNTYPE)
  public void setReturntype_JsonNullable(JsonNullable<String> returntype) {
    this.returntype = returntype;
  }

  public void setReturntype(String returntype) {
    this.returntype = JsonNullable.<String>of(returntype);
  }


  public SPARIdentifier prefix(String prefix) {
    this.prefix = JsonNullable.<String>of(prefix);
    return this;
  }

   /**
   * Account or benchmark prefix.
   * @return prefix
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Account or benchmark prefix.")
  @JsonIgnore

  public String getPrefix() {
        return prefix.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPrefix_JsonNullable() {
    return prefix;
  }
  
  @JsonProperty(JSON_PROPERTY_PREFIX)
  public void setPrefix_JsonNullable(JsonNullable<String> prefix) {
    this.prefix = prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = JsonNullable.<String>of(prefix);
  }


  /**
   * Return true if this SPARIdentifier object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SPARIdentifier spARIdentifier = (SPARIdentifier) o;
    return Objects.equals(this.id, spARIdentifier.id) &&
        equalsNullable(this.returntype, spARIdentifier.returntype) &&
        equalsNullable(this.prefix, spARIdentifier.prefix);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hashCodeNullable(returntype), hashCodeNullable(prefix));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SPARIdentifier {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    returntype: ").append(toIndentedString(returntype)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

