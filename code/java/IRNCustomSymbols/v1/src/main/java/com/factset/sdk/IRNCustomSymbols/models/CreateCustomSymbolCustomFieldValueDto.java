/*
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IRNCustomSymbols.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IRNCustomSymbols.JSON;


/**
 * CreateCustomSymbolCustomFieldValueDto
 */
@JsonPropertyOrder({
  CreateCustomSymbolCustomFieldValueDto.JSON_PROPERTY_CODE,
  CreateCustomSymbolCustomFieldValueDto.JSON_PROPERTY_TEXT_VALUE,
  CreateCustomSymbolCustomFieldValueDto.JSON_PROPERTY_NUMERIC_VALUE,
  CreateCustomSymbolCustomFieldValueDto.JSON_PROPERTY_DATE_VALUE,
  CreateCustomSymbolCustomFieldValueDto.JSON_PROPERTY_EXTENDED_TEXT_VALUE,
  CreateCustomSymbolCustomFieldValueDto.JSON_PROPERTY_OPTION_VALUES,
  CreateCustomSymbolCustomFieldValueDto.JSON_PROPERTY_CONTACT_IDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class CreateCustomSymbolCustomFieldValueDto implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_TEXT_VALUE = "textValue";
  private JsonNullable<String> textValue = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_NUMERIC_VALUE = "numericValue";
  private JsonNullable<Double> numericValue = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_DATE_VALUE = "dateValue";
  private JsonNullable<String> dateValue = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_EXTENDED_TEXT_VALUE = "extendedTextValue";
  private JsonNullable<String> extendedTextValue = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_OPTION_VALUES = "optionValues";
  private JsonNullable<java.util.List<String>> optionValues = JsonNullable.<java.util.List<String>>undefined();

  public static final String JSON_PROPERTY_CONTACT_IDS = "contactIds";
  private JsonNullable<java.util.List<java.util.UUID>> contactIds = JsonNullable.<java.util.List<java.util.UUID>>undefined();

  public CreateCustomSymbolCustomFieldValueDto() { 
  }

  @JsonCreator
  public CreateCustomSymbolCustomFieldValueDto(
    @JsonProperty(value=JSON_PROPERTY_CODE, required=true) String code
  ) {
    this();
    this.code = code;
  }

  public CreateCustomSymbolCustomFieldValueDto code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public CreateCustomSymbolCustomFieldValueDto textValue(String textValue) {
    this.textValue = JsonNullable.<String>of(textValue);
    return this;
  }

   /**
   * Get textValue
   * @return textValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getTextValue() {
        return textValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEXT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTextValue_JsonNullable() {
    return textValue;
  }
  
  @JsonProperty(JSON_PROPERTY_TEXT_VALUE)
  public void setTextValue_JsonNullable(JsonNullable<String> textValue) {
    this.textValue = textValue;
  }

  public void setTextValue(String textValue) {
    this.textValue = JsonNullable.<String>of(textValue);
  }


  public CreateCustomSymbolCustomFieldValueDto numericValue(Double numericValue) {
    this.numericValue = JsonNullable.<Double>of(numericValue);
    return this;
  }

   /**
   * Get numericValue
   * @return numericValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public Double getNumericValue() {
        return numericValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NUMERIC_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getNumericValue_JsonNullable() {
    return numericValue;
  }
  
  @JsonProperty(JSON_PROPERTY_NUMERIC_VALUE)
  public void setNumericValue_JsonNullable(JsonNullable<Double> numericValue) {
    this.numericValue = numericValue;
  }

  public void setNumericValue(Double numericValue) {
    this.numericValue = JsonNullable.<Double>of(numericValue);
  }


  public CreateCustomSymbolCustomFieldValueDto dateValue(String dateValue) {
    this.dateValue = JsonNullable.<String>of(dateValue);
    return this;
  }

   /**
   * Get dateValue
   * @return dateValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getDateValue() {
        return dateValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DATE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDateValue_JsonNullable() {
    return dateValue;
  }
  
  @JsonProperty(JSON_PROPERTY_DATE_VALUE)
  public void setDateValue_JsonNullable(JsonNullable<String> dateValue) {
    this.dateValue = dateValue;
  }

  public void setDateValue(String dateValue) {
    this.dateValue = JsonNullable.<String>of(dateValue);
  }


  public CreateCustomSymbolCustomFieldValueDto extendedTextValue(String extendedTextValue) {
    this.extendedTextValue = JsonNullable.<String>of(extendedTextValue);
    return this;
  }

   /**
   * Get extendedTextValue
   * @return extendedTextValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getExtendedTextValue() {
        return extendedTextValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXTENDED_TEXT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getExtendedTextValue_JsonNullable() {
    return extendedTextValue;
  }
  
  @JsonProperty(JSON_PROPERTY_EXTENDED_TEXT_VALUE)
  public void setExtendedTextValue_JsonNullable(JsonNullable<String> extendedTextValue) {
    this.extendedTextValue = extendedTextValue;
  }

  public void setExtendedTextValue(String extendedTextValue) {
    this.extendedTextValue = JsonNullable.<String>of(extendedTextValue);
  }


  public CreateCustomSymbolCustomFieldValueDto optionValues(java.util.List<String> optionValues) {
    this.optionValues = JsonNullable.<java.util.List<String>>of(optionValues);
    return this;
  }

  public CreateCustomSymbolCustomFieldValueDto addOptionValuesItem(String optionValuesItem) {
    if (this.optionValues == null || !this.optionValues.isPresent()) {
      this.optionValues = JsonNullable.<java.util.List<String>>of(new java.util.ArrayList<>());
    }
    try {
      this.optionValues.get().add(optionValuesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get optionValues
   * @return optionValues
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.List<String> getOptionValues() {
        return optionValues.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_OPTION_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<String>> getOptionValues_JsonNullable() {
    return optionValues;
  }
  
  @JsonProperty(JSON_PROPERTY_OPTION_VALUES)
  public void setOptionValues_JsonNullable(JsonNullable<java.util.List<String>> optionValues) {
    this.optionValues = optionValues;
  }

  public void setOptionValues(java.util.List<String> optionValues) {
    this.optionValues = JsonNullable.<java.util.List<String>>of(optionValues);
  }


  public CreateCustomSymbolCustomFieldValueDto contactIds(java.util.List<java.util.UUID> contactIds) {
    this.contactIds = JsonNullable.<java.util.List<java.util.UUID>>of(contactIds);
    return this;
  }

  public CreateCustomSymbolCustomFieldValueDto addContactIdsItem(java.util.UUID contactIdsItem) {
    if (this.contactIds == null || !this.contactIds.isPresent()) {
      this.contactIds = JsonNullable.<java.util.List<java.util.UUID>>of(new java.util.ArrayList<>());
    }
    try {
      this.contactIds.get().add(contactIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get contactIds
   * @return contactIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.List<java.util.UUID> getContactIds() {
        return contactIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONTACT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<java.util.UUID>> getContactIds_JsonNullable() {
    return contactIds;
  }
  
  @JsonProperty(JSON_PROPERTY_CONTACT_IDS)
  public void setContactIds_JsonNullable(JsonNullable<java.util.List<java.util.UUID>> contactIds) {
    this.contactIds = contactIds;
  }

  public void setContactIds(java.util.List<java.util.UUID> contactIds) {
    this.contactIds = JsonNullable.<java.util.List<java.util.UUID>>of(contactIds);
  }


  /**
   * Return true if this CreateCustomSymbolCustomFieldValueDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCustomSymbolCustomFieldValueDto createCustomSymbolCustomFieldValueDto = (CreateCustomSymbolCustomFieldValueDto) o;
    return Objects.equals(this.code, createCustomSymbolCustomFieldValueDto.code) &&
        equalsNullable(this.textValue, createCustomSymbolCustomFieldValueDto.textValue) &&
        equalsNullable(this.numericValue, createCustomSymbolCustomFieldValueDto.numericValue) &&
        equalsNullable(this.dateValue, createCustomSymbolCustomFieldValueDto.dateValue) &&
        equalsNullable(this.extendedTextValue, createCustomSymbolCustomFieldValueDto.extendedTextValue) &&
        equalsNullable(this.optionValues, createCustomSymbolCustomFieldValueDto.optionValues) &&
        equalsNullable(this.contactIds, createCustomSymbolCustomFieldValueDto.contactIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, hashCodeNullable(textValue), hashCodeNullable(numericValue), hashCodeNullable(dateValue), hashCodeNullable(extendedTextValue), hashCodeNullable(optionValues), hashCodeNullable(contactIds));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCustomSymbolCustomFieldValueDto {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    textValue: ").append(toIndentedString(textValue)).append("\n");
    sb.append("    numericValue: ").append(toIndentedString(numericValue)).append("\n");
    sb.append("    dateValue: ").append(toIndentedString(dateValue)).append("\n");
    sb.append("    extendedTextValue: ").append(toIndentedString(extendedTextValue)).append("\n");
    sb.append("    optionValues: ").append(toIndentedString(optionValues)).append("\n");
    sb.append("    contactIds: ").append(toIndentedString(contactIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

