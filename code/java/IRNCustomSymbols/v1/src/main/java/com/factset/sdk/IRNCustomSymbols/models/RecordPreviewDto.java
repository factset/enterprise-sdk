/*
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IRNCustomSymbols.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IRNCustomSymbols.JSON;


/**
 * RecordPreviewDto
 */
@JsonPropertyOrder({
  RecordPreviewDto.JSON_PROPERTY_NOTE_GUID,
  RecordPreviewDto.JSON_PROPERTY_MEETING_GUID,
  RecordPreviewDto.JSON_PROPERTY_TITLE,
  RecordPreviewDto.JSON_PROPERTY_DATE,
  RecordPreviewDto.JSON_PROPERTY_SUBJECT_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class RecordPreviewDto implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NOTE_GUID = "noteGuid";
  private JsonNullable<java.util.UUID> noteGuid = JsonNullable.<java.util.UUID>undefined();

  public static final String JSON_PROPERTY_MEETING_GUID = "meetingGuid";
  private JsonNullable<java.util.UUID> meetingGuid = JsonNullable.<java.util.UUID>undefined();

  public static final String JSON_PROPERTY_TITLE = "title";
  private JsonNullable<String> title = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DATE = "date";
  private OffsetDateTime date;

  public static final String JSON_PROPERTY_SUBJECT_NAME = "subjectName";
  private JsonNullable<String> subjectName = JsonNullable.<String>undefined();

  public RecordPreviewDto() { 
  }

  public RecordPreviewDto noteGuid(java.util.UUID noteGuid) {
    this.noteGuid = JsonNullable.<java.util.UUID>of(noteGuid);
    return this;
  }

   /**
   * Get noteGuid
   * @return noteGuid
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.UUID getNoteGuid() {
        return noteGuid.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NOTE_GUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.UUID> getNoteGuid_JsonNullable() {
    return noteGuid;
  }
  
  @JsonProperty(JSON_PROPERTY_NOTE_GUID)
  public void setNoteGuid_JsonNullable(JsonNullable<java.util.UUID> noteGuid) {
    this.noteGuid = noteGuid;
  }

  public void setNoteGuid(java.util.UUID noteGuid) {
    this.noteGuid = JsonNullable.<java.util.UUID>of(noteGuid);
  }


  public RecordPreviewDto meetingGuid(java.util.UUID meetingGuid) {
    this.meetingGuid = JsonNullable.<java.util.UUID>of(meetingGuid);
    return this;
  }

   /**
   * Get meetingGuid
   * @return meetingGuid
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.UUID getMeetingGuid() {
        return meetingGuid.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MEETING_GUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.UUID> getMeetingGuid_JsonNullable() {
    return meetingGuid;
  }
  
  @JsonProperty(JSON_PROPERTY_MEETING_GUID)
  public void setMeetingGuid_JsonNullable(JsonNullable<java.util.UUID> meetingGuid) {
    this.meetingGuid = meetingGuid;
  }

  public void setMeetingGuid(java.util.UUID meetingGuid) {
    this.meetingGuid = JsonNullable.<java.util.UUID>of(meetingGuid);
  }


  public RecordPreviewDto title(String title) {
    this.title = JsonNullable.<String>of(title);
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getTitle() {
        return title.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTitle_JsonNullable() {
    return title;
  }
  
  @JsonProperty(JSON_PROPERTY_TITLE)
  public void setTitle_JsonNullable(JsonNullable<String> title) {
    this.title = title;
  }

  public void setTitle(String title) {
    this.title = JsonNullable.<String>of(title);
  }


  public RecordPreviewDto date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public RecordPreviewDto subjectName(String subjectName) {
    this.subjectName = JsonNullable.<String>of(subjectName);
    return this;
  }

   /**
   * Get subjectName
   * @return subjectName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getSubjectName() {
        return subjectName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSubjectName_JsonNullable() {
    return subjectName;
  }
  
  @JsonProperty(JSON_PROPERTY_SUBJECT_NAME)
  public void setSubjectName_JsonNullable(JsonNullable<String> subjectName) {
    this.subjectName = subjectName;
  }

  public void setSubjectName(String subjectName) {
    this.subjectName = JsonNullable.<String>of(subjectName);
  }


  /**
   * Return true if this RecordPreviewDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordPreviewDto recordPreviewDto = (RecordPreviewDto) o;
    return equalsNullable(this.noteGuid, recordPreviewDto.noteGuid) &&
        equalsNullable(this.meetingGuid, recordPreviewDto.meetingGuid) &&
        equalsNullable(this.title, recordPreviewDto.title) &&
        Objects.equals(this.date, recordPreviewDto.date) &&
        equalsNullable(this.subjectName, recordPreviewDto.subjectName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(noteGuid), hashCodeNullable(meetingGuid), hashCodeNullable(title), date, hashCodeNullable(subjectName));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordPreviewDto {\n");
    sb.append("    noteGuid: ").append(toIndentedString(noteGuid)).append("\n");
    sb.append("    meetingGuid: ").append(toIndentedString(meetingGuid)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    subjectName: ").append(toIndentedString(subjectName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

