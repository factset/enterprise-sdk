/*
 * FactSet Formula API
 *  **FactSet Formula API**  FactSet's Formula API is a modern, flexible, formula-based API that enables users to access FactSet's wide range of financial data and content. The API offers two endpoints, one optimized for time-series analysis and one designed for cross-sectional analysis, providing users a simplified interface into FactSet's expansive offering. By providing two endpoints, it allows for the optimization of user workflows, while reducing complexity.  Leverage the power and flexibility of the Formula API to -   * Pull data from across most content sets that a user has access to in a single request   * Include business logic and mathematical operations in request   * Submit a dynamic universe in both endpoints   * Return the fsymId to easily combine with other FactSet content / products   * Set the trading calendar   * Define custom display names  **Formula API Request Builder**  The Formula API Request Builder provides users everything they need to form a Formula API request. In the Request Builder, you can select identifiers, build a universe expression, select FQL or Screening formulas, easily apply business logic and mathematical functions to the FQL or Screening formulas, specify optional parameters, and construct a GET or POST request. The Request Builder eliminates the need to have previous FQL and Screening knowledge and allows you to quickly find your desired data items and form the request.  The Formula API Request Builder can be accessed by navigating to [https://developer.factset.com/formula-api-request-builder](https://developer.factset.com/formula-api-request-builder) and logging in using your FactSet.net ID. When using the Request Builder to construct requests for the one of the Formula API's endpoints, be sure to toggle to the correct endpoint at the top of the page.  **How to Check the Health and Availability of the Formula API**  Please use the below endpoint to check the health and availability of the Formula API. You must be authorized for this API to use the Health endpoint.  [https://api.factset.com/formula-api/health](https://api.factset.com/formula-api/health)  **How to Programmatically Download API Specification File**  You can download the FactSet Formula API Specification File in .yaml. using the \"Download Spec\" button to the right of the version number. This specification can then be used for Codegen to create your own SDKs. 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Formula.models;

import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.Formula.models.UnifiedResultObjectFlattenedAddl;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Formula.JSON;


/**
 *  Data model returned when the parameter **flatten&#x3D;Y** is used in the request. This flattened, simplified JSON data returned from **flatten&#x3D;Y** can be conceptualized as a table (rows and columns) where each data object in the result is a row in the table and the field names are the column names.  There will be one data object for each request containing the request, fsymId if requested, and Key-Value pairs for each data item (formula).  ---  Formulas that have associated dates (TIMESERIES objectType in the standard **flatten&#x3D;N** response model) will result in a data object for each date for each requestId.  **flatten&#x3D;N TIMESERIES Representation** &#x60;&#x60;&#x60;json [   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formula\&quot;: \&quot;formulaName1\&quot;,     \&quot;result\&quot;: {         \&quot;values\&quot;: [a,b],         \&quot;dates\&quot;: [DATE1,DATE2]       },     \&quot;objectType\&quot;: \&quot;TIMESERIES\&quot;,     \&quot;dataType\&quot;: \&quot;DOUBLE\&quot;   },   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formula\&quot;: \&quot;formulaName2\&quot;,     \&quot;result\&quot;: {         \&quot;values\&quot;: [c,d],         \&quot;dates\&quot;: [DATE2,DATE3]       },     \&quot;objectType\&quot;: \&quot;TIMESERIES\&quot;,     \&quot;dataType\&quot;: \&quot;DOUBLE\&quot;   } ] &#x60;&#x60;&#x60;  **flatten&#x3D;Y TIMESERIES Representation** &#x60;&#x60;&#x60;json [   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formulaName1\&quot;: a,     \&quot;formulaName2\&quot;: null,     \&quot;date\&quot;: DATE1   },   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formulaName1\&quot;: b,     \&quot;formulaName2\&quot;: c,     \&quot;date\&quot;: DATE2   },   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formulaName1\&quot;: null,     \&quot;formulaName2\&quot;: d,     \&quot;date\&quot;: DATE3   } ] &#x60;&#x60;&#x60; ---  Formulas that result in an array (no associated dates, ARRAY objectType in the standard **flatten&#x3D;N** response model) can be thought of as a column in a table. Each element in the array will be in a separate data object. The first element of the array starts in the first data object for that requestId and then then the second element of the array in the second data object for that requestId and so on (regardless of dates from other formulas).  **flatten&#x3D;N ARRAY Representation** &#x60;&#x60;&#x60;json [   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formula\&quot;: \&quot;formulaName\&quot;,     \&quot;result\&quot;: [a,b,c],     \&quot;objectType\&quot;: \&quot;ARRAY\&quot;,     \&quot;dataType\&quot;: \&quot;DOUBLE\&quot;   } ] &#x60;&#x60;&#x60;  **flatten&#x3D;Y ARRAY Representation** &#x60;&#x60;&#x60;json [   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formulaName\&quot;: a,   },   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formulaName\&quot;: b,   },   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formulaName\&quot;: c,   } ] &#x60;&#x60;&#x60; --- Scalar data items (SCALAR objectType in the standard **flatten&#x3D;N** response model) will be repeated in each data object for the requestId.  **flatten&#x3D;N SCALAR Representation** &#x60;&#x60;&#x60;json [   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formula\&quot;: \&quot;formulaName\&quot;,     \&quot;result\&quot;: a,     \&quot;objectType\&quot;: \&quot;ARRAY\&quot;,     \&quot;dataType\&quot;: \&quot;DOUBLE\&quot;   } ] &#x60;&#x60;&#x60;  **flatten&#x3D;Y SCALAR Representation** &#x60;&#x60;&#x60;json [   {     \&quot;requestId\&quot;: \&quot;id\&quot;,     \&quot;formulaName\&quot;: a,   } ] &#x60;&#x60;&#x60; --- Formulas that result in a matrix (2 dimensional array, MATRIX objectType in the standard **flatten&#x3D;N** response model) can be thought of as returning a table where each array in the array of arrays is a row in the table. This can be extended to the flattened result structure where each data object is a row in a table.  The formula will have as many attributes (appended by [n]) as number of columns in the matrix result.  **flatten&#x3D;N MATRIX Representation** &#x60;&#x60;&#x60;json [   {     \&quot;requestId\&quot;: \&quot;id\&quot;     \&quot;formula\&quot;: \&quot;formulaName\&quot;,     \&quot;result\&quot;: [         [a,b,c],         [d,e,f]       ],     \&quot;objectType\&quot;: \&quot;MATRIX\&quot;,     \&quot;dataType\&quot;: \&quot;DOUBLE\&quot;   } ] &#x60;&#x60;&#x60;  **flatten&#x3D;Y MATRIX Representation** &#x60;&#x60;&#x60;json [   {     \&quot;requestId\&quot;: \&quot;id\&quot;     \&quot;formulaName[0]\&quot;: a,     \&quot;formulaName[1]\&quot;: b,     \&quot;formulaName[2]\&quot;: c   },   {     \&quot;requestId\&quot;: \&quot;id\&quot;     \&quot;formulaName[0]\&quot;: d,     \&quot;formulaName[1]\&quot;: e,     \&quot;formulaName[2]\&quot;: f   } ] &#x60;&#x60;&#x60; --- 
 */
@ApiModel(description = " Data model returned when the parameter **flatten=Y** is used in the request. This flattened, simplified JSON data returned from **flatten=Y** can be conceptualized as a table (rows and columns) where each data object in the result is a row in the table and the field names are the column names.  There will be one data object for each request containing the request, fsymId if requested, and Key-Value pairs for each data item (formula).  ---  Formulas that have associated dates (TIMESERIES objectType in the standard **flatten=N** response model) will result in a data object for each date for each requestId.  **flatten=N TIMESERIES Representation** ```json [   {     \"requestId\": \"id\",     \"formula\": \"formulaName1\",     \"result\": {         \"values\": [a,b],         \"dates\": [DATE1,DATE2]       },     \"objectType\": \"TIMESERIES\",     \"dataType\": \"DOUBLE\"   },   {     \"requestId\": \"id\",     \"formula\": \"formulaName2\",     \"result\": {         \"values\": [c,d],         \"dates\": [DATE2,DATE3]       },     \"objectType\": \"TIMESERIES\",     \"dataType\": \"DOUBLE\"   } ] ```  **flatten=Y TIMESERIES Representation** ```json [   {     \"requestId\": \"id\",     \"formulaName1\": a,     \"formulaName2\": null,     \"date\": DATE1   },   {     \"requestId\": \"id\",     \"formulaName1\": b,     \"formulaName2\": c,     \"date\": DATE2   },   {     \"requestId\": \"id\",     \"formulaName1\": null,     \"formulaName2\": d,     \"date\": DATE3   } ] ``` ---  Formulas that result in an array (no associated dates, ARRAY objectType in the standard **flatten=N** response model) can be thought of as a column in a table. Each element in the array will be in a separate data object. The first element of the array starts in the first data object for that requestId and then then the second element of the array in the second data object for that requestId and so on (regardless of dates from other formulas).  **flatten=N ARRAY Representation** ```json [   {     \"requestId\": \"id\",     \"formula\": \"formulaName\",     \"result\": [a,b,c],     \"objectType\": \"ARRAY\",     \"dataType\": \"DOUBLE\"   } ] ```  **flatten=Y ARRAY Representation** ```json [   {     \"requestId\": \"id\",     \"formulaName\": a,   },   {     \"requestId\": \"id\",     \"formulaName\": b,   },   {     \"requestId\": \"id\",     \"formulaName\": c,   } ] ``` --- Scalar data items (SCALAR objectType in the standard **flatten=N** response model) will be repeated in each data object for the requestId.  **flatten=N SCALAR Representation** ```json [   {     \"requestId\": \"id\",     \"formula\": \"formulaName\",     \"result\": a,     \"objectType\": \"ARRAY\",     \"dataType\": \"DOUBLE\"   } ] ```  **flatten=Y SCALAR Representation** ```json [   {     \"requestId\": \"id\",     \"formulaName\": a,   } ] ``` --- Formulas that result in a matrix (2 dimensional array, MATRIX objectType in the standard **flatten=N** response model) can be thought of as returning a table where each array in the array of arrays is a row in the table. This can be extended to the flattened result structure where each data object is a row in a table.  The formula will have as many attributes (appended by [n]) as number of columns in the matrix result.  **flatten=N MATRIX Representation** ```json [   {     \"requestId\": \"id\"     \"formula\": \"formulaName\",     \"result\": [         [a,b,c],         [d,e,f]       ],     \"objectType\": \"MATRIX\",     \"dataType\": \"DOUBLE\"   } ] ```  **flatten=Y MATRIX Representation** ```json [   {     \"requestId\": \"id\"     \"formulaName[0]\": a,     \"formulaName[1]\": b,     \"formulaName[2]\": c   },   {     \"requestId\": \"id\"     \"formulaName[0]\": d,     \"formulaName[1]\": e,     \"formulaName[2]\": f   } ] ``` --- ")
@JsonPropertyOrder({
  UnifiedResultObjectFlattened.JSON_PROPERTY_REQUEST_ID,
  UnifiedResultObjectFlattened.JSON_PROPERTY_FSYM_ID,
  UnifiedResultObjectFlattened.JSON_PROPERTY_DATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class UnifiedResultObjectFlattened implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public static final String JSON_PROPERTY_FSYM_ID = "fsymId";
  private JsonNullable<String> fsymId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DATE = "date";
  private JsonNullable<LocalDate> date = JsonNullable.<LocalDate>undefined();

  public UnifiedResultObjectFlattened() { 
  }

  @JsonCreator
  public UnifiedResultObjectFlattened(
    @JsonProperty(value=JSON_PROPERTY_REQUEST_ID, required=true) String requestId
  ) {
    this();
    this.requestId = requestId;
  }

  public UnifiedResultObjectFlattened requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier requested.
   * @return requestId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "IBM-US", required = true, value = "Identifier requested.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public UnifiedResultObjectFlattened fsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
    return this;
  }

   /**
   * The **fsymId** field returned is the FactSet Default Permanent Identifier for the &#x60;requestId&#x60;. For all supported &#x60;requestId&#x60; symbol types, the &#x60;fsymId&#x60; parameter will return the Regional Level PermId &#39;-R&#39; which identifies the security&#39;s best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted &#x60;requestId&#x60; symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881). Included only if the &#x60;fsymId&#x60; parameter is set to Y. 
   * @return fsymId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "SJY281-R", value = "The **fsymId** field returned is the FactSet Default Permanent Identifier for the `requestId`. For all supported `requestId` symbol types, the `fsymId` parameter will return the Regional Level PermId '-R' which identifies the security's best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted `requestId` symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881). Included only if the `fsymId` parameter is set to Y. ")
  @JsonIgnore

  public String getFsymId() {
        return fsymId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFsymId_JsonNullable() {
    return fsymId;
  }
  
  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  public void setFsymId_JsonNullable(JsonNullable<String> fsymId) {
    this.fsymId = fsymId;
  }

  public void setFsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
  }


  public UnifiedResultObjectFlattened date(LocalDate date) {
    this.date = JsonNullable.<LocalDate>of(date);
    return this;
  }

   /**
   * Date associated with FQL formula.
   * @return date
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Mon Oct 18 00:00:00 UTC 2021", value = "Date associated with FQL formula.")
  @JsonIgnore

  public LocalDate getDate() {
        return date.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getDate_JsonNullable() {
    return date;
  }
  
  @JsonProperty(JSON_PROPERTY_DATE)
  public void setDate_JsonNullable(JsonNullable<LocalDate> date) {
    this.date = date;
  }

  public void setDate(LocalDate date) {
    this.date = JsonNullable.<LocalDate>of(date);
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, UnifiedResultObjectFlattenedAddl> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  @JsonAnySetter
  public UnifiedResultObjectFlattened putAdditionalProperty(String key, UnifiedResultObjectFlattenedAddl value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, UnifiedResultObjectFlattenedAddl>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  @JsonAnyGetter
  public Map<String, UnifiedResultObjectFlattenedAddl> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public UnifiedResultObjectFlattenedAddl getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }

  /**
   * Return true if this UnifiedResultObjectFlattened object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnifiedResultObjectFlattened unifiedResultObjectFlattened = (UnifiedResultObjectFlattened) o;
    return Objects.equals(this.requestId, unifiedResultObjectFlattened.requestId) &&
        equalsNullable(this.fsymId, unifiedResultObjectFlattened.fsymId) &&
        equalsNullable(this.date, unifiedResultObjectFlattened.date)&&
        Objects.equals(this.additionalProperties, unifiedResultObjectFlattened.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, hashCodeNullable(fsymId), hashCodeNullable(date), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnifiedResultObjectFlattened {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    fsymId: ").append(toIndentedString(fsymId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

