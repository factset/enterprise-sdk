/*
 * EVENTS AND TRANSCRIPTS API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p>  
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsandTranscripts.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsandTranscripts.JSON;


/**
 * - Data is available from 2002. - If users provide future dates in requests, the API will not return any data. 
 */
@ApiModel(description = "- Data is available from 2002. - If users provide future dates in requests, the API will not return any data. ")
@JsonPropertyOrder({
  CompanyEventRequestDataDateTime.JSON_PROPERTY_START,
  CompanyEventRequestDataDateTime.JSON_PROPERTY_END
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class CompanyEventRequestDataDateTime implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_START = "start";
  private OffsetDateTime start;

  public static final String JSON_PROPERTY_END = "end";
  private OffsetDateTime end;

  public CompanyEventRequestDataDateTime() { 
  }

  @JsonCreator
  public CompanyEventRequestDataDateTime(
    @JsonProperty(value=JSON_PROPERTY_START, required=true) OffsetDateTime start, 
    @JsonProperty(value=JSON_PROPERTY_END, required=true) OffsetDateTime end
  ) {
    this();
    this.start = start;
    this.end = end;
  }

  public CompanyEventRequestDataDateTime start(OffsetDateTime start) {
    this.start = start;
    return this;
  }

   /**
   * Start time of the event in ISO 8601 format. The maximum dateTime limit between start and end is upto 90 days.
   * @return start
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "2022-12-01T00:00Z", required = true, value = "Start time of the event in ISO 8601 format. The maximum dateTime limit between start and end is upto 90 days.")
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStart(OffsetDateTime start) {
    this.start = start;
  }


  public CompanyEventRequestDataDateTime end(OffsetDateTime end) {
    this.end = end;
    return this;
  }

   /**
   * End time of the event in ISO 8601 format. The maximum dateTime limit between start and end is upto 90 days.
   * @return end
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "2022-12-31T22:59:02Z", required = true, value = "End time of the event in ISO 8601 format. The maximum dateTime limit between start and end is upto 90 days.")
  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getEnd() {
    return end;
  }


  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnd(OffsetDateTime end) {
    this.end = end;
  }


  /**
   * Return true if this CompanyEventRequest_data_dateTime object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyEventRequestDataDateTime companyEventRequestDataDateTime = (CompanyEventRequestDataDateTime) o;
    return Objects.equals(this.start, companyEventRequestDataDateTime.start) &&
        Objects.equals(this.end, companyEventRequestDataDateTime.end);
  }

  @Override
  public int hashCode() {
    return Objects.hash(start, end);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyEventRequestDataDateTime {\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

