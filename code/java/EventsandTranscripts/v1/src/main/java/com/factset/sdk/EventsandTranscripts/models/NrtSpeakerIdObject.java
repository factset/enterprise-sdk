/*
 * EVENTS AND TRANSCRIPTS API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p>  
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsandTranscripts.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsandTranscripts.JSON;


/**
 * NrtSpeakerIdObject
 */
@JsonPropertyOrder({
  NrtSpeakerIdObject.JSON_PROPERTY_AUDIO_SOURCE_ID,
  NrtSpeakerIdObject.JSON_PROPERTY_SPEAKER_START_OFFSET,
  NrtSpeakerIdObject.JSON_PROPERTY_SPEAKER_ID,
  NrtSpeakerIdObject.JSON_PROPERTY_CONFIDENCE_SCORE,
  NrtSpeakerIdObject.JSON_PROPERTY_AFFILIATION_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class NrtSpeakerIdObject implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AUDIO_SOURCE_ID = "audioSourceId";
  private JsonNullable<Integer> audioSourceId = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_SPEAKER_START_OFFSET = "speakerStartOffset";
  private JsonNullable<BigDecimal> speakerStartOffset = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_SPEAKER_ID = "speakerId";
  private JsonNullable<String> speakerId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CONFIDENCE_SCORE = "confidenceScore";
  private JsonNullable<BigDecimal> confidenceScore = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_AFFILIATION_ID = "affiliationId";
  private JsonNullable<String> affiliationId = JsonNullable.<String>undefined();

  public NrtSpeakerIdObject() { 
  }

  public NrtSpeakerIdObject audioSourceId(Integer audioSourceId) {
    this.audioSourceId = JsonNullable.<Integer>of(audioSourceId);
    return this;
  }

   /**
   * The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSourceIDs.
   * @return audioSourceId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSourceIDs.")
  @JsonIgnore

  public Integer getAudioSourceId() {
        return audioSourceId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUDIO_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAudioSourceId_JsonNullable() {
    return audioSourceId;
  }
  
  @JsonProperty(JSON_PROPERTY_AUDIO_SOURCE_ID)
  public void setAudioSourceId_JsonNullable(JsonNullable<Integer> audioSourceId) {
    this.audioSourceId = audioSourceId;
  }

  public void setAudioSourceId(Integer audioSourceId) {
    this.audioSourceId = JsonNullable.<Integer>of(audioSourceId);
  }


  public NrtSpeakerIdObject speakerStartOffset(BigDecimal speakerStartOffset) {
    this.speakerStartOffset = JsonNullable.<BigDecimal>of(speakerStartOffset);
    return this;
  }

   /**
   * The number of seconds into the call when a speaker starts / is speaking.
   * @return speakerStartOffset
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The number of seconds into the call when a speaker starts / is speaking.")
  @JsonIgnore

  public BigDecimal getSpeakerStartOffset() {
        return speakerStartOffset.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SPEAKER_START_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getSpeakerStartOffset_JsonNullable() {
    return speakerStartOffset;
  }
  
  @JsonProperty(JSON_PROPERTY_SPEAKER_START_OFFSET)
  public void setSpeakerStartOffset_JsonNullable(JsonNullable<BigDecimal> speakerStartOffset) {
    this.speakerStartOffset = speakerStartOffset;
  }

  public void setSpeakerStartOffset(BigDecimal speakerStartOffset) {
    this.speakerStartOffset = JsonNullable.<BigDecimal>of(speakerStartOffset);
  }


  public NrtSpeakerIdObject speakerId(String speakerId) {
    this.speakerId = JsonNullable.<String>of(speakerId);
    return this;
  }

   /**
   * A unique identifier for a speaker. You can find speakerIds within [FactSet People API](https://developer.factset.com/api-catalog/factset-people-api). 
   * @return speakerId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "A unique identifier for a speaker. You can find speakerIds within [FactSet People API](https://developer.factset.com/api-catalog/factset-people-api). ")
  @JsonIgnore

  public String getSpeakerId() {
        return speakerId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SPEAKER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSpeakerId_JsonNullable() {
    return speakerId;
  }
  
  @JsonProperty(JSON_PROPERTY_SPEAKER_ID)
  public void setSpeakerId_JsonNullable(JsonNullable<String> speakerId) {
    this.speakerId = speakerId;
  }

  public void setSpeakerId(String speakerId) {
    this.speakerId = JsonNullable.<String>of(speakerId);
  }


  public NrtSpeakerIdObject confidenceScore(BigDecimal confidenceScore) {
    this.confidenceScore = JsonNullable.<BigDecimal>of(confidenceScore);
    return this;
  }

   /**
   * The  Confidence score similarity for a particular speaker.  A score &gt;&#x3D; 0.49 while a speaker is speaking can be considered as a high confidence in the predicted speaker.  Only the SpeakerIDs with the highest cosineScore are rendered in the result set.
   * @return confidenceScore
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The  Confidence score similarity for a particular speaker.  A score >= 0.49 while a speaker is speaking can be considered as a high confidence in the predicted speaker.  Only the SpeakerIDs with the highest cosineScore are rendered in the result set.")
  @JsonIgnore

  public BigDecimal getConfidenceScore() {
        return confidenceScore.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONFIDENCE_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getConfidenceScore_JsonNullable() {
    return confidenceScore;
  }
  
  @JsonProperty(JSON_PROPERTY_CONFIDENCE_SCORE)
  public void setConfidenceScore_JsonNullable(JsonNullable<BigDecimal> confidenceScore) {
    this.confidenceScore = confidenceScore;
  }

  public void setConfidenceScore(BigDecimal confidenceScore) {
    this.confidenceScore = JsonNullable.<BigDecimal>of(confidenceScore);
  }


  public NrtSpeakerIdObject affiliationId(String affiliationId) {
    this.affiliationId = JsonNullable.<String>of(affiliationId);
    return this;
  }

   /**
   * The affiliationId represents the entity ID associated with the organization or company to which the speaker is affiliated.
   * @return affiliationId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The affiliationId represents the entity ID associated with the organization or company to which the speaker is affiliated.")
  @JsonIgnore

  public String getAffiliationId() {
        return affiliationId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AFFILIATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAffiliationId_JsonNullable() {
    return affiliationId;
  }
  
  @JsonProperty(JSON_PROPERTY_AFFILIATION_ID)
  public void setAffiliationId_JsonNullable(JsonNullable<String> affiliationId) {
    this.affiliationId = affiliationId;
  }

  public void setAffiliationId(String affiliationId) {
    this.affiliationId = JsonNullable.<String>of(affiliationId);
  }


  /**
   * Return true if this NrtSpeakerIdObject object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NrtSpeakerIdObject nrtSpeakerIdObject = (NrtSpeakerIdObject) o;
    return equalsNullable(this.audioSourceId, nrtSpeakerIdObject.audioSourceId) &&
        equalsNullable(this.speakerStartOffset, nrtSpeakerIdObject.speakerStartOffset) &&
        equalsNullable(this.speakerId, nrtSpeakerIdObject.speakerId) &&
        equalsNullable(this.confidenceScore, nrtSpeakerIdObject.confidenceScore) &&
        equalsNullable(this.affiliationId, nrtSpeakerIdObject.affiliationId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(audioSourceId), hashCodeNullable(speakerStartOffset), hashCodeNullable(speakerId), hashCodeNullable(confidenceScore), hashCodeNullable(affiliationId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NrtSpeakerIdObject {\n");
    sb.append("    audioSourceId: ").append(toIndentedString(audioSourceId)).append("\n");
    sb.append("    speakerStartOffset: ").append(toIndentedString(speakerStartOffset)).append("\n");
    sb.append("    speakerId: ").append(toIndentedString(speakerId)).append("\n");
    sb.append("    confidenceScore: ").append(toIndentedString(confidenceScore)).append("\n");
    sb.append("    affiliationId: ").append(toIndentedString(affiliationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

