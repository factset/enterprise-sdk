/*
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsandTranscripts.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsandTranscripts.JSON;


/**
 * ResponseTypeData
 */
@JsonPropertyOrder({
  ResponseTypeData.JSON_PROPERTY_VERSION_ID,
  ResponseTypeData.JSON_PROPERTY_PRIMARY_IDS,
  ResponseTypeData.JSON_PROPERTY_ALL_IDS,
  ResponseTypeData.JSON_PROPERTY_REPORT_ID,
  ResponseTypeData.JSON_PROPERTY_EVENT_ID,
  ResponseTypeData.JSON_PROPERTY_HEADLINE,
  ResponseTypeData.JSON_PROPERTY_STORY_DATE_TIME,
  ResponseTypeData.JSON_PROPERTY_TRANSCRIPTS_URL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ResponseTypeData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_VERSION_ID = "versionId";
  private String versionId;

  public static final String JSON_PROPERTY_PRIMARY_IDS = "primaryIds";
  private java.util.List<String> primaryIds = null;

  public static final String JSON_PROPERTY_ALL_IDS = "allIds";
  private java.util.List<String> allIds = null;

  public static final String JSON_PROPERTY_REPORT_ID = "reportId";
  private String reportId;

  public static final String JSON_PROPERTY_EVENT_ID = "eventId";
  private String eventId;

  public static final String JSON_PROPERTY_HEADLINE = "headline";
  private String headline;

  public static final String JSON_PROPERTY_STORY_DATE_TIME = "storyDateTime";
  private OffsetDateTime storyDateTime;

  public static final String JSON_PROPERTY_TRANSCRIPTS_URL = "transcriptsUrl";
  private String transcriptsUrl;

  public ResponseTypeData() { 
  }

  public ResponseTypeData versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

   /**
   * Used to distinguish the corrected reports. As such, one &#x60;reportId&#x60; can have many &#x60;versionIds&#x60;.
   * @return versionId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Used to distinguish the corrected reports. As such, one `reportId` can have many `versionIds`.")
  @JsonProperty(JSON_PROPERTY_VERSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersionId() {
    return versionId;
  }


  @JsonProperty(JSON_PROPERTY_VERSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }


  public ResponseTypeData primaryIds(java.util.List<String> primaryIds) {
    this.primaryIds = primaryIds;
    return this;
  }

  public ResponseTypeData addPrimaryIdsItem(String primaryIdsItem) {
    if (this.primaryIds == null) {
      this.primaryIds = new java.util.ArrayList<>();
    }
    this.primaryIds.add(primaryIdsItem);
    return this;
  }

   /**
   * Refers to the main companies a particular document pertains to.
   * @return primaryIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Refers to the main companies a particular document pertains to.")
  @JsonProperty(JSON_PROPERTY_PRIMARY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getPrimaryIds() {
    return primaryIds;
  }


  @JsonProperty(JSON_PROPERTY_PRIMARY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimaryIds(java.util.List<String> primaryIds) {
    this.primaryIds = primaryIds;
  }


  public ResponseTypeData allIds(java.util.List<String> allIds) {
    this.allIds = allIds;
    return this;
  }

  public ResponseTypeData addAllIdsItem(String allIdsItem) {
    if (this.allIds == null) {
      this.allIds = new java.util.ArrayList<>();
    }
    this.allIds.add(allIdsItem);
    return this;
  }

   /**
   * Refers to all companies mentioned in the document. 
   * @return allIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Refers to all companies mentioned in the document. ")
  @JsonProperty(JSON_PROPERTY_ALL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getAllIds() {
    return allIds;
  }


  @JsonProperty(JSON_PROPERTY_ALL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllIds(java.util.List<String> allIds) {
    this.allIds = allIds;
  }


  public ResponseTypeData reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

   /**
   * This is a unique identifier for a specific transcript (audio or video) returned.
   * @return reportId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "This is a unique identifier for a specific transcript (audio or video) returned.")
  @JsonProperty(JSON_PROPERTY_REPORT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReportId() {
    return reportId;
  }


  @JsonProperty(JSON_PROPERTY_REPORT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public ResponseTypeData eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * ID of the conference call.
   * @return eventId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "ID of the conference call.")
  @JsonProperty(JSON_PROPERTY_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEventId() {
    return eventId;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public ResponseTypeData headline(String headline) {
    this.headline = headline;
    return this;
  }

   /**
   * Headline of the story.
   * @return headline
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Headline of the story.")
  @JsonProperty(JSON_PROPERTY_HEADLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHeadline() {
    return headline;
  }


  @JsonProperty(JSON_PROPERTY_HEADLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeadline(String headline) {
    this.headline = headline;
  }


  public ResponseTypeData storyDateTime(OffsetDateTime storyDateTime) {
    this.storyDateTime = storyDateTime;
    return this;
  }

   /**
   * Refers to either the date and time of the story, when it is available in workstation (in the specified timeZone) or the date and time FactSet received it from the vendor.
   * @return storyDateTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Refers to either the date and time of the story, when it is available in workstation (in the specified timeZone) or the date and time FactSet received it from the vendor.")
  @JsonProperty(JSON_PROPERTY_STORY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStoryDateTime() {
    return storyDateTime;
  }


  @JsonProperty(JSON_PROPERTY_STORY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoryDateTime(OffsetDateTime storyDateTime) {
    this.storyDateTime = storyDateTime;
  }


  public ResponseTypeData transcriptsUrl(String transcriptsUrl) {
    this.transcriptsUrl = transcriptsUrl;
    return this;
  }

   /**
   * This is the URL for downloading the document with an expiration duration of 24 hours.
   * @return transcriptsUrl
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "This is the URL for downloading the document with an expiration duration of 24 hours.")
  @JsonProperty(JSON_PROPERTY_TRANSCRIPTS_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTranscriptsUrl() {
    return transcriptsUrl;
  }


  @JsonProperty(JSON_PROPERTY_TRANSCRIPTS_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranscriptsUrl(String transcriptsUrl) {
    this.transcriptsUrl = transcriptsUrl;
  }


  /**
   * Return true if this ResponseTypeData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseTypeData responseTypeData = (ResponseTypeData) o;
    return Objects.equals(this.versionId, responseTypeData.versionId) &&
        Objects.equals(this.primaryIds, responseTypeData.primaryIds) &&
        Objects.equals(this.allIds, responseTypeData.allIds) &&
        Objects.equals(this.reportId, responseTypeData.reportId) &&
        Objects.equals(this.eventId, responseTypeData.eventId) &&
        Objects.equals(this.headline, responseTypeData.headline) &&
        Objects.equals(this.storyDateTime, responseTypeData.storyDateTime) &&
        Objects.equals(this.transcriptsUrl, responseTypeData.transcriptsUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(versionId, primaryIds, allIds, reportId, eventId, headline, storyDateTime, transcriptsUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseTypeData {\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    primaryIds: ").append(toIndentedString(primaryIds)).append("\n");
    sb.append("    allIds: ").append(toIndentedString(allIds)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    storyDateTime: ").append(toIndentedString(storyDateTime)).append("\n");
    sb.append("    transcriptsUrl: ").append(toIndentedString(transcriptsUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

