/*
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsandTranscripts.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsandTranscripts.JSON;


/**
 * ParticipantNrt
 */
@JsonPropertyOrder({
  ParticipantNrt.JSON_PROPERTY_ID,
  ParticipantNrt.JSON_PROPERTY_TYPE,
  ParticipantNrt.JSON_PROPERTY_AFFILIATION,
  ParticipantNrt.JSON_PROPERTY_AFFILIATION_ENTITY,
  ParticipantNrt.JSON_PROPERTY_ENTITY,
  ParticipantNrt.JSON_PROPERTY_TITLE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ParticipantNrt implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_AFFILIATION = "affiliation";
  private String affiliation;

  public static final String JSON_PROPERTY_AFFILIATION_ENTITY = "affiliationEntity";
  private String affiliationEntity;

  public static final String JSON_PROPERTY_ENTITY = "entity";
  private String entity;

  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;

  public ParticipantNrt() { 
  }

  public ParticipantNrt id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "6", value = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public ParticipantNrt type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "analyst", value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public ParticipantNrt affiliation(String affiliation) {
    this.affiliation = affiliation;
    return this;
  }

   /**
   * Get affiliation
   * @return affiliation
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Portman Ridge Finance Corp.", value = "")
  @JsonProperty(JSON_PROPERTY_AFFILIATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAffiliation() {
    return affiliation;
  }


  @JsonProperty(JSON_PROPERTY_AFFILIATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAffiliation(String affiliation) {
    this.affiliation = affiliation;
  }


  public ParticipantNrt affiliationEntity(String affiliationEntity) {
    this.affiliationEntity = affiliationEntity;
    return this;
  }

   /**
   * Get affiliationEntity
   * @return affiliationEntity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "06Q4HD-E", value = "")
  @JsonProperty(JSON_PROPERTY_AFFILIATION_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAffiliationEntity() {
    return affiliationEntity;
  }


  @JsonProperty(JSON_PROPERTY_AFFILIATION_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAffiliationEntity(String affiliationEntity) {
    this.affiliationEntity = affiliationEntity;
  }


  public ParticipantNrt entity(String entity) {
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0BVNWL-E", value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntity() {
    return entity;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntity(String entity) {
    this.entity = entity;
  }


  public ParticipantNrt title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Chief Investment Officer", value = "")
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(String title) {
    this.title = title;
  }


  /**
   * Return true if this ParticipantNrt object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParticipantNrt participantNrt = (ParticipantNrt) o;
    return Objects.equals(this.id, participantNrt.id) &&
        Objects.equals(this.type, participantNrt.type) &&
        Objects.equals(this.affiliation, participantNrt.affiliation) &&
        Objects.equals(this.affiliationEntity, participantNrt.affiliationEntity) &&
        Objects.equals(this.entity, participantNrt.entity) &&
        Objects.equals(this.title, participantNrt.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, affiliation, affiliationEntity, entity, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParticipantNrt {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    affiliation: ").append(toIndentedString(affiliation)).append("\n");
    sb.append("    affiliationEntity: ").append(toIndentedString(affiliationEntity)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

