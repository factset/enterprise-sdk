/*
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsandTranscripts.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsandTranscripts.JSON;


/**
 * Array of data objects
 */
@ApiModel(description = "Array of data objects")
@JsonPropertyOrder({
  Document.JSON_PROPERTY_PRIMARY_IDS,
  Document.JSON_PROPERTY_ALL_IDS,
  Document.JSON_PROPERTY_HEADLINE,
  Document.JSON_PROPERTY_STORY_DATE_TIME,
  Document.JSON_PROPERTY_CATEGORIES,
  Document.JSON_PROPERTY_TRANSCRIPT_INTELLIGENCE_URL,
  Document.JSON_PROPERTY_REPORT_ID,
  Document.JSON_PROPERTY_UPLOAD_DATE_TIME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Document implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PRIMARY_IDS = "primaryIds";
  private java.util.List<String> primaryIds = null;

  public static final String JSON_PROPERTY_ALL_IDS = "allIds";
  private java.util.List<String> allIds = null;

  public static final String JSON_PROPERTY_HEADLINE = "headline";
  private String headline;

  public static final String JSON_PROPERTY_STORY_DATE_TIME = "storyDateTime";
  private OffsetDateTime storyDateTime;

  public static final String JSON_PROPERTY_CATEGORIES = "categories";
  private java.util.List<String> categories = null;

  public static final String JSON_PROPERTY_TRANSCRIPT_INTELLIGENCE_URL = "transcriptIntelligenceUrl";
  private String transcriptIntelligenceUrl;

  public static final String JSON_PROPERTY_REPORT_ID = "reportId";
  private String reportId;

  public static final String JSON_PROPERTY_UPLOAD_DATE_TIME = "uploadDateTime";
  private OffsetDateTime uploadDateTime;

  public Document() { 
  }

  public Document primaryIds(java.util.List<String> primaryIds) {
    this.primaryIds = primaryIds;
    return this;
  }

  public Document addPrimaryIdsItem(String primaryIdsItem) {
    if (this.primaryIds == null) {
      this.primaryIds = new java.util.ArrayList<>();
    }
    this.primaryIds.add(primaryIdsItem);
    return this;
  }

   /**
   * Refers to the main companies a particular document pertains to.
   * @return primaryIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Refers to the main companies a particular document pertains to.")
  @JsonProperty(JSON_PROPERTY_PRIMARY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getPrimaryIds() {
    return primaryIds;
  }


  @JsonProperty(JSON_PROPERTY_PRIMARY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimaryIds(java.util.List<String> primaryIds) {
    this.primaryIds = primaryIds;
  }


  public Document allIds(java.util.List<String> allIds) {
    this.allIds = allIds;
    return this;
  }

  public Document addAllIdsItem(String allIdsItem) {
    if (this.allIds == null) {
      this.allIds = new java.util.ArrayList<>();
    }
    this.allIds.add(allIdsItem);
    return this;
  }

   /**
   * Refers to all companies mentioned in the document. 
   * @return allIds
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Refers to all companies mentioned in the document. ")
  @JsonProperty(JSON_PROPERTY_ALL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getAllIds() {
    return allIds;
  }


  @JsonProperty(JSON_PROPERTY_ALL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllIds(java.util.List<String> allIds) {
    this.allIds = allIds;
  }


  public Document headline(String headline) {
    this.headline = headline;
    return this;
  }

   /**
   * Headline of the story.
   * @return headline
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Headline of the story.")
  @JsonProperty(JSON_PROPERTY_HEADLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHeadline() {
    return headline;
  }


  @JsonProperty(JSON_PROPERTY_HEADLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeadline(String headline) {
    this.headline = headline;
  }


  public Document storyDateTime(OffsetDateTime storyDateTime) {
    this.storyDateTime = storyDateTime;
    return this;
  }

   /**
   * Refers to either the date and time of the story, when it is available in workstation (in the specified timeZone) or the date and time FactSet received it from the vendor.
   * @return storyDateTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Refers to either the date and time of the story, when it is available in workstation (in the specified timeZone) or the date and time FactSet received it from the vendor.")
  @JsonProperty(JSON_PROPERTY_STORY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStoryDateTime() {
    return storyDateTime;
  }


  @JsonProperty(JSON_PROPERTY_STORY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoryDateTime(OffsetDateTime storyDateTime) {
    this.storyDateTime = storyDateTime;
  }


  public Document categories(java.util.List<String> categories) {
    this.categories = categories;
    return this;
  }

  public Document addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new java.util.ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Categories are Country, Industry, and Subject codes. This is a list retrieved from &#x60;/meta/categories&#x60;
   * @return categories
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Categories are Country, Industry, and Subject codes. This is a list retrieved from `/meta/categories`")
  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getCategories() {
    return categories;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategories(java.util.List<String> categories) {
    this.categories = categories;
  }


  public Document transcriptIntelligenceUrl(String transcriptIntelligenceUrl) {
    this.transcriptIntelligenceUrl = transcriptIntelligenceUrl;
    return this;
  }

   /**
   * This is the URL for downloading the document with an expiration duration of 24 hours.
   * @return transcriptIntelligenceUrl
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "This is the URL for downloading the document with an expiration duration of 24 hours.")
  @JsonProperty(JSON_PROPERTY_TRANSCRIPT_INTELLIGENCE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTranscriptIntelligenceUrl() {
    return transcriptIntelligenceUrl;
  }


  @JsonProperty(JSON_PROPERTY_TRANSCRIPT_INTELLIGENCE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranscriptIntelligenceUrl(String transcriptIntelligenceUrl) {
    this.transcriptIntelligenceUrl = transcriptIntelligenceUrl;
  }


  public Document reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

   /**
   * This is a unique identifier for a specific transcript.
   * @return reportId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "This is a unique identifier for a specific transcript.")
  @JsonProperty(JSON_PROPERTY_REPORT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReportId() {
    return reportId;
  }


  @JsonProperty(JSON_PROPERTY_REPORT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public Document uploadDateTime(OffsetDateTime uploadDateTime) {
    this.uploadDateTime = uploadDateTime;
    return this;
  }

   /**
   * It is the time when transcript is created (in the specified timeZone).                    
   * @return uploadDateTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "It is the time when transcript is created (in the specified timeZone).                    ")
  @JsonProperty(JSON_PROPERTY_UPLOAD_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUploadDateTime() {
    return uploadDateTime;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadDateTime(OffsetDateTime uploadDateTime) {
    this.uploadDateTime = uploadDateTime;
  }


  /**
   * Return true if this Document object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.primaryIds, document.primaryIds) &&
        Objects.equals(this.allIds, document.allIds) &&
        Objects.equals(this.headline, document.headline) &&
        Objects.equals(this.storyDateTime, document.storyDateTime) &&
        Objects.equals(this.categories, document.categories) &&
        Objects.equals(this.transcriptIntelligenceUrl, document.transcriptIntelligenceUrl) &&
        Objects.equals(this.reportId, document.reportId) &&
        Objects.equals(this.uploadDateTime, document.uploadDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryIds, allIds, headline, storyDateTime, categories, transcriptIntelligenceUrl, reportId, uploadDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    sb.append("    primaryIds: ").append(toIndentedString(primaryIds)).append("\n");
    sb.append("    allIds: ").append(toIndentedString(allIds)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    storyDateTime: ").append(toIndentedString(storyDateTime)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    transcriptIntelligenceUrl: ").append(toIndentedString(transcriptIntelligenceUrl)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    uploadDateTime: ").append(toIndentedString(uploadDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

