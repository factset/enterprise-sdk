/*
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsandTranscripts.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsandTranscripts.JSON;


/**
 * NrtCallsResponseData
 */
@JsonPropertyOrder({
  NrtCallsResponseData.JSON_PROPERTY_REPORT_ID,
  NrtCallsResponseData.JSON_PROPERTY_AUDIO_SOURCE,
  NrtCallsResponseData.JSON_PROPERTY_AUDIO_SOURCE_ID,
  NrtCallsResponseData.JSON_PROPERTY_TICKER,
  NrtCallsResponseData.JSON_PROPERTY_ENTITY_ID,
  NrtCallsResponseData.JSON_PROPERTY_EVENT_TYPE,
  NrtCallsResponseData.JSON_PROPERTY_EVENT_TITLE,
  NrtCallsResponseData.JSON_PROPERTY_CALL_STATUS,
  NrtCallsResponseData.JSON_PROPERTY_RECORDING_START_TIME,
  NrtCallsResponseData.JSON_PROPERTY_EVENT_DATETIME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class NrtCallsResponseData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REPORT_ID = "reportId";
  private JsonNullable<Integer> reportId = JsonNullable.<Integer>undefined();

  /**
   * Identifier for the source of how the event is recorded. - PhoneReplay: Event is recorded through phone playback. - Webcast: Event is recorded through online broadcast.
   */
  public enum AudioSourceEnum {
    PHONEREPLAY("PhoneReplay"),
    
    WEBCAST("Webcast");

    private String value;

    AudioSourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AudioSourceEnum fromValue(String value) {
      for (AudioSourceEnum b : AudioSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_AUDIO_SOURCE = "audioSource";
  private JsonNullable<AudioSourceEnum> audioSource = JsonNullable.<AudioSourceEnum>undefined();

  public static final String JSON_PROPERTY_AUDIO_SOURCE_ID = "audioSourceId";
  private JsonNullable<Integer> audioSourceId = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_TICKER = "ticker";
  private JsonNullable<String> ticker = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private JsonNullable<String> entityId = JsonNullable.<String>undefined();

  /**
   * Refers to the various event types covered by FactSet CallStreet:  * EarningsCall: Regular quarterly calls where companies provide insights into their latest earnings, sharing details on their financial performance, including revenue, profits, and earnings per share.  * EarningsRelease: Official statements or press releases that publish a company&#39;s financial results for a specific period, highlighting profit and loss metrics.  * SalesRevenueCall: Conference calls focused on discussing comprehensive sales activity and revenue figures, typically held monthly or quarterly.  * SalesRevenueRelease: Press releases that disclose the latest sales and revenue data, detailing the financial performance of sales operations over a given timeframe.  * Guidance: Calls where companies offer estimated financial information about future earnings or outline business outlooks before official earnings are released.  * Conference: An event where individuals gather to discuss and share ideas on common interests, often including various formats such as panel discussions, workshops, and keynote presentations.  * Presentation:  A structured delivery of information to an audience, typically within a conference setting, using formats like lectures, seminars, or webinars to convey specific topics or findings.  * Analyst, Investor &amp; Shareholder Meeting: Gatherings hosted by companies for analysts, investors, and shareholders to discuss strategic updates, financial health, and corporate developments.  * Special Situation: Conference calls addressing situations that do not fit into standard categories, often concerning mergers, acquisitions, joint ventures, or significant business updates.
   */
  public enum EventTypeEnum {
    ANALYSTSINVESTORSSHAREHOLDERSMEETING("AnalystsInvestorsShareholdersMeeting"),
    
    EARNINGSCALL("EarningsCall"),
    
    EARNINGSRELEASE("EarningsRelease"),
    
    GUIDANCE("Guidance"),
    
    SALESREVENUECALL("SalesRevenueCall"),
    
    SALESREVENUERELEASE("SalesRevenueRelease"),
    
    SPECIALSITUATION("SpecialSituation"),
    
    CONFERENCE("Conference"),
    
    PRESENTATION("Presentation");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private JsonNullable<EventTypeEnum> eventType = JsonNullable.<EventTypeEnum>undefined();

  public static final String JSON_PROPERTY_EVENT_TITLE = "eventTitle";
  private JsonNullable<String> eventTitle = JsonNullable.<String>undefined();

  /**
   * Status of the call i.e. Ended, InProgress, EndedWithoutNotification, or IssueAtSource.  * InProgress - the call is in progress. * Ended - the call has ended. * EndedWithoutNotification - the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * IssueAtSource - the call has ended with no snippet data due to a possible issue at the source.
   */
  public enum CallStatusEnum {
    INPROGRESS("InProgress"),
    
    ENDED("Ended"),
    
    ENDEDWITHOUTNOTIFICATION("EndedWithoutNotification"),
    
    ISSUEATSOURCE("IssueAtSource");

    private String value;

    CallStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CallStatusEnum fromValue(String value) {
      for (CallStatusEnum b : CallStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_CALL_STATUS = "callStatus";
  private JsonNullable<CallStatusEnum> callStatus = JsonNullable.<CallStatusEnum>undefined();

  public static final String JSON_PROPERTY_RECORDING_START_TIME = "recordingStartTime";
  private JsonNullable<OffsetDateTime> recordingStartTime = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_EVENT_DATETIME = "eventDatetime";
  private JsonNullable<OffsetDateTime> eventDatetime = JsonNullable.<OffsetDateTime>undefined();

  public NrtCallsResponseData() { 
  }

  public NrtCallsResponseData reportId(Integer reportId) {
    this.reportId = JsonNullable.<Integer>of(reportId);
    return this;
  }

   /**
   * The unique ID for an event.
   * @return reportId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The unique ID for an event.")
  @JsonIgnore

  public Integer getReportId() {
        return reportId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REPORT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getReportId_JsonNullable() {
    return reportId;
  }
  
  @JsonProperty(JSON_PROPERTY_REPORT_ID)
  public void setReportId_JsonNullable(JsonNullable<Integer> reportId) {
    this.reportId = reportId;
  }

  public void setReportId(Integer reportId) {
    this.reportId = JsonNullable.<Integer>of(reportId);
  }


  public NrtCallsResponseData audioSource(AudioSourceEnum audioSource) {
    this.audioSource = JsonNullable.<AudioSourceEnum>of(audioSource);
    return this;
  }

   /**
   * Identifier for the source of how the event is recorded. - PhoneReplay: Event is recorded through phone playback. - Webcast: Event is recorded through online broadcast.
   * @return audioSource
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Identifier for the source of how the event is recorded. - PhoneReplay: Event is recorded through phone playback. - Webcast: Event is recorded through online broadcast.")
  @JsonIgnore

  public AudioSourceEnum getAudioSource() {
        return audioSource.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUDIO_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<AudioSourceEnum> getAudioSource_JsonNullable() {
    return audioSource;
  }
  
  @JsonProperty(JSON_PROPERTY_AUDIO_SOURCE)
  public void setAudioSource_JsonNullable(JsonNullable<AudioSourceEnum> audioSource) {
    this.audioSource = audioSource;
  }

  public void setAudioSource(AudioSourceEnum audioSource) {
    this.audioSource = JsonNullable.<AudioSourceEnum>of(audioSource);
  }


  public NrtCallsResponseData audioSourceId(Integer audioSourceId) {
    this.audioSourceId = JsonNullable.<Integer>of(audioSourceId);
    return this;
  }

   /**
   * Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in - P or webcast - W). One reportId can have multiple audiosourceIDs.
   * @return audioSourceId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in - P or webcast - W). One reportId can have multiple audiosourceIDs.")
  @JsonIgnore

  public Integer getAudioSourceId() {
        return audioSourceId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUDIO_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAudioSourceId_JsonNullable() {
    return audioSourceId;
  }
  
  @JsonProperty(JSON_PROPERTY_AUDIO_SOURCE_ID)
  public void setAudioSourceId_JsonNullable(JsonNullable<Integer> audioSourceId) {
    this.audioSourceId = audioSourceId;
  }

  public void setAudioSourceId(Integer audioSourceId) {
    this.audioSourceId = JsonNullable.<Integer>of(audioSourceId);
  }


  public NrtCallsResponseData ticker(String ticker) {
    this.ticker = JsonNullable.<String>of(ticker);
    return this;
  }

   /**
   * Ticker-region identifier for the company hosting the event.
   * @return ticker
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Ticker-region identifier for the company hosting the event.")
  @JsonIgnore

  public String getTicker() {
        return ticker.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTicker_JsonNullable() {
    return ticker;
  }
  
  @JsonProperty(JSON_PROPERTY_TICKER)
  public void setTicker_JsonNullable(JsonNullable<String> ticker) {
    this.ticker = ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = JsonNullable.<String>of(ticker);
  }


  public NrtCallsResponseData entityId(String entityId) {
    this.entityId = JsonNullable.<String>of(entityId);
    return this;
  }

   /**
   * Factset entity level identifier for the company hosting the event.
   * @return entityId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Factset entity level identifier for the company hosting the event.")
  @JsonIgnore

  public String getEntityId() {
        return entityId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEntityId_JsonNullable() {
    return entityId;
  }
  
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  public void setEntityId_JsonNullable(JsonNullable<String> entityId) {
    this.entityId = entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = JsonNullable.<String>of(entityId);
  }


  public NrtCallsResponseData eventType(EventTypeEnum eventType) {
    this.eventType = JsonNullable.<EventTypeEnum>of(eventType);
    return this;
  }

   /**
   * Refers to the various event types covered by FactSet CallStreet:  * EarningsCall: Regular quarterly calls where companies provide insights into their latest earnings, sharing details on their financial performance, including revenue, profits, and earnings per share.  * EarningsRelease: Official statements or press releases that publish a company&#39;s financial results for a specific period, highlighting profit and loss metrics.  * SalesRevenueCall: Conference calls focused on discussing comprehensive sales activity and revenue figures, typically held monthly or quarterly.  * SalesRevenueRelease: Press releases that disclose the latest sales and revenue data, detailing the financial performance of sales operations over a given timeframe.  * Guidance: Calls where companies offer estimated financial information about future earnings or outline business outlooks before official earnings are released.  * Conference: An event where individuals gather to discuss and share ideas on common interests, often including various formats such as panel discussions, workshops, and keynote presentations.  * Presentation:  A structured delivery of information to an audience, typically within a conference setting, using formats like lectures, seminars, or webinars to convey specific topics or findings.  * Analyst, Investor &amp; Shareholder Meeting: Gatherings hosted by companies for analysts, investors, and shareholders to discuss strategic updates, financial health, and corporate developments.  * Special Situation: Conference calls addressing situations that do not fit into standard categories, often concerning mergers, acquisitions, joint ventures, or significant business updates.
   * @return eventType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Refers to the various event types covered by FactSet CallStreet:  * EarningsCall: Regular quarterly calls where companies provide insights into their latest earnings, sharing details on their financial performance, including revenue, profits, and earnings per share.  * EarningsRelease: Official statements or press releases that publish a company's financial results for a specific period, highlighting profit and loss metrics.  * SalesRevenueCall: Conference calls focused on discussing comprehensive sales activity and revenue figures, typically held monthly or quarterly.  * SalesRevenueRelease: Press releases that disclose the latest sales and revenue data, detailing the financial performance of sales operations over a given timeframe.  * Guidance: Calls where companies offer estimated financial information about future earnings or outline business outlooks before official earnings are released.  * Conference: An event where individuals gather to discuss and share ideas on common interests, often including various formats such as panel discussions, workshops, and keynote presentations.  * Presentation:  A structured delivery of information to an audience, typically within a conference setting, using formats like lectures, seminars, or webinars to convey specific topics or findings.  * Analyst, Investor & Shareholder Meeting: Gatherings hosted by companies for analysts, investors, and shareholders to discuss strategic updates, financial health, and corporate developments.  * Special Situation: Conference calls addressing situations that do not fit into standard categories, often concerning mergers, acquisitions, joint ventures, or significant business updates.")
  @JsonIgnore

  public EventTypeEnum getEventType() {
        return eventType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<EventTypeEnum> getEventType_JsonNullable() {
    return eventType;
  }
  
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  public void setEventType_JsonNullable(JsonNullable<EventTypeEnum> eventType) {
    this.eventType = eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = JsonNullable.<EventTypeEnum>of(eventType);
  }


  public NrtCallsResponseData eventTitle(String eventTitle) {
    this.eventTitle = JsonNullable.<String>of(eventTitle);
    return this;
  }

   /**
   * Title of the Event.
   * @return eventTitle
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Title of the Event.")
  @JsonIgnore

  public String getEventTitle() {
        return eventTitle.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EVENT_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEventTitle_JsonNullable() {
    return eventTitle;
  }
  
  @JsonProperty(JSON_PROPERTY_EVENT_TITLE)
  public void setEventTitle_JsonNullable(JsonNullable<String> eventTitle) {
    this.eventTitle = eventTitle;
  }

  public void setEventTitle(String eventTitle) {
    this.eventTitle = JsonNullable.<String>of(eventTitle);
  }


  public NrtCallsResponseData callStatus(CallStatusEnum callStatus) {
    this.callStatus = JsonNullable.<CallStatusEnum>of(callStatus);
    return this;
  }

   /**
   * Status of the call i.e. Ended, InProgress, EndedWithoutNotification, or IssueAtSource.  * InProgress - the call is in progress. * Ended - the call has ended. * EndedWithoutNotification - the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * IssueAtSource - the call has ended with no snippet data due to a possible issue at the source.
   * @return callStatus
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Status of the call i.e. Ended, InProgress, EndedWithoutNotification, or IssueAtSource.  * InProgress - the call is in progress. * Ended - the call has ended. * EndedWithoutNotification - the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * IssueAtSource - the call has ended with no snippet data due to a possible issue at the source.")
  @JsonIgnore

  public CallStatusEnum getCallStatus() {
        return callStatus.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CALL_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CallStatusEnum> getCallStatus_JsonNullable() {
    return callStatus;
  }
  
  @JsonProperty(JSON_PROPERTY_CALL_STATUS)
  public void setCallStatus_JsonNullable(JsonNullable<CallStatusEnum> callStatus) {
    this.callStatus = callStatus;
  }

  public void setCallStatus(CallStatusEnum callStatus) {
    this.callStatus = JsonNullable.<CallStatusEnum>of(callStatus);
  }


  public NrtCallsResponseData recordingStartTime(OffsetDateTime recordingStartTime) {
    this.recordingStartTime = JsonNullable.<OffsetDateTime>of(recordingStartTime);
    return this;
  }

   /**
   * The UTC timestamp of when the recording started.
   * @return recordingStartTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The UTC timestamp of when the recording started.")
  @JsonIgnore

  public OffsetDateTime getRecordingStartTime() {
        return recordingStartTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RECORDING_START_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getRecordingStartTime_JsonNullable() {
    return recordingStartTime;
  }
  
  @JsonProperty(JSON_PROPERTY_RECORDING_START_TIME)
  public void setRecordingStartTime_JsonNullable(JsonNullable<OffsetDateTime> recordingStartTime) {
    this.recordingStartTime = recordingStartTime;
  }

  public void setRecordingStartTime(OffsetDateTime recordingStartTime) {
    this.recordingStartTime = JsonNullable.<OffsetDateTime>of(recordingStartTime);
  }


  public NrtCallsResponseData eventDatetime(OffsetDateTime eventDatetime) {
    this.eventDatetime = JsonNullable.<OffsetDateTime>of(eventDatetime);
    return this;
  }

   /**
   * The official UTC timestamp of the start of the event.
   * @return eventDatetime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The official UTC timestamp of the start of the event.")
  @JsonIgnore

  public OffsetDateTime getEventDatetime() {
        return eventDatetime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EVENT_DATETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getEventDatetime_JsonNullable() {
    return eventDatetime;
  }
  
  @JsonProperty(JSON_PROPERTY_EVENT_DATETIME)
  public void setEventDatetime_JsonNullable(JsonNullable<OffsetDateTime> eventDatetime) {
    this.eventDatetime = eventDatetime;
  }

  public void setEventDatetime(OffsetDateTime eventDatetime) {
    this.eventDatetime = JsonNullable.<OffsetDateTime>of(eventDatetime);
  }


  /**
   * Return true if this NrtCallsResponseData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NrtCallsResponseData nrtCallsResponseData = (NrtCallsResponseData) o;
    return equalsNullable(this.reportId, nrtCallsResponseData.reportId) &&
        equalsNullable(this.audioSource, nrtCallsResponseData.audioSource) &&
        equalsNullable(this.audioSourceId, nrtCallsResponseData.audioSourceId) &&
        equalsNullable(this.ticker, nrtCallsResponseData.ticker) &&
        equalsNullable(this.entityId, nrtCallsResponseData.entityId) &&
        equalsNullable(this.eventType, nrtCallsResponseData.eventType) &&
        equalsNullable(this.eventTitle, nrtCallsResponseData.eventTitle) &&
        equalsNullable(this.callStatus, nrtCallsResponseData.callStatus) &&
        equalsNullable(this.recordingStartTime, nrtCallsResponseData.recordingStartTime) &&
        equalsNullable(this.eventDatetime, nrtCallsResponseData.eventDatetime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(reportId), hashCodeNullable(audioSource), hashCodeNullable(audioSourceId), hashCodeNullable(ticker), hashCodeNullable(entityId), hashCodeNullable(eventType), hashCodeNullable(eventTitle), hashCodeNullable(callStatus), hashCodeNullable(recordingStartTime), hashCodeNullable(eventDatetime));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NrtCallsResponseData {\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    audioSource: ").append(toIndentedString(audioSource)).append("\n");
    sb.append("    audioSourceId: ").append(toIndentedString(audioSourceId)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventTitle: ").append(toIndentedString(eventTitle)).append("\n");
    sb.append("    callStatus: ").append(toIndentedString(callStatus)).append("\n");
    sb.append("    recordingStartTime: ").append(toIndentedString(recordingStartTime)).append("\n");
    sb.append("    eventDatetime: ").append(toIndentedString(eventDatetime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

