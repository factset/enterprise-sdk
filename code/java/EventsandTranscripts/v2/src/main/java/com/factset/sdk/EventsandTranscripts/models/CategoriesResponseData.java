/*
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsandTranscripts.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsandTranscripts.JSON;


/**
 * CategoriesResponseData
 */
@JsonPropertyOrder({
  CategoriesResponseData.JSON_PROPERTY_SUBJECT,
  CategoriesResponseData.JSON_PROPERTY_CATEGORY,
  CategoriesResponseData.JSON_PROPERTY_DESCRIPTION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class CategoriesResponseData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private String subject;

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private String category;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public CategoriesResponseData() { 
  }

  public CategoriesResponseData subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The code which specifies various categories of information: - SB: Specifies the subject information/code - Ex: IPO, Management Changes, Dividends, etc. - IN: Specifies the industry information/code - Ex: Banking, Oil, Semiconductors, etc. - LN: Specifies the language details. - CN: Specifies the country details. - RN: Specifies the region details. - DT: Specifies the filings document type details. 
   * @return subject
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "SB", value = "The code which specifies various categories of information: - SB: Specifies the subject information/code - Ex: IPO, Management Changes, Dividends, etc. - IN: Specifies the industry information/code - Ex: Banking, Oil, Semiconductors, etc. - LN: Specifies the language details. - CN: Specifies the country details. - RN: Specifies the region details. - DT: Specifies the filings document type details. ")
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(String subject) {
    this.subject = subject;
  }


  public CategoriesResponseData category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Full category code.
   * @return category
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "SB:ANLCH", value = "Full category code.")
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategory(String category) {
    this.category = category;
  }


  public CategoriesResponseData description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the category.
   * @return description
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Analysts Revisions", value = "Description of the category.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Return true if this CategoriesResponseData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoriesResponseData categoriesResponseData = (CategoriesResponseData) o;
    return Objects.equals(this.subject, categoriesResponseData.subject) &&
        Objects.equals(this.category, categoriesResponseData.category) &&
        Objects.equals(this.description, categoriesResponseData.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, category, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoriesResponseData {\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

