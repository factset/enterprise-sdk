/*
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsandTranscripts.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsandTranscripts.JSON;


/**
 * Search criteria for NRT calls based on ticker, entity, or status.
 */
@ApiModel(description = "Search criteria for NRT calls based on ticker, entity, or status.")
@JsonPropertyOrder({
  NrtCallsRequestByTicker.JSON_PROPERTY_TICKER,
  NrtCallsRequestByTicker.JSON_PROPERTY_ENTITY_ID,
  NrtCallsRequestByTicker.JSON_PROPERTY_CALL_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class NrtCallsRequestByTicker implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TICKER = "ticker";
  private String ticker;

  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private String entityId;

  /**
   * Status of the call i.e. Ended, InProgress, EndedWithoutNotification, or IssueAtSource.  * InProgress - the call is in progress. * Ended - the call has ended. * EndedWithoutNotification - the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * IssueAtSource - the call has ended with no snippet data due to a possible issue at the source.
   */
  public enum CallStatusEnum {
    INPROGRESS("InProgress"),
    
    ENDED("Ended"),
    
    EWN("EWN"),
    
    ISSUEATSOURCE("IssueAtSource");

    private String value;

    CallStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CallStatusEnum fromValue(String value) {
      for (CallStatusEnum b : CallStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CALL_STATUS = "callStatus";
  private CallStatusEnum callStatus;

  public NrtCallsRequestByTicker() { 
  }

  public NrtCallsRequestByTicker ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

   /**
   * Ticker-region identifier for the company hosting the event.
   * @return ticker
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "AZZ-US", value = "Ticker-region identifier for the company hosting the event.")
  @JsonProperty(JSON_PROPERTY_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTicker() {
    return ticker;
  }


  @JsonProperty(JSON_PROPERTY_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTicker(String ticker) {
    this.ticker = ticker;
  }


  public NrtCallsRequestByTicker entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

   /**
   * FactSet entity level identifier for the company hosting the event.
   * @return entityId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "000CGP-E", value = "FactSet entity level identifier for the company hosting the event.")
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntityId() {
    return entityId;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public NrtCallsRequestByTicker callStatus(CallStatusEnum callStatus) {
    this.callStatus = callStatus;
    return this;
  }

   /**
   * Status of the call i.e. Ended, InProgress, EndedWithoutNotification, or IssueAtSource.  * InProgress - the call is in progress. * Ended - the call has ended. * EndedWithoutNotification - the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * IssueAtSource - the call has ended with no snippet data due to a possible issue at the source.
   * @return callStatus
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Status of the call i.e. Ended, InProgress, EndedWithoutNotification, or IssueAtSource.  * InProgress - the call is in progress. * Ended - the call has ended. * EndedWithoutNotification - the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * IssueAtSource - the call has ended with no snippet data due to a possible issue at the source.")
  @JsonProperty(JSON_PROPERTY_CALL_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CallStatusEnum getCallStatus() {
    return callStatus;
  }


  @JsonProperty(JSON_PROPERTY_CALL_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCallStatus(CallStatusEnum callStatus) {
    this.callStatus = callStatus;
  }


  /**
   * Return true if this NrtCallsRequestByTicker object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NrtCallsRequestByTicker nrtCallsRequestByTicker = (NrtCallsRequestByTicker) o;
    return Objects.equals(this.ticker, nrtCallsRequestByTicker.ticker) &&
        Objects.equals(this.entityId, nrtCallsRequestByTicker.entityId) &&
        Objects.equals(this.callStatus, nrtCallsRequestByTicker.callStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ticker, entityId, callStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NrtCallsRequestByTicker {\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    callStatus: ").append(toIndentedString(callStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

