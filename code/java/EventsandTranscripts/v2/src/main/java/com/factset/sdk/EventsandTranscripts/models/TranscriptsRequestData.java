/*
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsandTranscripts.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.EventsandTranscripts.models.TranscriptsByDateRequest;
import com.factset.sdk.EventsandTranscripts.models.TranscriptsByEventsRequest;
import com.factset.sdk.EventsandTranscripts.models.TranscriptsByIdsRequest;
import com.factset.sdk.EventsandTranscripts.models.TranscriptsBySearchRequest;
import com.factset.sdk.EventsandTranscripts.models.TranscriptsByTimesRequest;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsandTranscripts.JSON;


import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.math.BigDecimal;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.factset.sdk.EventsandTranscripts.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

@JsonDeserialize(using=TranscriptsRequestData.TranscriptsRequestDataDeserializer.class)
@JsonSerialize(using = TranscriptsRequestData.TranscriptsRequestDataSerializer.class)
public class TranscriptsRequestData extends AbstractOpenApiSchema implements Serializable {
    private static final Logger log = Logger.getLogger(TranscriptsRequestData.class.getName());

    public static class TranscriptsRequestDataSerializer extends StdSerializer<TranscriptsRequestData> {
        public TranscriptsRequestDataSerializer(Class<TranscriptsRequestData> t) {
            super(t);
        }

        public TranscriptsRequestDataSerializer() {
            this(null);
        }

        @Override
        public void serialize(TranscriptsRequestData value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class TranscriptsRequestDataDeserializer extends StdDeserializer<TranscriptsRequestData> {
        public TranscriptsRequestDataDeserializer() {
            this(TranscriptsRequestData.class);
        }

        public TranscriptsRequestDataDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public TranscriptsRequestData deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            Class<?> cls = JSON.getClassForElement(tree, TranscriptsRequestData.class);
            if (cls != null) {
                // When the OAS schema includes a discriminator, use the discriminator value to
                // discriminate the anyOf schemas.
                // Get the discriminator mapping value to get the class.
                deserialized = tree.traverse(jp.getCodec()).readValueAs(cls);
                TranscriptsRequestData ret = new TranscriptsRequestData();
                ret.setActualInstance(deserialized);
                return ret;
            }
            // deserialize TranscriptsByDateRequest
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<TranscriptsByDateRequest>(){});
                TranscriptsRequestData ret = new TranscriptsRequestData();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'TranscriptsRequestData'", e);
            }

            // deserialize TranscriptsBySearchRequest
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<TranscriptsBySearchRequest>(){});
                TranscriptsRequestData ret = new TranscriptsRequestData();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'TranscriptsRequestData'", e);
            }

            // deserialize TranscriptsByIdsRequest
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<TranscriptsByIdsRequest>(){});
                TranscriptsRequestData ret = new TranscriptsRequestData();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'TranscriptsRequestData'", e);
            }

            // deserialize TranscriptsByEventsRequest
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<TranscriptsByEventsRequest>(){});
                TranscriptsRequestData ret = new TranscriptsRequestData();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'TranscriptsRequestData'", e);
            }

            // deserialize TranscriptsByTimesRequest
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<TranscriptsByTimesRequest>(){});
                TranscriptsRequestData ret = new TranscriptsRequestData();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'TranscriptsRequestData'", e);
            }

            throw new IOException(String.format("Failed deserialization for TranscriptsRequestData: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public TranscriptsRequestData getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "TranscriptsRequestData cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public TranscriptsRequestData() {
        super("anyOf", Boolean.FALSE);
    }

    public TranscriptsRequestData(TranscriptsByDateRequest o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TranscriptsRequestData(TranscriptsByEventsRequest o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TranscriptsRequestData(TranscriptsByIdsRequest o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TranscriptsRequestData(TranscriptsBySearchRequest o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TranscriptsRequestData(TranscriptsByTimesRequest o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TranscriptsByDateRequest", new GenericType<TranscriptsByDateRequest>() {
        });
        schemas.put("TranscriptsByEventsRequest", new GenericType<TranscriptsByEventsRequest>() {
        });
        schemas.put("TranscriptsByIdsRequest", new GenericType<TranscriptsByIdsRequest>() {
        });
        schemas.put("TranscriptsBySearchRequest", new GenericType<TranscriptsBySearchRequest>() {
        });
        schemas.put("TranscriptsByTimesRequest", new GenericType<TranscriptsByTimesRequest>() {
        });
        JSON.registerDescendants(TranscriptsRequestData.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("TranscriptsByDateRequest", TranscriptsByDateRequest.class);
        mappings.put("TranscriptsByEventsRequest", TranscriptsByEventsRequest.class);
        mappings.put("TranscriptsByIdsRequest", TranscriptsByIdsRequest.class);
        mappings.put("TranscriptsBySearchRequest", TranscriptsBySearchRequest.class);
        mappings.put("TranscriptsByTimesRequest", TranscriptsByTimesRequest.class);
        mappings.put("object1", TranscriptsByDateRequest.class);
        mappings.put("object2", TranscriptsBySearchRequest.class);
        mappings.put("object3", TranscriptsByIdsRequest.class);
        mappings.put("object4", TranscriptsByEventsRequest.class);
        mappings.put("object5", TranscriptsByTimesRequest.class);
        mappings.put("TranscriptsRequestData", TranscriptsRequestData.class);
        JSON.registerDiscriminator(TranscriptsRequestData.class, "Transcript", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return TranscriptsRequestData.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * TranscriptsByDateRequest, TranscriptsByEventsRequest, TranscriptsByIdsRequest, TranscriptsBySearchRequest, TranscriptsByTimesRequest
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(TranscriptsByDateRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TranscriptsBySearchRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TranscriptsByIdsRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TranscriptsByEventsRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TranscriptsByTimesRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TranscriptsByDateRequest, TranscriptsByEventsRequest, TranscriptsByIdsRequest, TranscriptsBySearchRequest, TranscriptsByTimesRequest");
    }

    /**
     * Get the actual instance, which can be the following:
     * TranscriptsByDateRequest, TranscriptsByEventsRequest, TranscriptsByIdsRequest, TranscriptsBySearchRequest, TranscriptsByTimesRequest
     *
     * @return The actual instance (TranscriptsByDateRequest, TranscriptsByEventsRequest, TranscriptsByIdsRequest, TranscriptsBySearchRequest, TranscriptsByTimesRequest)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TranscriptsByDateRequest`.
     * If the actual instance is not `TranscriptsByDateRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TranscriptsByDateRequest`
     * @throws ClassCastException if the instance is not `TranscriptsByDateRequest`
     */
    public TranscriptsByDateRequest getTranscriptsByDateRequest() throws ClassCastException {
        return (TranscriptsByDateRequest)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TranscriptsBySearchRequest`.
     * If the actual instance is not `TranscriptsBySearchRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TranscriptsBySearchRequest`
     * @throws ClassCastException if the instance is not `TranscriptsBySearchRequest`
     */
    public TranscriptsBySearchRequest getTranscriptsBySearchRequest() throws ClassCastException {
        return (TranscriptsBySearchRequest)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TranscriptsByIdsRequest`.
     * If the actual instance is not `TranscriptsByIdsRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TranscriptsByIdsRequest`
     * @throws ClassCastException if the instance is not `TranscriptsByIdsRequest`
     */
    public TranscriptsByIdsRequest getTranscriptsByIdsRequest() throws ClassCastException {
        return (TranscriptsByIdsRequest)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TranscriptsByEventsRequest`.
     * If the actual instance is not `TranscriptsByEventsRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TranscriptsByEventsRequest`
     * @throws ClassCastException if the instance is not `TranscriptsByEventsRequest`
     */
    public TranscriptsByEventsRequest getTranscriptsByEventsRequest() throws ClassCastException {
        return (TranscriptsByEventsRequest)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TranscriptsByTimesRequest`.
     * If the actual instance is not `TranscriptsByTimesRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TranscriptsByTimesRequest`
     * @throws ClassCastException if the instance is not `TranscriptsByTimesRequest`
     */
    public TranscriptsByTimesRequest getTranscriptsByTimesRequest() throws ClassCastException {
        return (TranscriptsByTimesRequest)super.getActualInstance();
    }

}

