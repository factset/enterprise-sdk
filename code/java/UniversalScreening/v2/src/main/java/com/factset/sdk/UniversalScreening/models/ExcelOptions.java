/*
 * Universal Screening API
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.UniversalScreening.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.UniversalScreening.JSON;


/**
 * Options applied to Excel output.
 */
@ApiModel(description = "Options applied to Excel output.")
@JsonPropertyOrder({
  ExcelOptions.JSON_PROPERTY_IS_SUMMARY,
  ExcelOptions.JSON_PROPERTY_APPLY_SAVED_N_A_FORMATTING,
  ExcelOptions.JSON_PROPERTY_APPLY_FILTERS,
  ExcelOptions.JSON_PROPERTY_APPLY_ALTERNATE_ROW_SHADING,
  ExcelOptions.JSON_PROPERTY_APPLY_EXCEL_OUTLINING,
  ExcelOptions.JSON_PROPERTY_CONDENSE_TABS_TO_ONE_SHEET
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ExcelOptions implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_IS_SUMMARY = "isSummary";
  private JsonNullable<Boolean> isSummary = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_APPLY_SAVED_N_A_FORMATTING = "applySavedNAFormatting";
  private JsonNullable<Boolean> applySavedNAFormatting = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_APPLY_FILTERS = "applyFilters";
  private JsonNullable<Boolean> applyFilters = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_APPLY_ALTERNATE_ROW_SHADING = "applyAlternateRowShading";
  private JsonNullable<Boolean> applyAlternateRowShading = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_APPLY_EXCEL_OUTLINING = "applyExcelOutlining";
  private JsonNullable<Boolean> applyExcelOutlining = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_CONDENSE_TABS_TO_ONE_SHEET = "condenseTabsToOneSheet";
  private JsonNullable<Boolean> condenseTabsToOneSheet = JsonNullable.<Boolean>of(false);

  public ExcelOptions() { 
  }

  public ExcelOptions isSummary(Boolean isSummary) {
    this.isSummary = JsonNullable.<Boolean>of(isSummary);
    return this;
  }

   /**
   * Specifies that a summary will be generated instead of the full results output. Only the \&quot;applyFilters\&quot; option will have any affect if this is true. By default this option is set to false.
   * @return isSummary
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Specifies that a summary will be generated instead of the full results output. Only the \"applyFilters\" option will have any affect if this is true. By default this option is set to false.")
  @JsonIgnore

  public Boolean getIsSummary() {
        return isSummary.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsSummary_JsonNullable() {
    return isSummary;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_SUMMARY)
  public void setIsSummary_JsonNullable(JsonNullable<Boolean> isSummary) {
    this.isSummary = isSummary;
  }

  public void setIsSummary(Boolean isSummary) {
    this.isSummary = JsonNullable.<Boolean>of(isSummary);
  }


  public ExcelOptions applySavedNAFormatting(Boolean applySavedNAFormatting) {
    this.applySavedNAFormatting = JsonNullable.<Boolean>of(applySavedNAFormatting);
    return this;
  }

   /**
   * Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \&quot;NA\&quot; will be used to indicate the data that is not available.
   * @return applySavedNAFormatting
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \"NA\" will be used to indicate the data that is not available.")
  @JsonIgnore

  public Boolean getApplySavedNAFormatting() {
        return applySavedNAFormatting.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLY_SAVED_N_A_FORMATTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getApplySavedNAFormatting_JsonNullable() {
    return applySavedNAFormatting;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLY_SAVED_N_A_FORMATTING)
  public void setApplySavedNAFormatting_JsonNullable(JsonNullable<Boolean> applySavedNAFormatting) {
    this.applySavedNAFormatting = applySavedNAFormatting;
  }

  public void setApplySavedNAFormatting(Boolean applySavedNAFormatting) {
    this.applySavedNAFormatting = JsonNullable.<Boolean>of(applySavedNAFormatting);
  }


  public ExcelOptions applyFilters(Boolean applyFilters) {
    this.applyFilters = JsonNullable.<Boolean>of(applyFilters);
    return this;
  }

   /**
   * Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.
   * @return applyFilters
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.")
  @JsonIgnore

  public Boolean getApplyFilters() {
        return applyFilters.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getApplyFilters_JsonNullable() {
    return applyFilters;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLY_FILTERS)
  public void setApplyFilters_JsonNullable(JsonNullable<Boolean> applyFilters) {
    this.applyFilters = applyFilters;
  }

  public void setApplyFilters(Boolean applyFilters) {
    this.applyFilters = JsonNullable.<Boolean>of(applyFilters);
  }


  public ExcelOptions applyAlternateRowShading(Boolean applyAlternateRowShading) {
    this.applyAlternateRowShading = JsonNullable.<Boolean>of(applyAlternateRowShading);
    return this;
  }

   /**
   * Specifies whether every other row shading should be applied to the output. By default, this option is set to false, which means that every other row shading will not be included in the download.
   * @return applyAlternateRowShading
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies whether every other row shading should be applied to the output. By default, this option is set to false, which means that every other row shading will not be included in the download.")
  @JsonIgnore

  public Boolean getApplyAlternateRowShading() {
        return applyAlternateRowShading.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLY_ALTERNATE_ROW_SHADING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getApplyAlternateRowShading_JsonNullable() {
    return applyAlternateRowShading;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLY_ALTERNATE_ROW_SHADING)
  public void setApplyAlternateRowShading_JsonNullable(JsonNullable<Boolean> applyAlternateRowShading) {
    this.applyAlternateRowShading = applyAlternateRowShading;
  }

  public void setApplyAlternateRowShading(Boolean applyAlternateRowShading) {
    this.applyAlternateRowShading = JsonNullable.<Boolean>of(applyAlternateRowShading);
  }


  public ExcelOptions applyExcelOutlining(Boolean applyExcelOutlining) {
    this.applyExcelOutlining = JsonNullable.<Boolean>of(applyExcelOutlining);
    return this;
  }

   /**
   * Specifies that the Download Outline feature will be used when putting the screen&#39;s groupings into an Excel spreadsheet. By default, this option is set to false.
   * @return applyExcelOutlining
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies that the Download Outline feature will be used when putting the screen's groupings into an Excel spreadsheet. By default, this option is set to false.")
  @JsonIgnore

  public Boolean getApplyExcelOutlining() {
        return applyExcelOutlining.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLY_EXCEL_OUTLINING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getApplyExcelOutlining_JsonNullable() {
    return applyExcelOutlining;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLY_EXCEL_OUTLINING)
  public void setApplyExcelOutlining_JsonNullable(JsonNullable<Boolean> applyExcelOutlining) {
    this.applyExcelOutlining = applyExcelOutlining;
  }

  public void setApplyExcelOutlining(Boolean applyExcelOutlining) {
    this.applyExcelOutlining = JsonNullable.<Boolean>of(applyExcelOutlining);
  }


  public ExcelOptions condenseTabsToOneSheet(Boolean condenseTabsToOneSheet) {
    this.condenseTabsToOneSheet = JsonNullable.<Boolean>of(condenseTabsToOneSheet);
    return this;
  }

   /**
   * Specifies whether the report will be downloaded into a single spreadsheet, or into separate sheets following the tabs in the report. By default, this option is set to false.
   * @return condenseTabsToOneSheet
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Specifies whether the report will be downloaded into a single spreadsheet, or into separate sheets following the tabs in the report. By default, this option is set to false.")
  @JsonIgnore

  public Boolean getCondenseTabsToOneSheet() {
        return condenseTabsToOneSheet.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONDENSE_TABS_TO_ONE_SHEET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getCondenseTabsToOneSheet_JsonNullable() {
    return condenseTabsToOneSheet;
  }
  
  @JsonProperty(JSON_PROPERTY_CONDENSE_TABS_TO_ONE_SHEET)
  public void setCondenseTabsToOneSheet_JsonNullable(JsonNullable<Boolean> condenseTabsToOneSheet) {
    this.condenseTabsToOneSheet = condenseTabsToOneSheet;
  }

  public void setCondenseTabsToOneSheet(Boolean condenseTabsToOneSheet) {
    this.condenseTabsToOneSheet = JsonNullable.<Boolean>of(condenseTabsToOneSheet);
  }


  /**
   * Return true if this ExcelOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExcelOptions excelOptions = (ExcelOptions) o;
    return equalsNullable(this.isSummary, excelOptions.isSummary) &&
        equalsNullable(this.applySavedNAFormatting, excelOptions.applySavedNAFormatting) &&
        equalsNullable(this.applyFilters, excelOptions.applyFilters) &&
        equalsNullable(this.applyAlternateRowShading, excelOptions.applyAlternateRowShading) &&
        equalsNullable(this.applyExcelOutlining, excelOptions.applyExcelOutlining) &&
        equalsNullable(this.condenseTabsToOneSheet, excelOptions.condenseTabsToOneSheet);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(isSummary), hashCodeNullable(applySavedNAFormatting), hashCodeNullable(applyFilters), hashCodeNullable(applyAlternateRowShading), hashCodeNullable(applyExcelOutlining), hashCodeNullable(condenseTabsToOneSheet));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExcelOptions {\n");
    sb.append("    isSummary: ").append(toIndentedString(isSummary)).append("\n");
    sb.append("    applySavedNAFormatting: ").append(toIndentedString(applySavedNAFormatting)).append("\n");
    sb.append("    applyFilters: ").append(toIndentedString(applyFilters)).append("\n");
    sb.append("    applyAlternateRowShading: ").append(toIndentedString(applyAlternateRowShading)).append("\n");
    sb.append("    applyExcelOutlining: ").append(toIndentedString(applyExcelOutlining)).append("\n");
    sb.append("    condenseTabsToOneSheet: ").append(toIndentedString(condenseTabsToOneSheet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

