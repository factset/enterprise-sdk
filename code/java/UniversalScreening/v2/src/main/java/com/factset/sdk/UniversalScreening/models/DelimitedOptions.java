/*
 * Universal Screening API
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.UniversalScreening.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.UniversalScreening.JSON;


/**
 * Options applied to delimited output.
 */
@ApiModel(description = "Options applied to delimited output.")
@JsonPropertyOrder({
  DelimitedOptions.JSON_PROPERTY_IS_DATABASE,
  DelimitedOptions.JSON_PROPERTY_DELIMITER,
  DelimitedOptions.JSON_PROPERTY_HIDE_HEADER_ROWS,
  DelimitedOptions.JSON_PROPERTY_APPLY_QUOTED_STRINGS,
  DelimitedOptions.JSON_PROPERTY_APPLY_SAVED_N_A_FORMATTING,
  DelimitedOptions.JSON_PROPERTY_APPLY_FILTERS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class DelimitedOptions implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_IS_DATABASE = "isDatabase";
  private Boolean isDatabase = false;

  public static final String JSON_PROPERTY_DELIMITER = "delimiter";
  private JsonNullable<String> delimiter = JsonNullable.<String>of(",");

  public static final String JSON_PROPERTY_HIDE_HEADER_ROWS = "hideHeaderRows";
  private JsonNullable<Boolean> hideHeaderRows = JsonNullable.<Boolean>of(true);

  public static final String JSON_PROPERTY_APPLY_QUOTED_STRINGS = "applyQuotedStrings";
  private JsonNullable<Boolean> applyQuotedStrings = JsonNullable.<Boolean>of(true);

  public static final String JSON_PROPERTY_APPLY_SAVED_N_A_FORMATTING = "applySavedNAFormatting";
  private JsonNullable<Boolean> applySavedNAFormatting = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_APPLY_FILTERS = "applyFilters";
  private JsonNullable<Boolean> applyFilters = JsonNullable.<Boolean>of(false);

  public DelimitedOptions() { 
  }

  public DelimitedOptions isDatabase(Boolean isDatabase) {
    this.isDatabase = isDatabase;
    return this;
  }

   /**
   * Output will be returned in a legacy database format.  Will be ignored if file type of \&quot;text/csv\&quot; is requested.  Default is false.  Additional access is required for this format.
   * @return isDatabase
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Output will be returned in a legacy database format.  Will be ignored if file type of \"text/csv\" is requested.  Default is false.  Additional access is required for this format.")
  @JsonProperty(JSON_PROPERTY_IS_DATABASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsDatabase() {
    return isDatabase;
  }


  @JsonProperty(JSON_PROPERTY_IS_DATABASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsDatabase(Boolean isDatabase) {
    this.isDatabase = isDatabase;
  }


  public DelimitedOptions delimiter(String delimiter) {
    this.delimiter = JsonNullable.<String>of(delimiter);
    return this;
  }

   /**
   * Specifies the delimiter used between each data point.  A comma is the default delimiter; if this argument is not specified, a comma delimiter will be used.  If the file type of \&quot;text/csv\&quot; is requested, this field will be ignored and a comma will be used.
   * @return delimiter
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "|", value = "Specifies the delimiter used between each data point.  A comma is the default delimiter; if this argument is not specified, a comma delimiter will be used.  If the file type of \"text/csv\" is requested, this field will be ignored and a comma will be used.")
  @JsonIgnore

  public String getDelimiter() {
        return delimiter.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDelimiter_JsonNullable() {
    return delimiter;
  }
  
  @JsonProperty(JSON_PROPERTY_DELIMITER)
  public void setDelimiter_JsonNullable(JsonNullable<String> delimiter) {
    this.delimiter = delimiter;
  }

  public void setDelimiter(String delimiter) {
    this.delimiter = JsonNullable.<String>of(delimiter);
  }


  public DelimitedOptions hideHeaderRows(Boolean hideHeaderRows) {
    this.hideHeaderRows = JsonNullable.<Boolean>of(hideHeaderRows);
    return this;
  }

   /**
   * Specifies whether column column headers should be included in the output. By default, the option is set to true.
   * @return hideHeaderRows
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Specifies whether column column headers should be included in the output. By default, the option is set to true.")
  @JsonIgnore

  public Boolean getHideHeaderRows() {
        return hideHeaderRows.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HIDE_HEADER_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getHideHeaderRows_JsonNullable() {
    return hideHeaderRows;
  }
  
  @JsonProperty(JSON_PROPERTY_HIDE_HEADER_ROWS)
  public void setHideHeaderRows_JsonNullable(JsonNullable<Boolean> hideHeaderRows) {
    this.hideHeaderRows = hideHeaderRows;
  }

  public void setHideHeaderRows(Boolean hideHeaderRows) {
    this.hideHeaderRows = JsonNullable.<Boolean>of(hideHeaderRows);
  }


  public DelimitedOptions applyQuotedStrings(Boolean applyQuotedStrings) {
    this.applyQuotedStrings = JsonNullable.<Boolean>of(applyQuotedStrings);
    return this;
  }

   /**
   * Specifies whether textual data should have quotes around it (i.e., true will include quotes around textual values). By default, the option is set to true.
   * @return applyQuotedStrings
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Specifies whether textual data should have quotes around it (i.e., true will include quotes around textual values). By default, the option is set to true.")
  @JsonIgnore

  public Boolean getApplyQuotedStrings() {
        return applyQuotedStrings.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLY_QUOTED_STRINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getApplyQuotedStrings_JsonNullable() {
    return applyQuotedStrings;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLY_QUOTED_STRINGS)
  public void setApplyQuotedStrings_JsonNullable(JsonNullable<Boolean> applyQuotedStrings) {
    this.applyQuotedStrings = applyQuotedStrings;
  }

  public void setApplyQuotedStrings(Boolean applyQuotedStrings) {
    this.applyQuotedStrings = JsonNullable.<Boolean>of(applyQuotedStrings);
  }


  public DelimitedOptions applySavedNAFormatting(Boolean applySavedNAFormatting) {
    this.applySavedNAFormatting = JsonNullable.<Boolean>of(applySavedNAFormatting);
    return this;
  }

   /**
   * Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \&quot;NA\&quot; will be used to indicate the data that is not available.
   * @return applySavedNAFormatting
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \"NA\" will be used to indicate the data that is not available.")
  @JsonIgnore

  public Boolean getApplySavedNAFormatting() {
        return applySavedNAFormatting.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLY_SAVED_N_A_FORMATTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getApplySavedNAFormatting_JsonNullable() {
    return applySavedNAFormatting;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLY_SAVED_N_A_FORMATTING)
  public void setApplySavedNAFormatting_JsonNullable(JsonNullable<Boolean> applySavedNAFormatting) {
    this.applySavedNAFormatting = applySavedNAFormatting;
  }

  public void setApplySavedNAFormatting(Boolean applySavedNAFormatting) {
    this.applySavedNAFormatting = JsonNullable.<Boolean>of(applySavedNAFormatting);
  }


  public DelimitedOptions applyFilters(Boolean applyFilters) {
    this.applyFilters = JsonNullable.<Boolean>of(applyFilters);
    return this;
  }

   /**
   * Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.
   * @return applyFilters
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.")
  @JsonIgnore

  public Boolean getApplyFilters() {
        return applyFilters.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getApplyFilters_JsonNullable() {
    return applyFilters;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLY_FILTERS)
  public void setApplyFilters_JsonNullable(JsonNullable<Boolean> applyFilters) {
    this.applyFilters = applyFilters;
  }

  public void setApplyFilters(Boolean applyFilters) {
    this.applyFilters = JsonNullable.<Boolean>of(applyFilters);
  }


  /**
   * Return true if this DelimitedOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DelimitedOptions delimitedOptions = (DelimitedOptions) o;
    return Objects.equals(this.isDatabase, delimitedOptions.isDatabase) &&
        equalsNullable(this.delimiter, delimitedOptions.delimiter) &&
        equalsNullable(this.hideHeaderRows, delimitedOptions.hideHeaderRows) &&
        equalsNullable(this.applyQuotedStrings, delimitedOptions.applyQuotedStrings) &&
        equalsNullable(this.applySavedNAFormatting, delimitedOptions.applySavedNAFormatting) &&
        equalsNullable(this.applyFilters, delimitedOptions.applyFilters);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isDatabase, hashCodeNullable(delimiter), hashCodeNullable(hideHeaderRows), hashCodeNullable(applyQuotedStrings), hashCodeNullable(applySavedNAFormatting), hashCodeNullable(applyFilters));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DelimitedOptions {\n");
    sb.append("    isDatabase: ").append(toIndentedString(isDatabase)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    hideHeaderRows: ").append(toIndentedString(hideHeaderRows)).append("\n");
    sb.append("    applyQuotedStrings: ").append(toIndentedString(applyQuotedStrings)).append("\n");
    sb.append("    applySavedNAFormatting: ").append(toIndentedString(applySavedNAFormatting)).append("\n");
    sb.append("    applyFilters: ").append(toIndentedString(applyFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

