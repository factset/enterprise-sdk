/*
 * Universal Screening API
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.UniversalScreening.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.UniversalScreening.JSON;


/**
 * Options applied to PDF output.
 */
@ApiModel(description = "Options applied to PDF output.")
@JsonPropertyOrder({
  PdfOptions.JSON_PROPERTY_APPLY_ALTERNATE_ROW_SHADING,
  PdfOptions.JSON_PROPERTY_APPLY_FILTERS,
  PdfOptions.JSON_PROPERTY_APPLY_TEXT_WRAPPING,
  PdfOptions.JSON_PROPERTY_ORIENTATION_LANDSCAPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class PdfOptions implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_APPLY_ALTERNATE_ROW_SHADING = "applyAlternateRowShading";
  private JsonNullable<Boolean> applyAlternateRowShading = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_APPLY_FILTERS = "applyFilters";
  private JsonNullable<Boolean> applyFilters = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_APPLY_TEXT_WRAPPING = "applyTextWrapping";
  private JsonNullable<Boolean> applyTextWrapping = JsonNullable.<Boolean>of(true);

  public static final String JSON_PROPERTY_ORIENTATION_LANDSCAPE = "orientationLandscape";
  private JsonNullable<Boolean> orientationLandscape = JsonNullable.<Boolean>of(false);

  public PdfOptions() { 
  }

  public PdfOptions applyAlternateRowShading(Boolean applyAlternateRowShading) {
    this.applyAlternateRowShading = JsonNullable.<Boolean>of(applyAlternateRowShading);
    return this;
  }

   /**
   * Specifies whether every other row shading should be applied to the output. By default, this option is set to false, which means that every other row shading will not be included in the download.
   * @return applyAlternateRowShading
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies whether every other row shading should be applied to the output. By default, this option is set to false, which means that every other row shading will not be included in the download.")
  @JsonIgnore

  public Boolean getApplyAlternateRowShading() {
        return applyAlternateRowShading.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLY_ALTERNATE_ROW_SHADING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getApplyAlternateRowShading_JsonNullable() {
    return applyAlternateRowShading;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLY_ALTERNATE_ROW_SHADING)
  public void setApplyAlternateRowShading_JsonNullable(JsonNullable<Boolean> applyAlternateRowShading) {
    this.applyAlternateRowShading = applyAlternateRowShading;
  }

  public void setApplyAlternateRowShading(Boolean applyAlternateRowShading) {
    this.applyAlternateRowShading = JsonNullable.<Boolean>of(applyAlternateRowShading);
  }


  public PdfOptions applyFilters(Boolean applyFilters) {
    this.applyFilters = JsonNullable.<Boolean>of(applyFilters);
    return this;
  }

   /**
   * Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.
   * @return applyFilters
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.")
  @JsonIgnore

  public Boolean getApplyFilters() {
        return applyFilters.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getApplyFilters_JsonNullable() {
    return applyFilters;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLY_FILTERS)
  public void setApplyFilters_JsonNullable(JsonNullable<Boolean> applyFilters) {
    this.applyFilters = applyFilters;
  }

  public void setApplyFilters(Boolean applyFilters) {
    this.applyFilters = JsonNullable.<Boolean>of(applyFilters);
  }


  public PdfOptions applyTextWrapping(Boolean applyTextWrapping) {
    this.applyTextWrapping = JsonNullable.<Boolean>of(applyTextWrapping);
    return this;
  }

   /**
   * Specifies that the text in cells be wrapped if there are more characters than can fit in the space available. By default, this option is set to true.
   * @return applyTextWrapping
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies that the text in cells be wrapped if there are more characters than can fit in the space available. By default, this option is set to true.")
  @JsonIgnore

  public Boolean getApplyTextWrapping() {
        return applyTextWrapping.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLY_TEXT_WRAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getApplyTextWrapping_JsonNullable() {
    return applyTextWrapping;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLY_TEXT_WRAPPING)
  public void setApplyTextWrapping_JsonNullable(JsonNullable<Boolean> applyTextWrapping) {
    this.applyTextWrapping = applyTextWrapping;
  }

  public void setApplyTextWrapping(Boolean applyTextWrapping) {
    this.applyTextWrapping = JsonNullable.<Boolean>of(applyTextWrapping);
  }


  public PdfOptions orientationLandscape(Boolean orientationLandscape) {
    this.orientationLandscape = JsonNullable.<Boolean>of(orientationLandscape);
    return this;
  }

   /**
   * Specifies the page orientation of the downloaded file. Value true for Landscape, false for Portrait. By default this is set to false.
   * @return orientationLandscape
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies the page orientation of the downloaded file. Value true for Landscape, false for Portrait. By default this is set to false.")
  @JsonIgnore

  public Boolean getOrientationLandscape() {
        return orientationLandscape.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ORIENTATION_LANDSCAPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getOrientationLandscape_JsonNullable() {
    return orientationLandscape;
  }
  
  @JsonProperty(JSON_PROPERTY_ORIENTATION_LANDSCAPE)
  public void setOrientationLandscape_JsonNullable(JsonNullable<Boolean> orientationLandscape) {
    this.orientationLandscape = orientationLandscape;
  }

  public void setOrientationLandscape(Boolean orientationLandscape) {
    this.orientationLandscape = JsonNullable.<Boolean>of(orientationLandscape);
  }


  /**
   * Return true if this PdfOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfOptions pdfOptions = (PdfOptions) o;
    return equalsNullable(this.applyAlternateRowShading, pdfOptions.applyAlternateRowShading) &&
        equalsNullable(this.applyFilters, pdfOptions.applyFilters) &&
        equalsNullable(this.applyTextWrapping, pdfOptions.applyTextWrapping) &&
        equalsNullable(this.orientationLandscape, pdfOptions.orientationLandscape);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(applyAlternateRowShading), hashCodeNullable(applyFilters), hashCodeNullable(applyTextWrapping), hashCodeNullable(orientationLandscape));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfOptions {\n");
    sb.append("    applyAlternateRowShading: ").append(toIndentedString(applyAlternateRowShading)).append("\n");
    sb.append("    applyFilters: ").append(toIndentedString(applyFilters)).append("\n");
    sb.append("    applyTextWrapping: ").append(toIndentedString(applyTextWrapping)).append("\n");
    sb.append("    orientationLandscape: ").append(toIndentedString(orientationLandscape)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

