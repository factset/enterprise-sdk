/*
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFundamentals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetFundamentals.models.FrequencyEnum;
import com.factset.sdk.FactSetFundamentals.models.PeriodicityEnum;
import com.factset.sdk.FactSetFundamentals.models.UpdateType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFundamentals.JSON;


/**
 * Parameters for requesting Point-in-Time fundamentals data via POST.
 */
@ApiModel(description = "Parameters for requesting Point-in-Time fundamentals data via POST.")
@JsonPropertyOrder({
  FundamentalsPITRequestBody.JSON_PROPERTY_IDS,
  FundamentalsPITRequestBody.JSON_PROPERTY_PERIODICITY,
  FundamentalsPITRequestBody.JSON_PROPERTY_FISCAL_PERIOD_START,
  FundamentalsPITRequestBody.JSON_PROPERTY_FISCAL_PERIOD_END,
  FundamentalsPITRequestBody.JSON_PROPERTY_METRICS,
  FundamentalsPITRequestBody.JSON_PROPERTY_FREQUENCY,
  FundamentalsPITRequestBody.JSON_PROPERTY_PIT_START,
  FundamentalsPITRequestBody.JSON_PROPERTY_PIT_END,
  FundamentalsPITRequestBody.JSON_PROPERTY_UPDATE_TYPE,
  FundamentalsPITRequestBody.JSON_PROPERTY_ACTIVE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FundamentalsPITRequestBody implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_IDS = "ids";
  private java.util.List<String> ids = new java.util.ArrayList<>();

  public static final String JSON_PROPERTY_PERIODICITY = "periodicity";
  private PeriodicityEnum periodicity = PeriodicityEnum.ANN;

  public static final String JSON_PROPERTY_FISCAL_PERIOD_START = "fiscalPeriodStart";
  private LocalDate fiscalPeriodStart;

  public static final String JSON_PROPERTY_FISCAL_PERIOD_END = "fiscalPeriodEnd";
  private LocalDate fiscalPeriodEnd;

  public static final String JSON_PROPERTY_METRICS = "metrics";
  private java.util.List<String> metrics = new java.util.ArrayList<>();

  public static final String JSON_PROPERTY_FREQUENCY = "frequency";
  private FrequencyEnum frequency;

  public static final String JSON_PROPERTY_PIT_START = "pitStart";
  private OffsetDateTime pitStart;

  public static final String JSON_PROPERTY_PIT_END = "pitEnd";
  private OffsetDateTime pitEnd;

  public static final String JSON_PROPERTY_UPDATE_TYPE = "updateType";
  private UpdateType updateType = UpdateType.RP;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active = true;

  public FundamentalsPITRequestBody() { 
  }

  @JsonCreator
  public FundamentalsPITRequestBody(
    @JsonProperty(value=JSON_PROPERTY_IDS, required=true) java.util.List<String> ids, 
    @JsonProperty(value=JSON_PROPERTY_FISCAL_PERIOD_START, required=true) LocalDate fiscalPeriodStart, 
    @JsonProperty(value=JSON_PROPERTY_METRICS, required=true) java.util.List<String> metrics
  ) {
    this();
    this.ids = ids;
    this.fiscalPeriodStart = fiscalPeriodStart;
    this.metrics = metrics;
  }

  public FundamentalsPITRequestBody ids(java.util.List<String> ids) {
    this.ids = ids;
    return this;
  }

  public FundamentalsPITRequestBody addIdsItem(String idsItem) {
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Array of identifiers supported in async requests to &#x60;/point-in-time&#x60; and &#x60;/periods&#x60; endpoints.  Accepted types: Tickers, SEDOLs, ISINs, CUSIPs, FactSet Permanent Security, Regional, and Entity Identifiers.
   * @return ids
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "[\"FDS-US\",\"AAPL-US\",\"MSFT-US\"]", required = true, value = "Array of identifiers supported in async requests to `/point-in-time` and `/periods` endpoints.  Accepted types: Tickers, SEDOLs, ISINs, CUSIPs, FactSet Permanent Security, Regional, and Entity Identifiers.")
  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.List<String> getIds() {
    return ids;
  }


  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIds(java.util.List<String> ids) {
    this.ids = ids;
  }


  public FundamentalsPITRequestBody periodicity(PeriodicityEnum periodicity) {
    this.periodicity = periodicity;
    return this;
  }

   /**
   * Get periodicity
   * @return periodicity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PERIODICITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PeriodicityEnum getPeriodicity() {
    return periodicity;
  }


  @JsonProperty(JSON_PROPERTY_PERIODICITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPeriodicity(PeriodicityEnum periodicity) {
    this.periodicity = periodicity;
  }


  public FundamentalsPITRequestBody fiscalPeriodStart(LocalDate fiscalPeriodStart) {
    this.fiscalPeriodStart = fiscalPeriodStart;
    return this;
  }

   /**
   * Filters for fiscal periods ending on or after this date (YYYY-MM-DD). Used with &#x60;fiscalPeriodEnd&#x60; for a range, or alone for the earliest period.
   * @return fiscalPeriodStart
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Tue Jan 01 00:00:00 UTC 2019", required = true, value = "Filters for fiscal periods ending on or after this date (YYYY-MM-DD). Used with `fiscalPeriodEnd` for a range, or alone for the earliest period.")
  @JsonProperty(JSON_PROPERTY_FISCAL_PERIOD_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getFiscalPeriodStart() {
    return fiscalPeriodStart;
  }


  @JsonProperty(JSON_PROPERTY_FISCAL_PERIOD_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFiscalPeriodStart(LocalDate fiscalPeriodStart) {
    this.fiscalPeriodStart = fiscalPeriodStart;
  }


  public FundamentalsPITRequestBody fiscalPeriodEnd(LocalDate fiscalPeriodEnd) {
    this.fiscalPeriodEnd = fiscalPeriodEnd;
    return this;
  }

   /**
   * Filters for fiscal periods ending on or before this date (YYYY-MM-DD). Used with &#x60;fiscalPeriodStart&#x60; for a range, or alone for the latest period.
   * @return fiscalPeriodEnd
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Fri Dec 31 00:00:00 UTC 2021", value = "Filters for fiscal periods ending on or before this date (YYYY-MM-DD). Used with `fiscalPeriodStart` for a range, or alone for the latest period.")
  @JsonProperty(JSON_PROPERTY_FISCAL_PERIOD_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getFiscalPeriodEnd() {
    return fiscalPeriodEnd;
  }


  @JsonProperty(JSON_PROPERTY_FISCAL_PERIOD_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiscalPeriodEnd(LocalDate fiscalPeriodEnd) {
    this.fiscalPeriodEnd = fiscalPeriodEnd;
  }


  public FundamentalsPITRequestBody metrics(java.util.List<String> metrics) {
    this.metrics = metrics;
    return this;
  }

  public FundamentalsPITRequestBody addMetricsItem(String metricsItem) {
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * An array of fundamentals metric identifiers. Use the &#x60;/metrics&#x60; endpoint for a complete list of available metric identifiers.
   * @return metrics
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "[\"FF_SALES\",\"FF_EPS\"]", required = true, value = "An array of fundamentals metric identifiers. Use the `/metrics` endpoint for a complete list of available metric identifiers.")
  @JsonProperty(JSON_PROPERTY_METRICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.List<String> getMetrics() {
    return metrics;
  }


  @JsonProperty(JSON_PROPERTY_METRICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetrics(java.util.List<String> metrics) {
    this.metrics = metrics;
  }


  public FundamentalsPITRequestBody frequency(FrequencyEnum frequency) {
    this.frequency = frequency;
    return this;
  }

   /**
   * Get frequency
   * @return frequency
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FrequencyEnum getFrequency() {
    return frequency;
  }


  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  public FundamentalsPITRequestBody pitStart(OffsetDateTime pitStart) {
    this.pitStart = pitStart;
    return this;
  }

   /**
   * Filters PIT snapshots taken on or after this UTC date and time. * Use ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. * If &#x60;pitStart&#x60; and &#x60;pitEnd&#x60; are omitted, the full PIT history is returned (respecting &#x60;frequency&#x60; if provided). * For a specific point in time, provide the same value for both &#x60;pitStart&#x60; and &#x60;pitEnd&#x60;. 
   * @return pitStart
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2020-08-30T13:00Z", value = "Filters PIT snapshots taken on or after this UTC date and time. * Use ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. * If `pitStart` and `pitEnd` are omitted, the full PIT history is returned (respecting `frequency` if provided). * For a specific point in time, provide the same value for both `pitStart` and `pitEnd`. ")
  @JsonProperty(JSON_PROPERTY_PIT_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getPitStart() {
    return pitStart;
  }


  @JsonProperty(JSON_PROPERTY_PIT_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPitStart(OffsetDateTime pitStart) {
    this.pitStart = pitStart;
  }


  public FundamentalsPITRequestBody pitEnd(OffsetDateTime pitEnd) {
    this.pitEnd = pitEnd;
    return this;
  }

   /**
   * Filters PIT snapshots taken on or before this UTC date and time. * Use ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. * Must be used with &#x60;pitStart&#x60; to define a range. * For a specific point in time, use the same value for both &#x60;pitStart&#x60; and &#x60;pitEnd&#x60;. 
   * @return pitEnd
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2021-12-31T22:00Z", value = "Filters PIT snapshots taken on or before this UTC date and time. * Use ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. * Must be used with `pitStart` to define a range. * For a specific point in time, use the same value for both `pitStart` and `pitEnd`. ")
  @JsonProperty(JSON_PROPERTY_PIT_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getPitEnd() {
    return pitEnd;
  }


  @JsonProperty(JSON_PROPERTY_PIT_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPitEnd(OffsetDateTime pitEnd) {
    this.pitEnd = pitEnd;
  }


  public FundamentalsPITRequestBody updateType(UpdateType updateType) {
    this.updateType = updateType;
    return this;
  }

   /**
   * Get updateType
   * @return updateType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_UPDATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UpdateType getUpdateType() {
    return updateType;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateType(UpdateType updateType) {
    this.updateType = updateType;
  }


  public FundamentalsPITRequestBody active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Optional flag to restrict results to securities that were active on the snapshot (PIT) date.  When set to true, applies point-in-time filtering based on the security&#39;s active date range. Prevents inclusion of future-dated entities.
   * @return active
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Optional flag to restrict results to securities that were active on the snapshot (PIT) date.  When set to true, applies point-in-time filtering based on the security's active date range. Prevents inclusion of future-dated entities.")
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  /**
   * Return true if this FundamentalsPITRequestBody object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundamentalsPITRequestBody fundamentalsPITRequestBody = (FundamentalsPITRequestBody) o;
    return Objects.equals(this.ids, fundamentalsPITRequestBody.ids) &&
        Objects.equals(this.periodicity, fundamentalsPITRequestBody.periodicity) &&
        Objects.equals(this.fiscalPeriodStart, fundamentalsPITRequestBody.fiscalPeriodStart) &&
        Objects.equals(this.fiscalPeriodEnd, fundamentalsPITRequestBody.fiscalPeriodEnd) &&
        Objects.equals(this.metrics, fundamentalsPITRequestBody.metrics) &&
        Objects.equals(this.frequency, fundamentalsPITRequestBody.frequency) &&
        Objects.equals(this.pitStart, fundamentalsPITRequestBody.pitStart) &&
        Objects.equals(this.pitEnd, fundamentalsPITRequestBody.pitEnd) &&
        Objects.equals(this.updateType, fundamentalsPITRequestBody.updateType) &&
        Objects.equals(this.active, fundamentalsPITRequestBody.active);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, periodicity, fiscalPeriodStart, fiscalPeriodEnd, metrics, frequency, pitStart, pitEnd, updateType, active);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundamentalsPITRequestBody {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    periodicity: ").append(toIndentedString(periodicity)).append("\n");
    sb.append("    fiscalPeriodStart: ").append(toIndentedString(fiscalPeriodStart)).append("\n");
    sb.append("    fiscalPeriodEnd: ").append(toIndentedString(fiscalPeriodEnd)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    pitStart: ").append(toIndentedString(pitStart)).append("\n");
    sb.append("    pitEnd: ").append(toIndentedString(pitEnd)).append("\n");
    sb.append("    updateType: ").append(toIndentedString(updateType)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

