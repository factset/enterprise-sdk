/*
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFundamentals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetFundamentals.models.PeriodicityEnum;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFundamentals.JSON;


/**
 * Parameters for requesting fiscal period information via POST.
 */
@ApiModel(description = "Parameters for requesting fiscal period information via POST.")
@JsonPropertyOrder({
  PeriodsRequestBody.JSON_PROPERTY_IDS,
  PeriodsRequestBody.JSON_PROPERTY_PERIODICITY,
  PeriodsRequestBody.JSON_PROPERTY_FISCAL_PERIOD_START,
  PeriodsRequestBody.JSON_PROPERTY_FISCAL_PERIOD_END
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class PeriodsRequestBody implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_IDS = "ids";
  private java.util.List<String> ids = new java.util.ArrayList<>();

  public static final String JSON_PROPERTY_PERIODICITY = "periodicity";
  private PeriodicityEnum periodicity = PeriodicityEnum.ANN;

  public static final String JSON_PROPERTY_FISCAL_PERIOD_START = "fiscalPeriodStart";
  private LocalDate fiscalPeriodStart;

  public static final String JSON_PROPERTY_FISCAL_PERIOD_END = "fiscalPeriodEnd";
  private LocalDate fiscalPeriodEnd;

  public PeriodsRequestBody() { 
  }

  @JsonCreator
  public PeriodsRequestBody(
    @JsonProperty(value=JSON_PROPERTY_IDS, required=true) java.util.List<String> ids, 
    @JsonProperty(value=JSON_PROPERTY_FISCAL_PERIOD_START, required=true) LocalDate fiscalPeriodStart
  ) {
    this();
    this.ids = ids;
    this.fiscalPeriodStart = fiscalPeriodStart;
  }

  public PeriodsRequestBody ids(java.util.List<String> ids) {
    this.ids = ids;
    return this;
  }

  public PeriodsRequestBody addIdsItem(String idsItem) {
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Array of identifiers supported in async requests to &#x60;/point-in-time&#x60; and &#x60;/periods&#x60; endpoints.  Accepted types: Tickers, SEDOLs, ISINs, CUSIPs, FactSet Permanent Security, Regional, and Entity Identifiers.
   * @return ids
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "[\"FDS-US\",\"AAPL-US\",\"MSFT-US\"]", required = true, value = "Array of identifiers supported in async requests to `/point-in-time` and `/periods` endpoints.  Accepted types: Tickers, SEDOLs, ISINs, CUSIPs, FactSet Permanent Security, Regional, and Entity Identifiers.")
  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.List<String> getIds() {
    return ids;
  }


  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIds(java.util.List<String> ids) {
    this.ids = ids;
  }


  public PeriodsRequestBody periodicity(PeriodicityEnum periodicity) {
    this.periodicity = periodicity;
    return this;
  }

   /**
   * Get periodicity
   * @return periodicity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PERIODICITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PeriodicityEnum getPeriodicity() {
    return periodicity;
  }


  @JsonProperty(JSON_PROPERTY_PERIODICITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPeriodicity(PeriodicityEnum periodicity) {
    this.periodicity = periodicity;
  }


  public PeriodsRequestBody fiscalPeriodStart(LocalDate fiscalPeriodStart) {
    this.fiscalPeriodStart = fiscalPeriodStart;
    return this;
  }

   /**
   * Filters for fiscal periods ending on or after this date (YYYY-MM-DD). Used with &#x60;fiscalPeriodEnd&#x60; for a range, or alone for the earliest period.
   * @return fiscalPeriodStart
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Tue Jan 01 00:00:00 UTC 2019", required = true, value = "Filters for fiscal periods ending on or after this date (YYYY-MM-DD). Used with `fiscalPeriodEnd` for a range, or alone for the earliest period.")
  @JsonProperty(JSON_PROPERTY_FISCAL_PERIOD_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getFiscalPeriodStart() {
    return fiscalPeriodStart;
  }


  @JsonProperty(JSON_PROPERTY_FISCAL_PERIOD_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFiscalPeriodStart(LocalDate fiscalPeriodStart) {
    this.fiscalPeriodStart = fiscalPeriodStart;
  }


  public PeriodsRequestBody fiscalPeriodEnd(LocalDate fiscalPeriodEnd) {
    this.fiscalPeriodEnd = fiscalPeriodEnd;
    return this;
  }

   /**
   * Filters for fiscal periods ending on or before this date (YYYY-MM-DD). Used with &#x60;fiscalPeriodStart&#x60; for a range, or alone for the latest period.
   * @return fiscalPeriodEnd
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Fri Dec 31 00:00:00 UTC 2021", value = "Filters for fiscal periods ending on or before this date (YYYY-MM-DD). Used with `fiscalPeriodStart` for a range, or alone for the latest period.")
  @JsonProperty(JSON_PROPERTY_FISCAL_PERIOD_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getFiscalPeriodEnd() {
    return fiscalPeriodEnd;
  }


  @JsonProperty(JSON_PROPERTY_FISCAL_PERIOD_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiscalPeriodEnd(LocalDate fiscalPeriodEnd) {
    this.fiscalPeriodEnd = fiscalPeriodEnd;
  }


  /**
   * Return true if this PeriodsRequestBody object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeriodsRequestBody periodsRequestBody = (PeriodsRequestBody) o;
    return Objects.equals(this.ids, periodsRequestBody.ids) &&
        Objects.equals(this.periodicity, periodsRequestBody.periodicity) &&
        Objects.equals(this.fiscalPeriodStart, periodsRequestBody.fiscalPeriodStart) &&
        Objects.equals(this.fiscalPeriodEnd, periodsRequestBody.fiscalPeriodEnd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, periodicity, fiscalPeriodStart, fiscalPeriodEnd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeriodsRequestBody {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    periodicity: ").append(toIndentedString(periodicity)).append("\n");
    sb.append("    fiscalPeriodStart: ").append(toIndentedString(fiscalPeriodStart)).append("\n");
    sb.append("    fiscalPeriodEnd: ").append(toIndentedString(fiscalPeriodEnd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

