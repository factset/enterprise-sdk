/*
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.4.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFundamentals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFundamentals.JSON;


/**
 * PerShare
 */
@JsonPropertyOrder({
  PerShare.JSON_PROPERTY_BOOK_VALUE_PER_SHARE,
  PerShare.JSON_PROPERTY_CASH_FLOW_PER_SHARE,
  PerShare.JSON_PROPERTY_CASH_PER_SHARE,
  PerShare.JSON_PROPERTY_EARNINGS_PER_SHARE,
  PerShare.JSON_PROPERTY_REVENUE_PER_SHARE,
  PerShare.JSON_PROPERTY_SALES_PER_SHARE,
  PerShare.JSON_PROPERTY_TRAILING_TWELVE_MONTH_EARNINGS_PER_SHARE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class PerShare implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_BOOK_VALUE_PER_SHARE = "bookValuePerShare";
  private JsonNullable<Double> bookValuePerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_CASH_FLOW_PER_SHARE = "cashFlowPerShare";
  private JsonNullable<Double> cashFlowPerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_CASH_PER_SHARE = "cashPerShare";
  private JsonNullable<Double> cashPerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_EARNINGS_PER_SHARE = "earningsPerShare";
  private JsonNullable<Double> earningsPerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_REVENUE_PER_SHARE = "revenuePerShare";
  private JsonNullable<Double> revenuePerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_SALES_PER_SHARE = "salesPerShare";
  private JsonNullable<Double> salesPerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_TRAILING_TWELVE_MONTH_EARNINGS_PER_SHARE = "trailingTwelveMonthEarningsPerShare";
  private JsonNullable<Double> trailingTwelveMonthEarningsPerShare = JsonNullable.<Double>undefined();

  public PerShare() { 
  }

  public PerShare bookValuePerShare(Double bookValuePerShare) {
    this.bookValuePerShare = JsonNullable.<Double>of(bookValuePerShare);
    return this;
  }

   /**
   * Book value per common share is a formula used to calculate the per share value of a company based on common shareholders&#39; equity in the company
   * @return bookValuePerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "25.27711", value = "Book value per common share is a formula used to calculate the per share value of a company based on common shareholders' equity in the company")
  @JsonIgnore

  public Double getBookValuePerShare() {
        return bookValuePerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BOOK_VALUE_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getBookValuePerShare_JsonNullable() {
    return bookValuePerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_BOOK_VALUE_PER_SHARE)
  public void setBookValuePerShare_JsonNullable(JsonNullable<Double> bookValuePerShare) {
    this.bookValuePerShare = bookValuePerShare;
  }

  public void setBookValuePerShare(Double bookValuePerShare) {
    this.bookValuePerShare = JsonNullable.<Double>of(bookValuePerShare);
  }


  public PerShare cashFlowPerShare(Double cashFlowPerShare) {
    this.cashFlowPerShare = JsonNullable.<Double>of(cashFlowPerShare);
    return this;
  }

   /**
   * Cash flow per share is calculated as a ratio, indicating the amount of cash a business generates based on a company’s net income with the costs of depreciation and amortization added back
   * @return cashFlowPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "10.4268994512216", value = "Cash flow per share is calculated as a ratio, indicating the amount of cash a business generates based on a company’s net income with the costs of depreciation and amortization added back")
  @JsonIgnore

  public Double getCashFlowPerShare() {
        return cashFlowPerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CASH_FLOW_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getCashFlowPerShare_JsonNullable() {
    return cashFlowPerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_CASH_FLOW_PER_SHARE)
  public void setCashFlowPerShare_JsonNullable(JsonNullable<Double> cashFlowPerShare) {
    this.cashFlowPerShare = cashFlowPerShare;
  }

  public void setCashFlowPerShare(Double cashFlowPerShare) {
    this.cashFlowPerShare = JsonNullable.<Double>of(cashFlowPerShare);
  }


  public PerShare cashPerShare(Double cashPerShare) {
    this.cashPerShare = JsonNullable.<Double>of(cashPerShare);
    return this;
  }

   /**
   * Cash Per Share of Security
   * @return cashPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "7.968296945651575", value = "Cash Per Share of Security")
  @JsonIgnore

  public Double getCashPerShare() {
        return cashPerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CASH_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getCashPerShare_JsonNullable() {
    return cashPerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_CASH_PER_SHARE)
  public void setCashPerShare_JsonNullable(JsonNullable<Double> cashPerShare) {
    this.cashPerShare = cashPerShare;
  }

  public void setCashPerShare(Double cashPerShare) {
    this.cashPerShare = JsonNullable.<Double>of(cashPerShare);
  }


  public PerShare earningsPerShare(Double earningsPerShare) {
    this.earningsPerShare = JsonNullable.<Double>of(earningsPerShare);
    return this;
  }

   /**
   * Earnings per share (EPS) is the portion of a company&#39;s profit allocated to each share of common stock
   * @return earningsPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1.8668", value = "Earnings per share (EPS) is the portion of a company's profit allocated to each share of common stock")
  @JsonIgnore

  public Double getEarningsPerShare() {
        return earningsPerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EARNINGS_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getEarningsPerShare_JsonNullable() {
    return earningsPerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_EARNINGS_PER_SHARE)
  public void setEarningsPerShare_JsonNullable(JsonNullable<Double> earningsPerShare) {
    this.earningsPerShare = earningsPerShare;
  }

  public void setEarningsPerShare(Double earningsPerShare) {
    this.earningsPerShare = JsonNullable.<Double>of(earningsPerShare);
  }


  public PerShare revenuePerShare(Double revenuePerShare) {
    this.revenuePerShare = JsonNullable.<Double>of(revenuePerShare);
    return this;
  }

   /**
   * The portion of a company&#39;s revenue that is allocated to each share of common stock.
   * @return revenuePerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "66.3510388780454", value = "The portion of a company's revenue that is allocated to each share of common stock.")
  @JsonIgnore

  public Double getRevenuePerShare() {
        return revenuePerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REVENUE_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getRevenuePerShare_JsonNullable() {
    return revenuePerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_REVENUE_PER_SHARE)
  public void setRevenuePerShare_JsonNullable(JsonNullable<Double> revenuePerShare) {
    this.revenuePerShare = revenuePerShare;
  }

  public void setRevenuePerShare(Double revenuePerShare) {
    this.revenuePerShare = JsonNullable.<Double>of(revenuePerShare);
  }


  public PerShare salesPerShare(Double salesPerShare) {
    this.salesPerShare = JsonNullable.<Double>of(salesPerShare);
    return this;
  }

   /**
   * Sales per share is a ratio that computes the total revenue earned per share over a designated period
   * @return salesPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "15.9710148599077", value = "Sales per share is a ratio that computes the total revenue earned per share over a designated period")
  @JsonIgnore

  public Double getSalesPerShare() {
        return salesPerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SALES_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getSalesPerShare_JsonNullable() {
    return salesPerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_SALES_PER_SHARE)
  public void setSalesPerShare_JsonNullable(JsonNullable<Double> salesPerShare) {
    this.salesPerShare = salesPerShare;
  }

  public void setSalesPerShare(Double salesPerShare) {
    this.salesPerShare = JsonNullable.<Double>of(salesPerShare);
  }


  public PerShare trailingTwelveMonthEarningsPerShare(Double trailingTwelveMonthEarningsPerShare) {
    this.trailingTwelveMonthEarningsPerShare = JsonNullable.<Double>of(trailingTwelveMonthEarningsPerShare);
    return this;
  }

   /**
   * Earnings per share over the last 12 months.
   * @return trailingTwelveMonthEarningsPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "7.621", value = "Earnings per share over the last 12 months.")
  @JsonIgnore

  public Double getTrailingTwelveMonthEarningsPerShare() {
        return trailingTwelveMonthEarningsPerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRAILING_TWELVE_MONTH_EARNINGS_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getTrailingTwelveMonthEarningsPerShare_JsonNullable() {
    return trailingTwelveMonthEarningsPerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_TRAILING_TWELVE_MONTH_EARNINGS_PER_SHARE)
  public void setTrailingTwelveMonthEarningsPerShare_JsonNullable(JsonNullable<Double> trailingTwelveMonthEarningsPerShare) {
    this.trailingTwelveMonthEarningsPerShare = trailingTwelveMonthEarningsPerShare;
  }

  public void setTrailingTwelveMonthEarningsPerShare(Double trailingTwelveMonthEarningsPerShare) {
    this.trailingTwelveMonthEarningsPerShare = JsonNullable.<Double>of(trailingTwelveMonthEarningsPerShare);
  }


  /**
   * Return true if this PerShare object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerShare perShare = (PerShare) o;
    return equalsNullable(this.bookValuePerShare, perShare.bookValuePerShare) &&
        equalsNullable(this.cashFlowPerShare, perShare.cashFlowPerShare) &&
        equalsNullable(this.cashPerShare, perShare.cashPerShare) &&
        equalsNullable(this.earningsPerShare, perShare.earningsPerShare) &&
        equalsNullable(this.revenuePerShare, perShare.revenuePerShare) &&
        equalsNullable(this.salesPerShare, perShare.salesPerShare) &&
        equalsNullable(this.trailingTwelveMonthEarningsPerShare, perShare.trailingTwelveMonthEarningsPerShare);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(bookValuePerShare), hashCodeNullable(cashFlowPerShare), hashCodeNullable(cashPerShare), hashCodeNullable(earningsPerShare), hashCodeNullable(revenuePerShare), hashCodeNullable(salesPerShare), hashCodeNullable(trailingTwelveMonthEarningsPerShare));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerShare {\n");
    sb.append("    bookValuePerShare: ").append(toIndentedString(bookValuePerShare)).append("\n");
    sb.append("    cashFlowPerShare: ").append(toIndentedString(cashFlowPerShare)).append("\n");
    sb.append("    cashPerShare: ").append(toIndentedString(cashPerShare)).append("\n");
    sb.append("    earningsPerShare: ").append(toIndentedString(earningsPerShare)).append("\n");
    sb.append("    revenuePerShare: ").append(toIndentedString(revenuePerShare)).append("\n");
    sb.append("    salesPerShare: ").append(toIndentedString(salesPerShare)).append("\n");
    sb.append("    trailingTwelveMonthEarningsPerShare: ").append(toIndentedString(trailingTwelveMonthEarningsPerShare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

