/*
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFundamentals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFundamentals.JSON;


/**
 * The name of the exchange for the security being requested.
 */
@ApiModel(description = "The name of the exchange for the security being requested.")
@JsonPropertyOrder({
  Exchange.JSON_PROPERTY_EXCHANGE_ID,
  Exchange.JSON_PROPERTY_FULL_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Exchange implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EXCHANGE_ID = "exchangeId";
  private JsonNullable<String> exchangeId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FULL_NAME = "fullName";
  private JsonNullable<String> fullName = JsonNullable.<String>undefined();

  public Exchange() { 
  }

  public Exchange exchangeId(String exchangeId) {
    this.exchangeId = JsonNullable.<String>of(exchangeId);
    return this;
  }

   /**
   * The id of the exchange.
   * @return exchangeId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "NAS", value = "The id of the exchange.")
  @JsonIgnore

  public String getExchangeId() {
        return exchangeId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXCHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getExchangeId_JsonNullable() {
    return exchangeId;
  }
  
  @JsonProperty(JSON_PROPERTY_EXCHANGE_ID)
  public void setExchangeId_JsonNullable(JsonNullable<String> exchangeId) {
    this.exchangeId = exchangeId;
  }

  public void setExchangeId(String exchangeId) {
    this.exchangeId = JsonNullable.<String>of(exchangeId);
  }


  public Exchange fullName(String fullName) {
    this.fullName = JsonNullable.<String>of(fullName);
    return this;
  }

   /**
   * The full name of the exchange.
   * @return fullName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "NASDAQ", value = "The full name of the exchange.")
  @JsonIgnore

  public String getFullName() {
        return fullName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFullName_JsonNullable() {
    return fullName;
  }
  
  @JsonProperty(JSON_PROPERTY_FULL_NAME)
  public void setFullName_JsonNullable(JsonNullable<String> fullName) {
    this.fullName = fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = JsonNullable.<String>of(fullName);
  }


  /**
   * Return true if this Exchange object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Exchange exchange = (Exchange) o;
    return equalsNullable(this.exchangeId, exchange.exchangeId) &&
        equalsNullable(this.fullName, exchange.fullName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(exchangeId), hashCodeNullable(fullName));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Exchange {\n");
    sb.append("    exchangeId: ").append(toIndentedString(exchangeId)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

