/*
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFundamentals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetFundamentals.models.CompanyReportErrorObject;
import com.factset.sdk.FactSetFundamentals.models.Dividend;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFundamentals.JSON;


/**
 * Factset Fundamental Response item
 */
@ApiModel(description = "Factset Fundamental Response item")
@JsonPropertyOrder({
  Fundamentals.JSON_PROPERTY_REQUEST_ID,
  Fundamentals.JSON_PROPERTY_ERROR,
  Fundamentals.JSON_PROPERTY_FSYM_ID,
  Fundamentals.JSON_PROPERTY_AS_OF_DATE,
  Fundamentals.JSON_PROPERTY_CURRENCY,
  Fundamentals.JSON_PROPERTY_ASSET_TURNOVER_RATIO,
  Fundamentals.JSON_PROPERTY_BOOK_VALUE_PER_SHARE,
  Fundamentals.JSON_PROPERTY_CASH_FLOW_PER_SHARE,
  Fundamentals.JSON_PROPERTY_CASH_PER_SHARE,
  Fundamentals.JSON_PROPERTY_CURRENT_RATIO,
  Fundamentals.JSON_PROPERTY_DIVIDEND,
  Fundamentals.JSON_PROPERTY_EARNINGS_PER_SHARE,
  Fundamentals.JSON_PROPERTY_EBIT_MARGIN,
  Fundamentals.JSON_PROPERTY_EBITDA_MARGIN,
  Fundamentals.JSON_PROPERTY_ENTERPRISE_VALUE,
  Fundamentals.JSON_PROPERTY_FIVE_YEAR_AVERAGE_YIELD,
  Fundamentals.JSON_PROPERTY_FIVE_YEAR_DIVIDEND_GROWTH_RATE,
  Fundamentals.JSON_PROPERTY_FLOATING_SHARES_OUTSTANDING,
  Fundamentals.JSON_PROPERTY_GROSS_MARGIN,
  Fundamentals.JSON_PROPERTY_INVENTORY_TURNOVER,
  Fundamentals.JSON_PROPERTY_LONG_TERM_DEBT_TO_EQUITY,
  Fundamentals.JSON_PROPERTY_NET_INCOME,
  Fundamentals.JSON_PROPERTY_NUMBER_OF_EMPLOYEES,
  Fundamentals.JSON_PROPERTY_PAYOUT_RATIO,
  Fundamentals.JSON_PROPERTY_PRETAX_MARGIN,
  Fundamentals.JSON_PROPERTY_PRICE_TO_BOOK_RATIO,
  Fundamentals.JSON_PROPERTY_PRICE_TO_CASH_FLOW_RATIO,
  Fundamentals.JSON_PROPERTY_PRICE_TO_EARNINGS_RATIO,
  Fundamentals.JSON_PROPERTY_PRICE_TO_SALES_RATIO,
  Fundamentals.JSON_PROPERTY_QUICK_RATIO,
  Fundamentals.JSON_PROPERTY_RETURN_ON_ASSETS,
  Fundamentals.JSON_PROPERTY_RETURN_ON_EQUITY,
  Fundamentals.JSON_PROPERTY_RETURN_ON_INVESTED_CAPITAL,
  Fundamentals.JSON_PROPERTY_REVENUE_PER_SHARE,
  Fundamentals.JSON_PROPERTY_SALES_PER_EMPLOYEE,
  Fundamentals.JSON_PROPERTY_SALES_PER_SHARE,
  Fundamentals.JSON_PROPERTY_SHARE_HOLDER_EQUITY,
  Fundamentals.JSON_PROPERTY_THREE_YEAR_AVERAGE_YIELD,
  Fundamentals.JSON_PROPERTY_THREE_YEAR_DIVIDEND_GROWTH_RATE,
  Fundamentals.JSON_PROPERTY_TOTAL_ASSETS,
  Fundamentals.JSON_PROPERTY_TOTAL_DEBT_TO_EQUITY,
  Fundamentals.JSON_PROPERTY_TOTAL_REVENUE,
  Fundamentals.JSON_PROPERTY_TRAILING_TWELVE_MONTH_EARNINGS_PER_SHARE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Fundamentals implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public static final String JSON_PROPERTY_ERROR = "error";
  private CompanyReportErrorObject error;

  public static final String JSON_PROPERTY_FSYM_ID = "fsymId";
  private JsonNullable<String> fsymId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_AS_OF_DATE = "asOfDate";
  private JsonNullable<LocalDate> asOfDate = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private JsonNullable<String> currency = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ASSET_TURNOVER_RATIO = "assetTurnoverRatio";
  private JsonNullable<Double> assetTurnoverRatio = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_BOOK_VALUE_PER_SHARE = "bookValuePerShare";
  private JsonNullable<Double> bookValuePerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_CASH_FLOW_PER_SHARE = "cashFlowPerShare";
  private JsonNullable<Double> cashFlowPerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_CASH_PER_SHARE = "cashPerShare";
  private JsonNullable<Double> cashPerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_CURRENT_RATIO = "currentRatio";
  private JsonNullable<Double> currentRatio = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_DIVIDEND = "dividend";
  private Dividend dividend;

  public static final String JSON_PROPERTY_EARNINGS_PER_SHARE = "earningsPerShare";
  private JsonNullable<Double> earningsPerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_EBIT_MARGIN = "ebitMargin";
  private JsonNullable<Double> ebitMargin = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_EBITDA_MARGIN = "ebitdaMargin";
  private JsonNullable<Double> ebitdaMargin = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_ENTERPRISE_VALUE = "enterpriseValue";
  private JsonNullable<Double> enterpriseValue = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_FIVE_YEAR_AVERAGE_YIELD = "fiveYearAverageYield";
  private JsonNullable<Double> fiveYearAverageYield = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_FIVE_YEAR_DIVIDEND_GROWTH_RATE = "fiveYearDividendGrowthRate";
  private JsonNullable<Double> fiveYearDividendGrowthRate = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_FLOATING_SHARES_OUTSTANDING = "floatingSharesOutstanding";
  private JsonNullable<Double> floatingSharesOutstanding = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_GROSS_MARGIN = "grossMargin";
  private JsonNullable<Double> grossMargin = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_INVENTORY_TURNOVER = "inventoryTurnover";
  private JsonNullable<Double> inventoryTurnover = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_LONG_TERM_DEBT_TO_EQUITY = "longTermDebtToEquity";
  private JsonNullable<Double> longTermDebtToEquity = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_NET_INCOME = "netIncome";
  private JsonNullable<Double> netIncome = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_NUMBER_OF_EMPLOYEES = "numberOfEmployees";
  private JsonNullable<Integer> numberOfEmployees = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_PAYOUT_RATIO = "payoutRatio";
  private JsonNullable<Double> payoutRatio = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_PRETAX_MARGIN = "pretaxMargin";
  private JsonNullable<Double> pretaxMargin = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_PRICE_TO_BOOK_RATIO = "priceToBookRatio";
  private JsonNullable<Double> priceToBookRatio = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_PRICE_TO_CASH_FLOW_RATIO = "priceToCashFlowRatio";
  private JsonNullable<Double> priceToCashFlowRatio = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_PRICE_TO_EARNINGS_RATIO = "priceToEarningsRatio";
  private JsonNullable<Double> priceToEarningsRatio = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_PRICE_TO_SALES_RATIO = "priceToSalesRatio";
  private JsonNullable<Double> priceToSalesRatio = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_QUICK_RATIO = "quickRatio";
  private JsonNullable<Double> quickRatio = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_RETURN_ON_ASSETS = "returnOnAssets";
  private JsonNullable<Double> returnOnAssets = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_RETURN_ON_EQUITY = "returnOnEquity";
  private JsonNullable<Double> returnOnEquity = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_RETURN_ON_INVESTED_CAPITAL = "returnOnInvestedCapital";
  private JsonNullable<Double> returnOnInvestedCapital = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_REVENUE_PER_SHARE = "revenuePerShare";
  private JsonNullable<Double> revenuePerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_SALES_PER_EMPLOYEE = "salesPerEmployee";
  private JsonNullable<Double> salesPerEmployee = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_SALES_PER_SHARE = "salesPerShare";
  private JsonNullable<Double> salesPerShare = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_SHARE_HOLDER_EQUITY = "shareHolderEquity";
  private JsonNullable<Double> shareHolderEquity = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_THREE_YEAR_AVERAGE_YIELD = "threeYearAverageYield";
  private JsonNullable<Double> threeYearAverageYield = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_THREE_YEAR_DIVIDEND_GROWTH_RATE = "threeYearDividendGrowthRate";
  private JsonNullable<Double> threeYearDividendGrowthRate = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_TOTAL_ASSETS = "totalAssets";
  private JsonNullable<Double> totalAssets = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_TOTAL_DEBT_TO_EQUITY = "totalDebtToEquity";
  private JsonNullable<Double> totalDebtToEquity = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_TOTAL_REVENUE = "totalRevenue";
  private JsonNullable<Double> totalRevenue = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_TRAILING_TWELVE_MONTH_EARNINGS_PER_SHARE = "trailingTwelveMonthEarningsPerShare";
  private JsonNullable<Double> trailingTwelveMonthEarningsPerShare = JsonNullable.<Double>undefined();

  public Fundamentals() { 
  }

  public Fundamentals requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier that was used for the request.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "IBM-US", value = "Identifier that was used for the request.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public Fundamentals error(CompanyReportErrorObject error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CompanyReportErrorObject getError() {
    return error;
  }


  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setError(CompanyReportErrorObject error) {
    this.error = error;
  }


  public Fundamentals fsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
    return this;
  }

   /**
   * FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
   * @return fsymId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "SJY281-R", value = "FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.")
  @JsonIgnore

  public String getFsymId() {
        return fsymId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFsymId_JsonNullable() {
    return fsymId;
  }
  
  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  public void setFsymId_JsonNullable(JsonNullable<String> fsymId) {
    this.fsymId = fsymId;
  }

  public void setFsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
  }


  public Fundamentals asOfDate(LocalDate asOfDate) {
    this.asOfDate = JsonNullable.<LocalDate>of(asOfDate);
    return this;
  }

   /**
   * Date on which the specified fundamentals data or information is accurate or relevant.
   * @return asOfDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Sat Dec 30 00:00:00 UTC 2017", value = "Date on which the specified fundamentals data or information is accurate or relevant.")
  @JsonIgnore

  public LocalDate getAsOfDate() {
        return asOfDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getAsOfDate_JsonNullable() {
    return asOfDate;
  }
  
  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  public void setAsOfDate_JsonNullable(JsonNullable<LocalDate> asOfDate) {
    this.asOfDate = asOfDate;
  }

  public void setAsOfDate(LocalDate asOfDate) {
    this.asOfDate = JsonNullable.<LocalDate>of(asOfDate);
  }


  public Fundamentals currency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
    return this;
  }

   /**
   * Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).")
  @JsonIgnore

  public String getCurrency() {
        return currency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCurrency_JsonNullable() {
    return currency;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  public void setCurrency_JsonNullable(JsonNullable<String> currency) {
    this.currency = currency;
  }

  public void setCurrency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
  }


  public Fundamentals assetTurnoverRatio(Double assetTurnoverRatio) {
    this.assetTurnoverRatio = JsonNullable.<Double>of(assetTurnoverRatio);
    return this;
  }

   /**
   * The asset turnover ratio measures the value of a company&#39;s sales or revenues relative to the value of its assets
   * @return assetTurnoverRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.479435359033746", value = "The asset turnover ratio measures the value of a company's sales or revenues relative to the value of its assets")
  @JsonIgnore

  public Double getAssetTurnoverRatio() {
        return assetTurnoverRatio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ASSET_TURNOVER_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getAssetTurnoverRatio_JsonNullable() {
    return assetTurnoverRatio;
  }
  
  @JsonProperty(JSON_PROPERTY_ASSET_TURNOVER_RATIO)
  public void setAssetTurnoverRatio_JsonNullable(JsonNullable<Double> assetTurnoverRatio) {
    this.assetTurnoverRatio = assetTurnoverRatio;
  }

  public void setAssetTurnoverRatio(Double assetTurnoverRatio) {
    this.assetTurnoverRatio = JsonNullable.<Double>of(assetTurnoverRatio);
  }


  public Fundamentals bookValuePerShare(Double bookValuePerShare) {
    this.bookValuePerShare = JsonNullable.<Double>of(bookValuePerShare);
    return this;
  }

   /**
   * Book value per common share is a formula used to calculate the per share value of a company based on common shareholders&#39; equity in the company
   * @return bookValuePerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "25.27711", value = "Book value per common share is a formula used to calculate the per share value of a company based on common shareholders' equity in the company")
  @JsonIgnore

  public Double getBookValuePerShare() {
        return bookValuePerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BOOK_VALUE_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getBookValuePerShare_JsonNullable() {
    return bookValuePerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_BOOK_VALUE_PER_SHARE)
  public void setBookValuePerShare_JsonNullable(JsonNullable<Double> bookValuePerShare) {
    this.bookValuePerShare = bookValuePerShare;
  }

  public void setBookValuePerShare(Double bookValuePerShare) {
    this.bookValuePerShare = JsonNullable.<Double>of(bookValuePerShare);
  }


  public Fundamentals cashFlowPerShare(Double cashFlowPerShare) {
    this.cashFlowPerShare = JsonNullable.<Double>of(cashFlowPerShare);
    return this;
  }

   /**
   * Cash flow per share is calculated as a ratio, indicating the amount of cash a business generates based on a company&#39;s net income with the costs of depreciation and amortization added back
   * @return cashFlowPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "10.4268994512216", value = "Cash flow per share is calculated as a ratio, indicating the amount of cash a business generates based on a company's net income with the costs of depreciation and amortization added back")
  @JsonIgnore

  public Double getCashFlowPerShare() {
        return cashFlowPerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CASH_FLOW_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getCashFlowPerShare_JsonNullable() {
    return cashFlowPerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_CASH_FLOW_PER_SHARE)
  public void setCashFlowPerShare_JsonNullable(JsonNullable<Double> cashFlowPerShare) {
    this.cashFlowPerShare = cashFlowPerShare;
  }

  public void setCashFlowPerShare(Double cashFlowPerShare) {
    this.cashFlowPerShare = JsonNullable.<Double>of(cashFlowPerShare);
  }


  public Fundamentals cashPerShare(Double cashPerShare) {
    this.cashPerShare = JsonNullable.<Double>of(cashPerShare);
    return this;
  }

   /**
   * Cash Per Share of Security
   * @return cashPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "7.968296945651575", value = "Cash Per Share of Security")
  @JsonIgnore

  public Double getCashPerShare() {
        return cashPerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CASH_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getCashPerShare_JsonNullable() {
    return cashPerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_CASH_PER_SHARE)
  public void setCashPerShare_JsonNullable(JsonNullable<Double> cashPerShare) {
    this.cashPerShare = cashPerShare;
  }

  public void setCashPerShare(Double cashPerShare) {
    this.cashPerShare = JsonNullable.<Double>of(cashPerShare);
  }


  public Fundamentals currentRatio(Double currentRatio) {
    this.currentRatio = JsonNullable.<Double>of(currentRatio);
    return this;
  }

   /**
   * The current ratio is a liquidity ratio that measures a company&#39;s ability to pay short-term and long-term obligations. The ratio is calculated by comparing current assets to current liabilities
   * @return currentRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.874795791674835", value = "The current ratio is a liquidity ratio that measures a company's ability to pay short-term and long-term obligations. The ratio is calculated by comparing current assets to current liabilities")
  @JsonIgnore

  public Double getCurrentRatio() {
        return currentRatio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENT_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getCurrentRatio_JsonNullable() {
    return currentRatio;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENT_RATIO)
  public void setCurrentRatio_JsonNullable(JsonNullable<Double> currentRatio) {
    this.currentRatio = currentRatio;
  }

  public void setCurrentRatio(Double currentRatio) {
    this.currentRatio = JsonNullable.<Double>of(currentRatio);
  }


  public Fundamentals dividend(Dividend dividend) {
    this.dividend = dividend;
    return this;
  }

   /**
   * Get dividend
   * @return dividend
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DIVIDEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Dividend getDividend() {
    return dividend;
  }


  @JsonProperty(JSON_PROPERTY_DIVIDEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDividend(Dividend dividend) {
    this.dividend = dividend;
  }


  public Fundamentals earningsPerShare(Double earningsPerShare) {
    this.earningsPerShare = JsonNullable.<Double>of(earningsPerShare);
    return this;
  }

   /**
   * Earnings per share (EPS) is the portion of a company&#39;s profit allocated to each share of common stock
   * @return earningsPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1.8668", value = "Earnings per share (EPS) is the portion of a company's profit allocated to each share of common stock")
  @JsonIgnore

  public Double getEarningsPerShare() {
        return earningsPerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EARNINGS_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getEarningsPerShare_JsonNullable() {
    return earningsPerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_EARNINGS_PER_SHARE)
  public void setEarningsPerShare_JsonNullable(JsonNullable<Double> earningsPerShare) {
    this.earningsPerShare = earningsPerShare;
  }

  public void setEarningsPerShare(Double earningsPerShare) {
    this.earningsPerShare = JsonNullable.<Double>of(earningsPerShare);
  }


  public Fundamentals ebitMargin(Double ebitMargin) {
    this.ebitMargin = JsonNullable.<Double>of(ebitMargin);
    return this;
  }

   /**
   * EBIT margin is an assessment of a firm&#39;s operating profitability as a percentage of its total revenue. It is equal to earnings before interest and tax (EBIT) divided by total revenue
   * @return ebitMargin
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "16.4113340563991", value = "EBIT margin is an assessment of a firm's operating profitability as a percentage of its total revenue. It is equal to earnings before interest and tax (EBIT) divided by total revenue")
  @JsonIgnore

  public Double getEbitMargin() {
        return ebitMargin.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EBIT_MARGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getEbitMargin_JsonNullable() {
    return ebitMargin;
  }
  
  @JsonProperty(JSON_PROPERTY_EBIT_MARGIN)
  public void setEbitMargin_JsonNullable(JsonNullable<Double> ebitMargin) {
    this.ebitMargin = ebitMargin;
  }

  public void setEbitMargin(Double ebitMargin) {
    this.ebitMargin = JsonNullable.<Double>of(ebitMargin);
  }


  public Fundamentals ebitdaMargin(Double ebitdaMargin) {
    this.ebitdaMargin = JsonNullable.<Double>of(ebitdaMargin);
    return this;
  }

   /**
   * EBITDA margin is an assessment of a firm&#39;s operating profitability as a percentage of its total revenue. It is equal to earnings before interest, tax, depreciation and amortization (EBITDA) divided by total revenue
   * @return ebitdaMargin
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "23.8204989154013", value = "EBITDA margin is an assessment of a firm's operating profitability as a percentage of its total revenue. It is equal to earnings before interest, tax, depreciation and amortization (EBITDA) divided by total revenue")
  @JsonIgnore

  public Double getEbitdaMargin() {
        return ebitdaMargin.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EBITDA_MARGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getEbitdaMargin_JsonNullable() {
    return ebitdaMargin;
  }
  
  @JsonProperty(JSON_PROPERTY_EBITDA_MARGIN)
  public void setEbitdaMargin_JsonNullable(JsonNullable<Double> ebitdaMargin) {
    this.ebitdaMargin = ebitdaMargin;
  }

  public void setEbitdaMargin(Double ebitdaMargin) {
    this.ebitdaMargin = JsonNullable.<Double>of(ebitdaMargin);
  }


  public Fundamentals enterpriseValue(Double enterpriseValue) {
    this.enterpriseValue = JsonNullable.<Double>of(enterpriseValue);
    return this;
  }

   /**
   * Enterprise Value (EV) is the measure of a company&#39;s total value for the period and date(s) requested in local currency by default
   * @return enterpriseValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2989652.948", value = "Enterprise Value (EV) is the measure of a company's total value for the period and date(s) requested in local currency by default")
  @JsonIgnore

  public Double getEnterpriseValue() {
        return enterpriseValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENTERPRISE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getEnterpriseValue_JsonNullable() {
    return enterpriseValue;
  }
  
  @JsonProperty(JSON_PROPERTY_ENTERPRISE_VALUE)
  public void setEnterpriseValue_JsonNullable(JsonNullable<Double> enterpriseValue) {
    this.enterpriseValue = enterpriseValue;
  }

  public void setEnterpriseValue(Double enterpriseValue) {
    this.enterpriseValue = JsonNullable.<Double>of(enterpriseValue);
  }


  public Fundamentals fiveYearAverageYield(Double fiveYearAverageYield) {
    this.fiveYearAverageYield = JsonNullable.<Double>of(fiveYearAverageYield);
    return this;
  }

   /**
   * Average of the dividend yield with yield calculated for each of the past five years
   * @return fiveYearAverageYield
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "5.00195", value = "Average of the dividend yield with yield calculated for each of the past five years")
  @JsonIgnore

  public Double getFiveYearAverageYield() {
        return fiveYearAverageYield.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FIVE_YEAR_AVERAGE_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getFiveYearAverageYield_JsonNullable() {
    return fiveYearAverageYield;
  }
  
  @JsonProperty(JSON_PROPERTY_FIVE_YEAR_AVERAGE_YIELD)
  public void setFiveYearAverageYield_JsonNullable(JsonNullable<Double> fiveYearAverageYield) {
    this.fiveYearAverageYield = fiveYearAverageYield;
  }

  public void setFiveYearAverageYield(Double fiveYearAverageYield) {
    this.fiveYearAverageYield = JsonNullable.<Double>of(fiveYearAverageYield);
  }


  public Fundamentals fiveYearDividendGrowthRate(Double fiveYearDividendGrowthRate) {
    this.fiveYearDividendGrowthRate = JsonNullable.<Double>of(fiveYearDividendGrowthRate);
    return this;
  }

   /**
   * The dividend growth rate is the annualized percentage rate of growth that a particular stock&#39;s dividend undergoes over five years of time
   * @return fiveYearDividendGrowthRate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "6.119162640901776", value = "The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over five years of time")
  @JsonIgnore

  public Double getFiveYearDividendGrowthRate() {
        return fiveYearDividendGrowthRate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FIVE_YEAR_DIVIDEND_GROWTH_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getFiveYearDividendGrowthRate_JsonNullable() {
    return fiveYearDividendGrowthRate;
  }
  
  @JsonProperty(JSON_PROPERTY_FIVE_YEAR_DIVIDEND_GROWTH_RATE)
  public void setFiveYearDividendGrowthRate_JsonNullable(JsonNullable<Double> fiveYearDividendGrowthRate) {
    this.fiveYearDividendGrowthRate = fiveYearDividendGrowthRate;
  }

  public void setFiveYearDividendGrowthRate(Double fiveYearDividendGrowthRate) {
    this.fiveYearDividendGrowthRate = JsonNullable.<Double>of(fiveYearDividendGrowthRate);
  }


  public Fundamentals floatingSharesOutstanding(Double floatingSharesOutstanding) {
    this.floatingSharesOutstanding = JsonNullable.<Double>of(floatingSharesOutstanding);
    return this;
  }

   /**
   * Represents the number of shares outstanding less closely held shares for the period and date(s) requested
   * @return floatingSharesOutstanding
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "15310.455156", value = "Represents the number of shares outstanding less closely held shares for the period and date(s) requested")
  @JsonIgnore

  public Double getFloatingSharesOutstanding() {
        return floatingSharesOutstanding.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FLOATING_SHARES_OUTSTANDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getFloatingSharesOutstanding_JsonNullable() {
    return floatingSharesOutstanding;
  }
  
  @JsonProperty(JSON_PROPERTY_FLOATING_SHARES_OUTSTANDING)
  public void setFloatingSharesOutstanding_JsonNullable(JsonNullable<Double> floatingSharesOutstanding) {
    this.floatingSharesOutstanding = floatingSharesOutstanding;
  }

  public void setFloatingSharesOutstanding(Double floatingSharesOutstanding) {
    this.floatingSharesOutstanding = JsonNullable.<Double>of(floatingSharesOutstanding);
  }


  public Fundamentals grossMargin(Double grossMargin) {
    this.grossMargin = JsonNullable.<Double>of(grossMargin);
    return this;
  }

   /**
   * Gross profit margin is the proportion of money left over from revenues after accounting for the cost of goods sold, calculated by dividing gross profit by revenues.
   * @return grossMargin
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "53.843546637744", value = "Gross profit margin is the proportion of money left over from revenues after accounting for the cost of goods sold, calculated by dividing gross profit by revenues.")
  @JsonIgnore

  public Double getGrossMargin() {
        return grossMargin.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GROSS_MARGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getGrossMargin_JsonNullable() {
    return grossMargin;
  }
  
  @JsonProperty(JSON_PROPERTY_GROSS_MARGIN)
  public void setGrossMargin_JsonNullable(JsonNullable<Double> grossMargin) {
    this.grossMargin = grossMargin;
  }

  public void setGrossMargin(Double grossMargin) {
    this.grossMargin = JsonNullable.<Double>of(grossMargin);
  }


  public Fundamentals inventoryTurnover(Double inventoryTurnover) {
    this.inventoryTurnover = JsonNullable.<Double>of(inventoryTurnover);
    return this;
  }

   /**
   * Inventory turnover is a ratio showing how many times a company has sold and replaced inventory during a given period
   * @return inventoryTurnover
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "17.6586282492953", value = "Inventory turnover is a ratio showing how many times a company has sold and replaced inventory during a given period")
  @JsonIgnore

  public Double getInventoryTurnover() {
        return inventoryTurnover.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INVENTORY_TURNOVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getInventoryTurnover_JsonNullable() {
    return inventoryTurnover;
  }
  
  @JsonProperty(JSON_PROPERTY_INVENTORY_TURNOVER)
  public void setInventoryTurnover_JsonNullable(JsonNullable<Double> inventoryTurnover) {
    this.inventoryTurnover = inventoryTurnover;
  }

  public void setInventoryTurnover(Double inventoryTurnover) {
    this.inventoryTurnover = JsonNullable.<Double>of(inventoryTurnover);
  }


  public Fundamentals longTermDebtToEquity(Double longTermDebtToEquity) {
    this.longTermDebtToEquity = JsonNullable.<Double>of(longTermDebtToEquity);
    return this;
  }

   /**
   * Long-term debt consists of loans and financial obligations lasting over one year. The Debt/Equity (D/E) Ratio is calculated by dividing a company&#39;s total liabilities lasting over one year by its shareholder equity
   * @return longTermDebtToEquity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2.22278064208656", value = "Long-term debt consists of loans and financial obligations lasting over one year. The Debt/Equity (D/E) Ratio is calculated by dividing a company's total liabilities lasting over one year by its shareholder equity")
  @JsonIgnore

  public Double getLongTermDebtToEquity() {
        return longTermDebtToEquity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LONG_TERM_DEBT_TO_EQUITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getLongTermDebtToEquity_JsonNullable() {
    return longTermDebtToEquity;
  }
  
  @JsonProperty(JSON_PROPERTY_LONG_TERM_DEBT_TO_EQUITY)
  public void setLongTermDebtToEquity_JsonNullable(JsonNullable<Double> longTermDebtToEquity) {
    this.longTermDebtToEquity = longTermDebtToEquity;
  }

  public void setLongTermDebtToEquity(Double longTermDebtToEquity) {
    this.longTermDebtToEquity = JsonNullable.<Double>of(longTermDebtToEquity);
  }


  public Fundamentals netIncome(Double netIncome) {
    this.netIncome = JsonNullable.<Double>of(netIncome);
    return this;
  }

   /**
   * This equals to net earnings (profit) calculated as sales less cost of goods sold, selling, general and administrative expenses, operating expenses, depreciation, interest, taxes and other expenses
   * @return netIncome
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "23636.001", value = "This equals to net earnings (profit) calculated as sales less cost of goods sold, selling, general and administrative expenses, operating expenses, depreciation, interest, taxes and other expenses")
  @JsonIgnore

  public Double getNetIncome() {
        return netIncome.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NET_INCOME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getNetIncome_JsonNullable() {
    return netIncome;
  }
  
  @JsonProperty(JSON_PROPERTY_NET_INCOME)
  public void setNetIncome_JsonNullable(JsonNullable<Double> netIncome) {
    this.netIncome = netIncome;
  }

  public void setNetIncome(Double netIncome) {
    this.netIncome = JsonNullable.<Double>of(netIncome);
  }


  public Fundamentals numberOfEmployees(Integer numberOfEmployees) {
    this.numberOfEmployees = JsonNullable.<Integer>of(numberOfEmployees);
    return this;
  }

   /**
   * Represents the number of employees under the company&#39;s payroll as reported by the management to the shareholders within 90 days of the fiscal year-end.
   * @return numberOfEmployees
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "311300", value = "Represents the number of employees under the company's payroll as reported by the management to the shareholders within 90 days of the fiscal year-end.")
  @JsonIgnore

  public Integer getNumberOfEmployees() {
        return numberOfEmployees.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NUMBER_OF_EMPLOYEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getNumberOfEmployees_JsonNullable() {
    return numberOfEmployees;
  }
  
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_EMPLOYEES)
  public void setNumberOfEmployees_JsonNullable(JsonNullable<Integer> numberOfEmployees) {
    this.numberOfEmployees = numberOfEmployees;
  }

  public void setNumberOfEmployees(Integer numberOfEmployees) {
    this.numberOfEmployees = JsonNullable.<Integer>of(numberOfEmployees);
  }


  public Fundamentals payoutRatio(Double payoutRatio) {
    this.payoutRatio = JsonNullable.<Double>of(payoutRatio);
    return this;
  }

   /**
   * The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company
   * @return payoutRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "89.98265394622723", value = "The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company")
  @JsonIgnore

  public Double getPayoutRatio() {
        return payoutRatio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYOUT_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPayoutRatio_JsonNullable() {
    return payoutRatio;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYOUT_RATIO)
  public void setPayoutRatio_JsonNullable(JsonNullable<Double> payoutRatio) {
    this.payoutRatio = payoutRatio;
  }

  public void setPayoutRatio(Double payoutRatio) {
    this.payoutRatio = JsonNullable.<Double>of(payoutRatio);
  }


  public Fundamentals pretaxMargin(Double pretaxMargin) {
    this.pretaxMargin = JsonNullable.<Double>of(pretaxMargin);
    return this;
  }

   /**
   * The pretax margin is the ratio of a company&#39;s pre-tax earnings to its total sales
   * @return pretaxMargin
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "12.7236984815618", value = "The pretax margin is the ratio of a company's pre-tax earnings to its total sales")
  @JsonIgnore

  public Double getPretaxMargin() {
        return pretaxMargin.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRETAX_MARGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPretaxMargin_JsonNullable() {
    return pretaxMargin;
  }
  
  @JsonProperty(JSON_PROPERTY_PRETAX_MARGIN)
  public void setPretaxMargin_JsonNullable(JsonNullable<Double> pretaxMargin) {
    this.pretaxMargin = pretaxMargin;
  }

  public void setPretaxMargin(Double pretaxMargin) {
    this.pretaxMargin = JsonNullable.<Double>of(pretaxMargin);
  }


  public Fundamentals priceToBookRatio(Double priceToBookRatio) {
    this.priceToBookRatio = JsonNullable.<Double>of(priceToBookRatio);
    return this;
  }

   /**
   * Companies use the price-to-book ratio to compare a firm&#39;s market to book value by dividing price per share by book value per share (BVPS) .
   * @return priceToBookRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "6.38918", value = "Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share (BVPS) .")
  @JsonIgnore

  public Double getPriceToBookRatio() {
        return priceToBookRatio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE_TO_BOOK_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPriceToBookRatio_JsonNullable() {
    return priceToBookRatio;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE_TO_BOOK_RATIO)
  public void setPriceToBookRatio_JsonNullable(JsonNullable<Double> priceToBookRatio) {
    this.priceToBookRatio = priceToBookRatio;
  }

  public void setPriceToBookRatio(Double priceToBookRatio) {
    this.priceToBookRatio = JsonNullable.<Double>of(priceToBookRatio);
  }


  public Fundamentals priceToCashFlowRatio(Double priceToCashFlowRatio) {
    this.priceToCashFlowRatio = JsonNullable.<Double>of(priceToCashFlowRatio);
    return this;
  }

   /**
   * The price-to-cash flow ratio is a stock valuation indicator or multiple that measures the value of a stock&#39;s price relative to its operating cash flow per share.
   * @return priceToCashFlowRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "11.105", value = "The price-to-cash flow ratio is a stock valuation indicator or multiple that measures the value of a stock's price relative to its operating cash flow per share.")
  @JsonIgnore

  public Double getPriceToCashFlowRatio() {
        return priceToCashFlowRatio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE_TO_CASH_FLOW_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPriceToCashFlowRatio_JsonNullable() {
    return priceToCashFlowRatio;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE_TO_CASH_FLOW_RATIO)
  public void setPriceToCashFlowRatio_JsonNullable(JsonNullable<Double> priceToCashFlowRatio) {
    this.priceToCashFlowRatio = priceToCashFlowRatio;
  }

  public void setPriceToCashFlowRatio(Double priceToCashFlowRatio) {
    this.priceToCashFlowRatio = JsonNullable.<Double>of(priceToCashFlowRatio);
  }


  public Fundamentals priceToEarningsRatio(Double priceToEarningsRatio) {
    this.priceToEarningsRatio = JsonNullable.<Double>of(priceToEarningsRatio);
    return this;
  }

   /**
   * The price-to-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings
   * @return priceToEarningsRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "21.4293", value = "The price-to-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings")
  @JsonIgnore

  public Double getPriceToEarningsRatio() {
        return priceToEarningsRatio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE_TO_EARNINGS_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPriceToEarningsRatio_JsonNullable() {
    return priceToEarningsRatio;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE_TO_EARNINGS_RATIO)
  public void setPriceToEarningsRatio_JsonNullable(JsonNullable<Double> priceToEarningsRatio) {
    this.priceToEarningsRatio = priceToEarningsRatio;
  }

  public void setPriceToEarningsRatio(Double priceToEarningsRatio) {
    this.priceToEarningsRatio = JsonNullable.<Double>of(priceToEarningsRatio);
  }


  public Fundamentals priceToSalesRatio(Double priceToSalesRatio) {
    this.priceToSalesRatio = JsonNullable.<Double>of(priceToSalesRatio);
    return this;
  }

   /**
   * The price-to-sales ratio (P/S ratio) is a valuation ratio that compares a company&#39;s stock price to its revenues
   * @return priceToSalesRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2.43871", value = "The price-to-sales ratio (P/S ratio) is a valuation ratio that compares a company's stock price to its revenues")
  @JsonIgnore

  public Double getPriceToSalesRatio() {
        return priceToSalesRatio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE_TO_SALES_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPriceToSalesRatio_JsonNullable() {
    return priceToSalesRatio;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE_TO_SALES_RATIO)
  public void setPriceToSalesRatio_JsonNullable(JsonNullable<Double> priceToSalesRatio) {
    this.priceToSalesRatio = priceToSalesRatio;
  }

  public void setPriceToSalesRatio(Double priceToSalesRatio) {
    this.priceToSalesRatio = JsonNullable.<Double>of(priceToSalesRatio);
  }


  public Fundamentals quickRatio(Double quickRatio) {
    this.quickRatio = JsonNullable.<Double>of(quickRatio);
    return this;
  }

   /**
   * The quick ratio measures the dollar amount of liquid assets available with the company against the dollar amount of its current liabilities
   * @return quickRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.829085800169901", value = "The quick ratio measures the dollar amount of liquid assets available with the company against the dollar amount of its current liabilities")
  @JsonIgnore

  public Double getQuickRatio() {
        return quickRatio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_QUICK_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getQuickRatio_JsonNullable() {
    return quickRatio;
  }
  
  @JsonProperty(JSON_PROPERTY_QUICK_RATIO)
  public void setQuickRatio_JsonNullable(JsonNullable<Double> quickRatio) {
    this.quickRatio = quickRatio;
  }

  public void setQuickRatio(Double quickRatio) {
    this.quickRatio = JsonNullable.<Double>of(quickRatio);
  }


  public Fundamentals returnOnAssets(Double returnOnAssets) {
    this.returnOnAssets = JsonNullable.<Double>of(returnOnAssets);
    return this;
  }

   /**
   * Return on net assets (RONA) is a measure of financial performance calculated as net income divided by the sum of fixed assets and net working capital
   * @return returnOnAssets
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "5.56332812114229", value = "Return on net assets (RONA) is a measure of financial performance calculated as net income divided by the sum of fixed assets and net working capital")
  @JsonIgnore

  public Double getReturnOnAssets() {
        return returnOnAssets.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RETURN_ON_ASSETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getReturnOnAssets_JsonNullable() {
    return returnOnAssets;
  }
  
  @JsonProperty(JSON_PROPERTY_RETURN_ON_ASSETS)
  public void setReturnOnAssets_JsonNullable(JsonNullable<Double> returnOnAssets) {
    this.returnOnAssets = returnOnAssets;
  }

  public void setReturnOnAssets(Double returnOnAssets) {
    this.returnOnAssets = JsonNullable.<Double>of(returnOnAssets);
  }


  public Fundamentals returnOnEquity(Double returnOnEquity) {
    this.returnOnEquity = JsonNullable.<Double>of(returnOnEquity);
    return this;
  }

   /**
   * Return on equity (ROE) is a measure of financial performance calculated as net income divided by shareholders&#39; equity
   * @return returnOnEquity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "32.8938526774336", value = "Return on equity (ROE) is a measure of financial performance calculated as net income divided by shareholders' equity")
  @JsonIgnore

  public Double getReturnOnEquity() {
        return returnOnEquity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RETURN_ON_EQUITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getReturnOnEquity_JsonNullable() {
    return returnOnEquity;
  }
  
  @JsonProperty(JSON_PROPERTY_RETURN_ON_EQUITY)
  public void setReturnOnEquity_JsonNullable(JsonNullable<Double> returnOnEquity) {
    this.returnOnEquity = returnOnEquity;
  }

  public void setReturnOnEquity(Double returnOnEquity) {
    this.returnOnEquity = JsonNullable.<Double>of(returnOnEquity);
  }


  public Fundamentals returnOnInvestedCapital(Double returnOnInvestedCapital) {
    this.returnOnInvestedCapital = JsonNullable.<Double>of(returnOnInvestedCapital);
    return this;
  }

   /**
   * Return on Investment (ROI) measures how well an investment is performing
   * @return returnOnInvestedCapital
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "10.0320834452249", value = "Return on Investment (ROI) measures how well an investment is performing")
  @JsonIgnore

  public Double getReturnOnInvestedCapital() {
        return returnOnInvestedCapital.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RETURN_ON_INVESTED_CAPITAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getReturnOnInvestedCapital_JsonNullable() {
    return returnOnInvestedCapital;
  }
  
  @JsonProperty(JSON_PROPERTY_RETURN_ON_INVESTED_CAPITAL)
  public void setReturnOnInvestedCapital_JsonNullable(JsonNullable<Double> returnOnInvestedCapital) {
    this.returnOnInvestedCapital = returnOnInvestedCapital;
  }

  public void setReturnOnInvestedCapital(Double returnOnInvestedCapital) {
    this.returnOnInvestedCapital = JsonNullable.<Double>of(returnOnInvestedCapital);
  }


  public Fundamentals revenuePerShare(Double revenuePerShare) {
    this.revenuePerShare = JsonNullable.<Double>of(revenuePerShare);
    return this;
  }

   /**
   * The portion of a company&#39;s revenue that is allocated to each share of common stock.
   * @return revenuePerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "66.3510388780454", value = "The portion of a company's revenue that is allocated to each share of common stock.")
  @JsonIgnore

  public Double getRevenuePerShare() {
        return revenuePerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REVENUE_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getRevenuePerShare_JsonNullable() {
    return revenuePerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_REVENUE_PER_SHARE)
  public void setRevenuePerShare_JsonNullable(JsonNullable<Double> revenuePerShare) {
    this.revenuePerShare = revenuePerShare;
  }

  public void setRevenuePerShare(Double revenuePerShare) {
    this.revenuePerShare = JsonNullable.<Double>of(revenuePerShare);
  }


  public Fundamentals salesPerEmployee(Double salesPerEmployee) {
    this.salesPerEmployee = JsonNullable.<Double>of(salesPerEmployee);
    return this;
  }

   /**
   * Revenue per employee is a ratio that is calculated as a company&#39;s total revenue divided by its current number of employees
   * @return salesPerEmployee
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.194442659813685", value = "Revenue per employee is a ratio that is calculated as a company's total revenue divided by its current number of employees")
  @JsonIgnore

  public Double getSalesPerEmployee() {
        return salesPerEmployee.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SALES_PER_EMPLOYEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getSalesPerEmployee_JsonNullable() {
    return salesPerEmployee;
  }
  
  @JsonProperty(JSON_PROPERTY_SALES_PER_EMPLOYEE)
  public void setSalesPerEmployee_JsonNullable(JsonNullable<Double> salesPerEmployee) {
    this.salesPerEmployee = salesPerEmployee;
  }

  public void setSalesPerEmployee(Double salesPerEmployee) {
    this.salesPerEmployee = JsonNullable.<Double>of(salesPerEmployee);
  }


  public Fundamentals salesPerShare(Double salesPerShare) {
    this.salesPerShare = JsonNullable.<Double>of(salesPerShare);
    return this;
  }

   /**
   * Sales per share is a ratio that computes the total revenue earned per share over a designated period
   * @return salesPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "15.9710148599077", value = "Sales per share is a ratio that computes the total revenue earned per share over a designated period")
  @JsonIgnore

  public Double getSalesPerShare() {
        return salesPerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SALES_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getSalesPerShare_JsonNullable() {
    return salesPerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_SALES_PER_SHARE)
  public void setSalesPerShare_JsonNullable(JsonNullable<Double> salesPerShare) {
    this.salesPerShare = salesPerShare;
  }

  public void setSalesPerShare(Double salesPerShare) {
    this.salesPerShare = JsonNullable.<Double>of(salesPerShare);
  }


  public Fundamentals shareHolderEquity(Double shareHolderEquity) {
    this.shareHolderEquity = JsonNullable.<Double>of(shareHolderEquity);
    return this;
  }

   /**
   * Shareholder equity represents the amount of financing the company experiences through common and preferred shares
   * @return shareHolderEquity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "73081.001", value = "Shareholder equity represents the amount of financing the company experiences through common and preferred shares")
  @JsonIgnore

  public Double getShareHolderEquity() {
        return shareHolderEquity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SHARE_HOLDER_EQUITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getShareHolderEquity_JsonNullable() {
    return shareHolderEquity;
  }
  
  @JsonProperty(JSON_PROPERTY_SHARE_HOLDER_EQUITY)
  public void setShareHolderEquity_JsonNullable(JsonNullable<Double> shareHolderEquity) {
    this.shareHolderEquity = shareHolderEquity;
  }

  public void setShareHolderEquity(Double shareHolderEquity) {
    this.shareHolderEquity = JsonNullable.<Double>of(shareHolderEquity);
  }


  public Fundamentals threeYearAverageYield(Double threeYearAverageYield) {
    this.threeYearAverageYield = JsonNullable.<Double>of(threeYearAverageYield);
    return this;
  }

   /**
   * Average of the dividend yield with yield calculated for each of the past three years
   * @return threeYearAverageYield
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "4.916496666666666", value = "Average of the dividend yield with yield calculated for each of the past three years")
  @JsonIgnore

  public Double getThreeYearAverageYield() {
        return threeYearAverageYield.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_THREE_YEAR_AVERAGE_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getThreeYearAverageYield_JsonNullable() {
    return threeYearAverageYield;
  }
  
  @JsonProperty(JSON_PROPERTY_THREE_YEAR_AVERAGE_YIELD)
  public void setThreeYearAverageYield_JsonNullable(JsonNullable<Double> threeYearAverageYield) {
    this.threeYearAverageYield = threeYearAverageYield;
  }

  public void setThreeYearAverageYield(Double threeYearAverageYield) {
    this.threeYearAverageYield = JsonNullable.<Double>of(threeYearAverageYield);
  }


  public Fundamentals threeYearDividendGrowthRate(Double threeYearDividendGrowthRate) {
    this.threeYearDividendGrowthRate = JsonNullable.<Double>of(threeYearDividendGrowthRate);
    return this;
  }

   /**
   * The dividend growth rate is the annualized percentage rate of growth that a particular stock&#39;s dividend undergoes over three years of time
   * @return threeYearDividendGrowthRate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1.228878648233489", value = "The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over three years of time")
  @JsonIgnore

  public Double getThreeYearDividendGrowthRate() {
        return threeYearDividendGrowthRate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_THREE_YEAR_DIVIDEND_GROWTH_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getThreeYearDividendGrowthRate_JsonNullable() {
    return threeYearDividendGrowthRate;
  }
  
  @JsonProperty(JSON_PROPERTY_THREE_YEAR_DIVIDEND_GROWTH_RATE)
  public void setThreeYearDividendGrowthRate_JsonNullable(JsonNullable<Double> threeYearDividendGrowthRate) {
    this.threeYearDividendGrowthRate = threeYearDividendGrowthRate;
  }

  public void setThreeYearDividendGrowthRate(Double threeYearDividendGrowthRate) {
    this.threeYearDividendGrowthRate = JsonNullable.<Double>of(threeYearDividendGrowthRate);
  }


  public Fundamentals totalAssets(Double totalAssets) {
    this.totalAssets = JsonNullable.<Double>of(totalAssets);
    return this;
  }

   /**
   * Total amount of assets owned by entity.
   * @return totalAssets
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "129321.001", value = "Total amount of assets owned by entity.")
  @JsonIgnore

  public Double getTotalAssets() {
        return totalAssets.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOTAL_ASSETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getTotalAssets_JsonNullable() {
    return totalAssets;
  }
  
  @JsonProperty(JSON_PROPERTY_TOTAL_ASSETS)
  public void setTotalAssets_JsonNullable(JsonNullable<Double> totalAssets) {
    this.totalAssets = totalAssets;
  }

  public void setTotalAssets(Double totalAssets) {
    this.totalAssets = JsonNullable.<Double>of(totalAssets);
  }


  public Fundamentals totalDebtToEquity(Double totalDebtToEquity) {
    this.totalDebtToEquity = JsonNullable.<Double>of(totalDebtToEquity);
    return this;
  }

   /**
   * The Debt/Equity (D/E) Ratio is calculated by dividing a company&#39;s total liabilities by its shareholder equity
   * @return totalDebtToEquity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2.53563537108444", value = "The Debt/Equity (D/E) Ratio is calculated by dividing a company's total liabilities by its shareholder equity")
  @JsonIgnore

  public Double getTotalDebtToEquity() {
        return totalDebtToEquity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOTAL_DEBT_TO_EQUITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getTotalDebtToEquity_JsonNullable() {
    return totalDebtToEquity;
  }
  
  @JsonProperty(JSON_PROPERTY_TOTAL_DEBT_TO_EQUITY)
  public void setTotalDebtToEquity_JsonNullable(JsonNullable<Double> totalDebtToEquity) {
    this.totalDebtToEquity = totalDebtToEquity;
  }

  public void setTotalDebtToEquity(Double totalDebtToEquity) {
    this.totalDebtToEquity = JsonNullable.<Double>of(totalDebtToEquity);
  }


  public Fundamentals totalRevenue(Double totalRevenue) {
    this.totalRevenue = JsonNullable.<Double>of(totalRevenue);
    return this;
  }

   /**
   * Revenue is the amount of money (in Million) that a company actually receives during a specific period, including discounts and deductions for returned merchandise.
   * @return totalRevenue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "14752.001", value = "Revenue is the amount of money (in Million) that a company actually receives during a specific period, including discounts and deductions for returned merchandise.")
  @JsonIgnore

  public Double getTotalRevenue() {
        return totalRevenue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOTAL_REVENUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getTotalRevenue_JsonNullable() {
    return totalRevenue;
  }
  
  @JsonProperty(JSON_PROPERTY_TOTAL_REVENUE)
  public void setTotalRevenue_JsonNullable(JsonNullable<Double> totalRevenue) {
    this.totalRevenue = totalRevenue;
  }

  public void setTotalRevenue(Double totalRevenue) {
    this.totalRevenue = JsonNullable.<Double>of(totalRevenue);
  }


  public Fundamentals trailingTwelveMonthEarningsPerShare(Double trailingTwelveMonthEarningsPerShare) {
    this.trailingTwelveMonthEarningsPerShare = JsonNullable.<Double>of(trailingTwelveMonthEarningsPerShare);
    return this;
  }

   /**
   * Earnings per share over the last 12 months.
   * @return trailingTwelveMonthEarningsPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "7.621", value = "Earnings per share over the last 12 months.")
  @JsonIgnore

  public Double getTrailingTwelveMonthEarningsPerShare() {
        return trailingTwelveMonthEarningsPerShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRAILING_TWELVE_MONTH_EARNINGS_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getTrailingTwelveMonthEarningsPerShare_JsonNullable() {
    return trailingTwelveMonthEarningsPerShare;
  }
  
  @JsonProperty(JSON_PROPERTY_TRAILING_TWELVE_MONTH_EARNINGS_PER_SHARE)
  public void setTrailingTwelveMonthEarningsPerShare_JsonNullable(JsonNullable<Double> trailingTwelveMonthEarningsPerShare) {
    this.trailingTwelveMonthEarningsPerShare = trailingTwelveMonthEarningsPerShare;
  }

  public void setTrailingTwelveMonthEarningsPerShare(Double trailingTwelveMonthEarningsPerShare) {
    this.trailingTwelveMonthEarningsPerShare = JsonNullable.<Double>of(trailingTwelveMonthEarningsPerShare);
  }


  /**
   * Return true if this Fundamentals object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fundamentals fundamentals = (Fundamentals) o;
    return Objects.equals(this.requestId, fundamentals.requestId) &&
        Objects.equals(this.error, fundamentals.error) &&
        equalsNullable(this.fsymId, fundamentals.fsymId) &&
        equalsNullable(this.asOfDate, fundamentals.asOfDate) &&
        equalsNullable(this.currency, fundamentals.currency) &&
        equalsNullable(this.assetTurnoverRatio, fundamentals.assetTurnoverRatio) &&
        equalsNullable(this.bookValuePerShare, fundamentals.bookValuePerShare) &&
        equalsNullable(this.cashFlowPerShare, fundamentals.cashFlowPerShare) &&
        equalsNullable(this.cashPerShare, fundamentals.cashPerShare) &&
        equalsNullable(this.currentRatio, fundamentals.currentRatio) &&
        Objects.equals(this.dividend, fundamentals.dividend) &&
        equalsNullable(this.earningsPerShare, fundamentals.earningsPerShare) &&
        equalsNullable(this.ebitMargin, fundamentals.ebitMargin) &&
        equalsNullable(this.ebitdaMargin, fundamentals.ebitdaMargin) &&
        equalsNullable(this.enterpriseValue, fundamentals.enterpriseValue) &&
        equalsNullable(this.fiveYearAverageYield, fundamentals.fiveYearAverageYield) &&
        equalsNullable(this.fiveYearDividendGrowthRate, fundamentals.fiveYearDividendGrowthRate) &&
        equalsNullable(this.floatingSharesOutstanding, fundamentals.floatingSharesOutstanding) &&
        equalsNullable(this.grossMargin, fundamentals.grossMargin) &&
        equalsNullable(this.inventoryTurnover, fundamentals.inventoryTurnover) &&
        equalsNullable(this.longTermDebtToEquity, fundamentals.longTermDebtToEquity) &&
        equalsNullable(this.netIncome, fundamentals.netIncome) &&
        equalsNullable(this.numberOfEmployees, fundamentals.numberOfEmployees) &&
        equalsNullable(this.payoutRatio, fundamentals.payoutRatio) &&
        equalsNullable(this.pretaxMargin, fundamentals.pretaxMargin) &&
        equalsNullable(this.priceToBookRatio, fundamentals.priceToBookRatio) &&
        equalsNullable(this.priceToCashFlowRatio, fundamentals.priceToCashFlowRatio) &&
        equalsNullable(this.priceToEarningsRatio, fundamentals.priceToEarningsRatio) &&
        equalsNullable(this.priceToSalesRatio, fundamentals.priceToSalesRatio) &&
        equalsNullable(this.quickRatio, fundamentals.quickRatio) &&
        equalsNullable(this.returnOnAssets, fundamentals.returnOnAssets) &&
        equalsNullable(this.returnOnEquity, fundamentals.returnOnEquity) &&
        equalsNullable(this.returnOnInvestedCapital, fundamentals.returnOnInvestedCapital) &&
        equalsNullable(this.revenuePerShare, fundamentals.revenuePerShare) &&
        equalsNullable(this.salesPerEmployee, fundamentals.salesPerEmployee) &&
        equalsNullable(this.salesPerShare, fundamentals.salesPerShare) &&
        equalsNullable(this.shareHolderEquity, fundamentals.shareHolderEquity) &&
        equalsNullable(this.threeYearAverageYield, fundamentals.threeYearAverageYield) &&
        equalsNullable(this.threeYearDividendGrowthRate, fundamentals.threeYearDividendGrowthRate) &&
        equalsNullable(this.totalAssets, fundamentals.totalAssets) &&
        equalsNullable(this.totalDebtToEquity, fundamentals.totalDebtToEquity) &&
        equalsNullable(this.totalRevenue, fundamentals.totalRevenue) &&
        equalsNullable(this.trailingTwelveMonthEarningsPerShare, fundamentals.trailingTwelveMonthEarningsPerShare);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, error, hashCodeNullable(fsymId), hashCodeNullable(asOfDate), hashCodeNullable(currency), hashCodeNullable(assetTurnoverRatio), hashCodeNullable(bookValuePerShare), hashCodeNullable(cashFlowPerShare), hashCodeNullable(cashPerShare), hashCodeNullable(currentRatio), dividend, hashCodeNullable(earningsPerShare), hashCodeNullable(ebitMargin), hashCodeNullable(ebitdaMargin), hashCodeNullable(enterpriseValue), hashCodeNullable(fiveYearAverageYield), hashCodeNullable(fiveYearDividendGrowthRate), hashCodeNullable(floatingSharesOutstanding), hashCodeNullable(grossMargin), hashCodeNullable(inventoryTurnover), hashCodeNullable(longTermDebtToEquity), hashCodeNullable(netIncome), hashCodeNullable(numberOfEmployees), hashCodeNullable(payoutRatio), hashCodeNullable(pretaxMargin), hashCodeNullable(priceToBookRatio), hashCodeNullable(priceToCashFlowRatio), hashCodeNullable(priceToEarningsRatio), hashCodeNullable(priceToSalesRatio), hashCodeNullable(quickRatio), hashCodeNullable(returnOnAssets), hashCodeNullable(returnOnEquity), hashCodeNullable(returnOnInvestedCapital), hashCodeNullable(revenuePerShare), hashCodeNullable(salesPerEmployee), hashCodeNullable(salesPerShare), hashCodeNullable(shareHolderEquity), hashCodeNullable(threeYearAverageYield), hashCodeNullable(threeYearDividendGrowthRate), hashCodeNullable(totalAssets), hashCodeNullable(totalDebtToEquity), hashCodeNullable(totalRevenue), hashCodeNullable(trailingTwelveMonthEarningsPerShare));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fundamentals {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    fsymId: ").append(toIndentedString(fsymId)).append("\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    assetTurnoverRatio: ").append(toIndentedString(assetTurnoverRatio)).append("\n");
    sb.append("    bookValuePerShare: ").append(toIndentedString(bookValuePerShare)).append("\n");
    sb.append("    cashFlowPerShare: ").append(toIndentedString(cashFlowPerShare)).append("\n");
    sb.append("    cashPerShare: ").append(toIndentedString(cashPerShare)).append("\n");
    sb.append("    currentRatio: ").append(toIndentedString(currentRatio)).append("\n");
    sb.append("    dividend: ").append(toIndentedString(dividend)).append("\n");
    sb.append("    earningsPerShare: ").append(toIndentedString(earningsPerShare)).append("\n");
    sb.append("    ebitMargin: ").append(toIndentedString(ebitMargin)).append("\n");
    sb.append("    ebitdaMargin: ").append(toIndentedString(ebitdaMargin)).append("\n");
    sb.append("    enterpriseValue: ").append(toIndentedString(enterpriseValue)).append("\n");
    sb.append("    fiveYearAverageYield: ").append(toIndentedString(fiveYearAverageYield)).append("\n");
    sb.append("    fiveYearDividendGrowthRate: ").append(toIndentedString(fiveYearDividendGrowthRate)).append("\n");
    sb.append("    floatingSharesOutstanding: ").append(toIndentedString(floatingSharesOutstanding)).append("\n");
    sb.append("    grossMargin: ").append(toIndentedString(grossMargin)).append("\n");
    sb.append("    inventoryTurnover: ").append(toIndentedString(inventoryTurnover)).append("\n");
    sb.append("    longTermDebtToEquity: ").append(toIndentedString(longTermDebtToEquity)).append("\n");
    sb.append("    netIncome: ").append(toIndentedString(netIncome)).append("\n");
    sb.append("    numberOfEmployees: ").append(toIndentedString(numberOfEmployees)).append("\n");
    sb.append("    payoutRatio: ").append(toIndentedString(payoutRatio)).append("\n");
    sb.append("    pretaxMargin: ").append(toIndentedString(pretaxMargin)).append("\n");
    sb.append("    priceToBookRatio: ").append(toIndentedString(priceToBookRatio)).append("\n");
    sb.append("    priceToCashFlowRatio: ").append(toIndentedString(priceToCashFlowRatio)).append("\n");
    sb.append("    priceToEarningsRatio: ").append(toIndentedString(priceToEarningsRatio)).append("\n");
    sb.append("    priceToSalesRatio: ").append(toIndentedString(priceToSalesRatio)).append("\n");
    sb.append("    quickRatio: ").append(toIndentedString(quickRatio)).append("\n");
    sb.append("    returnOnAssets: ").append(toIndentedString(returnOnAssets)).append("\n");
    sb.append("    returnOnEquity: ").append(toIndentedString(returnOnEquity)).append("\n");
    sb.append("    returnOnInvestedCapital: ").append(toIndentedString(returnOnInvestedCapital)).append("\n");
    sb.append("    revenuePerShare: ").append(toIndentedString(revenuePerShare)).append("\n");
    sb.append("    salesPerEmployee: ").append(toIndentedString(salesPerEmployee)).append("\n");
    sb.append("    salesPerShare: ").append(toIndentedString(salesPerShare)).append("\n");
    sb.append("    shareHolderEquity: ").append(toIndentedString(shareHolderEquity)).append("\n");
    sb.append("    threeYearAverageYield: ").append(toIndentedString(threeYearAverageYield)).append("\n");
    sb.append("    threeYearDividendGrowthRate: ").append(toIndentedString(threeYearDividendGrowthRate)).append("\n");
    sb.append("    totalAssets: ").append(toIndentedString(totalAssets)).append("\n");
    sb.append("    totalDebtToEquity: ").append(toIndentedString(totalDebtToEquity)).append("\n");
    sb.append("    totalRevenue: ").append(toIndentedString(totalRevenue)).append("\n");
    sb.append("    trailingTwelveMonthEarningsPerShare: ").append(toIndentedString(trailingTwelveMonthEarningsPerShare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

