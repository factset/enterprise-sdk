/*
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFundamentals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetFundamentals.models.CompanyReportErrorObject;
import com.factset.sdk.FactSetFundamentals.models.Dividend;
import com.factset.sdk.FactSetFundamentals.models.PerShare;
import com.factset.sdk.FactSetFundamentals.models.Ratios;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFundamentals.JSON;


/**
 * Factset Fundamental Response item
 */
@ApiModel(description = "Factset Fundamental Response item")
@JsonPropertyOrder({
  Fundamentals.JSON_PROPERTY_REQUEST_ID,
  Fundamentals.JSON_PROPERTY_ERROR,
  Fundamentals.JSON_PROPERTY_FSYM_ID,
  Fundamentals.JSON_PROPERTY_AS_OF_DATE,
  Fundamentals.JSON_PROPERTY_CURRENCY,
  Fundamentals.JSON_PROPERTY_PERIODICITY,
  Fundamentals.JSON_PROPERTY_PER_SHARE,
  Fundamentals.JSON_PROPERTY_RATIOS,
  Fundamentals.JSON_PROPERTY_DIVIDEND,
  Fundamentals.JSON_PROPERTY_ENTERPRISE_VALUE,
  Fundamentals.JSON_PROPERTY_FIVE_YEAR_AVERAGE_YIELD,
  Fundamentals.JSON_PROPERTY_FIVE_YEAR_DIVIDEND_GROWTH_RATE,
  Fundamentals.JSON_PROPERTY_FLOATING_SHARES_OUTSTANDING,
  Fundamentals.JSON_PROPERTY_NET_INCOME,
  Fundamentals.JSON_PROPERTY_NUMBER_OF_EMPLOYEES,
  Fundamentals.JSON_PROPERTY_SALES_PER_EMPLOYEE,
  Fundamentals.JSON_PROPERTY_SHARE_HOLDER_EQUITY,
  Fundamentals.JSON_PROPERTY_THREE_YEAR_AVERAGE_YIELD,
  Fundamentals.JSON_PROPERTY_THREE_YEAR_DIVIDEND_GROWTH_RATE,
  Fundamentals.JSON_PROPERTY_TOTAL_ASSETS,
  Fundamentals.JSON_PROPERTY_TOTAL_REVENUE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Fundamentals implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public static final String JSON_PROPERTY_ERROR = "error";
  private CompanyReportErrorObject error;

  public static final String JSON_PROPERTY_FSYM_ID = "fsymId";
  private JsonNullable<String> fsymId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_AS_OF_DATE = "asOfDate";
  private JsonNullable<LocalDate> asOfDate = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private JsonNullable<String> currency = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PERIODICITY = "periodicity";
  private JsonNullable<String> periodicity = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PER_SHARE = "perShare";
  private PerShare perShare;

  public static final String JSON_PROPERTY_RATIOS = "ratios";
  private Ratios ratios;

  public static final String JSON_PROPERTY_DIVIDEND = "dividend";
  private Dividend dividend;

  public static final String JSON_PROPERTY_ENTERPRISE_VALUE = "enterpriseValue";
  private JsonNullable<Double> enterpriseValue = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_FIVE_YEAR_AVERAGE_YIELD = "fiveYearAverageYield";
  private JsonNullable<Double> fiveYearAverageYield = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_FIVE_YEAR_DIVIDEND_GROWTH_RATE = "fiveYearDividendGrowthRate";
  private JsonNullable<Double> fiveYearDividendGrowthRate = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_FLOATING_SHARES_OUTSTANDING = "floatingSharesOutstanding";
  private JsonNullable<Double> floatingSharesOutstanding = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_NET_INCOME = "netIncome";
  private JsonNullable<Double> netIncome = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_NUMBER_OF_EMPLOYEES = "numberOfEmployees";
  private JsonNullable<Integer> numberOfEmployees = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_SALES_PER_EMPLOYEE = "salesPerEmployee";
  private JsonNullable<Double> salesPerEmployee = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_SHARE_HOLDER_EQUITY = "shareHolderEquity";
  private JsonNullable<Double> shareHolderEquity = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_THREE_YEAR_AVERAGE_YIELD = "threeYearAverageYield";
  private JsonNullable<Double> threeYearAverageYield = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_THREE_YEAR_DIVIDEND_GROWTH_RATE = "threeYearDividendGrowthRate";
  private JsonNullable<Double> threeYearDividendGrowthRate = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_TOTAL_ASSETS = "totalAssets";
  private JsonNullable<Double> totalAssets = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_TOTAL_REVENUE = "totalRevenue";
  private JsonNullable<Double> totalRevenue = JsonNullable.<Double>undefined();

  public Fundamentals() { 
  }

  public Fundamentals requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier that was used for the request.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "IBM-US", value = "Identifier that was used for the request.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public Fundamentals error(CompanyReportErrorObject error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CompanyReportErrorObject getError() {
    return error;
  }


  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setError(CompanyReportErrorObject error) {
    this.error = error;
  }


  public Fundamentals fsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
    return this;
  }

   /**
   * FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
   * @return fsymId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "SJY281-R", value = "FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.")
  @JsonIgnore

  public String getFsymId() {
        return fsymId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFsymId_JsonNullable() {
    return fsymId;
  }
  
  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  public void setFsymId_JsonNullable(JsonNullable<String> fsymId) {
    this.fsymId = fsymId;
  }

  public void setFsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
  }


  public Fundamentals asOfDate(LocalDate asOfDate) {
    this.asOfDate = JsonNullable.<LocalDate>of(asOfDate);
    return this;
  }

   /**
   * Date on which the specified fundamentals data or information is accurate or relevant.
   * @return asOfDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Sat Dec 30 00:00:00 UTC 2017", value = "Date on which the specified fundamentals data or information is accurate or relevant.")
  @JsonIgnore

  public LocalDate getAsOfDate() {
        return asOfDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getAsOfDate_JsonNullable() {
    return asOfDate;
  }
  
  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  public void setAsOfDate_JsonNullable(JsonNullable<LocalDate> asOfDate) {
    this.asOfDate = asOfDate;
  }

  public void setAsOfDate(LocalDate asOfDate) {
    this.asOfDate = JsonNullable.<LocalDate>of(asOfDate);
  }


  public Fundamentals currency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
    return this;
  }

   /**
   * Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).")
  @JsonIgnore

  public String getCurrency() {
        return currency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCurrency_JsonNullable() {
    return currency;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  public void setCurrency_JsonNullable(JsonNullable<String> currency) {
    this.currency = currency;
  }

  public void setCurrency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
  }


  public Fundamentals periodicity(String periodicity) {
    this.periodicity = JsonNullable.<String>of(periodicity);
    return this;
  }

   /**
   * Periodicity or frequency of the fiscal periods.
   * @return periodicity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "ANN", value = "Periodicity or frequency of the fiscal periods.")
  @JsonIgnore

  public String getPeriodicity() {
        return periodicity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PERIODICITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPeriodicity_JsonNullable() {
    return periodicity;
  }
  
  @JsonProperty(JSON_PROPERTY_PERIODICITY)
  public void setPeriodicity_JsonNullable(JsonNullable<String> periodicity) {
    this.periodicity = periodicity;
  }

  public void setPeriodicity(String periodicity) {
    this.periodicity = JsonNullable.<String>of(periodicity);
  }


  public Fundamentals perShare(PerShare perShare) {
    this.perShare = perShare;
    return this;
  }

   /**
   * Get perShare
   * @return perShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PerShare getPerShare() {
    return perShare;
  }


  @JsonProperty(JSON_PROPERTY_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPerShare(PerShare perShare) {
    this.perShare = perShare;
  }


  public Fundamentals ratios(Ratios ratios) {
    this.ratios = ratios;
    return this;
  }

   /**
   * Get ratios
   * @return ratios
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RATIOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Ratios getRatios() {
    return ratios;
  }


  @JsonProperty(JSON_PROPERTY_RATIOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRatios(Ratios ratios) {
    this.ratios = ratios;
  }


  public Fundamentals dividend(Dividend dividend) {
    this.dividend = dividend;
    return this;
  }

   /**
   * Get dividend
   * @return dividend
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DIVIDEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Dividend getDividend() {
    return dividend;
  }


  @JsonProperty(JSON_PROPERTY_DIVIDEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDividend(Dividend dividend) {
    this.dividend = dividend;
  }


  public Fundamentals enterpriseValue(Double enterpriseValue) {
    this.enterpriseValue = JsonNullable.<Double>of(enterpriseValue);
    return this;
  }

   /**
   * Enterprise Value (EV) is the measure of a company&#39;s total value for the period and date(s) requested in local currency by default
   * @return enterpriseValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2989652.948", value = "Enterprise Value (EV) is the measure of a company's total value for the period and date(s) requested in local currency by default")
  @JsonIgnore

  public Double getEnterpriseValue() {
        return enterpriseValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENTERPRISE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getEnterpriseValue_JsonNullable() {
    return enterpriseValue;
  }
  
  @JsonProperty(JSON_PROPERTY_ENTERPRISE_VALUE)
  public void setEnterpriseValue_JsonNullable(JsonNullable<Double> enterpriseValue) {
    this.enterpriseValue = enterpriseValue;
  }

  public void setEnterpriseValue(Double enterpriseValue) {
    this.enterpriseValue = JsonNullable.<Double>of(enterpriseValue);
  }


  public Fundamentals fiveYearAverageYield(Double fiveYearAverageYield) {
    this.fiveYearAverageYield = JsonNullable.<Double>of(fiveYearAverageYield);
    return this;
  }

   /**
   * Average of the dividend yield with yield calculated for each of the past five years
   * @return fiveYearAverageYield
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "5.00195", value = "Average of the dividend yield with yield calculated for each of the past five years")
  @JsonIgnore

  public Double getFiveYearAverageYield() {
        return fiveYearAverageYield.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FIVE_YEAR_AVERAGE_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getFiveYearAverageYield_JsonNullable() {
    return fiveYearAverageYield;
  }
  
  @JsonProperty(JSON_PROPERTY_FIVE_YEAR_AVERAGE_YIELD)
  public void setFiveYearAverageYield_JsonNullable(JsonNullable<Double> fiveYearAverageYield) {
    this.fiveYearAverageYield = fiveYearAverageYield;
  }

  public void setFiveYearAverageYield(Double fiveYearAverageYield) {
    this.fiveYearAverageYield = JsonNullable.<Double>of(fiveYearAverageYield);
  }


  public Fundamentals fiveYearDividendGrowthRate(Double fiveYearDividendGrowthRate) {
    this.fiveYearDividendGrowthRate = JsonNullable.<Double>of(fiveYearDividendGrowthRate);
    return this;
  }

   /**
   * The dividend growth rate is the annualized percentage rate of growth that a particular stock&#39;s dividend undergoes over five years of time
   * @return fiveYearDividendGrowthRate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "6.119162640901776", value = "The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over five years of time")
  @JsonIgnore

  public Double getFiveYearDividendGrowthRate() {
        return fiveYearDividendGrowthRate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FIVE_YEAR_DIVIDEND_GROWTH_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getFiveYearDividendGrowthRate_JsonNullable() {
    return fiveYearDividendGrowthRate;
  }
  
  @JsonProperty(JSON_PROPERTY_FIVE_YEAR_DIVIDEND_GROWTH_RATE)
  public void setFiveYearDividendGrowthRate_JsonNullable(JsonNullable<Double> fiveYearDividendGrowthRate) {
    this.fiveYearDividendGrowthRate = fiveYearDividendGrowthRate;
  }

  public void setFiveYearDividendGrowthRate(Double fiveYearDividendGrowthRate) {
    this.fiveYearDividendGrowthRate = JsonNullable.<Double>of(fiveYearDividendGrowthRate);
  }


  public Fundamentals floatingSharesOutstanding(Double floatingSharesOutstanding) {
    this.floatingSharesOutstanding = JsonNullable.<Double>of(floatingSharesOutstanding);
    return this;
  }

   /**
   * Represents the number of shares outstanding less closely held shares for the period and date(s) requested
   * @return floatingSharesOutstanding
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "15310.455156", value = "Represents the number of shares outstanding less closely held shares for the period and date(s) requested")
  @JsonIgnore

  public Double getFloatingSharesOutstanding() {
        return floatingSharesOutstanding.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FLOATING_SHARES_OUTSTANDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getFloatingSharesOutstanding_JsonNullable() {
    return floatingSharesOutstanding;
  }
  
  @JsonProperty(JSON_PROPERTY_FLOATING_SHARES_OUTSTANDING)
  public void setFloatingSharesOutstanding_JsonNullable(JsonNullable<Double> floatingSharesOutstanding) {
    this.floatingSharesOutstanding = floatingSharesOutstanding;
  }

  public void setFloatingSharesOutstanding(Double floatingSharesOutstanding) {
    this.floatingSharesOutstanding = JsonNullable.<Double>of(floatingSharesOutstanding);
  }


  public Fundamentals netIncome(Double netIncome) {
    this.netIncome = JsonNullable.<Double>of(netIncome);
    return this;
  }

   /**
   * This equals to net earnings (profit) calculated as sales less cost of goods sold, selling, general and administrative expenses, operating expenses, depreciation, interest, taxes and other expenses
   * @return netIncome
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "23636.001", value = "This equals to net earnings (profit) calculated as sales less cost of goods sold, selling, general and administrative expenses, operating expenses, depreciation, interest, taxes and other expenses")
  @JsonIgnore

  public Double getNetIncome() {
        return netIncome.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NET_INCOME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getNetIncome_JsonNullable() {
    return netIncome;
  }
  
  @JsonProperty(JSON_PROPERTY_NET_INCOME)
  public void setNetIncome_JsonNullable(JsonNullable<Double> netIncome) {
    this.netIncome = netIncome;
  }

  public void setNetIncome(Double netIncome) {
    this.netIncome = JsonNullable.<Double>of(netIncome);
  }


  public Fundamentals numberOfEmployees(Integer numberOfEmployees) {
    this.numberOfEmployees = JsonNullable.<Integer>of(numberOfEmployees);
    return this;
  }

   /**
   * Represents the number of employees under the company&#39;s payroll as reported by the management to the shareholders within 90 days of the fiscal year-end.
   * @return numberOfEmployees
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "311300", value = "Represents the number of employees under the company's payroll as reported by the management to the shareholders within 90 days of the fiscal year-end.")
  @JsonIgnore

  public Integer getNumberOfEmployees() {
        return numberOfEmployees.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NUMBER_OF_EMPLOYEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getNumberOfEmployees_JsonNullable() {
    return numberOfEmployees;
  }
  
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_EMPLOYEES)
  public void setNumberOfEmployees_JsonNullable(JsonNullable<Integer> numberOfEmployees) {
    this.numberOfEmployees = numberOfEmployees;
  }

  public void setNumberOfEmployees(Integer numberOfEmployees) {
    this.numberOfEmployees = JsonNullable.<Integer>of(numberOfEmployees);
  }


  public Fundamentals salesPerEmployee(Double salesPerEmployee) {
    this.salesPerEmployee = JsonNullable.<Double>of(salesPerEmployee);
    return this;
  }

   /**
   * Revenue per employee is a ratio that is calculated as a company&#39;s total revenue divided by its current number of employees
   * @return salesPerEmployee
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.194442659813685", value = "Revenue per employee is a ratio that is calculated as a company's total revenue divided by its current number of employees")
  @JsonIgnore

  public Double getSalesPerEmployee() {
        return salesPerEmployee.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SALES_PER_EMPLOYEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getSalesPerEmployee_JsonNullable() {
    return salesPerEmployee;
  }
  
  @JsonProperty(JSON_PROPERTY_SALES_PER_EMPLOYEE)
  public void setSalesPerEmployee_JsonNullable(JsonNullable<Double> salesPerEmployee) {
    this.salesPerEmployee = salesPerEmployee;
  }

  public void setSalesPerEmployee(Double salesPerEmployee) {
    this.salesPerEmployee = JsonNullable.<Double>of(salesPerEmployee);
  }


  public Fundamentals shareHolderEquity(Double shareHolderEquity) {
    this.shareHolderEquity = JsonNullable.<Double>of(shareHolderEquity);
    return this;
  }

   /**
   * Shareholder equity represents the amount of financing the company experiences through common and preferred shares
   * @return shareHolderEquity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "73081.001", value = "Shareholder equity represents the amount of financing the company experiences through common and preferred shares")
  @JsonIgnore

  public Double getShareHolderEquity() {
        return shareHolderEquity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SHARE_HOLDER_EQUITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getShareHolderEquity_JsonNullable() {
    return shareHolderEquity;
  }
  
  @JsonProperty(JSON_PROPERTY_SHARE_HOLDER_EQUITY)
  public void setShareHolderEquity_JsonNullable(JsonNullable<Double> shareHolderEquity) {
    this.shareHolderEquity = shareHolderEquity;
  }

  public void setShareHolderEquity(Double shareHolderEquity) {
    this.shareHolderEquity = JsonNullable.<Double>of(shareHolderEquity);
  }


  public Fundamentals threeYearAverageYield(Double threeYearAverageYield) {
    this.threeYearAverageYield = JsonNullable.<Double>of(threeYearAverageYield);
    return this;
  }

   /**
   * Average of the dividend yield with yield calculated for each of the past three years
   * @return threeYearAverageYield
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "4.916496666666666", value = "Average of the dividend yield with yield calculated for each of the past three years")
  @JsonIgnore

  public Double getThreeYearAverageYield() {
        return threeYearAverageYield.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_THREE_YEAR_AVERAGE_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getThreeYearAverageYield_JsonNullable() {
    return threeYearAverageYield;
  }
  
  @JsonProperty(JSON_PROPERTY_THREE_YEAR_AVERAGE_YIELD)
  public void setThreeYearAverageYield_JsonNullable(JsonNullable<Double> threeYearAverageYield) {
    this.threeYearAverageYield = threeYearAverageYield;
  }

  public void setThreeYearAverageYield(Double threeYearAverageYield) {
    this.threeYearAverageYield = JsonNullable.<Double>of(threeYearAverageYield);
  }


  public Fundamentals threeYearDividendGrowthRate(Double threeYearDividendGrowthRate) {
    this.threeYearDividendGrowthRate = JsonNullable.<Double>of(threeYearDividendGrowthRate);
    return this;
  }

   /**
   * The dividend growth rate is the annualized percentage rate of growth that a particular stock&#39;s dividend undergoes over three years of time
   * @return threeYearDividendGrowthRate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1.228878648233489", value = "The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over three years of time")
  @JsonIgnore

  public Double getThreeYearDividendGrowthRate() {
        return threeYearDividendGrowthRate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_THREE_YEAR_DIVIDEND_GROWTH_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getThreeYearDividendGrowthRate_JsonNullable() {
    return threeYearDividendGrowthRate;
  }
  
  @JsonProperty(JSON_PROPERTY_THREE_YEAR_DIVIDEND_GROWTH_RATE)
  public void setThreeYearDividendGrowthRate_JsonNullable(JsonNullable<Double> threeYearDividendGrowthRate) {
    this.threeYearDividendGrowthRate = threeYearDividendGrowthRate;
  }

  public void setThreeYearDividendGrowthRate(Double threeYearDividendGrowthRate) {
    this.threeYearDividendGrowthRate = JsonNullable.<Double>of(threeYearDividendGrowthRate);
  }


  public Fundamentals totalAssets(Double totalAssets) {
    this.totalAssets = JsonNullable.<Double>of(totalAssets);
    return this;
  }

   /**
   * Total amount of assets owned by entity.
   * @return totalAssets
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "129321.001", value = "Total amount of assets owned by entity.")
  @JsonIgnore

  public Double getTotalAssets() {
        return totalAssets.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOTAL_ASSETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getTotalAssets_JsonNullable() {
    return totalAssets;
  }
  
  @JsonProperty(JSON_PROPERTY_TOTAL_ASSETS)
  public void setTotalAssets_JsonNullable(JsonNullable<Double> totalAssets) {
    this.totalAssets = totalAssets;
  }

  public void setTotalAssets(Double totalAssets) {
    this.totalAssets = JsonNullable.<Double>of(totalAssets);
  }


  public Fundamentals totalRevenue(Double totalRevenue) {
    this.totalRevenue = JsonNullable.<Double>of(totalRevenue);
    return this;
  }

   /**
   * Revenue is the amount of money (in Million) that a company actually receives during a specific period, including discounts and deductions for returned merchandise.
   * @return totalRevenue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "14752.001", value = "Revenue is the amount of money (in Million) that a company actually receives during a specific period, including discounts and deductions for returned merchandise.")
  @JsonIgnore

  public Double getTotalRevenue() {
        return totalRevenue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOTAL_REVENUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getTotalRevenue_JsonNullable() {
    return totalRevenue;
  }
  
  @JsonProperty(JSON_PROPERTY_TOTAL_REVENUE)
  public void setTotalRevenue_JsonNullable(JsonNullable<Double> totalRevenue) {
    this.totalRevenue = totalRevenue;
  }

  public void setTotalRevenue(Double totalRevenue) {
    this.totalRevenue = JsonNullable.<Double>of(totalRevenue);
  }


  /**
   * Return true if this Fundamentals object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fundamentals fundamentals = (Fundamentals) o;
    return Objects.equals(this.requestId, fundamentals.requestId) &&
        Objects.equals(this.error, fundamentals.error) &&
        equalsNullable(this.fsymId, fundamentals.fsymId) &&
        equalsNullable(this.asOfDate, fundamentals.asOfDate) &&
        equalsNullable(this.currency, fundamentals.currency) &&
        equalsNullable(this.periodicity, fundamentals.periodicity) &&
        Objects.equals(this.perShare, fundamentals.perShare) &&
        Objects.equals(this.ratios, fundamentals.ratios) &&
        Objects.equals(this.dividend, fundamentals.dividend) &&
        equalsNullable(this.enterpriseValue, fundamentals.enterpriseValue) &&
        equalsNullable(this.fiveYearAverageYield, fundamentals.fiveYearAverageYield) &&
        equalsNullable(this.fiveYearDividendGrowthRate, fundamentals.fiveYearDividendGrowthRate) &&
        equalsNullable(this.floatingSharesOutstanding, fundamentals.floatingSharesOutstanding) &&
        equalsNullable(this.netIncome, fundamentals.netIncome) &&
        equalsNullable(this.numberOfEmployees, fundamentals.numberOfEmployees) &&
        equalsNullable(this.salesPerEmployee, fundamentals.salesPerEmployee) &&
        equalsNullable(this.shareHolderEquity, fundamentals.shareHolderEquity) &&
        equalsNullable(this.threeYearAverageYield, fundamentals.threeYearAverageYield) &&
        equalsNullable(this.threeYearDividendGrowthRate, fundamentals.threeYearDividendGrowthRate) &&
        equalsNullable(this.totalAssets, fundamentals.totalAssets) &&
        equalsNullable(this.totalRevenue, fundamentals.totalRevenue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, error, hashCodeNullable(fsymId), hashCodeNullable(asOfDate), hashCodeNullable(currency), hashCodeNullable(periodicity), perShare, ratios, dividend, hashCodeNullable(enterpriseValue), hashCodeNullable(fiveYearAverageYield), hashCodeNullable(fiveYearDividendGrowthRate), hashCodeNullable(floatingSharesOutstanding), hashCodeNullable(netIncome), hashCodeNullable(numberOfEmployees), hashCodeNullable(salesPerEmployee), hashCodeNullable(shareHolderEquity), hashCodeNullable(threeYearAverageYield), hashCodeNullable(threeYearDividendGrowthRate), hashCodeNullable(totalAssets), hashCodeNullable(totalRevenue));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fundamentals {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    fsymId: ").append(toIndentedString(fsymId)).append("\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    periodicity: ").append(toIndentedString(periodicity)).append("\n");
    sb.append("    perShare: ").append(toIndentedString(perShare)).append("\n");
    sb.append("    ratios: ").append(toIndentedString(ratios)).append("\n");
    sb.append("    dividend: ").append(toIndentedString(dividend)).append("\n");
    sb.append("    enterpriseValue: ").append(toIndentedString(enterpriseValue)).append("\n");
    sb.append("    fiveYearAverageYield: ").append(toIndentedString(fiveYearAverageYield)).append("\n");
    sb.append("    fiveYearDividendGrowthRate: ").append(toIndentedString(fiveYearDividendGrowthRate)).append("\n");
    sb.append("    floatingSharesOutstanding: ").append(toIndentedString(floatingSharesOutstanding)).append("\n");
    sb.append("    netIncome: ").append(toIndentedString(netIncome)).append("\n");
    sb.append("    numberOfEmployees: ").append(toIndentedString(numberOfEmployees)).append("\n");
    sb.append("    salesPerEmployee: ").append(toIndentedString(salesPerEmployee)).append("\n");
    sb.append("    shareHolderEquity: ").append(toIndentedString(shareHolderEquity)).append("\n");
    sb.append("    threeYearAverageYield: ").append(toIndentedString(threeYearAverageYield)).append("\n");
    sb.append("    threeYearDividendGrowthRate: ").append(toIndentedString(threeYearDividendGrowthRate)).append("\n");
    sb.append("    totalAssets: ").append(toIndentedString(totalAssets)).append("\n");
    sb.append("    totalRevenue: ").append(toIndentedString(totalRevenue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

