/*
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFundamentals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetFundamentals.models.FundamentalValue;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFundamentals.JSON;


/**
 * Represents a single value for a fundamental metric as it was known during a specific Point-in-Time window for a given security and fiscal period.
 */
@ApiModel(description = "Represents a single value for a fundamental metric as it was known during a specific Point-in-Time window for a given security and fiscal period.")
@JsonPropertyOrder({
  FundamentalsPITData.JSON_PROPERTY_REQUEST_ID,
  FundamentalsPITData.JSON_PROPERTY_FSYM_ID,
  FundamentalsPITData.JSON_PROPERTY_METRIC,
  FundamentalsPITData.JSON_PROPERTY_PERIODICITY,
  FundamentalsPITData.JSON_PROPERTY_FISCAL_PERIOD,
  FundamentalsPITData.JSON_PROPERTY_FISCAL_YEAR,
  FundamentalsPITData.JSON_PROPERTY_FISCAL_END_DATE,
  FundamentalsPITData.JSON_PROPERTY_CURRENCY,
  FundamentalsPITData.JSON_PROPERTY_VALUE,
  FundamentalsPITData.JSON_PROPERTY_UPDATE_TYPE,
  FundamentalsPITData.JSON_PROPERTY_PIT_START,
  FundamentalsPITData.JSON_PROPERTY_PIT_END
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FundamentalsPITData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public static final String JSON_PROPERTY_FSYM_ID = "fsymId";
  private JsonNullable<String> fsymId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_METRIC = "metric";
  private JsonNullable<String> metric = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PERIODICITY = "periodicity";
  private JsonNullable<String> periodicity = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FISCAL_PERIOD = "fiscalPeriod";
  private JsonNullable<Integer> fiscalPeriod = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_FISCAL_YEAR = "fiscalYear";
  private JsonNullable<Integer> fiscalYear = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_FISCAL_END_DATE = "fiscalEndDate";
  private JsonNullable<LocalDate> fiscalEndDate = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private JsonNullable<String> currency = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_VALUE = "value";
  private JsonNullable<FundamentalValue> value = JsonNullable.<FundamentalValue>undefined();

  /**
   * Indicates the status of the source filing when this data point was recorded (&#x60;Preliminary&#x60; or &#x60;Final&#x60;).
   */
  public enum UpdateTypeEnum {
    PRELIMINARY("Preliminary"),
    
    FINAL("Final");

    private String value;

    UpdateTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UpdateTypeEnum fromValue(String value) {
      for (UpdateTypeEnum b : UpdateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_UPDATE_TYPE = "updateType";
  private JsonNullable<UpdateTypeEnum> updateType = JsonNullable.<UpdateTypeEnum>undefined();

  public static final String JSON_PROPERTY_PIT_START = "pitStart";
  private JsonNullable<OffsetDateTime> pitStart = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_PIT_END = "pitEnd";
  private JsonNullable<OffsetDateTime> pitEnd = JsonNullable.<OffsetDateTime>undefined();

  public FundamentalsPITData() { 
  }

  public FundamentalsPITData requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * The identifier provided in the input request that corresponds to this data point.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FDS-US", value = "The identifier provided in the input request that corresponds to this data point.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public FundamentalsPITData fsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
    return this;
  }

   /**
   * FactSet Regional Security Identifier representing the specific data series for the requested &#x60;requestId&#x60;.
   * @return fsymId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "SQFMK3-R", value = "FactSet Regional Security Identifier representing the specific data series for the requested `requestId`.")
  @JsonIgnore

  public String getFsymId() {
        return fsymId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFsymId_JsonNullable() {
    return fsymId;
  }
  
  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  public void setFsymId_JsonNullable(JsonNullable<String> fsymId) {
    this.fsymId = fsymId;
  }

  public void setFsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
  }


  public FundamentalsPITData metric(String metric) {
    this.metric = JsonNullable.<String>of(metric);
    return this;
  }

   /**
   * The identifier of the fundamental metric being reported (e.g., &#x60;FF_SALES&#x60;).
   * @return metric
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FF_SALES", value = "The identifier of the fundamental metric being reported (e.g., `FF_SALES`).")
  @JsonIgnore

  public String getMetric() {
        return metric.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_METRIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMetric_JsonNullable() {
    return metric;
  }
  
  @JsonProperty(JSON_PROPERTY_METRIC)
  public void setMetric_JsonNullable(JsonNullable<String> metric) {
    this.metric = metric;
  }

  public void setMetric(String metric) {
    this.metric = JsonNullable.<String>of(metric);
  }


  public FundamentalsPITData periodicity(String periodicity) {
    this.periodicity = JsonNullable.<String>of(periodicity);
    return this;
  }

   /**
   * Periodicity of this data point (e.g., &#x60;QTR&#x60;, &#x60;ANN&#x60;).
   * @return periodicity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "QTR", value = "Periodicity of this data point (e.g., `QTR`, `ANN`).")
  @JsonIgnore

  public String getPeriodicity() {
        return periodicity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PERIODICITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPeriodicity_JsonNullable() {
    return periodicity;
  }
  
  @JsonProperty(JSON_PROPERTY_PERIODICITY)
  public void setPeriodicity_JsonNullable(JsonNullable<String> periodicity) {
    this.periodicity = periodicity;
  }

  public void setPeriodicity(String periodicity) {
    this.periodicity = JsonNullable.<String>of(periodicity);
  }


  public FundamentalsPITData fiscalPeriod(Integer fiscalPeriod) {
    this.fiscalPeriod = JsonNullable.<Integer>of(fiscalPeriod);
    return this;
  }

   /**
   * Integer representing the fiscal period. For &#x60;QTR&#x60; periodicity, possible values are 1, 2, 3, or 4. For &#x60;SEMI&#x60; periodicity, possible values are 1 or 2.
   * @return fiscalPeriod
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Integer representing the fiscal period. For `QTR` periodicity, possible values are 1, 2, 3, or 4. For `SEMI` periodicity, possible values are 1 or 2.")
  @JsonIgnore

  public Integer getFiscalPeriod() {
        return fiscalPeriod.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FISCAL_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getFiscalPeriod_JsonNullable() {
    return fiscalPeriod;
  }
  
  @JsonProperty(JSON_PROPERTY_FISCAL_PERIOD)
  public void setFiscalPeriod_JsonNullable(JsonNullable<Integer> fiscalPeriod) {
    this.fiscalPeriod = fiscalPeriod;
  }

  public void setFiscalPeriod(Integer fiscalPeriod) {
    this.fiscalPeriod = JsonNullable.<Integer>of(fiscalPeriod);
  }


  public FundamentalsPITData fiscalYear(Integer fiscalYear) {
    this.fiscalYear = JsonNullable.<Integer>of(fiscalYear);
    return this;
  }

   /**
   * Fiscal year of the reported period, expressed in a YYYY format.
   * @return fiscalYear
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2018", value = "Fiscal year of the reported period, expressed in a YYYY format.")
  @JsonIgnore

  public Integer getFiscalYear() {
        return fiscalYear.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FISCAL_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getFiscalYear_JsonNullable() {
    return fiscalYear;
  }
  
  @JsonProperty(JSON_PROPERTY_FISCAL_YEAR)
  public void setFiscalYear_JsonNullable(JsonNullable<Integer> fiscalYear) {
    this.fiscalYear = fiscalYear;
  }

  public void setFiscalYear(Integer fiscalYear) {
    this.fiscalYear = JsonNullable.<Integer>of(fiscalYear);
  }


  public FundamentalsPITData fiscalEndDate(LocalDate fiscalEndDate) {
    this.fiscalEndDate = JsonNullable.<LocalDate>of(fiscalEndDate);
    return this;
  }

   /**
   * The official ending date of the fiscal period (YYYY-MM-DD).
   * @return fiscalEndDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Thu Nov 30 00:00:00 UTC 2017", value = "The official ending date of the fiscal period (YYYY-MM-DD).")
  @JsonIgnore

  public LocalDate getFiscalEndDate() {
        return fiscalEndDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FISCAL_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getFiscalEndDate_JsonNullable() {
    return fiscalEndDate;
  }
  
  @JsonProperty(JSON_PROPERTY_FISCAL_END_DATE)
  public void setFiscalEndDate_JsonNullable(JsonNullable<LocalDate> fiscalEndDate) {
    this.fiscalEndDate = fiscalEndDate;
  }

  public void setFiscalEndDate(LocalDate fiscalEndDate) {
    this.fiscalEndDate = JsonNullable.<LocalDate>of(fiscalEndDate);
  }


  public FundamentalsPITData currency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
    return this;
  }

   /**
   * Currency of the reported &#x60;value&#x60;, expressed as a 3-character ISO 4217 code. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "Currency of the reported `value`, expressed as a 3-character ISO 4217 code. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).")
  @JsonIgnore

  public String getCurrency() {
        return currency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCurrency_JsonNullable() {
    return currency;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  public void setCurrency_JsonNullable(JsonNullable<String> currency) {
    this.currency = currency;
  }

  public void setCurrency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
  }


  public FundamentalsPITData value(FundamentalValue value) {
    this.value = JsonNullable.<FundamentalValue>of(value);
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public FundamentalValue getValue() {
        return value.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<FundamentalValue> getValue_JsonNullable() {
    return value;
  }
  
  @JsonProperty(JSON_PROPERTY_VALUE)
  public void setValue_JsonNullable(JsonNullable<FundamentalValue> value) {
    this.value = value;
  }

  public void setValue(FundamentalValue value) {
    this.value = JsonNullable.<FundamentalValue>of(value);
  }


  public FundamentalsPITData updateType(UpdateTypeEnum updateType) {
    this.updateType = JsonNullable.<UpdateTypeEnum>of(updateType);
    return this;
  }

   /**
   * Indicates the status of the source filing when this data point was recorded (&#x60;Preliminary&#x60; or &#x60;Final&#x60;).
   * @return updateType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Final", value = "Indicates the status of the source filing when this data point was recorded (`Preliminary` or `Final`).")
  @JsonIgnore

  public UpdateTypeEnum getUpdateType() {
        return updateType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UPDATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UpdateTypeEnum> getUpdateType_JsonNullable() {
    return updateType;
  }
  
  @JsonProperty(JSON_PROPERTY_UPDATE_TYPE)
  public void setUpdateType_JsonNullable(JsonNullable<UpdateTypeEnum> updateType) {
    this.updateType = updateType;
  }

  public void setUpdateType(UpdateTypeEnum updateType) {
    this.updateType = JsonNullable.<UpdateTypeEnum>of(updateType);
  }


  public FundamentalsPITData pitStart(OffsetDateTime pitStart) {
    this.pitStart = JsonNullable.<OffsetDateTime>of(pitStart);
    return this;
  }

   /**
   * Start of Point-in-Time (inclusive, in UTC) during which this value was current. Format: ISO 8601 &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. If frequency is weekly (w) or monthly (m), this will be null. 
   * @return pitStart
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2017-12-16T05:00Z", value = "Start of Point-in-Time (inclusive, in UTC) during which this value was current. Format: ISO 8601 `YYYY-MM-DDTHH:MM:SSZ`. If frequency is weekly (w) or monthly (m), this will be null. ")
  @JsonIgnore

  public OffsetDateTime getPitStart() {
        return pitStart.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PIT_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getPitStart_JsonNullable() {
    return pitStart;
  }
  
  @JsonProperty(JSON_PROPERTY_PIT_START)
  public void setPitStart_JsonNullable(JsonNullable<OffsetDateTime> pitStart) {
    this.pitStart = pitStart;
  }

  public void setPitStart(OffsetDateTime pitStart) {
    this.pitStart = JsonNullable.<OffsetDateTime>of(pitStart);
  }


  public FundamentalsPITData pitEnd(OffsetDateTime pitEnd) {
    this.pitEnd = JsonNullable.<OffsetDateTime>of(pitEnd);
    return this;
  }

   /**
   * End of Point-in-Time (inclusive, in UTC). Format: ISO 8601 &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. If value is &#x60;null&#x60; -&gt; this value is current (latest active snapshot). If frequency is weekly or monthly, and this is an end-of-week or end-of-month snapshot -&gt; &#x60;pitStart&#x60; will be null. 
   * @return pitEnd
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2018-01-13T04:59:59Z", value = "End of Point-in-Time (inclusive, in UTC). Format: ISO 8601 `YYYY-MM-DDTHH:MM:SSZ`. If value is `null` -> this value is current (latest active snapshot). If frequency is weekly or monthly, and this is an end-of-week or end-of-month snapshot -> `pitStart` will be null. ")
  @JsonIgnore

  public OffsetDateTime getPitEnd() {
        return pitEnd.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PIT_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getPitEnd_JsonNullable() {
    return pitEnd;
  }
  
  @JsonProperty(JSON_PROPERTY_PIT_END)
  public void setPitEnd_JsonNullable(JsonNullable<OffsetDateTime> pitEnd) {
    this.pitEnd = pitEnd;
  }

  public void setPitEnd(OffsetDateTime pitEnd) {
    this.pitEnd = JsonNullable.<OffsetDateTime>of(pitEnd);
  }


  /**
   * Return true if this FundamentalsPITData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundamentalsPITData fundamentalsPITData = (FundamentalsPITData) o;
    return Objects.equals(this.requestId, fundamentalsPITData.requestId) &&
        equalsNullable(this.fsymId, fundamentalsPITData.fsymId) &&
        equalsNullable(this.metric, fundamentalsPITData.metric) &&
        equalsNullable(this.periodicity, fundamentalsPITData.periodicity) &&
        equalsNullable(this.fiscalPeriod, fundamentalsPITData.fiscalPeriod) &&
        equalsNullable(this.fiscalYear, fundamentalsPITData.fiscalYear) &&
        equalsNullable(this.fiscalEndDate, fundamentalsPITData.fiscalEndDate) &&
        equalsNullable(this.currency, fundamentalsPITData.currency) &&
        equalsNullable(this.value, fundamentalsPITData.value) &&
        equalsNullable(this.updateType, fundamentalsPITData.updateType) &&
        equalsNullable(this.pitStart, fundamentalsPITData.pitStart) &&
        equalsNullable(this.pitEnd, fundamentalsPITData.pitEnd);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, hashCodeNullable(fsymId), hashCodeNullable(metric), hashCodeNullable(periodicity), hashCodeNullable(fiscalPeriod), hashCodeNullable(fiscalYear), hashCodeNullable(fiscalEndDate), hashCodeNullable(currency), hashCodeNullable(value), hashCodeNullable(updateType), hashCodeNullable(pitStart), hashCodeNullable(pitEnd));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundamentalsPITData {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    fsymId: ").append(toIndentedString(fsymId)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    periodicity: ").append(toIndentedString(periodicity)).append("\n");
    sb.append("    fiscalPeriod: ").append(toIndentedString(fiscalPeriod)).append("\n");
    sb.append("    fiscalYear: ").append(toIndentedString(fiscalYear)).append("\n");
    sb.append("    fiscalEndDate: ").append(toIndentedString(fiscalEndDate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    updateType: ").append(toIndentedString(updateType)).append("\n");
    sb.append("    pitStart: ").append(toIndentedString(pitStart)).append("\n");
    sb.append("    pitEnd: ").append(toIndentedString(pitEnd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

