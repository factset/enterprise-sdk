/*
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFundamentals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.swagger.annotations.ApiModel;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFundamentals.JSON;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Specifies the frequency of fiscal periods for the data requested.  * &#x60;ANN&#x60;: Annual Original * &#x60;ANN_R&#x60;: Annual Restated * &#x60;QTR&#x60;: Quarterly Original * &#x60;QTR_R&#x60;: Quarterly Restated * &#x60;SEMI&#x60;: Semi-Annual Original * &#x60;SEMI_R&#x60;: Semi-Annual Restated * &#x60;LTM&#x60;: Last Twelve Months (Calculated) * &#x60;LTM_R&#x60;: Last Twelve Months Restated (Calculated) * &#x60;LTM_SEMI&#x60;: LTM based on Semi-Annual * &#x60;LTM_SEMI_R&#x60;: LTM Restated based on Semi-Annual * &#x60;LTMSG&#x60;: LTM Global (QTR preferred over SEMI) * &#x60;YTD&#x60;: Year-to-Date 
 */
public enum PeriodicityEnum {
  
  ANN("ANN"),
  
  ANN_R("ANN_R"),
  
  QTR("QTR"),
  
  QTR_R("QTR_R"),
  
  SEMI("SEMI"),
  
  SEMI_R("SEMI_R"),
  
  LTM("LTM"),
  
  LTM_R("LTM_R"),
  
  LTM_SEMI("LTM_SEMI"),
  
  LTM_SEMI_R("LTM_SEMI_R"),
  
  LTMSG("LTMSG"),
  
  YTD("YTD");

  private String value;

  PeriodicityEnum(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static PeriodicityEnum fromValue(String value) {
    for (PeriodicityEnum b : PeriodicityEnum.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

