/*
 * FactSet Funds API
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFunds.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetFunds.models.Filter;
import com.factset.sdk.FactSetFunds.models.JoinType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFunds.JSON;


/**
 * Statistics Request Body
 */
@ApiModel(description = "Statistics Request Body")
@JsonPropertyOrder({
  StatisticsRequestBody.JSON_PROPERTY_CONTENT_SET,
  StatisticsRequestBody.JSON_PROPERTY_FIELD_NAME,
  StatisticsRequestBody.JSON_PROPERTY_HISTOGRAM,
  StatisticsRequestBody.JSON_PROPERTY_JOIN_TYPE,
  StatisticsRequestBody.JSON_PROPERTY_FILTERS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class StatisticsRequestBody implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CONTENT_SET = "contentSet";
  private String contentSet;

  public static final String JSON_PROPERTY_FIELD_NAME = "fieldName";
  private String fieldName;

  public static final String JSON_PROPERTY_HISTOGRAM = "histogram";
  private Boolean histogram;

  public static final String JSON_PROPERTY_JOIN_TYPE = "joinType";
  private JoinType joinType = JoinType.AND;

  public static final String JSON_PROPERTY_FILTERS = "filters";
  private java.util.List<Filter> filters = null;

  public StatisticsRequestBody() { 
  }

  @JsonCreator
  public StatisticsRequestBody(
    @JsonProperty(value=JSON_PROPERTY_CONTENT_SET, required=true) String contentSet, 
    @JsonProperty(value=JSON_PROPERTY_FIELD_NAME, required=true) String fieldName
  ) {
    this();
    this.contentSet = contentSet;
    this.fieldName = fieldName;
  }

  public StatisticsRequestBody contentSet(String contentSet) {
    this.contentSet = contentSet;
    return this;
  }

   /**
   * The content set from which the input field is taken.
   * @return contentSet
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Factset Fundamentals", required = true, value = "The content set from which the input field is taken.")
  @JsonProperty(JSON_PROPERTY_CONTENT_SET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getContentSet() {
    return contentSet;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_SET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContentSet(String contentSet) {
    this.contentSet = contentSet;
  }


  public StatisticsRequestBody fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

   /**
   * The field name to be used in the filter criteria. For custom content sets, display name should be used as a field name. The inputField must be a member of the contentSet specified above.
   * @return fieldName
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Company Name", required = true, value = "The field name to be used in the filter criteria. For custom content sets, display name should be used as a field name. The inputField must be a member of the contentSet specified above.")
  @JsonProperty(JSON_PROPERTY_FIELD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFieldName() {
    return fieldName;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public StatisticsRequestBody histogram(Boolean histogram) {
    this.histogram = histogram;
    return this;
  }

   /**
   * Flag to indicate if histogram data is required.
   * @return histogram
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Flag to indicate if histogram data is required.")
  @JsonProperty(JSON_PROPERTY_HISTOGRAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHistogram() {
    return histogram;
  }


  @JsonProperty(JSON_PROPERTY_HISTOGRAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHistogram(Boolean histogram) {
    this.histogram = histogram;
  }


  public StatisticsRequestBody joinType(JoinType joinType) {
    this.joinType = joinType;
    return this;
  }

   /**
   * Get joinType
   * @return joinType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_JOIN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JoinType getJoinType() {
    return joinType;
  }


  @JsonProperty(JSON_PROPERTY_JOIN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJoinType(JoinType joinType) {
    this.joinType = joinType;
  }


  public StatisticsRequestBody filters(java.util.List<Filter> filters) {
    this.filters = filters;
    return this;
  }

  public StatisticsRequestBody addFiltersItem(Filter filtersItem) {
    if (this.filters == null) {
      this.filters = new java.util.ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Filters to be applied to the request.
   * @return filters
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Filters to be applied to the request.")
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<Filter> getFilters() {
    return filters;
  }


  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilters(java.util.List<Filter> filters) {
    this.filters = filters;
  }


  /**
   * Return true if this StatisticsRequestBody object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatisticsRequestBody statisticsRequestBody = (StatisticsRequestBody) o;
    return Objects.equals(this.contentSet, statisticsRequestBody.contentSet) &&
        Objects.equals(this.fieldName, statisticsRequestBody.fieldName) &&
        Objects.equals(this.histogram, statisticsRequestBody.histogram) &&
        Objects.equals(this.joinType, statisticsRequestBody.joinType) &&
        Objects.equals(this.filters, statisticsRequestBody.filters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentSet, fieldName, histogram, joinType, filters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatisticsRequestBody {\n");
    sb.append("    contentSet: ").append(toIndentedString(contentSet)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    histogram: ").append(toIndentedString(histogram)).append("\n");
    sb.append("    joinType: ").append(toIndentedString(joinType)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

