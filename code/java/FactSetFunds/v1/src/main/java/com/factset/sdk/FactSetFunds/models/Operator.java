/*
 * FactSet Funds API
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFunds.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.swagger.annotations.ApiModel;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFunds.JSON;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The operator to be used in the filter criteria, where   * **EQ**  &#x3D; Equals,   * **NE** &#x3D; Not equals,   * **CT**  &#x3D; Contains returns values which contain given substring,   * **NOT_CT** &#x3D; Not Contains - returns values that **do not** contain the given substring,   * **IN** &#x3D; The \&quot;In\&quot; operator accepts an array of values and returns data that matches any of them,   * **NOT_IN** &#x3D; The \&quot;NOT_IN\&quot; operator accepts an array of values and returns data that matches none of them,   * **LT** &#x3D; Less than,   * **LTE** &#x3D; Less than or equal to,   * **GT**  &#x3D; Greater than,   * **GTE** &#x3D; Greater than or equal to.      &lt;br&gt; **Note:** Both the &#x60;IN&#x60; and &#x60;NOT_IN&#x60; operators accept multiple values, while all other operators should be used with a single value. 
 */
public enum Operator {
  
  EQ("EQ"),
  
  NE("NE"),
  
  CT("CT"),
  
  NOT_CT("NOT_CT"),
  
  IN("IN"),
  
  NOT_IN("NOT_IN"),
  
  LT("LT"),
  
  LTE("LTE"),
  
  GT("GT"),
  
  GTE("GTE");

  private String value;

  Operator(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static Operator fromValue(String value) {
    for (Operator b : Operator.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

