/*
 * FactSet Funds API
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFunds.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetFunds.models.Criterion;
import com.factset.sdk.FactSetFunds.models.JoinType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFunds.JSON;


/**
 * Filter object
 */
@ApiModel(description = "Filter object")
@JsonPropertyOrder({
  Filter.JSON_PROPERTY_JOIN_TYPE,
  Filter.JSON_PROPERTY_CRITERIA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Filter implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_JOIN_TYPE = "joinType";
  private JoinType joinType = JoinType.AND;

  public static final String JSON_PROPERTY_CRITERIA = "criteria";
  private java.util.List<Criterion> criteria = new java.util.ArrayList<>();

  public Filter() { 
  }

  @JsonCreator
  public Filter(
    @JsonProperty(value=JSON_PROPERTY_CRITERIA, required=true) java.util.List<Criterion> criteria
  ) {
    this();
    this.criteria = criteria;
  }

  public Filter joinType(JoinType joinType) {
    this.joinType = joinType;
    return this;
  }

   /**
   * Get joinType
   * @return joinType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_JOIN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JoinType getJoinType() {
    return joinType;
  }


  @JsonProperty(JSON_PROPERTY_JOIN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJoinType(JoinType joinType) {
    this.joinType = joinType;
  }


  public Filter criteria(java.util.List<Criterion> criteria) {
    this.criteria = criteria;
    return this;
  }

  public Filter addCriteriaItem(Criterion criteriaItem) {
    this.criteria.add(criteriaItem);
    return this;
  }

   /**
   * Criteria to filter by
   * @return criteria
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Criteria to filter by")
  @JsonProperty(JSON_PROPERTY_CRITERIA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.List<Criterion> getCriteria() {
    return criteria;
  }


  @JsonProperty(JSON_PROPERTY_CRITERIA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCriteria(java.util.List<Criterion> criteria) {
    this.criteria = criteria;
  }


  /**
   * Return true if this Filter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filter filter = (Filter) o;
    return Objects.equals(this.joinType, filter.joinType) &&
        Objects.equals(this.criteria, filter.criteria);
  }

  @Override
  public int hashCode() {
    return Objects.hash(joinType, criteria);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filter {\n");
    sb.append("    joinType: ").append(toIndentedString(joinType)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

