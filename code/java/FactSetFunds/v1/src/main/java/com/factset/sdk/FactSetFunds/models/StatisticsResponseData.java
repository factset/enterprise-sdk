/*
 * FactSet Funds API
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetFunds.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetFunds.models.HistogramData;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetFunds.JSON;


/**
 * Aggregate statistics for a given field within the specified content sets.
 */
@ApiModel(description = "Aggregate statistics for a given field within the specified content sets.")
@JsonPropertyOrder({
  StatisticsResponseData.JSON_PROPERTY_MINIMUM,
  StatisticsResponseData.JSON_PROPERTY_MAXIMUM,
  StatisticsResponseData.JSON_PROPERTY_AVERAGE,
  StatisticsResponseData.JSON_PROPERTY_SUM,
  StatisticsResponseData.JSON_PROPERTY_COUNT,
  StatisticsResponseData.JSON_PROPERTY_MEDIAN,
  StatisticsResponseData.JSON_PROPERTY_STD_DEV,
  StatisticsResponseData.JSON_PROPERTY_HISTOGRAM
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class StatisticsResponseData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_MINIMUM = "minimum";
  private BigDecimal minimum;

  public static final String JSON_PROPERTY_MAXIMUM = "maximum";
  private BigDecimal maximum;

  public static final String JSON_PROPERTY_AVERAGE = "average";
  private BigDecimal average;

  public static final String JSON_PROPERTY_SUM = "sum";
  private BigDecimal sum;

  public static final String JSON_PROPERTY_COUNT = "count";
  private Long count;

  public static final String JSON_PROPERTY_MEDIAN = "median";
  private BigDecimal median;

  public static final String JSON_PROPERTY_STD_DEV = "stdDev";
  private BigDecimal stdDev;

  public static final String JSON_PROPERTY_HISTOGRAM = "histogram";
  private java.util.List<HistogramData> histogram = null;

  public StatisticsResponseData() { 
  }

  public StatisticsResponseData minimum(BigDecimal minimum) {
    this.minimum = minimum;
    return this;
  }

   /**
   * The minimum value of the field.
   * @return minimum
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "-55.609", value = "The minimum value of the field.")
  @JsonProperty(JSON_PROPERTY_MINIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMinimum() {
    return minimum;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimum(BigDecimal minimum) {
    this.minimum = minimum;
  }


  public StatisticsResponseData maximum(BigDecimal maximum) {
    this.maximum = maximum;
    return this;
  }

   /**
   * The maximum value of the field.
   * @return maximum
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "105.736", value = "The maximum value of the field.")
  @JsonProperty(JSON_PROPERTY_MAXIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMaximum() {
    return maximum;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximum(BigDecimal maximum) {
    this.maximum = maximum;
  }


  public StatisticsResponseData average(BigDecimal average) {
    this.average = average;
    return this;
  }

   /**
   * The average value of the field.
   * @return average
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.752", value = "The average value of the field.")
  @JsonProperty(JSON_PROPERTY_AVERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAverage() {
    return average;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverage(BigDecimal average) {
    this.average = average;
  }


  public StatisticsResponseData sum(BigDecimal sum) {
    this.sum = sum;
    return this;
  }

   /**
   * The sum of the field values.
   * @return sum
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2910.85", value = "The sum of the field values.")
  @JsonProperty(JSON_PROPERTY_SUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSum() {
    return sum;
  }


  @JsonProperty(JSON_PROPERTY_SUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSum(BigDecimal sum) {
    this.sum = sum;
  }


  public StatisticsResponseData count(Long count) {
    this.count = count;
    return this;
  }

   /**
   * The number of records.
   * @return count
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "3869", value = "The number of records.")
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCount(Long count) {
    this.count = count;
  }


  public StatisticsResponseData median(BigDecimal median) {
    this.median = median;
    return this;
  }

   /**
   * The median value of the field.
   * @return median
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.752", value = "The median value of the field.")
  @JsonProperty(JSON_PROPERTY_MEDIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMedian() {
    return median;
  }


  @JsonProperty(JSON_PROPERTY_MEDIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMedian(BigDecimal median) {
    this.median = median;
  }


  public StatisticsResponseData stdDev(BigDecimal stdDev) {
    this.stdDev = stdDev;
    return this;
  }

   /**
   * The standard deviation of the field values.
   * @return stdDev
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.752", value = "The standard deviation of the field values.")
  @JsonProperty(JSON_PROPERTY_STD_DEV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getStdDev() {
    return stdDev;
  }


  @JsonProperty(JSON_PROPERTY_STD_DEV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStdDev(BigDecimal stdDev) {
    this.stdDev = stdDev;
  }


  public StatisticsResponseData histogram(java.util.List<HistogramData> histogram) {
    this.histogram = histogram;
    return this;
  }

  public StatisticsResponseData addHistogramItem(HistogramData histogramItem) {
    if (this.histogram == null) {
      this.histogram = new java.util.ArrayList<>();
    }
    this.histogram.add(histogramItem);
    return this;
  }

   /**
   * The histogram of the field values. The histogram is an array of 10 bins, each bin containing the minimum, maximum, and count of records in that bin. The bins are equally spaced between the minimum and maximum values of the field.
   * @return histogram
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The histogram of the field values. The histogram is an array of 10 bins, each bin containing the minimum, maximum, and count of records in that bin. The bins are equally spaced between the minimum and maximum values of the field.")
  @JsonProperty(JSON_PROPERTY_HISTOGRAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<HistogramData> getHistogram() {
    return histogram;
  }


  @JsonProperty(JSON_PROPERTY_HISTOGRAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHistogram(java.util.List<HistogramData> histogram) {
    this.histogram = histogram;
  }


  /**
   * Return true if this StatisticsResponse_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatisticsResponseData statisticsResponseData = (StatisticsResponseData) o;
    return Objects.equals(this.minimum, statisticsResponseData.minimum) &&
        Objects.equals(this.maximum, statisticsResponseData.maximum) &&
        Objects.equals(this.average, statisticsResponseData.average) &&
        Objects.equals(this.sum, statisticsResponseData.sum) &&
        Objects.equals(this.count, statisticsResponseData.count) &&
        Objects.equals(this.median, statisticsResponseData.median) &&
        Objects.equals(this.stdDev, statisticsResponseData.stdDev) &&
        Objects.equals(this.histogram, statisticsResponseData.histogram);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minimum, maximum, average, sum, count, median, stdDev, histogram);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatisticsResponseData {\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    median: ").append(toIndentedString(median)).append("\n");
    sb.append("    stdDev: ").append(toIndentedString(stdDev)).append("\n");
    sb.append("    histogram: ").append(toIndentedString(histogram)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

