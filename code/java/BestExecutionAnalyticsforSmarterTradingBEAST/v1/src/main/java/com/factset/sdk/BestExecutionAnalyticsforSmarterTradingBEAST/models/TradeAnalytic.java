/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.JSON;


/**
 * Trade Analytic object
 */
@ApiModel(description = "Trade Analytic object")
@JsonPropertyOrder({
  TradeAnalytic.JSON_PROPERTY_TIME_ZONE_NAME,
  TradeAnalytic.JSON_PROPERTY_VOLUME,
  TradeAnalytic.JSON_PROPERTY_BIN_TIME,
  TradeAnalytic.JSON_PROPERTY_VOLATILITY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class TradeAnalytic implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TIME_ZONE_NAME = "timeZoneName";
  private String timeZoneName;

  public static final String JSON_PROPERTY_VOLUME = "volume";
  private Double volume;

  public static final String JSON_PROPERTY_BIN_TIME = "binTime";
  private String binTime;

  public static final String JSON_PROPERTY_VOLATILITY = "volatility";
  private Double volatility;

  public TradeAnalytic() { 
  }

  public TradeAnalytic timeZoneName(String timeZoneName) {
    this.timeZoneName = timeZoneName;
    return this;
  }

   /**
   * Timezone
   * @return timeZoneName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Timezone")
  @JsonProperty(JSON_PROPERTY_TIME_ZONE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTimeZoneName() {
    return timeZoneName;
  }


  @JsonProperty(JSON_PROPERTY_TIME_ZONE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeZoneName(String timeZoneName) {
    this.timeZoneName = timeZoneName;
  }


  public TradeAnalytic volume(Double volume) {
    this.volume = volume;
    return this;
  }

   /**
   * Volume
   * @return volume
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Volume")
  @JsonProperty(JSON_PROPERTY_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getVolume() {
    return volume;
  }


  @JsonProperty(JSON_PROPERTY_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolume(Double volume) {
    this.volume = volume;
  }


  public TradeAnalytic binTime(String binTime) {
    this.binTime = binTime;
    return this;
  }

   /**
   * Bin Time
   * @return binTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Bin Time")
  @JsonProperty(JSON_PROPERTY_BIN_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBinTime() {
    return binTime;
  }


  @JsonProperty(JSON_PROPERTY_BIN_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBinTime(String binTime) {
    this.binTime = binTime;
  }


  public TradeAnalytic volatility(Double volatility) {
    this.volatility = volatility;
    return this;
  }

   /**
   * Volatility
   * @return volatility
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Volatility")
  @JsonProperty(JSON_PROPERTY_VOLATILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getVolatility() {
    return volatility;
  }


  @JsonProperty(JSON_PROPERTY_VOLATILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolatility(Double volatility) {
    this.volatility = volatility;
  }


  /**
   * Return true if this TradeAnalytic object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TradeAnalytic tradeAnalytic = (TradeAnalytic) o;
    return Objects.equals(this.timeZoneName, tradeAnalytic.timeZoneName) &&
        Objects.equals(this.volume, tradeAnalytic.volume) &&
        Objects.equals(this.binTime, tradeAnalytic.binTime) &&
        Objects.equals(this.volatility, tradeAnalytic.volatility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeZoneName, volume, binTime, volatility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TradeAnalytic {\n");
    sb.append("    timeZoneName: ").append(toIndentedString(timeZoneName)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    binTime: ").append(toIndentedString(binTime)).append("\n");
    sb.append("    volatility: ").append(toIndentedString(volatility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

