/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models.OutlierDataResult;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models.OutlierMetrics;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.JSON;


/**
 * The Outlier Data object
 */
@ApiModel(description = "The Outlier Data object")
@JsonPropertyOrder({
  OutlierData.JSON_PROPERTY_RESULT,
  OutlierData.JSON_PROPERTY_METRICS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class OutlierData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_RESULT = "result";
  private java.util.List<OutlierDataResult> result = null;

  public static final String JSON_PROPERTY_METRICS = "metrics";
  private OutlierMetrics metrics;

  public OutlierData() { 
  }

  public OutlierData result(java.util.List<OutlierDataResult> result) {
    this.result = result;
    return this;
  }

  public OutlierData addResultItem(OutlierDataResult resultItem) {
    if (this.result == null) {
      this.result = new java.util.ArrayList<>();
    }
    this.result.add(resultItem);
    return this;
  }

   /**
   * Outlier Result
   * @return result
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Outlier Result")
  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<OutlierDataResult> getResult() {
    return result;
  }


  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResult(java.util.List<OutlierDataResult> result) {
    this.result = result;
  }


  public OutlierData metrics(OutlierMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_METRICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OutlierMetrics getMetrics() {
    return metrics;
  }


  @JsonProperty(JSON_PROPERTY_METRICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetrics(OutlierMetrics metrics) {
    this.metrics = metrics;
  }


  /**
   * Return true if this OutlierData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutlierData outlierData = (OutlierData) o;
    return Objects.equals(this.result, outlierData.result) &&
        Objects.equals(this.metrics, outlierData.metrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(result, metrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutlierData {\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

