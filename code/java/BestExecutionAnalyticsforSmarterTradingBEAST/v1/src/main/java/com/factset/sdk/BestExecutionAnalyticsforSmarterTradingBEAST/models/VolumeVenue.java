/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.JSON;


/**
 * Volume Venue data
 */
@ApiModel(description = "Volume Venue data")
@JsonPropertyOrder({
  VolumeVenue.JSON_PROPERTY_VENUE,
  VolumeVenue.JSON_PROPERTY_ORDER_VOLUME,
  VolumeVenue.JSON_PROPERTY_FILLS_VOLUME_PCT,
  VolumeVenue.JSON_PROPERTY_MARKET_VOLUME,
  VolumeVenue.JSON_PROPERTY_TRADES_VOLUME_PCT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class VolumeVenue implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_VENUE = "venue";
  private String venue;

  public static final String JSON_PROPERTY_ORDER_VOLUME = "orderVolume";
  private Double orderVolume;

  public static final String JSON_PROPERTY_FILLS_VOLUME_PCT = "fillsVolumePct";
  private Double fillsVolumePct;

  public static final String JSON_PROPERTY_MARKET_VOLUME = "marketVolume";
  private Double marketVolume;

  public static final String JSON_PROPERTY_TRADES_VOLUME_PCT = "tradesVolumePct";
  private Double tradesVolumePct;

  public VolumeVenue() { 
  }

  public VolumeVenue venue(String venue) {
    this.venue = venue;
    return this;
  }

   /**
   * Venue
   * @return venue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Venue")
  @JsonProperty(JSON_PROPERTY_VENUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVenue() {
    return venue;
  }


  @JsonProperty(JSON_PROPERTY_VENUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVenue(String venue) {
    this.venue = venue;
  }


  public VolumeVenue orderVolume(Double orderVolume) {
    this.orderVolume = orderVolume;
    return this;
  }

   /**
   * Order Volume
   * @return orderVolume
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Order Volume")
  @JsonProperty(JSON_PROPERTY_ORDER_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getOrderVolume() {
    return orderVolume;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrderVolume(Double orderVolume) {
    this.orderVolume = orderVolume;
  }


  public VolumeVenue fillsVolumePct(Double fillsVolumePct) {
    this.fillsVolumePct = fillsVolumePct;
    return this;
  }

   /**
   * Fills Volume Percentage
   * @return fillsVolumePct
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Fills Volume Percentage")
  @JsonProperty(JSON_PROPERTY_FILLS_VOLUME_PCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getFillsVolumePct() {
    return fillsVolumePct;
  }


  @JsonProperty(JSON_PROPERTY_FILLS_VOLUME_PCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFillsVolumePct(Double fillsVolumePct) {
    this.fillsVolumePct = fillsVolumePct;
  }


  public VolumeVenue marketVolume(Double marketVolume) {
    this.marketVolume = marketVolume;
    return this;
  }

   /**
   * Market Volume
   * @return marketVolume
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Market Volume")
  @JsonProperty(JSON_PROPERTY_MARKET_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMarketVolume() {
    return marketVolume;
  }


  @JsonProperty(JSON_PROPERTY_MARKET_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarketVolume(Double marketVolume) {
    this.marketVolume = marketVolume;
  }


  public VolumeVenue tradesVolumePct(Double tradesVolumePct) {
    this.tradesVolumePct = tradesVolumePct;
    return this;
  }

   /**
   * Trades Volume Percentage
   * @return tradesVolumePct
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Trades Volume Percentage")
  @JsonProperty(JSON_PROPERTY_TRADES_VOLUME_PCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getTradesVolumePct() {
    return tradesVolumePct;
  }


  @JsonProperty(JSON_PROPERTY_TRADES_VOLUME_PCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTradesVolumePct(Double tradesVolumePct) {
    this.tradesVolumePct = tradesVolumePct;
  }


  /**
   * Return true if this VolumeVenue object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeVenue volumeVenue = (VolumeVenue) o;
    return Objects.equals(this.venue, volumeVenue.venue) &&
        Objects.equals(this.orderVolume, volumeVenue.orderVolume) &&
        Objects.equals(this.fillsVolumePct, volumeVenue.fillsVolumePct) &&
        Objects.equals(this.marketVolume, volumeVenue.marketVolume) &&
        Objects.equals(this.tradesVolumePct, volumeVenue.tradesVolumePct);
  }

  @Override
  public int hashCode() {
    return Objects.hash(venue, orderVolume, fillsVolumePct, marketVolume, tradesVolumePct);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeVenue {\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    orderVolume: ").append(toIndentedString(orderVolume)).append("\n");
    sb.append("    fillsVolumePct: ").append(toIndentedString(fillsVolumePct)).append("\n");
    sb.append("    marketVolume: ").append(toIndentedString(marketVolume)).append("\n");
    sb.append("    tradesVolumePct: ").append(toIndentedString(tradesVolumePct)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

