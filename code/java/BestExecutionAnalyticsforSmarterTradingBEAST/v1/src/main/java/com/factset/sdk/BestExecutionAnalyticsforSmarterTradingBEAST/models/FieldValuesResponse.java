/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.JSON;


/**
 * Field Values response object
 */
@ApiModel(description = "Field Values response object")
@JsonPropertyOrder({
  FieldValuesResponse.JSON_PROPERTY_SYMBOL,
  FieldValuesResponse.JSON_PROPERTY_COUNTRY,
  FieldValuesResponse.JSON_PROPERTY_TRADER,
  FieldValuesResponse.JSON_PROPERTY_STRATEGY,
  FieldValuesResponse.JSON_PROPERTY_BROKER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FieldValuesResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private java.util.List<String> symbol = null;

  public static final String JSON_PROPERTY_COUNTRY = "country";
  private java.util.List<String> country = null;

  public static final String JSON_PROPERTY_TRADER = "trader";
  private java.util.List<String> trader = null;

  public static final String JSON_PROPERTY_STRATEGY = "strategy";
  private java.util.List<String> strategy = null;

  public static final String JSON_PROPERTY_BROKER = "broker";
  private java.util.List<String> broker = null;

  public FieldValuesResponse() { 
  }

  public FieldValuesResponse symbol(java.util.List<String> symbol) {
    this.symbol = symbol;
    return this;
  }

  public FieldValuesResponse addSymbolItem(String symbolItem) {
    if (this.symbol == null) {
      this.symbol = new java.util.ArrayList<>();
    }
    this.symbol.add(symbolItem);
    return this;
  }

   /**
   * Symbol field values
   * @return symbol
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Symbol field values")
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSymbol(java.util.List<String> symbol) {
    this.symbol = symbol;
  }


  public FieldValuesResponse country(java.util.List<String> country) {
    this.country = country;
    return this;
  }

  public FieldValuesResponse addCountryItem(String countryItem) {
    if (this.country == null) {
      this.country = new java.util.ArrayList<>();
    }
    this.country.add(countryItem);
    return this;
  }

   /**
   * Country field values
   * @return country
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Country field values")
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getCountry() {
    return country;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountry(java.util.List<String> country) {
    this.country = country;
  }


  public FieldValuesResponse trader(java.util.List<String> trader) {
    this.trader = trader;
    return this;
  }

  public FieldValuesResponse addTraderItem(String traderItem) {
    if (this.trader == null) {
      this.trader = new java.util.ArrayList<>();
    }
    this.trader.add(traderItem);
    return this;
  }

   /**
   * Trader field values
   * @return trader
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Trader field values")
  @JsonProperty(JSON_PROPERTY_TRADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getTrader() {
    return trader;
  }


  @JsonProperty(JSON_PROPERTY_TRADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrader(java.util.List<String> trader) {
    this.trader = trader;
  }


  public FieldValuesResponse strategy(java.util.List<String> strategy) {
    this.strategy = strategy;
    return this;
  }

  public FieldValuesResponse addStrategyItem(String strategyItem) {
    if (this.strategy == null) {
      this.strategy = new java.util.ArrayList<>();
    }
    this.strategy.add(strategyItem);
    return this;
  }

   /**
   * Strategy field values
   * @return strategy
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Strategy field values")
  @JsonProperty(JSON_PROPERTY_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getStrategy() {
    return strategy;
  }


  @JsonProperty(JSON_PROPERTY_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStrategy(java.util.List<String> strategy) {
    this.strategy = strategy;
  }


  public FieldValuesResponse broker(java.util.List<String> broker) {
    this.broker = broker;
    return this;
  }

  public FieldValuesResponse addBrokerItem(String brokerItem) {
    if (this.broker == null) {
      this.broker = new java.util.ArrayList<>();
    }
    this.broker.add(brokerItem);
    return this;
  }

   /**
   * Broker field values
   * @return broker
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Broker field values")
  @JsonProperty(JSON_PROPERTY_BROKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getBroker() {
    return broker;
  }


  @JsonProperty(JSON_PROPERTY_BROKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBroker(java.util.List<String> broker) {
    this.broker = broker;
  }


  /**
   * Return true if this FieldValuesResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldValuesResponse fieldValuesResponse = (FieldValuesResponse) o;
    return Objects.equals(this.symbol, fieldValuesResponse.symbol) &&
        Objects.equals(this.country, fieldValuesResponse.country) &&
        Objects.equals(this.trader, fieldValuesResponse.trader) &&
        Objects.equals(this.strategy, fieldValuesResponse.strategy) &&
        Objects.equals(this.broker, fieldValuesResponse.broker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, country, trader, strategy, broker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldValuesResponse {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    trader: ").append(toIndentedString(trader)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    broker: ").append(toIndentedString(broker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

