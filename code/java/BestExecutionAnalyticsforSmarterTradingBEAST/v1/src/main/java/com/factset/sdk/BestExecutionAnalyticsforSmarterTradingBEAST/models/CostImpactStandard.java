/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.JSON;


/**
 * The Cost Impact Standard object
 */
@ApiModel(description = "The Cost Impact Standard object")
@JsonPropertyOrder({
  CostImpactStandard.JSON_PROPERTY_COST_PER_SHARE,
  CostImpactStandard.JSON_PROPERTY_LIQUIDITY_COST_PER_SHARE,
  CostImpactStandard.JSON_PROPERTY_SPREAD_COST_PER_SHARE,
  CostImpactStandard.JSON_PROPERTY_COST_PER_SHARE_BPS,
  CostImpactStandard.JSON_PROPERTY_LIQUIDITY_COST_PER_SHARE_BPS,
  CostImpactStandard.JSON_PROPERTY_SPREAD_COST_PER_SHARE_BPS,
  CostImpactStandard.JSON_PROPERTY_MARKET_IMPACT,
  CostImpactStandard.JSON_PROPERTY_CONFIDENCE_INTERVAL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class CostImpactStandard implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_COST_PER_SHARE = "costPerShare";
  private Double costPerShare;

  public static final String JSON_PROPERTY_LIQUIDITY_COST_PER_SHARE = "liquidityCostPerShare";
  private Double liquidityCostPerShare;

  public static final String JSON_PROPERTY_SPREAD_COST_PER_SHARE = "spreadCostPerShare";
  private Double spreadCostPerShare;

  public static final String JSON_PROPERTY_COST_PER_SHARE_BPS = "costPerShareBps";
  private Double costPerShareBps;

  public static final String JSON_PROPERTY_LIQUIDITY_COST_PER_SHARE_BPS = "liquidityCostPerShareBps";
  private Double liquidityCostPerShareBps;

  public static final String JSON_PROPERTY_SPREAD_COST_PER_SHARE_BPS = "spreadCostPerShareBps";
  private Double spreadCostPerShareBps;

  public static final String JSON_PROPERTY_MARKET_IMPACT = "marketImpact";
  private Double marketImpact;

  public static final String JSON_PROPERTY_CONFIDENCE_INTERVAL = "confidenceInterval";
  private Double confidenceInterval;

  public CostImpactStandard() { 
  }

  public CostImpactStandard costPerShare(Double costPerShare) {
    this.costPerShare = costPerShare;
    return this;
  }

   /**
   * Cost Per Share
   * @return costPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Cost Per Share")
  @JsonProperty(JSON_PROPERTY_COST_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getCostPerShare() {
    return costPerShare;
  }


  @JsonProperty(JSON_PROPERTY_COST_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCostPerShare(Double costPerShare) {
    this.costPerShare = costPerShare;
  }


  public CostImpactStandard liquidityCostPerShare(Double liquidityCostPerShare) {
    this.liquidityCostPerShare = liquidityCostPerShare;
    return this;
  }

   /**
   * Liquidity Cost Per Share
   * @return liquidityCostPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Liquidity Cost Per Share")
  @JsonProperty(JSON_PROPERTY_LIQUIDITY_COST_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getLiquidityCostPerShare() {
    return liquidityCostPerShare;
  }


  @JsonProperty(JSON_PROPERTY_LIQUIDITY_COST_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLiquidityCostPerShare(Double liquidityCostPerShare) {
    this.liquidityCostPerShare = liquidityCostPerShare;
  }


  public CostImpactStandard spreadCostPerShare(Double spreadCostPerShare) {
    this.spreadCostPerShare = spreadCostPerShare;
    return this;
  }

   /**
   * Spread Cost Per Share
   * @return spreadCostPerShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Spread Cost Per Share")
  @JsonProperty(JSON_PROPERTY_SPREAD_COST_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getSpreadCostPerShare() {
    return spreadCostPerShare;
  }


  @JsonProperty(JSON_PROPERTY_SPREAD_COST_PER_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpreadCostPerShare(Double spreadCostPerShare) {
    this.spreadCostPerShare = spreadCostPerShare;
  }


  public CostImpactStandard costPerShareBps(Double costPerShareBps) {
    this.costPerShareBps = costPerShareBps;
    return this;
  }

   /**
   * Cost Per Share Bps
   * @return costPerShareBps
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Cost Per Share Bps")
  @JsonProperty(JSON_PROPERTY_COST_PER_SHARE_BPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getCostPerShareBps() {
    return costPerShareBps;
  }


  @JsonProperty(JSON_PROPERTY_COST_PER_SHARE_BPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCostPerShareBps(Double costPerShareBps) {
    this.costPerShareBps = costPerShareBps;
  }


  public CostImpactStandard liquidityCostPerShareBps(Double liquidityCostPerShareBps) {
    this.liquidityCostPerShareBps = liquidityCostPerShareBps;
    return this;
  }

   /**
   * Liquidity Cost Per Share Bps
   * @return liquidityCostPerShareBps
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Liquidity Cost Per Share Bps")
  @JsonProperty(JSON_PROPERTY_LIQUIDITY_COST_PER_SHARE_BPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getLiquidityCostPerShareBps() {
    return liquidityCostPerShareBps;
  }


  @JsonProperty(JSON_PROPERTY_LIQUIDITY_COST_PER_SHARE_BPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLiquidityCostPerShareBps(Double liquidityCostPerShareBps) {
    this.liquidityCostPerShareBps = liquidityCostPerShareBps;
  }


  public CostImpactStandard spreadCostPerShareBps(Double spreadCostPerShareBps) {
    this.spreadCostPerShareBps = spreadCostPerShareBps;
    return this;
  }

   /**
   * Spread Cost Per Share Bps
   * @return spreadCostPerShareBps
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Spread Cost Per Share Bps")
  @JsonProperty(JSON_PROPERTY_SPREAD_COST_PER_SHARE_BPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getSpreadCostPerShareBps() {
    return spreadCostPerShareBps;
  }


  @JsonProperty(JSON_PROPERTY_SPREAD_COST_PER_SHARE_BPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpreadCostPerShareBps(Double spreadCostPerShareBps) {
    this.spreadCostPerShareBps = spreadCostPerShareBps;
  }


  public CostImpactStandard marketImpact(Double marketImpact) {
    this.marketImpact = marketImpact;
    return this;
  }

   /**
   * Market Impact
   * @return marketImpact
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Market Impact")
  @JsonProperty(JSON_PROPERTY_MARKET_IMPACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMarketImpact() {
    return marketImpact;
  }


  @JsonProperty(JSON_PROPERTY_MARKET_IMPACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarketImpact(Double marketImpact) {
    this.marketImpact = marketImpact;
  }


  public CostImpactStandard confidenceInterval(Double confidenceInterval) {
    this.confidenceInterval = confidenceInterval;
    return this;
  }

   /**
   * Confidence Interval
   * @return confidenceInterval
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Confidence Interval")
  @JsonProperty(JSON_PROPERTY_CONFIDENCE_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getConfidenceInterval() {
    return confidenceInterval;
  }


  @JsonProperty(JSON_PROPERTY_CONFIDENCE_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfidenceInterval(Double confidenceInterval) {
    this.confidenceInterval = confidenceInterval;
  }


  /**
   * Return true if this CostImpactStandard object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CostImpactStandard costImpactStandard = (CostImpactStandard) o;
    return Objects.equals(this.costPerShare, costImpactStandard.costPerShare) &&
        Objects.equals(this.liquidityCostPerShare, costImpactStandard.liquidityCostPerShare) &&
        Objects.equals(this.spreadCostPerShare, costImpactStandard.spreadCostPerShare) &&
        Objects.equals(this.costPerShareBps, costImpactStandard.costPerShareBps) &&
        Objects.equals(this.liquidityCostPerShareBps, costImpactStandard.liquidityCostPerShareBps) &&
        Objects.equals(this.spreadCostPerShareBps, costImpactStandard.spreadCostPerShareBps) &&
        Objects.equals(this.marketImpact, costImpactStandard.marketImpact) &&
        Objects.equals(this.confidenceInterval, costImpactStandard.confidenceInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costPerShare, liquidityCostPerShare, spreadCostPerShare, costPerShareBps, liquidityCostPerShareBps, spreadCostPerShareBps, marketImpact, confidenceInterval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CostImpactStandard {\n");
    sb.append("    costPerShare: ").append(toIndentedString(costPerShare)).append("\n");
    sb.append("    liquidityCostPerShare: ").append(toIndentedString(liquidityCostPerShare)).append("\n");
    sb.append("    spreadCostPerShare: ").append(toIndentedString(spreadCostPerShare)).append("\n");
    sb.append("    costPerShareBps: ").append(toIndentedString(costPerShareBps)).append("\n");
    sb.append("    liquidityCostPerShareBps: ").append(toIndentedString(liquidityCostPerShareBps)).append("\n");
    sb.append("    spreadCostPerShareBps: ").append(toIndentedString(spreadCostPerShareBps)).append("\n");
    sb.append("    marketImpact: ").append(toIndentedString(marketImpact)).append("\n");
    sb.append("    confidenceInterval: ").append(toIndentedString(confidenceInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

