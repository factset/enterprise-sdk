/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.JSON;


/**
 * Volume Analytic object
 */
@ApiModel(description = "Volume Analytic object")
@JsonPropertyOrder({
  VolumeAnalytic.JSON_PROPERTY_DATE_ID,
  VolumeAnalytic.JSON_PROPERTY_BID_SIDE_VOLUME,
  VolumeAnalytic.JSON_PROPERTY_ASK_SIDE_VOLUME,
  VolumeAnalytic.JSON_PROPERTY_BLOCK_VOLUME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class VolumeAnalytic implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DATE_ID = "dateId";
  private String dateId;

  public static final String JSON_PROPERTY_BID_SIDE_VOLUME = "bidSideVolume";
  private Double bidSideVolume;

  public static final String JSON_PROPERTY_ASK_SIDE_VOLUME = "askSideVolume";
  private Double askSideVolume;

  public static final String JSON_PROPERTY_BLOCK_VOLUME = "blockVolume";
  private Double blockVolume;

  public VolumeAnalytic() { 
  }

  public VolumeAnalytic dateId(String dateId) {
    this.dateId = dateId;
    return this;
  }

   /**
   * Date Id
   * @return dateId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Date Id")
  @JsonProperty(JSON_PROPERTY_DATE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDateId() {
    return dateId;
  }


  @JsonProperty(JSON_PROPERTY_DATE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDateId(String dateId) {
    this.dateId = dateId;
  }


  public VolumeAnalytic bidSideVolume(Double bidSideVolume) {
    this.bidSideVolume = bidSideVolume;
    return this;
  }

   /**
   * Bid Side Volume
   * @return bidSideVolume
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Bid Side Volume")
  @JsonProperty(JSON_PROPERTY_BID_SIDE_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getBidSideVolume() {
    return bidSideVolume;
  }


  @JsonProperty(JSON_PROPERTY_BID_SIDE_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBidSideVolume(Double bidSideVolume) {
    this.bidSideVolume = bidSideVolume;
  }


  public VolumeAnalytic askSideVolume(Double askSideVolume) {
    this.askSideVolume = askSideVolume;
    return this;
  }

   /**
   * Ask Side Volume
   * @return askSideVolume
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Ask Side Volume")
  @JsonProperty(JSON_PROPERTY_ASK_SIDE_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getAskSideVolume() {
    return askSideVolume;
  }


  @JsonProperty(JSON_PROPERTY_ASK_SIDE_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAskSideVolume(Double askSideVolume) {
    this.askSideVolume = askSideVolume;
  }


  public VolumeAnalytic blockVolume(Double blockVolume) {
    this.blockVolume = blockVolume;
    return this;
  }

   /**
   * Block Volume
   * @return blockVolume
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Block Volume")
  @JsonProperty(JSON_PROPERTY_BLOCK_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getBlockVolume() {
    return blockVolume;
  }


  @JsonProperty(JSON_PROPERTY_BLOCK_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlockVolume(Double blockVolume) {
    this.blockVolume = blockVolume;
  }


  /**
   * Return true if this VolumeAnalytic object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeAnalytic volumeAnalytic = (VolumeAnalytic) o;
    return Objects.equals(this.dateId, volumeAnalytic.dateId) &&
        Objects.equals(this.bidSideVolume, volumeAnalytic.bidSideVolume) &&
        Objects.equals(this.askSideVolume, volumeAnalytic.askSideVolume) &&
        Objects.equals(this.blockVolume, volumeAnalytic.blockVolume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateId, bidSideVolume, askSideVolume, blockVolume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeAnalytic {\n");
    sb.append("    dateId: ").append(toIndentedString(dateId)).append("\n");
    sb.append("    bidSideVolume: ").append(toIndentedString(bidSideVolume)).append("\n");
    sb.append("    askSideVolume: ").append(toIndentedString(askSideVolume)).append("\n");
    sb.append("    blockVolume: ").append(toIndentedString(blockVolume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

