/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.JSON;


/**
 * Volume Price Metric data
 */
@ApiModel(description = "Volume Price Metric data")
@JsonPropertyOrder({
  VolumePriceMetrics.JSON_PROPERTY_VOLATILITY,
  VolumePriceMetrics.JSON_PROPERTY_VWAP,
  VolumePriceMetrics.JSON_PROPERTY_BIN_SIZE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class VolumePriceMetrics implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_VOLATILITY = "volatility";
  private Double volatility;

  public static final String JSON_PROPERTY_VWAP = "vwap";
  private Double vwap;

  public static final String JSON_PROPERTY_BIN_SIZE = "binSize";
  private Double binSize;

  public VolumePriceMetrics() { 
  }

  public VolumePriceMetrics volatility(Double volatility) {
    this.volatility = volatility;
    return this;
  }

   /**
   * Volatility
   * @return volatility
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Volatility")
  @JsonProperty(JSON_PROPERTY_VOLATILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getVolatility() {
    return volatility;
  }


  @JsonProperty(JSON_PROPERTY_VOLATILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolatility(Double volatility) {
    this.volatility = volatility;
  }


  public VolumePriceMetrics vwap(Double vwap) {
    this.vwap = vwap;
    return this;
  }

   /**
   * VWAP
   * @return vwap
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "VWAP")
  @JsonProperty(JSON_PROPERTY_VWAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getVwap() {
    return vwap;
  }


  @JsonProperty(JSON_PROPERTY_VWAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVwap(Double vwap) {
    this.vwap = vwap;
  }


  public VolumePriceMetrics binSize(Double binSize) {
    this.binSize = binSize;
    return this;
  }

   /**
   * Bin Size
   * @return binSize
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Bin Size")
  @JsonProperty(JSON_PROPERTY_BIN_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getBinSize() {
    return binSize;
  }


  @JsonProperty(JSON_PROPERTY_BIN_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBinSize(Double binSize) {
    this.binSize = binSize;
  }


  /**
   * Return true if this VolumePriceMetrics object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumePriceMetrics volumePriceMetrics = (VolumePriceMetrics) o;
    return Objects.equals(this.volatility, volumePriceMetrics.volatility) &&
        Objects.equals(this.vwap, volumePriceMetrics.vwap) &&
        Objects.equals(this.binSize, volumePriceMetrics.binSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(volatility, vwap, binSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumePriceMetrics {\n");
    sb.append("    volatility: ").append(toIndentedString(volatility)).append("\n");
    sb.append("    vwap: ").append(toIndentedString(vwap)).append("\n");
    sb.append("    binSize: ").append(toIndentedString(binSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

