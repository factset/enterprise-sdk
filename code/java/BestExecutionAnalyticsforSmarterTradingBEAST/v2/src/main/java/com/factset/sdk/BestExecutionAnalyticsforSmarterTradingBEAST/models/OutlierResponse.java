/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models.Outlier;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models.OutlierData;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.JSON;


/**
 * The Outlier Response object
 */
@ApiModel(description = "The Outlier Response object")
@JsonPropertyOrder({
  OutlierResponse.JSON_PROPERTY_RAW_DATA,
  OutlierResponse.JSON_PROPERTY_WINSORIZED_DATA,
  OutlierResponse.JSON_PROPERTY_OUTLIER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class OutlierResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_RAW_DATA = "rawData";
  private OutlierData rawData;

  public static final String JSON_PROPERTY_WINSORIZED_DATA = "winsorizedData";
  private OutlierData winsorizedData;

  public static final String JSON_PROPERTY_OUTLIER = "outlier";
  private java.util.List<Outlier> outlier = null;

  public OutlierResponse() { 
  }

  public OutlierResponse rawData(OutlierData rawData) {
    this.rawData = rawData;
    return this;
  }

   /**
   * Get rawData
   * @return rawData
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RAW_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OutlierData getRawData() {
    return rawData;
  }


  @JsonProperty(JSON_PROPERTY_RAW_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRawData(OutlierData rawData) {
    this.rawData = rawData;
  }


  public OutlierResponse winsorizedData(OutlierData winsorizedData) {
    this.winsorizedData = winsorizedData;
    return this;
  }

   /**
   * Get winsorizedData
   * @return winsorizedData
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_WINSORIZED_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OutlierData getWinsorizedData() {
    return winsorizedData;
  }


  @JsonProperty(JSON_PROPERTY_WINSORIZED_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWinsorizedData(OutlierData winsorizedData) {
    this.winsorizedData = winsorizedData;
  }


  public OutlierResponse outlier(java.util.List<Outlier> outlier) {
    this.outlier = outlier;
    return this;
  }

  public OutlierResponse addOutlierItem(Outlier outlierItem) {
    if (this.outlier == null) {
      this.outlier = new java.util.ArrayList<>();
    }
    this.outlier.add(outlierItem);
    return this;
  }

   /**
   * Outliers
   * @return outlier
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Outliers")
  @JsonProperty(JSON_PROPERTY_OUTLIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<Outlier> getOutlier() {
    return outlier;
  }


  @JsonProperty(JSON_PROPERTY_OUTLIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutlier(java.util.List<Outlier> outlier) {
    this.outlier = outlier;
  }


  /**
   * Return true if this OutlierResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutlierResponse outlierResponse = (OutlierResponse) o;
    return Objects.equals(this.rawData, outlierResponse.rawData) &&
        Objects.equals(this.winsorizedData, outlierResponse.winsorizedData) &&
        Objects.equals(this.outlier, outlierResponse.outlier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rawData, winsorizedData, outlier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutlierResponse {\n");
    sb.append("    rawData: ").append(toIndentedString(rawData)).append("\n");
    sb.append("    winsorizedData: ").append(toIndentedString(winsorizedData)).append("\n");
    sb.append("    outlier: ").append(toIndentedString(outlier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

