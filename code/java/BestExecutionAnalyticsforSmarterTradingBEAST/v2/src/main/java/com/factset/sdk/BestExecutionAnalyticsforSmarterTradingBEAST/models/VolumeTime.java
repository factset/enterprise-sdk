/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.BestExecutionAnalyticsforSmarterTradingBEAST.JSON;


/**
 * Volume Time data
 */
@ApiModel(description = "Volume Time data")
@JsonPropertyOrder({
  VolumeTime.JSON_PROPERTY_BIN_TIME,
  VolumeTime.JSON_PROPERTY_FILLS_VOLUME_PCT,
  VolumeTime.JSON_PROPERTY_TRADES_VOLUME_PCT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class VolumeTime implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_BIN_TIME = "binTime";
  private Long binTime;

  public static final String JSON_PROPERTY_FILLS_VOLUME_PCT = "fillsVolumePct";
  private Double fillsVolumePct;

  public static final String JSON_PROPERTY_TRADES_VOLUME_PCT = "tradesVolumePct";
  private Double tradesVolumePct;

  public VolumeTime() { 
  }

  public VolumeTime binTime(Long binTime) {
    this.binTime = binTime;
    return this;
  }

   /**
   * The time in UTC of the start of the bin. Each bin has a duration of 5 minutes
   * @return binTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The time in UTC of the start of the bin. Each bin has a duration of 5 minutes")
  @JsonProperty(JSON_PROPERTY_BIN_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getBinTime() {
    return binTime;
  }


  @JsonProperty(JSON_PROPERTY_BIN_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBinTime(Long binTime) {
    this.binTime = binTime;
  }


  public VolumeTime fillsVolumePct(Double fillsVolumePct) {
    this.fillsVolumePct = fillsVolumePct;
    return this;
  }

   /**
   * Fills Volume Percentage
   * @return fillsVolumePct
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Fills Volume Percentage")
  @JsonProperty(JSON_PROPERTY_FILLS_VOLUME_PCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getFillsVolumePct() {
    return fillsVolumePct;
  }


  @JsonProperty(JSON_PROPERTY_FILLS_VOLUME_PCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFillsVolumePct(Double fillsVolumePct) {
    this.fillsVolumePct = fillsVolumePct;
  }


  public VolumeTime tradesVolumePct(Double tradesVolumePct) {
    this.tradesVolumePct = tradesVolumePct;
    return this;
  }

   /**
   * Trades Volume Percentage
   * @return tradesVolumePct
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Trades Volume Percentage")
  @JsonProperty(JSON_PROPERTY_TRADES_VOLUME_PCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getTradesVolumePct() {
    return tradesVolumePct;
  }


  @JsonProperty(JSON_PROPERTY_TRADES_VOLUME_PCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTradesVolumePct(Double tradesVolumePct) {
    this.tradesVolumePct = tradesVolumePct;
  }


  /**
   * Return true if this VolumeTime object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeTime volumeTime = (VolumeTime) o;
    return Objects.equals(this.binTime, volumeTime.binTime) &&
        Objects.equals(this.fillsVolumePct, volumeTime.fillsVolumePct) &&
        Objects.equals(this.tradesVolumePct, volumeTime.tradesVolumePct);
  }

  @Override
  public int hashCode() {
    return Objects.hash(binTime, fillsVolumePct, tradesVolumePct);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeTime {\n");
    sb.append("    binTime: ").append(toIndentedString(binTime)).append("\n");
    sb.append("    fillsVolumePct: ").append(toIndentedString(fillsVolumePct)).append("\n");
    sb.append("    tradesVolumePct: ").append(toIndentedString(tradesVolumePct)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

