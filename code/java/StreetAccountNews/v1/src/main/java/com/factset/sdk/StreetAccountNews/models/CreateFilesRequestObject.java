/*
 * StreetAccount News API
 * The StreetAccount News API provides access to FactSet's proprietary news provider, StreetAccount. StreetAccount, is a premium real-time market intelligence news service that delivers comprehensive U.S., Canadian, and European coverage (and expanding Asia coverage). All possible sources for corporate news are scanned and key story facts are highlighted and presented in an easy-to-read format.  **StreetAccount Filters, Headlines, and Views:**  These endpoints allow for the retrieval of news headlines using filters such as Watchlists/Indices/Tickers, Categories (the equivalent of 'Subjects' within the Workstation), Market Topics, Regions, and Sectors.  Headlines can also be retrieved based on saved views within the Workstation.   **StreetAccount Historical Stories:**  These endpoints provide access to historical StreetAccount (SA) news. The API delivers SA stories in XML format based on user-specified date input parameters. Output files are securely available to users through a URL. This API has three endpoints: Create, Status, and Get.  Please note that this API only supports adhoc requests for historical files and does not support real-time files. If real-time push is required, consider using other methods such as SFTP, QNT account, or Azure Storage. Both historical and real-time Street Account news can be delivered via SFTP, QNT account, or Azure Storage.  The files delivered contain both metadata and content body, eliminating the need for multiple requests through multiple services to retrieve all the information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StreetAccountNews.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.StreetAccountNews.models.DateTimeRangeObject;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StreetAccountNews.JSON;


/**
 * create-files request body elements
 */
@ApiModel(description = "create-files request body elements")
@JsonPropertyOrder({
  CreateFilesRequestObject.JSON_PROPERTY_DATE_TIME_RANGE,
  CreateFilesRequestObject.JSON_PROPERTY_IDENTIFIERS,
  CreateFilesRequestObject.JSON_PROPERTY_CATEGORY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class CreateFilesRequestObject implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DATE_TIME_RANGE = "dateTimeRange";
  private DateTimeRangeObject dateTimeRange;

  public static final String JSON_PROPERTY_IDENTIFIERS = "identifiers";
  private java.util.List<String> identifiers = null;

  /**
   * Gets or Sets category
   */
  public enum CategoryEnum {
    COMPANYNEWSALL("companyNewsAll"),
    
    COMPANYNEWSNA("companyNewsNA"),
    
    COMPANYNEWSEU("companyNewsEU"),
    
    COMPANYNEWSAPAC("companyNewsAPAC"),
    
    COMPANYNEWSESG("companyNewsESG"),
    
    MACROTTNALL("macroTtnAll"),
    
    MACROTTNNA("macroTtnNA"),
    
    MACROTTNEU("macroTtnEU"),
    
    MACROTTNAPAC("macroTtnAPAC"),
    
    MACROTTNESG("macroTtnESG"),
    
    ALL("all"),
    
    MACROTTNBANKING("macroTtnBanking"),
    
    MACROTTNCONSUMER("macroTtnConsumer"),
    
    MACROTTNENERGY("macroTtnEnergy"),
    
    MACROTTNHEALTHCARE("macroTtnHealthcare"),
    
    MACROTTNINDUSTRIALS("macroTtnIndustrials"),
    
    MACROTTNINSURANCE("macroTtnInsurance"),
    
    MACROTTNMEDIA("macroTtnMedia"),
    
    MACROTTNMETALS("macroTtnMetals"),
    
    MACROTTNPOWER("macroTtnPower"),
    
    MACROTTNREALESTATE("macroTtnRealEstate"),
    
    MACROTTNTECH("macroTtnTech"),
    
    MACROTTNALLSECTORS("macroTtnAllSectors");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private java.util.List<CategoryEnum> category = new java.util.ArrayList<>();

  public CreateFilesRequestObject() { 
  }

  @JsonCreator
  public CreateFilesRequestObject(
    @JsonProperty(value=JSON_PROPERTY_DATE_TIME_RANGE, required=true) DateTimeRangeObject dateTimeRange, 
    @JsonProperty(value=JSON_PROPERTY_CATEGORY, required=true) java.util.List<CategoryEnum> category
  ) {
    this();
    this.dateTimeRange = dateTimeRange;
    this.category = category;
  }

  public CreateFilesRequestObject dateTimeRange(DateTimeRangeObject dateTimeRange) {
    this.dateTimeRange = dateTimeRange;
    return this;
  }

   /**
   * Get dateTimeRange
   * @return dateTimeRange
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DATE_TIME_RANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DateTimeRangeObject getDateTimeRange() {
    return dateTimeRange;
  }


  @JsonProperty(JSON_PROPERTY_DATE_TIME_RANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDateTimeRange(DateTimeRangeObject dateTimeRange) {
    this.dateTimeRange = dateTimeRange;
  }


  public CreateFilesRequestObject identifiers(java.util.List<String> identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  public CreateFilesRequestObject addIdentifiersItem(String identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new java.util.ArrayList<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

   /**
   * Returns files for specified CUSIP, SEDOL, ISIN, Entity Identifier, Ticker and Regional Ticker. If this parameter is not specified, it will return all the files that covered under specified category.
   * @return identifiers
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"AAPL-US\",\"IBM-US\"]", value = "Returns files for specified CUSIP, SEDOL, ISIN, Entity Identifier, Ticker and Regional Ticker. If this parameter is not specified, it will return all the files that covered under specified category.")
  @JsonProperty(JSON_PROPERTY_IDENTIFIERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getIdentifiers() {
    return identifiers;
  }


  @JsonProperty(JSON_PROPERTY_IDENTIFIERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdentifiers(java.util.List<String> identifiers) {
    this.identifiers = identifiers;
  }


  public CreateFilesRequestObject category(java.util.List<CategoryEnum> category) {
    this.category = category;
    return this;
  }

  public CreateFilesRequestObject addCategoryItem(CategoryEnum categoryItem) {
    this.category.add(categoryItem);
    return this;
  }

   /**
   * Each category corresponds to AT LEAST 1 output file. Depending on the date range provided, each category can produce any number of output files. If multiple files are created for one category, the files themselves have no specific order.   * companyNewsAll &#x3D; Company News - All Regions * companyNewsNA &#x3D; Company News - North America Region * companyNewsEU &#x3D; Company News -EU Region * companyNewsAPAC &#x3D; Company News - APAC Region * companyNewsESG &#x3D; Company News - ESG * macroTtnAll &#x3D; Macro and Today&#39;s Top News - All Regions * macroTtnNA &#x3D; Macro and Today&#39;s Top News - North America Region * macroTtnEU &#x3D; Macro and Today&#39;s Top News - EU Region * macroTtnAPAC &#x3D; Macro and Today&#39;s Top News - APAC  Region * macroTtnESG &#x3D; Macro and Today&#39;s Top News - ESG * all &#x3D; Content bundle includes \&quot;Company News - All Regions\&quot;, \&quot;Company News - ESG\&quot;, \&quot;Macro and Today&#39;s Top News - All Regions\&quot;, and \&quot;Macro and Today&#39;s Top News - ESG\&quot; * macroTtnBanking &#x3D; Macro and Today&#39;s Top News -Banking * macroTtnConsumer &#x3D; Macro and Today&#39;s Top News - Consumer * macroTtnEnergy &#x3D; Macro and Today&#39;s Top News - Energy * macroTtnHealthcare &#x3D; Macro and Today&#39;s Top News - Healthcare * macroTtnIndustrials &#x3D; Macro and Today&#39;s Top News - Industrials * macroTtnInsurance &#x3D; Macro and Today&#39;s Top News - Insurance * macroTtnMedia &#x3D;  Macro and Today&#39;s Top News - Media &amp; Telecom * macroTtnMetals &#x3D; Macro and Today&#39;s Top News - Metals &amp; Mining * macroTtnPower &#x3D; Macro and Today&#39;s Top News - Power &amp; Utilities * macroTtnRealEstate &#x3D; Macro and Today&#39;s Top News - Real Estate * macroTtnTech &#x3D; Macro and Today&#39;s Top News -Technology * macroTtnAllSectors &#x3D; Macro and Today&#39;s Top News - All Sectors
   * @return category
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Each category corresponds to AT LEAST 1 output file. Depending on the date range provided, each category can produce any number of output files. If multiple files are created for one category, the files themselves have no specific order.   * companyNewsAll = Company News - All Regions * companyNewsNA = Company News - North America Region * companyNewsEU = Company News -EU Region * companyNewsAPAC = Company News - APAC Region * companyNewsESG = Company News - ESG * macroTtnAll = Macro and Today's Top News - All Regions * macroTtnNA = Macro and Today's Top News - North America Region * macroTtnEU = Macro and Today's Top News - EU Region * macroTtnAPAC = Macro and Today's Top News - APAC  Region * macroTtnESG = Macro and Today's Top News - ESG * all = Content bundle includes \"Company News - All Regions\", \"Company News - ESG\", \"Macro and Today's Top News - All Regions\", and \"Macro and Today's Top News - ESG\" * macroTtnBanking = Macro and Today's Top News -Banking * macroTtnConsumer = Macro and Today's Top News - Consumer * macroTtnEnergy = Macro and Today's Top News - Energy * macroTtnHealthcare = Macro and Today's Top News - Healthcare * macroTtnIndustrials = Macro and Today's Top News - Industrials * macroTtnInsurance = Macro and Today's Top News - Insurance * macroTtnMedia =  Macro and Today's Top News - Media & Telecom * macroTtnMetals = Macro and Today's Top News - Metals & Mining * macroTtnPower = Macro and Today's Top News - Power & Utilities * macroTtnRealEstate = Macro and Today's Top News - Real Estate * macroTtnTech = Macro and Today's Top News -Technology * macroTtnAllSectors = Macro and Today's Top News - All Sectors")
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.List<CategoryEnum> getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCategory(java.util.List<CategoryEnum> category) {
    this.category = category;
  }


  /**
   * Return true if this createFilesRequestObject object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFilesRequestObject createFilesRequestObject = (CreateFilesRequestObject) o;
    return Objects.equals(this.dateTimeRange, createFilesRequestObject.dateTimeRange) &&
        Objects.equals(this.identifiers, createFilesRequestObject.identifiers) &&
        Objects.equals(this.category, createFilesRequestObject.category);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTimeRange, identifiers, category);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFilesRequestObject {\n");
    sb.append("    dateTimeRange: ").append(toIndentedString(dateTimeRange)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

