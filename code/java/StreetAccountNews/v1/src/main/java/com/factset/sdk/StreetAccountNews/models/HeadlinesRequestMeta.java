/*
 * StreetAccount News API
 * The StreetAccount News API provides access to FactSet's proprietary news provider, StreetAccount. StreetAccount, is a premium real-time market intelligence news service that delivers comprehensive U.S., Canadian, and European coverage (and expanding Asia coverage). All possible sources for corporate news are scanned and key story facts are highlighted and presented in an easy-to-read format.  **StreetAccount Filters, Headlines, and Views:**  These endpoints allow for the retrieval of news headlines using filters such as Watchlists/Indices/Tickers, Categories (the equivalent of 'Subjects' within the Workstation), Market Topics, Regions, and Sectors.  Headlines can also be retrieved based on saved views within the Workstation.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.StreetAccountNews.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.StreetAccountNews.models.HeadlinesRequestMetaPagination;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.StreetAccountNews.JSON;


/**
 * Elements of meta object.
 */
@ApiModel(description = "Elements of meta object.")
@JsonPropertyOrder({
  HeadlinesRequestMeta.JSON_PROPERTY_PAGINATION,
  HeadlinesRequestMeta.JSON_PROPERTY_ATTRIBUTES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class HeadlinesRequestMeta implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PAGINATION = "pagination";
  private HeadlinesRequestMetaPagination pagination;

  /**
   * Gets or Sets attributes
   */
  public enum AttributesEnum {
    HEADLINES("headlines"),
    
    STORYTIME("storyTime"),
    
    ID("id"),
    
    PRIMARYSYMBOLS("primarySymbols"),
    
    SYMBOLS("symbols"),
    
    SUBJECTS("subjects"),
    
    STORYBODY("storyBody"),
    
    REFERENCEURIS("referenceUris"),
    
    URL("url");

    private String value;

    AttributesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AttributesEnum fromValue(String value) {
      for (AttributesEnum b : AttributesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private java.util.List<AttributesEnum> attributes = null;

  public HeadlinesRequestMeta() { 
  }

  public HeadlinesRequestMeta pagination(HeadlinesRequestMetaPagination pagination) {
    this.pagination = pagination;
    return this;
  }

   /**
   * Get pagination
   * @return pagination
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PAGINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HeadlinesRequestMetaPagination getPagination() {
    return pagination;
  }


  @JsonProperty(JSON_PROPERTY_PAGINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPagination(HeadlinesRequestMetaPagination pagination) {
    this.pagination = pagination;
  }


  public HeadlinesRequestMeta attributes(java.util.List<AttributesEnum> attributes) {
    this.attributes = attributes;
    return this;
  }

  public HeadlinesRequestMeta addAttributesItem(AttributesEnum attributesItem) {
    if (this.attributes == null) {
      this.attributes = new java.util.ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * A specific set of attributes to return in the response. If empty or not specified, the response does not omit attributes.
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"headlines\"]", value = "A specific set of attributes to return in the response. If empty or not specified, the response does not omit attributes.")
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<AttributesEnum> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(java.util.List<AttributesEnum> attributes) {
    this.attributes = attributes;
  }


  /**
   * Return true if this HeadlinesRequest_meta object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HeadlinesRequestMeta headlinesRequestMeta = (HeadlinesRequestMeta) o;
    return Objects.equals(this.pagination, headlinesRequestMeta.pagination) &&
        Objects.equals(this.attributes, headlinesRequestMeta.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pagination, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HeadlinesRequestMeta {\n");
    sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

