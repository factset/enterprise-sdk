/*
 * Real-Time Options API
 * The Options API provides detailed information for option contracts (“options”) and option classes. This API presents a consolidated data model that gives access to options data of global options markets such as OPRA, Australia Exchange, Bovespa, CME Group, EUREX, Euronext, Hong Kong, ICE Futures Europe / US, Montreal Exchange, and others.  An option class is a product group of options from the same exchange and with the same underlying. The API includes endpoints to retrieve fundamental data for an option contract such as exercise right, exercise style, strike, maturity, open interest, underlying, etc. as well as risk measures of an option contract such as delta, omega, implied volatility, etc.  Option chains are provided by the /by-class/list endpoint. The list of option contracts for an option class can be filtered by exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The option screener allows you to search for option classes by using text search, root symbol, or ISIN plus additional criteria such as market, underlying, currency, and category. Similar to other screener endpoints in e.g. the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals), the /value-ranges/get endpoint provides the possible values and value ranges plus the number of option contracts for an option class related to the option contracts per criteria such as exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The Options API for Digital Portals seamlessly integrates with the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) that provides real-time, delayed, and end-of-day pricing data and basic security identifier cross-reference. For direct access to price histories for charting, please refer to the [Real-Time Time Series API](https://developer.factset.com/api-catalog/real-time-time-series-api). 
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeOptions.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.RealTimeOptions.models.InlineResponse2004DataCurrency;
import com.factset.sdk.RealTimeOptions.models.InlineResponse2004DataPrices;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeOptions.JSON;


/**
 * InlineResponse2004Data
 */
@JsonPropertyOrder({
  InlineResponse2004Data.JSON_PROPERTY_ID_NOTATION,
  InlineResponse2004Data.JSON_PROPERTY_SOURCE_IDENTIFIER,
  InlineResponse2004Data.JSON_PROPERTY_PRICES,
  InlineResponse2004Data.JSON_PROPERTY_CURRENCY,
  InlineResponse2004Data.JSON_PROPERTY_DELTA,
  InlineResponse2004Data.JSON_PROPERTY_OMEGA,
  InlineResponse2004Data.JSON_PROPERTY_THETA_ONE_WEEK,
  InlineResponse2004Data.JSON_PROPERTY_VEGA,
  InlineResponse2004Data.JSON_PROPERTY_GAMMA,
  InlineResponse2004Data.JSON_PROPERTY_RHO,
  InlineResponse2004Data.JSON_PROPERTY_BREAK_EVEN,
  InlineResponse2004Data.JSON_PROPERTY_THEORETICAL_VALUE,
  InlineResponse2004Data.JSON_PROPERTY_IMPLIED_VOLATILITY,
  InlineResponse2004Data.JSON_PROPERTY_INTRINSIC_VALUE,
  InlineResponse2004Data.JSON_PROPERTY_LEVERAGE,
  InlineResponse2004Data.JSON_PROPERTY_MONEYNESS,
  InlineResponse2004Data.JSON_PROPERTY_PARITY,
  InlineResponse2004Data.JSON_PROPERTY_TIME_VALUE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse2004Data implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID_NOTATION = "idNotation";
  private JsonNullable<String> idNotation = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SOURCE_IDENTIFIER = "sourceIdentifier";
  private JsonNullable<String> sourceIdentifier = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PRICES = "prices";
  private InlineResponse2004DataPrices prices;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private InlineResponse2004DataCurrency currency;

  public static final String JSON_PROPERTY_DELTA = "delta";
  private JsonNullable<BigDecimal> delta = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_OMEGA = "omega";
  private JsonNullable<BigDecimal> omega = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_THETA_ONE_WEEK = "thetaOneWeek";
  private JsonNullable<BigDecimal> thetaOneWeek = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_VEGA = "vega";
  private JsonNullable<BigDecimal> vega = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_GAMMA = "gamma";
  private JsonNullable<BigDecimal> gamma = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_RHO = "rho";
  private JsonNullable<BigDecimal> rho = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_BREAK_EVEN = "breakEven";
  private JsonNullable<BigDecimal> breakEven = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_THEORETICAL_VALUE = "theoreticalValue";
  private JsonNullable<BigDecimal> theoreticalValue = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_IMPLIED_VOLATILITY = "impliedVolatility";
  private JsonNullable<BigDecimal> impliedVolatility = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_INTRINSIC_VALUE = "intrinsicValue";
  private JsonNullable<BigDecimal> intrinsicValue = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_LEVERAGE = "leverage";
  private JsonNullable<BigDecimal> leverage = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_MONEYNESS = "moneyness";
  private JsonNullable<BigDecimal> moneyness = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_PARITY = "parity";
  private JsonNullable<BigDecimal> parity = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_TIME_VALUE = "timeValue";
  private JsonNullable<BigDecimal> timeValue = JsonNullable.<BigDecimal>undefined();

  public InlineResponse2004Data() { 
  }

  public InlineResponse2004Data idNotation(String idNotation) {
    this.idNotation = JsonNullable.<String>of(idNotation);
    return this;
  }

   /**
   * Identifier of the notation.
   * @return idNotation
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1532562", value = "Identifier of the notation.")
  @JsonIgnore

  public String getIdNotation() {
        return idNotation.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID_NOTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getIdNotation_JsonNullable() {
    return idNotation;
  }
  
  @JsonProperty(JSON_PROPERTY_ID_NOTATION)
  public void setIdNotation_JsonNullable(JsonNullable<String> idNotation) {
    this.idNotation = idNotation;
  }

  public void setIdNotation(String idNotation) {
    this.idNotation = JsonNullable.<String>of(idNotation);
  }


  public InlineResponse2004Data sourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = JsonNullable.<String>of(sourceIdentifier);
    return this;
  }

   /**
   * Identifier used in the request.
   * @return sourceIdentifier
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FDS-US", value = "Identifier used in the request.")
  @JsonIgnore

  public String getSourceIdentifier() {
        return sourceIdentifier.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SOURCE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSourceIdentifier_JsonNullable() {
    return sourceIdentifier;
  }
  
  @JsonProperty(JSON_PROPERTY_SOURCE_IDENTIFIER)
  public void setSourceIdentifier_JsonNullable(JsonNullable<String> sourceIdentifier) {
    this.sourceIdentifier = sourceIdentifier;
  }

  public void setSourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = JsonNullable.<String>of(sourceIdentifier);
  }


  public InlineResponse2004Data prices(InlineResponse2004DataPrices prices) {
    this.prices = prices;
    return this;
  }

   /**
   * Get prices
   * @return prices
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PRICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2004DataPrices getPrices() {
    return prices;
  }


  @JsonProperty(JSON_PROPERTY_PRICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrices(InlineResponse2004DataPrices prices) {
    this.prices = prices;
  }


  public InlineResponse2004Data currency(InlineResponse2004DataCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2004DataCurrency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(InlineResponse2004DataCurrency currency) {
    this.currency = currency;
  }


  public InlineResponse2004Data delta(BigDecimal delta) {
    this.delta = JsonNullable.<BigDecimal>of(delta);
    return this;
  }

   /**
   * Ask-based delta. It represents the first partial derivative of the function             determining the option&#39;s theoretical price with respect to the underlying level, evaluated             at the underlying level. Delta indicates the ratio of the absolute change of the             price of an option for an indefinitely small absolute change in the underlying             level, thus it represents the price sensitivity of the option relative to changes in             the underlying level.             
   * @return delta
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "3.03", value = "Ask-based delta. It represents the first partial derivative of the function             determining the option's theoretical price with respect to the underlying level, evaluated             at the underlying level. Delta indicates the ratio of the absolute change of the             price of an option for an indefinitely small absolute change in the underlying             level, thus it represents the price sensitivity of the option relative to changes in             the underlying level.             ")
  @JsonIgnore

  public BigDecimal getDelta() {
        return delta.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DELTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getDelta_JsonNullable() {
    return delta;
  }
  
  @JsonProperty(JSON_PROPERTY_DELTA)
  public void setDelta_JsonNullable(JsonNullable<BigDecimal> delta) {
    this.delta = delta;
  }

  public void setDelta(BigDecimal delta) {
    this.delta = JsonNullable.<BigDecimal>of(delta);
  }


  public InlineResponse2004Data omega(BigDecimal omega) {
    this.omega = JsonNullable.<BigDecimal>of(omega);
    return this;
  }

   /**
   * Ask-based omega. It represents delta (see attribute &#x60;delta&#x60;) multiplied with theleverage (see attribute &#x60;leverage&#x60;), both calculated based on the ask price of theoption. Omega indicates the elasticity of the option&#39;s price regarding the underlyinglevel.
   * @return omega
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "3.1415", value = "Ask-based omega. It represents delta (see attribute `delta`) multiplied with theleverage (see attribute `leverage`), both calculated based on the ask price of theoption. Omega indicates the elasticity of the option's price regarding the underlyinglevel.")
  @JsonIgnore

  public BigDecimal getOmega() {
        return omega.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_OMEGA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getOmega_JsonNullable() {
    return omega;
  }
  
  @JsonProperty(JSON_PROPERTY_OMEGA)
  public void setOmega_JsonNullable(JsonNullable<BigDecimal> omega) {
    this.omega = omega;
  }

  public void setOmega(BigDecimal omega) {
    this.omega = JsonNullable.<BigDecimal>of(omega);
  }


  public InlineResponse2004Data thetaOneWeek(BigDecimal thetaOneWeek) {
    this.thetaOneWeek = JsonNullable.<BigDecimal>of(thetaOneWeek);
    return this;
  }

   /**
   * Ask-based weekly theta. It represents the first partial derivative of the             function determining the option&#39;s theoretical price with respect to the residual term,             evaluated at the current residual term and multiplied by 7/365. Weekly theta indicates             the absolute change (decrease) of the price of an option for a reduction of the             residual term by one week (seven calendar days), thus it represents the price             sensitivity of the option relative to changes in the residual term.             
   * @return thetaOneWeek
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "3.03", value = "Ask-based weekly theta. It represents the first partial derivative of the             function determining the option's theoretical price with respect to the residual term,             evaluated at the current residual term and multiplied by 7/365. Weekly theta indicates             the absolute change (decrease) of the price of an option for a reduction of the             residual term by one week (seven calendar days), thus it represents the price             sensitivity of the option relative to changes in the residual term.             ")
  @JsonIgnore

  public BigDecimal getThetaOneWeek() {
        return thetaOneWeek.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_THETA_ONE_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getThetaOneWeek_JsonNullable() {
    return thetaOneWeek;
  }
  
  @JsonProperty(JSON_PROPERTY_THETA_ONE_WEEK)
  public void setThetaOneWeek_JsonNullable(JsonNullable<BigDecimal> thetaOneWeek) {
    this.thetaOneWeek = thetaOneWeek;
  }

  public void setThetaOneWeek(BigDecimal thetaOneWeek) {
    this.thetaOneWeek = JsonNullable.<BigDecimal>of(thetaOneWeek);
  }


  public InlineResponse2004Data vega(BigDecimal vega) {
    this.vega = JsonNullable.<BigDecimal>of(vega);
    return this;
  }

   /**
   * Ask-based vega. It represents the first partial derivative of the function             determining the option&#39;s theoretical price with respect to the implied volatility,             evaluated at the current implied volatility. Vega indicates the ratio of the absolute             change of the price of an option for an absolute change of the implied volatility,             thus it represents the price sensitivity of the option relative to changes in the             implied volatility.             
   * @return vega
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1.01", value = "Ask-based vega. It represents the first partial derivative of the function             determining the option's theoretical price with respect to the implied volatility,             evaluated at the current implied volatility. Vega indicates the ratio of the absolute             change of the price of an option for an absolute change of the implied volatility,             thus it represents the price sensitivity of the option relative to changes in the             implied volatility.             ")
  @JsonIgnore

  public BigDecimal getVega() {
        return vega.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VEGA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getVega_JsonNullable() {
    return vega;
  }
  
  @JsonProperty(JSON_PROPERTY_VEGA)
  public void setVega_JsonNullable(JsonNullable<BigDecimal> vega) {
    this.vega = vega;
  }

  public void setVega(BigDecimal vega) {
    this.vega = JsonNullable.<BigDecimal>of(vega);
  }


  public InlineResponse2004Data gamma(BigDecimal gamma) {
    this.gamma = JsonNullable.<BigDecimal>of(gamma);
    return this;
  }

   /**
   * Ask-based gamma. It represents the second partial derivative of the function determining the option&#39;s theoretical price with respect to the underlying level, evaluated at the current underlying level. Gamma indicates the rate of change of the option&#39;s delta (see attribute &#x60;delta&#x60;) with respect to the underlying level.
   * @return gamma
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1.01", value = "Ask-based gamma. It represents the second partial derivative of the function determining the option's theoretical price with respect to the underlying level, evaluated at the current underlying level. Gamma indicates the rate of change of the option's delta (see attribute `delta`) with respect to the underlying level.")
  @JsonIgnore

  public BigDecimal getGamma() {
        return gamma.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GAMMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getGamma_JsonNullable() {
    return gamma;
  }
  
  @JsonProperty(JSON_PROPERTY_GAMMA)
  public void setGamma_JsonNullable(JsonNullable<BigDecimal> gamma) {
    this.gamma = gamma;
  }

  public void setGamma(BigDecimal gamma) {
    this.gamma = JsonNullable.<BigDecimal>of(gamma);
  }


  public InlineResponse2004Data rho(BigDecimal rho) {
    this.rho = JsonNullable.<BigDecimal>of(rho);
    return this;
  }

   /**
   * Ask-based rho. It represents the first partial derivative of the function              determining the option&#39;s theoretical price with respect to the risk-free interest rate,              evaluated at the current risk-free interest rate. Rho indicates the ratio of the absolute              change of the price of an option for an absolute change of the risk-free interest rate,              thus it represents the price sensitivity of the option relative to changes in the risk-free              interest rate.The key figure is shown in one basis point change.
   * @return rho
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "5.05", value = "Ask-based rho. It represents the first partial derivative of the function              determining the option's theoretical price with respect to the risk-free interest rate,              evaluated at the current risk-free interest rate. Rho indicates the ratio of the absolute              change of the price of an option for an absolute change of the risk-free interest rate,              thus it represents the price sensitivity of the option relative to changes in the risk-free              interest rate.The key figure is shown in one basis point change.")
  @JsonIgnore

  public BigDecimal getRho() {
        return rho.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RHO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getRho_JsonNullable() {
    return rho;
  }
  
  @JsonProperty(JSON_PROPERTY_RHO)
  public void setRho_JsonNullable(JsonNullable<BigDecimal> rho) {
    this.rho = rho;
  }

  public void setRho(BigDecimal rho) {
    this.rho = JsonNullable.<BigDecimal>of(rho);
  }


  public InlineResponse2004Data breakEven(BigDecimal breakEven) {
    this.breakEven = JsonNullable.<BigDecimal>of(breakEven);
    return this;
  }

   /**
   * Break even point based on the ask price. It represents the underlying level that has to be reached at maturity, such that no loss or profit occurs for the holder of the option. For the value unit, see attribute &#x60;currency&#x60;.
   * @return breakEven
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "3.1415", value = "Break even point based on the ask price. It represents the underlying level that has to be reached at maturity, such that no loss or profit occurs for the holder of the option. For the value unit, see attribute `currency`.")
  @JsonIgnore

  public BigDecimal getBreakEven() {
        return breakEven.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BREAK_EVEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getBreakEven_JsonNullable() {
    return breakEven;
  }
  
  @JsonProperty(JSON_PROPERTY_BREAK_EVEN)
  public void setBreakEven_JsonNullable(JsonNullable<BigDecimal> breakEven) {
    this.breakEven = breakEven;
  }

  public void setBreakEven(BigDecimal breakEven) {
    this.breakEven = JsonNullable.<BigDecimal>of(breakEven);
  }


  public InlineResponse2004Data theoreticalValue(BigDecimal theoreticalValue) {
    this.theoreticalValue = JsonNullable.<BigDecimal>of(theoreticalValue);
    return this;
  }

   /**
   * Estimate for the value of an option according to the option&#39;s pricing model (such as Black-Scholes). The parameters for the pricing model (e.g. interest rate, dividend yield, currency cross-rate etc.) use the current market values. For the historic volatility of the underlying, the time span refers to the remaining term to maturity of the option. The historic volatility that is closest to the remaining term is chosen. For example, for a remaining term of 14 months, the 1-year volatility is used, whereas for 19 months, the 2-year volatility. Note that the theoretical value does not depend on the option&#39;s price, but the value is in the option&#39;s value unit, see attribute &#x60;currency&#x60;.
   * @return theoreticalValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "3.1415", value = "Estimate for the value of an option according to the option's pricing model (such as Black-Scholes). The parameters for the pricing model (e.g. interest rate, dividend yield, currency cross-rate etc.) use the current market values. For the historic volatility of the underlying, the time span refers to the remaining term to maturity of the option. The historic volatility that is closest to the remaining term is chosen. For example, for a remaining term of 14 months, the 1-year volatility is used, whereas for 19 months, the 2-year volatility. Note that the theoretical value does not depend on the option's price, but the value is in the option's value unit, see attribute `currency`.")
  @JsonIgnore

  public BigDecimal getTheoreticalValue() {
        return theoreticalValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_THEORETICAL_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTheoreticalValue_JsonNullable() {
    return theoreticalValue;
  }
  
  @JsonProperty(JSON_PROPERTY_THEORETICAL_VALUE)
  public void setTheoreticalValue_JsonNullable(JsonNullable<BigDecimal> theoreticalValue) {
    this.theoreticalValue = theoreticalValue;
  }

  public void setTheoreticalValue(BigDecimal theoreticalValue) {
    this.theoreticalValue = JsonNullable.<BigDecimal>of(theoreticalValue);
  }


  public InlineResponse2004Data impliedVolatility(BigDecimal impliedVolatility) {
    this.impliedVolatility = JsonNullable.<BigDecimal>of(impliedVolatility);
    return this;
  }

   /**
   * Ask-based implied volatility. It represents the volatility of the underlying             that justifies the ask price of the option, when used as a parameter in the             option&#39;s pricing model (such as Black-Scholes). Its value is a result of the pricing             process, thus it represents the annual volatility of the underlying expected by the             market participants until maturity of the option.             
   * @return impliedVolatility
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.3", value = "Ask-based implied volatility. It represents the volatility of the underlying             that justifies the ask price of the option, when used as a parameter in the             option's pricing model (such as Black-Scholes). Its value is a result of the pricing             process, thus it represents the annual volatility of the underlying expected by the             market participants until maturity of the option.             ")
  @JsonIgnore

  public BigDecimal getImpliedVolatility() {
        return impliedVolatility.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IMPLIED_VOLATILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getImpliedVolatility_JsonNullable() {
    return impliedVolatility;
  }
  
  @JsonProperty(JSON_PROPERTY_IMPLIED_VOLATILITY)
  public void setImpliedVolatility_JsonNullable(JsonNullable<BigDecimal> impliedVolatility) {
    this.impliedVolatility = impliedVolatility;
  }

  public void setImpliedVolatility(BigDecimal impliedVolatility) {
    this.impliedVolatility = JsonNullable.<BigDecimal>of(impliedVolatility);
  }


  public InlineResponse2004Data intrinsicValue(BigDecimal intrinsicValue) {
    this.intrinsicValue = JsonNullable.<BigDecimal>of(intrinsicValue);
    return this;
  }

   /**
   * Intrinsic value. It represents the difference between the underlying level and             the strike of the option, adjusted for the currency cross rate. If the difference             is negative, the intrinsic value is given as 0. The intrinsic value represents             the theoretical profit from an immediate exercise of the option.             
   * @return intrinsicValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "3.03", value = "Intrinsic value. It represents the difference between the underlying level and             the strike of the option, adjusted for the currency cross rate. If the difference             is negative, the intrinsic value is given as 0. The intrinsic value represents             the theoretical profit from an immediate exercise of the option.             ")
  @JsonIgnore

  public BigDecimal getIntrinsicValue() {
        return intrinsicValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INTRINSIC_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getIntrinsicValue_JsonNullable() {
    return intrinsicValue;
  }
  
  @JsonProperty(JSON_PROPERTY_INTRINSIC_VALUE)
  public void setIntrinsicValue_JsonNullable(JsonNullable<BigDecimal> intrinsicValue) {
    this.intrinsicValue = intrinsicValue;
  }

  public void setIntrinsicValue(BigDecimal intrinsicValue) {
    this.intrinsicValue = JsonNullable.<BigDecimal>of(intrinsicValue);
  }


  public InlineResponse2004Data leverage(BigDecimal leverage) {
    this.leverage = JsonNullable.<BigDecimal>of(leverage);
    return this;
  }

   /**
   * Ask-based leverage. It represents the ratio of the underlying level to the ask             price of the option, adjusted for the currency cross rate.             
   * @return leverage
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "3.03", value = "Ask-based leverage. It represents the ratio of the underlying level to the ask             price of the option, adjusted for the currency cross rate.             ")
  @JsonIgnore

  public BigDecimal getLeverage() {
        return leverage.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LEVERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getLeverage_JsonNullable() {
    return leverage;
  }
  
  @JsonProperty(JSON_PROPERTY_LEVERAGE)
  public void setLeverage_JsonNullable(JsonNullable<BigDecimal> leverage) {
    this.leverage = leverage;
  }

  public void setLeverage(BigDecimal leverage) {
    this.leverage = JsonNullable.<BigDecimal>of(leverage);
  }


  public InlineResponse2004Data moneyness(BigDecimal moneyness) {
    this.moneyness = JsonNullable.<BigDecimal>of(moneyness);
    return this;
  }

   /**
   * Ratio of the current underlying level to the strike of an option. For calls,             it is current underlying level divided by the strike. For puts, it is strike             divided by the current underlying level. It measures the degree to which an option is             in-the-money (moneyness &gt; 1) or out-of-the-money (moneyness &lt; 1). If moneyness &#x3D; 1, the             option is at-the-money.             
   * @return moneyness
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2.02", value = "Ratio of the current underlying level to the strike of an option. For calls,             it is current underlying level divided by the strike. For puts, it is strike             divided by the current underlying level. It measures the degree to which an option is             in-the-money (moneyness > 1) or out-of-the-money (moneyness < 1). If moneyness = 1, the             option is at-the-money.             ")
  @JsonIgnore

  public BigDecimal getMoneyness() {
        return moneyness.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MONEYNESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getMoneyness_JsonNullable() {
    return moneyness;
  }
  
  @JsonProperty(JSON_PROPERTY_MONEYNESS)
  public void setMoneyness_JsonNullable(JsonNullable<BigDecimal> moneyness) {
    this.moneyness = moneyness;
  }

  public void setMoneyness(BigDecimal moneyness) {
    this.moneyness = JsonNullable.<BigDecimal>of(moneyness);
  }


  public InlineResponse2004Data parity(BigDecimal parity) {
    this.parity = JsonNullable.<BigDecimal>of(parity);
    return this;
  }

   /**
   * Parity. It represents the difference between the underlying level and the             strike of the option, adjusted for the currency cross rate. Negative values are             possible. It is the gain or loss that would result from the immediate exercise of an             already present option and a simultaneously executed compensation transaction on the             spot markets.             
   * @return parity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2.02", value = "Parity. It represents the difference between the underlying level and the             strike of the option, adjusted for the currency cross rate. Negative values are             possible. It is the gain or loss that would result from the immediate exercise of an             already present option and a simultaneously executed compensation transaction on the             spot markets.             ")
  @JsonIgnore

  public BigDecimal getParity() {
        return parity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getParity_JsonNullable() {
    return parity;
  }
  
  @JsonProperty(JSON_PROPERTY_PARITY)
  public void setParity_JsonNullable(JsonNullable<BigDecimal> parity) {
    this.parity = parity;
  }

  public void setParity(BigDecimal parity) {
    this.parity = JsonNullable.<BigDecimal>of(parity);
  }


  public InlineResponse2004Data timeValue(BigDecimal timeValue) {
    this.timeValue = JsonNullable.<BigDecimal>of(timeValue);
    return this;
  }

   /**
   * Ask-based time value. It represents the difference between the ask price ofthe option and its intrinsic value (see attribute &#x60;intrinsicValue&#x60;).
   * @return timeValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1.01", value = "Ask-based time value. It represents the difference between the ask price ofthe option and its intrinsic value (see attribute `intrinsicValue`).")
  @JsonIgnore

  public BigDecimal getTimeValue() {
        return timeValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TIME_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTimeValue_JsonNullable() {
    return timeValue;
  }
  
  @JsonProperty(JSON_PROPERTY_TIME_VALUE)
  public void setTimeValue_JsonNullable(JsonNullable<BigDecimal> timeValue) {
    this.timeValue = timeValue;
  }

  public void setTimeValue(BigDecimal timeValue) {
    this.timeValue = JsonNullable.<BigDecimal>of(timeValue);
  }


  /**
   * Return true if this inline_response_200_4_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2004Data inlineResponse2004Data = (InlineResponse2004Data) o;
    return equalsNullable(this.idNotation, inlineResponse2004Data.idNotation) &&
        equalsNullable(this.sourceIdentifier, inlineResponse2004Data.sourceIdentifier) &&
        Objects.equals(this.prices, inlineResponse2004Data.prices) &&
        Objects.equals(this.currency, inlineResponse2004Data.currency) &&
        equalsNullable(this.delta, inlineResponse2004Data.delta) &&
        equalsNullable(this.omega, inlineResponse2004Data.omega) &&
        equalsNullable(this.thetaOneWeek, inlineResponse2004Data.thetaOneWeek) &&
        equalsNullable(this.vega, inlineResponse2004Data.vega) &&
        equalsNullable(this.gamma, inlineResponse2004Data.gamma) &&
        equalsNullable(this.rho, inlineResponse2004Data.rho) &&
        equalsNullable(this.breakEven, inlineResponse2004Data.breakEven) &&
        equalsNullable(this.theoreticalValue, inlineResponse2004Data.theoreticalValue) &&
        equalsNullable(this.impliedVolatility, inlineResponse2004Data.impliedVolatility) &&
        equalsNullable(this.intrinsicValue, inlineResponse2004Data.intrinsicValue) &&
        equalsNullable(this.leverage, inlineResponse2004Data.leverage) &&
        equalsNullable(this.moneyness, inlineResponse2004Data.moneyness) &&
        equalsNullable(this.parity, inlineResponse2004Data.parity) &&
        equalsNullable(this.timeValue, inlineResponse2004Data.timeValue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(idNotation), hashCodeNullable(sourceIdentifier), prices, currency, hashCodeNullable(delta), hashCodeNullable(omega), hashCodeNullable(thetaOneWeek), hashCodeNullable(vega), hashCodeNullable(gamma), hashCodeNullable(rho), hashCodeNullable(breakEven), hashCodeNullable(theoreticalValue), hashCodeNullable(impliedVolatility), hashCodeNullable(intrinsicValue), hashCodeNullable(leverage), hashCodeNullable(moneyness), hashCodeNullable(parity), hashCodeNullable(timeValue));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2004Data {\n");
    sb.append("    idNotation: ").append(toIndentedString(idNotation)).append("\n");
    sb.append("    sourceIdentifier: ").append(toIndentedString(sourceIdentifier)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    delta: ").append(toIndentedString(delta)).append("\n");
    sb.append("    omega: ").append(toIndentedString(omega)).append("\n");
    sb.append("    thetaOneWeek: ").append(toIndentedString(thetaOneWeek)).append("\n");
    sb.append("    vega: ").append(toIndentedString(vega)).append("\n");
    sb.append("    gamma: ").append(toIndentedString(gamma)).append("\n");
    sb.append("    rho: ").append(toIndentedString(rho)).append("\n");
    sb.append("    breakEven: ").append(toIndentedString(breakEven)).append("\n");
    sb.append("    theoreticalValue: ").append(toIndentedString(theoreticalValue)).append("\n");
    sb.append("    impliedVolatility: ").append(toIndentedString(impliedVolatility)).append("\n");
    sb.append("    intrinsicValue: ").append(toIndentedString(intrinsicValue)).append("\n");
    sb.append("    leverage: ").append(toIndentedString(leverage)).append("\n");
    sb.append("    moneyness: ").append(toIndentedString(moneyness)).append("\n");
    sb.append("    parity: ").append(toIndentedString(parity)).append("\n");
    sb.append("    timeValue: ").append(toIndentedString(timeValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

