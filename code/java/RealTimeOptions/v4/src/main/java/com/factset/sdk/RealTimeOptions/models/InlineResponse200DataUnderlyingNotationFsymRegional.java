/*
 * Real-Time Options API
 * The Options API provides detailed information for option contracts (“options”) and option classes. This API presents a consolidated data model that gives access to options data of global options markets such as OPRA, Australia Exchange, Bovespa, CME Group, EUREX, Euronext, Hong Kong, ICE Futures Europe / US, Montreal Exchange, and others.  An option class is a product group of options from the same exchange and with the same underlying. The API includes endpoints to retrieve fundamental data for an option contract such as exercise right, exercise style, strike, maturity, open interest, underlying, etc. as well as risk measures of an option contract such as delta, omega, implied volatility, etc.  Option chains are provided by the /by-class/list endpoint. The list of option contracts for an option class can be filtered by exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The option screener allows you to search for option classes by using text search, root symbol, or ISIN plus additional criteria such as market, underlying, currency, and category. Similar to other screener endpoints in e.g. the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals), the /value-ranges/get endpoint provides the possible values and value ranges plus the number of option contracts for an option class related to the option contracts per criteria such as exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The Options API for Digital Portals seamlessly integrates with the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) that provides real-time, delayed, and end-of-day pricing data and basic security identifier cross-reference. For direct access to price histories for charting, please refer to the [Real-Time Time Series API](https://developer.factset.com/api-catalog/real-time-time-series-api). 
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeOptions.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeOptions.JSON;


/**
 * Regional-level identifiers.
 */
@ApiModel(description = "Regional-level identifiers.")
@JsonPropertyOrder({
  InlineResponse200DataUnderlyingNotationFsymRegional.JSON_PROPERTY_PERMANENT_IDENTIFIER,
  InlineResponse200DataUnderlyingNotationFsymRegional.JSON_PROPERTY_TICKER_REGION,
  InlineResponse200DataUnderlyingNotationFsymRegional.JSON_PROPERTY_IS_PRIMARY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse200DataUnderlyingNotationFsymRegional implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PERMANENT_IDENTIFIER = "permanentIdentifier";
  private JsonNullable<String> permanentIdentifier = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TICKER_REGION = "tickerRegion";
  private JsonNullable<String> tickerRegion = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IS_PRIMARY = "isPrimary";
  private JsonNullable<Boolean> isPrimary = JsonNullable.<Boolean>undefined();

  public InlineResponse200DataUnderlyingNotationFsymRegional() { 
  }

  public InlineResponse200DataUnderlyingNotationFsymRegional permanentIdentifier(String permanentIdentifier) {
    this.permanentIdentifier = JsonNullable.<String>of(permanentIdentifier);
    return this;
  }

   /**
   * FactSet Permanent Identifier for a set of one or more notations of the same region with the same value unit. The format is six alpha-numeric characters, excluding vowels, with an R suffix (XXXXXX-R).
   * @return permanentIdentifier
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "DJC0PL-S", value = "FactSet Permanent Identifier for a set of one or more notations of the same region with the same value unit. The format is six alpha-numeric characters, excluding vowels, with an R suffix (XXXXXX-R).")
  @JsonIgnore

  public String getPermanentIdentifier() {
        return permanentIdentifier.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PERMANENT_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPermanentIdentifier_JsonNullable() {
    return permanentIdentifier;
  }
  
  @JsonProperty(JSON_PROPERTY_PERMANENT_IDENTIFIER)
  public void setPermanentIdentifier_JsonNullable(JsonNullable<String> permanentIdentifier) {
    this.permanentIdentifier = permanentIdentifier;
  }

  public void setPermanentIdentifier(String permanentIdentifier) {
    this.permanentIdentifier = JsonNullable.<String>of(permanentIdentifier);
  }


  public InlineResponse200DataUnderlyingNotationFsymRegional tickerRegion(String tickerRegion) {
    this.tickerRegion = JsonNullable.<String>of(tickerRegion);
    return this;
  }

   /**
   * FactSet regional symbol of the notation, consisting of the ticker and the two-character code of the country or region where the listing is traded (example: DAI-DE).
   * @return tickerRegion
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FDS-US", value = "FactSet regional symbol of the notation, consisting of the ticker and the two-character code of the country or region where the listing is traded (example: DAI-DE).")
  @JsonIgnore

  public String getTickerRegion() {
        return tickerRegion.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TICKER_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTickerRegion_JsonNullable() {
    return tickerRegion;
  }
  
  @JsonProperty(JSON_PROPERTY_TICKER_REGION)
  public void setTickerRegion_JsonNullable(JsonNullable<String> tickerRegion) {
    this.tickerRegion = tickerRegion;
  }

  public void setTickerRegion(String tickerRegion) {
    this.tickerRegion = JsonNullable.<String>of(tickerRegion);
  }


  public InlineResponse200DataUnderlyingNotationFsymRegional isPrimary(Boolean isPrimary) {
    this.isPrimary = JsonNullable.<Boolean>of(isPrimary);
    return this;
  }

   /**
   * Indicates whether the notation is in the primary region of the security (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return isPrimary
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates whether the notation is in the primary region of the security (`true`) or not (`false`).")
  @JsonIgnore

  public Boolean getIsPrimary() {
        return isPrimary.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_PRIMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsPrimary_JsonNullable() {
    return isPrimary;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_PRIMARY)
  public void setIsPrimary_JsonNullable(JsonNullable<Boolean> isPrimary) {
    this.isPrimary = isPrimary;
  }

  public void setIsPrimary(Boolean isPrimary) {
    this.isPrimary = JsonNullable.<Boolean>of(isPrimary);
  }


  /**
   * Return true if this inline_response_200_data_underlying_notation_fsym_regional object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200DataUnderlyingNotationFsymRegional inlineResponse200DataUnderlyingNotationFsymRegional = (InlineResponse200DataUnderlyingNotationFsymRegional) o;
    return equalsNullable(this.permanentIdentifier, inlineResponse200DataUnderlyingNotationFsymRegional.permanentIdentifier) &&
        equalsNullable(this.tickerRegion, inlineResponse200DataUnderlyingNotationFsymRegional.tickerRegion) &&
        equalsNullable(this.isPrimary, inlineResponse200DataUnderlyingNotationFsymRegional.isPrimary);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(permanentIdentifier), hashCodeNullable(tickerRegion), hashCodeNullable(isPrimary));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200DataUnderlyingNotationFsymRegional {\n");
    sb.append("    permanentIdentifier: ").append(toIndentedString(permanentIdentifier)).append("\n");
    sb.append("    tickerRegion: ").append(toIndentedString(tickerRegion)).append("\n");
    sb.append("    isPrimary: ").append(toIndentedString(isPrimary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

