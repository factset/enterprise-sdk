/*
 * Real-Time Options API
 * The Options API provides detailed information for option contracts (“options”) and option classes. This API presents a consolidated data model that gives access to options data of global options markets such as OPRA, Australia Exchange, Bovespa, CME Group, EUREX, Euronext, Hong Kong, ICE Futures Europe / US, Montreal Exchange, and others.  An option class is a product group of options from the same exchange and with the same underlying. The API includes endpoints to retrieve fundamental data for an option contract such as exercise right, exercise style, strike, maturity, open interest, underlying, etc. as well as risk measures of an option contract such as delta, omega, implied volatility, etc.  Option chains are provided by the /by-class/list endpoint. The list of option contracts for an option class can be filtered by exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The option screener allows you to search for option classes by using text search, root symbol, or ISIN plus additional criteria such as market, underlying, currency, and category. Similar to other screener endpoints in e.g. the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals), the /value-ranges/get endpoint provides the possible values and value ranges plus the number of option contracts for an option class related to the option contracts per criteria such as exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The Options API for Digital Portals seamlessly integrates with the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) that provides real-time, delayed, and end-of-day pricing data and basic security identifier cross-reference. For direct access to price histories for charting, please refer to the [Real-Time Time Series API](https://developer.factset.com/api-catalog/real-time-time-series-api). 
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeOptions.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.RealTimeOptions.models.GetOptionGetDataTypeItems;
import com.factset.sdk.RealTimeOptions.models.InlineResponse200DataClass;
import com.factset.sdk.RealTimeOptions.models.InlineResponse200DataExercise;
import com.factset.sdk.RealTimeOptions.models.InlineResponse200DataLifeCycle;
import com.factset.sdk.RealTimeOptions.models.InlineResponse200DataMarket;
import com.factset.sdk.RealTimeOptions.models.InlineResponse200DataOpenInterest;
import com.factset.sdk.RealTimeOptions.models.InlineResponse200DataSettlement;
import com.factset.sdk.RealTimeOptions.models.InlineResponse200DataStrikePrice;
import com.factset.sdk.RealTimeOptions.models.InlineResponse200DataUnderlying;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeOptions.JSON;


/**
 * Set of basic data for the option contract.
 */
@ApiModel(description = "Set of basic data for the option contract.")
@JsonPropertyOrder({
  InlineResponse200Data.JSON_PROPERTY_ID_INSTRUMENT,
  InlineResponse200Data.JSON_PROPERTY_SOURCE_IDENTIFIER,
  InlineResponse200Data.JSON_PROPERTY_ISIN,
  InlineResponse200Data.JSON_PROPERTY_NORMALIZED_SYMBOL,
  InlineResponse200Data.JSON_PROPERTY_NAME,
  InlineResponse200Data.JSON_PROPERTY_TYPE,
  InlineResponse200Data.JSON_PROPERTY_MARKET,
  InlineResponse200Data.JSON_PROPERTY_PROPERTY_CLASS,
  InlineResponse200Data.JSON_PROPERTY_EXERCISE,
  InlineResponse200Data.JSON_PROPERTY_STRIKE_PRICE,
  InlineResponse200Data.JSON_PROPERTY_LIFE_CYCLE,
  InlineResponse200Data.JSON_PROPERTY_CONTRACT_SIZE,
  InlineResponse200Data.JSON_PROPERTY_OPEN_INTEREST,
  InlineResponse200Data.JSON_PROPERTY_TICK_SIZE,
  InlineResponse200Data.JSON_PROPERTY_SETTLEMENT,
  InlineResponse200Data.JSON_PROPERTY_UNDERLYING
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse200Data implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID_INSTRUMENT = "idInstrument";
  private JsonNullable<String> idInstrument = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SOURCE_IDENTIFIER = "sourceIdentifier";
  private JsonNullable<String> sourceIdentifier = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ISIN = "isin";
  private JsonNullable<String> isin = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_NORMALIZED_SYMBOL = "normalizedSymbol";
  private JsonNullable<String> normalizedSymbol = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TYPE = "type";
  private java.util.Set<GetOptionGetDataTypeItems> type = null;

  public static final String JSON_PROPERTY_MARKET = "market";
  private InlineResponse200DataMarket market;

  public static final String JSON_PROPERTY_PROPERTY_CLASS = "class";
  private InlineResponse200DataClass propertyClass;

  public static final String JSON_PROPERTY_EXERCISE = "exercise";
  private InlineResponse200DataExercise exercise;

  public static final String JSON_PROPERTY_STRIKE_PRICE = "strikePrice";
  private InlineResponse200DataStrikePrice strikePrice;

  public static final String JSON_PROPERTY_LIFE_CYCLE = "lifeCycle";
  private InlineResponse200DataLifeCycle lifeCycle;

  public static final String JSON_PROPERTY_CONTRACT_SIZE = "contractSize";
  private JsonNullable<BigDecimal> contractSize = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_OPEN_INTEREST = "openInterest";
  private InlineResponse200DataOpenInterest openInterest;

  public static final String JSON_PROPERTY_TICK_SIZE = "tickSize";
  private JsonNullable<BigDecimal> tickSize = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_SETTLEMENT = "settlement";
  private InlineResponse200DataSettlement settlement;

  public static final String JSON_PROPERTY_UNDERLYING = "underlying";
  private InlineResponse200DataUnderlying underlying;

  public InlineResponse200Data() { 
  }

  public InlineResponse200Data idInstrument(String idInstrument) {
    this.idInstrument = JsonNullable.<String>of(idInstrument);
    return this;
  }

   /**
   * Identifier of the instrument.
   * @return idInstrument
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "209485", value = "Identifier of the instrument.")
  @JsonIgnore

  public String getIdInstrument() {
        return idInstrument.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getIdInstrument_JsonNullable() {
    return idInstrument;
  }
  
  @JsonProperty(JSON_PROPERTY_ID_INSTRUMENT)
  public void setIdInstrument_JsonNullable(JsonNullable<String> idInstrument) {
    this.idInstrument = idInstrument;
  }

  public void setIdInstrument(String idInstrument) {
    this.idInstrument = JsonNullable.<String>of(idInstrument);
  }


  public InlineResponse200Data sourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = JsonNullable.<String>of(sourceIdentifier);
    return this;
  }

   /**
   * Identifier used in the request.
   * @return sourceIdentifier
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FDS-US", value = "Identifier used in the request.")
  @JsonIgnore

  public String getSourceIdentifier() {
        return sourceIdentifier.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SOURCE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSourceIdentifier_JsonNullable() {
    return sourceIdentifier;
  }
  
  @JsonProperty(JSON_PROPERTY_SOURCE_IDENTIFIER)
  public void setSourceIdentifier_JsonNullable(JsonNullable<String> sourceIdentifier) {
    this.sourceIdentifier = sourceIdentifier;
  }

  public void setSourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = JsonNullable.<String>of(sourceIdentifier);
  }


  public InlineResponse200Data isin(String isin) {
    this.isin = JsonNullable.<String>of(isin);
    return this;
  }

   /**
   * International Securities Identification Number of the option.
   * @return isin
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "US3030751057", value = "International Securities Identification Number of the option.")
  @JsonIgnore

  public String getIsin() {
        return isin.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ISIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getIsin_JsonNullable() {
    return isin;
  }
  
  @JsonProperty(JSON_PROPERTY_ISIN)
  public void setIsin_JsonNullable(JsonNullable<String> isin) {
    this.isin = isin;
  }

  public void setIsin(String isin) {
    this.isin = JsonNullable.<String>of(isin);
  }


  public InlineResponse200Data normalizedSymbol(String normalizedSymbol) {
    this.normalizedSymbol = JsonNullable.<String>of(normalizedSymbol);
    return this;
  }

   /**
   * Symbol of the option, as normalized by FactSet.
   * @return normalizedSymbol
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Lorem ipsum", value = "Symbol of the option, as normalized by FactSet.")
  @JsonIgnore

  public String getNormalizedSymbol() {
        return normalizedSymbol.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NORMALIZED_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getNormalizedSymbol_JsonNullable() {
    return normalizedSymbol;
  }
  
  @JsonProperty(JSON_PROPERTY_NORMALIZED_SYMBOL)
  public void setNormalizedSymbol_JsonNullable(JsonNullable<String> normalizedSymbol) {
    this.normalizedSymbol = normalizedSymbol;
  }

  public void setNormalizedSymbol(String normalizedSymbol) {
    this.normalizedSymbol = JsonNullable.<String>of(normalizedSymbol);
  }


  public InlineResponse200Data name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

   /**
   * Name of the option.
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Lorem ipsum", value = "Name of the option.")
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public InlineResponse200Data type(java.util.Set<GetOptionGetDataTypeItems> type) {
    this.type = type;
    return this;
  }

  public InlineResponse200Data addTypeItem(GetOptionGetDataTypeItems typeItem) {
    if (this.type == null) {
      this.type = new java.util.LinkedHashSet<>();
    }
    this.type.add(typeItem);
    return this;
  }

   /**
   * Instrument type as defined by FactSet. Instrument types are arranged in a hierarchy, with level 1 representing the most coarse granularity and further levels successively refining the granularity (see MDG category system 18).
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Instrument type as defined by FactSet. Instrument types are arranged in a hierarchy, with level 1 representing the most coarse granularity and further levels successively refining the granularity (see MDG category system 18).")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.Set<GetOptionGetDataTypeItems> getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(java.util.Set<GetOptionGetDataTypeItems> type) {
    this.type = type;
  }


  public InlineResponse200Data market(InlineResponse200DataMarket market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataMarket getMarket() {
    return market;
  }


  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarket(InlineResponse200DataMarket market) {
    this.market = market;
  }


  public InlineResponse200Data propertyClass(InlineResponse200DataClass propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * Get propertyClass
   * @return propertyClass
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataClass getPropertyClass() {
    return propertyClass;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropertyClass(InlineResponse200DataClass propertyClass) {
    this.propertyClass = propertyClass;
  }


  public InlineResponse200Data exercise(InlineResponse200DataExercise exercise) {
    this.exercise = exercise;
    return this;
  }

   /**
   * Get exercise
   * @return exercise
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataExercise getExercise() {
    return exercise;
  }


  @JsonProperty(JSON_PROPERTY_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExercise(InlineResponse200DataExercise exercise) {
    this.exercise = exercise;
  }


  public InlineResponse200Data strikePrice(InlineResponse200DataStrikePrice strikePrice) {
    this.strikePrice = strikePrice;
    return this;
  }

   /**
   * Get strikePrice
   * @return strikePrice
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STRIKE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataStrikePrice getStrikePrice() {
    return strikePrice;
  }


  @JsonProperty(JSON_PROPERTY_STRIKE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStrikePrice(InlineResponse200DataStrikePrice strikePrice) {
    this.strikePrice = strikePrice;
  }


  public InlineResponse200Data lifeCycle(InlineResponse200DataLifeCycle lifeCycle) {
    this.lifeCycle = lifeCycle;
    return this;
  }

   /**
   * Get lifeCycle
   * @return lifeCycle
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LIFE_CYCLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataLifeCycle getLifeCycle() {
    return lifeCycle;
  }


  @JsonProperty(JSON_PROPERTY_LIFE_CYCLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLifeCycle(InlineResponse200DataLifeCycle lifeCycle) {
    this.lifeCycle = lifeCycle;
  }


  public InlineResponse200Data contractSize(BigDecimal contractSize) {
    this.contractSize = JsonNullable.<BigDecimal>of(contractSize);
    return this;
  }

   /**
   * Quantity of the underlying asset represented by an option. For fixed income and index options it represents the value of one unit of the underlying instrument. For an underlying whose price unit is index points, this is the currency value of the contract per index point. For underlyings whose price unit is percent, this is the nominal value of the underlying.
   * @return contractSize
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1.01", value = "Quantity of the underlying asset represented by an option. For fixed income and index options it represents the value of one unit of the underlying instrument. For an underlying whose price unit is index points, this is the currency value of the contract per index point. For underlyings whose price unit is percent, this is the nominal value of the underlying.")
  @JsonIgnore

  public BigDecimal getContractSize() {
        return contractSize.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONTRACT_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getContractSize_JsonNullable() {
    return contractSize;
  }
  
  @JsonProperty(JSON_PROPERTY_CONTRACT_SIZE)
  public void setContractSize_JsonNullable(JsonNullable<BigDecimal> contractSize) {
    this.contractSize = contractSize;
  }

  public void setContractSize(BigDecimal contractSize) {
    this.contractSize = JsonNullable.<BigDecimal>of(contractSize);
  }


  public InlineResponse200Data openInterest(InlineResponse200DataOpenInterest openInterest) {
    this.openInterest = openInterest;
    return this;
  }

   /**
   * Get openInterest
   * @return openInterest
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OPEN_INTEREST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataOpenInterest getOpenInterest() {
    return openInterest;
  }


  @JsonProperty(JSON_PROPERTY_OPEN_INTEREST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOpenInterest(InlineResponse200DataOpenInterest openInterest) {
    this.openInterest = openInterest;
  }


  public InlineResponse200Data tickSize(BigDecimal tickSize) {
    this.tickSize = JsonNullable.<BigDecimal>of(tickSize);
    return this;
  }

   /**
   * The minimum price movement of the option.
   * @return tickSize
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "3.1415", value = "The minimum price movement of the option.")
  @JsonIgnore

  public BigDecimal getTickSize() {
        return tickSize.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TICK_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTickSize_JsonNullable() {
    return tickSize;
  }
  
  @JsonProperty(JSON_PROPERTY_TICK_SIZE)
  public void setTickSize_JsonNullable(JsonNullable<BigDecimal> tickSize) {
    this.tickSize = tickSize;
  }

  public void setTickSize(BigDecimal tickSize) {
    this.tickSize = JsonNullable.<BigDecimal>of(tickSize);
  }


  public InlineResponse200Data settlement(InlineResponse200DataSettlement settlement) {
    this.settlement = settlement;
    return this;
  }

   /**
   * Get settlement
   * @return settlement
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SETTLEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataSettlement getSettlement() {
    return settlement;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettlement(InlineResponse200DataSettlement settlement) {
    this.settlement = settlement;
  }


  public InlineResponse200Data underlying(InlineResponse200DataUnderlying underlying) {
    this.underlying = underlying;
    return this;
  }

   /**
   * Get underlying
   * @return underlying
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_UNDERLYING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataUnderlying getUnderlying() {
    return underlying;
  }


  @JsonProperty(JSON_PROPERTY_UNDERLYING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnderlying(InlineResponse200DataUnderlying underlying) {
    this.underlying = underlying;
  }


  /**
   * Return true if this inline_response_200_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200Data inlineResponse200Data = (InlineResponse200Data) o;
    return equalsNullable(this.idInstrument, inlineResponse200Data.idInstrument) &&
        equalsNullable(this.sourceIdentifier, inlineResponse200Data.sourceIdentifier) &&
        equalsNullable(this.isin, inlineResponse200Data.isin) &&
        equalsNullable(this.normalizedSymbol, inlineResponse200Data.normalizedSymbol) &&
        equalsNullable(this.name, inlineResponse200Data.name) &&
        Objects.equals(this.type, inlineResponse200Data.type) &&
        Objects.equals(this.market, inlineResponse200Data.market) &&
        Objects.equals(this.propertyClass, inlineResponse200Data.propertyClass) &&
        Objects.equals(this.exercise, inlineResponse200Data.exercise) &&
        Objects.equals(this.strikePrice, inlineResponse200Data.strikePrice) &&
        Objects.equals(this.lifeCycle, inlineResponse200Data.lifeCycle) &&
        equalsNullable(this.contractSize, inlineResponse200Data.contractSize) &&
        Objects.equals(this.openInterest, inlineResponse200Data.openInterest) &&
        equalsNullable(this.tickSize, inlineResponse200Data.tickSize) &&
        Objects.equals(this.settlement, inlineResponse200Data.settlement) &&
        Objects.equals(this.underlying, inlineResponse200Data.underlying);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(idInstrument), hashCodeNullable(sourceIdentifier), hashCodeNullable(isin), hashCodeNullable(normalizedSymbol), hashCodeNullable(name), type, market, propertyClass, exercise, strikePrice, lifeCycle, hashCodeNullable(contractSize), openInterest, hashCodeNullable(tickSize), settlement, underlying);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200Data {\n");
    sb.append("    idInstrument: ").append(toIndentedString(idInstrument)).append("\n");
    sb.append("    sourceIdentifier: ").append(toIndentedString(sourceIdentifier)).append("\n");
    sb.append("    isin: ").append(toIndentedString(isin)).append("\n");
    sb.append("    normalizedSymbol: ").append(toIndentedString(normalizedSymbol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    exercise: ").append(toIndentedString(exercise)).append("\n");
    sb.append("    strikePrice: ").append(toIndentedString(strikePrice)).append("\n");
    sb.append("    lifeCycle: ").append(toIndentedString(lifeCycle)).append("\n");
    sb.append("    contractSize: ").append(toIndentedString(contractSize)).append("\n");
    sb.append("    openInterest: ").append(toIndentedString(openInterest)).append("\n");
    sb.append("    tickSize: ").append(toIndentedString(tickSize)).append("\n");
    sb.append("    settlement: ").append(toIndentedString(settlement)).append("\n");
    sb.append("    underlying: ").append(toIndentedString(underlying)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

