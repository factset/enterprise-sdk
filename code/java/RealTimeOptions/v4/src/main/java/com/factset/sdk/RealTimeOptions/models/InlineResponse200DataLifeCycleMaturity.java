/*
 * Real-Time Options API
 * The Options API provides detailed information for option contracts (“options”) and option classes. This API presents a consolidated data model that gives access to options data of global options markets such as OPRA, Australia Exchange, Bovespa, CME Group, EUREX, Euronext, Hong Kong, ICE Futures Europe / US, Montreal Exchange, and others.  An option class is a product group of options from the same exchange and with the same underlying. The API includes endpoints to retrieve fundamental data for an option contract such as exercise right, exercise style, strike, maturity, open interest, underlying, etc. as well as risk measures of an option contract such as delta, omega, implied volatility, etc.  Option chains are provided by the /by-class/list endpoint. The list of option contracts for an option class can be filtered by exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The option screener allows you to search for option classes by using text search, root symbol, or ISIN plus additional criteria such as market, underlying, currency, and category. Similar to other screener endpoints in e.g. the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals), the /value-ranges/get endpoint provides the possible values and value ranges plus the number of option contracts for an option class related to the option contracts per criteria such as exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The Options API for Digital Portals seamlessly integrates with the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) that provides real-time, delayed, and end-of-day pricing data and basic security identifier cross-reference. For direct access to price histories for charting, please refer to the [Real-Time Time Series API](https://developer.factset.com/api-catalog/real-time-time-series-api). 
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeOptions.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeOptions.JSON;


/**
 * Maturity data.
 */
@ApiModel(description = "Maturity data.")
@JsonPropertyOrder({
  InlineResponse200DataLifeCycleMaturity.JSON_PROPERTY_DATE,
  InlineResponse200DataLifeCycleMaturity.JSON_PROPERTY_INTERVAL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse200DataLifeCycleMaturity implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DATE = "date";
  private JsonNullable<LocalDate> date = JsonNullable.<LocalDate>undefined();

  /**
   * Maturity interval of the option. | Value | Description | | --- | --- | | monthly | Monthly | | weekly | Weekly | | daily | Daily | | mixed | Mixed |  
   */
  public enum IntervalEnum {
    MONTHLY("monthly"),
    
    WEEKLY("weekly"),
    
    DAILY("daily"),
    
    MIXED("mixed");

    private String value;

    IntervalEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IntervalEnum fromValue(String value) {
      for (IntervalEnum b : IntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_INTERVAL = "interval";
  private JsonNullable<IntervalEnum> interval = JsonNullable.<IntervalEnum>undefined();

  public InlineResponse200DataLifeCycleMaturity() { 
  }

  public InlineResponse200DataLifeCycleMaturity date(LocalDate date) {
    this.date = JsonNullable.<LocalDate>of(date);
    return this;
  }

   /**
   * Date of the option&#39;s maturity.
   * @return date
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Mon Jan 01 00:00:00 UTC 2024", value = "Date of the option's maturity.")
  @JsonIgnore

  public LocalDate getDate() {
        return date.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getDate_JsonNullable() {
    return date;
  }
  
  @JsonProperty(JSON_PROPERTY_DATE)
  public void setDate_JsonNullable(JsonNullable<LocalDate> date) {
    this.date = date;
  }

  public void setDate(LocalDate date) {
    this.date = JsonNullable.<LocalDate>of(date);
  }


  public InlineResponse200DataLifeCycleMaturity interval(IntervalEnum interval) {
    this.interval = JsonNullable.<IntervalEnum>of(interval);
    return this;
  }

   /**
   * Maturity interval of the option. | Value | Description | | --- | --- | | monthly | Monthly | | weekly | Weekly | | daily | Daily | | mixed | Mixed |  
   * @return interval
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "mixed", value = "Maturity interval of the option. | Value | Description | | --- | --- | | monthly | Monthly | | weekly | Weekly | | daily | Daily | | mixed | Mixed |  ")
  @JsonIgnore

  public IntervalEnum getInterval() {
        return interval.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<IntervalEnum> getInterval_JsonNullable() {
    return interval;
  }
  
  @JsonProperty(JSON_PROPERTY_INTERVAL)
  public void setInterval_JsonNullable(JsonNullable<IntervalEnum> interval) {
    this.interval = interval;
  }

  public void setInterval(IntervalEnum interval) {
    this.interval = JsonNullable.<IntervalEnum>of(interval);
  }


  /**
   * Return true if this inline_response_200_data_lifeCycle_maturity object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200DataLifeCycleMaturity inlineResponse200DataLifeCycleMaturity = (InlineResponse200DataLifeCycleMaturity) o;
    return equalsNullable(this.date, inlineResponse200DataLifeCycleMaturity.date) &&
        equalsNullable(this.interval, inlineResponse200DataLifeCycleMaturity.interval);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(date), hashCodeNullable(interval));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200DataLifeCycleMaturity {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

