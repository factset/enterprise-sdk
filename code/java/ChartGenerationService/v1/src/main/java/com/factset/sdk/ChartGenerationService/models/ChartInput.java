/*
 * Chart Generation Service
 * This is a service for generating charts in a node environment that were created using web charting and get back images in form of `PNGs` and `JPEGs` as response.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ChartGenerationService.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ChartGenerationService.JSON;


/**
 * ChartInput
 */
@JsonPropertyOrder({
  ChartInput.JSON_PROPERTY_IN,
  ChartInput.JSON_PROPERTY_NAME,
  ChartInput.JSON_PROPERTY_REQUIRED,
  ChartInput.JSON_PROPERTY_DESCRIPTION,
  ChartInput.JSON_PROPERTY_TYPE,
  ChartInput.JSON_PROPERTY_EXAMPLE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ChartInput implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * How to apply the additional input. Would be often via query parameter which can be appended to the request with &amp;
   */
  public enum InEnum {
    QUERY("query"),
    
    PARAM("param");

    private String value;

    InEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InEnum fromValue(String value) {
      for (InEnum b : InEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IN = "in";
  private InEnum in;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_REQUIRED = "required";
  private Boolean required;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_EXAMPLE = "example";
  private String example;

  public ChartInput() { 
  }

  public ChartInput in(InEnum in) {
    this.in = in;
    return this;
  }

   /**
   * How to apply the additional input. Would be often via query parameter which can be appended to the request with &amp;
   * @return in
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "How to apply the additional input. Would be often via query parameter which can be appended to the request with &")
  @JsonProperty(JSON_PROPERTY_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InEnum getIn() {
    return in;
  }


  @JsonProperty(JSON_PROPERTY_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIn(InEnum in) {
    this.in = in;
  }


  public ChartInput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the parameter
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "tz", value = "The name of the parameter")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ChartInput required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Whether or not the parameter is required to be specified to get the chart image.
   * @return required
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether or not the parameter is required to be specified to get the chart image.")
  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequired() {
    return required;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequired(Boolean required) {
    this.required = required;
  }


  public ChartInput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A short description of the input and its use
   * @return description
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Can be used to specify timezone of the chart", value = "A short description of the input and its use")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public ChartInput type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of value expected for the input
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "string", value = "The type of value expected for the input")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public ChartInput example(String example) {
    this.example = example;
    return this;
  }

   /**
   * An example value for the input
   * @return example
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "America/New_York", value = "An example value for the input")
  @JsonProperty(JSON_PROPERTY_EXAMPLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExample() {
    return example;
  }


  @JsonProperty(JSON_PROPERTY_EXAMPLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExample(String example) {
    this.example = example;
  }


  /**
   * Return true if this ChartInput object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartInput chartInput = (ChartInput) o;
    return Objects.equals(this.in, chartInput.in) &&
        Objects.equals(this.name, chartInput.name) &&
        Objects.equals(this.required, chartInput.required) &&
        Objects.equals(this.description, chartInput.description) &&
        Objects.equals(this.type, chartInput.type) &&
        Objects.equals(this.example, chartInput.example);
  }

  @Override
  public int hashCode() {
    return Objects.hash(in, name, required, description, type, example);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartInput {\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    example: ").append(toIndentedString(example)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

