/*
 * Signals API
 * Collection of endpoints for providing Signal Events, Definitions and Metadata
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Signals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.Signals.models.Contract;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Signals.JSON;


/**
 * SignalDefinitionData
 */
@JsonPropertyOrder({
  SignalDefinitionData.JSON_PROPERTY_SIGNAL_ID,
  SignalDefinitionData.JSON_PROPERTY_THEME,
  SignalDefinitionData.JSON_PROPERTY_CATEGORIES,
  SignalDefinitionData.JSON_PROPERTY_CONTRACT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class SignalDefinitionData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SIGNAL_ID = "signalId";
  private String signalId;

  public static final String JSON_PROPERTY_THEME = "theme";
  private String theme;

  public static final String JSON_PROPERTY_CATEGORIES = "categories";
  private java.util.List<String> categories = new java.util.ArrayList<>();

  public static final String JSON_PROPERTY_CONTRACT = "contract";
  private Contract contract;

  public SignalDefinitionData() { 
  }

  @JsonCreator
  public SignalDefinitionData(
    @JsonProperty(value=JSON_PROPERTY_SIGNAL_ID, required=true) String signalId, 
    @JsonProperty(value=JSON_PROPERTY_THEME, required=true) String theme, 
    @JsonProperty(value=JSON_PROPERTY_CATEGORIES, required=true) java.util.List<String> categories, 
    @JsonProperty(value=JSON_PROPERTY_CONTRACT, required=true) Contract contract
  ) {
    this();
    this.signalId = signalId;
    this.theme = theme;
    this.categories = categories;
    this.contract = contract;
  }

  public SignalDefinitionData signalId(String signalId) {
    this.signalId = signalId;
    return this;
  }

   /**
   * Get signalId
   * @return signalId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SIGNAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSignalId() {
    return signalId;
  }


  @JsonProperty(JSON_PROPERTY_SIGNAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSignalId(String signalId) {
    this.signalId = signalId;
  }


  public SignalDefinitionData theme(String theme) {
    this.theme = theme;
    return this;
  }

   /**
   * Get theme
   * @return theme
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_THEME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTheme() {
    return theme;
  }


  @JsonProperty(JSON_PROPERTY_THEME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTheme(String theme) {
    this.theme = theme;
  }


  public SignalDefinitionData categories(java.util.List<String> categories) {
    this.categories = categories;
    return this;
  }

  public SignalDefinitionData addCategoriesItem(String categoriesItem) {
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.List<String> getCategories() {
    return categories;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCategories(java.util.List<String> categories) {
    this.categories = categories;
  }


  public SignalDefinitionData contract(Contract contract) {
    this.contract = contract;
    return this;
  }

   /**
   * Get contract
   * @return contract
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONTRACT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Contract getContract() {
    return contract;
  }


  @JsonProperty(JSON_PROPERTY_CONTRACT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContract(Contract contract) {
    this.contract = contract;
  }


  /**
   * Return true if this signalDefinition_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignalDefinitionData signalDefinitionData = (SignalDefinitionData) o;
    return Objects.equals(this.signalId, signalDefinitionData.signalId) &&
        Objects.equals(this.theme, signalDefinitionData.theme) &&
        Objects.equals(this.categories, signalDefinitionData.categories) &&
        Objects.equals(this.contract, signalDefinitionData.contract);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signalId, theme, categories, contract);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignalDefinitionData {\n");
    sb.append("    signalId: ").append(toIndentedString(signalId)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

