/*
 * Signals API
 * Collection of endpoints for providing Signal Events, Definitions and Metadata
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Signals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Signals.JSON;


/**
 * ScreenMetaPartial
 */
@JsonPropertyOrder({
  ScreenMetaPartial.JSON_PROPERTY_IS_PARTIAL,
  ScreenMetaPartial.JSON_PROPERTY_REASON
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ScreenMetaPartial implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_IS_PARTIAL = "isPartial";
  private Boolean isPartial;

  public static final String JSON_PROPERTY_REASON = "reason";
  private String reason;

  public ScreenMetaPartial() { 
  }

  @JsonCreator
  public ScreenMetaPartial(
    @JsonProperty(value=JSON_PROPERTY_IS_PARTIAL, required=true) Boolean isPartial, 
    @JsonProperty(value=JSON_PROPERTY_REASON, required=true) String reason
  ) {
    this();
    this.isPartial = isPartial;
    this.reason = reason;
  }

  public ScreenMetaPartial isPartial(Boolean isPartial) {
    this.isPartial = isPartial;
    return this;
  }

   /**
   * Indicates that some of the matching entities are missing in the response.
   * @return isPartial
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates that some of the matching entities are missing in the response.")
  @JsonProperty(JSON_PROPERTY_IS_PARTIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsPartial() {
    return isPartial;
  }


  @JsonProperty(JSON_PROPERTY_IS_PARTIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsPartial(Boolean isPartial) {
    this.isPartial = isPartial;
  }


  public ScreenMetaPartial reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Describes why the response was sent with an incomplete list of entities.
   * @return reason
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Describes why the response was sent with an incomplete list of entities.")
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReason() {
    return reason;
  }


  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReason(String reason) {
    this.reason = reason;
  }


  /**
   * Return true if this screenMeta_partial object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenMetaPartial screenMetaPartial = (ScreenMetaPartial) o;
    return Objects.equals(this.isPartial, screenMetaPartial.isPartial) &&
        Objects.equals(this.reason, screenMetaPartial.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isPartial, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenMetaPartial {\n");
    sb.append("    isPartial: ").append(toIndentedString(isPartial)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

