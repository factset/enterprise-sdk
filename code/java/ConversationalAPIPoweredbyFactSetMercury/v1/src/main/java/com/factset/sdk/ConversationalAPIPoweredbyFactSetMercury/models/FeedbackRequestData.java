/*
 * Conversational API Powered by FactSet Mercury
 * ### OVERVIEW  The FactSet Conversational API allows clients to integrate core FactSet Mercury capabilities in chatbot experiences.  The Conversational API is powered by FactSet Mercury, FactSet's Generative Artificial Intelligence (GenAI) large language model. The Conversational API provides a variety of content and capabilities, including FactSet’s Federation layer (FactSet’s core GenAI-based technology), as well as more specific content and functionality tailored for financial services workflows.  The Conversational API provides answers to hundreds of natural language search queries and allows you to easily ask questions related to companies and markets research.  Some example supported prompts:  - Nintendo's highest closing stock price over the last 3 months - Has Yelp issued any guidance? - What are the key trends impacting costs for DaVita?  **For Information on Access to and Content Available via the Conversational API**  Please see the [Conversational API Online Assistant Page](https://my.apps.factset.com/oa/pages/23209). Here you can find instructions on how to set up access to the Conversational API, and the full list of content available.  #### Conversational API Consumer Workflow  The Conversational API is an asynchronous API that utilizes status polling to inform the consumer when a query response is complete. Please see the technical OpenAPI documentation below for specific information regarding consuming the API programmatically.  At a high level, the API consumer workflow is as follows:  1) Send a natural language query to the `/query` endpoint and start the response generation process. 2) Poll the status of the response generation process using the `/status` endpoint. 3) Once the status indicates a ready response, retrieve it using the `/result` endpoint.  - If your response contains a file ID, such as for an Excel chart or a [FactSet ActiveGraph](https://my.apps.factset.com/oa/pages/20355), retrieve it using the file ID at the `/download/file` endpoint. - To provide feedback on your response and help the Conversational API better serve you content, we encourage you to use the `/feedback` endpoint.   ##### Current Limitations  - \"Natural language\" in this documentation refers to modern conversational English. Support for other languages is currently unavailable. - The Conversational API is currently limited to accept 10 natural language queries per minute and 200 per hour for an individual consumer. If you anticipate your needs to be greater than these limits, please reach out to FactSet Support.  #### FAQ   **How can I receive updates on changes to the Conversational API?** - Please subscribe to our FactSet Notify by clicking \"Subscribe to notifications\" in the upper right above the API overview. You will receive email updates when any updates occur to the API. **Why am I receiving a 403 error with a valid API key?** - Please ensure that your current public IP is within the IP range allocated to the API key you are using to authenticate API requests. You can update your API key's allowable IP range via the [FactSet Developer Portal API Authentication page](https://developer.factset.com/api-authentication). If this does not resolve the issue, please reach out to FactSet Support to ensure you are appropriately authorized to access the Conversational API. 
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ConversationalAPIPoweredbyFactSetMercury.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ConversationalAPIPoweredbyFactSetMercury.JSON;


/**
 * Data object
 */
@ApiModel(description = "Data object")
@JsonPropertyOrder({
  FeedbackRequestData.JSON_PROPERTY_RESPONSE_ID,
  FeedbackRequestData.JSON_PROPERTY_HELPFUL,
  FeedbackRequestData.JSON_PROPERTY_COMMENT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FeedbackRequestData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_RESPONSE_ID = "responseId";
  private java.util.UUID responseId;

  public static final String JSON_PROPERTY_HELPFUL = "helpful";
  private Boolean helpful;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private JsonNullable<String> comment = JsonNullable.<String>undefined();

  public FeedbackRequestData() { 
  }

  @JsonCreator
  public FeedbackRequestData(
    @JsonProperty(value=JSON_PROPERTY_RESPONSE_ID, required=true) java.util.UUID responseId, 
    @JsonProperty(value=JSON_PROPERTY_HELPFUL, required=true) Boolean helpful
  ) {
    this();
    this.responseId = responseId;
    this.helpful = helpful;
  }

  public FeedbackRequestData responseId(java.util.UUID responseId) {
    this.responseId = responseId;
    return this;
  }

   /**
   * Response ID received from the &#x60;/result&#x60; endpoint, representing the response for which you are providing feedback.
   * @return responseId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Response ID received from the `/result` endpoint, representing the response for which you are providing feedback.")
  @JsonProperty(JSON_PROPERTY_RESPONSE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.UUID getResponseId() {
    return responseId;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResponseId(java.util.UUID responseId) {
    this.responseId = responseId;
  }


  public FeedbackRequestData helpful(Boolean helpful) {
    this.helpful = helpful;
    return this;
  }

   /**
   * Boolean representing whether the response was helpful (true) or not helpful (false). If the response left out any requested information, please mark as not helpful.
   * @return helpful
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Boolean representing whether the response was helpful (true) or not helpful (false). If the response left out any requested information, please mark as not helpful.")
  @JsonProperty(JSON_PROPERTY_HELPFUL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHelpful() {
    return helpful;
  }


  @JsonProperty(JSON_PROPERTY_HELPFUL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHelpful(Boolean helpful) {
    this.helpful = helpful;
  }


  public FeedbackRequestData comment(String comment) {
    this.comment = JsonNullable.<String>of(comment);
    return this;
  }

   /**
   * Optional field for additional feedback. If you would like to provide natural language feedback, include comments here. Comments are limited to 4000 characters; if you need to provide more feedback, please reach out to your FactSet Support Team representative. 
   * @return comment
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Optional field for additional feedback. If you would like to provide natural language feedback, include comments here. Comments are limited to 4000 characters; if you need to provide more feedback, please reach out to your FactSet Support Team representative. ")
  @JsonIgnore

  public String getComment() {
        return comment.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getComment_JsonNullable() {
    return comment;
  }
  
  @JsonProperty(JSON_PROPERTY_COMMENT)
  public void setComment_JsonNullable(JsonNullable<String> comment) {
    this.comment = comment;
  }

  public void setComment(String comment) {
    this.comment = JsonNullable.<String>of(comment);
  }


  /**
   * Return true if this FeedbackRequest_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedbackRequestData feedbackRequestData = (FeedbackRequestData) o;
    return Objects.equals(this.responseId, feedbackRequestData.responseId) &&
        Objects.equals(this.helpful, feedbackRequestData.helpful) &&
        equalsNullable(this.comment, feedbackRequestData.comment);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseId, helpful, hashCodeNullable(comment));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedbackRequestData {\n");
    sb.append("    responseId: ").append(toIndentedString(responseId)).append("\n");
    sb.append("    helpful: ").append(toIndentedString(helpful)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

