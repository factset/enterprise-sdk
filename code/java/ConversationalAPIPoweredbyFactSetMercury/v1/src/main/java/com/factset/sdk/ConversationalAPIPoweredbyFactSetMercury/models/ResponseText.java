/*
 * Conversational API Powered by FactSet Mercury
 * ### OVERVIEW  The FactSet Conversational API allows clients to white-label core FactSet Mercury capabilities in a client's chatbot experience.  The Conversational API is powered by FactSet Mercury, FactSet's Generative Artificial Intelligence (GenAI) large language model. The Conversational API provides a variety of content and capabilities, including FactSet’s Federation layer (FactSet’s core GenAI-based technology), as well as more specific content and functionality tailored for financial services workflows.  The Conversational API provides answers to hundreds of natural language search queries and allows you to easily ask questions related to companies and markets research.  Some example supported prompts:  - Nintendo's highest closing stock price over the last 3 months - Has Yelp issued any guidance? - What are the key trends impacting costs for DaVita?  **For Information on Access to and Content Available via the Conversational API**  Please see the [Conversational API Online Assistant Page](https://my.apps.factset.com/oa/pages/23209). Here you can find instructions on how to set up access to the Conversational API, and the full list of content available.  **Conversational API Consumer Workflow**  The Conversational API is an asynchronous API that utilizes status polling to inform the consumer when a query response is complete. Please see the technical OpenAPI documentation below for specific information regarding consuming the API programmatically.  At a high level, the API consumer workflow is as follows:  1) Send a natural language query to the `/query` endpoint and start the response generation process. 2) Poll the status of the response generation process using the `/status` endpoint. 3) Once the status indicates a ready response, retrieve it using the `/result` endpoint.  - If your response contains a file ID, such as for an Excel chart or a [FactSet ActiveGraph](https://my.apps.factset.com/oa/pages/20355), retrieve it using the file ID at the `/download/file` endpoint. - To provide feedback on your response and help the Conversational API better serve you content, we encourage you to use the `/feedback` endpoint.   **FAQ and Limitations**  - \"Natural language\" in this documentation refers to modern conversational English. Support for other languages is currently unavailable. - The Conversational API is currently limited to accept 10 natural language queries per minute and 200 per hour for an individual consumer. If you anticipate your needs to be greater than these limits, please reach out to FatSet Support. 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ConversationalAPIPoweredbyFactSetMercury.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.ConversationalAPIPoweredbyFactSetMercury.models.Phrase;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ConversationalAPIPoweredbyFactSetMercury.JSON;


/**
 * LLM natural language response to the query. Provides an answer to the question or references further attached data. &#x60;Value&#x60; property contains the response text represented in markdown format.   Response text from the Conversational API may contain &#x60;citations&#x60; which provide references to the source of the data in the textual response. If provided, phrases within the response text will be mapped to a data item in the &#x60;citations&#x60; object via a bracketed ID (e.g. &#x60;[1]&#x60;). Citations may be used to provide additional context or to verify the source of the data; in some cases, a single phrase within the response may be supported by multiple data sources. Links to the source data are provided as links to FactSet&#39;s Document Viewer (see OA page [here](https://my.apps.factset.com/oa/pages/17390)). If available, the link URL will directly point to the excerpted content highlighted within the document.  For an example of a response with citations, see the example labeled &#x60;ResponseWithCitationsExample&#x60;. 
 */
@ApiModel(description = "LLM natural language response to the query. Provides an answer to the question or references further attached data. `Value` property contains the response text represented in markdown format.   Response text from the Conversational API may contain `citations` which provide references to the source of the data in the textual response. If provided, phrases within the response text will be mapped to a data item in the `citations` object via a bracketed ID (e.g. `[1]`). Citations may be used to provide additional context or to verify the source of the data; in some cases, a single phrase within the response may be supported by multiple data sources. Links to the source data are provided as links to FactSet's Document Viewer (see OA page [here](https://my.apps.factset.com/oa/pages/17390)). If available, the link URL will directly point to the excerpted content highlighted within the document.  For an example of a response with citations, see the example labeled `ResponseWithCitationsExample`. ")
@JsonPropertyOrder({
  ResponseText.JSON_PROPERTY_TYPE,
  ResponseText.JSON_PROPERTY_VALUE,
  ResponseText.JSON_PROPERTY_CITATIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ResponseText implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Datatype contained in this data object
   */
  public enum TypeEnum {
    STRING("string");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;

  public static final String JSON_PROPERTY_CITATIONS = "citations";
  private java.util.Map<String, java.util.List<Phrase>> citations = null;

  public ResponseText() { 
  }

  @JsonCreator
  public ResponseText(
    @JsonProperty(value=JSON_PROPERTY_TYPE, required=true) TypeEnum type, 
    @JsonProperty(value=JSON_PROPERTY_VALUE, required=true) String value
  ) {
    this();
    this.type = type;
    this.value = value;
  }

  public ResponseText type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Datatype contained in this data object
   * @return type
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Datatype contained in this data object")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ResponseText value(String value) {
    this.value = value;
    return this;
  }

   /**
   * String containing LLM natural language response to the query
   * @return value
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "String containing LLM natural language response to the query")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(String value) {
    this.value = value;
  }


  public ResponseText citations(java.util.Map<String, java.util.List<Phrase>> citations) {
    this.citations = citations;
    return this;
  }

  public ResponseText putCitationsItem(String key, java.util.List<Phrase> citationsItem) {
    if (this.citations == null) {
      this.citations = new java.util.HashMap<>();
    }
    this.citations.put(key, citationsItem);
    return this;
  }

   /**
   * A map of citations, where the keys are the citation IDs and the values are the citation schema objects.
   * @return citations
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "A map of citations, where the keys are the citation IDs and the values are the citation schema objects.")
  @JsonProperty(JSON_PROPERTY_CITATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.Map<String, java.util.List<Phrase>> getCitations() {
    return citations;
  }


  @JsonProperty(JSON_PROPERTY_CITATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCitations(java.util.Map<String, java.util.List<Phrase>> citations) {
    this.citations = citations;
  }


  /**
   * Return true if this ResponseText object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseText responseText = (ResponseText) o;
    return Objects.equals(this.type, responseText.type) &&
        Objects.equals(this.value, responseText.value) &&
        Objects.equals(this.citations, responseText.citations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, value, citations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseText {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

