/*
 * Real-Time Time Series API
 * Time series data, end-of-day or intraday, tick-by-tick or subsampled. Additional vendor-specific endpoints provide a modified interface for seamless integration with the ChartIQ chart library.  This API is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * integrated into complex infrastructures such as existing frontend frameworks or authentication services.  This API has been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Real-Time Quotes API for Digital Portals](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price information. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeTimeSeries.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.RealTimeTimeSeries.models.PostPricesTimeSeriesEodSubsampleGetRequestDataInterval;
import com.factset.sdk.RealTimeTimeSeries.models.PostVendorChartIQTimeSeriesEodListRequestDataAdjustments;
import com.factset.sdk.RealTimeTimeSeries.models.PostVendorChartIQTimeSeriesEodListRequestDataIdentifier;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeTimeSeries.JSON;


/**
 * The data member contains the request&#39;s primary data.
 */
@ApiModel(description = "The data member contains the request's primary data.")
@JsonPropertyOrder({
  PostPricesTimeSeriesEodSubsampleGetRequestData.JSON_PROPERTY_IDENTIFIER,
  PostPricesTimeSeriesEodSubsampleGetRequestData.JSON_PROPERTY_TYPE,
  PostPricesTimeSeriesEodSubsampleGetRequestData.JSON_PROPERTY_QUALITY,
  PostPricesTimeSeriesEodSubsampleGetRequestData.JSON_PROPERTY_INTERVAL,
  PostPricesTimeSeriesEodSubsampleGetRequestData.JSON_PROPERTY_ADJUSTMENTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class PostPricesTimeSeriesEodSubsampleGetRequestData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_IDENTIFIER = "identifier";
  private PostVendorChartIQTimeSeriesEodListRequestDataIdentifier identifier;

  /**
   * Type of the price as configured for the customer. | Value | Description | | --- | --- | | trade | Trade price (ordinary, auction, pre or post-trading). | | bid | Bid price. | | ask | Ask price. | | yield | Yield price. | | estimate | Estimated price. |  
   */
  public enum TypeEnum {
    TRADE("trade"),
    
    BID("bid"),
    
    ASK("ask"),
    
    YIELD("yield"),
    
    ESTIMATE("estimate");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type = TypeEnum.TRADE;

  /**
   * Quality of the price. | Value | Description | | --- | --- | | DLY | Delayed: intraday prices with an exchange-imposed delay of usually 15 to 30 minutes. | | EOD | End-of-day: prices updated once per day after the close of trading, possibly with an exchange-imposed delay of several hours or days. | | BST | Best: choose the price quality with the least delay, as entitled for the client. |  
   */
  public enum QualityEnum {
    DLY("DLY"),
    
    EOD("EOD"),
    
    BST("BST");

    private String value;

    QualityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static QualityEnum fromValue(String value) {
      for (QualityEnum b : QualityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_QUALITY = "quality";
  private QualityEnum quality = QualityEnum.DLY;

  public static final String JSON_PROPERTY_INTERVAL = "interval";
  private PostPricesTimeSeriesEodSubsampleGetRequestDataInterval interval;

  public static final String JSON_PROPERTY_ADJUSTMENTS = "adjustments";
  private PostVendorChartIQTimeSeriesEodListRequestDataAdjustments adjustments;

  public PostPricesTimeSeriesEodSubsampleGetRequestData() { 
  }

  @JsonCreator
  public PostPricesTimeSeriesEodSubsampleGetRequestData(
    @JsonProperty(value=JSON_PROPERTY_IDENTIFIER, required=true) PostVendorChartIQTimeSeriesEodListRequestDataIdentifier identifier, 
    @JsonProperty(value=JSON_PROPERTY_INTERVAL, required=true) PostPricesTimeSeriesEodSubsampleGetRequestDataInterval interval
  ) {
    this();
    this.identifier = identifier;
    this.interval = interval;
  }

  public PostPricesTimeSeriesEodSubsampleGetRequestData identifier(PostVendorChartIQTimeSeriesEodListRequestDataIdentifier identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Get identifier
   * @return identifier
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PostVendorChartIQTimeSeriesEodListRequestDataIdentifier getIdentifier() {
    return identifier;
  }


  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentifier(PostVendorChartIQTimeSeriesEodListRequestDataIdentifier identifier) {
    this.identifier = identifier;
  }


  public PostPricesTimeSeriesEodSubsampleGetRequestData type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the price as configured for the customer. | Value | Description | | --- | --- | | trade | Trade price (ordinary, auction, pre or post-trading). | | bid | Bid price. | | ask | Ask price. | | yield | Yield price. | | estimate | Estimated price. |  
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "trade", value = "Type of the price as configured for the customer. | Value | Description | | --- | --- | | trade | Trade price (ordinary, auction, pre or post-trading). | | bid | Bid price. | | ask | Ask price. | | yield | Yield price. | | estimate | Estimated price. |  ")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PostPricesTimeSeriesEodSubsampleGetRequestData quality(QualityEnum quality) {
    this.quality = quality;
    return this;
  }

   /**
   * Quality of the price. | Value | Description | | --- | --- | | DLY | Delayed: intraday prices with an exchange-imposed delay of usually 15 to 30 minutes. | | EOD | End-of-day: prices updated once per day after the close of trading, possibly with an exchange-imposed delay of several hours or days. | | BST | Best: choose the price quality with the least delay, as entitled for the client. |  
   * @return quality
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "DLY", value = "Quality of the price. | Value | Description | | --- | --- | | DLY | Delayed: intraday prices with an exchange-imposed delay of usually 15 to 30 minutes. | | EOD | End-of-day: prices updated once per day after the close of trading, possibly with an exchange-imposed delay of several hours or days. | | BST | Best: choose the price quality with the least delay, as entitled for the client. |  ")
  @JsonProperty(JSON_PROPERTY_QUALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public QualityEnum getQuality() {
    return quality;
  }


  @JsonProperty(JSON_PROPERTY_QUALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuality(QualityEnum quality) {
    this.quality = quality;
  }


  public PostPricesTimeSeriesEodSubsampleGetRequestData interval(PostPricesTimeSeriesEodSubsampleGetRequestDataInterval interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PostPricesTimeSeriesEodSubsampleGetRequestDataInterval getInterval() {
    return interval;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterval(PostPricesTimeSeriesEodSubsampleGetRequestDataInterval interval) {
    this.interval = interval;
  }


  public PostPricesTimeSeriesEodSubsampleGetRequestData adjustments(PostVendorChartIQTimeSeriesEodListRequestDataAdjustments adjustments) {
    this.adjustments = adjustments;
    return this;
  }

   /**
   * Get adjustments
   * @return adjustments
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ADJUSTMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostVendorChartIQTimeSeriesEodListRequestDataAdjustments getAdjustments() {
    return adjustments;
  }


  @JsonProperty(JSON_PROPERTY_ADJUSTMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdjustments(PostVendorChartIQTimeSeriesEodListRequestDataAdjustments adjustments) {
    this.adjustments = adjustments;
  }


  /**
   * Return true if this PostPricesTimeSeriesEodSubsampleGetRequest_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPricesTimeSeriesEodSubsampleGetRequestData postPricesTimeSeriesEodSubsampleGetRequestData = (PostPricesTimeSeriesEodSubsampleGetRequestData) o;
    return Objects.equals(this.identifier, postPricesTimeSeriesEodSubsampleGetRequestData.identifier) &&
        Objects.equals(this.type, postPricesTimeSeriesEodSubsampleGetRequestData.type) &&
        Objects.equals(this.quality, postPricesTimeSeriesEodSubsampleGetRequestData.quality) &&
        Objects.equals(this.interval, postPricesTimeSeriesEodSubsampleGetRequestData.interval) &&
        Objects.equals(this.adjustments, postPricesTimeSeriesEodSubsampleGetRequestData.adjustments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, type, quality, interval, adjustments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPricesTimeSeriesEodSubsampleGetRequestData {\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    adjustments: ").append(toIndentedString(adjustments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

