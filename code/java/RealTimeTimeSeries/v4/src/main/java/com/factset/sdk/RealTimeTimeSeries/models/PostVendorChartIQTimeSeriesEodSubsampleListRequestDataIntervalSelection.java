/*
 * Real-Time Time Series API
 * Time series data, end-of-day or intraday, tick-by-tick or subsampled. Additional vendor-specific endpoints provide a modified interface for seamless integration with the ChartIQ chart library.  This API is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * integrated into complex infrastructures such as existing frontend frameworks or authentication services.  This API has been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Real-Time Quotes API for Digital Portals](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price information. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeTimeSeries.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.RealTimeTimeSeries.models.PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeTimeSeries.JSON;


/**
 * Select the intervals from which the subsamples are to be created.
 */
@ApiModel(description = "Select the intervals from which the subsamples are to be created.")
@JsonPropertyOrder({
  PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection.JSON_PROPERTY_INTERVALS,
  PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection.JSON_PROPERTY_SAMPLES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_INTERVALS = "intervals";
  private java.util.List<LocalDate> intervals = null;

  public static final String JSON_PROPERTY_SAMPLES = "samples";
  private PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples samples;

  public PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection() { 
  }

  public PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection intervals(java.util.List<LocalDate> intervals) {
    this.intervals = intervals;
    return this;
  }

  public PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection addIntervalsItem(LocalDate intervalsItem) {
    if (this.intervals == null) {
      this.intervals = new java.util.ArrayList<>();
    }
    this.intervals.add(intervalsItem);
    return this;
  }

   /**
   * Non-empty intervals of days to consider for the request. The array contains a list of at least two days in increasing order. Each pair of adjacent entries day_n and day_(n+1) specifies a half-open interval, that is a range of days d where day_n &lt;&#x3D; d &lt; day_(n+1). A subsample is computed for each interval. The valid range of intervals is between 1900-01-01 and the day after the current day.
   * @return intervals
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"2024-01-01\",\"2024-02-01\"]", value = "Non-empty intervals of days to consider for the request. The array contains a list of at least two days in increasing order. Each pair of adjacent entries day_n and day_(n+1) specifies a half-open interval, that is a range of days d where day_n <= d < day_(n+1). A subsample is computed for each interval. The valid range of intervals is between 1900-01-01 and the day after the current day.")
  @JsonProperty(JSON_PROPERTY_INTERVALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<LocalDate> getIntervals() {
    return intervals;
  }


  @JsonProperty(JSON_PROPERTY_INTERVALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntervals(java.util.List<LocalDate> intervals) {
    this.intervals = intervals;
  }


  public PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection samples(PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples samples) {
    this.samples = samples;
    return this;
  }

   /**
   * Get samples
   * @return samples
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples getSamples() {
    return samples;
  }


  @JsonProperty(JSON_PROPERTY_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSamples(PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples samples) {
    this.samples = samples;
  }


  /**
   * Return true if this PostVendorChartIQTimeSeriesEodSubsampleListRequest_data_intervalSelection object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection postVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection = (PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection) o;
    return Objects.equals(this.intervals, postVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection.intervals) &&
        Objects.equals(this.samples, postVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection.samples);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intervals, samples);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelection {\n");
    sb.append("    intervals: ").append(toIndentedString(intervals)).append("\n");
    sb.append("    samples: ").append(toIndentedString(samples)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

