/*
 * PA Engine API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.16.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.PAEngine.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.PAEngine.JSON;


/**
 * Column
 */
@JsonPropertyOrder({
  Column.JSON_PROPERTY_DEFAULTSTATISTICSIDS,
  Column.JSON_PROPERTY_NAME,
  Column.JSON_PROPERTY_DIRECTORY,
  Column.JSON_PROPERTY_CATEGORY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Column implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DEFAULTSTATISTICSIDS = "defaultstatisticsids";
  private JsonNullable<java.util.List<String>> defaultstatisticsids = JsonNullable.<java.util.List<String>>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DIRECTORY = "directory";
  private JsonNullable<String> directory = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private JsonNullable<String> category = JsonNullable.<String>undefined();

  public Column() { 
  }

  public Column defaultstatisticsids(java.util.List<String> defaultstatisticsids) {
    this.defaultstatisticsids = JsonNullable.<java.util.List<String>>of(defaultstatisticsids);
    return this;
  }

  public Column addDefaultstatisticsidsItem(String defaultstatisticsidsItem) {
    if (this.defaultstatisticsids == null || !this.defaultstatisticsids.isPresent()) {
      this.defaultstatisticsids = JsonNullable.<java.util.List<String>>of(new java.util.ArrayList<>());
    }
    try {
      this.defaultstatisticsids.get().add(defaultstatisticsidsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Column statistic Id
   * @return defaultstatisticsids
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Column statistic Id")
  @JsonIgnore

  public java.util.List<String> getDefaultstatisticsids() {
        return defaultstatisticsids.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEFAULTSTATISTICSIDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<String>> getDefaultstatisticsids_JsonNullable() {
    return defaultstatisticsids;
  }
  
  @JsonProperty(JSON_PROPERTY_DEFAULTSTATISTICSIDS)
  public void setDefaultstatisticsids_JsonNullable(JsonNullable<java.util.List<String>> defaultstatisticsids) {
    this.defaultstatisticsids = defaultstatisticsids;
  }

  public void setDefaultstatisticsids(java.util.List<String> defaultstatisticsids) {
    this.defaultstatisticsids = JsonNullable.<java.util.List<String>>of(defaultstatisticsids);
  }


  public Column name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

   /**
   * Column Name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Column Name")
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public Column directory(String directory) {
    this.directory = JsonNullable.<String>of(directory);
    return this;
  }

   /**
   * Column Directory
   * @return directory
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Column Directory")
  @JsonIgnore

  public String getDirectory() {
        return directory.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DIRECTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDirectory_JsonNullable() {
    return directory;
  }
  
  @JsonProperty(JSON_PROPERTY_DIRECTORY)
  public void setDirectory_JsonNullable(JsonNullable<String> directory) {
    this.directory = directory;
  }

  public void setDirectory(String directory) {
    this.directory = JsonNullable.<String>of(directory);
  }


  public Column category(String category) {
    this.category = JsonNullable.<String>of(category);
    return this;
  }

   /**
   * Column Category
   * @return category
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Column Category")
  @JsonIgnore

  public String getCategory() {
        return category.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCategory_JsonNullable() {
    return category;
  }
  
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  public void setCategory_JsonNullable(JsonNullable<String> category) {
    this.category = category;
  }

  public void setCategory(String category) {
    this.category = JsonNullable.<String>of(category);
  }


  /**
   * Return true if this Column object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Column column = (Column) o;
    return equalsNullable(this.defaultstatisticsids, column.defaultstatisticsids) &&
        equalsNullable(this.name, column.name) &&
        equalsNullable(this.directory, column.directory) &&
        equalsNullable(this.category, column.category);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(defaultstatisticsids), hashCodeNullable(name), hashCodeNullable(directory), hashCodeNullable(category));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Column {\n");
    sb.append("    defaultstatisticsids: ").append(toIndentedString(defaultstatisticsids)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    directory: ").append(toIndentedString(directory)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

