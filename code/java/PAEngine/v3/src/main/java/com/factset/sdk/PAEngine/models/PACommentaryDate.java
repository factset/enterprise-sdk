/*
 * PA Engine API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.16.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.PAEngine.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.PAEngine.JSON;


/**
 * PACommentaryDate
 */
@JsonPropertyOrder({
  PACommentaryDate.JSON_PROPERTY_YYYYMMDD,
  PACommentaryDate.JSON_PROPERTY_RELATIVE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class PACommentaryDate implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_YYYYMMDD = "yyyymmdd";
  private JsonNullable<Integer> yyyymmdd = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_RELATIVE = "relative";
  private JsonNullable<String> relative = JsonNullable.<String>undefined();

  public PACommentaryDate() { 
  }

  public PACommentaryDate yyyymmdd(Integer yyyymmdd) {
    this.yyyymmdd = JsonNullable.<Integer>of(yyyymmdd);
    return this;
  }

   /**
   * Date can be either absolute (YYYYMMDD) or relative, but only one format should be set at a time.
   * @return yyyymmdd
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Date can be either absolute (YYYYMMDD) or relative, but only one format should be set at a time.")
  @JsonIgnore

  public Integer getYyyymmdd() {
        return yyyymmdd.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_YYYYMMDD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getYyyymmdd_JsonNullable() {
    return yyyymmdd;
  }
  
  @JsonProperty(JSON_PROPERTY_YYYYMMDD)
  public void setYyyymmdd_JsonNullable(JsonNullable<Integer> yyyymmdd) {
    this.yyyymmdd = yyyymmdd;
  }

  public void setYyyymmdd(Integer yyyymmdd) {
    this.yyyymmdd = JsonNullable.<Integer>of(yyyymmdd);
  }


  public PACommentaryDate relative(String relative) {
    this.relative = JsonNullable.<String>of(relative);
    return this;
  }

   /**
   * Date can be either relative or absolute (YYYYMMDD), but only one format should be set at a time.
   * @return relative
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Date can be either relative or absolute (YYYYMMDD), but only one format should be set at a time.")
  @JsonIgnore

  public String getRelative() {
        return relative.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RELATIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRelative_JsonNullable() {
    return relative;
  }
  
  @JsonProperty(JSON_PROPERTY_RELATIVE)
  public void setRelative_JsonNullable(JsonNullable<String> relative) {
    this.relative = relative;
  }

  public void setRelative(String relative) {
    this.relative = JsonNullable.<String>of(relative);
  }


  /**
   * Return true if this PACommentaryDate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PACommentaryDate paCommentaryDate = (PACommentaryDate) o;
    return equalsNullable(this.yyyymmdd, paCommentaryDate.yyyymmdd) &&
        equalsNullable(this.relative, paCommentaryDate.relative);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(yyyymmdd), hashCodeNullable(relative));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PACommentaryDate {\n");
    sb.append("    yyyymmdd: ").append(toIndentedString(yyyymmdd)).append("\n");
    sb.append("    relative: ").append(toIndentedString(relative)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

