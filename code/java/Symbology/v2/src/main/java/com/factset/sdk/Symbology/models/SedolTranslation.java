/*
 * FactSet Symbology API
 * The FactSet Symbology API provides symbol resolution services, allowing clients to translate market identifiers into various symbology types such as, FactSet Permanent Identifiers, CUSIP, ISIN, SEDOL, Tickers, and Bloomberg FIGIs. <p>Factset's Symbology API sits at the center of its hub-and-spoke data model, enabling you to quickly harmonize the expanding catalog of Content APIs. Translate market IDs into CUSIP, SEDOL, ISIN, Tickers as of a point in time or for the entire history of the requested id allowing Data Management workflows to normalize ids over time.</p> 
 *
 * The version of the OpenAPI document: 2.1.3
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Symbology.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Symbology.JSON;


/**
 * SEDOL Translation data object.
 */
@ApiModel(description = "SEDOL Translation data object.")
@JsonPropertyOrder({
  SedolTranslation.JSON_PROPERTY_FSYM_ID,
  SedolTranslation.JSON_PROPERTY_NAME,
  SedolTranslation.JSON_PROPERTY_SEDOL,
  SedolTranslation.JSON_PROPERTY_SEDOL_PRIMARY,
  SedolTranslation.JSON_PROPERTY_REQUEST_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class SedolTranslation implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FSYM_ID = "fsymId";
  private String fsymId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SEDOL = "sedol";
  private String sedol;

  public static final String JSON_PROPERTY_SEDOL_PRIMARY = "sedolPrimary";
  private String sedolPrimary;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public SedolTranslation() { 
  }

  public SedolTranslation fsymId(String fsymId) {
    this.fsymId = fsymId;
    return this;
  }

   /**
   * FactSet Default Permanent Identifier. Regional and Composite (-USA) request &#x60;ids&#x60; will use a Regional ID &#39;-R&#39;, Listing specific ids &#39;-NYS&#39; will use Listing ids &#39;-L&#39;, Entities will use &#39;-E&#39;, and FI will use security &#39;-S&#39; ids. [FactSet Permanent Security Identifier](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881)
   * @return fsymId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "JBP9Z6-L", value = "FactSet Default Permanent Identifier. Regional and Composite (-USA) request `ids` will use a Regional ID '-R', Listing specific ids '-NYS' will use Listing ids '-L', Entities will use '-E', and FI will use security '-S' ids. [FactSet Permanent Security Identifier](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881)")
  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFsymId() {
    return fsymId;
  }


  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFsymId(String fsymId) {
    this.fsymId = fsymId;
  }


  public SedolTranslation name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Proper Name of company or issuer.
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Alphabet Inc. Class A", value = "Proper Name of company or issuer.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public SedolTranslation sedol(String sedol) {
    this.sedol = sedol;
    return this;
  }

   /**
   * SEDOL
   * @return sedol
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "BYZ5YB6", value = "SEDOL")
  @JsonProperty(JSON_PROPERTY_SEDOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSedol() {
    return sedol;
  }


  @JsonProperty(JSON_PROPERTY_SEDOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSedol(String sedol) {
    this.sedol = sedol;
  }


  public SedolTranslation sedolPrimary(String sedolPrimary) {
    this.sedolPrimary = sedolPrimary;
    return this;
  }

   /**
   * The SEDOL for the Primary Listing of the requested security. If you request a specific exchange (e.g. -MEX), the SEDOL will translate for that listing, while the SEDOL Primary will always resolve back to the primary region (e.g. -US).
   * @return sedolPrimary
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "BYVY8G0", value = "The SEDOL for the Primary Listing of the requested security. If you request a specific exchange (e.g. -MEX), the SEDOL will translate for that listing, while the SEDOL Primary will always resolve back to the primary region (e.g. -US).")
  @JsonProperty(JSON_PROPERTY_SEDOL_PRIMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSedolPrimary() {
    return sedolPrimary;
  }


  @JsonProperty(JSON_PROPERTY_SEDOL_PRIMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSedolPrimary(String sedolPrimary) {
    this.sedolPrimary = sedolPrimary;
  }


  public SedolTranslation requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier specified in the request
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "GOOGL-MEX", value = "Identifier specified in the request")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  /**
   * Return true if this sedolTranslation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SedolTranslation sedolTranslation = (SedolTranslation) o;
    return Objects.equals(this.fsymId, sedolTranslation.fsymId) &&
        Objects.equals(this.name, sedolTranslation.name) &&
        Objects.equals(this.sedol, sedolTranslation.sedol) &&
        Objects.equals(this.sedolPrimary, sedolTranslation.sedolPrimary) &&
        Objects.equals(this.requestId, sedolTranslation.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fsymId, name, sedol, sedolPrimary, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SedolTranslation {\n");
    sb.append("    fsymId: ").append(toIndentedString(fsymId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sedol: ").append(toIndentedString(sedol)).append("\n");
    sb.append("    sedolPrimary: ").append(toIndentedString(sedolPrimary)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

