/*
 * FactSet Symbology API
 * The FactSet Symbology API provides symbol resolution services, allowing clients to translate market identifiers into various symbology types such as, FactSet Permanent Identifiers, CUSIP, ISIN, SEDOL, Tickers, and LEIs. <p>Factset's Symbology API sits at the center of its hub-and-spoke data model, enabling you to quickly harmonize the expanding catalog of Content APIs.</p><p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Symbology.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.swagger.annotations.ApiModel;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Symbology.JSON;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The type of symbol submitted for resolution to other identifiers. Only one type of symbol is accepted with each request.
 */
public enum GetHistoricalInputSymbolType {
  
  BIC("BIC"),
  
  CIK("CIK"),
  
  CRD("CRD"),
  
  EIN("EIN"),
  
  FITCH("FITCH"),
  
  LEI("LEI"),
  
  MD("MD"),
  
  SPR("SPR"),
  
  VALOREN("VALOREN"),
  
  WKN("WKN"),
  
  UKCH("UKCH"),
  
  RSSD("RSSD"),
  
  SEDOL("SEDOL"),
  
  CUSIP("CUSIP"),
  
  FSYMENTITYID("fsymEntityId"),
  
  FSYMSECURITYID("fsymSecurityId"),
  
  FSYMREGIONALID("fsymRegionalId"),
  
  FSYMLISTINGID("fsymListingId"),
  
  ISIN("ISIN"),
  
  TICKEREXCHANGE("tickerExchange"),
  
  TICKERREGION("tickerRegion"),
  
  BLOOMBERGFIGI("bloombergFigi"),
  
  BLOOMBERGTICKER("bloombergTicker"),
  
  GVKEY("GVKEY"),
  
  GVKEY_IID("GVKEY & IID"),
  
  JCN("JCN"),
  
  LOANX("LoanX"),
  
  MARKITRED("MarkitRed");

  private String value;

  GetHistoricalInputSymbolType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static GetHistoricalInputSymbolType fromValue(String value) {
    for (GetHistoricalInputSymbolType b : GetHistoricalInputSymbolType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

