/*
 * FactSet Symbology API
 * The FactSet Symbology API provides symbol resolution services, allowing clients to translate market identifiers into various symbology types such as, FactSet Permanent Identifiers, CUSIP, ISIN, SEDOL, Tickers, and LEIs. <p>Factset's Symbology API sits at the center of its hub-and-spoke data model, enabling you to quickly harmonize the expanding catalog of Content APIs.</p><p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Symbology.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Symbology.JSON;


/**
 * Historical Identifier Resolution data object.
 */
@ApiModel(description = "Historical Identifier Resolution data object.")
@JsonPropertyOrder({
  IdentifierResolutionHistorical.JSON_PROPERTY_REQUEST_ID,
  IdentifierResolutionHistorical.JSON_PROPERTY_INPUT_SYMBOL_TYPE,
  IdentifierResolutionHistorical.JSON_PROPERTY_NAME,
  IdentifierResolutionHistorical.JSON_PROPERTY_FREF_LISTING_EXCHANGE,
  IdentifierResolutionHistorical.JSON_PROPERTY_CURRENCY,
  IdentifierResolutionHistorical.JSON_PROPERTY_OUTPUT_TYPE,
  IdentifierResolutionHistorical.JSON_PROPERTY_VALUE,
  IdentifierResolutionHistorical.JSON_PROPERTY_START_DATE,
  IdentifierResolutionHistorical.JSON_PROPERTY_END_DATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class IdentifierResolutionHistorical implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public static final String JSON_PROPERTY_INPUT_SYMBOL_TYPE = "inputSymbolType";
  private String inputSymbolType;

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FREF_LISTING_EXCHANGE = "frefListingExchange";
  private JsonNullable<String> frefListingExchange = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private JsonNullable<String> currency = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_OUTPUT_TYPE = "outputType";
  private JsonNullable<String> outputType = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_VALUE = "value";
  private JsonNullable<String> value = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  private JsonNullable<LocalDate> startDate = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  private JsonNullable<LocalDate> endDate = JsonNullable.<LocalDate>undefined();

  public IdentifierResolutionHistorical() { 
  }

  public IdentifierResolutionHistorical requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier inputted in the request.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "GOOGL-US", value = "Identifier inputted in the request.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public IdentifierResolutionHistorical inputSymbolType(String inputSymbolType) {
    this.inputSymbolType = inputSymbolType;
    return this;
  }

   /**
   * The type of identifier inputted in the request
   * @return inputSymbolType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "tickerRegion", value = "The type of identifier inputted in the request")
  @JsonProperty(JSON_PROPERTY_INPUT_SYMBOL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInputSymbolType() {
    return inputSymbolType;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_SYMBOL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputSymbolType(String inputSymbolType) {
    this.inputSymbolType = inputSymbolType;
  }


  public IdentifierResolutionHistorical name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

   /**
   * Name of the requested identifier
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Alphabet Inc. Class A", value = "Name of the requested identifier")
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public IdentifierResolutionHistorical frefListingExchange(String frefListingExchange) {
    this.frefListingExchange = JsonNullable.<String>of(frefListingExchange);
    return this;
  }

   /**
   * The 3 digit fref exchange code for the primary exchange of the security
   * @return frefListingExchange
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "USA", value = "The 3 digit fref exchange code for the primary exchange of the security")
  @JsonIgnore

  public String getFrefListingExchange() {
        return frefListingExchange.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FREF_LISTING_EXCHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFrefListingExchange_JsonNullable() {
    return frefListingExchange;
  }
  
  @JsonProperty(JSON_PROPERTY_FREF_LISTING_EXCHANGE)
  public void setFrefListingExchange_JsonNullable(JsonNullable<String> frefListingExchange) {
    this.frefListingExchange = frefListingExchange;
  }

  public void setFrefListingExchange(String frefListingExchange) {
    this.frefListingExchange = JsonNullable.<String>of(frefListingExchange);
  }


  public IdentifierResolutionHistorical currency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
    return this;
  }

   /**
   * The 3 digit ISO code for the currency
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "The 3 digit ISO code for the currency")
  @JsonIgnore

  public String getCurrency() {
        return currency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCurrency_JsonNullable() {
    return currency;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  public void setCurrency_JsonNullable(JsonNullable<String> currency) {
    this.currency = currency;
  }

  public void setCurrency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
  }


  public IdentifierResolutionHistorical outputType(String outputType) {
    this.outputType = JsonNullable.<String>of(outputType);
    return this;
  }

   /**
   * Type of identifier outputted.
   * @return outputType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "tickerRegion", value = "Type of identifier outputted.")
  @JsonIgnore

  public String getOutputType() {
        return outputType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_OUTPUT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getOutputType_JsonNullable() {
    return outputType;
  }
  
  @JsonProperty(JSON_PROPERTY_OUTPUT_TYPE)
  public void setOutputType_JsonNullable(JsonNullable<String> outputType) {
    this.outputType = outputType;
  }

  public void setOutputType(String outputType) {
    this.outputType = JsonNullable.<String>of(outputType);
  }


  public IdentifierResolutionHistorical value(String value) {
    this.value = JsonNullable.<String>of(value);
    return this;
  }

   /**
   * Requested identifier.
   * @return value
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "GOOGL-US", value = "Requested identifier.")
  @JsonIgnore

  public String getValue() {
        return value.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getValue_JsonNullable() {
    return value;
  }
  
  @JsonProperty(JSON_PROPERTY_VALUE)
  public void setValue_JsonNullable(JsonNullable<String> value) {
    this.value = value;
  }

  public void setValue(String value) {
    this.value = JsonNullable.<String>of(value);
  }


  public IdentifierResolutionHistorical startDate(LocalDate startDate) {
    this.startDate = JsonNullable.<LocalDate>of(startDate);
    return this;
  }

   /**
   * Start Date in YYYY-MM-DD format.
   * @return startDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Fri Jan 01 00:00:00 UTC 2010", value = "Start Date in YYYY-MM-DD format.")
  @JsonIgnore

  public LocalDate getStartDate() {
        return startDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getStartDate_JsonNullable() {
    return startDate;
  }
  
  @JsonProperty(JSON_PROPERTY_START_DATE)
  public void setStartDate_JsonNullable(JsonNullable<LocalDate> startDate) {
    this.startDate = startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = JsonNullable.<LocalDate>of(startDate);
  }


  public IdentifierResolutionHistorical endDate(LocalDate endDate) {
    this.endDate = JsonNullable.<LocalDate>of(endDate);
    return this;
  }

   /**
   * End Date in YYYY-MM-DD format.
   * @return endDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Fri Jan 01 00:00:00 UTC 2010", value = "End Date in YYYY-MM-DD format.")
  @JsonIgnore

  public LocalDate getEndDate() {
        return endDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getEndDate_JsonNullable() {
    return endDate;
  }
  
  @JsonProperty(JSON_PROPERTY_END_DATE)
  public void setEndDate_JsonNullable(JsonNullable<LocalDate> endDate) {
    this.endDate = endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = JsonNullable.<LocalDate>of(endDate);
  }


  /**
   * Return true if this identifierResolutionHistorical object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentifierResolutionHistorical identifierResolutionHistorical = (IdentifierResolutionHistorical) o;
    return Objects.equals(this.requestId, identifierResolutionHistorical.requestId) &&
        Objects.equals(this.inputSymbolType, identifierResolutionHistorical.inputSymbolType) &&
        equalsNullable(this.name, identifierResolutionHistorical.name) &&
        equalsNullable(this.frefListingExchange, identifierResolutionHistorical.frefListingExchange) &&
        equalsNullable(this.currency, identifierResolutionHistorical.currency) &&
        equalsNullable(this.outputType, identifierResolutionHistorical.outputType) &&
        equalsNullable(this.value, identifierResolutionHistorical.value) &&
        equalsNullable(this.startDate, identifierResolutionHistorical.startDate) &&
        equalsNullable(this.endDate, identifierResolutionHistorical.endDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, inputSymbolType, hashCodeNullable(name), hashCodeNullable(frefListingExchange), hashCodeNullable(currency), hashCodeNullable(outputType), hashCodeNullable(value), hashCodeNullable(startDate), hashCodeNullable(endDate));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentifierResolutionHistorical {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    inputSymbolType: ").append(toIndentedString(inputSymbolType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    frefListingExchange: ").append(toIndentedString(frefListingExchange)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    outputType: ").append(toIndentedString(outputType)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

