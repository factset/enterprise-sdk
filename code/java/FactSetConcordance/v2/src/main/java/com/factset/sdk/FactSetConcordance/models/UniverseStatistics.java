/*
 * FactSet Concordance API
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request. With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetConcordance.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetConcordance.JSON;


/**
 * Mapping statistics for a given universe
 */
@ApiModel(description = "Mapping statistics for a given universe")
@JsonPropertyOrder({
  UniverseStatistics.JSON_PROPERTY_TOTAL_COUNT,
  UniverseStatistics.JSON_PROPERTY_MAPPED_COUNT,
  UniverseStatistics.JSON_PROPERTY_UNMAPPED_COUNT,
  UniverseStatistics.JSON_PROPERTY_INDETERMINATE_COUNT,
  UniverseStatistics.JSON_PROPERTY_UNIVERSE_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class UniverseStatistics implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TOTAL_COUNT = "totalCount";
  private JsonNullable<Integer> totalCount = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAPPED_COUNT = "mappedCount";
  private JsonNullable<Integer> mappedCount = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_UNMAPPED_COUNT = "unmappedCount";
  private JsonNullable<Integer> unmappedCount = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_INDETERMINATE_COUNT = "indeterminateCount";
  private JsonNullable<Integer> indeterminateCount = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_UNIVERSE_ID = "universeId";
  private JsonNullable<Integer> universeId = JsonNullable.<Integer>undefined();

  public UniverseStatistics() { 
  }

  public UniverseStatistics totalCount(Integer totalCount) {
    this.totalCount = JsonNullable.<Integer>of(totalCount);
    return this;
  }

   /**
   * Get totalCount
   * @return totalCount
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "10", value = "")
  @JsonIgnore

  public Integer getTotalCount() {
        return totalCount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getTotalCount_JsonNullable() {
    return totalCount;
  }
  
  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  public void setTotalCount_JsonNullable(JsonNullable<Integer> totalCount) {
    this.totalCount = totalCount;
  }

  public void setTotalCount(Integer totalCount) {
    this.totalCount = JsonNullable.<Integer>of(totalCount);
  }


  public UniverseStatistics mappedCount(Integer mappedCount) {
    this.mappedCount = JsonNullable.<Integer>of(mappedCount);
    return this;
  }

   /**
   * Get mappedCount
   * @return mappedCount
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "8", value = "")
  @JsonIgnore

  public Integer getMappedCount() {
        return mappedCount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAPPED_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMappedCount_JsonNullable() {
    return mappedCount;
  }
  
  @JsonProperty(JSON_PROPERTY_MAPPED_COUNT)
  public void setMappedCount_JsonNullable(JsonNullable<Integer> mappedCount) {
    this.mappedCount = mappedCount;
  }

  public void setMappedCount(Integer mappedCount) {
    this.mappedCount = JsonNullable.<Integer>of(mappedCount);
  }


  public UniverseStatistics unmappedCount(Integer unmappedCount) {
    this.unmappedCount = JsonNullable.<Integer>of(unmappedCount);
    return this;
  }

   /**
   * Get unmappedCount
   * @return unmappedCount
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")
  @JsonIgnore

  public Integer getUnmappedCount() {
        return unmappedCount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UNMAPPED_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getUnmappedCount_JsonNullable() {
    return unmappedCount;
  }
  
  @JsonProperty(JSON_PROPERTY_UNMAPPED_COUNT)
  public void setUnmappedCount_JsonNullable(JsonNullable<Integer> unmappedCount) {
    this.unmappedCount = unmappedCount;
  }

  public void setUnmappedCount(Integer unmappedCount) {
    this.unmappedCount = JsonNullable.<Integer>of(unmappedCount);
  }


  public UniverseStatistics indeterminateCount(Integer indeterminateCount) {
    this.indeterminateCount = JsonNullable.<Integer>of(indeterminateCount);
    return this;
  }

   /**
   * Get indeterminateCount
   * @return indeterminateCount
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")
  @JsonIgnore

  public Integer getIndeterminateCount() {
        return indeterminateCount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INDETERMINATE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getIndeterminateCount_JsonNullable() {
    return indeterminateCount;
  }
  
  @JsonProperty(JSON_PROPERTY_INDETERMINATE_COUNT)
  public void setIndeterminateCount_JsonNullable(JsonNullable<Integer> indeterminateCount) {
    this.indeterminateCount = indeterminateCount;
  }

  public void setIndeterminateCount(Integer indeterminateCount) {
    this.indeterminateCount = JsonNullable.<Integer>of(indeterminateCount);
  }


  public UniverseStatistics universeId(Integer universeId) {
    this.universeId = JsonNullable.<Integer>of(universeId);
    return this;
  }

   /**
   * Get universeId
   * @return universeId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")
  @JsonIgnore

  public Integer getUniverseId() {
        return universeId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UNIVERSE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getUniverseId_JsonNullable() {
    return universeId;
  }
  
  @JsonProperty(JSON_PROPERTY_UNIVERSE_ID)
  public void setUniverseId_JsonNullable(JsonNullable<Integer> universeId) {
    this.universeId = universeId;
  }

  public void setUniverseId(Integer universeId) {
    this.universeId = JsonNullable.<Integer>of(universeId);
  }


  /**
   * Return true if this universeStatistics object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UniverseStatistics universeStatistics = (UniverseStatistics) o;
    return equalsNullable(this.totalCount, universeStatistics.totalCount) &&
        equalsNullable(this.mappedCount, universeStatistics.mappedCount) &&
        equalsNullable(this.unmappedCount, universeStatistics.unmappedCount) &&
        equalsNullable(this.indeterminateCount, universeStatistics.indeterminateCount) &&
        equalsNullable(this.universeId, universeStatistics.universeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(totalCount), hashCodeNullable(mappedCount), hashCodeNullable(unmappedCount), hashCodeNullable(indeterminateCount), hashCodeNullable(universeId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UniverseStatistics {\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    mappedCount: ").append(toIndentedString(mappedCount)).append("\n");
    sb.append("    unmappedCount: ").append(toIndentedString(unmappedCount)).append("\n");
    sb.append("    indeterminateCount: ").append(toIndentedString(indeterminateCount)).append("\n");
    sb.append("    universeId: ").append(toIndentedString(universeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

