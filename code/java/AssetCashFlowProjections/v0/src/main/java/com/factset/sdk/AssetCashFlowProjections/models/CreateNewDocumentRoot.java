/*
 * Asset Cash Flow Projections API
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.AssetCashFlowProjections.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.AssetCashFlowProjections.JSON;


/**
 * CreateNewDocumentRoot
 */
@JsonPropertyOrder({
  CreateNewDocumentRoot.JSON_PROPERTY_AS_OF_DATE,
  CreateNewDocumentRoot.JSON_PROPERTY_EXISTING_DOCUMENT_NAME,
  CreateNewDocumentRoot.JSON_PROPERTY_NEW_DOCUMENT_NAME,
  CreateNewDocumentRoot.JSON_PROPERTY_PORTFOLIOS,
  CreateNewDocumentRoot.JSON_PROPERTY_SCENARIOS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class CreateNewDocumentRoot implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AS_OF_DATE = "asOfDate";
  private LocalDate asOfDate;

  public static final String JSON_PROPERTY_EXISTING_DOCUMENT_NAME = "existingDocumentName";
  private String existingDocumentName;

  public static final String JSON_PROPERTY_NEW_DOCUMENT_NAME = "newDocumentName";
  private String newDocumentName;

  public static final String JSON_PROPERTY_PORTFOLIOS = "portfolios";
  private java.util.List<String> portfolios = null;

  public static final String JSON_PROPERTY_SCENARIOS = "scenarios";
  private java.util.List<String> scenarios = null;

  public CreateNewDocumentRoot() { 
  }

  @JsonCreator
  public CreateNewDocumentRoot(
    @JsonProperty(value=JSON_PROPERTY_EXISTING_DOCUMENT_NAME, required=true) String existingDocumentName, 
    @JsonProperty(value=JSON_PROPERTY_NEW_DOCUMENT_NAME, required=true) String newDocumentName
  ) {
    this();
    this.existingDocumentName = existingDocumentName;
    this.newDocumentName = newDocumentName;
  }

  public CreateNewDocumentRoot asOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * As of Date should be in YYYY-MM-DD format.
   * @return asOfDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Mon Apr 21 00:00:00 UTC 2025", value = "As of Date should be in YYYY-MM-DD format.")
  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getAsOfDate() {
    return asOfDate;
  }


  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
  }


  public CreateNewDocumentRoot existingDocumentName(String existingDocumentName) {
    this.existingDocumentName = existingDocumentName;
    return this;
  }

   /**
   * Existing document name
   * @return existingDocumentName
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Existing document name")
  @JsonProperty(JSON_PROPERTY_EXISTING_DOCUMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExistingDocumentName() {
    return existingDocumentName;
  }


  @JsonProperty(JSON_PROPERTY_EXISTING_DOCUMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExistingDocumentName(String existingDocumentName) {
    this.existingDocumentName = existingDocumentName;
  }


  public CreateNewDocumentRoot newDocumentName(String newDocumentName) {
    this.newDocumentName = newDocumentName;
    return this;
  }

   /**
   * New document name
   * @return newDocumentName
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "New document name")
  @JsonProperty(JSON_PROPERTY_NEW_DOCUMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNewDocumentName() {
    return newDocumentName;
  }


  @JsonProperty(JSON_PROPERTY_NEW_DOCUMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNewDocumentName(String newDocumentName) {
    this.newDocumentName = newDocumentName;
  }


  public CreateNewDocumentRoot portfolios(java.util.List<String> portfolios) {
    this.portfolios = portfolios;
    return this;
  }

  public CreateNewDocumentRoot addPortfoliosItem(String portfoliosItem) {
    if (this.portfolios == null) {
      this.portfolios = new java.util.ArrayList<>();
    }
    this.portfolios.add(portfoliosItem);
    return this;
  }

   /**
   * Portfolios
   * @return portfolios
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Portfolios")
  @JsonProperty(JSON_PROPERTY_PORTFOLIOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getPortfolios() {
    return portfolios;
  }


  @JsonProperty(JSON_PROPERTY_PORTFOLIOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortfolios(java.util.List<String> portfolios) {
    this.portfolios = portfolios;
  }


  public CreateNewDocumentRoot scenarios(java.util.List<String> scenarios) {
    this.scenarios = scenarios;
    return this;
  }

  public CreateNewDocumentRoot addScenariosItem(String scenariosItem) {
    if (this.scenarios == null) {
      this.scenarios = new java.util.ArrayList<>();
    }
    this.scenarios.add(scenariosItem);
    return this;
  }

   /**
   * Scenarios - Actuarial Scenarios input requires extension whereas Fixed Income Scenario Editor Scenarios won’t have any extension 
   * @return scenarios
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Scenarios - Actuarial Scenarios input requires extension whereas Fixed Income Scenario Editor Scenarios won’t have any extension ")
  @JsonProperty(JSON_PROPERTY_SCENARIOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getScenarios() {
    return scenarios;
  }


  @JsonProperty(JSON_PROPERTY_SCENARIOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScenarios(java.util.List<String> scenarios) {
    this.scenarios = scenarios;
  }


  /**
   * Return true if this CreateNewDocumentRoot object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNewDocumentRoot createNewDocumentRoot = (CreateNewDocumentRoot) o;
    return Objects.equals(this.asOfDate, createNewDocumentRoot.asOfDate) &&
        Objects.equals(this.existingDocumentName, createNewDocumentRoot.existingDocumentName) &&
        Objects.equals(this.newDocumentName, createNewDocumentRoot.newDocumentName) &&
        Objects.equals(this.portfolios, createNewDocumentRoot.portfolios) &&
        Objects.equals(this.scenarios, createNewDocumentRoot.scenarios);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asOfDate, existingDocumentName, newDocumentName, portfolios, scenarios);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNewDocumentRoot {\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    existingDocumentName: ").append(toIndentedString(existingDocumentName)).append("\n");
    sb.append("    newDocumentName: ").append(toIndentedString(newDocumentName)).append("\n");
    sb.append("    portfolios: ").append(toIndentedString(portfolios)).append("\n");
    sb.append("    scenarios: ").append(toIndentedString(scenarios)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

