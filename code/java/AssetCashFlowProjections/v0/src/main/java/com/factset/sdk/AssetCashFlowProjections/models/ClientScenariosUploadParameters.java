/*
 * Asset Cash Flow Projections API
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.AssetCashFlowProjections.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.AssetCashFlowProjections.JSON;


/**
 * Details required for uploading scenario files
 */
@ApiModel(description = "Details required for uploading scenario files")
@JsonPropertyOrder({
  ClientScenariosUploadParameters.JSON_PROPERTY_AS_OF_DATE,
  ClientScenariosUploadParameters.JSON_PROPERTY_FILE_NAME,
  ClientScenariosUploadParameters.JSON_PROPERTY_OVERWRITE,
  ClientScenariosUploadParameters.JSON_PROPERTY_REPLACE_SPECIAL_CHARACTERS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ClientScenariosUploadParameters implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AS_OF_DATE = "asOfDate";
  private LocalDate asOfDate;

  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  private String fileName;

  public static final String JSON_PROPERTY_OVERWRITE = "overwrite";
  private Boolean overwrite = false;

  public static final String JSON_PROPERTY_REPLACE_SPECIAL_CHARACTERS = "replaceSpecialCharacters";
  private Boolean replaceSpecialCharacters = false;

  public ClientScenariosUploadParameters() { 
  }

  @JsonCreator
  public ClientScenariosUploadParameters(
    @JsonProperty(value=JSON_PROPERTY_AS_OF_DATE, required=true) LocalDate asOfDate, 
    @JsonProperty(value=JSON_PROPERTY_FILE_NAME, required=true) String fileName
  ) {
    this();
    this.asOfDate = asOfDate;
    this.fileName = fileName;
  }

  public ClientScenariosUploadParameters asOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * Scenario As of Date ( Please select a Date not later than Previous Close Date) in YYYY-MM-DD format. 
   * @return asOfDate
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Fri Mar 01 00:00:00 UTC 2024", required = true, value = "Scenario As of Date ( Please select a Date not later than Previous Close Date) in YYYY-MM-DD format. ")
  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getAsOfDate() {
    return asOfDate;
  }


  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAsOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
  }


  public ClientScenariosUploadParameters fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Scenario file name including file extension.
   * @return fileName
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Scenario file name including file extension.")
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFileName() {
    return fileName;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public ClientScenariosUploadParameters overwrite(Boolean overwrite) {
    this.overwrite = overwrite;
    return this;
  }

   /**
   * Flag to indicate if existing file needs to be overwritten. Please expect a 409 if the file already exists and the overwrite is not set to true.
   * @return overwrite
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Flag to indicate if existing file needs to be overwritten. Please expect a 409 if the file already exists and the overwrite is not set to true.")
  @JsonProperty(JSON_PROPERTY_OVERWRITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOverwrite() {
    return overwrite;
  }


  @JsonProperty(JSON_PROPERTY_OVERWRITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverwrite(Boolean overwrite) {
    this.overwrite = overwrite;
  }


  public ClientScenariosUploadParameters replaceSpecialCharacters(Boolean replaceSpecialCharacters) {
    this.replaceSpecialCharacters = replaceSpecialCharacters;
    return this;
  }

   /**
   * Flag to indicate if the special characters in the fileName can be replaced with underscore. Please expect a 400 if their exists some special characters in the filename and this parameter is not set to true. - &#x60;SpecialCharacters&#x60;: .^%~$!#{} ()&#39;&#x60;+,:/
   * @return replaceSpecialCharacters
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Flag to indicate if the special characters in the fileName can be replaced with underscore. Please expect a 400 if their exists some special characters in the filename and this parameter is not set to true. - `SpecialCharacters`: .^%~$!#{} ()'`+,:/")
  @JsonProperty(JSON_PROPERTY_REPLACE_SPECIAL_CHARACTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getReplaceSpecialCharacters() {
    return replaceSpecialCharacters;
  }


  @JsonProperty(JSON_PROPERTY_REPLACE_SPECIAL_CHARACTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReplaceSpecialCharacters(Boolean replaceSpecialCharacters) {
    this.replaceSpecialCharacters = replaceSpecialCharacters;
  }


  /**
   * Return true if this ClientScenariosUploadParameters object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientScenariosUploadParameters clientScenariosUploadParameters = (ClientScenariosUploadParameters) o;
    return Objects.equals(this.asOfDate, clientScenariosUploadParameters.asOfDate) &&
        Objects.equals(this.fileName, clientScenariosUploadParameters.fileName) &&
        Objects.equals(this.overwrite, clientScenariosUploadParameters.overwrite) &&
        Objects.equals(this.replaceSpecialCharacters, clientScenariosUploadParameters.replaceSpecialCharacters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asOfDate, fileName, overwrite, replaceSpecialCharacters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientScenariosUploadParameters {\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    overwrite: ").append(toIndentedString(overwrite)).append("\n");
    sb.append("    replaceSpecialCharacters: ").append(toIndentedString(replaceSpecialCharacters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

