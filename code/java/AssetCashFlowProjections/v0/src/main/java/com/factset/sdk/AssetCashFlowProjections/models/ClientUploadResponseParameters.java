/*
 * Asset Cash Flow Projections API
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.AssetCashFlowProjections.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.AssetCashFlowProjections.JSON;


/**
 * Client upload status response parameters
 */
@ApiModel(description = "Client upload status response parameters")
@JsonPropertyOrder({
  ClientUploadResponseParameters.JSON_PROPERTY_UPLOAD_ID,
  ClientUploadResponseParameters.JSON_PROPERTY_FILE_NAME,
  ClientUploadResponseParameters.JSON_PROPERTY_SIGNED_URL,
  ClientUploadResponseParameters.JSON_PROPERTY_EXPIRATION_TIME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ClientUploadResponseParameters implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_UPLOAD_ID = "uploadId";
  private String uploadId;

  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  private String fileName;

  public static final String JSON_PROPERTY_SIGNED_URL = "signedUrl";
  private String signedUrl;

  public static final String JSON_PROPERTY_EXPIRATION_TIME = "expirationTime";
  private OffsetDateTime expirationTime;

  public ClientUploadResponseParameters() { 
  }

  public ClientUploadResponseParameters uploadId(String uploadId) {
    this.uploadId = uploadId;
    return this;
  }

   /**
   * Unique Identifier for the file
   * @return uploadId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique Identifier for the file")
  @JsonProperty(JSON_PROPERTY_UPLOAD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUploadId() {
    return uploadId;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadId(String uploadId) {
    this.uploadId = uploadId;
  }


  public ClientUploadResponseParameters fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Actuarial Scenario file name
   * @return fileName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Actuarial Scenario file name")
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileName() {
    return fileName;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public ClientUploadResponseParameters signedUrl(String signedUrl) {
    this.signedUrl = signedUrl;
    return this;
  }

   /**
   * Signed url to upload the scenarios file
   * @return signedUrl
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Signed url to upload the scenarios file")
  @JsonProperty(JSON_PROPERTY_SIGNED_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignedUrl() {
    return signedUrl;
  }


  @JsonProperty(JSON_PROPERTY_SIGNED_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignedUrl(String signedUrl) {
    this.signedUrl = signedUrl;
  }


  public ClientUploadResponseParameters expirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

   /**
   * The signed URL remains valid for a duration of 4 hours and is usable until it becomes invalid or outdated.
   * @return expirationTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The signed URL remains valid for a duration of 4 hours and is usable until it becomes invalid or outdated.")
  @JsonProperty(JSON_PROPERTY_EXPIRATION_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpirationTime() {
    return expirationTime;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
  }


  /**
   * Return true if this ClientUploadResponseParameters object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientUploadResponseParameters clientUploadResponseParameters = (ClientUploadResponseParameters) o;
    return Objects.equals(this.uploadId, clientUploadResponseParameters.uploadId) &&
        Objects.equals(this.fileName, clientUploadResponseParameters.fileName) &&
        Objects.equals(this.signedUrl, clientUploadResponseParameters.signedUrl) &&
        Objects.equals(this.expirationTime, clientUploadResponseParameters.expirationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uploadId, fileName, signedUrl, expirationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientUploadResponseParameters {\n");
    sb.append("    uploadId: ").append(toIndentedString(uploadId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    signedUrl: ").append(toIndentedString(signedUrl)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

