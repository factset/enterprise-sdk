/*
 * Asset Cash Flow Projections API
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.AssetCashFlowProjections.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.AssetCashFlowProjections.JSON;


/**
 * Uploaded status response parameters
 */
@ApiModel(description = "Uploaded status response parameters")
@JsonPropertyOrder({
  UploadStatusResponseParameters.JSON_PROPERTY_ACFP_STATUS,
  UploadStatusResponseParameters.JSON_PROPERTY_AS_OF_DATE,
  UploadStatusResponseParameters.JSON_PROPERTY_FILE_NAME,
  UploadStatusResponseParameters.JSON_PROPERTY_NUMBER_OF_SCENARIOS,
  UploadStatusResponseParameters.JSON_PROPERTY_STATUS,
  UploadStatusResponseParameters.JSON_PROPERTY_TYPE,
  UploadStatusResponseParameters.JSON_PROPERTY_UPLOAD_DATE_TIME,
  UploadStatusResponseParameters.JSON_PROPERTY_UPLOAD_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class UploadStatusResponseParameters implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * The ACFP status of the uploaded file, can be one of the following: - &#x60;pending&#x60;: File validation is pending. - &#x60;validating&#x60;:File is being validated. - &#x60;error&#x60;: File failed validation.  - &#x60;replicating&#x60;: File is being copied. - &#x60;good&#x60;: File is successfully validated. - &#x60;preparing&#x60;: File is being parsed.  - &#x60;uninitiated&#x60;: File upload is not initiated.
   */
  public enum AcfpStatusEnum {
    PENDING("pending"),
    
    VALIDATING("validating"),
    
    ERROR("error"),
    
    REPLICATING("replicating"),
    
    GOOD("good"),
    
    PREPARING("preparing"),
    
    UNINITIATED("uninitiated");

    private String value;

    AcfpStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AcfpStatusEnum fromValue(String value) {
      for (AcfpStatusEnum b : AcfpStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACFP_STATUS = "acfpStatus";
  private AcfpStatusEnum acfpStatus;

  public static final String JSON_PROPERTY_AS_OF_DATE = "asOfDate";
  private LocalDate asOfDate;

  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  private String fileName;

  public static final String JSON_PROPERTY_NUMBER_OF_SCENARIOS = "numberOfScenarios";
  private BigDecimal numberOfScenarios;

  /**
   * The status of the uploaded file, can be one of the following:
   */
  public enum StatusEnum {
    QUEUED("queued"),
    
    EXECUTING("executing"),
    
    CREATED("created");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  /**
   * Actuarial Scenario File Type
   */
  public enum TypeEnum {
    TILLINGHAST_ACTUARIAL_SOFTWARE_TAS_("Tillinghast Actuarial Software (TAS)"),
    
    MILLIMAN_S_MG_ALFA_ALFA_("Milliman's MG-ALFA (ALFA)"),
    
    SUNGARD_IWORKS_PROPHET("Sungard iWorks Prophet"),
    
    FACTSET("FactSet");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_UPLOAD_DATE_TIME = "uploadDateTime";
  private OffsetDateTime uploadDateTime;

  public static final String JSON_PROPERTY_UPLOAD_ID = "uploadId";
  private String uploadId;

  public UploadStatusResponseParameters() { 
  }

  public UploadStatusResponseParameters acfpStatus(AcfpStatusEnum acfpStatus) {
    this.acfpStatus = acfpStatus;
    return this;
  }

   /**
   * The ACFP status of the uploaded file, can be one of the following: - &#x60;pending&#x60;: File validation is pending. - &#x60;validating&#x60;:File is being validated. - &#x60;error&#x60;: File failed validation.  - &#x60;replicating&#x60;: File is being copied. - &#x60;good&#x60;: File is successfully validated. - &#x60;preparing&#x60;: File is being parsed.  - &#x60;uninitiated&#x60;: File upload is not initiated.
   * @return acfpStatus
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The ACFP status of the uploaded file, can be one of the following: - `pending`: File validation is pending. - `validating`:File is being validated. - `error`: File failed validation.  - `replicating`: File is being copied. - `good`: File is successfully validated. - `preparing`: File is being parsed.  - `uninitiated`: File upload is not initiated.")
  @JsonProperty(JSON_PROPERTY_ACFP_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AcfpStatusEnum getAcfpStatus() {
    return acfpStatus;
  }


  @JsonProperty(JSON_PROPERTY_ACFP_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcfpStatus(AcfpStatusEnum acfpStatus) {
    this.acfpStatus = acfpStatus;
  }


  public UploadStatusResponseParameters asOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * Scenario As of Date
   * @return asOfDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Tue Mar 19 00:00:00 UTC 2024", value = "Scenario As of Date")
  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getAsOfDate() {
    return asOfDate;
  }


  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
  }


  public UploadStatusResponseParameters fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Actuarial Scenario file name
   * @return fileName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Actuarial Scenario file name")
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileName() {
    return fileName;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public UploadStatusResponseParameters numberOfScenarios(BigDecimal numberOfScenarios) {
    this.numberOfScenarios = numberOfScenarios;
    return this;
  }

   /**
   * Number of scenarios that are within a scenario file
   * @return numberOfScenarios
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Number of scenarios that are within a scenario file")
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_SCENARIOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNumberOfScenarios() {
    return numberOfScenarios;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_SCENARIOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfScenarios(BigDecimal numberOfScenarios) {
    this.numberOfScenarios = numberOfScenarios;
  }


  public UploadStatusResponseParameters status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the uploaded file, can be one of the following:
   * @return status
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The status of the uploaded file, can be one of the following:")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public UploadStatusResponseParameters type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Actuarial Scenario File Type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Actuarial Scenario File Type")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public UploadStatusResponseParameters uploadDateTime(OffsetDateTime uploadDateTime) {
    this.uploadDateTime = uploadDateTime;
    return this;
  }

   /**
   * The time stamp when the file is uploaded
   * @return uploadDateTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The time stamp when the file is uploaded")
  @JsonProperty(JSON_PROPERTY_UPLOAD_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUploadDateTime() {
    return uploadDateTime;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadDateTime(OffsetDateTime uploadDateTime) {
    this.uploadDateTime = uploadDateTime;
  }


  public UploadStatusResponseParameters uploadId(String uploadId) {
    this.uploadId = uploadId;
    return this;
  }

   /**
   * Unique Identifier for the file
   * @return uploadId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique Identifier for the file")
  @JsonProperty(JSON_PROPERTY_UPLOAD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUploadId() {
    return uploadId;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadId(String uploadId) {
    this.uploadId = uploadId;
  }


  /**
   * Return true if this UploadStatusResponseParameters object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadStatusResponseParameters uploadStatusResponseParameters = (UploadStatusResponseParameters) o;
    return Objects.equals(this.acfpStatus, uploadStatusResponseParameters.acfpStatus) &&
        Objects.equals(this.asOfDate, uploadStatusResponseParameters.asOfDate) &&
        Objects.equals(this.fileName, uploadStatusResponseParameters.fileName) &&
        Objects.equals(this.numberOfScenarios, uploadStatusResponseParameters.numberOfScenarios) &&
        Objects.equals(this.status, uploadStatusResponseParameters.status) &&
        Objects.equals(this.type, uploadStatusResponseParameters.type) &&
        Objects.equals(this.uploadDateTime, uploadStatusResponseParameters.uploadDateTime) &&
        Objects.equals(this.uploadId, uploadStatusResponseParameters.uploadId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acfpStatus, asOfDate, fileName, numberOfScenarios, status, type, uploadDateTime, uploadId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadStatusResponseParameters {\n");
    sb.append("    acfpStatus: ").append(toIndentedString(acfpStatus)).append("\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    numberOfScenarios: ").append(toIndentedString(numberOfScenarios)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uploadDateTime: ").append(toIndentedString(uploadDateTime)).append("\n");
    sb.append("    uploadId: ").append(toIndentedString(uploadId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

