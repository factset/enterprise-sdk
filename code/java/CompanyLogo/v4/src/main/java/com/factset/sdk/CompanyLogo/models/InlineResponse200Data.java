/*
 * Company Logo API
 * Consume FactSet collected Company Logos through an API that seamlessly integrates with company fundamentals and estimates data (listed equities data available via the stocks API), quotes, time series, and other Digital APIs.  The logo API provides access to logos for a global universe of listed companies. The logos could be accessed by using national and international identifiers like ISIN, CUSIP, WKN, Valor, etc. and are a nice feature for comprehensive visualizations of equities on overview pages (factsheets).  Logo collection and maintenance takes into account IPOs, M&A notifications, and further consistency check mechanisms.  The Company Logo API seamlessly integrates with the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals) for equities and estimates data and the [Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api), allowing access to detailed price and performance information of listings. The [Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) also supports basic security identifier cross-reference (see for example /notation/crossReference/getByFactSetMarketSymbol to retrieve an instrument id). For direct access to price histories for charting, please refer to the [Real-Time Time Series API](https://developer.factset.com/api-catalog/real-time-time-series-api).   
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.CompanyLogo.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.CompanyLogo.models.InlineResponse200DataLarge;
import com.factset.sdk.CompanyLogo.models.InlineResponse200DataMedium;
import com.factset.sdk.CompanyLogo.models.InlineResponse200DataSmall;
import com.factset.sdk.CompanyLogo.models.InlineResponse200DataVector;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.CompanyLogo.JSON;


/**
 * URLs of company logos. All URLs are publicly available via HTTPS and hosted by FactSet with a top-level domain &#x60;mdgms.com&#x60;. For possible values of the attribute &#x60;mimeType&#x60;, see endpoint &#x60;/basic/media/type/list&#x60; with parameter &#x60;filter.ids&#x3D;1 (image)&#x60;.
 */
@ApiModel(description = "URLs of company logos. All URLs are publicly available via HTTPS and hosted by FactSet with a top-level domain `mdgms.com`. For possible values of the attribute `mimeType`, see endpoint `/basic/media/type/list` with parameter `filter.ids=1 (image)`.")
@JsonPropertyOrder({
  InlineResponse200Data.JSON_PROPERTY_ID_INSTRUMENT,
  InlineResponse200Data.JSON_PROPERTY_SOURCE_IDENTIFIER,
  InlineResponse200Data.JSON_PROPERTY_SMALL,
  InlineResponse200Data.JSON_PROPERTY_MEDIUM,
  InlineResponse200Data.JSON_PROPERTY_LARGE,
  InlineResponse200Data.JSON_PROPERTY_VECTOR
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse200Data implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID_INSTRUMENT = "idInstrument";
  private JsonNullable<String> idInstrument = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SOURCE_IDENTIFIER = "sourceIdentifier";
  private JsonNullable<String> sourceIdentifier = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SMALL = "small";
  private InlineResponse200DataSmall small;

  public static final String JSON_PROPERTY_MEDIUM = "medium";
  private InlineResponse200DataMedium medium;

  public static final String JSON_PROPERTY_LARGE = "large";
  private InlineResponse200DataLarge large;

  public static final String JSON_PROPERTY_VECTOR = "vector";
  private InlineResponse200DataVector vector;

  public InlineResponse200Data() { 
  }

  public InlineResponse200Data idInstrument(String idInstrument) {
    this.idInstrument = JsonNullable.<String>of(idInstrument);
    return this;
  }

   /**
   * MDG identifier of the instrument.
   * @return idInstrument
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "209485", value = "MDG identifier of the instrument.")
  @JsonIgnore

  public String getIdInstrument() {
        return idInstrument.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getIdInstrument_JsonNullable() {
    return idInstrument;
  }
  
  @JsonProperty(JSON_PROPERTY_ID_INSTRUMENT)
  public void setIdInstrument_JsonNullable(JsonNullable<String> idInstrument) {
    this.idInstrument = idInstrument;
  }

  public void setIdInstrument(String idInstrument) {
    this.idInstrument = JsonNullable.<String>of(idInstrument);
  }


  public InlineResponse200Data sourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = JsonNullable.<String>of(sourceIdentifier);
    return this;
  }

   /**
   * Identifier used in the request.
   * @return sourceIdentifier
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FDS-US", value = "Identifier used in the request.")
  @JsonIgnore

  public String getSourceIdentifier() {
        return sourceIdentifier.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SOURCE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSourceIdentifier_JsonNullable() {
    return sourceIdentifier;
  }
  
  @JsonProperty(JSON_PROPERTY_SOURCE_IDENTIFIER)
  public void setSourceIdentifier_JsonNullable(JsonNullable<String> sourceIdentifier) {
    this.sourceIdentifier = sourceIdentifier;
  }

  public void setSourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = JsonNullable.<String>of(sourceIdentifier);
  }


  public InlineResponse200Data small(InlineResponse200DataSmall small) {
    this.small = small;
    return this;
  }

   /**
   * Get small
   * @return small
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SMALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataSmall getSmall() {
    return small;
  }


  @JsonProperty(JSON_PROPERTY_SMALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmall(InlineResponse200DataSmall small) {
    this.small = small;
  }


  public InlineResponse200Data medium(InlineResponse200DataMedium medium) {
    this.medium = medium;
    return this;
  }

   /**
   * Get medium
   * @return medium
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MEDIUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataMedium getMedium() {
    return medium;
  }


  @JsonProperty(JSON_PROPERTY_MEDIUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMedium(InlineResponse200DataMedium medium) {
    this.medium = medium;
  }


  public InlineResponse200Data large(InlineResponse200DataLarge large) {
    this.large = large;
    return this;
  }

   /**
   * Get large
   * @return large
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LARGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataLarge getLarge() {
    return large;
  }


  @JsonProperty(JSON_PROPERTY_LARGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLarge(InlineResponse200DataLarge large) {
    this.large = large;
  }


  public InlineResponse200Data vector(InlineResponse200DataVector vector) {
    this.vector = vector;
    return this;
  }

   /**
   * Get vector
   * @return vector
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataVector getVector() {
    return vector;
  }


  @JsonProperty(JSON_PROPERTY_VECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVector(InlineResponse200DataVector vector) {
    this.vector = vector;
  }


  /**
   * Return true if this inline_response_200_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200Data inlineResponse200Data = (InlineResponse200Data) o;
    return equalsNullable(this.idInstrument, inlineResponse200Data.idInstrument) &&
        equalsNullable(this.sourceIdentifier, inlineResponse200Data.sourceIdentifier) &&
        Objects.equals(this.small, inlineResponse200Data.small) &&
        Objects.equals(this.medium, inlineResponse200Data.medium) &&
        Objects.equals(this.large, inlineResponse200Data.large) &&
        Objects.equals(this.vector, inlineResponse200Data.vector);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(idInstrument), hashCodeNullable(sourceIdentifier), small, medium, large, vector);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200Data {\n");
    sb.append("    idInstrument: ").append(toIndentedString(idInstrument)).append("\n");
    sb.append("    sourceIdentifier: ").append(toIndentedString(sourceIdentifier)).append("\n");
    sb.append("    small: ").append(toIndentedString(small)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    large: ").append(toIndentedString(large)).append("\n");
    sb.append("    vector: ").append(toIndentedString(vector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

