/*
 * Securitized Derivatives API For Digital Portals
 * Search for securitized derivative instruments, using a criteria-based screener. The API provides also fundamental data, notation-based key figures, list of barrier types, and details regarding the underlyings, their respective barriers and related cash flows, coupon lists and derived basic interest rate information.  The screener is based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifier types used as parameters must be valid and application must have permissions for them.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * life cycle: important dates in and features of the life cycle of the securitized derivatives instruments * filter by issuer, country of registration of the securitized derivatives * underlying and related barriers, including level and distance, and resulting cash flows * coupon data: where applicable, occurrence and frequency of coupon payments, current interest rate range * performance and volatility * product-specific ask-based key figures (not all key figures are available for all product types):     * bonus yield, sideways yield, maximum yield based on the ask price     * agio, discount     * spread     * break even, outperformance point, parity     * delta, weekly theta, vega, implied volatility     * leverage, omega     * intrinsic value, time value         Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term *level* is used instead of *price*, e.g. underlying level instead of underlying price. The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for equity and fixed income instruments: See the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals) and the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) for details.  
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse200DataIssueValueUnit;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.JSON;


/**
 * Issue data of the instrument.
 */
@ApiModel(description = "Issue data of the instrument.")
@JsonPropertyOrder({
  InlineResponse200DataIssue.JSON_PROPERTY_PRICE,
  InlineResponse200DataIssue.JSON_PROPERTY_ADMITTED_VOLUME,
  InlineResponse200DataIssue.JSON_PROPERTY_VALUE_UNIT,
  InlineResponse200DataIssue.JSON_PROPERTY_SURCHARGE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse200DataIssue implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PRICE = "price";
  private JsonNullable<BigDecimal> price = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_ADMITTED_VOLUME = "admittedVolume";
  private JsonNullable<BigDecimal> admittedVolume = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_VALUE_UNIT = "valueUnit";
  private InlineResponse200DataIssueValueUnit valueUnit;

  public static final String JSON_PROPERTY_SURCHARGE = "surcharge";
  private JsonNullable<BigDecimal> surcharge = JsonNullable.<BigDecimal>undefined();

  public InlineResponse200DataIssue() { 
  }

  public InlineResponse200DataIssue price(BigDecimal price) {
    this.price = JsonNullable.<BigDecimal>of(price);
    return this;
  }

   /**
   * The price at which the instrument was issued.
   * @return price
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "5.05", value = "The price at which the instrument was issued.")
  @JsonIgnore

  public BigDecimal getPrice() {
        return price.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getPrice_JsonNullable() {
    return price;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE)
  public void setPrice_JsonNullable(JsonNullable<BigDecimal> price) {
    this.price = price;
  }

  public void setPrice(BigDecimal price) {
    this.price = JsonNullable.<BigDecimal>of(price);
  }


  public InlineResponse200DataIssue admittedVolume(BigDecimal admittedVolume) {
    this.admittedVolume = JsonNullable.<BigDecimal>of(admittedVolume);
    return this;
  }

   /**
   * Number of pieces of the instrument admitted to trading by the regulating authority.
   * @return admittedVolume
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Number of pieces of the instrument admitted to trading by the regulating authority.")
  @JsonIgnore

  public BigDecimal getAdmittedVolume() {
        return admittedVolume.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ADMITTED_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getAdmittedVolume_JsonNullable() {
    return admittedVolume;
  }
  
  @JsonProperty(JSON_PROPERTY_ADMITTED_VOLUME)
  public void setAdmittedVolume_JsonNullable(JsonNullable<BigDecimal> admittedVolume) {
    this.admittedVolume = admittedVolume;
  }

  public void setAdmittedVolume(BigDecimal admittedVolume) {
    this.admittedVolume = JsonNullable.<BigDecimal>of(admittedVolume);
  }


  public InlineResponse200DataIssue valueUnit(InlineResponse200DataIssueValueUnit valueUnit) {
    this.valueUnit = valueUnit;
    return this;
  }

   /**
   * Get valueUnit
   * @return valueUnit
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VALUE_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse200DataIssueValueUnit getValueUnit() {
    return valueUnit;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueUnit(InlineResponse200DataIssueValueUnit valueUnit) {
    this.valueUnit = valueUnit;
  }


  public InlineResponse200DataIssue surcharge(BigDecimal surcharge) {
    this.surcharge = JsonNullable.<BigDecimal>of(surcharge);
    return this;
  }

   /**
   * Issue surcharge. An additional charge paid to the issuer when purchasing the product during the subscription period (see attribute &#x60;lifeCycle.subscriptionPeriod&#x60;).
   * @return surcharge
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.1", value = "Issue surcharge. An additional charge paid to the issuer when purchasing the product during the subscription period (see attribute `lifeCycle.subscriptionPeriod`).")
  @JsonIgnore

  public BigDecimal getSurcharge() {
        return surcharge.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SURCHARGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getSurcharge_JsonNullable() {
    return surcharge;
  }
  
  @JsonProperty(JSON_PROPERTY_SURCHARGE)
  public void setSurcharge_JsonNullable(JsonNullable<BigDecimal> surcharge) {
    this.surcharge = surcharge;
  }

  public void setSurcharge(BigDecimal surcharge) {
    this.surcharge = JsonNullable.<BigDecimal>of(surcharge);
  }


  /**
   * Return true if this inline_response_200_data_issue object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200DataIssue inlineResponse200DataIssue = (InlineResponse200DataIssue) o;
    return equalsNullable(this.price, inlineResponse200DataIssue.price) &&
        equalsNullable(this.admittedVolume, inlineResponse200DataIssue.admittedVolume) &&
        Objects.equals(this.valueUnit, inlineResponse200DataIssue.valueUnit) &&
        equalsNullable(this.surcharge, inlineResponse200DataIssue.surcharge);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(price), hashCodeNullable(admittedVolume), valueUnit, hashCodeNullable(surcharge));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200DataIssue {\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    admittedVolume: ").append(toIndentedString(admittedVolume)).append("\n");
    sb.append("    valueUnit: ").append(toIndentedString(valueUnit)).append("\n");
    sb.append("    surcharge: ").append(toIndentedString(surcharge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

