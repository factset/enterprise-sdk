/*
 * FactSet Overview Report Builder API
 * Get relevant industry-specific data for high level analysis of public and private companies
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.OverviewReportBuilder.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.OverviewReportBuilder.models.KeyStatsDataObjectEntityMetaSources;
import com.factset.sdk.OverviewReportBuilder.models.KeyStatsDataObjectFundMetaAsOfDate;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.OverviewReportBuilder.JSON;


/**
 * KeyStatsDataObjectFundMeta
 */
@JsonPropertyOrder({
  KeyStatsDataObjectFundMeta.JSON_PROPERTY_AS_OF_DATE,
  KeyStatsDataObjectFundMeta.JSON_PROPERTY_SOURCES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class KeyStatsDataObjectFundMeta implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AS_OF_DATE = "asOfDate";
  private KeyStatsDataObjectFundMetaAsOfDate asOfDate;

  public static final String JSON_PROPERTY_SOURCES = "sources";
  private KeyStatsDataObjectEntityMetaSources sources;

  public KeyStatsDataObjectFundMeta() { 
  }

  public KeyStatsDataObjectFundMeta asOfDate(KeyStatsDataObjectFundMetaAsOfDate asOfDate) {
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * Get asOfDate
   * @return asOfDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public KeyStatsDataObjectFundMetaAsOfDate getAsOfDate() {
    return asOfDate;
  }


  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsOfDate(KeyStatsDataObjectFundMetaAsOfDate asOfDate) {
    this.asOfDate = asOfDate;
  }


  public KeyStatsDataObjectFundMeta sources(KeyStatsDataObjectEntityMetaSources sources) {
    this.sources = sources;
    return this;
  }

   /**
   * Get sources
   * @return sources
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public KeyStatsDataObjectEntityMetaSources getSources() {
    return sources;
  }


  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSources(KeyStatsDataObjectEntityMetaSources sources) {
    this.sources = sources;
  }


  /**
   * Return true if this KeyStatsDataObjectFund_meta object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyStatsDataObjectFundMeta keyStatsDataObjectFundMeta = (KeyStatsDataObjectFundMeta) o;
    return Objects.equals(this.asOfDate, keyStatsDataObjectFundMeta.asOfDate) &&
        Objects.equals(this.sources, keyStatsDataObjectFundMeta.sources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asOfDate, sources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyStatsDataObjectFundMeta {\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

