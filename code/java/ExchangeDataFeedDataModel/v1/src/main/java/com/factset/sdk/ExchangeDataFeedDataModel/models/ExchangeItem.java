/*
 * FactSet Real-Time Data Model API
 * FactSetâ€™s Real-time market data products provide access to consolidated real-time and delayed global exchange data. Proprietary technology normalizes over 250 global venues, 18+ million instruments, and 150+ data fields. Asset types integrated include equities, futures, options, warrants, fixed income, mutual funds, ETFs, indices, commodities, and FX rates. Innovative technology ensures reliability and provides scalability that allows clients to make requests based on a symbol list or an exchange. Reduce development time by powering proprietary and third-party applications with exchange data from a unified data model. <p>The Real-time Data Model API provides mappings for enumerations used in our Real-Time DataFeed products and should be used in conjunction with the DataFeed Data Model documentation available for each product. <p>The initial version of this API is limited to include mapping tables for the product codes and exchanges only.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ExchangeDataFeedDataModel.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ExchangeDataFeedDataModel.JSON;


/**
 * ExchangeItem
 */
@JsonPropertyOrder({
  ExchangeItem.JSON_PROPERTY_EXCHANGE_CODE,
  ExchangeItem.JSON_PROPERTY_EXCHANGE_NAME,
  ExchangeItem.JSON_PROPERTY_MARKET_OPEN,
  ExchangeItem.JSON_PROPERTY_MARKET_CLOSE,
  ExchangeItem.JSON_PROPERTY_ISO_CODE,
  ExchangeItem.JSON_PROPERTY_DELAY_TIME,
  ExchangeItem.JSON_PROPERTY_PRODUCT_CODE,
  ExchangeItem.JSON_PROPERTY_DESCRIPTION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ExchangeItem implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EXCHANGE_CODE = "exchange_code";
  private Integer exchangeCode;

  public static final String JSON_PROPERTY_EXCHANGE_NAME = "exchange_name";
  private String exchangeName;

  public static final String JSON_PROPERTY_MARKET_OPEN = "market_open";
  private JsonNullable<Integer> marketOpen = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MARKET_CLOSE = "market_close";
  private JsonNullable<Integer> marketClose = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_ISO_CODE = "iso_code";
  private String isoCode;

  public static final String JSON_PROPERTY_DELAY_TIME = "delay_time";
  private Integer delayTime;

  public static final String JSON_PROPERTY_PRODUCT_CODE = "product_code";
  private Integer productCode;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public ExchangeItem() { 
  }

  public ExchangeItem exchangeCode(Integer exchangeCode) {
    this.exchangeCode = exchangeCode;
    return this;
  }

   /**
   * Unique code for the exchange.
   * @return exchangeCode
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique code for the exchange.")
  @JsonProperty(JSON_PROPERTY_EXCHANGE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExchangeCode() {
    return exchangeCode;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExchangeCode(Integer exchangeCode) {
    this.exchangeCode = exchangeCode;
  }


  public ExchangeItem exchangeName(String exchangeName) {
    this.exchangeName = exchangeName;
    return this;
  }

   /**
   * Name of the exchange.
   * @return exchangeName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Name of the exchange.")
  @JsonProperty(JSON_PROPERTY_EXCHANGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExchangeName() {
    return exchangeName;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExchangeName(String exchangeName) {
    this.exchangeName = exchangeName;
  }


  public ExchangeItem marketOpen(Integer marketOpen) {
    this.marketOpen = JsonNullable.<Integer>of(marketOpen);
    return this;
  }

   /**
   * Market open time in hours and minutes (HHMM).
   * @return marketOpen
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Market open time in hours and minutes (HHMM).")
  @JsonIgnore

  public Integer getMarketOpen() {
        return marketOpen.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MARKET_OPEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMarketOpen_JsonNullable() {
    return marketOpen;
  }
  
  @JsonProperty(JSON_PROPERTY_MARKET_OPEN)
  public void setMarketOpen_JsonNullable(JsonNullable<Integer> marketOpen) {
    this.marketOpen = marketOpen;
  }

  public void setMarketOpen(Integer marketOpen) {
    this.marketOpen = JsonNullable.<Integer>of(marketOpen);
  }


  public ExchangeItem marketClose(Integer marketClose) {
    this.marketClose = JsonNullable.<Integer>of(marketClose);
    return this;
  }

   /**
   * Market close time in hours and minutes (HHMM).
   * @return marketClose
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Market close time in hours and minutes (HHMM).")
  @JsonIgnore

  public Integer getMarketClose() {
        return marketClose.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MARKET_CLOSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMarketClose_JsonNullable() {
    return marketClose;
  }
  
  @JsonProperty(JSON_PROPERTY_MARKET_CLOSE)
  public void setMarketClose_JsonNullable(JsonNullable<Integer> marketClose) {
    this.marketClose = marketClose;
  }

  public void setMarketClose(Integer marketClose) {
    this.marketClose = JsonNullable.<Integer>of(marketClose);
  }


  public ExchangeItem isoCode(String isoCode) {
    this.isoCode = isoCode;
    return this;
  }

   /**
   * ISO code for the exchange.
   * @return isoCode
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "ISO code for the exchange.")
  @JsonProperty(JSON_PROPERTY_ISO_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIsoCode() {
    return isoCode;
  }


  @JsonProperty(JSON_PROPERTY_ISO_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsoCode(String isoCode) {
    this.isoCode = isoCode;
  }


  public ExchangeItem delayTime(Integer delayTime) {
    this.delayTime = delayTime;
    return this;
  }

   /**
   * Delay time in minutes.
   * @return delayTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Delay time in minutes.")
  @JsonProperty(JSON_PROPERTY_DELAY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDelayTime() {
    return delayTime;
  }


  @JsonProperty(JSON_PROPERTY_DELAY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDelayTime(Integer delayTime) {
    this.delayTime = delayTime;
  }


  public ExchangeItem productCode(Integer productCode) {
    this.productCode = productCode;
    return this;
  }

   /**
   * Product code associated with the exchange.
   * @return productCode
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Product code associated with the exchange.")
  @JsonProperty(JSON_PROPERTY_PRODUCT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getProductCode() {
    return productCode;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductCode(Integer productCode) {
    this.productCode = productCode;
  }


  public ExchangeItem description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the exchange.
   * @return description
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Description of the exchange.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Return true if this ExchangeItem object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeItem exchangeItem = (ExchangeItem) o;
    return Objects.equals(this.exchangeCode, exchangeItem.exchangeCode) &&
        Objects.equals(this.exchangeName, exchangeItem.exchangeName) &&
        equalsNullable(this.marketOpen, exchangeItem.marketOpen) &&
        equalsNullable(this.marketClose, exchangeItem.marketClose) &&
        Objects.equals(this.isoCode, exchangeItem.isoCode) &&
        Objects.equals(this.delayTime, exchangeItem.delayTime) &&
        Objects.equals(this.productCode, exchangeItem.productCode) &&
        Objects.equals(this.description, exchangeItem.description);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(exchangeCode, exchangeName, hashCodeNullable(marketOpen), hashCodeNullable(marketClose), isoCode, delayTime, productCode, description);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeItem {\n");
    sb.append("    exchangeCode: ").append(toIndentedString(exchangeCode)).append("\n");
    sb.append("    exchangeName: ").append(toIndentedString(exchangeName)).append("\n");
    sb.append("    marketOpen: ").append(toIndentedString(marketOpen)).append("\n");
    sb.append("    marketClose: ").append(toIndentedString(marketClose)).append("\n");
    sb.append("    isoCode: ").append(toIndentedString(isoCode)).append("\n");
    sb.append("    delayTime: ").append(toIndentedString(delayTime)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

