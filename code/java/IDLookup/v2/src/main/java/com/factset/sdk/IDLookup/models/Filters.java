/*
 * ID Lookup API
 * The ID Lookup API is a fuzzy search service that allows users to resolve symbols but are unable to find them elsewhere. The ID Lookup API allows users to search for entities in a wide variety of ways including, but not limited to, tickers, CUSIPs, URLs, a companyâ€™s brands, names and descriptions. The API does not require a complete query and will return different lists of results with each additional character, which enables users to iterate and adjust queries to return the desired results. Each search query returns a list of suggestions that can include every entity type offered by the API based on a matching and ranking algorithm.   The API response returns multiple different symbols that map to both internal FactSet identifiers like security or entity IDs as well as external identifiers like exchange tickers, Morningstar symbols and ISINs. This gives users flexibility in mapping identifiers across the FactSet universe.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IDLookup.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IDLookup.JSON;


/**
 *   Filters object helps narrow down the search results by including and/or excluding parameters. Filters are specific, depending on the dataset.   Please refer to &#x60;/metadata/fields/list-by-dataset&#x60; for the complete list of supported fields and values to filter the requested dataset.  If no filters are provided, all data will be returned.    * include - restricts results to those matching the provided fields and values   * exclude - returns all results except those matching the provided fields and values.   Possible cases:    * No filters object (default): No filter will be applied to the results.     * Include and exclude objects used together: Results are based on the combination of different fields used in both objects.     * The same field cannot be used in both include and exclude. If that happens, an HTTP 400 response is returned.    * If a specified field does not exist in the dataset, an HTTP 400 response is returned. 
 */
@ApiModel(description = "  Filters object helps narrow down the search results by including and/or excluding parameters. Filters are specific, depending on the dataset.   Please refer to `/metadata/fields/list-by-dataset` for the complete list of supported fields and values to filter the requested dataset.  If no filters are provided, all data will be returned.    * include - restricts results to those matching the provided fields and values   * exclude - returns all results except those matching the provided fields and values.   Possible cases:    * No filters object (default): No filter will be applied to the results.     * Include and exclude objects used together: Results are based on the combination of different fields used in both objects.     * The same field cannot be used in both include and exclude. If that happens, an HTTP 400 response is returned.    * If a specified field does not exist in the dataset, an HTTP 400 response is returned. ")
@JsonPropertyOrder({
  Filters.JSON_PROPERTY_INCLUDE,
  Filters.JSON_PROPERTY_EXCLUDE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Filters implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_INCLUDE = "include";
  private java.util.Map<String, java.util.List<String>> include = null;

  public static final String JSON_PROPERTY_EXCLUDE = "exclude";
  private java.util.Map<String, java.util.List<String>> exclude = null;

  public Filters() { 
  }

  public Filters include(java.util.Map<String, java.util.List<String>> include) {
    this.include = include;
    return this;
  }

  public Filters putIncludeItem(String key, java.util.List<String> includeItem) {
    if (this.include == null) {
      this.include = new java.util.HashMap<>();
    }
    this.include.put(key, includeItem);
    return this;
  }

   /**
   * Get include
   * @return include
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.Map<String, java.util.List<String>> getInclude() {
    return include;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInclude(java.util.Map<String, java.util.List<String>> include) {
    this.include = include;
  }


  public Filters exclude(java.util.Map<String, java.util.List<String>> exclude) {
    this.exclude = exclude;
    return this;
  }

  public Filters putExcludeItem(String key, java.util.List<String> excludeItem) {
    if (this.exclude == null) {
      this.exclude = new java.util.HashMap<>();
    }
    this.exclude.put(key, excludeItem);
    return this;
  }

   /**
   * Get exclude
   * @return exclude
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.Map<String, java.util.List<String>> getExclude() {
    return exclude;
  }


  @JsonProperty(JSON_PROPERTY_EXCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExclude(java.util.Map<String, java.util.List<String>> exclude) {
    this.exclude = exclude;
  }


  /**
   * Return true if this filters object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filters filters = (Filters) o;
    return Objects.equals(this.include, filters.include) &&
        Objects.equals(this.exclude, filters.exclude);
  }

  @Override
  public int hashCode() {
    return Objects.hash(include, exclude);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filters {\n");
    sb.append("    include: ").append(toIndentedString(include)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

