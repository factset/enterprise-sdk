/*
 * ID Lookup API
 * The ID Lookup API is a fuzzy search service that allows users to resolve symbols but are unable to find them elsewhere. The ID Lookup API allows users to search for entities in a wide variety of ways including, but not limited to, tickers, CUSIPs, URLs, a companyâ€™s brands, names and descriptions. The API does not require a complete query and will return different lists of results with each additional character, which enables users to iterate and adjust queries to return the desired results. Each search query returns a list of suggestions that can include every entity type offered by the API based on a matching and ranking algorithm.   The API response returns multiple different symbols that map to both internal FactSet identifiers like security or entity IDs as well as external identifiers like exchange tickers, Morningstar symbols and ISINs. This gives users flexibility in mapping identifiers across the FactSet universe.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IDLookup.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.IDLookup.models.Filters;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IDLookup.JSON;


/**
 * Response object for a lookup request
 */
@ApiModel(description = "Response object for a lookup request")
@JsonPropertyOrder({
  FilterObjects.JSON_PROPERTY_DATASET,
  FilterObjects.JSON_PROPERTY_FILTERS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FilterObjects implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Type of dataset.
   */
  public enum DatasetEnum {
    EQUITIES("equities"),
    
    BANKLOANS("bankLoans"),
    
    COMMODITIES("commodities"),
    
    CEPBONDS("cepBonds"),
    
    COUNTRIES("countries"),
    
    DEALS("deals"),
    
    ECONOMICREPORTS("economicReports"),
    
    ECONOMICSERIES("economicSeries"),
    
    EQUITIESREALTIME("equitiesRealTime"),
    
    EXCHANGERATESREALTIME("exchangeRatesRealTime"),
    
    ETFS("etfs"),
    
    ETFSREALTIME("etfsRealTime"),
    
    BONDS("bonds"),
    
    FOREX("forex"),
    
    FUTURES("futures"),
    
    INDICES("indices"),
    
    INDICESREALTIME("indicesRealTime"),
    
    INDUSTRIES("industries"),
    
    MARKITLOANS("markitLoans"),
    
    MUTUALFUNDS("mutualFunds"),
    
    MUTUALFUNDSREALTIME("mutualFundsRealTime"),
    
    OWNERSHIPHOLDERS("ownershipHolders"),
    
    PEOPLE("people"),
    
    PRIVATECOMPANIES("privateCompanies"),
    
    PEVCFIRMS("pevcFirms"),
    
    PEVCFUNDS("pevcFunds"),
    
    REGIONS("regions"),
    
    YIELDS("yields"),
    
    OPTIONS("options");

    private String value;

    DatasetEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DatasetEnum fromValue(String value) {
      for (DatasetEnum b : DatasetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DATASET = "dataset";
  private DatasetEnum dataset;

  public static final String JSON_PROPERTY_FILTERS = "filters";
  private Filters filters;

  public FilterObjects() { 
  }

  @JsonCreator
  public FilterObjects(
    @JsonProperty(value=JSON_PROPERTY_DATASET, required=true) DatasetEnum dataset
  ) {
    this();
    this.dataset = dataset;
  }

  public FilterObjects dataset(DatasetEnum dataset) {
    this.dataset = dataset;
    return this;
  }

   /**
   * Type of dataset.
   * @return dataset
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "equities", required = true, value = "Type of dataset.")
  @JsonProperty(JSON_PROPERTY_DATASET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DatasetEnum getDataset() {
    return dataset;
  }


  @JsonProperty(JSON_PROPERTY_DATASET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDataset(DatasetEnum dataset) {
    this.dataset = dataset;
  }


  public FilterObjects filters(Filters filters) {
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Filters getFilters() {
    return filters;
  }


  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilters(Filters filters) {
    this.filters = filters;
  }


  /**
   * Return true if this filterObjects object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterObjects filterObjects = (FilterObjects) o;
    return Objects.equals(this.dataset, filterObjects.dataset) &&
        Objects.equals(this.filters, filterObjects.filters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataset, filters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterObjects {\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

