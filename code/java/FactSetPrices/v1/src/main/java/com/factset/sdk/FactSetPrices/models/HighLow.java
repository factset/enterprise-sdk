/*
 * FactSet Prices API
 * Gain access to comprehensive global coverage for Equities & Fixed Income. Perform quick analytics by controlling the date ranges, currencies, and rolling periods, or simply request Open, High, Low, and Close prices. Easily connect pricing data with other core company data or alternative content sets using FactSet's hub and spoke symbology. <p>Equity and Fund Security types include Common Stock, ADR, GDR, Preferred, Closed-ended Fund, Exchange Traded Fund, Unit, Open-ended Fund, Exchange Traded Fund UVI, Exchange Traded Fund NAV, Preferred Equity, Non-Voting Depositary Receipt/Certificate, Alien/Foreign, Structured Product, and Temporary Instruments. Reference over 180,000+ active and inactive securities.</p><p>Fixed Income Security Types include Corporate Bonds, Treasury and Agency bonds, Government Bonds, and Municipals.</p><p><b>Rate limit is set to 25 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetPrices.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetPrices.JSON;


/**
 * HighLow
 */
@JsonPropertyOrder({
  HighLow.JSON_PROPERTY_ADJ_DATE,
  HighLow.JSON_PROPERTY_DATE,
  HighLow.JSON_PROPERTY_PERIOD,
  HighLow.JSON_PROPERTY_FSYM_ID,
  HighLow.JSON_PROPERTY_PRICE_HIGH,
  HighLow.JSON_PROPERTY_PRICE_LOW,
  HighLow.JSON_PROPERTY_PRICE_HIGH_DATE,
  HighLow.JSON_PROPERTY_PRICE_LOW_DATE,
  HighLow.JSON_PROPERTY_REQUEST_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class HighLow implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ADJ_DATE = "adjDate";
  private JsonNullable<LocalDate> adjDate = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_DATE = "date";
  private JsonNullable<LocalDate> date = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_PERIOD = "period";
  private JsonNullable<String> period = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FSYM_ID = "fsymId";
  private JsonNullable<String> fsymId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PRICE_HIGH = "priceHigh";
  private JsonNullable<Double> priceHigh = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_PRICE_LOW = "priceLow";
  private JsonNullable<Double> priceLow = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_PRICE_HIGH_DATE = "priceHighDate";
  private JsonNullable<LocalDate> priceHighDate = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_PRICE_LOW_DATE = "priceLowDate";
  private JsonNullable<LocalDate> priceLowDate = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public HighLow() { 
  }

  public HighLow adjDate(LocalDate adjDate) {
    this.adjDate = JsonNullable.<LocalDate>of(adjDate);
    return this;
  }

   /**
   * Date of last split for which prices have been adjusted.
   * @return adjDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Mon Feb 07 00:00:00 UTC 2005", value = "Date of last split for which prices have been adjusted.")
  @JsonIgnore

  public LocalDate getAdjDate() {
        return adjDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ADJ_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getAdjDate_JsonNullable() {
    return adjDate;
  }
  
  @JsonProperty(JSON_PROPERTY_ADJ_DATE)
  public void setAdjDate_JsonNullable(JsonNullable<LocalDate> adjDate) {
    this.adjDate = adjDate;
  }

  public void setAdjDate(LocalDate adjDate) {
    this.adjDate = JsonNullable.<LocalDate>of(adjDate);
  }


  public HighLow date(LocalDate date) {
    this.date = JsonNullable.<LocalDate>of(date);
    return this;
  }

   /**
   * Specific reference date for the period expressed in YYYY-MM-DD format.
   * @return date
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Tue Jul 07 00:00:00 UTC 2020", value = "Specific reference date for the period expressed in YYYY-MM-DD format.")
  @JsonIgnore

  public LocalDate getDate() {
        return date.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getDate_JsonNullable() {
    return date;
  }
  
  @JsonProperty(JSON_PROPERTY_DATE)
  public void setDate_JsonNullable(JsonNullable<LocalDate> date) {
    this.date = date;
  }

  public void setDate(LocalDate date) {
    this.date = JsonNullable.<LocalDate>of(date);
  }


  public HighLow period(String period) {
    this.period = JsonNullable.<String>of(period);
    return this;
  }

   /**
   * The period of measure requested using the period query parameter.
   * @return period
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "52W", value = "The period of measure requested using the period query parameter.")
  @JsonIgnore

  public String getPeriod() {
        return period.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPeriod_JsonNullable() {
    return period;
  }
  
  @JsonProperty(JSON_PROPERTY_PERIOD)
  public void setPeriod_JsonNullable(JsonNullable<String> period) {
    this.period = period;
  }

  public void setPeriod(String period) {
    this.period = JsonNullable.<String>of(period);
  }


  public HighLow fsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
    return this;
  }

   /**
   * Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
   * @return fsymId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "HTM0LK-R", value = "Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.")
  @JsonIgnore

  public String getFsymId() {
        return fsymId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFsymId_JsonNullable() {
    return fsymId;
  }
  
  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  public void setFsymId_JsonNullable(JsonNullable<String> fsymId) {
    this.fsymId = fsymId;
  }

  public void setFsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
  }


  public HighLow priceHigh(Double priceHigh) {
    this.priceHigh = JsonNullable.<Double>of(priceHigh);
    return this;
  }

   /**
   * High price over the period requested. This can represent the intra-day or closing price depending on the priceType requested. By default the price is as of closing in local trading currency, split adjusted and not spinoff adjusted.
   * @return priceHigh
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "126", value = "High price over the period requested. This can represent the intra-day or closing price depending on the priceType requested. By default the price is as of closing in local trading currency, split adjusted and not spinoff adjusted.")
  @JsonIgnore

  public Double getPriceHigh() {
        return priceHigh.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE_HIGH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPriceHigh_JsonNullable() {
    return priceHigh;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE_HIGH)
  public void setPriceHigh_JsonNullable(JsonNullable<Double> priceHigh) {
    this.priceHigh = priceHigh;
  }

  public void setPriceHigh(Double priceHigh) {
    this.priceHigh = JsonNullable.<Double>of(priceHigh);
  }


  public HighLow priceLow(Double priceLow) {
    this.priceLow = JsonNullable.<Double>of(priceLow);
    return this;
  }

   /**
   * Low price over the period requested. This can represent the intra-day or closing price depending on the priceType requested. By default the price is as of closing in local trading currency, split adjusted and not spinoff adjusted.
   * @return priceLow
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "121.25", value = "Low price over the period requested. This can represent the intra-day or closing price depending on the priceType requested. By default the price is as of closing in local trading currency, split adjusted and not spinoff adjusted.")
  @JsonIgnore

  public Double getPriceLow() {
        return priceLow.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE_LOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPriceLow_JsonNullable() {
    return priceLow;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE_LOW)
  public void setPriceLow_JsonNullable(JsonNullable<Double> priceLow) {
    this.priceLow = priceLow;
  }

  public void setPriceLow(Double priceLow) {
    this.priceLow = JsonNullable.<Double>of(priceLow);
  }


  public HighLow priceHighDate(LocalDate priceHighDate) {
    this.priceHighDate = JsonNullable.<LocalDate>of(priceHighDate);
    return this;
  }

   /**
   * Date in which the highest price occurred over the requested period  for the given id expressed in YYYY-MM-DD format.
   * @return priceHighDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Thu Mar 05 00:00:00 UTC 2020", value = "Date in which the highest price occurred over the requested period  for the given id expressed in YYYY-MM-DD format.")
  @JsonIgnore

  public LocalDate getPriceHighDate() {
        return priceHighDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE_HIGH_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getPriceHighDate_JsonNullable() {
    return priceHighDate;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE_HIGH_DATE)
  public void setPriceHighDate_JsonNullable(JsonNullable<LocalDate> priceHighDate) {
    this.priceHighDate = priceHighDate;
  }

  public void setPriceHighDate(LocalDate priceHighDate) {
    this.priceHighDate = JsonNullable.<LocalDate>of(priceHighDate);
  }


  public HighLow priceLowDate(LocalDate priceLowDate) {
    this.priceLowDate = JsonNullable.<LocalDate>of(priceLowDate);
    return this;
  }

   /**
   * Date in which the lowest price occurred over the requested period for the given id expressed in YYYY-MM-DD format.
   * @return priceLowDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Sat Sep 14 00:00:00 UTC 2019", value = "Date in which the lowest price occurred over the requested period for the given id expressed in YYYY-MM-DD format.")
  @JsonIgnore

  public LocalDate getPriceLowDate() {
        return priceLowDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE_LOW_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getPriceLowDate_JsonNullable() {
    return priceLowDate;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE_LOW_DATE)
  public void setPriceLowDate_JsonNullable(JsonNullable<LocalDate> priceLowDate) {
    this.priceLowDate = priceLowDate;
  }

  public void setPriceLowDate(LocalDate priceLowDate) {
    this.priceLowDate = JsonNullable.<LocalDate>of(priceLowDate);
  }


  public HighLow requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier that was used for the request.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "GOOGL", value = "Identifier that was used for the request.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  /**
   * Return true if this highLow object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HighLow highLow = (HighLow) o;
    return equalsNullable(this.adjDate, highLow.adjDate) &&
        equalsNullable(this.date, highLow.date) &&
        equalsNullable(this.period, highLow.period) &&
        equalsNullable(this.fsymId, highLow.fsymId) &&
        equalsNullable(this.priceHigh, highLow.priceHigh) &&
        equalsNullable(this.priceLow, highLow.priceLow) &&
        equalsNullable(this.priceHighDate, highLow.priceHighDate) &&
        equalsNullable(this.priceLowDate, highLow.priceLowDate) &&
        Objects.equals(this.requestId, highLow.requestId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(adjDate), hashCodeNullable(date), hashCodeNullable(period), hashCodeNullable(fsymId), hashCodeNullable(priceHigh), hashCodeNullable(priceLow), hashCodeNullable(priceHighDate), hashCodeNullable(priceLowDate), requestId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HighLow {\n");
    sb.append("    adjDate: ").append(toIndentedString(adjDate)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    fsymId: ").append(toIndentedString(fsymId)).append("\n");
    sb.append("    priceHigh: ").append(toIndentedString(priceHigh)).append("\n");
    sb.append("    priceLow: ").append(toIndentedString(priceLow)).append("\n");
    sb.append("    priceHighDate: ").append(toIndentedString(priceHighDate)).append("\n");
    sb.append("    priceLowDate: ").append(toIndentedString(priceLowDate)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

