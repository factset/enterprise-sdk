/*
 * FactSet Prices API
 * Gain access to comprehensive global coverage for Equities & Fixed Income. Perform quick analytics by controlling the date ranges, currencies, and rolling periods, or simply request Open, High, Low, and Close prices. Easily connect pricing data with other core company data or alternative content sets using FactSet's hub and spoke symbology. <p>Equity and Fund Security types include Common Stock, ADR, GDR, Preferred, Closed-ended Fund, Exchange Traded Fund, Unit, Open-ended Fund, Exchange Traded Fund UVI, Exchange Traded Fund NAV, Preferred Equity, Non-Voting Depositary Receipt/Certificate, Alien/Foreign, Structured Product, and Temporary Instruments. Reference over 180,000+ active and inactive securities.</p><p>Fixed Income Security Types include Corporate Bonds, Treasury and Agency bonds, Government Bonds, and Municipals.</p><p><b>Rate limit is set to 25 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetPrices.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetPrices.JSON;


/**
 * MarketValue
 */
@JsonPropertyOrder({
  MarketValue.JSON_PROPERTY_FSYM_ID,
  MarketValue.JSON_PROPERTY_DATE,
  MarketValue.JSON_PROPERTY_CURRENCY,
  MarketValue.JSON_PROPERTY_ENTITY_MARKET_VALUE,
  MarketValue.JSON_PROPERTY_ENTITY_MARKET_VALUE_EX_NON_TRADED,
  MarketValue.JSON_PROPERTY_SECURITY_MARKET_VALUE,
  MarketValue.JSON_PROPERTY_REQUEST_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class MarketValue implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FSYM_ID = "fsymId";
  private JsonNullable<String> fsymId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DATE = "date";
  private JsonNullable<LocalDate> date = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private JsonNullable<String> currency = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENTITY_MARKET_VALUE = "entityMarketValue";
  private JsonNullable<Double> entityMarketValue = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_ENTITY_MARKET_VALUE_EX_NON_TRADED = "entityMarketValueExNonTraded";
  private JsonNullable<Double> entityMarketValueExNonTraded = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_SECURITY_MARKET_VALUE = "securityMarketValue";
  private JsonNullable<Double> securityMarketValue = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public MarketValue() { 
  }

  public MarketValue fsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
    return this;
  }

   /**
   * Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
   * @return fsymId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "HTM0LK-R", value = "Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.")
  @JsonIgnore

  public String getFsymId() {
        return fsymId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFsymId_JsonNullable() {
    return fsymId;
  }
  
  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  public void setFsymId_JsonNullable(JsonNullable<String> fsymId) {
    this.fsymId = fsymId;
  }

  public void setFsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
  }


  public MarketValue date(LocalDate date) {
    this.date = JsonNullable.<LocalDate>of(date);
    return this;
  }

   /**
   * Ending date for the period expressed in YYYY-MM-DD format.
   * @return date
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Tue Jul 07 00:00:00 UTC 2020", value = "Ending date for the period expressed in YYYY-MM-DD format.")
  @JsonIgnore

  public LocalDate getDate() {
        return date.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getDate_JsonNullable() {
    return date;
  }
  
  @JsonProperty(JSON_PROPERTY_DATE)
  public void setDate_JsonNullable(JsonNullable<LocalDate> date) {
    this.date = date;
  }

  public void setDate(LocalDate date) {
    this.date = JsonNullable.<LocalDate>of(date);
  }


  public MarketValue currency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
    return this;
  }

   /**
   * Currency ISO code. For more details, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "Currency ISO code. For more details, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).")
  @JsonIgnore

  public String getCurrency() {
        return currency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCurrency_JsonNullable() {
    return currency;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  public void setCurrency_JsonNullable(JsonNullable<String> currency) {
    this.currency = currency;
  }

  public void setCurrency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
  }


  public MarketValue entityMarketValue(Double entityMarketValue) {
    this.entityMarketValue = JsonNullable.<Double>of(entityMarketValue);
    return this;
  }

   /**
   * Aggregate market value across all share classes and includes non-traded shares which are added to the calculation basis by the proportion of their nominal or par value. Values are in base units. To value non-traded shares, the price of the parent equity provides the most appropriate approximation of what the non-traded shares would be worth in the open market. For unique companies with an ADR as the parent equity, since it is the only traded security associated with that company, when calculating company-level market value, the price of the ADR is used, but is scaled by the ADR ratio since there&#39;s not always a one-to-one relationship between ADR shares and the non-traded shares which they represent. For more details visit [Online Assistant Page #16867](https://my.apps.factset.com/oa/pages/16867). 
   * @return entityMarketValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1022362841136.31", value = "Aggregate market value across all share classes and includes non-traded shares which are added to the calculation basis by the proportion of their nominal or par value. Values are in base units. To value non-traded shares, the price of the parent equity provides the most appropriate approximation of what the non-traded shares would be worth in the open market. For unique companies with an ADR as the parent equity, since it is the only traded security associated with that company, when calculating company-level market value, the price of the ADR is used, but is scaled by the ADR ratio since there's not always a one-to-one relationship between ADR shares and the non-traded shares which they represent. For more details visit [Online Assistant Page #16867](https://my.apps.factset.com/oa/pages/16867). ")
  @JsonIgnore

  public Double getEntityMarketValue() {
        return entityMarketValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENTITY_MARKET_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getEntityMarketValue_JsonNullable() {
    return entityMarketValue;
  }
  
  @JsonProperty(JSON_PROPERTY_ENTITY_MARKET_VALUE)
  public void setEntityMarketValue_JsonNullable(JsonNullable<Double> entityMarketValue) {
    this.entityMarketValue = entityMarketValue;
  }

  public void setEntityMarketValue(Double entityMarketValue) {
    this.entityMarketValue = JsonNullable.<Double>of(entityMarketValue);
  }


  public MarketValue entityMarketValueExNonTraded(Double entityMarketValueExNonTraded) {
    this.entityMarketValueExNonTraded = JsonNullable.<Double>of(entityMarketValueExNonTraded);
    return this;
  }

   /**
   * Aggregate across all share classes and excludes non-traded shares. Values are in base units. For more details visit [Online Assistant Page #16867](https://my.apps.factset.com/oa/pages/16867).
   * @return entityMarketValueExNonTraded
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "952768582453.33", value = "Aggregate across all share classes and excludes non-traded shares. Values are in base units. For more details visit [Online Assistant Page #16867](https://my.apps.factset.com/oa/pages/16867).")
  @JsonIgnore

  public Double getEntityMarketValueExNonTraded() {
        return entityMarketValueExNonTraded.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENTITY_MARKET_VALUE_EX_NON_TRADED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getEntityMarketValueExNonTraded_JsonNullable() {
    return entityMarketValueExNonTraded;
  }
  
  @JsonProperty(JSON_PROPERTY_ENTITY_MARKET_VALUE_EX_NON_TRADED)
  public void setEntityMarketValueExNonTraded_JsonNullable(JsonNullable<Double> entityMarketValueExNonTraded) {
    this.entityMarketValueExNonTraded = entityMarketValueExNonTraded;
  }

  public void setEntityMarketValueExNonTraded(Double entityMarketValueExNonTraded) {
    this.entityMarketValueExNonTraded = JsonNullable.<Double>of(entityMarketValueExNonTraded);
  }


  public MarketValue securityMarketValue(Double securityMarketValue) {
    this.securityMarketValue = JsonNullable.<Double>of(securityMarketValue);
    return this;
  }

   /**
   * Returns the security level market value calculated as the share price multiplied by the number of shares at the security level. **Note:** History is available back to Oct-1999 for North American securities, and 1-Jan-2001 for non-North American securities.
   * @return securityMarketValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "449970657342.5", value = "Returns the security level market value calculated as the share price multiplied by the number of shares at the security level. **Note:** History is available back to Oct-1999 for North American securities, and 1-Jan-2001 for non-North American securities.")
  @JsonIgnore

  public Double getSecurityMarketValue() {
        return securityMarketValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SECURITY_MARKET_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getSecurityMarketValue_JsonNullable() {
    return securityMarketValue;
  }
  
  @JsonProperty(JSON_PROPERTY_SECURITY_MARKET_VALUE)
  public void setSecurityMarketValue_JsonNullable(JsonNullable<Double> securityMarketValue) {
    this.securityMarketValue = securityMarketValue;
  }

  public void setSecurityMarketValue(Double securityMarketValue) {
    this.securityMarketValue = JsonNullable.<Double>of(securityMarketValue);
  }


  public MarketValue requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier that was used for the request.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "GOOGL", value = "Identifier that was used for the request.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  /**
   * Return true if this marketValue object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketValue marketValue = (MarketValue) o;
    return equalsNullable(this.fsymId, marketValue.fsymId) &&
        equalsNullable(this.date, marketValue.date) &&
        equalsNullable(this.currency, marketValue.currency) &&
        equalsNullable(this.entityMarketValue, marketValue.entityMarketValue) &&
        equalsNullable(this.entityMarketValueExNonTraded, marketValue.entityMarketValueExNonTraded) &&
        equalsNullable(this.securityMarketValue, marketValue.securityMarketValue) &&
        Objects.equals(this.requestId, marketValue.requestId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(fsymId), hashCodeNullable(date), hashCodeNullable(currency), hashCodeNullable(entityMarketValue), hashCodeNullable(entityMarketValueExNonTraded), hashCodeNullable(securityMarketValue), requestId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketValue {\n");
    sb.append("    fsymId: ").append(toIndentedString(fsymId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    entityMarketValue: ").append(toIndentedString(entityMarketValue)).append("\n");
    sb.append("    entityMarketValueExNonTraded: ").append(toIndentedString(entityMarketValueExNonTraded)).append("\n");
    sb.append("    securityMarketValue: ").append(toIndentedString(securityMarketValue)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

