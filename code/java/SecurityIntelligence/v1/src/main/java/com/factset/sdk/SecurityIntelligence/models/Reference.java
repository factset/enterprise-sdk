/*
 * Security Intelligence API - V1
 * Surfaces AI generated summaries intended to provide up to date insights and guide users to currently relevant applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.SecurityIntelligence.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.SecurityIntelligence.JSON;


/**
 * Model for reference information with source links.
 */
@ApiModel(description = "Model for reference information with source links.")
@JsonPropertyOrder({
  Reference.JSON_PROPERTY_PHRASE,
  Reference.JSON_PROPERTY_URL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Reference implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PHRASE = "phrase";
  private String phrase;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public Reference() { 
  }

  @JsonCreator
  public Reference(
    @JsonProperty(value=JSON_PROPERTY_PHRASE, required=true) String phrase, 
    @JsonProperty(value=JSON_PROPERTY_URL, required=true) String url
  ) {
    this();
    this.phrase = phrase;
    this.url = url;
  }

  public Reference phrase(String phrase) {
    this.phrase = phrase;
    return this;
  }

   /**
   * Referenced text phrase from the content
   * @return phrase
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "significant stock price increase", required = true, value = "Referenced text phrase from the content")
  @JsonProperty(JSON_PROPERTY_PHRASE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPhrase() {
    return phrase;
  }


  @JsonProperty(JSON_PROPERTY_PHRASE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPhrase(String phrase) {
    this.phrase = phrase;
  }


  public Reference url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL to the source of the reference
   * @return url
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "https://example.com/source3", required = true, value = "URL to the source of the reference")
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(String url) {
    this.url = url;
  }


  /**
   * Return true if this Reference object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reference reference = (Reference) o;
    return Objects.equals(this.phrase, reference.phrase) &&
        Objects.equals(this.url, reference.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phrase, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reference {\n");
    sb.append("    phrase: ").append(toIndentedString(phrase)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

