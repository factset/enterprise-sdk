/*
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ProcuretoPayAPISCIM.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.ProcuretoPayAPISCIM.models.PatchOperation;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ProcuretoPayAPISCIM.JSON;


/**
 * The request body used for the HTTP PATCH server function (see RFC 7644 section 3.5.2.) This can be used to alter an individual SCIM resource.
 */
@ApiModel(description = "The request body used for the HTTP PATCH server function (see RFC 7644 section 3.5.2.) This can be used to alter an individual SCIM resource.")
@JsonPropertyOrder({
  Patch.JSON_PROPERTY_SCHEMAS,
  Patch.JSON_PROPERTY_OPERATIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Patch implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets schemas
   */
  public enum SchemasEnum {
    URN_IETF_PARAMS_SCIM_API_MESSAGES_2_0_PATCHOP("urn:ietf:params:scim:api:messages:2.0:PatchOp");

    private String value;

    SchemasEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SchemasEnum fromValue(String value) {
      for (SchemasEnum b : SchemasEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCHEMAS = "schemas";
  private java.util.List<SchemasEnum> schemas = null;

  public static final String JSON_PROPERTY_OPERATIONS = "Operations";
  private java.util.List<PatchOperation> operations = null;

  public Patch() { 
  }

  public Patch schemas(java.util.List<SchemasEnum> schemas) {
    this.schemas = schemas;
    return this;
  }

  public Patch addSchemasItem(SchemasEnum schemasItem) {
    if (this.schemas == null) {
      this.schemas = new java.util.ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * An array containing the standard schema URI used for SCIM PATCH requests.
   * @return schemas
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"]", value = "An array containing the standard schema URI used for SCIM PATCH requests.")
  @JsonProperty(JSON_PROPERTY_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<SchemasEnum> getSchemas() {
    return schemas;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchemas(java.util.List<SchemasEnum> schemas) {
    this.schemas = schemas;
  }


  public Patch operations(java.util.List<PatchOperation> operations) {
    this.operations = operations;
    return this;
  }

  public Patch addOperationsItem(PatchOperation operationsItem) {
    if (this.operations == null) {
      this.operations = new java.util.ArrayList<>();
    }
    this.operations.add(operationsItem);
    return this;
  }

   /**
   * The list of PATCH operations that should be applied for the PATCH request.
   * @return operations
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The list of PATCH operations that should be applied for the PATCH request.")
  @JsonProperty(JSON_PROPERTY_OPERATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<PatchOperation> getOperations() {
    return operations;
  }


  @JsonProperty(JSON_PROPERTY_OPERATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperations(java.util.List<PatchOperation> operations) {
    this.operations = operations;
  }


  /**
   * Return true if this Patch object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Patch patch = (Patch) o;
    return Objects.equals(this.schemas, patch.schemas) &&
        Objects.equals(this.operations, patch.operations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, operations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Patch {\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

