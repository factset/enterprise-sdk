/*
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ProcuretoPayAPISCIM.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ProcuretoPayAPISCIM.JSON;


/**
 * Error
 */
@JsonPropertyOrder({
  Error.JSON_PROPERTY_SCHEMAS,
  Error.JSON_PROPERTY_SCIM_TYPE,
  Error.JSON_PROPERTY_DETAIL,
  Error.JSON_PROPERTY_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Error implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets schemas
   */
  public enum SchemasEnum {
    URN_IETF_PARAMS_SCIM_API_MESSAGES_2_0_ERROR("urn:ietf:params:scim:api:messages:2.0:Error");

    private String value;

    SchemasEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SchemasEnum fromValue(String value) {
      for (SchemasEnum b : SchemasEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCHEMAS = "schemas";
  private java.util.List<SchemasEnum> schemas = null;

  /**
   * Gets or Sets scimType
   */
  public enum ScimTypeEnum {
    INVALIDFILTER("invalidFilter"),
    
    TOOMANY("tooMany"),
    
    UNIQUENESS("uniqueness"),
    
    MUTABILITY("mutability"),
    
    INVALIDSYNTAX("invalidSyntax"),
    
    INVALIDPATH("invalidPath"),
    
    NOTARGET("noTarget"),
    
    INVALIDVALUE("invalidValue"),
    
    INVALIDVERS("invalidVers"),
    
    SENSITIVE("sensitive");

    private String value;

    ScimTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ScimTypeEnum fromValue(String value) {
      for (ScimTypeEnum b : ScimTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCIM_TYPE = "scimType";
  private ScimTypeEnum scimType;

  public static final String JSON_PROPERTY_DETAIL = "detail";
  private String detail;

  /**
   * HTTP status code.
   */
  public enum StatusEnum {
    _307("307"),
    
    _308("308"),
    
    _400("400"),
    
    _401("401"),
    
    _403("403"),
    
    _404("404"),
    
    _409("409"),
    
    _412("412"),
    
    _413("413"),
    
    _500("500"),
    
    _501("501");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public Error() { 
  }

  public Error schemas(java.util.List<SchemasEnum> schemas) {
    this.schemas = schemas;
    return this;
  }

  public Error addSchemasItem(SchemasEnum schemasItem) {
    if (this.schemas == null) {
      this.schemas = new java.util.ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * An array containing the standard schema URI used for identifying an error. See RFC 7644 section 3.12.
   * @return schemas
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"urn:ietf:params:scim:api:messages:2.0:Error\"]", value = "An array containing the standard schema URI used for identifying an error. See RFC 7644 section 3.12.")
  @JsonProperty(JSON_PROPERTY_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<SchemasEnum> getSchemas() {
    return schemas;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchemas(java.util.List<SchemasEnum> schemas) {
    this.schemas = schemas;
  }


  public Error scimType(ScimTypeEnum scimType) {
    this.scimType = scimType;
    return this;
  }

   /**
   * Get scimType
   * @return scimType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "invalidValue", value = "")
  @JsonProperty(JSON_PROPERTY_SCIM_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ScimTypeEnum getScimType() {
    return scimType;
  }


  @JsonProperty(JSON_PROPERTY_SCIM_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScimType(ScimTypeEnum scimType) {
    this.scimType = scimType;
  }


  public Error detail(String detail) {
    this.detail = detail;
    return this;
  }

   /**
   * A detailed human-readable message.
   * @return detail
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "An unhandled exception occurred.", value = "A detailed human-readable message.")
  @JsonProperty(JSON_PROPERTY_DETAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDetail() {
    return detail;
  }


  @JsonProperty(JSON_PROPERTY_DETAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetail(String detail) {
    this.detail = detail;
  }


  public Error status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * HTTP status code.
   * @return status
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "500", value = "HTTP status code.")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * Return true if this Error object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Error error = (Error) o;
    return Objects.equals(this.schemas, error.schemas) &&
        Objects.equals(this.scimType, error.scimType) &&
        Objects.equals(this.detail, error.detail) &&
        Objects.equals(this.status, error.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, scimType, detail, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Error {\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    scimType: ").append(toIndentedString(scimType)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

