/*
 * FactSet Supply Chain API
 * Access the complex networks of key customer, suppliers, competitors and partners so that you can make insightful investment decisions. Relationship information is sourced from trusted primary sources and reverse-linked to non-disclosing parties, creating a comprehensive and consistent relationship graph. <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetSupplyChain.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetSupplyChain.JSON;


/**
 * Relationships
 */
@JsonPropertyOrder({
  Relationships.JSON_PROPERTY_ENTITY_ID,
  Relationships.JSON_PROPERTY_COMPANY_NAME,
  Relationships.JSON_PROPERTY_OVERLAPPING_PRODUCT_COUNT,
  Relationships.JSON_PROPERTY_OVERLAP_PERCENTAGE,
  Relationships.JSON_PROPERTY_RELATIONSHIP_DIRECTION,
  Relationships.JSON_PROPERTY_REQUEST_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Relationships implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private JsonNullable<String> entityId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_COMPANY_NAME = "companyName";
  private String companyName;

  public static final String JSON_PROPERTY_OVERLAPPING_PRODUCT_COUNT = "overlappingProductCount";
  private String overlappingProductCount;

  public static final String JSON_PROPERTY_OVERLAP_PERCENTAGE = "overlapPercentage";
  private Integer overlapPercentage;

  /**
   * Direction of Relationship indicates which company (target or source) determined the relationship.
   */
  public enum RelationshipDirectionEnum {
    MUTUAL("Mutual"),
    
    DIRECT("Direct"),
    
    REVERSE("Reverse");

    private String value;

    RelationshipDirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RelationshipDirectionEnum fromValue(String value) {
      for (RelationshipDirectionEnum b : RelationshipDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RELATIONSHIP_DIRECTION = "relationshipDirection";
  private RelationshipDirectionEnum relationshipDirection;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public Relationships() { 
  }

  public Relationships entityId(String entityId) {
    this.entityId = JsonNullable.<String>of(entityId);
    return this;
  }

   /**
   * Unique FactSet-generated identifier representing an entity for the current entity identifier (-E)
   * @return entityId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "000BGM-E", value = "Unique FactSet-generated identifier representing an entity for the current entity identifier (-E)")
  @JsonIgnore

  public String getEntityId() {
        return entityId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEntityId_JsonNullable() {
    return entityId;
  }
  
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  public void setEntityId_JsonNullable(JsonNullable<String> entityId) {
    this.entityId = entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = JsonNullable.<String>of(entityId);
  }


  public Relationships companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

   /**
   * Referring to the official name of a business entity.
   * @return companyName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Microsoft Corporation", value = "Referring to the official name of a business entity.")
  @JsonProperty(JSON_PROPERTY_COMPANY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCompanyName() {
    return companyName;
  }


  @JsonProperty(JSON_PROPERTY_COMPANY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public Relationships overlappingProductCount(String overlappingProductCount) {
    this.overlappingProductCount = overlappingProductCount;
    return this;
  }

   /**
   * Number of Product Overlap is determined by how many sectors matches in named products (determined by Revere Hierarchy) there are in a given relationship between the source and target company.
   * @return overlappingProductCount
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "28 of 138", value = "Number of Product Overlap is determined by how many sectors matches in named products (determined by Revere Hierarchy) there are in a given relationship between the source and target company.")
  @JsonProperty(JSON_PROPERTY_OVERLAPPING_PRODUCT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOverlappingProductCount() {
    return overlappingProductCount;
  }


  @JsonProperty(JSON_PROPERTY_OVERLAPPING_PRODUCT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverlappingProductCount(String overlappingProductCount) {
    this.overlappingProductCount = overlappingProductCount;
  }


  public Relationships overlapPercentage(Integer overlapPercentage) {
    this.overlapPercentage = overlapPercentage;
    return this;
  }

   /**
   * Product Overlap Percentage is the percent value of the preceding overlapping product count data item.
   * @return overlapPercentage
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "20", value = "Product Overlap Percentage is the percent value of the preceding overlapping product count data item.")
  @JsonProperty(JSON_PROPERTY_OVERLAP_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOverlapPercentage() {
    return overlapPercentage;
  }


  @JsonProperty(JSON_PROPERTY_OVERLAP_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverlapPercentage(Integer overlapPercentage) {
    this.overlapPercentage = overlapPercentage;
  }


  public Relationships relationshipDirection(RelationshipDirectionEnum relationshipDirection) {
    this.relationshipDirection = relationshipDirection;
    return this;
  }

   /**
   * Direction of Relationship indicates which company (target or source) determined the relationship.
   * @return relationshipDirection
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Mutual", value = "Direction of Relationship indicates which company (target or source) determined the relationship.")
  @JsonProperty(JSON_PROPERTY_RELATIONSHIP_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RelationshipDirectionEnum getRelationshipDirection() {
    return relationshipDirection;
  }


  @JsonProperty(JSON_PROPERTY_RELATIONSHIP_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelationshipDirection(RelationshipDirectionEnum relationshipDirection) {
    this.relationshipDirection = relationshipDirection;
  }


  public Relationships requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier used in &#x60;ids&#x60;.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "AAPL-US", value = "Identifier used in `ids`.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  /**
   * Return true if this relationships object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relationships relationships = (Relationships) o;
    return equalsNullable(this.entityId, relationships.entityId) &&
        Objects.equals(this.companyName, relationships.companyName) &&
        Objects.equals(this.overlappingProductCount, relationships.overlappingProductCount) &&
        Objects.equals(this.overlapPercentage, relationships.overlapPercentage) &&
        Objects.equals(this.relationshipDirection, relationships.relationshipDirection) &&
        Objects.equals(this.requestId, relationships.requestId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(entityId), companyName, overlappingProductCount, overlapPercentage, relationshipDirection, requestId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relationships {\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    overlappingProductCount: ").append(toIndentedString(overlappingProductCount)).append("\n");
    sb.append("    overlapPercentage: ").append(toIndentedString(overlapPercentage)).append("\n");
    sb.append("    relationshipDirection: ").append(toIndentedString(relationshipDirection)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

