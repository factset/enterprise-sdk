/*
 * News API
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetNews.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetNews.models.CreateOrEditViewTickers;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetNews.JSON;


/**
 * ViewsObject
 */
@JsonPropertyOrder({
  ViewsObject.JSON_PROPERTY_NAME,
  ViewsObject.JSON_PROPERTY_TICKERS,
  ViewsObject.JSON_PROPERTY_IS_PRIMARY,
  ViewsObject.JSON_PROPERTY_CATEGORIES,
  ViewsObject.JSON_PROPERTY_TOPICS,
  ViewsObject.JSON_PROPERTY_SOURCES,
  ViewsObject.JSON_PROPERTY_REGIONS,
  ViewsObject.JSON_PROPERTY_COUNTRIES,
  ViewsObject.JSON_PROPERTY_QUICK_ALERT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ViewsObject implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TICKERS = "tickers";
  private java.util.List<CreateOrEditViewTickers> tickers = null;

  public static final String JSON_PROPERTY_IS_PRIMARY = "isPrimary";
  private Boolean isPrimary;

  public static final String JSON_PROPERTY_CATEGORIES = "categories";
  private java.util.List<String> categories = null;

  public static final String JSON_PROPERTY_TOPICS = "topics";
  private java.util.List<String> topics = null;

  public static final String JSON_PROPERTY_SOURCES = "sources";
  private java.util.List<String> sources = null;

  public static final String JSON_PROPERTY_REGIONS = "regions";
  private java.util.List<String> regions = null;

  public static final String JSON_PROPERTY_COUNTRIES = "countries";
  private java.util.List<String> countries = null;

  public static final String JSON_PROPERTY_QUICK_ALERT = "quickAlert";
  private Boolean quickAlert;

  public ViewsObject() { 
  }

  public ViewsObject name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the view.
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FactSet News View", value = "Name of the view.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ViewsObject tickers(java.util.List<CreateOrEditViewTickers> tickers) {
    this.tickers = tickers;
    return this;
  }

  public ViewsObject addTickersItem(CreateOrEditViewTickers tickersItem) {
    if (this.tickers == null) {
      this.tickers = new java.util.ArrayList<>();
    }
    this.tickers.add(tickersItem);
    return this;
  }

   /**
   * Get tickers
   * @return tickers
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TICKERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<CreateOrEditViewTickers> getTickers() {
    return tickers;
  }


  @JsonProperty(JSON_PROPERTY_TICKERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTickers(java.util.List<CreateOrEditViewTickers> tickers) {
    this.tickers = tickers;
  }


  public ViewsObject isPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
    return this;
  }

   /**
   * If true, then only stories with the provided ticker as a primary symbol will be returned. When this parameter is false, the symbol is either primary OR a related symbol will be returned.
   * @return isPrimary
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "If true, then only stories with the provided ticker as a primary symbol will be returned. When this parameter is false, the symbol is either primary OR a related symbol will be returned.")
  @JsonProperty(JSON_PROPERTY_IS_PRIMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsPrimary() {
    return isPrimary;
  }


  @JsonProperty(JSON_PROPERTY_IS_PRIMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
  }


  public ViewsObject categories(java.util.List<String> categories) {
    this.categories = categories;
    return this;
  }

  public ViewsObject addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new java.util.ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getCategories() {
    return categories;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategories(java.util.List<String> categories) {
    this.categories = categories;
  }


  public ViewsObject topics(java.util.List<String> topics) {
    this.topics = topics;
    return this;
  }

  public ViewsObject addTopicsItem(String topicsItem) {
    if (this.topics == null) {
      this.topics = new java.util.ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

   /**
   * Get topics
   * @return topics
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TOPICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getTopics() {
    return topics;
  }


  @JsonProperty(JSON_PROPERTY_TOPICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTopics(java.util.List<String> topics) {
    this.topics = topics;
  }


  public ViewsObject sources(java.util.List<String> sources) {
    this.sources = sources;
    return this;
  }

  public ViewsObject addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new java.util.ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * Get sources
   * @return sources
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getSources() {
    return sources;
  }


  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSources(java.util.List<String> sources) {
    this.sources = sources;
  }


  public ViewsObject regions(java.util.List<String> regions) {
    this.regions = regions;
    return this;
  }

  public ViewsObject addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new java.util.ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

   /**
   * Get regions
   * @return regions
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REGIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getRegions() {
    return regions;
  }


  @JsonProperty(JSON_PROPERTY_REGIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegions(java.util.List<String> regions) {
    this.regions = regions;
  }


  public ViewsObject countries(java.util.List<String> countries) {
    this.countries = countries;
    return this;
  }

  public ViewsObject addCountriesItem(String countriesItem) {
    if (this.countries == null) {
      this.countries = new java.util.ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

   /**
   * Get countries
   * @return countries
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COUNTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getCountries() {
    return countries;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountries(java.util.List<String> countries) {
    this.countries = countries;
  }


  public ViewsObject quickAlert(Boolean quickAlert) {
    this.quickAlert = quickAlert;
    return this;
  }

   /**
   * Indicates whether quick alerts are enabled for the view. A value of &#39;true&#39; means quick alerts are enabled, while &#39;false&#39; means they are not.
   * @return quickAlert
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates whether quick alerts are enabled for the view. A value of 'true' means quick alerts are enabled, while 'false' means they are not.")
  @JsonProperty(JSON_PROPERTY_QUICK_ALERT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getQuickAlert() {
    return quickAlert;
  }


  @JsonProperty(JSON_PROPERTY_QUICK_ALERT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuickAlert(Boolean quickAlert) {
    this.quickAlert = quickAlert;
  }


  /**
   * Return true if this ViewsObject object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewsObject viewsObject = (ViewsObject) o;
    return Objects.equals(this.name, viewsObject.name) &&
        Objects.equals(this.tickers, viewsObject.tickers) &&
        Objects.equals(this.isPrimary, viewsObject.isPrimary) &&
        Objects.equals(this.categories, viewsObject.categories) &&
        Objects.equals(this.topics, viewsObject.topics) &&
        Objects.equals(this.sources, viewsObject.sources) &&
        Objects.equals(this.regions, viewsObject.regions) &&
        Objects.equals(this.countries, viewsObject.countries) &&
        Objects.equals(this.quickAlert, viewsObject.quickAlert);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, tickers, isPrimary, categories, topics, sources, regions, countries, quickAlert);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewsObject {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tickers: ").append(toIndentedString(tickers)).append("\n");
    sb.append("    isPrimary: ").append(toIndentedString(isPrimary)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    quickAlert: ").append(toIndentedString(quickAlert)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

