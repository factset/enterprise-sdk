/*
 * News API
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetNews.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetNews.JSON;


/**
 * StructuredFiltersCountriesObject
 */
@JsonPropertyOrder({
  StructuredFiltersCountriesObject.JSON_PROPERTY_NAME,
  StructuredFiltersCountriesObject.JSON_PROPERTY_VALUE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class StructuredFiltersCountriesObject implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_VALUE = "value";
  private java.util.List<String> value = new java.util.ArrayList<>();

  public StructuredFiltersCountriesObject() { 
  }

  @JsonCreator
  public StructuredFiltersCountriesObject(
    @JsonProperty(value=JSON_PROPERTY_NAME, required=true) String name, 
    @JsonProperty(value=JSON_PROPERTY_VALUE, required=true) java.util.List<String> value
  ) {
    this();
    this.name = name;
    this.value = value;
  }

  public StructuredFiltersCountriesObject name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the country.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Algeria", required = true, value = "The name of the country.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public StructuredFiltersCountriesObject value(java.util.List<String> value) {
    this.value = value;
    return this;
  }

  public StructuredFiltersCountriesObject addValueItem(String valueItem) {
    this.value.add(valueItem);
    return this;
  }

   /**
   * The values associated with the country.
   * @return value
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "[\"DZ\"]", required = true, value = "The values associated with the country.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.List<String> getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(java.util.List<String> value) {
    this.value = value;
  }


  /**
   * Return true if this StructuredFiltersCountriesObject object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StructuredFiltersCountriesObject structuredFiltersCountriesObject = (StructuredFiltersCountriesObject) o;
    return Objects.equals(this.name, structuredFiltersCountriesObject.name) &&
        Objects.equals(this.value, structuredFiltersCountriesObject.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StructuredFiltersCountriesObject {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

