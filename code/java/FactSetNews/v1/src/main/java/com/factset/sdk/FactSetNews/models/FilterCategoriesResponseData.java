/*
 * News API
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetNews.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetNews.models.FlattenedFiltersCategories;
import com.factset.sdk.FactSetNews.models.StructuredFiltersCategories;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetNews.JSON;


/**
 * FilterCategoriesResponseData
 */
@JsonPropertyOrder({
  FilterCategoriesResponseData.JSON_PROPERTY_STRUCTURED,
  FilterCategoriesResponseData.JSON_PROPERTY_FLATTENED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FilterCategoriesResponseData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_STRUCTURED = "structured";
  private StructuredFiltersCategories structured;

  public static final String JSON_PROPERTY_FLATTENED = "flattened";
  private FlattenedFiltersCategories flattened;

  public FilterCategoriesResponseData() { 
  }

  public FilterCategoriesResponseData structured(StructuredFiltersCategories structured) {
    this.structured = structured;
    return this;
  }

   /**
   * Get structured
   * @return structured
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STRUCTURED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StructuredFiltersCategories getStructured() {
    return structured;
  }


  @JsonProperty(JSON_PROPERTY_STRUCTURED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStructured(StructuredFiltersCategories structured) {
    this.structured = structured;
  }


  public FilterCategoriesResponseData flattened(FlattenedFiltersCategories flattened) {
    this.flattened = flattened;
    return this;
  }

   /**
   * Get flattened
   * @return flattened
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FLATTENED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FlattenedFiltersCategories getFlattened() {
    return flattened;
  }


  @JsonProperty(JSON_PROPERTY_FLATTENED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFlattened(FlattenedFiltersCategories flattened) {
    this.flattened = flattened;
  }


  /**
   * Return true if this FilterCategoriesResponse_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterCategoriesResponseData filterCategoriesResponseData = (FilterCategoriesResponseData) o;
    return Objects.equals(this.structured, filterCategoriesResponseData.structured) &&
        Objects.equals(this.flattened, filterCategoriesResponseData.flattened);
  }

  @Override
  public int hashCode() {
    return Objects.hash(structured, flattened);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterCategoriesResponseData {\n");
    sb.append("    structured: ").append(toIndentedString(structured)).append("\n");
    sb.append("    flattened: ").append(toIndentedString(flattened)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

