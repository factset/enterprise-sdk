/*
 * News API
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetNews.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetNews.models.CriteriaDetail;
import com.factset.sdk.FactSetNews.models.CriteriaOneOf;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetNews.JSON;


/**
 * Criteria object within a search object.
 */
@ApiModel(description = "Criteria object within a search object.")
@JsonPropertyOrder({
  Criteria.JSON_PROPERTY_FIELD,
  Criteria.JSON_PROPERTY_DETAIL,
  Criteria.JSON_PROPERTY_OPERATOR,
  Criteria.JSON_PROPERTY_EFFECT,
  Criteria.JSON_PROPERTY_SOURCE,
  Criteria.JSON_PROPERTY_CRITERIA,
  Criteria.JSON_PROPERTY_CASE_SENSITIVE,
  Criteria.JSON_PROPERTY_ENABLE_HIGHLIGHT,
  Criteria.JSON_PROPERTY_ENABLE_STEMMING,
  Criteria.JSON_PROPERTY_ENABLE_THESAURUS,
  Criteria.JSON_PROPERTY_TEXT_SEARCH_SLOP
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Criteria implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FIELD = "field";
  private String field;

  public static final String JSON_PROPERTY_DETAIL = "detail";
  private CriteriaDetail detail;

  public static final String JSON_PROPERTY_OPERATOR = "operator";
  private String operator;

  public static final String JSON_PROPERTY_EFFECT = "effect";
  private String effect;

  public static final String JSON_PROPERTY_SOURCE = "source";
  private java.util.List<String> source = null;

  public static final String JSON_PROPERTY_CRITERIA = "criteria";
  private CriteriaOneOf criteria;

  public static final String JSON_PROPERTY_CASE_SENSITIVE = "caseSensitive";
  private Boolean caseSensitive;

  public static final String JSON_PROPERTY_ENABLE_HIGHLIGHT = "enableHighlight";
  private Boolean enableHighlight;

  public static final String JSON_PROPERTY_ENABLE_STEMMING = "enableStemming";
  private Boolean enableStemming;

  public static final String JSON_PROPERTY_ENABLE_THESAURUS = "enableThesaurus";
  private Boolean enableThesaurus;

  public static final String JSON_PROPERTY_TEXT_SEARCH_SLOP = "textSearchSlop";
  private BigDecimal textSearchSlop;

  public Criteria() { 
  }

  public Criteria field(String field) {
    this.field = field;
    return this;
  }

   /**
   * Get field
   * @return field
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getField() {
    return field;
  }


  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setField(String field) {
    this.field = field;
  }


  public Criteria detail(CriteriaDetail detail) {
    this.detail = detail;
    return this;
  }

   /**
   * Get detail
   * @return detail
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DETAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CriteriaDetail getDetail() {
    return detail;
  }


  @JsonProperty(JSON_PROPERTY_DETAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetail(CriteriaDetail detail) {
    this.detail = detail;
  }


  public Criteria operator(String operator) {
    this.operator = operator;
    return this;
  }

   /**
   * Get operator
   * @return operator
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOperator() {
    return operator;
  }


  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperator(String operator) {
    this.operator = operator;
  }


  public Criteria effect(String effect) {
    this.effect = effect;
    return this;
  }

   /**
   * Get effect
   * @return effect
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EFFECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEffect() {
    return effect;
  }


  @JsonProperty(JSON_PROPERTY_EFFECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffect(String effect) {
    this.effect = effect;
  }


  public Criteria source(java.util.List<String> source) {
    this.source = source;
    return this;
  }

  public Criteria addSourceItem(String sourceItem) {
    if (this.source == null) {
      this.source = new java.util.ArrayList<>();
    }
    this.source.add(sourceItem);
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(java.util.List<String> source) {
    this.source = source;
  }


  public Criteria criteria(CriteriaOneOf criteria) {
    this.criteria = criteria;
    return this;
  }

   /**
   * Get criteria
   * @return criteria
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CRITERIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CriteriaOneOf getCriteria() {
    return criteria;
  }


  @JsonProperty(JSON_PROPERTY_CRITERIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCriteria(CriteriaOneOf criteria) {
    this.criteria = criteria;
  }


  public Criteria caseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

   /**
   * Get caseSensitive
   * @return caseSensitive
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CASE_SENSITIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCaseSensitive() {
    return caseSensitive;
  }


  @JsonProperty(JSON_PROPERTY_CASE_SENSITIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }


  public Criteria enableHighlight(Boolean enableHighlight) {
    this.enableHighlight = enableHighlight;
    return this;
  }

   /**
   * Get enableHighlight
   * @return enableHighlight
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ENABLE_HIGHLIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableHighlight() {
    return enableHighlight;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_HIGHLIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableHighlight(Boolean enableHighlight) {
    this.enableHighlight = enableHighlight;
  }


  public Criteria enableStemming(Boolean enableStemming) {
    this.enableStemming = enableStemming;
    return this;
  }

   /**
   * Get enableStemming
   * @return enableStemming
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ENABLE_STEMMING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableStemming() {
    return enableStemming;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_STEMMING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableStemming(Boolean enableStemming) {
    this.enableStemming = enableStemming;
  }


  public Criteria enableThesaurus(Boolean enableThesaurus) {
    this.enableThesaurus = enableThesaurus;
    return this;
  }

   /**
   * Get enableThesaurus
   * @return enableThesaurus
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ENABLE_THESAURUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableThesaurus() {
    return enableThesaurus;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_THESAURUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableThesaurus(Boolean enableThesaurus) {
    this.enableThesaurus = enableThesaurus;
  }


  public Criteria textSearchSlop(BigDecimal textSearchSlop) {
    this.textSearchSlop = textSearchSlop;
    return this;
  }

   /**
   * Get textSearchSlop
   * @return textSearchSlop
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TEXT_SEARCH_SLOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTextSearchSlop() {
    return textSearchSlop;
  }


  @JsonProperty(JSON_PROPERTY_TEXT_SEARCH_SLOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTextSearchSlop(BigDecimal textSearchSlop) {
    this.textSearchSlop = textSearchSlop;
  }


  /**
   * Return true if this Criteria object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Criteria criteria = (Criteria) o;
    return Objects.equals(this.field, criteria.field) &&
        Objects.equals(this.detail, criteria.detail) &&
        Objects.equals(this.operator, criteria.operator) &&
        Objects.equals(this.effect, criteria.effect) &&
        Objects.equals(this.source, criteria.source) &&
        Objects.equals(this.criteria, criteria.criteria) &&
        Objects.equals(this.caseSensitive, criteria.caseSensitive) &&
        Objects.equals(this.enableHighlight, criteria.enableHighlight) &&
        Objects.equals(this.enableStemming, criteria.enableStemming) &&
        Objects.equals(this.enableThesaurus, criteria.enableThesaurus) &&
        Objects.equals(this.textSearchSlop, criteria.textSearchSlop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, detail, operator, effect, source, criteria, caseSensitive, enableHighlight, enableStemming, enableThesaurus, textSearchSlop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Criteria {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    enableHighlight: ").append(toIndentedString(enableHighlight)).append("\n");
    sb.append("    enableStemming: ").append(toIndentedString(enableStemming)).append("\n");
    sb.append("    enableThesaurus: ").append(toIndentedString(enableThesaurus)).append("\n");
    sb.append("    textSearchSlop: ").append(toIndentedString(textSearchSlop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

