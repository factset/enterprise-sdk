/*
 * BookBuilder
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.BookBuilder.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.BookBuilder.JSON;


/**
 * ReportSection
 */
@JsonPropertyOrder({
  ReportSection.JSON_PROPERTY_SECTION_ID,
  ReportSection.JSON_PROPERTY_REPORTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ReportSection implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets sectionId
   */
  public enum SectionIdEnum {
    OVERVIEW("COMPANY_OVERVIEW"),
    
    GUIDE_OVERVIEW("COMPANY_GUIDE_OVERVIEW"),
    
    GUIDE_SALES_EARNINGS("COMPANY_GUIDE_SALES_EARNINGS"),
    
    GUIDE_VALUATION("COMPANY_GUIDE_VALUATION"),
    
    GUIDE_PROFITABILITY("COMPANY_GUIDE_PROFITABILITY"),
    
    GUIDE_STATEMENT_ANALYSIS("COMPANY_GUIDE_STATEMENT_ANALYSIS");

    private String value;

    SectionIdEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SectionIdEnum fromValue(String value) {
      for (SectionIdEnum b : SectionIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SECTION_ID = "section_id";
  private SectionIdEnum sectionId;

  /**
   * Gets or Sets reports
   */
  public enum ReportsEnum {
    COMPANY_SNAPSHOT("COMPANY_SNAPSHOT"),
    
    COMPANY_SNAPSHOT_IB("COMPANY_SNAPSHOT_IB"),
    
    COMPANY_SNAPSHOT_IM("COMPANY_SNAPSHOT_IM"),
    
    ENTITY_STRUCTURE("ENTITY_STRUCTURE"),
    
    EVENT_CALENDAR("EVENT_CALENDAR"),
    
    SUPPLY_CHAIN("SUPPLY_CHAIN"),
    
    CAPITAL_STRUCTURE("CAPITAL_STRUCTURE"),
    
    GEO_REV("GEO_REV"),
    
    RBICS_REV("RBICS_REV"),
    
    ESG("ESG");

    private String value;

    ReportsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReportsEnum fromValue(String value) {
      for (ReportsEnum b : ReportsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REPORTS = "reports";
  private java.util.List<ReportsEnum> reports = null;

  public ReportSection() { 
  }

  public ReportSection sectionId(SectionIdEnum sectionId) {
    this.sectionId = sectionId;
    return this;
  }

   /**
   * Get sectionId
   * @return sectionId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "COMPANY_OVERVIEW", value = "")
  @JsonProperty(JSON_PROPERTY_SECTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SectionIdEnum getSectionId() {
    return sectionId;
  }


  @JsonProperty(JSON_PROPERTY_SECTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSectionId(SectionIdEnum sectionId) {
    this.sectionId = sectionId;
  }


  public ReportSection reports(java.util.List<ReportsEnum> reports) {
    this.reports = reports;
    return this;
  }

  public ReportSection addReportsItem(ReportsEnum reportsItem) {
    if (this.reports == null) {
      this.reports = new java.util.ArrayList<>();
    }
    this.reports.add(reportsItem);
    return this;
  }

   /**
   * Get reports
   * @return reports
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"COMPANY_SNAPSHOT_IB\"]", value = "")
  @JsonProperty(JSON_PROPERTY_REPORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<ReportsEnum> getReports() {
    return reports;
  }


  @JsonProperty(JSON_PROPERTY_REPORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReports(java.util.List<ReportsEnum> reports) {
    this.reports = reports;
  }


  /**
   * Return true if this Report_Section object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportSection reportSection = (ReportSection) o;
    return Objects.equals(this.sectionId, reportSection.sectionId) &&
        Objects.equals(this.reports, reportSection.reports);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sectionId, reports);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportSection {\n");
    sb.append("    sectionId: ").append(toIndentedString(sectionId)).append("\n");
    sb.append("    reports: ").append(toIndentedString(reports)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

