apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.diffplug.spotless'

group = 'com.factset.sdk'
version = '0.22.2'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.17.1'
    }
}

repositories {
    mavenCentral()
}

if(hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 25
        buildToolsVersion '25.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 25
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies {
            provided "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
        }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDir
            task.destinationDir = project.file("${project.buildDir}/outputs/jar")
            task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task);
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts {
        archives sourcesJar
    }

} else {

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    task execute(type:JavaExec) {
       main = System.getProperty('mainClass')
       classpath = sourceSets.main.runtimeClasspath
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = 'exchangedatafeedsnapshotapisymbollist'

                from components.java

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'FactSet SDK for Java - exchangedatafeedsnapshotapisymbollist'
                    description = 'FactSet SDK for Java - exchangedatafeedsnapshotapisymbollist'
                    url = 'https://github.com/factset/enterprise-sdk'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'enterprisesdk'
                            organization = 'FactSet'
                            organizationUrl = 'https://developer.factset.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/factset/enterprise-sdk.git'
                        developerConnection = 'scm:git:ssh://factset/enterprise-sdk.git'
                        url = 'https://github.com/factset/enterprise-sdk/'
                    }
                }
            }
        }

        repositories {
            maven {
                url = version.endsWith('SNAPSHOT') ? System.getenv('MAVEN_SNAPSHOTS_URL') : System.getenv('MAVEN_RELEASES_URL')

                credentials {
                    username = System.getenv('MAVEN_USERNAME')
                    password = System.getenv('MAVEN_PASSWORD')
                }

                authentication {
                    digest(BasicAuthentication)
                }
            }
        }
    }



    signing {
        sign publishing.publications.mavenJava
    }
}

ext {
    swagger_annotations_version = "1.6.3"
    jackson_version = "2.15.0"
    jackson_databind_version = "2.15.0"
    jackson_databind_nullable_version = "0.2.2"
    jakarta_annotation_version = "2.1.1"
    jersey_version = "3.0.4"
    junit_version = "4.13.2"
    scribejava_apis_version = "8.3.1"
    sdk_utils_version = "1.1.3"
}

dependencies {
    implementation "io.swagger:swagger-annotations:$swagger_annotations_version"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "org.glassfish.jersey.core:jersey-client:$jersey_version"
    implementation "org.glassfish.jersey.inject:jersey-hk2:$jersey_version"
    implementation "org.glassfish.jersey.media:jersey-media-multipart:$jersey_version"
    implementation "org.glassfish.jersey.media:jersey-media-json-jackson:$jersey_version"
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_databind_version"

    implementation "org.glassfish.jersey.connectors:jersey-apache-connector"
    constraints {
        implementation "org.glassfish.jersey.connectors:jersey-apache-connector:$jersey_version"
        implementation('commons-codec:commons-codec:1.15') {
            because "version 1.11 has a security finding https://ossindex.sonatype.org/vulnerability/sonatype-2012-0050"
        }
    }

    implementation "org.openapitools:jackson-databind-nullable:$jackson_databind_nullable_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    implementation "com.github.scribejava:scribejava-apis:$scribejava_apis_version"
    implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
    implementation "com.factset.sdk:utils:$sdk_utils_version"
    testImplementation "junit:junit:$junit_version"
}

javadoc {
    options.tags = [ "http.response.details:a:Http Response Details" ]
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false

    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'
        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java
        // apply a specific flavor of google-java-format
        googleJavaFormat('1.8').aosp().reflowLongStrings()
        removeUnusedImports()
        importOrder()
    }
}
