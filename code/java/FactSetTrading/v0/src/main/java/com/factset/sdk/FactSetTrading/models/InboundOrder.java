/*
 * Trading API
 * Allow clients to trade orders.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetTrading.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetTrading.models.Instrument;
import com.factset.sdk.FactSetTrading.models.TimeInForce;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetTrading.JSON;


/**
 * Inbound Order
 */
@ApiModel(description = "Inbound Order")
@JsonPropertyOrder({
  InboundOrder.JSON_PROPERTY_CLIENT_ORDER_ID,
  InboundOrder.JSON_PROPERTY_INSTRUMENT,
  InboundOrder.JSON_PROPERTY_SIDE,
  InboundOrder.JSON_PROPERTY_ORDER_TYPE,
  InboundOrder.JSON_PROPERTY_ORDER_QUANTITY,
  InboundOrder.JSON_PROPERTY_PRICE,
  InboundOrder.JSON_PROPERTY_STOP_PRICE,
  InboundOrder.JSON_PROPERTY_STRIKE_PRICE,
  InboundOrder.JSON_PROPERTY_CURRENCY,
  InboundOrder.JSON_PROPERTY_IS_COVERED,
  InboundOrder.JSON_PROPERTY_MAX_SHOW,
  InboundOrder.JSON_PROPERTY_MAX_FLOOR,
  InboundOrder.JSON_PROPERTY_PREV_CLOSE_PRICE,
  InboundOrder.JSON_PROPERTY_SETTLEMENT_TYPE,
  InboundOrder.JSON_PROPERTY_SETTLEMENT_DATE,
  InboundOrder.JSON_PROPERTY_HANDLING_INSTRUCTIONS,
  InboundOrder.JSON_PROPERTY_EXECUTION_INSTRUCTIONS,
  InboundOrder.JSON_PROPERTY_LOCATE_REQUIRED,
  InboundOrder.JSON_PROPERTY_EFFECTIVE_TIME,
  InboundOrder.JSON_PROPERTY_ACCOUNT,
  InboundOrder.JSON_PROPERTY_TIME_IN_FORCE,
  InboundOrder.JSON_PROPERTY_INBOUND_DESTINATION,
  InboundOrder.JSON_PROPERTY_USER_DEFINED_FIELDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InboundOrder implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CLIENT_ORDER_ID = "clientOrderId";
  private JsonNullable<String> clientOrderId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_INSTRUMENT = "instrument";
  private Instrument instrument;

  /**
   * Side of the order.
   */
  public enum SideEnum {
    BUY("buy"),
    
    SELL("sell"),
    
    SELLSHORT("sellShort"),
    
    SELLSHORTEXEMPT("sellShortExempt");

    private String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SIDE = "side";
  private SideEnum side;

  /**
   * Type of the order
   */
  public enum OrderTypeEnum {
    MARKET("market"),
    
    LIMIT("limit"),
    
    STOP("stop"),
    
    STOPLIMIT("stopLimit"),
    
    MARKETONCLOSE("marketOnClose"),
    
    LIMITORBETTER("limitOrBetter");

    private String value;

    OrderTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrderTypeEnum fromValue(String value) {
      for (OrderTypeEnum b : OrderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ORDER_TYPE = "orderType";
  private OrderTypeEnum orderType;

  public static final String JSON_PROPERTY_ORDER_QUANTITY = "orderQuantity";
  private Double orderQuantity;

  public static final String JSON_PROPERTY_PRICE = "price";
  private JsonNullable<Double> price = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_STOP_PRICE = "stopPrice";
  private JsonNullable<Double> stopPrice = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_STRIKE_PRICE = "strikePrice";
  private JsonNullable<Double> strikePrice = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private JsonNullable<String> currency = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IS_COVERED = "isCovered";
  private JsonNullable<Boolean> isCovered = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_MAX_SHOW = "maxShow";
  private JsonNullable<Double> maxShow = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_MAX_FLOOR = "maxFloor";
  private JsonNullable<Double> maxFloor = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_PREV_CLOSE_PRICE = "prevClosePrice";
  private JsonNullable<Double> prevClosePrice = JsonNullable.<Double>undefined();

  /**
   * Order settlement period.
   */
  public enum SettlementTypeEnum {
    REGULAR("regular"),
    
    CASH("cash"),
    
    NEXTDAY("nextDay"),
    
    TPLUS2("tPlus2"),
    
    TPLUS3("tPlus3"),
    
    TPLUS4("tPlus4"),
    
    FUTURE("future"),
    
    WHENISSUED("whenIssued"),
    
    SELLERSOPTION("sellersOption"),
    
    TPLUS5("tPlus5");

    private String value;

    SettlementTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SettlementTypeEnum fromValue(String value) {
      for (SettlementTypeEnum b : SettlementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_SETTLEMENT_TYPE = "settlementType";
  private JsonNullable<SettlementTypeEnum> settlementType = JsonNullable.<SettlementTypeEnum>undefined();

  public static final String JSON_PROPERTY_SETTLEMENT_DATE = "settlementDate";
  private JsonNullable<String> settlementDate = JsonNullable.<String>undefined();

  /**
   * Instructions for order handling on Broker trading floor.
   */
  public enum HandlingInstructionsEnum {
    AUTOORDERPRIVATE("autoOrderPrivate"),
    
    AUTOORDERPUBLIC("autoOrderPublic"),
    
    BESTEXECUTION("bestExecution");

    private String value;

    HandlingInstructionsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HandlingInstructionsEnum fromValue(String value) {
      for (HandlingInstructionsEnum b : HandlingInstructionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_HANDLING_INSTRUCTIONS = "handlingInstructions";
  private JsonNullable<HandlingInstructionsEnum> handlingInstructions = JsonNullable.<HandlingInstructionsEnum>undefined();

  /**
   * Instructions for order handling on exchange trading floor.
   */
  public enum ExecutionInstructionsEnum {
    NOTHELD("notHeld"),
    
    WORK("work"),
    
    GOALONG("goAlong"),
    
    OVERTHEDAY("overTheDay"),
    
    HELD("held"),
    
    PARTICIPATEDONOTINITIATE("participateDoNotInitiate"),
    
    STRICTSCALE("strictScale"),
    
    TRYTOSCALE("tryToScale"),
    
    STAYONBIDSIDE("stayOnBidSide"),
    
    STAYONOFFERSIDE("stayOnOfferSide"),
    
    NOCROSS("noCross"),
    
    OKTOCROSS("okToCross"),
    
    CALLFIRST("callFirst"),
    
    PERCENTOFVOLUME("percentOfVolume"),
    
    DONOTINCREASE("doNotIncrease"),
    
    DONOTREDUCE("doNotReduce"),
    
    ALLORNONE("allOrNone"),
    
    REINSTATEONSYSTEMFAILURE("reinstateOnSystemFailure"),
    
    INSTITUTIONSONLY("institutionsOnly"),
    
    REINSTATEONTRADINGHALT("reinstateOnTradingHalt"),
    
    CANCELONTRADINGHALT("cancelOnTradingHalt"),
    
    LASTPEG("lastPeg"),
    
    MIDPRICEPEG("midPricePeg"),
    
    NONNEGOTIABLE("nonNegotiable"),
    
    OPENINGPEG("openingPeg"),
    
    MARKETPEG("marketPeg"),
    
    CANCELONSYSTEMFAILURE("cancelOnSystemFailure"),
    
    PRIMARYPEG("primaryPeg"),
    
    SUSPEND("suspend"),
    
    FIXEDPEGTOLOCALBESTBID("fixedPegToLocalBestBid"),
    
    CUSTOMERDISPLAYINSTRUCTION("customerDisplayInstruction"),
    
    NETTING("netting"),
    
    PEGTOVWAP("pegToVWAP"),
    
    TRADEALONG("tradeAlong"),
    
    TRYTOSTOP("tryToStop"),
    
    CANCELIFNOTBEST("cancelIfNotBest"),
    
    TRAILINGSTOPPEG("trailingStopPeg"),
    
    STRICTLIMIT("strictLimit"),
    
    IGNOREPRICEVALIDITYCHECKS("ignorePriceValidityChecks"),
    
    PEGTOLIMITPRICE("pegToLimitPrice"),
    
    WORKTOTARGETSTRATEGY("workToTargetStrategy"),
    
    INTERMARKETSWEEP("intermarketSweep"),
    
    EXTERNALROUTINGALLOWED("externalRoutingAllowed"),
    
    EXTERNALROUTINGNOTALLOWED("externalRoutingNotAllowed"),
    
    IMBALANCEONLY("imbalanceOnly"),
    
    SINGLEEXECUTIONREQUESTEDFORBLOCKTRADE("singleExecutionRequestedForBlockTrade"),
    
    BESTEXECUTION("bestExecution");

    private String value;

    ExecutionInstructionsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExecutionInstructionsEnum fromValue(String value) {
      for (ExecutionInstructionsEnum b : ExecutionInstructionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_EXECUTION_INSTRUCTIONS = "executionInstructions";
  private JsonNullable<ExecutionInstructionsEnum> executionInstructions = JsonNullable.<ExecutionInstructionsEnum>undefined();

  public static final String JSON_PROPERTY_LOCATE_REQUIRED = "locateRequired";
  private JsonNullable<Boolean> locateRequired = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_EFFECTIVE_TIME = "effectiveTime";
  private JsonNullable<String> effectiveTime = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ACCOUNT = "account";
  private JsonNullable<String> account = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TIME_IN_FORCE = "timeInForce";
  private TimeInForce timeInForce;

  public static final String JSON_PROPERTY_INBOUND_DESTINATION = "inboundDestination";
  private JsonNullable<String> inboundDestination = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_USER_DEFINED_FIELDS = "userDefinedFields";
  private JsonNullable<java.util.Map<String, String>> userDefinedFields = JsonNullable.<java.util.Map<String, String>>undefined();

  public InboundOrder() { 
  }

  @JsonCreator
  public InboundOrder(
    @JsonProperty(value=JSON_PROPERTY_INSTRUMENT, required=true) Instrument instrument, 
    @JsonProperty(value=JSON_PROPERTY_SIDE, required=true) SideEnum side, 
    @JsonProperty(value=JSON_PROPERTY_ORDER_TYPE, required=true) OrderTypeEnum orderType
  ) {
    this();
    this.instrument = instrument;
    this.side = side;
    this.orderType = orderType;
  }

  public InboundOrder clientOrderId(String clientOrderId) {
    this.clientOrderId = JsonNullable.<String>of(clientOrderId);
    return this;
  }

   /**
   * Unique id for the order
   * @return clientOrderId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "12322123", value = "Unique id for the order")
  @JsonIgnore

  public String getClientOrderId() {
        return clientOrderId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLIENT_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getClientOrderId_JsonNullable() {
    return clientOrderId;
  }
  
  @JsonProperty(JSON_PROPERTY_CLIENT_ORDER_ID)
  public void setClientOrderId_JsonNullable(JsonNullable<String> clientOrderId) {
    this.clientOrderId = clientOrderId;
  }

  public void setClientOrderId(String clientOrderId) {
    this.clientOrderId = JsonNullable.<String>of(clientOrderId);
  }


  public InboundOrder instrument(Instrument instrument) {
    this.instrument = instrument;
    return this;
  }

   /**
   * Get instrument
   * @return instrument
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Instrument getInstrument() {
    return instrument;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstrument(Instrument instrument) {
    this.instrument = instrument;
  }


  public InboundOrder side(SideEnum side) {
    this.side = side;
    return this;
  }

   /**
   * Side of the order.
   * @return side
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "buy", required = true, value = "Side of the order.")
  @JsonProperty(JSON_PROPERTY_SIDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SideEnum getSide() {
    return side;
  }


  @JsonProperty(JSON_PROPERTY_SIDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSide(SideEnum side) {
    this.side = side;
  }


  public InboundOrder orderType(OrderTypeEnum orderType) {
    this.orderType = orderType;
    return this;
  }

   /**
   * Type of the order
   * @return orderType
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "market", required = true, value = "Type of the order")
  @JsonProperty(JSON_PROPERTY_ORDER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OrderTypeEnum getOrderType() {
    return orderType;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrderType(OrderTypeEnum orderType) {
    this.orderType = orderType;
  }


  public InboundOrder orderQuantity(Double orderQuantity) {
    this.orderQuantity = orderQuantity;
    return this;
  }

   /**
   * Number of shares/Quantity.
   * minimum: 0
   * @return orderQuantity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "350.01", value = "Number of shares/Quantity.")
  @JsonProperty(JSON_PROPERTY_ORDER_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getOrderQuantity() {
    return orderQuantity;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrderQuantity(Double orderQuantity) {
    this.orderQuantity = orderQuantity;
  }


  public InboundOrder price(Double price) {
    this.price = JsonNullable.<Double>of(price);
    return this;
  }

   /**
   * Order price per share
   * @return price
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "800.01", value = "Order price per share")
  @JsonIgnore

  public Double getPrice() {
        return price.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPrice_JsonNullable() {
    return price;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE)
  public void setPrice_JsonNullable(JsonNullable<Double> price) {
    this.price = price;
  }

  public void setPrice(Double price) {
    this.price = JsonNullable.<Double>of(price);
  }


  public InboundOrder stopPrice(Double stopPrice) {
    this.stopPrice = JsonNullable.<Double>of(stopPrice);
    return this;
  }

   /**
   * Stop-loss price to buy/sell stock at market.
   * @return stopPrice
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "800.01", value = "Stop-loss price to buy/sell stock at market.")
  @JsonIgnore

  public Double getStopPrice() {
        return stopPrice.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STOP_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getStopPrice_JsonNullable() {
    return stopPrice;
  }
  
  @JsonProperty(JSON_PROPERTY_STOP_PRICE)
  public void setStopPrice_JsonNullable(JsonNullable<Double> stopPrice) {
    this.stopPrice = stopPrice;
  }

  public void setStopPrice(Double stopPrice) {
    this.stopPrice = JsonNullable.<Double>of(stopPrice);
  }


  public InboundOrder strikePrice(Double strikePrice) {
    this.strikePrice = JsonNullable.<Double>of(strikePrice);
    return this;
  }

   /**
   * Strike Price for an Option.
   * @return strikePrice
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "400.01", value = "Strike Price for an Option.")
  @JsonIgnore

  public Double getStrikePrice() {
        return strikePrice.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STRIKE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getStrikePrice_JsonNullable() {
    return strikePrice;
  }
  
  @JsonProperty(JSON_PROPERTY_STRIKE_PRICE)
  public void setStrikePrice_JsonNullable(JsonNullable<Double> strikePrice) {
    this.strikePrice = strikePrice;
  }

  public void setStrikePrice(Double strikePrice) {
    this.strikePrice = JsonNullable.<Double>of(strikePrice);
  }


  public InboundOrder currency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
    return this;
  }

   /**
   * Currency used for price in ISO format.
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "Currency used for price in ISO format.")
  @JsonIgnore

  public String getCurrency() {
        return currency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCurrency_JsonNullable() {
    return currency;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  public void setCurrency_JsonNullable(JsonNullable<String> currency) {
    this.currency = currency;
  }

  public void setCurrency(String currency) {
    this.currency = JsonNullable.<String>of(currency);
  }


  public InboundOrder isCovered(Boolean isCovered) {
    this.isCovered = JsonNullable.<Boolean>of(isCovered);
    return this;
  }

   /**
   * Signifies if a specific order is a covered order. A covered order is one that involves an investment strategy with the capability to limit the potential loss of the order.
   * @return isCovered
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Signifies if a specific order is a covered order. A covered order is one that involves an investment strategy with the capability to limit the potential loss of the order.")
  @JsonIgnore

  public Boolean getIsCovered() {
        return isCovered.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_COVERED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsCovered_JsonNullable() {
    return isCovered;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_COVERED)
  public void setIsCovered_JsonNullable(JsonNullable<Boolean> isCovered) {
    this.isCovered = isCovered;
  }

  public void setIsCovered(Boolean isCovered) {
    this.isCovered = JsonNullable.<Boolean>of(isCovered);
  }


  public InboundOrder maxShow(Double maxShow) {
    this.maxShow = JsonNullable.<Double>of(maxShow);
    return this;
  }

   /**
   * Maximum number of shares within an order to be shown to other customers.
   * @return maxShow
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "100.01", value = "Maximum number of shares within an order to be shown to other customers.")
  @JsonIgnore

  public Double getMaxShow() {
        return maxShow.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_SHOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getMaxShow_JsonNullable() {
    return maxShow;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_SHOW)
  public void setMaxShow_JsonNullable(JsonNullable<Double> maxShow) {
    this.maxShow = maxShow;
  }

  public void setMaxShow(Double maxShow) {
    this.maxShow = JsonNullable.<Double>of(maxShow);
  }


  public InboundOrder maxFloor(Double maxFloor) {
    this.maxFloor = JsonNullable.<Double>of(maxFloor);
    return this;
  }

   /**
   * Maximum number of shares within an order to be shown on the exchange floor at any given time.
   * @return maxFloor
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "100.01", value = "Maximum number of shares within an order to be shown on the exchange floor at any given time.")
  @JsonIgnore

  public Double getMaxFloor() {
        return maxFloor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_FLOOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getMaxFloor_JsonNullable() {
    return maxFloor;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_FLOOR)
  public void setMaxFloor_JsonNullable(JsonNullable<Double> maxFloor) {
    this.maxFloor = maxFloor;
  }

  public void setMaxFloor(Double maxFloor) {
    this.maxFloor = JsonNullable.<Double>of(maxFloor);
  }


  public InboundOrder prevClosePrice(Double prevClosePrice) {
    this.prevClosePrice = JsonNullable.<Double>of(prevClosePrice);
    return this;
  }

   /**
   * Previous closing price of security.
   * @return prevClosePrice
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "100.01", value = "Previous closing price of security.")
  @JsonIgnore

  public Double getPrevClosePrice() {
        return prevClosePrice.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PREV_CLOSE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPrevClosePrice_JsonNullable() {
    return prevClosePrice;
  }
  
  @JsonProperty(JSON_PROPERTY_PREV_CLOSE_PRICE)
  public void setPrevClosePrice_JsonNullable(JsonNullable<Double> prevClosePrice) {
    this.prevClosePrice = prevClosePrice;
  }

  public void setPrevClosePrice(Double prevClosePrice) {
    this.prevClosePrice = JsonNullable.<Double>of(prevClosePrice);
  }


  public InboundOrder settlementType(SettlementTypeEnum settlementType) {
    this.settlementType = JsonNullable.<SettlementTypeEnum>of(settlementType);
    return this;
  }

   /**
   * Order settlement period.
   * @return settlementType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "regular", value = "Order settlement period.")
  @JsonIgnore

  public SettlementTypeEnum getSettlementType() {
        return settlementType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SETTLEMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<SettlementTypeEnum> getSettlementType_JsonNullable() {
    return settlementType;
  }
  
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_TYPE)
  public void setSettlementType_JsonNullable(JsonNullable<SettlementTypeEnum> settlementType) {
    this.settlementType = settlementType;
  }

  public void setSettlementType(SettlementTypeEnum settlementType) {
    this.settlementType = JsonNullable.<SettlementTypeEnum>of(settlementType);
  }


  public InboundOrder settlementDate(String settlementDate) {
    this.settlementDate = JsonNullable.<String>of(settlementDate);
    return this;
  }

   /**
   * Settlement date of trade settlement in YYYYMMDD format
   * @return settlementDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "20210622", value = "Settlement date of trade settlement in YYYYMMDD format")
  @JsonIgnore

  public String getSettlementDate() {
        return settlementDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SETTLEMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSettlementDate_JsonNullable() {
    return settlementDate;
  }
  
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_DATE)
  public void setSettlementDate_JsonNullable(JsonNullable<String> settlementDate) {
    this.settlementDate = settlementDate;
  }

  public void setSettlementDate(String settlementDate) {
    this.settlementDate = JsonNullable.<String>of(settlementDate);
  }


  public InboundOrder handlingInstructions(HandlingInstructionsEnum handlingInstructions) {
    this.handlingInstructions = JsonNullable.<HandlingInstructionsEnum>of(handlingInstructions);
    return this;
  }

   /**
   * Instructions for order handling on Broker trading floor.
   * @return handlingInstructions
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "autoOrderPublic", value = "Instructions for order handling on Broker trading floor.")
  @JsonIgnore

  public HandlingInstructionsEnum getHandlingInstructions() {
        return handlingInstructions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HANDLING_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<HandlingInstructionsEnum> getHandlingInstructions_JsonNullable() {
    return handlingInstructions;
  }
  
  @JsonProperty(JSON_PROPERTY_HANDLING_INSTRUCTIONS)
  public void setHandlingInstructions_JsonNullable(JsonNullable<HandlingInstructionsEnum> handlingInstructions) {
    this.handlingInstructions = handlingInstructions;
  }

  public void setHandlingInstructions(HandlingInstructionsEnum handlingInstructions) {
    this.handlingInstructions = JsonNullable.<HandlingInstructionsEnum>of(handlingInstructions);
  }


  public InboundOrder executionInstructions(ExecutionInstructionsEnum executionInstructions) {
    this.executionInstructions = JsonNullable.<ExecutionInstructionsEnum>of(executionInstructions);
    return this;
  }

   /**
   * Instructions for order handling on exchange trading floor.
   * @return executionInstructions
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "notHeld", value = "Instructions for order handling on exchange trading floor.")
  @JsonIgnore

  public ExecutionInstructionsEnum getExecutionInstructions() {
        return executionInstructions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXECUTION_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ExecutionInstructionsEnum> getExecutionInstructions_JsonNullable() {
    return executionInstructions;
  }
  
  @JsonProperty(JSON_PROPERTY_EXECUTION_INSTRUCTIONS)
  public void setExecutionInstructions_JsonNullable(JsonNullable<ExecutionInstructionsEnum> executionInstructions) {
    this.executionInstructions = executionInstructions;
  }

  public void setExecutionInstructions(ExecutionInstructionsEnum executionInstructions) {
    this.executionInstructions = JsonNullable.<ExecutionInstructionsEnum>of(executionInstructions);
  }


  public InboundOrder locateRequired(Boolean locateRequired) {
    this.locateRequired = JsonNullable.<Boolean>of(locateRequired);
    return this;
  }

   /**
   * Indicates whether the broker is to locate the stock in conjunction with a short sell order.
   * @return locateRequired
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates whether the broker is to locate the stock in conjunction with a short sell order.")
  @JsonIgnore

  public Boolean getLocateRequired() {
        return locateRequired.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOCATE_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getLocateRequired_JsonNullable() {
    return locateRequired;
  }
  
  @JsonProperty(JSON_PROPERTY_LOCATE_REQUIRED)
  public void setLocateRequired_JsonNullable(JsonNullable<Boolean> locateRequired) {
    this.locateRequired = locateRequired;
  }

  public void setLocateRequired(Boolean locateRequired) {
    this.locateRequired = JsonNullable.<Boolean>of(locateRequired);
  }


  public InboundOrder effectiveTime(String effectiveTime) {
    this.effectiveTime = JsonNullable.<String>of(effectiveTime);
    return this;
  }

   /**
   * Effective time in YYYYMMDD-HH:MM:SS format expressed in UTC
   * @return effectiveTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "20210622-12:15:30", value = "Effective time in YYYYMMDD-HH:MM:SS format expressed in UTC")
  @JsonIgnore

  public String getEffectiveTime() {
        return effectiveTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EFFECTIVE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEffectiveTime_JsonNullable() {
    return effectiveTime;
  }
  
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_TIME)
  public void setEffectiveTime_JsonNullable(JsonNullable<String> effectiveTime) {
    this.effectiveTime = effectiveTime;
  }

  public void setEffectiveTime(String effectiveTime) {
    this.effectiveTime = JsonNullable.<String>of(effectiveTime);
  }


  public InboundOrder account(String account) {
    this.account = JsonNullable.<String>of(account);
    return this;
  }

   /**
   * Account for the basket, parent basket or position.
   * @return account
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Test.ACCT", value = "Account for the basket, parent basket or position.")
  @JsonIgnore

  public String getAccount() {
        return account.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAccount_JsonNullable() {
    return account;
  }
  
  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  public void setAccount_JsonNullable(JsonNullable<String> account) {
    this.account = account;
  }

  public void setAccount(String account) {
    this.account = JsonNullable.<String>of(account);
  }


  public InboundOrder timeInForce(TimeInForce timeInForce) {
    this.timeInForce = timeInForce;
    return this;
  }

   /**
   * Get timeInForce
   * @return timeInForce
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TIME_IN_FORCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TimeInForce getTimeInForce() {
    return timeInForce;
  }


  @JsonProperty(JSON_PROPERTY_TIME_IN_FORCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeInForce(TimeInForce timeInForce) {
    this.timeInForce = timeInForce;
  }


  public InboundOrder inboundDestination(String inboundDestination) {
    this.inboundDestination = JsonNullable.<String>of(inboundDestination);
    return this;
  }

   /**
   * To facilitate integration with translators that transform orders into a format compatible with the internal order routing and execution infrastructure.
   * @return inboundDestination
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "To facilitate integration with translators that transform orders into a format compatible with the internal order routing and execution infrastructure.")
  @JsonIgnore

  public String getInboundDestination() {
        return inboundDestination.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INBOUND_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getInboundDestination_JsonNullable() {
    return inboundDestination;
  }
  
  @JsonProperty(JSON_PROPERTY_INBOUND_DESTINATION)
  public void setInboundDestination_JsonNullable(JsonNullable<String> inboundDestination) {
    this.inboundDestination = inboundDestination;
  }

  public void setInboundDestination(String inboundDestination) {
    this.inboundDestination = JsonNullable.<String>of(inboundDestination);
  }


  public InboundOrder userDefinedFields(java.util.Map<String, String> userDefinedFields) {
    this.userDefinedFields = JsonNullable.<java.util.Map<String, String>>of(userDefinedFields);
    return this;
  }

  public InboundOrder putUserDefinedFieldsItem(String key, String userDefinedFieldsItem) {
    if (this.userDefinedFields == null || !this.userDefinedFields.isPresent()) {
      this.userDefinedFields = JsonNullable.<java.util.Map<String, String>>of(new java.util.HashMap<>());
    }
    try {
      this.userDefinedFields.get().put(key, userDefinedFieldsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * User defined fields
   * @return userDefinedFields
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "User defined fields")
  @JsonIgnore

  public java.util.Map<String, String> getUserDefinedFields() {
        return userDefinedFields.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_USER_DEFINED_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.Map<String, String>> getUserDefinedFields_JsonNullable() {
    return userDefinedFields;
  }
  
  @JsonProperty(JSON_PROPERTY_USER_DEFINED_FIELDS)
  public void setUserDefinedFields_JsonNullable(JsonNullable<java.util.Map<String, String>> userDefinedFields) {
    this.userDefinedFields = userDefinedFields;
  }

  public void setUserDefinedFields(java.util.Map<String, String> userDefinedFields) {
    this.userDefinedFields = JsonNullable.<java.util.Map<String, String>>of(userDefinedFields);
  }


  /**
   * Return true if this InboundOrder object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundOrder inboundOrder = (InboundOrder) o;
    return equalsNullable(this.clientOrderId, inboundOrder.clientOrderId) &&
        Objects.equals(this.instrument, inboundOrder.instrument) &&
        Objects.equals(this.side, inboundOrder.side) &&
        Objects.equals(this.orderType, inboundOrder.orderType) &&
        Objects.equals(this.orderQuantity, inboundOrder.orderQuantity) &&
        equalsNullable(this.price, inboundOrder.price) &&
        equalsNullable(this.stopPrice, inboundOrder.stopPrice) &&
        equalsNullable(this.strikePrice, inboundOrder.strikePrice) &&
        equalsNullable(this.currency, inboundOrder.currency) &&
        equalsNullable(this.isCovered, inboundOrder.isCovered) &&
        equalsNullable(this.maxShow, inboundOrder.maxShow) &&
        equalsNullable(this.maxFloor, inboundOrder.maxFloor) &&
        equalsNullable(this.prevClosePrice, inboundOrder.prevClosePrice) &&
        equalsNullable(this.settlementType, inboundOrder.settlementType) &&
        equalsNullable(this.settlementDate, inboundOrder.settlementDate) &&
        equalsNullable(this.handlingInstructions, inboundOrder.handlingInstructions) &&
        equalsNullable(this.executionInstructions, inboundOrder.executionInstructions) &&
        equalsNullable(this.locateRequired, inboundOrder.locateRequired) &&
        equalsNullable(this.effectiveTime, inboundOrder.effectiveTime) &&
        equalsNullable(this.account, inboundOrder.account) &&
        Objects.equals(this.timeInForce, inboundOrder.timeInForce) &&
        equalsNullable(this.inboundDestination, inboundOrder.inboundDestination) &&
        equalsNullable(this.userDefinedFields, inboundOrder.userDefinedFields);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(clientOrderId), instrument, side, orderType, orderQuantity, hashCodeNullable(price), hashCodeNullable(stopPrice), hashCodeNullable(strikePrice), hashCodeNullable(currency), hashCodeNullable(isCovered), hashCodeNullable(maxShow), hashCodeNullable(maxFloor), hashCodeNullable(prevClosePrice), hashCodeNullable(settlementType), hashCodeNullable(settlementDate), hashCodeNullable(handlingInstructions), hashCodeNullable(executionInstructions), hashCodeNullable(locateRequired), hashCodeNullable(effectiveTime), hashCodeNullable(account), timeInForce, hashCodeNullable(inboundDestination), hashCodeNullable(userDefinedFields));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundOrder {\n");
    sb.append("    clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
    sb.append("    instrument: ").append(toIndentedString(instrument)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    orderQuantity: ").append(toIndentedString(orderQuantity)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
    sb.append("    strikePrice: ").append(toIndentedString(strikePrice)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    isCovered: ").append(toIndentedString(isCovered)).append("\n");
    sb.append("    maxShow: ").append(toIndentedString(maxShow)).append("\n");
    sb.append("    maxFloor: ").append(toIndentedString(maxFloor)).append("\n");
    sb.append("    prevClosePrice: ").append(toIndentedString(prevClosePrice)).append("\n");
    sb.append("    settlementType: ").append(toIndentedString(settlementType)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    handlingInstructions: ").append(toIndentedString(handlingInstructions)).append("\n");
    sb.append("    executionInstructions: ").append(toIndentedString(executionInstructions)).append("\n");
    sb.append("    locateRequired: ").append(toIndentedString(locateRequired)).append("\n");
    sb.append("    effectiveTime: ").append(toIndentedString(effectiveTime)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("    inboundDestination: ").append(toIndentedString(inboundDestination)).append("\n");
    sb.append("    userDefinedFields: ").append(toIndentedString(userDefinedFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

