/*
 * Trading API
 * Allow clients to trade orders.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetTrading.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetTrading.JSON;


/**
 * Unique identifier to identify the parent order.
 */
@ApiModel(description = "Unique identifier to identify the parent order.")
@JsonPropertyOrder({
  ParentId.JSON_PROPERTY_SYMBOL,
  ParentId.JSON_PROPERTY_BASKET_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ParentId implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_BASKET_ID = "basketId";
  private String basketId;

  public ParentId() { 
  }

  @JsonCreator
  public ParentId(
    @JsonProperty(value=JSON_PROPERTY_SYMBOL, required=true) String symbol, 
    @JsonProperty(value=JSON_PROPERTY_BASKET_ID, required=true) String basketId
  ) {
    this();
    this.symbol = symbol;
    this.basketId = basketId;
  }

  public ParentId symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Ticker symbol
   * @return symbol
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "FDS-USA", required = true, value = "Ticker symbol")
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public ParentId basketId(String basketId) {
    this.basketId = basketId;
    return this;
  }

   /**
   * Unique identifier assigned to basket order. Can be fetched from the WebSocket Order Update API.
   * @return basketId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "FACTSET_OMS-100823_12345", required = true, value = "Unique identifier assigned to basket order. Can be fetched from the WebSocket Order Update API.")
  @JsonProperty(JSON_PROPERTY_BASKET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBasketId() {
    return basketId;
  }


  @JsonProperty(JSON_PROPERTY_BASKET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBasketId(String basketId) {
    this.basketId = basketId;
  }


  /**
   * Return true if this ParentId object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParentId parentId = (ParentId) o;
    return Objects.equals(this.symbol, parentId.symbol) &&
        Objects.equals(this.basketId, parentId.basketId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, basketId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParentId {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    basketId: ").append(toIndentedString(basketId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

