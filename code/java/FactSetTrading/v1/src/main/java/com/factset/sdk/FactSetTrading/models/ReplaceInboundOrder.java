/*
 * Trading API
 * Allow clients to trade orders.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetTrading.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetTrading.models.InboundOrder;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetTrading.JSON;


/**
 * Replace Inbound Order
 */
@ApiModel(description = "Replace Inbound Order")
@JsonPropertyOrder({
  ReplaceInboundOrder.JSON_PROPERTY_ORIGINAL_CLIENT_ORDER_ID,
  ReplaceInboundOrder.JSON_PROPERTY_INBOUND_ORDER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ReplaceInboundOrder implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ORIGINAL_CLIENT_ORDER_ID = "originalClientOrderId";
  private String originalClientOrderId;

  public static final String JSON_PROPERTY_INBOUND_ORDER = "inboundOrder";
  private InboundOrder inboundOrder;

  public ReplaceInboundOrder() { 
  }

  @JsonCreator
  public ReplaceInboundOrder(
    @JsonProperty(value=JSON_PROPERTY_ORIGINAL_CLIENT_ORDER_ID, required=true) String originalClientOrderId, 
    @JsonProperty(value=JSON_PROPERTY_INBOUND_ORDER, required=true) InboundOrder inboundOrder
  ) {
    this();
    this.originalClientOrderId = originalClientOrderId;
    this.inboundOrder = inboundOrder;
  }

  public ReplaceInboundOrder originalClientOrderId(String originalClientOrderId) {
    this.originalClientOrderId = originalClientOrderId;
    return this;
  }

   /**
   * Unique identifier of the original order, generated in Create.
   * @return originalClientOrderId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique identifier of the original order, generated in Create.")
  @JsonProperty(JSON_PROPERTY_ORIGINAL_CLIENT_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOriginalClientOrderId() {
    return originalClientOrderId;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_CLIENT_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOriginalClientOrderId(String originalClientOrderId) {
    this.originalClientOrderId = originalClientOrderId;
  }


  public ReplaceInboundOrder inboundOrder(InboundOrder inboundOrder) {
    this.inboundOrder = inboundOrder;
    return this;
  }

   /**
   * Get inboundOrder
   * @return inboundOrder
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_INBOUND_ORDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public InboundOrder getInboundOrder() {
    return inboundOrder;
  }


  @JsonProperty(JSON_PROPERTY_INBOUND_ORDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInboundOrder(InboundOrder inboundOrder) {
    this.inboundOrder = inboundOrder;
  }


  /**
   * Return true if this ReplaceInboundOrder object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplaceInboundOrder replaceInboundOrder = (ReplaceInboundOrder) o;
    return Objects.equals(this.originalClientOrderId, replaceInboundOrder.originalClientOrderId) &&
        Objects.equals(this.inboundOrder, replaceInboundOrder.inboundOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(originalClientOrderId, inboundOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplaceInboundOrder {\n");
    sb.append("    originalClientOrderId: ").append(toIndentedString(originalClientOrderId)).append("\n");
    sb.append("    inboundOrder: ").append(toIndentedString(inboundOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

