/*
 * Portfolio Reporting Batcher
 * The Portfolio Reporting Batcher (PRB) API allows clients to systematically leverage functionalities of the PRB application.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.PortfolioReportingBatcher.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.PortfolioReportingBatcher.models.JobOverridesCombinationsRootDateRange;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.PortfolioReportingBatcher.JSON;


/**
 * This creates a matrix of the given details. When the job is run, it will only run for the accounts, dates and/or tasks within the objects given. Dates can be specified either by giving individual dates in the &#x60;dates&#x60; parameter, or by using the &#x60;dateRange&#x60; parameter for where these are supported. The job will fail if both are provided. (Settings will only be used temporarily and no changes will be made to the default PRB job.) Certain parameters are only valid for certain job types. Please see below for more details.
 */
@ApiModel(description = "This creates a matrix of the given details. When the job is run, it will only run for the accounts, dates and/or tasks within the objects given. Dates can be specified either by giving individual dates in the `dates` parameter, or by using the `dateRange` parameter for where these are supported. The job will fail if both are provided. (Settings will only be used temporarily and no changes will be made to the default PRB job.) Certain parameters are only valid for certain job types. Please see below for more details.")
@JsonPropertyOrder({
  JobOverridesCombinationsRoot.JSON_PROPERTY_ACCOUNTS,
  JobOverridesCombinationsRoot.JSON_PROPERTY_DATES,
  JobOverridesCombinationsRoot.JSON_PROPERTY_DATE_RANGE,
  JobOverridesCombinationsRoot.JSON_PROPERTY_TASKS,
  JobOverridesCombinationsRoot.JSON_PROPERTY_ALL_TASKS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class JobOverridesCombinationsRoot implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ACCOUNTS = "accounts";
  private java.util.List<String> accounts = null;

  public static final String JSON_PROPERTY_DATES = "dates";
  private java.util.List<LocalDate> dates = null;

  public static final String JSON_PROPERTY_DATE_RANGE = "dateRange";
  private JobOverridesCombinationsRootDateRange dateRange;

  public static final String JSON_PROPERTY_TASKS = "tasks";
  private java.util.List<String> tasks = null;

  public static final String JSON_PROPERTY_ALL_TASKS = "allTasks";
  private Boolean allTasks;

  public JobOverridesCombinationsRoot() { 
  }

  public JobOverridesCombinationsRoot accounts(java.util.List<String> accounts) {
    this.accounts = accounts;
    return this;
  }

  public JobOverridesCombinationsRoot addAccountsItem(String accountsItem) {
    if (this.accounts == null) {
      this.accounts = new java.util.ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

   /**
   * An array of accounts, used for jobs types PA, ADF, PUB, and Vault
   * @return accounts
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "An array of accounts, used for jobs types PA, ADF, PUB, and Vault")
  @JsonProperty(JSON_PROPERTY_ACCOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getAccounts() {
    return accounts;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccounts(java.util.List<String> accounts) {
    this.accounts = accounts;
  }


  public JobOverridesCombinationsRoot dates(java.util.List<LocalDate> dates) {
    this.dates = dates;
    return this;
  }

  public JobOverridesCombinationsRoot addDatesItem(LocalDate datesItem) {
    if (this.dates == null) {
      this.dates = new java.util.ArrayList<>();
    }
    this.dates.add(datesItem);
    return this;
  }

   /**
   * An array of dates, used for jobs types PA, ADF, PUB, and Vault. Please see OA Page 23173 for more details
   * @return dates
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "An array of dates, used for jobs types PA, ADF, PUB, and Vault. Please see OA Page 23173 for more details")
  @JsonProperty(JSON_PROPERTY_DATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<LocalDate> getDates() {
    return dates;
  }


  @JsonProperty(JSON_PROPERTY_DATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDates(java.util.List<LocalDate> dates) {
    this.dates = dates;
  }


  public JobOverridesCombinationsRoot dateRange(JobOverridesCombinationsRootDateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

   /**
   * Get dateRange
   * @return dateRange
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DATE_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JobOverridesCombinationsRootDateRange getDateRange() {
    return dateRange;
  }


  @JsonProperty(JSON_PROPERTY_DATE_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDateRange(JobOverridesCombinationsRootDateRange dateRange) {
    this.dateRange = dateRange;
  }


  public JobOverridesCombinationsRoot tasks(java.util.List<String> tasks) {
    this.tasks = tasks;
    return this;
  }

  public JobOverridesCombinationsRoot addTasksItem(String tasksItem) {
    if (this.tasks == null) {
      this.tasks = new java.util.ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Used only for jobs where type is ADF, PA, PUB, or vault
   * @return tasks
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Used only for jobs where type is ADF, PA, PUB, or vault")
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getTasks() {
    return tasks;
  }


  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTasks(java.util.List<String> tasks) {
    this.tasks = tasks;
  }


  public JobOverridesCombinationsRoot allTasks(Boolean allTasks) {
    this.allTasks = allTasks;
    return this;
  }

   /**
   * boolean flag to indicate if all tasks for given ADF, PA, PUB, or vault job should be run, e.g. if account is newly created and not yet added to any tasks
   * @return allTasks
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "boolean flag to indicate if all tasks for given ADF, PA, PUB, or vault job should be run, e.g. if account is newly created and not yet added to any tasks")
  @JsonProperty(JSON_PROPERTY_ALL_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllTasks() {
    return allTasks;
  }


  @JsonProperty(JSON_PROPERTY_ALL_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllTasks(Boolean allTasks) {
    this.allTasks = allTasks;
  }


  /**
   * Return true if this JobOverridesCombinationsRoot object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobOverridesCombinationsRoot jobOverridesCombinationsRoot = (JobOverridesCombinationsRoot) o;
    return Objects.equals(this.accounts, jobOverridesCombinationsRoot.accounts) &&
        Objects.equals(this.dates, jobOverridesCombinationsRoot.dates) &&
        Objects.equals(this.dateRange, jobOverridesCombinationsRoot.dateRange) &&
        Objects.equals(this.tasks, jobOverridesCombinationsRoot.tasks) &&
        Objects.equals(this.allTasks, jobOverridesCombinationsRoot.allTasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounts, dates, dateRange, tasks, allTasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobOverridesCombinationsRoot {\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    allTasks: ").append(toIndentedString(allTasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

