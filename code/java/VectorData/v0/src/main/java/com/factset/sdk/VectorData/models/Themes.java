/*
 * Vector Data API
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.VectorData.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.VectorData.JSON;


/**
 * elements of themes.
 */
@ApiModel(description = "elements of themes.")
@JsonPropertyOrder({
  Themes.JSON_PROPERTY_ESG_THEME,
  Themes.JSON_PROPERTY_SEARCH_CONCEPT,
  Themes.JSON_PROPERTY_SENTIMENT,
  Themes.JSON_PROPERTY_DESCRIPTION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Themes implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ESG_THEME = "esgTheme";
  private String esgTheme;

  public static final String JSON_PROPERTY_SEARCH_CONCEPT = "searchConcept";
  private String searchConcept;

  public static final String JSON_PROPERTY_SENTIMENT = "sentiment";
  private String sentiment;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public Themes() { 
  }

  @JsonCreator
  public Themes(
    @JsonProperty(value=JSON_PROPERTY_DESCRIPTION, required=true) String description
  ) {
    this();
    this.description = description;
  }

  public Themes esgTheme(String esgTheme) {
    this.esgTheme = esgTheme;
    return this;
  }

   /**
   * theme of the source.
   * @return esgTheme
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Accessible Food", value = "theme of the source.")
  @JsonProperty(JSON_PROPERTY_ESG_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEsgTheme() {
    return esgTheme;
  }


  @JsonProperty(JSON_PROPERTY_ESG_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEsgTheme(String esgTheme) {
    this.esgTheme = esgTheme;
  }


  public Themes searchConcept(String searchConcept) {
    this.searchConcept = searchConcept;
    return this;
  }

   /**
   * theme of the source.
   * @return searchConcept
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Tariff", value = "theme of the source.")
  @JsonProperty(JSON_PROPERTY_SEARCH_CONCEPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSearchConcept() {
    return searchConcept;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_CONCEPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearchConcept(String searchConcept) {
    this.searchConcept = searchConcept;
  }


  public Themes sentiment(String sentiment) {
    this.sentiment = sentiment;
    return this;
  }

   /**
   * theme of the source.
   * @return sentiment
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Negative", value = "theme of the source.")
  @JsonProperty(JSON_PROPERTY_SENTIMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSentiment() {
    return sentiment;
  }


  @JsonProperty(JSON_PROPERTY_SENTIMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSentiment(String sentiment) {
    this.sentiment = sentiment;
  }


  public Themes description(String description) {
    this.description = description;
    return this;
  }

   /**
   * theme description
   * @return description
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "A tax imposed by a government on imports or exports of goods.", required = true, value = "theme description")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Return true if this Themes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Themes themes = (Themes) o;
    return Objects.equals(this.esgTheme, themes.esgTheme) &&
        Objects.equals(this.searchConcept, themes.searchConcept) &&
        Objects.equals(this.sentiment, themes.sentiment) &&
        Objects.equals(this.description, themes.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(esgTheme, searchConcept, sentiment, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Themes {\n");
    sb.append("    esgTheme: ").append(toIndentedString(esgTheme)).append("\n");
    sb.append("    searchConcept: ").append(toIndentedString(searchConcept)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

