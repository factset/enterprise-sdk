/*
 * Vector Data API
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.VectorData.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.VectorData.JSON;


/**
 * Elements of vetctor data request.
 */
@ApiModel(description = "Elements of vetctor data request.")
@JsonPropertyOrder({
  VectorDataRequestData.JSON_PROPERTY_QUERY,
  VectorDataRequestData.JSON_PROPERTY_START_DATE,
  VectorDataRequestData.JSON_PROPERTY_END_DATE,
  VectorDataRequestData.JSON_PROPERTY_ESG_THEME,
  VectorDataRequestData.JSON_PROPERTY_SEARCH_CONCEPT,
  VectorDataRequestData.JSON_PROPERTY_SENTIMENT,
  VectorDataRequestData.JSON_PROPERTY_DOCUMENT_TYPES,
  VectorDataRequestData.JSON_PROPERTY_SOURCES,
  VectorDataRequestData.JSON_PROPERTY_TRIMMED,
  VectorDataRequestData.JSON_PROPERTY_IDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class VectorDataRequestData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_QUERY = "query";
  private String query;

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  private LocalDate startDate;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  private LocalDate endDate;

  public static final String JSON_PROPERTY_ESG_THEME = "esgTheme";
  private java.util.Set<String> esgTheme = null;

  public static final String JSON_PROPERTY_SEARCH_CONCEPT = "searchConcept";
  private java.util.Set<String> searchConcept = null;

  public static final String JSON_PROPERTY_SENTIMENT = "sentiment";
  private java.util.Set<String> sentiment = null;

  public static final String JSON_PROPERTY_DOCUMENT_TYPES = "documentTypes";
  private java.util.Set<String> documentTypes = null;

  public static final String JSON_PROPERTY_SOURCES = "sources";
  private java.util.Set<String> sources = new java.util.LinkedHashSet<>();

  public static final String JSON_PROPERTY_TRIMMED = "trimmed";
  private Boolean trimmed = false;

  public static final String JSON_PROPERTY_IDS = "ids";
  private java.util.List<String> ids = null;

  public VectorDataRequestData() { 
  }

  @JsonCreator
  public VectorDataRequestData(
    @JsonProperty(value=JSON_PROPERTY_QUERY, required=true) String query, 
    @JsonProperty(value=JSON_PROPERTY_START_DATE, required=true) LocalDate startDate, 
    @JsonProperty(value=JSON_PROPERTY_END_DATE, required=true) LocalDate endDate, 
    @JsonProperty(value=JSON_PROPERTY_SOURCES, required=true) java.util.Set<String> sources
  ) {
    this();
    this.query = query;
    this.startDate = startDate;
    this.endDate = endDate;
    this.sources = sources;
  }

  public VectorDataRequestData query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Search to include the query text.
   * @return query
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Updates", required = true, value = "Search to include the query text.")
  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getQuery() {
    return query;
  }


  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuery(String query) {
    this.query = query;
  }


  public VectorDataRequestData startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Start Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Fri Dec 22 00:00:00 UTC 2023", required = true, value = "Start Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).")
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getStartDate() {
    return startDate;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public VectorDataRequestData endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * End Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).
   * @return endDate
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Sat Dec 23 00:00:00 UTC 2023", required = true, value = "End Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).")
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getEndDate() {
    return endDate;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public VectorDataRequestData esgTheme(java.util.Set<String> esgTheme) {
    this.esgTheme = esgTheme;
    return this;
  }

  public VectorDataRequestData addEsgThemeItem(String esgThemeItem) {
    if (this.esgTheme == null) {
      this.esgTheme = new java.util.LinkedHashSet<>();
    }
    this.esgTheme.add(esgThemeItem);
    return this;
  }

   /**
   * The search to include any esg themes of given sources.
   * @return esgTheme
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"Workplace Diversity\",\"Accessible Food\"]", value = "The search to include any esg themes of given sources.")
  @JsonProperty(JSON_PROPERTY_ESG_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.Set<String> getEsgTheme() {
    return esgTheme;
  }


  @JsonProperty(JSON_PROPERTY_ESG_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEsgTheme(java.util.Set<String> esgTheme) {
    this.esgTheme = esgTheme;
  }


  public VectorDataRequestData searchConcept(java.util.Set<String> searchConcept) {
    this.searchConcept = searchConcept;
    return this;
  }

  public VectorDataRequestData addSearchConceptItem(String searchConceptItem) {
    if (this.searchConcept == null) {
      this.searchConcept = new java.util.LinkedHashSet<>();
    }
    this.searchConcept.add(searchConceptItem);
    return this;
  }

   /**
   * The search to include any concept of given sources.
   * @return searchConcept
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"Consumer Spending\",\"Regulatory Change\"]", value = "The search to include any concept of given sources.")
  @JsonProperty(JSON_PROPERTY_SEARCH_CONCEPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.Set<String> getSearchConcept() {
    return searchConcept;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_CONCEPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearchConcept(java.util.Set<String> searchConcept) {
    this.searchConcept = searchConcept;
  }


  public VectorDataRequestData sentiment(java.util.Set<String> sentiment) {
    this.sentiment = sentiment;
    return this;
  }

  public VectorDataRequestData addSentimentItem(String sentimentItem) {
    if (this.sentiment == null) {
      this.sentiment = new java.util.LinkedHashSet<>();
    }
    this.sentiment.add(sentimentItem);
    return this;
  }

   /**
   * The search to include any sentiment of given sources.
   * @return sentiment
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"Neutral\",\"Negative\"]", value = "The search to include any sentiment of given sources.")
  @JsonProperty(JSON_PROPERTY_SENTIMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.Set<String> getSentiment() {
    return sentiment;
  }


  @JsonProperty(JSON_PROPERTY_SENTIMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSentiment(java.util.Set<String> sentiment) {
    this.sentiment = sentiment;
  }


  public VectorDataRequestData documentTypes(java.util.Set<String> documentTypes) {
    this.documentTypes = documentTypes;
    return this;
  }

  public VectorDataRequestData addDocumentTypesItem(String documentTypesItem) {
    if (this.documentTypes == null) {
      this.documentTypes = new java.util.LinkedHashSet<>();
    }
    this.documentTypes.add(documentTypesItem);
    return this;
  }

   /**
   * The search to include one valid document type for the provided sources.
   * @return documentTypes
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"10-K\",\"10-Q\",\"8-K\",\"News\",\"Transcripts\"]", value = "The search to include one valid document type for the provided sources.")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.Set<String> getDocumentTypes() {
    return documentTypes;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentTypes(java.util.Set<String> documentTypes) {
    this.documentTypes = documentTypes;
  }


  public VectorDataRequestData sources(java.util.Set<String> sources) {
    this.sources = sources;
    return this;
  }

  public VectorDataRequestData addSourcesItem(String sourcesItem) {
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * Code for document source to include. Currently EDGAR, StreetAccount and FactSet Callstreet Transcripts are available.
   * @return sources
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "[\"EDG\",\"FCST\",\"SA\"]", required = true, value = "Code for document source to include. Currently EDGAR, StreetAccount and FactSet Callstreet Transcripts are available.")
  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.Set<String> getSources() {
    return sources;
  }


  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSources(java.util.Set<String> sources) {
    this.sources = sources;
  }


  public VectorDataRequestData trimmed(Boolean trimmed) {
    this.trimmed = trimmed;
    return this;
  }

   /**
   * Trimmed the vectors from response based on provided value - If **true**, the vectors has been trimmed.   - If **false**, the vectors are been returned. 
   * @return trimmed
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Trimmed the vectors from response based on provided value - If **true**, the vectors has been trimmed.   - If **false**, the vectors are been returned. ")
  @JsonProperty(JSON_PROPERTY_TRIMMED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTrimmed() {
    return trimmed;
  }


  @JsonProperty(JSON_PROPERTY_TRIMMED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrimmed(Boolean trimmed) {
    this.trimmed = trimmed;
  }


  public VectorDataRequestData ids(java.util.List<String> ids) {
    this.ids = ids;
    return this;
  }

  public VectorDataRequestData addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new java.util.ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Requested symbols or securities. Each symbol can be a FactSet exchange symbol
   * @return ids
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Requested symbols or securities. Each symbol can be a FactSet exchange symbol")
  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getIds() {
    return ids;
  }


  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIds(java.util.List<String> ids) {
    this.ids = ids;
  }


  /**
   * Return true if this VectorDataRequest_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VectorDataRequestData vectorDataRequestData = (VectorDataRequestData) o;
    return Objects.equals(this.query, vectorDataRequestData.query) &&
        Objects.equals(this.startDate, vectorDataRequestData.startDate) &&
        Objects.equals(this.endDate, vectorDataRequestData.endDate) &&
        Objects.equals(this.esgTheme, vectorDataRequestData.esgTheme) &&
        Objects.equals(this.searchConcept, vectorDataRequestData.searchConcept) &&
        Objects.equals(this.sentiment, vectorDataRequestData.sentiment) &&
        Objects.equals(this.documentTypes, vectorDataRequestData.documentTypes) &&
        Objects.equals(this.sources, vectorDataRequestData.sources) &&
        Objects.equals(this.trimmed, vectorDataRequestData.trimmed) &&
        Objects.equals(this.ids, vectorDataRequestData.ids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, startDate, endDate, esgTheme, searchConcept, sentiment, documentTypes, sources, trimmed, ids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VectorDataRequestData {\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    esgTheme: ").append(toIndentedString(esgTheme)).append("\n");
    sb.append("    searchConcept: ").append(toIndentedString(searchConcept)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    documentTypes: ").append(toIndentedString(documentTypes)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    trimmed: ").append(toIndentedString(trimmed)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

