/*
 * Vector Data API
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.VectorData.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.VectorData.JSON;


/**
 * Returns vector information.
 */
@ApiModel(description = "Returns vector information.")
@JsonPropertyOrder({
  VectorDataResult.JSON_PROPERTY_VECTOR,
  VectorDataResult.JSON_PROPERTY_VECTOR_ID,
  VectorDataResult.JSON_PROPERTY_SIMILARITY_SCORE,
  VectorDataResult.JSON_PROPERTY_STORY_DATE,
  VectorDataResult.JSON_PROPERTY_THEMES,
  VectorDataResult.JSON_PROPERTY_DOCUMENT_TYPE,
  VectorDataResult.JSON_PROPERTY_SOURCE,
  VectorDataResult.JSON_PROPERTY_DOCUMENT_I_D,
  VectorDataResult.JSON_PROPERTY_PROPERTY,
  VectorDataResult.JSON_PROPERTY_TYPE,
  VectorDataResult.JSON_PROPERTY_IDS,
  VectorDataResult.JSON_PROPERTY_TRIMMED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class VectorDataResult implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_VECTOR = "vector";
  private java.util.List<String> vector = null;

  public static final String JSON_PROPERTY_VECTOR_ID = "vectorId";
  private String vectorId;

  public static final String JSON_PROPERTY_SIMILARITY_SCORE = "similarityScore";
  private BigDecimal similarityScore;

  public static final String JSON_PROPERTY_STORY_DATE = "storyDate";
  private LocalDate storyDate;

  public static final String JSON_PROPERTY_THEMES = "themes";
  private String themes;

  public static final String JSON_PROPERTY_DOCUMENT_TYPE = "documentType";
  private String documentType;

  public static final String JSON_PROPERTY_SOURCE = "source";
  private String source;

  public static final String JSON_PROPERTY_DOCUMENT_I_D = "documentID";
  private String documentID;

  public static final String JSON_PROPERTY_PROPERTY = "property";
  private String property;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_IDS = "ids";
  private java.util.List<String> ids = null;

  public static final String JSON_PROPERTY_TRIMMED = "trimmed";
  private Boolean trimmed;

  public VectorDataResult() { 
  }

  public VectorDataResult vector(java.util.List<String> vector) {
    this.vector = vector;
    return this;
  }

  public VectorDataResult addVectorItem(String vectorItem) {
    if (this.vector == null) {
      this.vector = new java.util.ArrayList<>();
    }
    this.vector.add(vectorItem);
    return this;
  }

   /**
   * Chuncked emedding vector.
   * @return vector
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Chuncked emedding vector.")
  @JsonProperty(JSON_PROPERTY_VECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getVector() {
    return vector;
  }


  @JsonProperty(JSON_PROPERTY_VECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVector(java.util.List<String> vector) {
    this.vector = vector;
  }


  public VectorDataResult vectorId(String vectorId) {
    this.vectorId = vectorId;
    return this;
  }

   /**
   * Unique identifier for a document
   * @return vectorId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for a document")
  @JsonProperty(JSON_PROPERTY_VECTOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVectorId() {
    return vectorId;
  }


  @JsonProperty(JSON_PROPERTY_VECTOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVectorId(String vectorId) {
    this.vectorId = vectorId;
  }


  public VectorDataResult similarityScore(BigDecimal similarityScore) {
    this.similarityScore = similarityScore;
    return this;
  }

   /**
   * Score indicating the similarity.
   * @return similarityScore
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Score indicating the similarity.")
  @JsonProperty(JSON_PROPERTY_SIMILARITY_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSimilarityScore() {
    return similarityScore;
  }


  @JsonProperty(JSON_PROPERTY_SIMILARITY_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSimilarityScore(BigDecimal similarityScore) {
    this.similarityScore = similarityScore;
  }


  public VectorDataResult storyDate(LocalDate storyDate) {
    this.storyDate = storyDate;
    return this;
  }

   /**
   * Date associated with the story.
   * @return storyDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Thu Oct 01 00:00:00 UTC 2020", value = "Date associated with the story.")
  @JsonProperty(JSON_PROPERTY_STORY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getStoryDate() {
    return storyDate;
  }


  @JsonProperty(JSON_PROPERTY_STORY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoryDate(LocalDate storyDate) {
    this.storyDate = storyDate;
  }


  public VectorDataResult themes(String themes) {
    this.themes = themes;
    return this;
  }

   /**
   * Theme of the document.
   * @return themes
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "doc", value = "Theme of the document.")
  @JsonProperty(JSON_PROPERTY_THEMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getThemes() {
    return themes;
  }


  @JsonProperty(JSON_PROPERTY_THEMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThemes(String themes) {
    this.themes = themes;
  }


  public VectorDataResult documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

   /**
   * Type of the document.
   * @return documentType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Type of the document.")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocumentType() {
    return documentType;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public VectorDataResult source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Name of the source
   * @return source
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "EDG", value = "Name of the source")
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(String source) {
    this.source = source;
  }


  public VectorDataResult documentID(String documentID) {
    this.documentID = documentID;
    return this;
  }

   /**
   * Unique identifier for a document.
   * @return documentID
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "20230307-5b36f2cf", value = "Unique identifier for a document.")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocumentID() {
    return documentID;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentID(String documentID) {
    this.documentID = documentID;
  }


  public VectorDataResult property(String property) {
    this.property = property;
    return this;
  }

   /**
   * The name of the schema.
   * @return property
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "content", value = "The name of the schema.")
  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProperty() {
    return property;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperty(String property) {
    this.property = property;
  }


  public VectorDataResult type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the schema.
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "text", value = "The type of the schema.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public VectorDataResult ids(java.util.List<String> ids) {
    this.ids = ids;
    return this;
  }

  public VectorDataResult addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new java.util.ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * List of related IDs.
   * @return ids
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "List of related IDs.")
  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getIds() {
    return ids;
  }


  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIds(java.util.List<String> ids) {
    this.ids = ids;
  }


  public VectorDataResult trimmed(Boolean trimmed) {
    this.trimmed = trimmed;
    return this;
  }

   /**
   * Trimmed attribute indicates whether the vectors are trimmed or not.  - If **true**, the vectors has been trimmed.   - If **false**, the vectors are been returned. 
   * @return trimmed
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Trimmed attribute indicates whether the vectors are trimmed or not.  - If **true**, the vectors has been trimmed.   - If **false**, the vectors are been returned. ")
  @JsonProperty(JSON_PROPERTY_TRIMMED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTrimmed() {
    return trimmed;
  }


  @JsonProperty(JSON_PROPERTY_TRIMMED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrimmed(Boolean trimmed) {
    this.trimmed = trimmed;
  }


  /**
   * Return true if this VectorDataResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VectorDataResult vectorDataResult = (VectorDataResult) o;
    return Objects.equals(this.vector, vectorDataResult.vector) &&
        Objects.equals(this.vectorId, vectorDataResult.vectorId) &&
        Objects.equals(this.similarityScore, vectorDataResult.similarityScore) &&
        Objects.equals(this.storyDate, vectorDataResult.storyDate) &&
        Objects.equals(this.themes, vectorDataResult.themes) &&
        Objects.equals(this.documentType, vectorDataResult.documentType) &&
        Objects.equals(this.source, vectorDataResult.source) &&
        Objects.equals(this.documentID, vectorDataResult.documentID) &&
        Objects.equals(this.property, vectorDataResult.property) &&
        Objects.equals(this.type, vectorDataResult.type) &&
        Objects.equals(this.ids, vectorDataResult.ids) &&
        Objects.equals(this.trimmed, vectorDataResult.trimmed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vector, vectorId, similarityScore, storyDate, themes, documentType, source, documentID, property, type, ids, trimmed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VectorDataResult {\n");
    sb.append("    vector: ").append(toIndentedString(vector)).append("\n");
    sb.append("    vectorId: ").append(toIndentedString(vectorId)).append("\n");
    sb.append("    similarityScore: ").append(toIndentedString(similarityScore)).append("\n");
    sb.append("    storyDate: ").append(toIndentedString(storyDate)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    documentID: ").append(toIndentedString(documentID)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    trimmed: ").append(toIndentedString(trimmed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

