/*
 * Vector Data API
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.VectorData.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.VectorData.JSON;


/**
 * elements of document types.
 */
@ApiModel(description = "elements of document types.")
@JsonPropertyOrder({
  DocumentTypes.JSON_PROPERTY_DOCUMENT_TYPE,
  DocumentTypes.JSON_PROPERTY_DESCRIPTION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class DocumentTypes implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DOCUMENT_TYPE = "documentType";
  private String documentType;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public DocumentTypes() { 
  }

  @JsonCreator
  public DocumentTypes(
    @JsonProperty(value=JSON_PROPERTY_DOCUMENT_TYPE, required=true) String documentType, 
    @JsonProperty(value=JSON_PROPERTY_DESCRIPTION, required=true) String description
  ) {
    this();
    this.documentType = documentType;
    this.description = description;
  }

  public DocumentTypes documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

   /**
   * type of the document
   * @return documentType
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "10-K", required = true, value = "type of the document")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDocumentType() {
    return documentType;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public DocumentTypes description(String description) {
    this.description = description;
    return this;
  }

   /**
   * document type description
   * @return description
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "10-K", required = true, value = "document type description")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Return true if this DocumentTypes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentTypes documentTypes = (DocumentTypes) o;
    return Objects.equals(this.documentType, documentTypes.documentType) &&
        Objects.equals(this.description, documentTypes.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentType, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentTypes {\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

