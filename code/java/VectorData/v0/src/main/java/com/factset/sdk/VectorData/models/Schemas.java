/*
 * Vector Data API
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.VectorData.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.VectorData.JSON;


/**
 * Elements of schemas.
 */
@ApiModel(description = "Elements of schemas.")
@JsonPropertyOrder({
  Schemas.JSON_PROPERTY_PROPERTY,
  Schemas.JSON_PROPERTY_TYPE,
  Schemas.JSON_PROPERTY_SOURCE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Schemas implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PROPERTY = "property";
  private String property;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_SOURCE = "source";
  private String source;

  public Schemas() { 
  }

  @JsonCreator
  public Schemas(
    @JsonProperty(value=JSON_PROPERTY_PROPERTY, required=true) String property, 
    @JsonProperty(value=JSON_PROPERTY_TYPE, required=true) String type, 
    @JsonProperty(value=JSON_PROPERTY_SOURCE, required=true) String source
  ) {
    this();
    this.property = property;
    this.type = type;
    this.source = source;
  }

  public Schemas property(String property) {
    this.property = property;
    return this;
  }

   /**
   * The name of the schema.
   * @return property
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "content", required = true, value = "The name of the schema.")
  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProperty() {
    return property;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProperty(String property) {
    this.property = property;
  }


  public Schemas type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the schema.
   * @return type
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "text", required = true, value = "The type of the schema.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public Schemas source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Source of the schema.
   * @return source
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "EDG", required = true, value = "Source of the schema.")
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSource(String source) {
    this.source = source;
  }


  /**
   * Return true if this Schemas object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schemas schemas = (Schemas) o;
    return Objects.equals(this.property, schemas.property) &&
        Objects.equals(this.type, schemas.type) &&
        Objects.equals(this.source, schemas.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(property, type, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schemas {\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

