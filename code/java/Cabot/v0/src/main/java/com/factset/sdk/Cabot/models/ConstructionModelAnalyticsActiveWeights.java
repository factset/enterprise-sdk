/*
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Cabot.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.Cabot.models.ConstructionModelAnalyticsActiveWeightsMaxOver;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Cabot.JSON;


/**
 * This quantity expresses the difference between the portfolio weight and benchmark weight. Maximum overweight/underweight is calculated for the selected time period with positions further classified into large, medium and small sizes.
 */
@ApiModel(description = "This quantity expresses the difference between the portfolio weight and benchmark weight. Maximum overweight/underweight is calculated for the selected time period with positions further classified into large, medium and small sizes.")
@JsonPropertyOrder({
  ConstructionModelAnalyticsActiveWeights.JSON_PROPERTY_MAX_OVER,
  ConstructionModelAnalyticsActiveWeights.JSON_PROPERTY_MAX_UNDER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ConstructionModelAnalyticsActiveWeights implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_MAX_OVER = "maxOver";
  private ConstructionModelAnalyticsActiveWeightsMaxOver maxOver;

  public static final String JSON_PROPERTY_MAX_UNDER = "maxUnder";
  private BigDecimal maxUnder;

  public ConstructionModelAnalyticsActiveWeights() { 
  }

  public ConstructionModelAnalyticsActiveWeights maxOver(ConstructionModelAnalyticsActiveWeightsMaxOver maxOver) {
    this.maxOver = maxOver;
    return this;
  }

   /**
   * Get maxOver
   * @return maxOver
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAX_OVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConstructionModelAnalyticsActiveWeightsMaxOver getMaxOver() {
    return maxOver;
  }


  @JsonProperty(JSON_PROPERTY_MAX_OVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxOver(ConstructionModelAnalyticsActiveWeightsMaxOver maxOver) {
    this.maxOver = maxOver;
  }


  public ConstructionModelAnalyticsActiveWeights maxUnder(BigDecimal maxUnder) {
    this.maxUnder = maxUnder;
    return this;
  }

   /**
   * The lowest observed difference between the portfolio weight and benchmark weight.
   * @return maxUnder
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The lowest observed difference between the portfolio weight and benchmark weight.")
  @JsonProperty(JSON_PROPERTY_MAX_UNDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMaxUnder() {
    return maxUnder;
  }


  @JsonProperty(JSON_PROPERTY_MAX_UNDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxUnder(BigDecimal maxUnder) {
    this.maxUnder = maxUnder;
  }


  /**
   * Return true if this ConstructionModelAnalytics_activeWeights object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConstructionModelAnalyticsActiveWeights constructionModelAnalyticsActiveWeights = (ConstructionModelAnalyticsActiveWeights) o;
    return Objects.equals(this.maxOver, constructionModelAnalyticsActiveWeights.maxOver) &&
        Objects.equals(this.maxUnder, constructionModelAnalyticsActiveWeights.maxUnder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxOver, maxUnder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConstructionModelAnalyticsActiveWeights {\n");
    sb.append("    maxOver: ").append(toIndentedString(maxOver)).append("\n");
    sb.append("    maxUnder: ").append(toIndentedString(maxUnder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

