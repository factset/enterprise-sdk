/*
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Cabot.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.swagger.annotations.ApiModel;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Cabot.JSON;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * All currently available sectors.
 */
public enum Sectors {
  
  ENERGY("energy"),
  
  MATERIALS("materials"),
  
  INDUSTRIALS("industrials"),
  
  CONSUMERDISCRETIONARY("consumerDiscretionary"),
  
  CONSUMERSTAPLES("consumerStaples"),
  
  HEALTHCARE("healthCare"),
  
  FINANCIALS("financials"),
  
  INFORMATIONTECHNOLOGY("informationTechnology"),
  
  COMMUNICATIONSERVICES("communicationServices"),
  
  UTILITIES("utilities"),
  
  REALESTATE("realEstate"),
  
  EQUITYDIVERSIFIED("equityDiversified"),
  
  EQUITYHEALTHCARE("equityHealthCare"),
  
  EQUITYSELFSTORAGE("equitySelfStorage"),
  
  EQUITYINDUSTRIAL("equityIndustrial"),
  
  EQUITYOFFICE("equityOffice"),
  
  EQUITYRESIDENTIAL("equityResidential"),
  
  EQUITYRETAIL("equityRetail"),
  
  EQUITYLODGINGANDRESORTS("equityLodgingAndResorts"),
  
  EQUITYSPECIALTY("equitySpecialty"),
  
  EQUITYTIMBERREITS("equityTimberReits"),
  
  EQUITYINFRASTRUCTUREREITS("equityInfrastructureReits"),
  
  EQUITYDATACENTERS("equityDataCenters"),
  
  MORTAGEHOMEFINANCING("mortageHomeFinancing"),
  
  MORTAGECOMMERCIALFINANCING("mortageCommercialFinancing");

  private String value;

  Sectors(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static Sectors fromValue(String value) {
    for (Sectors b : Sectors.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

