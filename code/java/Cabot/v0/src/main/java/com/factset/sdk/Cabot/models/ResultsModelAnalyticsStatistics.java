/*
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Cabot.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Cabot.JSON;


/**
 * ResultsModelAnalyticsStatistics
 */
@JsonPropertyOrder({
  ResultsModelAnalyticsStatistics.JSON_PROPERTY_DRAWDOWN,
  ResultsModelAnalyticsStatistics.JSON_PROPERTY_MODIGLIANI_RETURN,
  ResultsModelAnalyticsStatistics.JSON_PROPERTY_STANDARD_DEVIATION,
  ResultsModelAnalyticsStatistics.JSON_PROPERTY_TRACKING_ERROR
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ResultsModelAnalyticsStatistics implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DRAWDOWN = "drawdown";
  private BigDecimal drawdown;

  public static final String JSON_PROPERTY_MODIGLIANI_RETURN = "modiglianiReturn";
  private BigDecimal modiglianiReturn;

  public static final String JSON_PROPERTY_STANDARD_DEVIATION = "standardDeviation";
  private BigDecimal standardDeviation;

  public static final String JSON_PROPERTY_TRACKING_ERROR = "trackingError";
  private BigDecimal trackingError;

  public ResultsModelAnalyticsStatistics() { 
  }

  public ResultsModelAnalyticsStatistics drawdown(BigDecimal drawdown) {
    this.drawdown = drawdown;
    return this;
  }

   /**
   * Drawdown quantifies the portfolio’s maximum peak to trough decline experienced over the time period under consideration. It is expressed as the total percent drop between the peak portfolio value and the subsequent deepest trough.
   * @return drawdown
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Drawdown quantifies the portfolio’s maximum peak to trough decline experienced over the time period under consideration. It is expressed as the total percent drop between the peak portfolio value and the subsequent deepest trough.")
  @JsonProperty(JSON_PROPERTY_DRAWDOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getDrawdown() {
    return drawdown;
  }


  @JsonProperty(JSON_PROPERTY_DRAWDOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDrawdown(BigDecimal drawdown) {
    this.drawdown = drawdown;
  }


  public ResultsModelAnalyticsStatistics modiglianiReturn(BigDecimal modiglianiReturn) {
    this.modiglianiReturn = modiglianiReturn;
    return this;
  }

   /**
   * Also known as M2, this is a measure of the risk adjusted returns of an investment portfolio. It measures the returns of the portfolio, adjusted for the risk of the portfolio relative to that of some benchmark. Derived from the Sharpe ratio, Modigliani return has the advantage of being represented in units of percent return, making the measure more intuitive to interpret.
   * @return modiglianiReturn
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Also known as M2, this is a measure of the risk adjusted returns of an investment portfolio. It measures the returns of the portfolio, adjusted for the risk of the portfolio relative to that of some benchmark. Derived from the Sharpe ratio, Modigliani return has the advantage of being represented in units of percent return, making the measure more intuitive to interpret.")
  @JsonProperty(JSON_PROPERTY_MODIGLIANI_RETURN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getModiglianiReturn() {
    return modiglianiReturn;
  }


  @JsonProperty(JSON_PROPERTY_MODIGLIANI_RETURN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModiglianiReturn(BigDecimal modiglianiReturn) {
    this.modiglianiReturn = modiglianiReturn;
  }


  public ResultsModelAnalyticsStatistics standardDeviation(BigDecimal standardDeviation) {
    this.standardDeviation = standardDeviation;
    return this;
  }

   /**
   * Standard deviation expresses the historical volatility of portfolio monthly returns, over the specified time period.
   * @return standardDeviation
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Standard deviation expresses the historical volatility of portfolio monthly returns, over the specified time period.")
  @JsonProperty(JSON_PROPERTY_STANDARD_DEVIATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getStandardDeviation() {
    return standardDeviation;
  }


  @JsonProperty(JSON_PROPERTY_STANDARD_DEVIATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStandardDeviation(BigDecimal standardDeviation) {
    this.standardDeviation = standardDeviation;
  }


  public ResultsModelAnalyticsStatistics trackingError(BigDecimal trackingError) {
    this.trackingError = trackingError;
    return this;
  }

   /**
   * Also referred to as active risk, this value provides a measure of the deviation between portfolio returns and the returns of the benchmark resulting from portfolio systematic risk and active share. In general, the higher the active share the greater will be the tracking error. Tracking error is calculated as the standard deviation of the difference between the portfolio and benchmark returns and is displayed as a percentage.
   * @return trackingError
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Also referred to as active risk, this value provides a measure of the deviation between portfolio returns and the returns of the benchmark resulting from portfolio systematic risk and active share. In general, the higher the active share the greater will be the tracking error. Tracking error is calculated as the standard deviation of the difference between the portfolio and benchmark returns and is displayed as a percentage.")
  @JsonProperty(JSON_PROPERTY_TRACKING_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTrackingError() {
    return trackingError;
  }


  @JsonProperty(JSON_PROPERTY_TRACKING_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrackingError(BigDecimal trackingError) {
    this.trackingError = trackingError;
  }


  /**
   * Return true if this ResultsModelAnalytics_statistics object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultsModelAnalyticsStatistics resultsModelAnalyticsStatistics = (ResultsModelAnalyticsStatistics) o;
    return Objects.equals(this.drawdown, resultsModelAnalyticsStatistics.drawdown) &&
        Objects.equals(this.modiglianiReturn, resultsModelAnalyticsStatistics.modiglianiReturn) &&
        Objects.equals(this.standardDeviation, resultsModelAnalyticsStatistics.standardDeviation) &&
        Objects.equals(this.trackingError, resultsModelAnalyticsStatistics.trackingError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(drawdown, modiglianiReturn, standardDeviation, trackingError);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultsModelAnalyticsStatistics {\n");
    sb.append("    drawdown: ").append(toIndentedString(drawdown)).append("\n");
    sb.append("    modiglianiReturn: ").append(toIndentedString(modiglianiReturn)).append("\n");
    sb.append("    standardDeviation: ").append(toIndentedString(standardDeviation)).append("\n");
    sb.append("    trackingError: ").append(toIndentedString(trackingError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

