/*
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Cabot.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.Cabot.models.HitRateModelAnalyticsLosers;
import com.factset.sdk.Cabot.models.HitRateModelAnalyticsWinners;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Cabot.JSON;


/**
 * HitRateModelAnalytics
 */
@JsonPropertyOrder({
  HitRateModelAnalytics.JSON_PROPERTY_COUNT,
  HitRateModelAnalytics.JSON_PROPERTY_LOSERS,
  HitRateModelAnalytics.JSON_PROPERTY_WIN_LOSS_RATIO,
  HitRateModelAnalytics.JSON_PROPERTY_WINNERS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class HitRateModelAnalytics implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_COUNT = "count";
  private BigDecimal count;

  public static final String JSON_PROPERTY_LOSERS = "losers";
  private HitRateModelAnalyticsLosers losers;

  public static final String JSON_PROPERTY_WIN_LOSS_RATIO = "winLossRatio";
  private BigDecimal winLossRatio;

  public static final String JSON_PROPERTY_WINNERS = "winners";
  private HitRateModelAnalyticsWinners winners;

  public HitRateModelAnalytics() { 
  }

  public HitRateModelAnalytics count(BigDecimal count) {
    this.count = count;
    return this;
  }

   /**
   * The total number of positions used in the denominator of the hit rate calculation.
   * @return count
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The total number of positions used in the denominator of the hit rate calculation.")
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCount(BigDecimal count) {
    this.count = count;
  }


  public HitRateModelAnalytics losers(HitRateModelAnalyticsLosers losers) {
    this.losers = losers;
    return this;
  }

   /**
   * Get losers
   * @return losers
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LOSERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HitRateModelAnalyticsLosers getLosers() {
    return losers;
  }


  @JsonProperty(JSON_PROPERTY_LOSERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLosers(HitRateModelAnalyticsLosers losers) {
    this.losers = losers;
  }


  public HitRateModelAnalytics winLossRatio(BigDecimal winLossRatio) {
    this.winLossRatio = winLossRatio;
    return this;
  }

   /**
   * The win/loss ratio computes the relative benefit of winners versus losers. A win/loss ratio of greater than 100% indicates that the average winner generated greater benefit (i.e., positive contribution) then was lost by the average loser (i.e., negative contribution), and vice versa. This ratio may be examined at the portfolio level, or by classification.
   * @return winLossRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The win/loss ratio computes the relative benefit of winners versus losers. A win/loss ratio of greater than 100% indicates that the average winner generated greater benefit (i.e., positive contribution) then was lost by the average loser (i.e., negative contribution), and vice versa. This ratio may be examined at the portfolio level, or by classification.")
  @JsonProperty(JSON_PROPERTY_WIN_LOSS_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getWinLossRatio() {
    return winLossRatio;
  }


  @JsonProperty(JSON_PROPERTY_WIN_LOSS_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWinLossRatio(BigDecimal winLossRatio) {
    this.winLossRatio = winLossRatio;
  }


  public HitRateModelAnalytics winners(HitRateModelAnalyticsWinners winners) {
    this.winners = winners;
    return this;
  }

   /**
   * Get winners
   * @return winners
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_WINNERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HitRateModelAnalyticsWinners getWinners() {
    return winners;
  }


  @JsonProperty(JSON_PROPERTY_WINNERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWinners(HitRateModelAnalyticsWinners winners) {
    this.winners = winners;
  }


  /**
   * Return true if this HitRateModelAnalytics object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HitRateModelAnalytics hitRateModelAnalytics = (HitRateModelAnalytics) o;
    return Objects.equals(this.count, hitRateModelAnalytics.count) &&
        Objects.equals(this.losers, hitRateModelAnalytics.losers) &&
        Objects.equals(this.winLossRatio, hitRateModelAnalytics.winLossRatio) &&
        Objects.equals(this.winners, hitRateModelAnalytics.winners);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, losers, winLossRatio, winners);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HitRateModelAnalytics {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    losers: ").append(toIndentedString(losers)).append("\n");
    sb.append("    winLossRatio: ").append(toIndentedString(winLossRatio)).append("\n");
    sb.append("    winners: ").append(toIndentedString(winners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

