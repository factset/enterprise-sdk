/*
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Cabot.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Cabot.JSON;


/**
 * HoldingAnalytics
 */
@JsonPropertyOrder({
  HoldingAnalytics.JSON_PROPERTY_INCREMENTAL_BENEFIT,
  HoldingAnalytics.JSON_PROPERTY_NAME,
  HoldingAnalytics.JSON_PROPERTY_REGION,
  HoldingAnalytics.JSON_PROPERTY_SECTOR,
  HoldingAnalytics.JSON_PROPERTY_TICKER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class HoldingAnalytics implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_INCREMENTAL_BENEFIT = "incrementalBenefit";
  private Object incrementalBenefit;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_REGION = "region";
  private String region;

  public static final String JSON_PROPERTY_SECTOR = "sector";
  private String sector;

  public static final String JSON_PROPERTY_TICKER = "ticker";
  private String ticker;

  public HoldingAnalytics() { 
  }

  public HoldingAnalytics incrementalBenefit(Object incrementalBenefit) {
    this.incrementalBenefit = incrementalBenefit;
    return this;
  }

   /**
   * Impact of the position on your portfolio.
   * @return incrementalBenefit
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Impact of the position on your portfolio.")
  @JsonProperty(JSON_PROPERTY_INCREMENTAL_BENEFIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getIncrementalBenefit() {
    return incrementalBenefit;
  }


  @JsonProperty(JSON_PROPERTY_INCREMENTAL_BENEFIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncrementalBenefit(Object incrementalBenefit) {
    this.incrementalBenefit = incrementalBenefit;
  }


  public HoldingAnalytics name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Company name.
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Company name.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public HoldingAnalytics region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Company region.
   * @return region
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Company region.")
  @JsonProperty(JSON_PROPERTY_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRegion() {
    return region;
  }


  @JsonProperty(JSON_PROPERTY_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegion(String region) {
    this.region = region;
  }


  public HoldingAnalytics sector(String sector) {
    this.sector = sector;
    return this;
  }

   /**
   * Company sector.
   * @return sector
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Company sector.")
  @JsonProperty(JSON_PROPERTY_SECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSector() {
    return sector;
  }


  @JsonProperty(JSON_PROPERTY_SECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSector(String sector) {
    this.sector = sector;
  }


  public HoldingAnalytics ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

   /**
   * Ticker symbol.
   * @return ticker
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Ticker symbol.")
  @JsonProperty(JSON_PROPERTY_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTicker() {
    return ticker;
  }


  @JsonProperty(JSON_PROPERTY_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTicker(String ticker) {
    this.ticker = ticker;
  }


  /**
   * Return true if this HoldingAnalytics object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HoldingAnalytics holdingAnalytics = (HoldingAnalytics) o;
    return Objects.equals(this.incrementalBenefit, holdingAnalytics.incrementalBenefit) &&
        Objects.equals(this.name, holdingAnalytics.name) &&
        Objects.equals(this.region, holdingAnalytics.region) &&
        Objects.equals(this.sector, holdingAnalytics.sector) &&
        Objects.equals(this.ticker, holdingAnalytics.ticker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(incrementalBenefit, name, region, sector, ticker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HoldingAnalytics {\n");
    sb.append("    incrementalBenefit: ").append(toIndentedString(incrementalBenefit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    sector: ").append(toIndentedString(sector)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

