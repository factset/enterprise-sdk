/*
 * FactSet Search Answers API
 * The FactSet Search Answers API provides answers to search queries, reflecting the data shown within FactSet Search Answers, and allowing you to easily add financial data to your widgets, lookups, bots, and assistants. The API understands a fixed amount of search terms and returns structured data from FactSetâ€™s many data sources. Possible answers include Price of a Company, Top 10 Year-to-Date Gainers, Revenue per Passenger Mile, and many more.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetSearchAnswers.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetSearchAnswers.JSON;


/**
 * Table
 */
@JsonPropertyOrder({
  Table.JSON_PROPERTY_TABLE_HEADERS,
  Table.JSON_PROPERTY_TABLE_ROWS,
  Table.JSON_PROPERTY_TABLE_FOOTERS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Table implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TABLE_HEADERS = "tableHeaders";
  private java.util.List<String> tableHeaders = null;

  public static final String JSON_PROPERTY_TABLE_ROWS = "tableRows";
  private java.util.List<java.util.List<String>> tableRows = new java.util.ArrayList<>();

  public static final String JSON_PROPERTY_TABLE_FOOTERS = "tableFooters";
  private java.util.List<String> tableFooters = null;

  public Table() { 
  }

  @JsonCreator
  public Table(
    @JsonProperty(value=JSON_PROPERTY_TABLE_ROWS, required=true) java.util.List<java.util.List<String>> tableRows
  ) {
    this();
    this.tableRows = tableRows;
  }

  public Table tableHeaders(java.util.List<String> tableHeaders) {
    this.tableHeaders = tableHeaders;
    return this;
  }

  public Table addTableHeadersItem(String tableHeadersItem) {
    if (this.tableHeaders == null) {
      this.tableHeaders = new java.util.ArrayList<>();
    }
    this.tableHeaders.add(tableHeadersItem);
    return this;
  }

   /**
   * Get tableHeaders
   * @return tableHeaders
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TABLE_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getTableHeaders() {
    return tableHeaders;
  }


  @JsonProperty(JSON_PROPERTY_TABLE_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTableHeaders(java.util.List<String> tableHeaders) {
    this.tableHeaders = tableHeaders;
  }


  public Table tableRows(java.util.List<java.util.List<String>> tableRows) {
    this.tableRows = tableRows;
    return this;
  }

  public Table addTableRowsItem(java.util.List<String> tableRowsItem) {
    this.tableRows.add(tableRowsItem);
    return this;
  }

   /**
   * Get tableRows
   * @return tableRows
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TABLE_ROWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.List<java.util.List<String>> getTableRows() {
    return tableRows;
  }


  @JsonProperty(JSON_PROPERTY_TABLE_ROWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTableRows(java.util.List<java.util.List<String>> tableRows) {
    this.tableRows = tableRows;
  }


  public Table tableFooters(java.util.List<String> tableFooters) {
    this.tableFooters = tableFooters;
    return this;
  }

  public Table addTableFootersItem(String tableFootersItem) {
    if (this.tableFooters == null) {
      this.tableFooters = new java.util.ArrayList<>();
    }
    this.tableFooters.add(tableFootersItem);
    return this;
  }

   /**
   * Get tableFooters
   * @return tableFooters
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TABLE_FOOTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getTableFooters() {
    return tableFooters;
  }


  @JsonProperty(JSON_PROPERTY_TABLE_FOOTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTableFooters(java.util.List<String> tableFooters) {
    this.tableFooters = tableFooters;
  }


  /**
   * Return true if this Table object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Table table = (Table) o;
    return Objects.equals(this.tableHeaders, table.tableHeaders) &&
        Objects.equals(this.tableRows, table.tableRows) &&
        Objects.equals(this.tableFooters, table.tableFooters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableHeaders, tableRows, tableFooters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Table {\n");
    sb.append("    tableHeaders: ").append(toIndentedString(tableHeaders)).append("\n");
    sb.append("    tableRows: ").append(toIndentedString(tableRows)).append("\n");
    sb.append("    tableFooters: ").append(toIndentedString(tableFooters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

