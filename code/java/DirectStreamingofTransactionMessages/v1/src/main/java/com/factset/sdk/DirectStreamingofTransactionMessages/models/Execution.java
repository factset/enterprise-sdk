/*
 * dsotm API
 * Allow clients to send transactions data to FactSet.
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.DirectStreamingofTransactionMessages.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.DirectStreamingofTransactionMessages.models.AdditionalField;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.DirectStreamingofTransactionMessages.JSON;


/**
 * Execution transaction attributes
 */
@ApiModel(description = "Execution transaction attributes")
@JsonPropertyOrder({
  Execution.JSON_PROPERTY_TRADE_DATE,
  Execution.JSON_PROPERTY_TRANSACTION_ID,
  Execution.JSON_PROPERTY_PARENT_ID,
  Execution.JSON_PROPERTY_ORDER_ID,
  Execution.JSON_PROPERTY_TRANSACTION_STATUS,
  Execution.JSON_PROPERTY_NET,
  Execution.JSON_PROPERTY_SETTLEMENT_DATE,
  Execution.JSON_PROPERTY_SETTLEMENT_CURRENCY,
  Execution.JSON_PROPERTY_SETTLEMENT_VALUE,
  Execution.JSON_PROPERTY_FOREIGN_EXCHANGE_RATE,
  Execution.JSON_PROPERTY_BROKER,
  Execution.JSON_PROPERTY_CUSTODIAN,
  Execution.JSON_PROPERTY_ACCRUED_INTEREST,
  Execution.JSON_PROPERTY_COMMISSION,
  Execution.JSON_PROPERTY_CLEARING_COMMISSION,
  Execution.JSON_PROPERTY_LOCAL_TAX,
  Execution.JSON_PROPERTY_LOCAL_FEE,
  Execution.JSON_PROPERTY_BROKER_FEE,
  Execution.JSON_PROPERTY_EXCHANGE_FEE,
  Execution.JSON_PROPERTY_MISCELLANEOUS_FEE,
  Execution.JSON_PROPERTY_ACCOUNT,
  Execution.JSON_PROPERTY_SYMBOL,
  Execution.JSON_PROPERTY_INSTRUMENT_NAME,
  Execution.JSON_PROPERTY_SIDE,
  Execution.JSON_PROPERTY_UNIT_TYPE,
  Execution.JSON_PROPERTY_TRANSACTION_LEAVES,
  Execution.JSON_PROPERTY_QUANTITY,
  Execution.JSON_PROPERTY_GROSS,
  Execution.JSON_PROPERTY_PRICE,
  Execution.JSON_PROPERTY_CURRENCY,
  Execution.JSON_PROPERTY_COMPLIANCE_STATUS,
  Execution.JSON_PROPERTY_ADDED_DATE_TIME,
  Execution.JSON_PROPERTY_UPDATED_DATE_TIME,
  Execution.JSON_PROPERTY_ADDITIONAL_FIELDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Execution implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TRADE_DATE = "tradeDate";
  private String tradeDate;

  public static final String JSON_PROPERTY_TRANSACTION_ID = "transactionId";
  private String transactionId;

  public static final String JSON_PROPERTY_PARENT_ID = "parentId";
  private JsonNullable<String> parentId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ORDER_ID = "orderId";
  private JsonNullable<String> orderId = JsonNullable.<String>undefined();

  /**
   * Status of the Execution
   */
  public enum TransactionStatusEnum {
    EXECUTED("executed"),
    
    BOOKED("booked"),
    
    CANCELLED("cancelled");

    private String value;

    TransactionStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransactionStatusEnum fromValue(String value) {
      for (TransactionStatusEnum b : TransactionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRANSACTION_STATUS = "transactionStatus";
  private TransactionStatusEnum transactionStatus;

  public static final String JSON_PROPERTY_NET = "net";
  private Double net;

  public static final String JSON_PROPERTY_SETTLEMENT_DATE = "settlementDate";
  private String settlementDate;

  public static final String JSON_PROPERTY_SETTLEMENT_CURRENCY = "settlementCurrency";
  private String settlementCurrency;

  public static final String JSON_PROPERTY_SETTLEMENT_VALUE = "settlementValue";
  private Double settlementValue;

  public static final String JSON_PROPERTY_FOREIGN_EXCHANGE_RATE = "foreignExchangeRate";
  private JsonNullable<Float> foreignExchangeRate = JsonNullable.<Float>undefined();

  public static final String JSON_PROPERTY_BROKER = "broker";
  private JsonNullable<String> broker = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CUSTODIAN = "custodian";
  private JsonNullable<String> custodian = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ACCRUED_INTEREST = "accruedInterest";
  private JsonNullable<Double> accruedInterest = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_COMMISSION = "commission";
  private JsonNullable<Double> commission = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_CLEARING_COMMISSION = "clearingCommission";
  private JsonNullable<Double> clearingCommission = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_LOCAL_TAX = "localTax";
  private JsonNullable<Double> localTax = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_LOCAL_FEE = "localFee";
  private JsonNullable<Double> localFee = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_BROKER_FEE = "brokerFee";
  private JsonNullable<Double> brokerFee = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_EXCHANGE_FEE = "exchangeFee";
  private JsonNullable<Double> exchangeFee = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_MISCELLANEOUS_FEE = "miscellaneousFee";
  private JsonNullable<Double> miscellaneousFee = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_ACCOUNT = "account";
  private String account;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_INSTRUMENT_NAME = "instrumentName";
  private String instrumentName;

  /**
   * Side of the order
   */
  public enum SideEnum {
    BUY("buy"),
    
    BUYCOVER("buyCover"),
    
    SELL("sell"),
    
    SELLSHORT("sellShort");

    private String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SIDE = "side";
  private SideEnum side;

  /**
   * Unit type of the order. Indicates if the trade is driven by quantity or value
   */
  public enum UnitTypeEnum {
    QUANTITY("quantity"),
    
    VALUE("value");

    private String value;

    UnitTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UnitTypeEnum fromValue(String value) {
      for (UnitTypeEnum b : UnitTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_UNIT_TYPE = "unitType";
  private UnitTypeEnum unitType;

  public static final String JSON_PROPERTY_TRANSACTION_LEAVES = "transactionLeaves";
  private JsonNullable<Double> transactionLeaves = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private Double quantity;

  public static final String JSON_PROPERTY_GROSS = "gross";
  private Double gross;

  public static final String JSON_PROPERTY_PRICE = "price";
  private JsonNullable<Double> price = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  /**
   * Compliance check status
   */
  public enum ComplianceStatusEnum {
    UNCHECKED("unchecked"),
    
    PASS("pass"),
    
    FAIL("fail");

    private String value;

    ComplianceStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ComplianceStatusEnum fromValue(String value) {
      for (ComplianceStatusEnum b : ComplianceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COMPLIANCE_STATUS = "complianceStatus";
  private ComplianceStatusEnum complianceStatus;

  public static final String JSON_PROPERTY_ADDED_DATE_TIME = "addedDateTime";
  private JsonNullable<String> addedDateTime = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_UPDATED_DATE_TIME = "updatedDateTime";
  private JsonNullable<String> updatedDateTime = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ADDITIONAL_FIELDS = "additionalFields";
  private JsonNullable<java.util.List<AdditionalField>> additionalFields = JsonNullable.<java.util.List<AdditionalField>>undefined();

  public Execution() { 
  }

  @JsonCreator
  public Execution(
    @JsonProperty(value=JSON_PROPERTY_TRADE_DATE, required=true) String tradeDate, 
    @JsonProperty(value=JSON_PROPERTY_TRANSACTION_ID, required=true) String transactionId, 
    @JsonProperty(value=JSON_PROPERTY_TRANSACTION_STATUS, required=true) TransactionStatusEnum transactionStatus, 
    @JsonProperty(value=JSON_PROPERTY_NET, required=true) Double net, 
    @JsonProperty(value=JSON_PROPERTY_SETTLEMENT_DATE, required=true) String settlementDate, 
    @JsonProperty(value=JSON_PROPERTY_SETTLEMENT_CURRENCY, required=true) String settlementCurrency, 
    @JsonProperty(value=JSON_PROPERTY_SETTLEMENT_VALUE, required=true) Double settlementValue, 
    @JsonProperty(value=JSON_PROPERTY_ACCOUNT, required=true) String account, 
    @JsonProperty(value=JSON_PROPERTY_SYMBOL, required=true) String symbol, 
    @JsonProperty(value=JSON_PROPERTY_INSTRUMENT_NAME, required=true) String instrumentName, 
    @JsonProperty(value=JSON_PROPERTY_SIDE, required=true) SideEnum side, 
    @JsonProperty(value=JSON_PROPERTY_UNIT_TYPE, required=true) UnitTypeEnum unitType, 
    @JsonProperty(value=JSON_PROPERTY_QUANTITY, required=true) Double quantity, 
    @JsonProperty(value=JSON_PROPERTY_GROSS, required=true) Double gross, 
    @JsonProperty(value=JSON_PROPERTY_CURRENCY, required=true) String currency
  ) {
    this();
    this.tradeDate = tradeDate;
    this.transactionId = transactionId;
    this.transactionStatus = transactionStatus;
    this.net = net;
    this.settlementDate = settlementDate;
    this.settlementCurrency = settlementCurrency;
    this.settlementValue = settlementValue;
    this.account = account;
    this.symbol = symbol;
    this.instrumentName = instrumentName;
    this.side = side;
    this.unitType = unitType;
    this.quantity = quantity;
    this.gross = gross;
    this.currency = currency;
  }

  public Execution tradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

   /**
   * Trade date which is in the format YYYY-MM-DD
   * @return tradeDate
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "2024-01-25", required = true, value = "Trade date which is in the format YYYY-MM-DD")
  @JsonProperty(JSON_PROPERTY_TRADE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTradeDate() {
    return tradeDate;
  }


  @JsonProperty(JSON_PROPERTY_TRADE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
  }


  public Execution transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Unique Id of the execution
   * @return transactionId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "E456", required = true, value = "Unique Id of the execution")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransactionId() {
    return transactionId;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public Execution parentId(String parentId) {
    this.parentId = JsonNullable.<String>of(parentId);
    return this;
  }

   /**
   * transactionId of the placement which spawned this execution
   * @return parentId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "P123", value = "transactionId of the placement which spawned this execution")
  @JsonIgnore

  public String getParentId() {
        return parentId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getParentId_JsonNullable() {
    return parentId;
  }
  
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  public void setParentId_JsonNullable(JsonNullable<String> parentId) {
    this.parentId = parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = JsonNullable.<String>of(parentId);
  }


  public Execution orderId(String orderId) {
    this.orderId = JsonNullable.<String>of(orderId);
    return this;
  }

   /**
   * orderId of the order related to this execution
   * @return orderId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "O123", value = "orderId of the order related to this execution")
  @JsonIgnore

  public String getOrderId() {
        return orderId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getOrderId_JsonNullable() {
    return orderId;
  }
  
  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  public void setOrderId_JsonNullable(JsonNullable<String> orderId) {
    this.orderId = orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = JsonNullable.<String>of(orderId);
  }


  public Execution transactionStatus(TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * Status of the Execution
   * @return transactionStatus
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "executed", required = true, value = "Status of the Execution")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TransactionStatusEnum getTransactionStatus() {
    return transactionStatus;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionStatus(TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public Execution net(Double net) {
    this.net = net;
    return this;
  }

   /**
   * Cash value of the transaction, net of brokerage costs
   * @return net
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "0.01", required = true, value = "Cash value of the transaction, net of brokerage costs")
  @JsonProperty(JSON_PROPERTY_NET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getNet() {
    return net;
  }


  @JsonProperty(JSON_PROPERTY_NET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNet(Double net) {
    this.net = net;
  }


  public Execution settlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * Settlement date in YYYY-MM-DD format
   * @return settlementDate
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "2024-03-11", required = true, value = "Settlement date in YYYY-MM-DD format")
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSettlementDate() {
    return settlementDate;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public Execution settlementCurrency(String settlementCurrency) {
    this.settlementCurrency = settlementCurrency;
    return this;
  }

   /**
   * The iso currency code of the Settlement Value
   * @return settlementCurrency
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "EUR", required = true, value = "The iso currency code of the Settlement Value")
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSettlementCurrency() {
    return settlementCurrency;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSettlementCurrency(String settlementCurrency) {
    this.settlementCurrency = settlementCurrency;
  }


  public Execution settlementValue(Double settlementValue) {
    this.settlementValue = settlementValue;
    return this;
  }

   /**
   * Cash value of the transaction in settlement currency
   * @return settlementValue
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "0.01", required = true, value = "Cash value of the transaction in settlement currency")
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getSettlementValue() {
    return settlementValue;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSettlementValue(Double settlementValue) {
    this.settlementValue = settlementValue;
  }


  public Execution foreignExchangeRate(Float foreignExchangeRate) {
    this.foreignExchangeRate = JsonNullable.<Float>of(foreignExchangeRate);
    return this;
  }

   /**
   * FX rate to convert the net, gross fields to reporting currency
   * @return foreignExchangeRate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1", value = "FX rate to convert the net, gross fields to reporting currency")
  @JsonIgnore

  public Float getForeignExchangeRate() {
        return foreignExchangeRate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FOREIGN_EXCHANGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Float> getForeignExchangeRate_JsonNullable() {
    return foreignExchangeRate;
  }
  
  @JsonProperty(JSON_PROPERTY_FOREIGN_EXCHANGE_RATE)
  public void setForeignExchangeRate_JsonNullable(JsonNullable<Float> foreignExchangeRate) {
    this.foreignExchangeRate = foreignExchangeRate;
  }

  public void setForeignExchangeRate(Float foreignExchangeRate) {
    this.foreignExchangeRate = JsonNullable.<Float>of(foreignExchangeRate);
  }


  public Execution broker(String broker) {
    this.broker = JsonNullable.<String>of(broker);
    return this;
  }

   /**
   * Execution broker id
   * @return broker
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "B1", value = "Execution broker id")
  @JsonIgnore

  public String getBroker() {
        return broker.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BROKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getBroker_JsonNullable() {
    return broker;
  }
  
  @JsonProperty(JSON_PROPERTY_BROKER)
  public void setBroker_JsonNullable(JsonNullable<String> broker) {
    this.broker = broker;
  }

  public void setBroker(String broker) {
    this.broker = JsonNullable.<String>of(broker);
  }


  public Execution custodian(String custodian) {
    this.custodian = JsonNullable.<String>of(custodian);
    return this;
  }

   /**
   * Execution custodian Id
   * @return custodian
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "C1", value = "Execution custodian Id")
  @JsonIgnore

  public String getCustodian() {
        return custodian.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CUSTODIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCustodian_JsonNullable() {
    return custodian;
  }
  
  @JsonProperty(JSON_PROPERTY_CUSTODIAN)
  public void setCustodian_JsonNullable(JsonNullable<String> custodian) {
    this.custodian = custodian;
  }

  public void setCustodian(String custodian) {
    this.custodian = JsonNullable.<String>of(custodian);
  }


  public Execution accruedInterest(Double accruedInterest) {
    this.accruedInterest = JsonNullable.<Double>of(accruedInterest);
    return this;
  }

   /**
   * Execution accrued interest
   * @return accruedInterest
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.01", value = "Execution accrued interest")
  @JsonIgnore

  public Double getAccruedInterest() {
        return accruedInterest.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ACCRUED_INTEREST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getAccruedInterest_JsonNullable() {
    return accruedInterest;
  }
  
  @JsonProperty(JSON_PROPERTY_ACCRUED_INTEREST)
  public void setAccruedInterest_JsonNullable(JsonNullable<Double> accruedInterest) {
    this.accruedInterest = accruedInterest;
  }

  public void setAccruedInterest(Double accruedInterest) {
    this.accruedInterest = JsonNullable.<Double>of(accruedInterest);
  }


  public Execution commission(Double commission) {
    this.commission = JsonNullable.<Double>of(commission);
    return this;
  }

   /**
   * Execution commission value
   * @return commission
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.01", value = "Execution commission value")
  @JsonIgnore

  public Double getCommission() {
        return commission.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getCommission_JsonNullable() {
    return commission;
  }
  
  @JsonProperty(JSON_PROPERTY_COMMISSION)
  public void setCommission_JsonNullable(JsonNullable<Double> commission) {
    this.commission = commission;
  }

  public void setCommission(Double commission) {
    this.commission = JsonNullable.<Double>of(commission);
  }


  public Execution clearingCommission(Double clearingCommission) {
    this.clearingCommission = JsonNullable.<Double>of(clearingCommission);
    return this;
  }

   /**
   * Execution clearing commission value
   * @return clearingCommission
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.01", value = "Execution clearing commission value")
  @JsonIgnore

  public Double getClearingCommission() {
        return clearingCommission.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLEARING_COMMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getClearingCommission_JsonNullable() {
    return clearingCommission;
  }
  
  @JsonProperty(JSON_PROPERTY_CLEARING_COMMISSION)
  public void setClearingCommission_JsonNullable(JsonNullable<Double> clearingCommission) {
    this.clearingCommission = clearingCommission;
  }

  public void setClearingCommission(Double clearingCommission) {
    this.clearingCommission = JsonNullable.<Double>of(clearingCommission);
  }


  public Execution localTax(Double localTax) {
    this.localTax = JsonNullable.<Double>of(localTax);
    return this;
  }

   /**
   * Execution local tax value
   * @return localTax
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.01", value = "Execution local tax value")
  @JsonIgnore

  public Double getLocalTax() {
        return localTax.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOCAL_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getLocalTax_JsonNullable() {
    return localTax;
  }
  
  @JsonProperty(JSON_PROPERTY_LOCAL_TAX)
  public void setLocalTax_JsonNullable(JsonNullable<Double> localTax) {
    this.localTax = localTax;
  }

  public void setLocalTax(Double localTax) {
    this.localTax = JsonNullable.<Double>of(localTax);
  }


  public Execution localFee(Double localFee) {
    this.localFee = JsonNullable.<Double>of(localFee);
    return this;
  }

   /**
   * Execution local fee value
   * @return localFee
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.01", value = "Execution local fee value")
  @JsonIgnore

  public Double getLocalFee() {
        return localFee.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOCAL_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getLocalFee_JsonNullable() {
    return localFee;
  }
  
  @JsonProperty(JSON_PROPERTY_LOCAL_FEE)
  public void setLocalFee_JsonNullable(JsonNullable<Double> localFee) {
    this.localFee = localFee;
  }

  public void setLocalFee(Double localFee) {
    this.localFee = JsonNullable.<Double>of(localFee);
  }


  public Execution brokerFee(Double brokerFee) {
    this.brokerFee = JsonNullable.<Double>of(brokerFee);
    return this;
  }

   /**
   * Execution broker fee value
   * @return brokerFee
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.01", value = "Execution broker fee value")
  @JsonIgnore

  public Double getBrokerFee() {
        return brokerFee.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BROKER_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getBrokerFee_JsonNullable() {
    return brokerFee;
  }
  
  @JsonProperty(JSON_PROPERTY_BROKER_FEE)
  public void setBrokerFee_JsonNullable(JsonNullable<Double> brokerFee) {
    this.brokerFee = brokerFee;
  }

  public void setBrokerFee(Double brokerFee) {
    this.brokerFee = JsonNullable.<Double>of(brokerFee);
  }


  public Execution exchangeFee(Double exchangeFee) {
    this.exchangeFee = JsonNullable.<Double>of(exchangeFee);
    return this;
  }

   /**
   * Execution exchange fee value
   * @return exchangeFee
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.01", value = "Execution exchange fee value")
  @JsonIgnore

  public Double getExchangeFee() {
        return exchangeFee.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXCHANGE_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getExchangeFee_JsonNullable() {
    return exchangeFee;
  }
  
  @JsonProperty(JSON_PROPERTY_EXCHANGE_FEE)
  public void setExchangeFee_JsonNullable(JsonNullable<Double> exchangeFee) {
    this.exchangeFee = exchangeFee;
  }

  public void setExchangeFee(Double exchangeFee) {
    this.exchangeFee = JsonNullable.<Double>of(exchangeFee);
  }


  public Execution miscellaneousFee(Double miscellaneousFee) {
    this.miscellaneousFee = JsonNullable.<Double>of(miscellaneousFee);
    return this;
  }

   /**
   * Execution miscellaneous fee value
   * @return miscellaneousFee
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.01", value = "Execution miscellaneous fee value")
  @JsonIgnore

  public Double getMiscellaneousFee() {
        return miscellaneousFee.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MISCELLANEOUS_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getMiscellaneousFee_JsonNullable() {
    return miscellaneousFee;
  }
  
  @JsonProperty(JSON_PROPERTY_MISCELLANEOUS_FEE)
  public void setMiscellaneousFee_JsonNullable(JsonNullable<Double> miscellaneousFee) {
    this.miscellaneousFee = miscellaneousFee;
  }

  public void setMiscellaneousFee(Double miscellaneousFee) {
    this.miscellaneousFee = JsonNullable.<Double>of(miscellaneousFee);
  }


  public Execution account(String account) {
    this.account = account;
    return this;
  }

   /**
   * Path of the account
   * @return account
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Client:/folder1/testing.acct", required = true, value = "Path of the account")
  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccount() {
    return account;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccount(String account) {
    this.account = account;
  }


  public Execution symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Symbol corresponding to the traded instrument
   * @return symbol
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "FDS-USA", required = true, value = "Symbol corresponding to the traded instrument")
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public Execution instrumentName(String instrumentName) {
    this.instrumentName = instrumentName;
    return this;
  }

   /**
   * Name or description of the traded instrument
   * @return instrumentName
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "FactSet Research Systems", required = true, value = "Name or description of the traded instrument")
  @JsonProperty(JSON_PROPERTY_INSTRUMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInstrumentName() {
    return instrumentName;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstrumentName(String instrumentName) {
    this.instrumentName = instrumentName;
  }


  public Execution side(SideEnum side) {
    this.side = side;
    return this;
  }

   /**
   * Side of the order
   * @return side
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "buy", required = true, value = "Side of the order")
  @JsonProperty(JSON_PROPERTY_SIDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SideEnum getSide() {
    return side;
  }


  @JsonProperty(JSON_PROPERTY_SIDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSide(SideEnum side) {
    this.side = side;
  }


  public Execution unitType(UnitTypeEnum unitType) {
    this.unitType = unitType;
    return this;
  }

   /**
   * Unit type of the order. Indicates if the trade is driven by quantity or value
   * @return unitType
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "quantity", required = true, value = "Unit type of the order. Indicates if the trade is driven by quantity or value")
  @JsonProperty(JSON_PROPERTY_UNIT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UnitTypeEnum getUnitType() {
    return unitType;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitType(UnitTypeEnum unitType) {
    this.unitType = unitType;
  }


  public Execution transactionLeaves(Double transactionLeaves) {
    this.transactionLeaves = JsonNullable.<Double>of(transactionLeaves);
    return this;
  }

   /**
   * Shares that have been ordered and not executed
   * @return transactionLeaves
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.01", value = "Shares that have been ordered and not executed")
  @JsonIgnore

  public Double getTransactionLeaves() {
        return transactionLeaves.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSACTION_LEAVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getTransactionLeaves_JsonNullable() {
    return transactionLeaves;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSACTION_LEAVES)
  public void setTransactionLeaves_JsonNullable(JsonNullable<Double> transactionLeaves) {
    this.transactionLeaves = transactionLeaves;
  }

  public void setTransactionLeaves(Double transactionLeaves) {
    this.transactionLeaves = JsonNullable.<Double>of(transactionLeaves);
  }


  public Execution quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity of the instrument traded
   * @return quantity
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "1000.01", required = true, value = "Quantity of the instrument traded")
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public Execution gross(Double gross) {
    this.gross = gross;
    return this;
  }

   /**
   * Cash value of the transaction
   * @return gross
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "0.01", required = true, value = "Cash value of the transaction")
  @JsonProperty(JSON_PROPERTY_GROSS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getGross() {
    return gross;
  }


  @JsonProperty(JSON_PROPERTY_GROSS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGross(Double gross) {
    this.gross = gross;
  }


  public Execution price(Double price) {
    this.price = JsonNullable.<Double>of(price);
    return this;
  }

   /**
   * The transaction price
   * @return price
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "420.25", value = "The transaction price")
  @JsonIgnore

  public Double getPrice() {
        return price.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getPrice_JsonNullable() {
    return price;
  }
  
  @JsonProperty(JSON_PROPERTY_PRICE)
  public void setPrice_JsonNullable(JsonNullable<Double> price) {
    this.price = price;
  }

  public void setPrice(Double price) {
    this.price = JsonNullable.<Double>of(price);
  }


  public Execution currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * The iso currency code of cash valued fields, Net Amount and Gross Amount
   * @return currency
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "USD", required = true, value = "The iso currency code of cash valued fields, Net Amount and Gross Amount")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Execution complianceStatus(ComplianceStatusEnum complianceStatus) {
    this.complianceStatus = complianceStatus;
    return this;
  }

   /**
   * Compliance check status
   * @return complianceStatus
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "unchecked", value = "Compliance check status")
  @JsonProperty(JSON_PROPERTY_COMPLIANCE_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ComplianceStatusEnum getComplianceStatus() {
    return complianceStatus;
  }


  @JsonProperty(JSON_PROPERTY_COMPLIANCE_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComplianceStatus(ComplianceStatusEnum complianceStatus) {
    this.complianceStatus = complianceStatus;
  }


  public Execution addedDateTime(String addedDateTime) {
    this.addedDateTime = JsonNullable.<String>of(addedDateTime);
    return this;
  }

   /**
   * Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF
   * @return addedDateTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2024-01-25T09:30:23.235", value = "Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF")
  @JsonIgnore

  public String getAddedDateTime() {
        return addedDateTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ADDED_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAddedDateTime_JsonNullable() {
    return addedDateTime;
  }
  
  @JsonProperty(JSON_PROPERTY_ADDED_DATE_TIME)
  public void setAddedDateTime_JsonNullable(JsonNullable<String> addedDateTime) {
    this.addedDateTime = addedDateTime;
  }

  public void setAddedDateTime(String addedDateTime) {
    this.addedDateTime = JsonNullable.<String>of(addedDateTime);
  }


  public Execution updatedDateTime(String updatedDateTime) {
    this.updatedDateTime = JsonNullable.<String>of(updatedDateTime);
    return this;
  }

   /**
   * Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF
   * @return updatedDateTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2024-01-25T09:30:23.235", value = "Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF")
  @JsonIgnore

  public String getUpdatedDateTime() {
        return updatedDateTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UPDATED_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getUpdatedDateTime_JsonNullable() {
    return updatedDateTime;
  }
  
  @JsonProperty(JSON_PROPERTY_UPDATED_DATE_TIME)
  public void setUpdatedDateTime_JsonNullable(JsonNullable<String> updatedDateTime) {
    this.updatedDateTime = updatedDateTime;
  }

  public void setUpdatedDateTime(String updatedDateTime) {
    this.updatedDateTime = JsonNullable.<String>of(updatedDateTime);
  }


  public Execution additionalFields(java.util.List<AdditionalField> additionalFields) {
    this.additionalFields = JsonNullable.<java.util.List<AdditionalField>>of(additionalFields);
    return this;
  }

  public Execution addAdditionalFieldsItem(AdditionalField additionalFieldsItem) {
    if (this.additionalFields == null || !this.additionalFields.isPresent()) {
      this.additionalFields = JsonNullable.<java.util.List<AdditionalField>>of(new java.util.ArrayList<>());
    }
    try {
      this.additionalFields.get().add(additionalFieldsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * List of additional fields which can be used for dynamically populating other ofdb fields
   * @return additionalFields
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "List of additional fields which can be used for dynamically populating other ofdb fields")
  @JsonIgnore

  public java.util.List<AdditionalField> getAdditionalFields() {
        return additionalFields.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ADDITIONAL_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<AdditionalField>> getAdditionalFields_JsonNullable() {
    return additionalFields;
  }
  
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_FIELDS)
  public void setAdditionalFields_JsonNullable(JsonNullable<java.util.List<AdditionalField>> additionalFields) {
    this.additionalFields = additionalFields;
  }

  public void setAdditionalFields(java.util.List<AdditionalField> additionalFields) {
    this.additionalFields = JsonNullable.<java.util.List<AdditionalField>>of(additionalFields);
  }


  /**
   * Return true if this Execution object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Execution execution = (Execution) o;
    return Objects.equals(this.tradeDate, execution.tradeDate) &&
        Objects.equals(this.transactionId, execution.transactionId) &&
        equalsNullable(this.parentId, execution.parentId) &&
        equalsNullable(this.orderId, execution.orderId) &&
        Objects.equals(this.transactionStatus, execution.transactionStatus) &&
        Objects.equals(this.net, execution.net) &&
        Objects.equals(this.settlementDate, execution.settlementDate) &&
        Objects.equals(this.settlementCurrency, execution.settlementCurrency) &&
        Objects.equals(this.settlementValue, execution.settlementValue) &&
        equalsNullable(this.foreignExchangeRate, execution.foreignExchangeRate) &&
        equalsNullable(this.broker, execution.broker) &&
        equalsNullable(this.custodian, execution.custodian) &&
        equalsNullable(this.accruedInterest, execution.accruedInterest) &&
        equalsNullable(this.commission, execution.commission) &&
        equalsNullable(this.clearingCommission, execution.clearingCommission) &&
        equalsNullable(this.localTax, execution.localTax) &&
        equalsNullable(this.localFee, execution.localFee) &&
        equalsNullable(this.brokerFee, execution.brokerFee) &&
        equalsNullable(this.exchangeFee, execution.exchangeFee) &&
        equalsNullable(this.miscellaneousFee, execution.miscellaneousFee) &&
        Objects.equals(this.account, execution.account) &&
        Objects.equals(this.symbol, execution.symbol) &&
        Objects.equals(this.instrumentName, execution.instrumentName) &&
        Objects.equals(this.side, execution.side) &&
        Objects.equals(this.unitType, execution.unitType) &&
        equalsNullable(this.transactionLeaves, execution.transactionLeaves) &&
        Objects.equals(this.quantity, execution.quantity) &&
        Objects.equals(this.gross, execution.gross) &&
        equalsNullable(this.price, execution.price) &&
        Objects.equals(this.currency, execution.currency) &&
        Objects.equals(this.complianceStatus, execution.complianceStatus) &&
        equalsNullable(this.addedDateTime, execution.addedDateTime) &&
        equalsNullable(this.updatedDateTime, execution.updatedDateTime) &&
        equalsNullable(this.additionalFields, execution.additionalFields);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tradeDate, transactionId, hashCodeNullable(parentId), hashCodeNullable(orderId), transactionStatus, net, settlementDate, settlementCurrency, settlementValue, hashCodeNullable(foreignExchangeRate), hashCodeNullable(broker), hashCodeNullable(custodian), hashCodeNullable(accruedInterest), hashCodeNullable(commission), hashCodeNullable(clearingCommission), hashCodeNullable(localTax), hashCodeNullable(localFee), hashCodeNullable(brokerFee), hashCodeNullable(exchangeFee), hashCodeNullable(miscellaneousFee), account, symbol, instrumentName, side, unitType, hashCodeNullable(transactionLeaves), quantity, gross, hashCodeNullable(price), currency, complianceStatus, hashCodeNullable(addedDateTime), hashCodeNullable(updatedDateTime), hashCodeNullable(additionalFields));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Execution {\n");
    sb.append("    tradeDate: ").append(toIndentedString(tradeDate)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    net: ").append(toIndentedString(net)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    settlementCurrency: ").append(toIndentedString(settlementCurrency)).append("\n");
    sb.append("    settlementValue: ").append(toIndentedString(settlementValue)).append("\n");
    sb.append("    foreignExchangeRate: ").append(toIndentedString(foreignExchangeRate)).append("\n");
    sb.append("    broker: ").append(toIndentedString(broker)).append("\n");
    sb.append("    custodian: ").append(toIndentedString(custodian)).append("\n");
    sb.append("    accruedInterest: ").append(toIndentedString(accruedInterest)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    clearingCommission: ").append(toIndentedString(clearingCommission)).append("\n");
    sb.append("    localTax: ").append(toIndentedString(localTax)).append("\n");
    sb.append("    localFee: ").append(toIndentedString(localFee)).append("\n");
    sb.append("    brokerFee: ").append(toIndentedString(brokerFee)).append("\n");
    sb.append("    exchangeFee: ").append(toIndentedString(exchangeFee)).append("\n");
    sb.append("    miscellaneousFee: ").append(toIndentedString(miscellaneousFee)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    instrumentName: ").append(toIndentedString(instrumentName)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    unitType: ").append(toIndentedString(unitType)).append("\n");
    sb.append("    transactionLeaves: ").append(toIndentedString(transactionLeaves)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    gross: ").append(toIndentedString(gross)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    complianceStatus: ").append(toIndentedString(complianceStatus)).append("\n");
    sb.append("    addedDateTime: ").append(toIndentedString(addedDateTime)).append("\n");
    sb.append("    updatedDateTime: ").append(toIndentedString(updatedDateTime)).append("\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

