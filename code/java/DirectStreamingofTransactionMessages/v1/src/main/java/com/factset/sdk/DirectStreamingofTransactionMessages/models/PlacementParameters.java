/*
 * DSOTM API
 * Allow clients to send transactions data to FactSet.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.DirectStreamingofTransactionMessages.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.DirectStreamingofTransactionMessages.JSON;


/**
 * PlacementParameters
 */
@JsonPropertyOrder({
  PlacementParameters.JSON_PROPERTY_TRANSACTION_STATUS,
  PlacementParameters.JSON_PROPERTY_PARENT_ID,
  PlacementParameters.JSON_PROPERTY_INSTRUCTION_TYPE,
  PlacementParameters.JSON_PROPERTY_INSTRUCTION_VALUE,
  PlacementParameters.JSON_PROPERTY_TIF,
  PlacementParameters.JSON_PROPERTY_TIF_DATE,
  PlacementParameters.JSON_PROPERTY_TRANSACTION_ID,
  PlacementParameters.JSON_PROPERTY_ORDER_ID,
  PlacementParameters.JSON_PROPERTY_PORTFOLIO,
  PlacementParameters.JSON_PROPERTY_SYMBOL,
  PlacementParameters.JSON_PROPERTY_DESCRIPTION,
  PlacementParameters.JSON_PROPERTY_TRADE_TYPE,
  PlacementParameters.JSON_PROPERTY_UNIT_TYPE,
  PlacementParameters.JSON_PROPERTY_TRANSACTION_LEAVES,
  PlacementParameters.JSON_PROPERTY_QUANTITY,
  PlacementParameters.JSON_PROPERTY_GROSS,
  PlacementParameters.JSON_PROPERTY_PRICE,
  PlacementParameters.JSON_PROPERTY_CURRENCY_I_S_O,
  PlacementParameters.JSON_PROPERTY_TRADE_DATE,
  PlacementParameters.JSON_PROPERTY_ADDED_DATE_TIME,
  PlacementParameters.JSON_PROPERTY_UPDATED_DATE_TIME,
  PlacementParameters.JSON_PROPERTY_ENTITY,
  PlacementParameters.JSON_PROPERTY_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class PlacementParameters implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TRANSACTION_STATUS = "transactionStatus";
  private String transactionStatus;

  public static final String JSON_PROPERTY_PARENT_ID = "parentId";
  private JsonNullable<String> parentId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_INSTRUCTION_TYPE = "instructionType";
  private String instructionType;

  public static final String JSON_PROPERTY_INSTRUCTION_VALUE = "instructionValue";
  private Double instructionValue;

  public static final String JSON_PROPERTY_TIF = "tif";
  private String tif;

  public static final String JSON_PROPERTY_TIF_DATE = "tifDate";
  private String tifDate;

  public static final String JSON_PROPERTY_TRANSACTION_ID = "transactionId";
  private String transactionId;

  public static final String JSON_PROPERTY_ORDER_ID = "orderId";
  private JsonNullable<String> orderId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PORTFOLIO = "portfolio";
  private String portfolio;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_TRADE_TYPE = "tradeType";
  private String tradeType;

  public static final String JSON_PROPERTY_UNIT_TYPE = "unitType";
  private String unitType;

  public static final String JSON_PROPERTY_TRANSACTION_LEAVES = "transactionLeaves";
  private Double transactionLeaves;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private Double quantity;

  public static final String JSON_PROPERTY_GROSS = "gross";
  private Double gross;

  public static final String JSON_PROPERTY_PRICE = "price";
  private Double price;

  public static final String JSON_PROPERTY_CURRENCY_I_S_O = "currencyISO";
  private String currencyISO;

  public static final String JSON_PROPERTY_TRADE_DATE = "tradeDate";
  private String tradeDate;

  public static final String JSON_PROPERTY_ADDED_DATE_TIME = "addedDateTime";
  private String addedDateTime;

  public static final String JSON_PROPERTY_UPDATED_DATE_TIME = "updatedDateTime";
  private String updatedDateTime;

  public static final String JSON_PROPERTY_ENTITY = "entity";
  private String entity;

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public PlacementParameters() { 
  }

  @JsonCreator
  public PlacementParameters(
    @JsonProperty(JSON_PROPERTY_ENTITY) String entity, 
    @JsonProperty(JSON_PROPERTY_STATUS) String status
  ) {
    this();
    this.entity = entity;
    this.status = status;
  }

  public PlacementParameters transactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * Transaction Status of a Placement could be any of the following values: Placed, PartialFilled, Filled, Expired, Cancelled, Rejected.
   * @return transactionStatus
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Transaction Status of a Placement could be any of the following values: Placed, PartialFilled, Filled, Expired, Cancelled, Rejected.")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransactionStatus() {
    return transactionStatus;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public PlacementParameters parentId(String parentId) {
    this.parentId = JsonNullable.<String>of(parentId);
    return this;
  }

   /**
   * Unique Id of the order which spawned this placement
   * @return parentId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique Id of the order which spawned this placement")
  @JsonIgnore

  public String getParentId() {
        return parentId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getParentId_JsonNullable() {
    return parentId;
  }
  
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  public void setParentId_JsonNullable(JsonNullable<String> parentId) {
    this.parentId = parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = JsonNullable.<String>of(parentId);
  }


  public PlacementParameters instructionType(String instructionType) {
    this.instructionType = instructionType;
    return this;
  }

   /**
   * Instruction Type of a Placement could be any of the following values: Market, Limit, Stop
   * @return instructionType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Instruction Type of a Placement could be any of the following values: Market, Limit, Stop")
  @JsonProperty(JSON_PROPERTY_INSTRUCTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInstructionType() {
    return instructionType;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUCTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstructionType(String instructionType) {
    this.instructionType = instructionType;
  }


  public PlacementParameters instructionValue(Double instructionValue) {
    this.instructionValue = instructionValue;
    return this;
  }

   /**
   * InstructionValue for a Placement
   * @return instructionValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "InstructionValue for a Placement")
  @JsonProperty(JSON_PROPERTY_INSTRUCTION_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getInstructionValue() {
    return instructionValue;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUCTION_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstructionValue(Double instructionValue) {
    this.instructionValue = instructionValue;
  }


  public PlacementParameters tif(String tif) {
    this.tif = tif;
    return this;
  }

   /**
   * TIF of an Order could be any of the following values: GTC, GTD, D, W
   * @return tif
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "TIF of an Order could be any of the following values: GTC, GTD, D, W")
  @JsonProperty(JSON_PROPERTY_TIF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTif() {
    return tif;
  }


  @JsonProperty(JSON_PROPERTY_TIF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTif(String tif) {
    this.tif = tif;
  }


  public PlacementParameters tifDate(String tifDate) {
    this.tifDate = tifDate;
    return this;
  }

   /**
   * TIF date which is in the format YYYY-MM-DD
   * @return tifDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "TIF date which is in the format YYYY-MM-DD")
  @JsonProperty(JSON_PROPERTY_TIF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTifDate() {
    return tifDate;
  }


  @JsonProperty(JSON_PROPERTY_TIF_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTifDate(String tifDate) {
    this.tifDate = tifDate;
  }


  public PlacementParameters transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Unique Id for the transaction
   * @return transactionId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique Id for the transaction")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransactionId() {
    return transactionId;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public PlacementParameters orderId(String orderId) {
    this.orderId = JsonNullable.<String>of(orderId);
    return this;
  }

   /**
   * Unique Id of the order which originated the record
   * @return orderId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique Id of the order which originated the record")
  @JsonIgnore

  public String getOrderId() {
        return orderId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getOrderId_JsonNullable() {
    return orderId;
  }
  
  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  public void setOrderId_JsonNullable(JsonNullable<String> orderId) {
    this.orderId = orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = JsonNullable.<String>of(orderId);
  }


  public PlacementParameters portfolio(String portfolio) {
    this.portfolio = portfolio;
    return this;
  }

   /**
   * Path of the portfolio (Ex: Client:/folder1/testing.ofdb)
   * @return portfolio
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Path of the portfolio (Ex: Client:/folder1/testing.ofdb)")
  @JsonProperty(JSON_PROPERTY_PORTFOLIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPortfolio() {
    return portfolio;
  }


  @JsonProperty(JSON_PROPERTY_PORTFOLIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPortfolio(String portfolio) {
    this.portfolio = portfolio;
  }


  public PlacementParameters symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Symbol corresponding to the traded instrument.
   * @return symbol
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Symbol corresponding to the traded instrument.")
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public PlacementParameters description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Description")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public PlacementParameters tradeType(String tradeType) {
    this.tradeType = tradeType;
    return this;
  }

   /**
   * Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.
   * @return tradeType
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.")
  @JsonProperty(JSON_PROPERTY_TRADE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTradeType() {
    return tradeType;
  }


  @JsonProperty(JSON_PROPERTY_TRADE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTradeType(String tradeType) {
    this.tradeType = tradeType;
  }


  public PlacementParameters unitType(String unitType) {
    this.unitType = unitType;
    return this;
  }

   /**
   * Unit type could be one of Quantity or Value.
   * @return unitType
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unit type could be one of Quantity or Value.")
  @JsonProperty(JSON_PROPERTY_UNIT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUnitType() {
    return unitType;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitType(String unitType) {
    this.unitType = unitType;
  }


  public PlacementParameters transactionLeaves(Double transactionLeaves) {
    this.transactionLeaves = transactionLeaves;
    return this;
  }

   /**
   * Shares that have been ordered and not executed
   * @return transactionLeaves
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Shares that have been ordered and not executed")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_LEAVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getTransactionLeaves() {
    return transactionLeaves;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_LEAVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionLeaves(Double transactionLeaves) {
    this.transactionLeaves = transactionLeaves;
  }


  public PlacementParameters quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity of the instrument traded.
   * @return quantity
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Quantity of the instrument traded.")
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public PlacementParameters gross(Double gross) {
    this.gross = gross;
    return this;
  }

   /**
   * Cash value of the transaction
   * @return gross
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Cash value of the transaction")
  @JsonProperty(JSON_PROPERTY_GROSS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getGross() {
    return gross;
  }


  @JsonProperty(JSON_PROPERTY_GROSS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGross(Double gross) {
    this.gross = gross;
  }


  public PlacementParameters price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * The transaction price
   * @return price
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The transaction price")
  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getPrice() {
    return price;
  }


  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrice(Double price) {
    this.price = price;
  }


  public PlacementParameters currencyISO(String currencyISO) {
    this.currencyISO = currencyISO;
    return this;
  }

   /**
   * The currency code of cash valued fields, Net Amount and Gross Amount.
   * @return currencyISO
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The currency code of cash valued fields, Net Amount and Gross Amount.")
  @JsonProperty(JSON_PROPERTY_CURRENCY_I_S_O)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrencyISO() {
    return currencyISO;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_I_S_O)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrencyISO(String currencyISO) {
    this.currencyISO = currencyISO;
  }


  public PlacementParameters tradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

   /**
   * Trade date which is in the format YYYY-MM-DD
   * @return tradeDate
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Trade date which is in the format YYYY-MM-DD")
  @JsonProperty(JSON_PROPERTY_TRADE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTradeDate() {
    return tradeDate;
  }


  @JsonProperty(JSON_PROPERTY_TRADE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
  }


  public PlacementParameters addedDateTime(String addedDateTime) {
    this.addedDateTime = addedDateTime;
    return this;
  }

   /**
   * Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF
   * @return addedDateTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF")
  @JsonProperty(JSON_PROPERTY_ADDED_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddedDateTime() {
    return addedDateTime;
  }


  @JsonProperty(JSON_PROPERTY_ADDED_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddedDateTime(String addedDateTime) {
    this.addedDateTime = addedDateTime;
  }


  public PlacementParameters updatedDateTime(String updatedDateTime) {
    this.updatedDateTime = updatedDateTime;
    return this;
  }

   /**
   * Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF
   * @return updatedDateTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF")
  @JsonProperty(JSON_PROPERTY_UPDATED_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpdatedDateTime() {
    return updatedDateTime;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdatedDateTime(String updatedDateTime) {
    this.updatedDateTime = updatedDateTime;
  }


   /**
   * Get entity
   * @return entity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntity() {
    return entity;
  }




   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatus() {
    return status;
  }




  /**
   * Return true if this PlacementParameters object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlacementParameters placementParameters = (PlacementParameters) o;
    return Objects.equals(this.transactionStatus, placementParameters.transactionStatus) &&
        equalsNullable(this.parentId, placementParameters.parentId) &&
        Objects.equals(this.instructionType, placementParameters.instructionType) &&
        Objects.equals(this.instructionValue, placementParameters.instructionValue) &&
        Objects.equals(this.tif, placementParameters.tif) &&
        Objects.equals(this.tifDate, placementParameters.tifDate) &&
        Objects.equals(this.transactionId, placementParameters.transactionId) &&
        equalsNullable(this.orderId, placementParameters.orderId) &&
        Objects.equals(this.portfolio, placementParameters.portfolio) &&
        Objects.equals(this.symbol, placementParameters.symbol) &&
        Objects.equals(this.description, placementParameters.description) &&
        Objects.equals(this.tradeType, placementParameters.tradeType) &&
        Objects.equals(this.unitType, placementParameters.unitType) &&
        Objects.equals(this.transactionLeaves, placementParameters.transactionLeaves) &&
        Objects.equals(this.quantity, placementParameters.quantity) &&
        Objects.equals(this.gross, placementParameters.gross) &&
        Objects.equals(this.price, placementParameters.price) &&
        Objects.equals(this.currencyISO, placementParameters.currencyISO) &&
        Objects.equals(this.tradeDate, placementParameters.tradeDate) &&
        Objects.equals(this.addedDateTime, placementParameters.addedDateTime) &&
        Objects.equals(this.updatedDateTime, placementParameters.updatedDateTime) &&
        Objects.equals(this.entity, placementParameters.entity) &&
        Objects.equals(this.status, placementParameters.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionStatus, hashCodeNullable(parentId), instructionType, instructionValue, tif, tifDate, transactionId, hashCodeNullable(orderId), portfolio, symbol, description, tradeType, unitType, transactionLeaves, quantity, gross, price, currencyISO, tradeDate, addedDateTime, updatedDateTime, entity, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlacementParameters {\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    instructionType: ").append(toIndentedString(instructionType)).append("\n");
    sb.append("    instructionValue: ").append(toIndentedString(instructionValue)).append("\n");
    sb.append("    tif: ").append(toIndentedString(tif)).append("\n");
    sb.append("    tifDate: ").append(toIndentedString(tifDate)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    portfolio: ").append(toIndentedString(portfolio)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tradeType: ").append(toIndentedString(tradeType)).append("\n");
    sb.append("    unitType: ").append(toIndentedString(unitType)).append("\n");
    sb.append("    transactionLeaves: ").append(toIndentedString(transactionLeaves)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    gross: ").append(toIndentedString(gross)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    currencyISO: ").append(toIndentedString(currencyISO)).append("\n");
    sb.append("    tradeDate: ").append(toIndentedString(tradeDate)).append("\n");
    sb.append("    addedDateTime: ").append(toIndentedString(addedDateTime)).append("\n");
    sb.append("    updatedDateTime: ").append(toIndentedString(updatedDateTime)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

