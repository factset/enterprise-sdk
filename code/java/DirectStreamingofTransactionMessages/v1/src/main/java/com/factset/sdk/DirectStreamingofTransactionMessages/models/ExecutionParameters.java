/*
 * DSOTM API
 * Allow clients to send transactions data to FactSet.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.DirectStreamingofTransactionMessages.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.DirectStreamingofTransactionMessages.JSON;


/**
 * ExecutionParameters
 */
@JsonPropertyOrder({
  ExecutionParameters.JSON_PROPERTY_TRANSACTION_STATUS,
  ExecutionParameters.JSON_PROPERTY_PARENT_ID,
  ExecutionParameters.JSON_PROPERTY_NET,
  ExecutionParameters.JSON_PROPERTY_SETTLEMENT_DATE,
  ExecutionParameters.JSON_PROPERTY_SETTLEMENT_CURRENCY_I_S_O,
  ExecutionParameters.JSON_PROPERTY_SETTLEMENT_VALUE,
  ExecutionParameters.JSON_PROPERTY_FOREIGN_EXCHANGE_RATE,
  ExecutionParameters.JSON_PROPERTY_BROKER,
  ExecutionParameters.JSON_PROPERTY_CUSTODIAN,
  ExecutionParameters.JSON_PROPERTY_ACCRUED_INTEREST,
  ExecutionParameters.JSON_PROPERTY_COMMISSION,
  ExecutionParameters.JSON_PROPERTY_CLEARING_COMMISSION,
  ExecutionParameters.JSON_PROPERTY_LOCAL_TAX,
  ExecutionParameters.JSON_PROPERTY_LOCAL_FEE,
  ExecutionParameters.JSON_PROPERTY_BROKER_FEE,
  ExecutionParameters.JSON_PROPERTY_EXCHANGE_FEE,
  ExecutionParameters.JSON_PROPERTY_MISCELLANEOUS_FEE,
  ExecutionParameters.JSON_PROPERTY_TRANSACTION_ID,
  ExecutionParameters.JSON_PROPERTY_ORDER_ID,
  ExecutionParameters.JSON_PROPERTY_PORTFOLIO,
  ExecutionParameters.JSON_PROPERTY_SYMBOL,
  ExecutionParameters.JSON_PROPERTY_DESCRIPTION,
  ExecutionParameters.JSON_PROPERTY_TRADE_TYPE,
  ExecutionParameters.JSON_PROPERTY_UNIT_TYPE,
  ExecutionParameters.JSON_PROPERTY_TRANSACTION_LEAVES,
  ExecutionParameters.JSON_PROPERTY_QUANTITY,
  ExecutionParameters.JSON_PROPERTY_GROSS,
  ExecutionParameters.JSON_PROPERTY_PRICE,
  ExecutionParameters.JSON_PROPERTY_CURRENCY_I_S_O,
  ExecutionParameters.JSON_PROPERTY_TRADE_DATE,
  ExecutionParameters.JSON_PROPERTY_ADDED_DATE_TIME,
  ExecutionParameters.JSON_PROPERTY_UPDATED_DATE_TIME,
  ExecutionParameters.JSON_PROPERTY_ENTITY,
  ExecutionParameters.JSON_PROPERTY_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ExecutionParameters implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TRANSACTION_STATUS = "transactionStatus";
  private String transactionStatus;

  public static final String JSON_PROPERTY_PARENT_ID = "parentId";
  private JsonNullable<String> parentId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_NET = "net";
  private Double net;

  public static final String JSON_PROPERTY_SETTLEMENT_DATE = "settlementDate";
  private String settlementDate;

  public static final String JSON_PROPERTY_SETTLEMENT_CURRENCY_I_S_O = "settlementCurrencyISO";
  private String settlementCurrencyISO;

  public static final String JSON_PROPERTY_SETTLEMENT_VALUE = "settlementValue";
  private Double settlementValue;

  public static final String JSON_PROPERTY_FOREIGN_EXCHANGE_RATE = "foreignExchangeRate";
  private Float foreignExchangeRate;

  public static final String JSON_PROPERTY_BROKER = "broker";
  private String broker;

  public static final String JSON_PROPERTY_CUSTODIAN = "custodian";
  private String custodian;

  public static final String JSON_PROPERTY_ACCRUED_INTEREST = "accruedInterest";
  private Double accruedInterest;

  public static final String JSON_PROPERTY_COMMISSION = "commission";
  private Double commission;

  public static final String JSON_PROPERTY_CLEARING_COMMISSION = "clearingCommission";
  private Double clearingCommission;

  public static final String JSON_PROPERTY_LOCAL_TAX = "localTax";
  private Double localTax;

  public static final String JSON_PROPERTY_LOCAL_FEE = "localFee";
  private Double localFee;

  public static final String JSON_PROPERTY_BROKER_FEE = "brokerFee";
  private Double brokerFee;

  public static final String JSON_PROPERTY_EXCHANGE_FEE = "exchangeFee";
  private Double exchangeFee;

  public static final String JSON_PROPERTY_MISCELLANEOUS_FEE = "miscellaneousFee";
  private Double miscellaneousFee;

  public static final String JSON_PROPERTY_TRANSACTION_ID = "transactionId";
  private String transactionId;

  public static final String JSON_PROPERTY_ORDER_ID = "orderId";
  private JsonNullable<String> orderId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PORTFOLIO = "portfolio";
  private String portfolio;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_TRADE_TYPE = "tradeType";
  private String tradeType;

  public static final String JSON_PROPERTY_UNIT_TYPE = "unitType";
  private String unitType;

  public static final String JSON_PROPERTY_TRANSACTION_LEAVES = "transactionLeaves";
  private Double transactionLeaves;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private Double quantity;

  public static final String JSON_PROPERTY_GROSS = "gross";
  private Double gross;

  public static final String JSON_PROPERTY_PRICE = "price";
  private Double price;

  public static final String JSON_PROPERTY_CURRENCY_I_S_O = "currencyISO";
  private String currencyISO;

  public static final String JSON_PROPERTY_TRADE_DATE = "tradeDate";
  private String tradeDate;

  public static final String JSON_PROPERTY_ADDED_DATE_TIME = "addedDateTime";
  private String addedDateTime;

  public static final String JSON_PROPERTY_UPDATED_DATE_TIME = "updatedDateTime";
  private String updatedDateTime;

  public static final String JSON_PROPERTY_ENTITY = "entity";
  private String entity;

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public ExecutionParameters() { 
  }

  @JsonCreator
  public ExecutionParameters(
    @JsonProperty(JSON_PROPERTY_ENTITY) String entity, 
    @JsonProperty(JSON_PROPERTY_STATUS) String status
  ) {
    this();
    this.entity = entity;
    this.status = status;
  }

  public ExecutionParameters transactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * Transaction Status of an Execution could be any of the following values: Executed, Booked, Cancelled.
   * @return transactionStatus
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Transaction Status of an Execution could be any of the following values: Executed, Booked, Cancelled.")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransactionStatus() {
    return transactionStatus;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public ExecutionParameters parentId(String parentId) {
    this.parentId = JsonNullable.<String>of(parentId);
    return this;
  }

   /**
   * Unique Id of the placement which spawned this execution
   * @return parentId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique Id of the placement which spawned this execution")
  @JsonIgnore

  public String getParentId() {
        return parentId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getParentId_JsonNullable() {
    return parentId;
  }
  
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  public void setParentId_JsonNullable(JsonNullable<String> parentId) {
    this.parentId = parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = JsonNullable.<String>of(parentId);
  }


  public ExecutionParameters net(Double net) {
    this.net = net;
    return this;
  }

   /**
   * Cash value of the transaction, net of brokerage costs.
   * @return net
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Cash value of the transaction, net of brokerage costs.")
  @JsonProperty(JSON_PROPERTY_NET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getNet() {
    return net;
  }


  @JsonProperty(JSON_PROPERTY_NET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNet(Double net) {
    this.net = net;
  }


  public ExecutionParameters settlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * Settlement date in YYYY-MM-DD format
   * @return settlementDate
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Settlement date in YYYY-MM-DD format")
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSettlementDate() {
    return settlementDate;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public ExecutionParameters settlementCurrencyISO(String settlementCurrencyISO) {
    this.settlementCurrencyISO = settlementCurrencyISO;
    return this;
  }

   /**
   * Currency code for Settlement Value
   * @return settlementCurrencyISO
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Currency code for Settlement Value")
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_CURRENCY_I_S_O)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSettlementCurrencyISO() {
    return settlementCurrencyISO;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT_CURRENCY_I_S_O)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSettlementCurrencyISO(String settlementCurrencyISO) {
    this.settlementCurrencyISO = settlementCurrencyISO;
  }


  public ExecutionParameters settlementValue(Double settlementValue) {
    this.settlementValue = settlementValue;
    return this;
  }

   /**
   * Cash value of the transaction in settlement currency
   * @return settlementValue
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Cash value of the transaction in settlement currency")
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getSettlementValue() {
    return settlementValue;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSettlementValue(Double settlementValue) {
    this.settlementValue = settlementValue;
  }


  public ExecutionParameters foreignExchangeRate(Float foreignExchangeRate) {
    this.foreignExchangeRate = foreignExchangeRate;
    return this;
  }

   /**
   * FX rate to convert the net, gross fields to reporting currency.
   * @return foreignExchangeRate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "FX rate to convert the net, gross fields to reporting currency.")
  @JsonProperty(JSON_PROPERTY_FOREIGN_EXCHANGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getForeignExchangeRate() {
    return foreignExchangeRate;
  }


  @JsonProperty(JSON_PROPERTY_FOREIGN_EXCHANGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForeignExchangeRate(Float foreignExchangeRate) {
    this.foreignExchangeRate = foreignExchangeRate;
  }


  public ExecutionParameters broker(String broker) {
    this.broker = broker;
    return this;
  }

   /**
   * Execution broker id.
   * @return broker
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Execution broker id.")
  @JsonProperty(JSON_PROPERTY_BROKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBroker() {
    return broker;
  }


  @JsonProperty(JSON_PROPERTY_BROKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBroker(String broker) {
    this.broker = broker;
  }


  public ExecutionParameters custodian(String custodian) {
    this.custodian = custodian;
    return this;
  }

   /**
   * Execution custodian Id.
   * @return custodian
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Execution custodian Id.")
  @JsonProperty(JSON_PROPERTY_CUSTODIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustodian() {
    return custodian;
  }


  @JsonProperty(JSON_PROPERTY_CUSTODIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustodian(String custodian) {
    this.custodian = custodian;
  }


  public ExecutionParameters accruedInterest(Double accruedInterest) {
    this.accruedInterest = accruedInterest;
    return this;
  }

   /**
   * Execution accrued interest.
   * @return accruedInterest
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Execution accrued interest.")
  @JsonProperty(JSON_PROPERTY_ACCRUED_INTEREST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getAccruedInterest() {
    return accruedInterest;
  }


  @JsonProperty(JSON_PROPERTY_ACCRUED_INTEREST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccruedInterest(Double accruedInterest) {
    this.accruedInterest = accruedInterest;
  }


  public ExecutionParameters commission(Double commission) {
    this.commission = commission;
    return this;
  }

   /**
   * Execution commission value.
   * @return commission
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Execution commission value.")
  @JsonProperty(JSON_PROPERTY_COMMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getCommission() {
    return commission;
  }


  @JsonProperty(JSON_PROPERTY_COMMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommission(Double commission) {
    this.commission = commission;
  }


  public ExecutionParameters clearingCommission(Double clearingCommission) {
    this.clearingCommission = clearingCommission;
    return this;
  }

   /**
   * Execution clearing commission value.
   * @return clearingCommission
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Execution clearing commission value.")
  @JsonProperty(JSON_PROPERTY_CLEARING_COMMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getClearingCommission() {
    return clearingCommission;
  }


  @JsonProperty(JSON_PROPERTY_CLEARING_COMMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClearingCommission(Double clearingCommission) {
    this.clearingCommission = clearingCommission;
  }


  public ExecutionParameters localTax(Double localTax) {
    this.localTax = localTax;
    return this;
  }

   /**
   * Execution local tax value.
   * @return localTax
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Execution local tax value.")
  @JsonProperty(JSON_PROPERTY_LOCAL_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getLocalTax() {
    return localTax;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalTax(Double localTax) {
    this.localTax = localTax;
  }


  public ExecutionParameters localFee(Double localFee) {
    this.localFee = localFee;
    return this;
  }

   /**
   * Execution local fee value.
   * @return localFee
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Execution local fee value.")
  @JsonProperty(JSON_PROPERTY_LOCAL_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getLocalFee() {
    return localFee;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalFee(Double localFee) {
    this.localFee = localFee;
  }


  public ExecutionParameters brokerFee(Double brokerFee) {
    this.brokerFee = brokerFee;
    return this;
  }

   /**
   * Execution broker fee value.
   * @return brokerFee
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Execution broker fee value.")
  @JsonProperty(JSON_PROPERTY_BROKER_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getBrokerFee() {
    return brokerFee;
  }


  @JsonProperty(JSON_PROPERTY_BROKER_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBrokerFee(Double brokerFee) {
    this.brokerFee = brokerFee;
  }


  public ExecutionParameters exchangeFee(Double exchangeFee) {
    this.exchangeFee = exchangeFee;
    return this;
  }

   /**
   * Execution exchange fee value.
   * @return exchangeFee
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Execution exchange fee value.")
  @JsonProperty(JSON_PROPERTY_EXCHANGE_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getExchangeFee() {
    return exchangeFee;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExchangeFee(Double exchangeFee) {
    this.exchangeFee = exchangeFee;
  }


  public ExecutionParameters miscellaneousFee(Double miscellaneousFee) {
    this.miscellaneousFee = miscellaneousFee;
    return this;
  }

   /**
   * Execution miscellaneous fee value.
   * @return miscellaneousFee
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Execution miscellaneous fee value.")
  @JsonProperty(JSON_PROPERTY_MISCELLANEOUS_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMiscellaneousFee() {
    return miscellaneousFee;
  }


  @JsonProperty(JSON_PROPERTY_MISCELLANEOUS_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMiscellaneousFee(Double miscellaneousFee) {
    this.miscellaneousFee = miscellaneousFee;
  }


  public ExecutionParameters transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Unique Id for the transaction
   * @return transactionId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique Id for the transaction")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransactionId() {
    return transactionId;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public ExecutionParameters orderId(String orderId) {
    this.orderId = JsonNullable.<String>of(orderId);
    return this;
  }

   /**
   * Unique Id of the order which originated the record
   * @return orderId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique Id of the order which originated the record")
  @JsonIgnore

  public String getOrderId() {
        return orderId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getOrderId_JsonNullable() {
    return orderId;
  }
  
  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  public void setOrderId_JsonNullable(JsonNullable<String> orderId) {
    this.orderId = orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = JsonNullable.<String>of(orderId);
  }


  public ExecutionParameters portfolio(String portfolio) {
    this.portfolio = portfolio;
    return this;
  }

   /**
   * Path of the portfolio (Ex: Client:/folder1/testing.ofdb)
   * @return portfolio
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Path of the portfolio (Ex: Client:/folder1/testing.ofdb)")
  @JsonProperty(JSON_PROPERTY_PORTFOLIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPortfolio() {
    return portfolio;
  }


  @JsonProperty(JSON_PROPERTY_PORTFOLIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPortfolio(String portfolio) {
    this.portfolio = portfolio;
  }


  public ExecutionParameters symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Symbol corresponding to the traded instrument.
   * @return symbol
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Symbol corresponding to the traded instrument.")
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public ExecutionParameters description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Description")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public ExecutionParameters tradeType(String tradeType) {
    this.tradeType = tradeType;
    return this;
  }

   /**
   * Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.
   * @return tradeType
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.")
  @JsonProperty(JSON_PROPERTY_TRADE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTradeType() {
    return tradeType;
  }


  @JsonProperty(JSON_PROPERTY_TRADE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTradeType(String tradeType) {
    this.tradeType = tradeType;
  }


  public ExecutionParameters unitType(String unitType) {
    this.unitType = unitType;
    return this;
  }

   /**
   * Unit type could be one of Quantity or Value.
   * @return unitType
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unit type could be one of Quantity or Value.")
  @JsonProperty(JSON_PROPERTY_UNIT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUnitType() {
    return unitType;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitType(String unitType) {
    this.unitType = unitType;
  }


  public ExecutionParameters transactionLeaves(Double transactionLeaves) {
    this.transactionLeaves = transactionLeaves;
    return this;
  }

   /**
   * Shares that have been ordered and not executed
   * @return transactionLeaves
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Shares that have been ordered and not executed")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_LEAVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getTransactionLeaves() {
    return transactionLeaves;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_LEAVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionLeaves(Double transactionLeaves) {
    this.transactionLeaves = transactionLeaves;
  }


  public ExecutionParameters quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity of the instrument traded.
   * @return quantity
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Quantity of the instrument traded.")
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public ExecutionParameters gross(Double gross) {
    this.gross = gross;
    return this;
  }

   /**
   * Cash value of the transaction
   * @return gross
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Cash value of the transaction")
  @JsonProperty(JSON_PROPERTY_GROSS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getGross() {
    return gross;
  }


  @JsonProperty(JSON_PROPERTY_GROSS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGross(Double gross) {
    this.gross = gross;
  }


  public ExecutionParameters price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * The transaction price
   * @return price
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The transaction price")
  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getPrice() {
    return price;
  }


  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrice(Double price) {
    this.price = price;
  }


  public ExecutionParameters currencyISO(String currencyISO) {
    this.currencyISO = currencyISO;
    return this;
  }

   /**
   * The currency code of cash valued fields, Net Amount and Gross Amount.
   * @return currencyISO
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The currency code of cash valued fields, Net Amount and Gross Amount.")
  @JsonProperty(JSON_PROPERTY_CURRENCY_I_S_O)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrencyISO() {
    return currencyISO;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_I_S_O)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrencyISO(String currencyISO) {
    this.currencyISO = currencyISO;
  }


  public ExecutionParameters tradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

   /**
   * Trade date which is in the format YYYY-MM-DD
   * @return tradeDate
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Trade date which is in the format YYYY-MM-DD")
  @JsonProperty(JSON_PROPERTY_TRADE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTradeDate() {
    return tradeDate;
  }


  @JsonProperty(JSON_PROPERTY_TRADE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
  }


  public ExecutionParameters addedDateTime(String addedDateTime) {
    this.addedDateTime = addedDateTime;
    return this;
  }

   /**
   * Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF
   * @return addedDateTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF")
  @JsonProperty(JSON_PROPERTY_ADDED_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddedDateTime() {
    return addedDateTime;
  }


  @JsonProperty(JSON_PROPERTY_ADDED_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddedDateTime(String addedDateTime) {
    this.addedDateTime = addedDateTime;
  }


  public ExecutionParameters updatedDateTime(String updatedDateTime) {
    this.updatedDateTime = updatedDateTime;
    return this;
  }

   /**
   * Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF
   * @return updatedDateTime
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF")
  @JsonProperty(JSON_PROPERTY_UPDATED_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpdatedDateTime() {
    return updatedDateTime;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdatedDateTime(String updatedDateTime) {
    this.updatedDateTime = updatedDateTime;
  }


   /**
   * Get entity
   * @return entity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntity() {
    return entity;
  }




   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatus() {
    return status;
  }




  /**
   * Return true if this ExecutionParameters object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionParameters executionParameters = (ExecutionParameters) o;
    return Objects.equals(this.transactionStatus, executionParameters.transactionStatus) &&
        equalsNullable(this.parentId, executionParameters.parentId) &&
        Objects.equals(this.net, executionParameters.net) &&
        Objects.equals(this.settlementDate, executionParameters.settlementDate) &&
        Objects.equals(this.settlementCurrencyISO, executionParameters.settlementCurrencyISO) &&
        Objects.equals(this.settlementValue, executionParameters.settlementValue) &&
        Objects.equals(this.foreignExchangeRate, executionParameters.foreignExchangeRate) &&
        Objects.equals(this.broker, executionParameters.broker) &&
        Objects.equals(this.custodian, executionParameters.custodian) &&
        Objects.equals(this.accruedInterest, executionParameters.accruedInterest) &&
        Objects.equals(this.commission, executionParameters.commission) &&
        Objects.equals(this.clearingCommission, executionParameters.clearingCommission) &&
        Objects.equals(this.localTax, executionParameters.localTax) &&
        Objects.equals(this.localFee, executionParameters.localFee) &&
        Objects.equals(this.brokerFee, executionParameters.brokerFee) &&
        Objects.equals(this.exchangeFee, executionParameters.exchangeFee) &&
        Objects.equals(this.miscellaneousFee, executionParameters.miscellaneousFee) &&
        Objects.equals(this.transactionId, executionParameters.transactionId) &&
        equalsNullable(this.orderId, executionParameters.orderId) &&
        Objects.equals(this.portfolio, executionParameters.portfolio) &&
        Objects.equals(this.symbol, executionParameters.symbol) &&
        Objects.equals(this.description, executionParameters.description) &&
        Objects.equals(this.tradeType, executionParameters.tradeType) &&
        Objects.equals(this.unitType, executionParameters.unitType) &&
        Objects.equals(this.transactionLeaves, executionParameters.transactionLeaves) &&
        Objects.equals(this.quantity, executionParameters.quantity) &&
        Objects.equals(this.gross, executionParameters.gross) &&
        Objects.equals(this.price, executionParameters.price) &&
        Objects.equals(this.currencyISO, executionParameters.currencyISO) &&
        Objects.equals(this.tradeDate, executionParameters.tradeDate) &&
        Objects.equals(this.addedDateTime, executionParameters.addedDateTime) &&
        Objects.equals(this.updatedDateTime, executionParameters.updatedDateTime) &&
        Objects.equals(this.entity, executionParameters.entity) &&
        Objects.equals(this.status, executionParameters.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionStatus, hashCodeNullable(parentId), net, settlementDate, settlementCurrencyISO, settlementValue, foreignExchangeRate, broker, custodian, accruedInterest, commission, clearingCommission, localTax, localFee, brokerFee, exchangeFee, miscellaneousFee, transactionId, hashCodeNullable(orderId), portfolio, symbol, description, tradeType, unitType, transactionLeaves, quantity, gross, price, currencyISO, tradeDate, addedDateTime, updatedDateTime, entity, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionParameters {\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    net: ").append(toIndentedString(net)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    settlementCurrencyISO: ").append(toIndentedString(settlementCurrencyISO)).append("\n");
    sb.append("    settlementValue: ").append(toIndentedString(settlementValue)).append("\n");
    sb.append("    foreignExchangeRate: ").append(toIndentedString(foreignExchangeRate)).append("\n");
    sb.append("    broker: ").append(toIndentedString(broker)).append("\n");
    sb.append("    custodian: ").append(toIndentedString(custodian)).append("\n");
    sb.append("    accruedInterest: ").append(toIndentedString(accruedInterest)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    clearingCommission: ").append(toIndentedString(clearingCommission)).append("\n");
    sb.append("    localTax: ").append(toIndentedString(localTax)).append("\n");
    sb.append("    localFee: ").append(toIndentedString(localFee)).append("\n");
    sb.append("    brokerFee: ").append(toIndentedString(brokerFee)).append("\n");
    sb.append("    exchangeFee: ").append(toIndentedString(exchangeFee)).append("\n");
    sb.append("    miscellaneousFee: ").append(toIndentedString(miscellaneousFee)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    portfolio: ").append(toIndentedString(portfolio)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tradeType: ").append(toIndentedString(tradeType)).append("\n");
    sb.append("    unitType: ").append(toIndentedString(unitType)).append("\n");
    sb.append("    transactionLeaves: ").append(toIndentedString(transactionLeaves)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    gross: ").append(toIndentedString(gross)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    currencyISO: ").append(toIndentedString(currencyISO)).append("\n");
    sb.append("    tradeDate: ").append(toIndentedString(tradeDate)).append("\n");
    sb.append("    addedDateTime: ").append(toIndentedString(addedDateTime)).append("\n");
    sb.append("    updatedDateTime: ").append(toIndentedString(updatedDateTime)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

