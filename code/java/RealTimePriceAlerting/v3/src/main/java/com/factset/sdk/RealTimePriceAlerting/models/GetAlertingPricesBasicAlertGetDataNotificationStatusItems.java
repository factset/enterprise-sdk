/*
 * Real-Time Price Alerting API
 * The Price Alerting API is designed to inform the users of an application directly about important changes in the data on the platform. The endpoint group *basic price alerting* deals with generation of alerts based on current price data. For notations, users can define an upper or lower limit and choose on which price type those limit conditions apply.  Alerting uses the concepts of triggers and alerts.   * A trigger is an entity that is set up by an application to watch a certain condition in the market data around a financial instrument.   The standard conditions that can be applied are lower limit and upper limit for the value of the price for a given financial instrument. * When the condition of a trigger is met, an alert is created. Each alert thus represents one event where a trigger condition was met.  An application can learn about the creation of alerts in two ways: The application can actively request the list of alerts (pull approach) or it can subscribe to the list of existing alerts. If a new alert is created, that list changes and the application is notified about the new alert with an update that contains the details on the new alert (push approach).  The API supports both approaches. The push approach is realized most easily by using the subscription support that the client libraries provide.  See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price information.  Note: As part of the general trial access, endpoints to write data are excluded. For a description of the full alerting API, please work with a FactSet consultant and see https://endpointreference.factset.com. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimePriceAlerting.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.RealTimePriceAlerting.models.GetAlertingPricesBasicAlertGetDataNotificationStatusItemsChannel;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimePriceAlerting.JSON;


/**
 * A list of objects. For semantical context see the description of the parent array.
 */
@ApiModel(description = "A list of objects. For semantical context see the description of the parent array.")
@JsonPropertyOrder({
  GetAlertingPricesBasicAlertGetDataNotificationStatusItems.JSON_PROPERTY_CHANNEL,
  GetAlertingPricesBasicAlertGetDataNotificationStatusItems.JSON_PROPERTY_TIME,
  GetAlertingPricesBasicAlertGetDataNotificationStatusItems.JSON_PROPERTY_CODE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class GetAlertingPricesBasicAlertGetDataNotificationStatusItems implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CHANNEL = "channel";
  private GetAlertingPricesBasicAlertGetDataNotificationStatusItemsChannel channel;

  public static final String JSON_PROPERTY_TIME = "time";
  private JsonNullable<OffsetDateTime> time = JsonNullable.<OffsetDateTime>undefined();

  /**
   * Code of the status. | Value | Description | | --- | --- | | pending | Notification has not been processed. | | sent | Notification has been sent but delivery status is unknown. | | delivered | Notification has been delivered. | | error | Notification has not been delivered due to an error. | | rejected | Notification delivery has been rejected (possibly due to return mails being received for delivery address). |  
   */
  public enum CodeEnum {
    PENDING("pending"),
    
    SENT("sent"),
    
    DELIVERED("delivered"),
    
    ERROR("error"),
    
    REJECTED("rejected");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_CODE = "code";
  private JsonNullable<CodeEnum> code = JsonNullable.<CodeEnum>undefined();

  public GetAlertingPricesBasicAlertGetDataNotificationStatusItems() { 
  }

  public GetAlertingPricesBasicAlertGetDataNotificationStatusItems channel(GetAlertingPricesBasicAlertGetDataNotificationStatusItemsChannel channel) {
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GetAlertingPricesBasicAlertGetDataNotificationStatusItemsChannel getChannel() {
    return channel;
  }


  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannel(GetAlertingPricesBasicAlertGetDataNotificationStatusItemsChannel channel) {
    this.channel = channel;
  }


  public GetAlertingPricesBasicAlertGetDataNotificationStatusItems time(OffsetDateTime time) {
    this.time = JsonNullable.<OffsetDateTime>of(time);
    return this;
  }

   /**
   * Date and time of the most recent change.
   * @return time
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "2024-12-24T18:00Z", value = "Date and time of the most recent change.")
  @JsonIgnore

  public OffsetDateTime getTime() {
        return time.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getTime_JsonNullable() {
    return time;
  }
  
  @JsonProperty(JSON_PROPERTY_TIME)
  public void setTime_JsonNullable(JsonNullable<OffsetDateTime> time) {
    this.time = time;
  }

  public void setTime(OffsetDateTime time) {
    this.time = JsonNullable.<OffsetDateTime>of(time);
  }


  public GetAlertingPricesBasicAlertGetDataNotificationStatusItems code(CodeEnum code) {
    this.code = JsonNullable.<CodeEnum>of(code);
    return this;
  }

   /**
   * Code of the status. | Value | Description | | --- | --- | | pending | Notification has not been processed. | | sent | Notification has been sent but delivery status is unknown. | | delivered | Notification has been delivered. | | error | Notification has not been delivered due to an error. | | rejected | Notification delivery has been rejected (possibly due to return mails being received for delivery address). |  
   * @return code
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "sent", value = "Code of the status. | Value | Description | | --- | --- | | pending | Notification has not been processed. | | sent | Notification has been sent but delivery status is unknown. | | delivered | Notification has been delivered. | | error | Notification has not been delivered due to an error. | | rejected | Notification delivery has been rejected (possibly due to return mails being received for delivery address). |  ")
  @JsonIgnore

  public CodeEnum getCode() {
        return code.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CodeEnum> getCode_JsonNullable() {
    return code;
  }
  
  @JsonProperty(JSON_PROPERTY_CODE)
  public void setCode_JsonNullable(JsonNullable<CodeEnum> code) {
    this.code = code;
  }

  public void setCode(CodeEnum code) {
    this.code = JsonNullable.<CodeEnum>of(code);
  }


  /**
   * Return true if this GetAlertingPricesBasicAlertGetDataNotificationStatusItems object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAlertingPricesBasicAlertGetDataNotificationStatusItems getAlertingPricesBasicAlertGetDataNotificationStatusItems = (GetAlertingPricesBasicAlertGetDataNotificationStatusItems) o;
    return Objects.equals(this.channel, getAlertingPricesBasicAlertGetDataNotificationStatusItems.channel) &&
        equalsNullable(this.time, getAlertingPricesBasicAlertGetDataNotificationStatusItems.time) &&
        equalsNullable(this.code, getAlertingPricesBasicAlertGetDataNotificationStatusItems.code);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, hashCodeNullable(time), hashCodeNullable(code));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAlertingPricesBasicAlertGetDataNotificationStatusItems {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

