/*
 * Open:Risk API
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.OpenRisk.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.OpenRisk.models.Holding;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.OpenRisk.JSON;


/**
 * All security holdings which can include a &#39;portfolio&#39;, a &#39;benchmark&#39;, and a total &#39;market&#39; portfolio.
 */
@ApiModel(description = "All security holdings which can include a 'portfolio', a 'benchmark', and a total 'market' portfolio.")
@JsonPropertyOrder({
  Holdings.JSON_PROPERTY_PORTFOLIO,
  Holdings.JSON_PROPERTY_BENCHMARK,
  Holdings.JSON_PROPERTY_MARKET
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Holdings implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PORTFOLIO = "portfolio";
  private Holding portfolio;

  public static final String JSON_PROPERTY_BENCHMARK = "benchmark";
  private Holding benchmark;

  public static final String JSON_PROPERTY_MARKET = "market";
  private Holding market;

  public Holdings() { 
  }

  @JsonCreator
  public Holdings(
    @JsonProperty(value=JSON_PROPERTY_PORTFOLIO, required=true) Holding portfolio
  ) {
    this();
    this.portfolio = portfolio;
  }

  public Holdings portfolio(Holding portfolio) {
    this.portfolio = portfolio;
    return this;
  }

   /**
   * Get portfolio
   * @return portfolio
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PORTFOLIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Holding getPortfolio() {
    return portfolio;
  }


  @JsonProperty(JSON_PROPERTY_PORTFOLIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPortfolio(Holding portfolio) {
    this.portfolio = portfolio;
  }


  public Holdings benchmark(Holding benchmark) {
    this.benchmark = benchmark;
    return this;
  }

   /**
   * Get benchmark
   * @return benchmark
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BENCHMARK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Holding getBenchmark() {
    return benchmark;
  }


  @JsonProperty(JSON_PROPERTY_BENCHMARK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBenchmark(Holding benchmark) {
    this.benchmark = benchmark;
  }


  public Holdings market(Holding market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Holding getMarket() {
    return market;
  }


  @JsonProperty(JSON_PROPERTY_MARKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarket(Holding market) {
    this.market = market;
  }


  /**
   * Return true if this Holdings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Holdings holdings = (Holdings) o;
    return Objects.equals(this.portfolio, holdings.portfolio) &&
        Objects.equals(this.benchmark, holdings.benchmark) &&
        Objects.equals(this.market, holdings.market);
  }

  @Override
  public int hashCode() {
    return Objects.hash(portfolio, benchmark, market);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Holdings {\n");
    sb.append("    portfolio: ").append(toIndentedString(portfolio)).append("\n");
    sb.append("    benchmark: ").append(toIndentedString(benchmark)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

