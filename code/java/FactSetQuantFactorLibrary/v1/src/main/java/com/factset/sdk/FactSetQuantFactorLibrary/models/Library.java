/*
 * FactSet Quant Factor Library API
 * The FactSet FactSet Quant Factor Library (QFL) API helps to detect investment themes across global equity markets, incorporate ideas into your portfolio construction process, and transform raw data into actionable intelligence. Over 2000+ items spanning Factor Groups in-   * Classification and Reference Data - Asset Data, Country, Industry, and Size   * Market - Liquidity, Market Sensitivity, Momentum, Technical, Volatility   * Core Fundamentals - Efficiency, Growth, Management, Profitability, Quality, Solvency, Value   * Macro and Cross Asset - Commodity, FX Sensitivity, Debt, Economic   * Alternative - Analyst Sentiment, Corporate Governance, Crowding, Insider Activity. 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetQuantFactorLibrary.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetQuantFactorLibrary.JSON;


/**
 * Library
 */
@JsonPropertyOrder({
  Library.JSON_PROPERTY_FACTOR,
  Library.JSON_PROPERTY_NAME,
  Library.JSON_PROPERTY_FACTOR_GROUP,
  Library.JSON_PROPERTY_SDF_NAME,
  Library.JSON_PROPERTY_FORMULA,
  Library.JSON_PROPERTY_TAGS,
  Library.JSON_PROPERTY_FORMAT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Library implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FACTOR = "factor";
  private String factor;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_FACTOR_GROUP = "factorGroup";
  private String factorGroup;

  public static final String JSON_PROPERTY_SDF_NAME = "sdfName";
  private String sdfName;

  public static final String JSON_PROPERTY_FORMULA = "formula";
  private String formula;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private String tags;

  public static final String JSON_PROPERTY_FORMAT = "format";
  private String format;

  public Library() { 
  }

  public Library factor(String factor) {
    this.factor = factor;
    return this;
  }

   /**
   * The Factor field that can be requested in the factors endpoint.
   * @return factor
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "rsi21D", value = "The Factor field that can be requested in the factors endpoint.")
  @JsonProperty(JSON_PROPERTY_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFactor() {
    return factor;
  }


  @JsonProperty(JSON_PROPERTY_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFactor(String factor) {
    this.factor = factor;
  }


  public Library name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The Name or Description of the Factor
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "21D Relative Strength Index", value = "The Name or Description of the Factor")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Library factorGroup(String factorGroup) {
    this.factorGroup = factorGroup;
    return this;
  }

   /**
   * The Factor Group associated to the Factor.
   * @return factorGroup
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Momentum", value = "The Factor Group associated to the Factor.")
  @JsonProperty(JSON_PROPERTY_FACTOR_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFactorGroup() {
    return factorGroup;
  }


  @JsonProperty(JSON_PROPERTY_FACTOR_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFactorGroup(String factorGroup) {
    this.factorGroup = factorGroup;
  }


  public Library sdfName(String sdfName) {
    this.sdfName = sdfName;
    return this;
  }

   /**
   * The Standard DataFeed name of the factor for use of mapping.
   * @return sdfName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "RSI_21D", value = "The Standard DataFeed name of the factor for use of mapping.")
  @JsonProperty(JSON_PROPERTY_SDF_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSdfName() {
    return sdfName;
  }


  @JsonProperty(JSON_PROPERTY_SDF_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSdfName(String sdfName) {
    this.sdfName = sdfName;
  }


  public Library formula(String formula) {
    this.formula = formula;
    return this;
  }

   /**
   * The FactSet formula associated to the factor
   * @return formula
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "QFL_RSI(0,21D)", value = "The FactSet formula associated to the factor")
  @JsonProperty(JSON_PROPERTY_FORMULA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFormula() {
    return formula;
  }


  @JsonProperty(JSON_PROPERTY_FORMULA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormula(String formula) {
    this.formula = formula;
  }


  public Library tags(String tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Associated Tags regarding the factor for enhanced searching.
   * @return tags
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "momentum,prices", value = "Associated Tags regarding the factor for enhanced searching.")
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(String tags) {
    this.tags = tags;
  }


  public Library format(String format) {
    this.format = format;
    return this;
  }

   /**
   * The data type of the factor, including integer, double, or string.
   * @return format
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "double", value = "The data type of the factor, including integer, double, or string.")
  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFormat() {
    return format;
  }


  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormat(String format) {
    this.format = format;
  }


  /**
   * Return true if this library object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Library library = (Library) o;
    return Objects.equals(this.factor, library.factor) &&
        Objects.equals(this.name, library.name) &&
        Objects.equals(this.factorGroup, library.factorGroup) &&
        Objects.equals(this.sdfName, library.sdfName) &&
        Objects.equals(this.formula, library.formula) &&
        Objects.equals(this.tags, library.tags) &&
        Objects.equals(this.format, library.format);
  }

  @Override
  public int hashCode() {
    return Objects.hash(factor, name, factorGroup, sdfName, formula, tags, format);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Library {\n");
    sb.append("    factor: ").append(toIndentedString(factor)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    factorGroup: ").append(toIndentedString(factorGroup)).append("\n");
    sb.append("    sdfName: ").append(toIndentedString(sdfName)).append("\n");
    sb.append("    formula: ").append(toIndentedString(formula)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

