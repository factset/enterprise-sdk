/*
 * Issue Tracker API
 * This API is used to file issues
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IssueTracker.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IssueTracker.JSON;


/**
 * update request infomration for issue
 */
@ApiModel(description = "update request infomration for issue")
@JsonPropertyOrder({
  UpdateIssueRequestData.JSON_PROPERTY_SUBJECT,
  UpdateIssueRequestData.JSON_PROPERTY_SEVERITY,
  UpdateIssueRequestData.JSON_PROPERTY_PRODUCT_ID,
  UpdateIssueRequestData.JSON_PROPERTY_CATEGORY_ID,
  UpdateIssueRequestData.JSON_PROPERTY_STATUS,
  UpdateIssueRequestData.JSON_PROPERTY_CLOSE_CONTENT,
  UpdateIssueRequestData.JSON_PROPERTY_READ_ONLY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class UpdateIssueRequestData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private String subject;

  public static final String JSON_PROPERTY_SEVERITY = "severity";
  private String severity;

  public static final String JSON_PROPERTY_PRODUCT_ID = "productId";
  private String productId;

  public static final String JSON_PROPERTY_CATEGORY_ID = "categoryId";
  private String categoryId;

  /**
   * Status that need to be updated
   */
  public enum StatusEnum {
    IN_PROGRESS("In Progress"),
    
    CLOSED("Closed"),
    
    RECEIVED("Received");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_CLOSE_CONTENT = "closeContent";
  private String closeContent;

  public static final String JSON_PROPERTY_READ_ONLY = "readOnly";
  private Boolean readOnly;

  public UpdateIssueRequestData() { 
  }

  public UpdateIssueRequestData subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * subject of ticket
   * @return subject
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "subject of ticket")
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(String subject) {
    this.subject = subject;
  }


  public UpdateIssueRequestData severity(String severity) {
    this.severity = severity;
    return this;
  }

   /**
   * severity of issue. Accepts Critical, High and Medium for severity.
   * @return severity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "severity of issue. Accepts Critical, High and Medium for severity.")
  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSeverity() {
    return severity;
  }


  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public UpdateIssueRequestData productId(String productId) {
    this.productId = productId;
    return this;
  }

   /**
   * ProductId that needs to be replaced
   * @return productId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "ProductId that needs to be replaced")
  @JsonProperty(JSON_PROPERTY_PRODUCT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductId() {
    return productId;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductId(String productId) {
    this.productId = productId;
  }


  public UpdateIssueRequestData categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Category that needs to be replaced
   * @return categoryId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Category that needs to be replaced")
  @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCategoryId() {
    return categoryId;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public UpdateIssueRequestData status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status that need to be updated
   * @return status
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Status that need to be updated")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public UpdateIssueRequestData closeContent(String closeContent) {
    this.closeContent = closeContent;
    return this;
  }

   /**
   * Comment for resolving the issue
   * @return closeContent
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Comment for resolving the issue")
  @JsonProperty(JSON_PROPERTY_CLOSE_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCloseContent() {
    return closeContent;
  }


  @JsonProperty(JSON_PROPERTY_CLOSE_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCloseContent(String closeContent) {
    this.closeContent = closeContent;
  }


  public UpdateIssueRequestData readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Mark the issue read-only to stop further modifications.can be set only on closed cards and it value should be only true
   * @return readOnly
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Mark the issue read-only to stop further modifications.can be set only on closed cards and it value should be only true")
  @JsonProperty(JSON_PROPERTY_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getReadOnly() {
    return readOnly;
  }


  @JsonProperty(JSON_PROPERTY_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  /**
   * Return true if this UpdateIssueRequest_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateIssueRequestData updateIssueRequestData = (UpdateIssueRequestData) o;
    return Objects.equals(this.subject, updateIssueRequestData.subject) &&
        Objects.equals(this.severity, updateIssueRequestData.severity) &&
        Objects.equals(this.productId, updateIssueRequestData.productId) &&
        Objects.equals(this.categoryId, updateIssueRequestData.categoryId) &&
        Objects.equals(this.status, updateIssueRequestData.status) &&
        Objects.equals(this.closeContent, updateIssueRequestData.closeContent) &&
        Objects.equals(this.readOnly, updateIssueRequestData.readOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, severity, productId, categoryId, status, closeContent, readOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateIssueRequestData {\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    closeContent: ").append(toIndentedString(closeContent)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

