/*
 * Issue Tracker API
 * This API is used to file issues
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IssueTracker.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.IssueTracker.models.Comment;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IssueTracker.JSON;


/**
 * issue response
 */
@ApiModel(description = "issue response")
@JsonPropertyOrder({
  IssueData.JSON_PROPERTY_ID,
  IssueData.JSON_PROPERTY_SUBJECT,
  IssueData.JSON_PROPERTY_COMMENTS,
  IssueData.JSON_PROPERTY_SEVERITY,
  IssueData.JSON_PROPERTY_INTERNAL_ID,
  IssueData.JSON_PROPERTY_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class IssueData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private String subject;

  public static final String JSON_PROPERTY_COMMENTS = "comments";
  private java.util.List<Comment> comments = null;

  public static final String JSON_PROPERTY_SEVERITY = "severity";
  private String severity;

  public static final String JSON_PROPERTY_INTERNAL_ID = "internalId";
  private Integer internalId;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    CLOSED("Closed"),
    
    RECEIVED("Received"),
    
    IN_PROGRESS("In Progress");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public IssueData() { 
  }

  public IssueData id(String id) {
    this.id = id;
    return this;
  }

   /**
   * generated issue id for Issue Tracker
   * @return id
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "generated issue id for Issue Tracker")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public IssueData subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * subject of Issue Tracker issue
   * @return subject
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "subject of Issue Tracker issue")
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(String subject) {
    this.subject = subject;
  }


  public IssueData comments(java.util.List<Comment> comments) {
    this.comments = comments;
    return this;
  }

  public IssueData addCommentsItem(Comment commentsItem) {
    if (this.comments == null) {
      this.comments = new java.util.ArrayList<>();
    }
    this.comments.add(commentsItem);
    return this;
  }

   /**
   * array of comments added to issue
   * @return comments
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "array of comments added to issue")
  @JsonProperty(JSON_PROPERTY_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<Comment> getComments() {
    return comments;
  }


  @JsonProperty(JSON_PROPERTY_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComments(java.util.List<Comment> comments) {
    this.comments = comments;
  }


  public IssueData severity(String severity) {
    this.severity = severity;
    return this;
  }

   /**
   * severity of issue tracker ticket
   * @return severity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "severity of issue tracker ticket")
  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSeverity() {
    return severity;
  }


  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public IssueData internalId(Integer internalId) {
    this.internalId = internalId;
    return this;
  }

   /**
   * Get internalId
   * @return internalId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInternalId() {
    return internalId;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalId(Integer internalId) {
    this.internalId = internalId;
  }


  public IssueData status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * Return true if this Issue_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueData issueData = (IssueData) o;
    return Objects.equals(this.id, issueData.id) &&
        Objects.equals(this.subject, issueData.subject) &&
        Objects.equals(this.comments, issueData.comments) &&
        Objects.equals(this.severity, issueData.severity) &&
        Objects.equals(this.internalId, issueData.internalId) &&
        Objects.equals(this.status, issueData.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, subject, comments, severity, internalId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    internalId: ").append(toIndentedString(internalId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

