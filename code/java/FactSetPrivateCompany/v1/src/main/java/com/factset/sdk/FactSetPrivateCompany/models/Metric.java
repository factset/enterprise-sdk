/*
 * FactSet Private Company API
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetPrivateCompany.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetPrivateCompany.JSON;


/**
 * Metric Object
 */
@ApiModel(description = "Metric Object")
@JsonPropertyOrder({
  Metric.JSON_PROPERTY_METRIC,
  Metric.JSON_PROPERTY_DESCRIPTION,
  Metric.JSON_PROPERTY_CATEGORY,
  Metric.JSON_PROPERTY_FACTOR,
  Metric.JSON_PROPERTY_SDF_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Metric implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_METRIC = "metric";
  private JsonNullable<String> metric = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private JsonNullable<String> category = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FACTOR = "factor";
  private JsonNullable<Integer> factor = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_SDF_NAME = "sdfName";
  private JsonNullable<String> sdfName = JsonNullable.<String>undefined();

  public Metric() { 
  }

  public Metric metric(String metric) {
    this.metric = JsonNullable.<String>of(metric);
    return this;
  }

   /**
   * Data item to be used as &#x60;metrics&#x60; input in &#x60;/factset-private-company/v#/&#x60; endpoint.
   * @return metric
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FPC_ASSETS", value = "Data item to be used as `metrics` input in `/factset-private-company/v#/` endpoint.")
  @JsonIgnore

  public String getMetric() {
        return metric.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_METRIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMetric_JsonNullable() {
    return metric;
  }
  
  @JsonProperty(JSON_PROPERTY_METRIC)
  public void setMetric_JsonNullable(JsonNullable<String> metric) {
    this.metric = metric;
  }

  public void setMetric(String metric) {
    this.metric = JsonNullable.<String>of(metric);
  }


  public Metric description(String description) {
    this.description = JsonNullable.<String>of(description);
    return this;
  }

   /**
   * Description of the metric.
   * @return description
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "\"Represents the sum of total current assets, long-term receivables,  investment in unconsolidated subsidiaries, other investments, net property plant  and equipment and other assets.\"", value = "Description of the metric.")
  @JsonIgnore

  public String getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }

  public void setDescription(String description) {
    this.description = JsonNullable.<String>of(description);
  }


  public Metric category(String category) {
    this.category = JsonNullable.<String>of(category);
    return this;
  }

   /**
   * Corresponding endpoint to input metric item. For example, metrics returning the category &#39;FINANCIALS&#39; should be used in the &#x60;/financials&#x60; endpoint. The same follows data items falling in the category for NON_PERIODIC, which would be used in the &#x60;/non-periodic&#x60; endpoint.
   * @return category
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FINANCIALS", value = "Corresponding endpoint to input metric item. For example, metrics returning the category 'FINANCIALS' should be used in the `/financials` endpoint. The same follows data items falling in the category for NON_PERIODIC, which would be used in the `/non-periodic` endpoint.")
  @JsonIgnore

  public String getCategory() {
        return category.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCategory_JsonNullable() {
    return category;
  }
  
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  public void setCategory_JsonNullable(JsonNullable<String> category) {
    this.category = category;
  }

  public void setCategory(String category) {
    this.category = JsonNullable.<String>of(category);
  }


  public Metric factor(Integer factor) {
    this.factor = JsonNullable.<Integer>of(factor);
    return this;
  }

   /**
   * The factor for the metric (e.g. 1000 &#x3D; thousands).
   * @return factor
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "1000000", value = "The factor for the metric (e.g. 1000 = thousands).")
  @JsonIgnore

  public Integer getFactor() {
        return factor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getFactor_JsonNullable() {
    return factor;
  }
  
  @JsonProperty(JSON_PROPERTY_FACTOR)
  public void setFactor_JsonNullable(JsonNullable<Integer> factor) {
    this.factor = factor;
  }

  public void setFactor(Integer factor) {
    this.factor = JsonNullable.<Integer>of(factor);
  }


  public Metric sdfName(String sdfName) {
    this.sdfName = JsonNullable.<String>of(sdfName);
    return this;
  }

   /**
   * The name of the data item as it appears in the Standard Data Feed (SDF). A null value represents items available only in API.
   * @return sdfName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FPC_ASSETS", value = "The name of the data item as it appears in the Standard Data Feed (SDF). A null value represents items available only in API.")
  @JsonIgnore

  public String getSdfName() {
        return sdfName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SDF_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSdfName_JsonNullable() {
    return sdfName;
  }
  
  @JsonProperty(JSON_PROPERTY_SDF_NAME)
  public void setSdfName_JsonNullable(JsonNullable<String> sdfName) {
    this.sdfName = sdfName;
  }

  public void setSdfName(String sdfName) {
    this.sdfName = JsonNullable.<String>of(sdfName);
  }


  /**
   * Return true if this Metric object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metric metric = (Metric) o;
    return equalsNullable(this.metric, metric.metric) &&
        equalsNullable(this.description, metric.description) &&
        equalsNullable(this.category, metric.category) &&
        equalsNullable(this.factor, metric.factor) &&
        equalsNullable(this.sdfName, metric.sdfName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(metric), hashCodeNullable(description), hashCodeNullable(category), hashCodeNullable(factor), hashCodeNullable(sdfName));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metric {\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    factor: ").append(toIndentedString(factor)).append("\n");
    sb.append("    sdfName: ").append(toIndentedString(sdfName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

