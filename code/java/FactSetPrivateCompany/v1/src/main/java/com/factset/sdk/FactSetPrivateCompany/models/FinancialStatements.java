/*
 * FactSet Private Company API
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetPrivateCompany.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetPrivateCompany.models.StatementItem;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetPrivateCompany.JSON;


/**
 * Financial statement object
 */
@ApiModel(description = "Financial statement object")
@JsonPropertyOrder({
  FinancialStatements.JSON_PROPERTY_REQUEST_ID,
  FinancialStatements.JSON_PROPERTY_FSYM_ID,
  FinancialStatements.JSON_PROPERTY_REPORT_DATE,
  FinancialStatements.JSON_PROPERTY_FISCAL_YEAR,
  FinancialStatements.JSON_PROPERTY_ITEMS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FinancialStatements implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public static final String JSON_PROPERTY_FSYM_ID = "fsymId";
  private JsonNullable<String> fsymId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_REPORT_DATE = "reportDate";
  private java.util.List<LocalDate> reportDate = null;

  public static final String JSON_PROPERTY_FISCAL_YEAR = "fiscalYear";
  private java.util.List<String> fiscalYear = null;

  public static final String JSON_PROPERTY_ITEMS = "items";
  private java.util.List<StatementItem> items = null;

  public FinancialStatements() { 
  }

  public FinancialStatements requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier that was used for the request.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0H3R4Y-E", value = "Identifier that was used for the request.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public FinancialStatements fsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
    return this;
  }

   /**
   * Unique FactSet-generated identifier representing an entity for the current entity identifier (-E)
   * @return fsymId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0H3R4Y-E", value = "Unique FactSet-generated identifier representing an entity for the current entity identifier (-E)")
  @JsonIgnore

  public String getFsymId() {
        return fsymId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFsymId_JsonNullable() {
    return fsymId;
  }
  
  @JsonProperty(JSON_PROPERTY_FSYM_ID)
  public void setFsymId_JsonNullable(JsonNullable<String> fsymId) {
    this.fsymId = fsymId;
  }

  public void setFsymId(String fsymId) {
    this.fsymId = JsonNullable.<String>of(fsymId);
  }


  public FinancialStatements reportDate(java.util.List<LocalDate> reportDate) {
    this.reportDate = reportDate;
    return this;
  }

  public FinancialStatements addReportDateItem(LocalDate reportDateItem) {
    if (this.reportDate == null) {
      this.reportDate = new java.util.ArrayList<>();
    }
    this.reportDate.add(reportDateItem);
    return this;
  }

   /**
   * The date the reported fiscal period ended
   * @return reportDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The date the reported fiscal period ended")
  @JsonProperty(JSON_PROPERTY_REPORT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<LocalDate> getReportDate() {
    return reportDate;
  }


  @JsonProperty(JSON_PROPERTY_REPORT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportDate(java.util.List<LocalDate> reportDate) {
    this.reportDate = reportDate;
  }


  public FinancialStatements fiscalYear(java.util.List<String> fiscalYear) {
    this.fiscalYear = fiscalYear;
    return this;
  }

  public FinancialStatements addFiscalYearItem(String fiscalYearItem) {
    if (this.fiscalYear == null) {
      this.fiscalYear = new java.util.ArrayList<>();
    }
    this.fiscalYear.add(fiscalYearItem);
    return this;
  }

   /**
   * Fiscal year of the reported period in YYYY format
   * @return fiscalYear
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Fiscal year of the reported period in YYYY format")
  @JsonProperty(JSON_PROPERTY_FISCAL_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getFiscalYear() {
    return fiscalYear;
  }


  @JsonProperty(JSON_PROPERTY_FISCAL_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiscalYear(java.util.List<String> fiscalYear) {
    this.fiscalYear = fiscalYear;
  }


  public FinancialStatements items(java.util.List<StatementItem> items) {
    this.items = items;
    return this;
  }

  public FinancialStatements addItemsItem(StatementItem itemsItem) {
    if (this.items == null) {
      this.items = new java.util.ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Array of financial statement items
   * @return items
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Array of financial statement items")
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<StatementItem> getItems() {
    return items;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItems(java.util.List<StatementItem> items) {
    this.items = items;
  }


  /**
   * Return true if this FinancialStatements object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinancialStatements financialStatements = (FinancialStatements) o;
    return Objects.equals(this.requestId, financialStatements.requestId) &&
        equalsNullable(this.fsymId, financialStatements.fsymId) &&
        Objects.equals(this.reportDate, financialStatements.reportDate) &&
        Objects.equals(this.fiscalYear, financialStatements.fiscalYear) &&
        Objects.equals(this.items, financialStatements.items);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, hashCodeNullable(fsymId), reportDate, fiscalYear, items);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinancialStatements {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    fsymId: ").append(toIndentedString(fsymId)).append("\n");
    sb.append("    reportDate: ").append(toIndentedString(reportDate)).append("\n");
    sb.append("    fiscalYear: ").append(toIndentedString(fiscalYear)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

