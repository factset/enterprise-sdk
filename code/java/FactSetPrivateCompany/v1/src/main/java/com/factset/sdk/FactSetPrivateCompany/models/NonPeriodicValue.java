/*
 * FactSet Private Company API
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetPrivateCompany.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetPrivateCompany.JSON;


/**
 * Value of the data item requested. Note that the type of value is &#39;object&#39;, and depending on the item requested, the value could be an object representation of a string or double. 
 */
@ApiModel(description = "Value of the data item requested. Note that the type of value is 'object', and depending on the item requested, the value could be an object representation of a string or double. ")
@JsonPropertyOrder({
  NonPeriodicValue.JSON_PROPERTY_STRING_VALUE,
  NonPeriodicValue.JSON_PROPERTY_NUMBER_VALUE,
  NonPeriodicValue.JSON_PROPERTY_VALUE_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class NonPeriodicValue implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_STRING_VALUE = "stringValue";
  private JsonNullable<String> stringValue = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_NUMBER_VALUE = "numberValue";
  private JsonNullable<Double> numberValue = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_VALUE_TYPE = "valueType";
  private JsonNullable<String> valueType = JsonNullable.<String>undefined();

  public NonPeriodicValue() { 
  }

  public NonPeriodicValue stringValue(String stringValue) {
    this.stringValue = JsonNullable.<String>of(stringValue);
    return this;
  }

   /**
   * Value of the requested metric
   * @return stringValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Value of the requested metric")
  @JsonIgnore

  public String getStringValue() {
        return stringValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STRING_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getStringValue_JsonNullable() {
    return stringValue;
  }
  
  @JsonProperty(JSON_PROPERTY_STRING_VALUE)
  public void setStringValue_JsonNullable(JsonNullable<String> stringValue) {
    this.stringValue = stringValue;
  }

  public void setStringValue(String stringValue) {
    this.stringValue = JsonNullable.<String>of(stringValue);
  }


  public NonPeriodicValue numberValue(Double numberValue) {
    this.numberValue = JsonNullable.<Double>of(numberValue);
    return this;
  }

   /**
   * Value of the requested metric
   * @return numberValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "678.683", value = "Value of the requested metric")
  @JsonIgnore

  public Double getNumberValue() {
        return numberValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NUMBER_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getNumberValue_JsonNullable() {
    return numberValue;
  }
  
  @JsonProperty(JSON_PROPERTY_NUMBER_VALUE)
  public void setNumberValue_JsonNullable(JsonNullable<Double> numberValue) {
    this.numberValue = numberValue;
  }

  public void setNumberValue(Double numberValue) {
    this.numberValue = JsonNullable.<Double>of(numberValue);
  }


  public NonPeriodicValue valueType(String valueType) {
    this.valueType = JsonNullable.<String>of(valueType);
    return this;
  }

   /**
   * Indicated whether the value of the requested metric is a string or a number
   * @return valueType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Number", value = "Indicated whether the value of the requested metric is a string or a number")
  @JsonIgnore

  public String getValueType() {
        return valueType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getValueType_JsonNullable() {
    return valueType;
  }
  
  @JsonProperty(JSON_PROPERTY_VALUE_TYPE)
  public void setValueType_JsonNullable(JsonNullable<String> valueType) {
    this.valueType = valueType;
  }

  public void setValueType(String valueType) {
    this.valueType = JsonNullable.<String>of(valueType);
  }


  /**
   * Return true if this NonPeriodicValue object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NonPeriodicValue nonPeriodicValue = (NonPeriodicValue) o;
    return equalsNullable(this.stringValue, nonPeriodicValue.stringValue) &&
        equalsNullable(this.numberValue, nonPeriodicValue.numberValue) &&
        equalsNullable(this.valueType, nonPeriodicValue.valueType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(stringValue), hashCodeNullable(numberValue), hashCodeNullable(valueType));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NonPeriodicValue {\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("    numberValue: ").append(toIndentedString(numberValue)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

