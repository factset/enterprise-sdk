/*
 * GIPS API
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.GIPS.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.GIPS.models.FactSetProtobufStachV3TableViewTypesFormatTypesFormatStringTypeOneofCase;
import com.factset.sdk.GIPS.models.FactSetProtobufStachV3TableViewTypesFormatTypesSingleValueFormatString;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.GIPS.JSON;


/**
 * FactSetProtobufStachV3TableViewTypesFormatTypesFormatString
 */
@JsonPropertyOrder({
  FactSetProtobufStachV3TableViewTypesFormatTypesFormatString.JSON_PROPERTY_SINGLE_VALUE,
  FactSetProtobufStachV3TableViewTypesFormatTypesFormatString.JSON_PROPERTY_NAME_BASED_COMPOSITE,
  FactSetProtobufStachV3TableViewTypesFormatTypesFormatString.JSON_PROPERTY_TYPE_CASE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FactSetProtobufStachV3TableViewTypesFormatTypesFormatString implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SINGLE_VALUE = "singleValue";
  private FactSetProtobufStachV3TableViewTypesFormatTypesSingleValueFormatString singleValue;

  public static final String JSON_PROPERTY_NAME_BASED_COMPOSITE = "nameBasedComposite";
  private Object nameBasedComposite;

  public static final String JSON_PROPERTY_TYPE_CASE = "typeCase";
  private FactSetProtobufStachV3TableViewTypesFormatTypesFormatStringTypeOneofCase typeCase;

  public FactSetProtobufStachV3TableViewTypesFormatTypesFormatString() { 
  }

  public FactSetProtobufStachV3TableViewTypesFormatTypesFormatString singleValue(FactSetProtobufStachV3TableViewTypesFormatTypesSingleValueFormatString singleValue) {
    this.singleValue = singleValue;
    return this;
  }

   /**
   * Get singleValue
   * @return singleValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SINGLE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FactSetProtobufStachV3TableViewTypesFormatTypesSingleValueFormatString getSingleValue() {
    return singleValue;
  }


  @JsonProperty(JSON_PROPERTY_SINGLE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSingleValue(FactSetProtobufStachV3TableViewTypesFormatTypesSingleValueFormatString singleValue) {
    this.singleValue = singleValue;
  }


  public FactSetProtobufStachV3TableViewTypesFormatTypesFormatString nameBasedComposite(Object nameBasedComposite) {
    this.nameBasedComposite = nameBasedComposite;
    return this;
  }

   /**
   * Get nameBasedComposite
   * @return nameBasedComposite
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NAME_BASED_COMPOSITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getNameBasedComposite() {
    return nameBasedComposite;
  }


  @JsonProperty(JSON_PROPERTY_NAME_BASED_COMPOSITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNameBasedComposite(Object nameBasedComposite) {
    this.nameBasedComposite = nameBasedComposite;
  }


  public FactSetProtobufStachV3TableViewTypesFormatTypesFormatString typeCase(FactSetProtobufStachV3TableViewTypesFormatTypesFormatStringTypeOneofCase typeCase) {
    this.typeCase = typeCase;
    return this;
  }

   /**
   * Get typeCase
   * @return typeCase
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FactSetProtobufStachV3TableViewTypesFormatTypesFormatStringTypeOneofCase getTypeCase() {
    return typeCase;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeCase(FactSetProtobufStachV3TableViewTypesFormatTypesFormatStringTypeOneofCase typeCase) {
    this.typeCase = typeCase;
  }


  /**
   * Return true if this FactSet.Protobuf.Stach.V3.TableView.Types.Format.Types.FormatString object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactSetProtobufStachV3TableViewTypesFormatTypesFormatString factSetProtobufStachV3TableViewTypesFormatTypesFormatString = (FactSetProtobufStachV3TableViewTypesFormatTypesFormatString) o;
    return Objects.equals(this.singleValue, factSetProtobufStachV3TableViewTypesFormatTypesFormatString.singleValue) &&
        Objects.equals(this.nameBasedComposite, factSetProtobufStachV3TableViewTypesFormatTypesFormatString.nameBasedComposite) &&
        Objects.equals(this.typeCase, factSetProtobufStachV3TableViewTypesFormatTypesFormatString.typeCase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(singleValue, nameBasedComposite, typeCase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactSetProtobufStachV3TableViewTypesFormatTypesFormatString {\n");
    sb.append("    singleValue: ").append(toIndentedString(singleValue)).append("\n");
    sb.append("    nameBasedComposite: ").append(toIndentedString(nameBasedComposite)).append("\n");
    sb.append("    typeCase: ").append(toIndentedString(typeCase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

