/*
 * GIPS API
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.GIPS.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.GIPS.JSON;


/**
 * List of calculation parameters.
 */
@ApiModel(description = "List of calculation parameters.")
@JsonPropertyOrder({
  GIPSCalculationParameters.JSON_PROPERTY_ACCOUNT,
  GIPSCalculationParameters.JSON_PROPERTY_ENDDATE,
  GIPSCalculationParameters.JSON_PROPERTY_REPORT,
  GIPSCalculationParameters.JSON_PROPERTY_VIEWID,
  GIPSCalculationParameters.JSON_PROPERTY_CURRENCYISOCODE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class GIPSCalculationParameters implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ACCOUNT = "account";
  private String account;

  public static final String JSON_PROPERTY_ENDDATE = "enddate";
  private JsonNullable<String> enddate = JsonNullable.<String>undefined();

  /**
   * Report name
   */
  public enum ReportEnum {
    RET_STAT("RET_STAT");

    private String value;

    ReportEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReportEnum fromValue(String value) {
      for (ReportEnum b : ReportEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_REPORT = "report";
  private JsonNullable<ReportEnum> report = JsonNullable.<ReportEnum>undefined();

  public static final String JSON_PROPERTY_VIEWID = "viewid";
  private JsonNullable<String> viewid = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CURRENCYISOCODE = "currencyisocode";
  private JsonNullable<String> currencyisocode = JsonNullable.<String>undefined();

  public GIPSCalculationParameters() { 
  }

  @JsonCreator
  public GIPSCalculationParameters(
    @JsonProperty(value=JSON_PROPERTY_ACCOUNT, required=true) String account
  ) {
    this();
    this.account = account;
  }

  public GIPSCalculationParameters account(String account) {
    this.account = account;
    return this;
  }

   /**
   * Account path for the calculation. Account field accepts only ACTM.
   * @return account
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Account path for the calculation. Account field accepts only ACTM.")
  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccount() {
    return account;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccount(String account) {
    this.account = account;
  }


  public GIPSCalculationParameters enddate(String enddate) {
    this.enddate = JsonNullable.<String>of(enddate);
    return this;
  }

   /**
   * Calculation&#39;s end date. End of previous month will be used as the enddate if not provided explicitly.
   * @return enddate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Calculation's end date. End of previous month will be used as the enddate if not provided explicitly.")
  @JsonIgnore

  public String getEnddate() {
        return enddate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENDDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEnddate_JsonNullable() {
    return enddate;
  }
  
  @JsonProperty(JSON_PROPERTY_ENDDATE)
  public void setEnddate_JsonNullable(JsonNullable<String> enddate) {
    this.enddate = enddate;
  }

  public void setEnddate(String enddate) {
    this.enddate = JsonNullable.<String>of(enddate);
  }


  public GIPSCalculationParameters report(ReportEnum report) {
    this.report = JsonNullable.<ReportEnum>of(report);
    return this;
  }

   /**
   * Report name
   * @return report
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Report name")
  @JsonIgnore

  public ReportEnum getReport() {
        return report.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ReportEnum> getReport_JsonNullable() {
    return report;
  }
  
  @JsonProperty(JSON_PROPERTY_REPORT)
  public void setReport_JsonNullable(JsonNullable<ReportEnum> report) {
    this.report = report;
  }

  public void setReport(ReportEnum report) {
    this.report = JsonNullable.<ReportEnum>of(report);
  }


  public GIPSCalculationParameters viewid(String viewid) {
    this.viewid = JsonNullable.<String>of(viewid);
    return this;
  }

   /**
   * ViewId for calculation.
   * @return viewid
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "ViewId for calculation.")
  @JsonIgnore

  public String getViewid() {
        return viewid.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VIEWID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getViewid_JsonNullable() {
    return viewid;
  }
  
  @JsonProperty(JSON_PROPERTY_VIEWID)
  public void setViewid_JsonNullable(JsonNullable<String> viewid) {
    this.viewid = viewid;
  }

  public void setViewid(String viewid) {
    this.viewid = JsonNullable.<String>of(viewid);
  }


  public GIPSCalculationParameters currencyisocode(String currencyisocode) {
    this.currencyisocode = JsonNullable.<String>of(currencyisocode);
    return this;
  }

   /**
   * Currency ISO code for calculation. The default currency value of the account will be used if not provided explicitly.
   * @return currencyisocode
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Currency ISO code for calculation. The default currency value of the account will be used if not provided explicitly.")
  @JsonIgnore

  public String getCurrencyisocode() {
        return currencyisocode.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENCYISOCODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCurrencyisocode_JsonNullable() {
    return currencyisocode;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENCYISOCODE)
  public void setCurrencyisocode_JsonNullable(JsonNullable<String> currencyisocode) {
    this.currencyisocode = currencyisocode;
  }

  public void setCurrencyisocode(String currencyisocode) {
    this.currencyisocode = JsonNullable.<String>of(currencyisocode);
  }


  /**
   * Return true if this GIPSCalculationParameters object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GIPSCalculationParameters giPSCalculationParameters = (GIPSCalculationParameters) o;
    return Objects.equals(this.account, giPSCalculationParameters.account) &&
        equalsNullable(this.enddate, giPSCalculationParameters.enddate) &&
        equalsNullable(this.report, giPSCalculationParameters.report) &&
        equalsNullable(this.viewid, giPSCalculationParameters.viewid) &&
        equalsNullable(this.currencyisocode, giPSCalculationParameters.currencyisocode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, hashCodeNullable(enddate), hashCodeNullable(report), hashCodeNullable(viewid), hashCodeNullable(currencyisocode));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GIPSCalculationParameters {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    enddate: ").append(toIndentedString(enddate)).append("\n");
    sb.append("    report: ").append(toIndentedString(report)).append("\n");
    sb.append("    viewid: ").append(toIndentedString(viewid)).append("\n");
    sb.append("    currencyisocode: ").append(toIndentedString(currencyisocode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

