/*
 * GIPS API
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.GIPS.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.GIPS.models.FactSetProtobufStachV3Sort;
import com.factset.sdk.GIPS.models.FactSetProtobufStachV3TableViewTypesAggregate;
import com.factset.sdk.GIPS.models.FactSetProtobufStachV3TableViewTypesCollapsedColumn;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.GIPS.JSON;


/**
 * FactSetProtobufStachV3TableViewTypesGroup
 */
@JsonPropertyOrder({
  FactSetProtobufStachV3TableViewTypesGroup.JSON_PROPERTY_BY,
  FactSetProtobufStachV3TableViewTypesGroup.JSON_PROPERTY_COLLAPSED_COLUMN,
  FactSetProtobufStachV3TableViewTypesGroup.JSON_PROPERTY_AGGREGATES,
  FactSetProtobufStachV3TableViewTypesGroup.JSON_PROPERTY_EXCLUDE_TOTAL_ROWS,
  FactSetProtobufStachV3TableViewTypesGroup.JSON_PROPERTY_EXCLUDE_GROUP_ROWS,
  FactSetProtobufStachV3TableViewTypesGroup.JSON_PROPERTY_EXCLUDE_DETAIL_ROWS,
  FactSetProtobufStachV3TableViewTypesGroup.JSON_PROPERTY_SORT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FactSetProtobufStachV3TableViewTypesGroup implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_BY = "by";
  private JsonNullable<java.util.List<String>> by = JsonNullable.<java.util.List<String>>undefined();

  public static final String JSON_PROPERTY_COLLAPSED_COLUMN = "collapsedColumn";
  private FactSetProtobufStachV3TableViewTypesCollapsedColumn collapsedColumn;

  public static final String JSON_PROPERTY_AGGREGATES = "aggregates";
  private JsonNullable<java.util.Map<String, FactSetProtobufStachV3TableViewTypesAggregate>> aggregates = JsonNullable.<java.util.Map<String, FactSetProtobufStachV3TableViewTypesAggregate>>undefined();

  public static final String JSON_PROPERTY_EXCLUDE_TOTAL_ROWS = "excludeTotalRows";
  private Boolean excludeTotalRows;

  public static final String JSON_PROPERTY_EXCLUDE_GROUP_ROWS = "excludeGroupRows";
  private JsonNullable<java.util.List<String>> excludeGroupRows = JsonNullable.<java.util.List<String>>undefined();

  public static final String JSON_PROPERTY_EXCLUDE_DETAIL_ROWS = "excludeDetailRows";
  private Boolean excludeDetailRows;

  public static final String JSON_PROPERTY_SORT = "sort";
  private JsonNullable<java.util.Map<String, FactSetProtobufStachV3Sort>> sort = JsonNullable.<java.util.Map<String, FactSetProtobufStachV3Sort>>undefined();

  public FactSetProtobufStachV3TableViewTypesGroup() { 
  }

  @JsonCreator
  public FactSetProtobufStachV3TableViewTypesGroup(
    @JsonProperty(JSON_PROPERTY_BY) java.util.List<String> by, 
    @JsonProperty(JSON_PROPERTY_AGGREGATES) java.util.Map<String, FactSetProtobufStachV3TableViewTypesAggregate> aggregates, 
    @JsonProperty(JSON_PROPERTY_EXCLUDE_GROUP_ROWS) java.util.List<String> excludeGroupRows, 
    @JsonProperty(JSON_PROPERTY_SORT) java.util.Map<String, FactSetProtobufStachV3Sort> sort
  ) {
    this();
    this.by = JsonNullable.<java.util.List<String>>of(by);
    this.aggregates = JsonNullable.<java.util.Map<String, FactSetProtobufStachV3TableViewTypesAggregate>>of(aggregates);
    this.excludeGroupRows = JsonNullable.<java.util.List<String>>of(excludeGroupRows);
    this.sort = JsonNullable.<java.util.Map<String, FactSetProtobufStachV3Sort>>of(sort);
  }

   /**
   * Get by
   * @return by
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.List<String> getBy() {
    
    if (by == null) {
      by = JsonNullable.<java.util.List<String>>of(new java.util.ArrayList<>());
    }
    return by.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<String>> getBy_JsonNullable() {
    return by;
  }
  
  @JsonProperty(JSON_PROPERTY_BY)
  private void setBy_JsonNullable(JsonNullable<java.util.List<String>> by) {
    this.by = by;
  }



  public FactSetProtobufStachV3TableViewTypesGroup collapsedColumn(FactSetProtobufStachV3TableViewTypesCollapsedColumn collapsedColumn) {
    this.collapsedColumn = collapsedColumn;
    return this;
  }

   /**
   * Get collapsedColumn
   * @return collapsedColumn
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COLLAPSED_COLUMN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FactSetProtobufStachV3TableViewTypesCollapsedColumn getCollapsedColumn() {
    return collapsedColumn;
  }


  @JsonProperty(JSON_PROPERTY_COLLAPSED_COLUMN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCollapsedColumn(FactSetProtobufStachV3TableViewTypesCollapsedColumn collapsedColumn) {
    this.collapsedColumn = collapsedColumn;
  }


   /**
   * Get aggregates
   * @return aggregates
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.Map<String, FactSetProtobufStachV3TableViewTypesAggregate> getAggregates() {
    
    if (aggregates == null) {
      aggregates = JsonNullable.<java.util.Map<String, FactSetProtobufStachV3TableViewTypesAggregate>>of(new java.util.HashMap<>());
    }
    return aggregates.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AGGREGATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.Map<String, FactSetProtobufStachV3TableViewTypesAggregate>> getAggregates_JsonNullable() {
    return aggregates;
  }
  
  @JsonProperty(JSON_PROPERTY_AGGREGATES)
  private void setAggregates_JsonNullable(JsonNullable<java.util.Map<String, FactSetProtobufStachV3TableViewTypesAggregate>> aggregates) {
    this.aggregates = aggregates;
  }



  public FactSetProtobufStachV3TableViewTypesGroup excludeTotalRows(Boolean excludeTotalRows) {
    this.excludeTotalRows = excludeTotalRows;
    return this;
  }

   /**
   * Get excludeTotalRows
   * @return excludeTotalRows
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXCLUDE_TOTAL_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExcludeTotalRows() {
    return excludeTotalRows;
  }


  @JsonProperty(JSON_PROPERTY_EXCLUDE_TOTAL_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExcludeTotalRows(Boolean excludeTotalRows) {
    this.excludeTotalRows = excludeTotalRows;
  }


   /**
   * Get excludeGroupRows
   * @return excludeGroupRows
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.List<String> getExcludeGroupRows() {
    
    if (excludeGroupRows == null) {
      excludeGroupRows = JsonNullable.<java.util.List<String>>of(new java.util.ArrayList<>());
    }
    return excludeGroupRows.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXCLUDE_GROUP_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<String>> getExcludeGroupRows_JsonNullable() {
    return excludeGroupRows;
  }
  
  @JsonProperty(JSON_PROPERTY_EXCLUDE_GROUP_ROWS)
  private void setExcludeGroupRows_JsonNullable(JsonNullable<java.util.List<String>> excludeGroupRows) {
    this.excludeGroupRows = excludeGroupRows;
  }



  public FactSetProtobufStachV3TableViewTypesGroup excludeDetailRows(Boolean excludeDetailRows) {
    this.excludeDetailRows = excludeDetailRows;
    return this;
  }

   /**
   * Get excludeDetailRows
   * @return excludeDetailRows
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXCLUDE_DETAIL_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExcludeDetailRows() {
    return excludeDetailRows;
  }


  @JsonProperty(JSON_PROPERTY_EXCLUDE_DETAIL_ROWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExcludeDetailRows(Boolean excludeDetailRows) {
    this.excludeDetailRows = excludeDetailRows;
  }


   /**
   * Get sort
   * @return sort
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.Map<String, FactSetProtobufStachV3Sort> getSort() {
    
    if (sort == null) {
      sort = JsonNullable.<java.util.Map<String, FactSetProtobufStachV3Sort>>of(new java.util.HashMap<>());
    }
    return sort.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.Map<String, FactSetProtobufStachV3Sort>> getSort_JsonNullable() {
    return sort;
  }
  
  @JsonProperty(JSON_PROPERTY_SORT)
  private void setSort_JsonNullable(JsonNullable<java.util.Map<String, FactSetProtobufStachV3Sort>> sort) {
    this.sort = sort;
  }



  /**
   * Return true if this FactSet.Protobuf.Stach.V3.TableView.Types.Group object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactSetProtobufStachV3TableViewTypesGroup factSetProtobufStachV3TableViewTypesGroup = (FactSetProtobufStachV3TableViewTypesGroup) o;
    return equalsNullable(this.by, factSetProtobufStachV3TableViewTypesGroup.by) &&
        Objects.equals(this.collapsedColumn, factSetProtobufStachV3TableViewTypesGroup.collapsedColumn) &&
        equalsNullable(this.aggregates, factSetProtobufStachV3TableViewTypesGroup.aggregates) &&
        Objects.equals(this.excludeTotalRows, factSetProtobufStachV3TableViewTypesGroup.excludeTotalRows) &&
        equalsNullable(this.excludeGroupRows, factSetProtobufStachV3TableViewTypesGroup.excludeGroupRows) &&
        Objects.equals(this.excludeDetailRows, factSetProtobufStachV3TableViewTypesGroup.excludeDetailRows) &&
        equalsNullable(this.sort, factSetProtobufStachV3TableViewTypesGroup.sort);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(by), collapsedColumn, hashCodeNullable(aggregates), excludeTotalRows, hashCodeNullable(excludeGroupRows), excludeDetailRows, hashCodeNullable(sort));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactSetProtobufStachV3TableViewTypesGroup {\n");
    sb.append("    by: ").append(toIndentedString(by)).append("\n");
    sb.append("    collapsedColumn: ").append(toIndentedString(collapsedColumn)).append("\n");
    sb.append("    aggregates: ").append(toIndentedString(aggregates)).append("\n");
    sb.append("    excludeTotalRows: ").append(toIndentedString(excludeTotalRows)).append("\n");
    sb.append("    excludeGroupRows: ").append(toIndentedString(excludeGroupRows)).append("\n");
    sb.append("    excludeDetailRows: ").append(toIndentedString(excludeDetailRows)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

