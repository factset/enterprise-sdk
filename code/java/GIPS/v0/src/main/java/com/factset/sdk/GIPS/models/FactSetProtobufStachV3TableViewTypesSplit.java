/*
 * GIPS API
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.GIPS.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.GIPS.JSON;


/**
 * FactSetProtobufStachV3TableViewTypesSplit
 */
@JsonPropertyOrder({
  FactSetProtobufStachV3TableViewTypesSplit.JSON_PROPERTY_ALIAS,
  FactSetProtobufStachV3TableViewTypesSplit.JSON_PROPERTY_BY,
  FactSetProtobufStachV3TableViewTypesSplit.JSON_PROPERTY_INCLUDE,
  FactSetProtobufStachV3TableViewTypesSplit.JSON_PROPERTY_OVER,
  FactSetProtobufStachV3TableViewTypesSplit.JSON_PROPERTY_HEADERS,
  FactSetProtobufStachV3TableViewTypesSplit.JSON_PROPERTY_REMOVE_EMPTY_SPLIT_COLUMNS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FactSetProtobufStachV3TableViewTypesSplit implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ALIAS = "alias";
  private JsonNullable<String> alias = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BY = "by";
  private JsonNullable<java.util.List<String>> by = JsonNullable.<java.util.List<String>>undefined();

  public static final String JSON_PROPERTY_INCLUDE = "include";
  private JsonNullable<java.util.List<String>> include = JsonNullable.<java.util.List<String>>undefined();

  public static final String JSON_PROPERTY_OVER = "over";
  private JsonNullable<java.util.List<String>> over = JsonNullable.<java.util.List<String>>undefined();

  public static final String JSON_PROPERTY_HEADERS = "headers";
  private JsonNullable<java.util.Map<String, String>> headers = JsonNullable.<java.util.Map<String, String>>undefined();

  public static final String JSON_PROPERTY_REMOVE_EMPTY_SPLIT_COLUMNS = "removeEmptySplitColumns";
  private Boolean removeEmptySplitColumns;

  public FactSetProtobufStachV3TableViewTypesSplit() { 
  }

  @JsonCreator
  public FactSetProtobufStachV3TableViewTypesSplit(
    @JsonProperty(JSON_PROPERTY_BY) java.util.List<String> by, 
    @JsonProperty(JSON_PROPERTY_INCLUDE) java.util.List<String> include, 
    @JsonProperty(JSON_PROPERTY_OVER) java.util.List<String> over, 
    @JsonProperty(JSON_PROPERTY_HEADERS) java.util.Map<String, String> headers
  ) {
    this();
    this.by = JsonNullable.<java.util.List<String>>of(by);
    this.include = JsonNullable.<java.util.List<String>>of(include);
    this.over = JsonNullable.<java.util.List<String>>of(over);
    this.headers = JsonNullable.<java.util.Map<String, String>>of(headers);
  }

  public FactSetProtobufStachV3TableViewTypesSplit alias(String alias) {
    this.alias = JsonNullable.<String>of(alias);
    return this;
  }

   /**
   * Get alias
   * @return alias
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getAlias() {
        return alias.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALIAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAlias_JsonNullable() {
    return alias;
  }
  
  @JsonProperty(JSON_PROPERTY_ALIAS)
  public void setAlias_JsonNullable(JsonNullable<String> alias) {
    this.alias = alias;
  }

  public void setAlias(String alias) {
    this.alias = JsonNullable.<String>of(alias);
  }


   /**
   * Get by
   * @return by
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.List<String> getBy() {
    
    if (by == null) {
      by = JsonNullable.<java.util.List<String>>of(new java.util.ArrayList<>());
    }
    return by.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<String>> getBy_JsonNullable() {
    return by;
  }
  
  @JsonProperty(JSON_PROPERTY_BY)
  private void setBy_JsonNullable(JsonNullable<java.util.List<String>> by) {
    this.by = by;
  }



   /**
   * Get include
   * @return include
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.List<String> getInclude() {
    
    if (include == null) {
      include = JsonNullable.<java.util.List<String>>of(new java.util.ArrayList<>());
    }
    return include.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<String>> getInclude_JsonNullable() {
    return include;
  }
  
  @JsonProperty(JSON_PROPERTY_INCLUDE)
  private void setInclude_JsonNullable(JsonNullable<java.util.List<String>> include) {
    this.include = include;
  }



   /**
   * Get over
   * @return over
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.List<String> getOver() {
    
    if (over == null) {
      over = JsonNullable.<java.util.List<String>>of(new java.util.ArrayList<>());
    }
    return over.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_OVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<String>> getOver_JsonNullable() {
    return over;
  }
  
  @JsonProperty(JSON_PROPERTY_OVER)
  private void setOver_JsonNullable(JsonNullable<java.util.List<String>> over) {
    this.over = over;
  }



   /**
   * Get headers
   * @return headers
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.Map<String, String> getHeaders() {
    
    if (headers == null) {
      headers = JsonNullable.<java.util.Map<String, String>>of(new java.util.HashMap<>());
    }
    return headers.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.Map<String, String>> getHeaders_JsonNullable() {
    return headers;
  }
  
  @JsonProperty(JSON_PROPERTY_HEADERS)
  private void setHeaders_JsonNullable(JsonNullable<java.util.Map<String, String>> headers) {
    this.headers = headers;
  }



  public FactSetProtobufStachV3TableViewTypesSplit removeEmptySplitColumns(Boolean removeEmptySplitColumns) {
    this.removeEmptySplitColumns = removeEmptySplitColumns;
    return this;
  }

   /**
   * Get removeEmptySplitColumns
   * @return removeEmptySplitColumns
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REMOVE_EMPTY_SPLIT_COLUMNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRemoveEmptySplitColumns() {
    return removeEmptySplitColumns;
  }


  @JsonProperty(JSON_PROPERTY_REMOVE_EMPTY_SPLIT_COLUMNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoveEmptySplitColumns(Boolean removeEmptySplitColumns) {
    this.removeEmptySplitColumns = removeEmptySplitColumns;
  }


  /**
   * Return true if this FactSet.Protobuf.Stach.V3.TableView.Types.Split object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactSetProtobufStachV3TableViewTypesSplit factSetProtobufStachV3TableViewTypesSplit = (FactSetProtobufStachV3TableViewTypesSplit) o;
    return equalsNullable(this.alias, factSetProtobufStachV3TableViewTypesSplit.alias) &&
        equalsNullable(this.by, factSetProtobufStachV3TableViewTypesSplit.by) &&
        equalsNullable(this.include, factSetProtobufStachV3TableViewTypesSplit.include) &&
        equalsNullable(this.over, factSetProtobufStachV3TableViewTypesSplit.over) &&
        equalsNullable(this.headers, factSetProtobufStachV3TableViewTypesSplit.headers) &&
        Objects.equals(this.removeEmptySplitColumns, factSetProtobufStachV3TableViewTypesSplit.removeEmptySplitColumns);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(alias), hashCodeNullable(by), hashCodeNullable(include), hashCodeNullable(over), hashCodeNullable(headers), removeEmptySplitColumns);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactSetProtobufStachV3TableViewTypesSplit {\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    by: ").append(toIndentedString(by)).append("\n");
    sb.append("    include: ").append(toIndentedString(include)).append("\n");
    sb.append("    over: ").append(toIndentedString(over)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    removeEmptySplitColumns: ").append(toIndentedString(removeEmptySplitColumns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

