/*
 * GIPS API
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.GIPS.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.GIPS.JSON;


/**
 * FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier
 */
@JsonPropertyOrder({
  FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier.JSON_PROPERTY_DECIMAL_DIGITS,
  FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier.JSON_PROPERTY_EXPONENT_DIGITS,
  FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier.JSON_PROPERTY_DECIMAL_SEPARATOR,
  FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier.JSON_PROPERTY_EXPONENT_SIGN_REQUIRED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DECIMAL_DIGITS = "decimalDigits";
  private Integer decimalDigits;

  public static final String JSON_PROPERTY_EXPONENT_DIGITS = "exponentDigits";
  private Integer exponentDigits;

  public static final String JSON_PROPERTY_DECIMAL_SEPARATOR = "decimalSeparator";
  private JsonNullable<String> decimalSeparator = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_EXPONENT_SIGN_REQUIRED = "exponentSignRequired";
  private Boolean exponentSignRequired;

  public FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier() { 
  }

  public FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier decimalDigits(Integer decimalDigits) {
    this.decimalDigits = decimalDigits;
    return this;
  }

   /**
   * Get decimalDigits
   * @return decimalDigits
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DECIMAL_DIGITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDecimalDigits() {
    return decimalDigits;
  }


  @JsonProperty(JSON_PROPERTY_DECIMAL_DIGITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecimalDigits(Integer decimalDigits) {
    this.decimalDigits = decimalDigits;
  }


  public FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier exponentDigits(Integer exponentDigits) {
    this.exponentDigits = exponentDigits;
    return this;
  }

   /**
   * Get exponentDigits
   * @return exponentDigits
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXPONENT_DIGITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExponentDigits() {
    return exponentDigits;
  }


  @JsonProperty(JSON_PROPERTY_EXPONENT_DIGITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExponentDigits(Integer exponentDigits) {
    this.exponentDigits = exponentDigits;
  }


  public FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier decimalSeparator(String decimalSeparator) {
    this.decimalSeparator = JsonNullable.<String>of(decimalSeparator);
    return this;
  }

   /**
   * Get decimalSeparator
   * @return decimalSeparator
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getDecimalSeparator() {
        return decimalSeparator.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DECIMAL_SEPARATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDecimalSeparator_JsonNullable() {
    return decimalSeparator;
  }
  
  @JsonProperty(JSON_PROPERTY_DECIMAL_SEPARATOR)
  public void setDecimalSeparator_JsonNullable(JsonNullable<String> decimalSeparator) {
    this.decimalSeparator = decimalSeparator;
  }

  public void setDecimalSeparator(String decimalSeparator) {
    this.decimalSeparator = JsonNullable.<String>of(decimalSeparator);
  }


  public FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier exponentSignRequired(Boolean exponentSignRequired) {
    this.exponentSignRequired = exponentSignRequired;
    return this;
  }

   /**
   * Get exponentSignRequired
   * @return exponentSignRequired
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXPONENT_SIGN_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExponentSignRequired() {
    return exponentSignRequired;
  }


  @JsonProperty(JSON_PROPERTY_EXPONENT_SIGN_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExponentSignRequired(Boolean exponentSignRequired) {
    this.exponentSignRequired = exponentSignRequired;
  }


  /**
   * Return true if this FactSet.Protobuf.Format.V1.NumberFormat.Types.ExponentialStandardSpecifier object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier factSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier = (FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier) o;
    return Objects.equals(this.decimalDigits, factSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier.decimalDigits) &&
        Objects.equals(this.exponentDigits, factSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier.exponentDigits) &&
        equalsNullable(this.decimalSeparator, factSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier.decimalSeparator) &&
        Objects.equals(this.exponentSignRequired, factSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier.exponentSignRequired);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(decimalDigits, exponentDigits, hashCodeNullable(decimalSeparator), exponentSignRequired);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier {\n");
    sb.append("    decimalDigits: ").append(toIndentedString(decimalDigits)).append("\n");
    sb.append("    exponentDigits: ").append(toIndentedString(exponentDigits)).append("\n");
    sb.append("    decimalSeparator: ").append(toIndentedString(decimalSeparator)).append("\n");
    sb.append("    exponentSignRequired: ").append(toIndentedString(exponentSignRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

