/*
 * GIPS API
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.GIPS.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.GIPS.models.FactSetProtobufFormatV1FdsFormatSettings;
import com.factset.sdk.GIPS.models.FactSetProtobufStachV3TableViewTypesFormatTypesFormatString;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.GIPS.JSON;


/**
 * FactSetProtobufStachV3TableViewTypesFormat
 */
@JsonPropertyOrder({
  FactSetProtobufStachV3TableViewTypesFormat.JSON_PROPERTY_SETTINGS,
  FactSetProtobufStachV3TableViewTypesFormat.JSON_PROPERTY_CULTURE_COLUMN,
  FactSetProtobufStachV3TableViewTypesFormat.JSON_PROPERTY_TIME_ZONE_COLUMN,
  FactSetProtobufStachV3TableViewTypesFormat.JSON_PROPERTY_STRINGS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FactSetProtobufStachV3TableViewTypesFormat implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SETTINGS = "settings";
  private FactSetProtobufFormatV1FdsFormatSettings settings;

  public static final String JSON_PROPERTY_CULTURE_COLUMN = "cultureColumn";
  private JsonNullable<String> cultureColumn = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TIME_ZONE_COLUMN = "timeZoneColumn";
  private JsonNullable<String> timeZoneColumn = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_STRINGS = "strings";
  private JsonNullable<java.util.Map<String, FactSetProtobufStachV3TableViewTypesFormatTypesFormatString>> strings = JsonNullable.<java.util.Map<String, FactSetProtobufStachV3TableViewTypesFormatTypesFormatString>>undefined();

  public FactSetProtobufStachV3TableViewTypesFormat() { 
  }

  @JsonCreator
  public FactSetProtobufStachV3TableViewTypesFormat(
    @JsonProperty(JSON_PROPERTY_STRINGS) java.util.Map<String, FactSetProtobufStachV3TableViewTypesFormatTypesFormatString> strings
  ) {
    this();
    this.strings = JsonNullable.<java.util.Map<String, FactSetProtobufStachV3TableViewTypesFormatTypesFormatString>>of(strings);
  }

  public FactSetProtobufStachV3TableViewTypesFormat settings(FactSetProtobufFormatV1FdsFormatSettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FactSetProtobufFormatV1FdsFormatSettings getSettings() {
    return settings;
  }


  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettings(FactSetProtobufFormatV1FdsFormatSettings settings) {
    this.settings = settings;
  }


  public FactSetProtobufStachV3TableViewTypesFormat cultureColumn(String cultureColumn) {
    this.cultureColumn = JsonNullable.<String>of(cultureColumn);
    return this;
  }

   /**
   * Get cultureColumn
   * @return cultureColumn
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getCultureColumn() {
        return cultureColumn.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CULTURE_COLUMN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCultureColumn_JsonNullable() {
    return cultureColumn;
  }
  
  @JsonProperty(JSON_PROPERTY_CULTURE_COLUMN)
  public void setCultureColumn_JsonNullable(JsonNullable<String> cultureColumn) {
    this.cultureColumn = cultureColumn;
  }

  public void setCultureColumn(String cultureColumn) {
    this.cultureColumn = JsonNullable.<String>of(cultureColumn);
  }


  public FactSetProtobufStachV3TableViewTypesFormat timeZoneColumn(String timeZoneColumn) {
    this.timeZoneColumn = JsonNullable.<String>of(timeZoneColumn);
    return this;
  }

   /**
   * Get timeZoneColumn
   * @return timeZoneColumn
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getTimeZoneColumn() {
        return timeZoneColumn.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TIME_ZONE_COLUMN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTimeZoneColumn_JsonNullable() {
    return timeZoneColumn;
  }
  
  @JsonProperty(JSON_PROPERTY_TIME_ZONE_COLUMN)
  public void setTimeZoneColumn_JsonNullable(JsonNullable<String> timeZoneColumn) {
    this.timeZoneColumn = timeZoneColumn;
  }

  public void setTimeZoneColumn(String timeZoneColumn) {
    this.timeZoneColumn = JsonNullable.<String>of(timeZoneColumn);
  }


   /**
   * Get strings
   * @return strings
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.Map<String, FactSetProtobufStachV3TableViewTypesFormatTypesFormatString> getStrings() {
    
    if (strings == null) {
      strings = JsonNullable.<java.util.Map<String, FactSetProtobufStachV3TableViewTypesFormatTypesFormatString>>of(new java.util.HashMap<>());
    }
    return strings.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STRINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.Map<String, FactSetProtobufStachV3TableViewTypesFormatTypesFormatString>> getStrings_JsonNullable() {
    return strings;
  }
  
  @JsonProperty(JSON_PROPERTY_STRINGS)
  private void setStrings_JsonNullable(JsonNullable<java.util.Map<String, FactSetProtobufStachV3TableViewTypesFormatTypesFormatString>> strings) {
    this.strings = strings;
  }



  /**
   * Return true if this FactSet.Protobuf.Stach.V3.TableView.Types.Format object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactSetProtobufStachV3TableViewTypesFormat factSetProtobufStachV3TableViewTypesFormat = (FactSetProtobufStachV3TableViewTypesFormat) o;
    return Objects.equals(this.settings, factSetProtobufStachV3TableViewTypesFormat.settings) &&
        equalsNullable(this.cultureColumn, factSetProtobufStachV3TableViewTypesFormat.cultureColumn) &&
        equalsNullable(this.timeZoneColumn, factSetProtobufStachV3TableViewTypesFormat.timeZoneColumn) &&
        equalsNullable(this.strings, factSetProtobufStachV3TableViewTypesFormat.strings);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(settings, hashCodeNullable(cultureColumn), hashCodeNullable(timeZoneColumn), hashCodeNullable(strings));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactSetProtobufStachV3TableViewTypesFormat {\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    cultureColumn: ").append(toIndentedString(cultureColumn)).append("\n");
    sb.append("    timeZoneColumn: ").append(toIndentedString(timeZoneColumn)).append("\n");
    sb.append("    strings: ").append(toIndentedString(strings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

