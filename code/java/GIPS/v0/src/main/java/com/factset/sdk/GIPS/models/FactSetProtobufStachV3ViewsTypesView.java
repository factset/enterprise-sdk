/*
 * GIPS API
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.GIPS.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.GIPS.models.FactSetProtobufStachV3TableView;
import com.factset.sdk.GIPS.models.FactSetProtobufStachV3ViewsTypesViewTypeOneofCase;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.GIPS.JSON;


/**
 * FactSetProtobufStachV3ViewsTypesView
 */
@JsonPropertyOrder({
  FactSetProtobufStachV3ViewsTypesView.JSON_PROPERTY_NAME,
  FactSetProtobufStachV3ViewsTypesView.JSON_PROPERTY_DISPLAY_NAME,
  FactSetProtobufStachV3ViewsTypesView.JSON_PROPERTY_TABLE,
  FactSetProtobufStachV3ViewsTypesView.JSON_PROPERTY_TYPE_CASE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class FactSetProtobufStachV3ViewsTypesView implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private JsonNullable<String> displayName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TABLE = "table";
  private FactSetProtobufStachV3TableView table;

  public static final String JSON_PROPERTY_TYPE_CASE = "typeCase";
  private FactSetProtobufStachV3ViewsTypesViewTypeOneofCase typeCase;

  public FactSetProtobufStachV3ViewsTypesView() { 
  }

  public FactSetProtobufStachV3ViewsTypesView name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public FactSetProtobufStachV3ViewsTypesView displayName(String displayName) {
    this.displayName = JsonNullable.<String>of(displayName);
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getDisplayName() {
        return displayName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDisplayName_JsonNullable() {
    return displayName;
  }
  
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  public void setDisplayName_JsonNullable(JsonNullable<String> displayName) {
    this.displayName = displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = JsonNullable.<String>of(displayName);
  }


  public FactSetProtobufStachV3ViewsTypesView table(FactSetProtobufStachV3TableView table) {
    this.table = table;
    return this;
  }

   /**
   * Get table
   * @return table
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FactSetProtobufStachV3TableView getTable() {
    return table;
  }


  @JsonProperty(JSON_PROPERTY_TABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTable(FactSetProtobufStachV3TableView table) {
    this.table = table;
  }


  public FactSetProtobufStachV3ViewsTypesView typeCase(FactSetProtobufStachV3ViewsTypesViewTypeOneofCase typeCase) {
    this.typeCase = typeCase;
    return this;
  }

   /**
   * Get typeCase
   * @return typeCase
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FactSetProtobufStachV3ViewsTypesViewTypeOneofCase getTypeCase() {
    return typeCase;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeCase(FactSetProtobufStachV3ViewsTypesViewTypeOneofCase typeCase) {
    this.typeCase = typeCase;
  }


  /**
   * Return true if this FactSet.Protobuf.Stach.V3.Views.Types.View object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactSetProtobufStachV3ViewsTypesView factSetProtobufStachV3ViewsTypesView = (FactSetProtobufStachV3ViewsTypesView) o;
    return equalsNullable(this.name, factSetProtobufStachV3ViewsTypesView.name) &&
        equalsNullable(this.displayName, factSetProtobufStachV3ViewsTypesView.displayName) &&
        Objects.equals(this.table, factSetProtobufStachV3ViewsTypesView.table) &&
        Objects.equals(this.typeCase, factSetProtobufStachV3ViewsTypesView.typeCase);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(name), hashCodeNullable(displayName), table, typeCase);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactSetProtobufStachV3ViewsTypesView {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    typeCase: ").append(toIndentedString(typeCase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

