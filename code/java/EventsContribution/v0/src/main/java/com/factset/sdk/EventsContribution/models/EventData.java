/*
 * Events Contribution API
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsContribution.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.EventsContribution.models.LocationData;
import com.factset.sdk.EventsContribution.models.ParticipantsData;
import com.factset.sdk.EventsContribution.models.RegistrationInfoData;
import com.factset.sdk.EventsContribution.models.SymbolData;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsContribution.JSON;


/**
 * Event Data
 */
@ApiModel(description = "Event Data")
@JsonPropertyOrder({
  EventData.JSON_PROPERTY_EVENT_ID,
  EventData.JSON_PROPERTY_TITLE,
  EventData.JSON_PROPERTY_START_DATETIME,
  EventData.JSON_PROPERTY_AGENDA_URL,
  EventData.JSON_PROPERTY_PARTICIPANTS,
  EventData.JSON_PROPERTY_LOCATION,
  EventData.JSON_PROPERTY_SYMBOLS,
  EventData.JSON_PROPERTY_REGISTRATION_INFO
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class EventData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EVENT_ID = "eventId";
  private String eventId;

  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;

  public static final String JSON_PROPERTY_START_DATETIME = "startDatetime";
  private OffsetDateTime startDatetime;

  public static final String JSON_PROPERTY_AGENDA_URL = "agendaUrl";
  private String agendaUrl;

  public static final String JSON_PROPERTY_PARTICIPANTS = "participants";
  private java.util.List<ParticipantsData> participants = null;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private LocationData location;

  public static final String JSON_PROPERTY_SYMBOLS = "symbols";
  private java.util.List<SymbolData> symbols = new java.util.ArrayList<>();

  public static final String JSON_PROPERTY_REGISTRATION_INFO = "registrationInfo";
  private RegistrationInfoData registrationInfo;

  public EventData() { 
  }

  @JsonCreator
  public EventData(
    @JsonProperty(value=JSON_PROPERTY_EVENT_ID, required=true) String eventId, 
    @JsonProperty(value=JSON_PROPERTY_TITLE, required=true) String title, 
    @JsonProperty(value=JSON_PROPERTY_START_DATETIME, required=true) OffsetDateTime startDatetime, 
    @JsonProperty(value=JSON_PROPERTY_SYMBOLS, required=true) java.util.List<SymbolData> symbols
  ) {
    this();
    this.eventId = eventId;
    this.title = title;
    this.startDatetime = startDatetime;
    this.symbols = symbols;
  }

  public EventData eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * ID that corresponds to the event. This ID is vendor generated and should be unique in each vendor&#39;s content set.
   * @return eventId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "1234", required = true, value = "ID that corresponds to the event. This ID is vendor generated and should be unique in each vendor's content set.")
  @JsonProperty(JSON_PROPERTY_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEventId() {
    return eventId;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public EventData title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of the event to be displayed
   * @return title
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "the event title", required = true, value = "Title of the event to be displayed")
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTitle(String title) {
    this.title = title;
  }


  public EventData startDatetime(OffsetDateTime startDatetime) {
    this.startDatetime = startDatetime;
    return this;
  }

   /**
   * Start date and time of the event
   * @return startDatetime
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "2024-01-16T08:00Z", required = true, value = "Start date and time of the event")
  @JsonProperty(JSON_PROPERTY_START_DATETIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getStartDatetime() {
    return startDatetime;
  }


  @JsonProperty(JSON_PROPERTY_START_DATETIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartDatetime(OffsetDateTime startDatetime) {
    this.startDatetime = startDatetime;
  }


  public EventData agendaUrl(String agendaUrl) {
    this.agendaUrl = agendaUrl;
    return this;
  }

   /**
   * The meeting agenda which can be a document file or a webpage.
   * @return agendaUrl
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "http://www.factset.com", value = "The meeting agenda which can be a document file or a webpage.")
  @JsonProperty(JSON_PROPERTY_AGENDA_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAgendaUrl() {
    return agendaUrl;
  }


  @JsonProperty(JSON_PROPERTY_AGENDA_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAgendaUrl(String agendaUrl) {
    this.agendaUrl = agendaUrl;
  }


  public EventData participants(java.util.List<ParticipantsData> participants) {
    this.participants = participants;
    return this;
  }

  public EventData addParticipantsItem(ParticipantsData participantsItem) {
    if (this.participants == null) {
      this.participants = new java.util.ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * Get participants
   * @return participants
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PARTICIPANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<ParticipantsData> getParticipants() {
    return participants;
  }


  @JsonProperty(JSON_PROPERTY_PARTICIPANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParticipants(java.util.List<ParticipantsData> participants) {
    this.participants = participants;
  }


  public EventData location(LocationData location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocationData getLocation() {
    return location;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocation(LocationData location) {
    this.location = location;
  }


  public EventData symbols(java.util.List<SymbolData> symbols) {
    this.symbols = symbols;
    return this;
  }

  public EventData addSymbolsItem(SymbolData symbolsItem) {
    this.symbols.add(symbolsItem);
    return this;
  }

   /**
   * Get symbols
   * @return symbols
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SYMBOLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public java.util.List<SymbolData> getSymbols() {
    return symbols;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbols(java.util.List<SymbolData> symbols) {
    this.symbols = symbols;
  }


  public EventData registrationInfo(RegistrationInfoData registrationInfo) {
    this.registrationInfo = registrationInfo;
    return this;
  }

   /**
   * Get registrationInfo
   * @return registrationInfo
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REGISTRATION_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RegistrationInfoData getRegistrationInfo() {
    return registrationInfo;
  }


  @JsonProperty(JSON_PROPERTY_REGISTRATION_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegistrationInfo(RegistrationInfoData registrationInfo) {
    this.registrationInfo = registrationInfo;
  }


  /**
   * Return true if this EventData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventData eventData = (EventData) o;
    return Objects.equals(this.eventId, eventData.eventId) &&
        Objects.equals(this.title, eventData.title) &&
        Objects.equals(this.startDatetime, eventData.startDatetime) &&
        Objects.equals(this.agendaUrl, eventData.agendaUrl) &&
        Objects.equals(this.participants, eventData.participants) &&
        Objects.equals(this.location, eventData.location) &&
        Objects.equals(this.symbols, eventData.symbols) &&
        Objects.equals(this.registrationInfo, eventData.registrationInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, title, startDatetime, agendaUrl, participants, location, symbols, registrationInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventData {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    startDatetime: ").append(toIndentedString(startDatetime)).append("\n");
    sb.append("    agendaUrl: ").append(toIndentedString(agendaUrl)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    symbols: ").append(toIndentedString(symbols)).append("\n");
    sb.append("    registrationInfo: ").append(toIndentedString(registrationInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

