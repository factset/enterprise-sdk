/*
 * Events Contribution API
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsContribution.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsContribution.JSON;


/**
 * Information regarding event registrant
 */
@ApiModel(description = "Information regarding event registrant")
@JsonPropertyOrder({
  RegistrationInfoData.JSON_PROPERTY_CONTACT_EMAIL_ADDRESS,
  RegistrationInfoData.JSON_PROPERTY_CONTACT_NAME,
  RegistrationInfoData.JSON_PROPERTY_EXTRA_INFO
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class RegistrationInfoData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CONTACT_EMAIL_ADDRESS = "contactEmailAddress";
  private String contactEmailAddress;

  public static final String JSON_PROPERTY_CONTACT_NAME = "contactName";
  private String contactName;

  public static final String JSON_PROPERTY_EXTRA_INFO = "extraInfo";
  private String extraInfo;

  public RegistrationInfoData() { 
  }

  public RegistrationInfoData contactEmailAddress(String contactEmailAddress) {
    this.contactEmailAddress = contactEmailAddress;
    return this;
  }

   /**
   * Contact email of event registrant
   * @return contactEmailAddress
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "factset@factset.com", value = "Contact email of event registrant")
  @JsonProperty(JSON_PROPERTY_CONTACT_EMAIL_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContactEmailAddress() {
    return contactEmailAddress;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT_EMAIL_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactEmailAddress(String contactEmailAddress) {
    this.contactEmailAddress = contactEmailAddress;
  }


  public RegistrationInfoData contactName(String contactName) {
    this.contactName = contactName;
    return this;
  }

   /**
   * Contact name of event registrant
   * @return contactName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "FactSet", value = "Contact name of event registrant")
  @JsonProperty(JSON_PROPERTY_CONTACT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContactName() {
    return contactName;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactName(String contactName) {
    this.contactName = contactName;
  }


  public RegistrationInfoData extraInfo(String extraInfo) {
    this.extraInfo = extraInfo;
    return this;
  }

   /**
   * Extra information can be provided regarding event registration. Input must be in English and will be validated upon indication.
   * @return extraInfo
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "this field can be used to display extra information regarding registration", value = "Extra information can be provided regarding event registration. Input must be in English and will be validated upon indication.")
  @JsonProperty(JSON_PROPERTY_EXTRA_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExtraInfo() {
    return extraInfo;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraInfo(String extraInfo) {
    this.extraInfo = extraInfo;
  }


  /**
   * Return true if this RegistrationInfoData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistrationInfoData registrationInfoData = (RegistrationInfoData) o;
    return Objects.equals(this.contactEmailAddress, registrationInfoData.contactEmailAddress) &&
        Objects.equals(this.contactName, registrationInfoData.contactName) &&
        Objects.equals(this.extraInfo, registrationInfoData.extraInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactEmailAddress, contactName, extraInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistrationInfoData {\n");
    sb.append("    contactEmailAddress: ").append(toIndentedString(contactEmailAddress)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    extraInfo: ").append(toIndentedString(extraInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

