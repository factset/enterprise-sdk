/*
 * Events Contribution API
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.EventsContribution.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.EventsContribution.JSON;


/**
 * An identifier indicating which company the event belongs to
 */
@ApiModel(description = "An identifier indicating which company the event belongs to")
@JsonPropertyOrder({
  SymbolData.JSON_PROPERTY_TYPE,
  SymbolData.JSON_PROPERTY_VALUE,
  SymbolData.JSON_PROPERTY_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class SymbolData implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Type of symbol
   */
  public enum TypeEnum {
    ISIN("isin"),
    
    TICKER("ticker"),
    
    ENTITY("entity"),
    
    SEDOL("sedol");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public SymbolData() { 
  }

  @JsonCreator
  public SymbolData(
    @JsonProperty(value=JSON_PROPERTY_VALUE, required=true) String value, 
    @JsonProperty(value=JSON_PROPERTY_NAME, required=true) String name
  ) {
    this();
    this.value = value;
    this.name = name;
  }

  public SymbolData type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of symbol
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "ticker", value = "Type of symbol")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public SymbolData value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Value of symbol
   * @return value
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "FDS", required = true, value = "Value of symbol")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(String value) {
    this.value = value;
  }


  public SymbolData name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of symbol
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "FactSet System Research Inc.", required = true, value = "Name of symbol")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  /**
   * Return true if this SymbolData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SymbolData symbolData = (SymbolData) o;
    return Objects.equals(this.type, symbolData.type) &&
        Objects.equals(this.value, symbolData.value) &&
        Objects.equals(this.name, symbolData.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, value, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SymbolData {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

