/*
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IRNConfiguration.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IRNConfiguration.JSON;


/**
 * ReorderCustomSymbolTypeDto
 */
@JsonPropertyOrder({
  ReorderCustomSymbolTypeDto.JSON_PROPERTY_IDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ReorderCustomSymbolTypeDto implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_IDS = "ids";
  private JsonNullable<java.util.List<java.util.UUID>> ids = JsonNullable.<java.util.List<java.util.UUID>>undefined();

  public ReorderCustomSymbolTypeDto() { 
  }

  public ReorderCustomSymbolTypeDto ids(java.util.List<java.util.UUID> ids) {
    this.ids = JsonNullable.<java.util.List<java.util.UUID>>of(ids);
    return this;
  }

  public ReorderCustomSymbolTypeDto addIdsItem(java.util.UUID idsItem) {
    if (this.ids == null || !this.ids.isPresent()) {
      this.ids = JsonNullable.<java.util.List<java.util.UUID>>of(new java.util.ArrayList<>());
    }
    try {
      this.ids.get().add(idsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.List<java.util.UUID> getIds() {
        return ids.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<java.util.UUID>> getIds_JsonNullable() {
    return ids;
  }
  
  @JsonProperty(JSON_PROPERTY_IDS)
  public void setIds_JsonNullable(JsonNullable<java.util.List<java.util.UUID>> ids) {
    this.ids = ids;
  }

  public void setIds(java.util.List<java.util.UUID> ids) {
    this.ids = JsonNullable.<java.util.List<java.util.UUID>>of(ids);
  }


  /**
   * Return true if this ReorderCustomSymbolTypeDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReorderCustomSymbolTypeDto reorderCustomSymbolTypeDto = (ReorderCustomSymbolTypeDto) o;
    return equalsNullable(this.ids, reorderCustomSymbolTypeDto.ids);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(ids));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReorderCustomSymbolTypeDto {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

