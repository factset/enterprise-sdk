/*
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.IRNConfiguration.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.IRNConfiguration.JSON;


/**
 * SentimentSettingsDto
 */
@JsonPropertyOrder({
  SentimentSettingsDto.JSON_PROPERTY_IS_HIDDEN,
  SentimentSettingsDto.JSON_PROPERTY_IS_MANDATORY,
  SentimentSettingsDto.JSON_PROPERTY_USE_PREVIOUS,
  SentimentSettingsDto.JSON_PROPERTY_DEFAULT_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class SentimentSettingsDto implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_IS_HIDDEN = "isHidden";
  private Boolean isHidden;

  public static final String JSON_PROPERTY_IS_MANDATORY = "isMandatory";
  private Boolean isMandatory;

  public static final String JSON_PROPERTY_USE_PREVIOUS = "usePrevious";
  private Boolean usePrevious;

  public static final String JSON_PROPERTY_DEFAULT_ID = "defaultId";
  private JsonNullable<java.util.UUID> defaultId = JsonNullable.<java.util.UUID>undefined();

  public SentimentSettingsDto() { 
  }

  public SentimentSettingsDto isHidden(Boolean isHidden) {
    this.isHidden = isHidden;
    return this;
  }

   /**
   * Get isHidden
   * @return isHidden
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IS_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsHidden() {
    return isHidden;
  }


  @JsonProperty(JSON_PROPERTY_IS_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsHidden(Boolean isHidden) {
    this.isHidden = isHidden;
  }


  public SentimentSettingsDto isMandatory(Boolean isMandatory) {
    this.isMandatory = isMandatory;
    return this;
  }

   /**
   * Get isMandatory
   * @return isMandatory
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IS_MANDATORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsMandatory() {
    return isMandatory;
  }


  @JsonProperty(JSON_PROPERTY_IS_MANDATORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsMandatory(Boolean isMandatory) {
    this.isMandatory = isMandatory;
  }


  public SentimentSettingsDto usePrevious(Boolean usePrevious) {
    this.usePrevious = usePrevious;
    return this;
  }

   /**
   * Get usePrevious
   * @return usePrevious
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_USE_PREVIOUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUsePrevious() {
    return usePrevious;
  }


  @JsonProperty(JSON_PROPERTY_USE_PREVIOUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsePrevious(Boolean usePrevious) {
    this.usePrevious = usePrevious;
  }


  public SentimentSettingsDto defaultId(java.util.UUID defaultId) {
    this.defaultId = JsonNullable.<java.util.UUID>of(defaultId);
    return this;
  }

   /**
   * Get defaultId
   * @return defaultId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public java.util.UUID getDefaultId() {
        return defaultId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEFAULT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.UUID> getDefaultId_JsonNullable() {
    return defaultId;
  }
  
  @JsonProperty(JSON_PROPERTY_DEFAULT_ID)
  public void setDefaultId_JsonNullable(JsonNullable<java.util.UUID> defaultId) {
    this.defaultId = defaultId;
  }

  public void setDefaultId(java.util.UUID defaultId) {
    this.defaultId = JsonNullable.<java.util.UUID>of(defaultId);
  }


  /**
   * Return true if this SentimentSettingsDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentimentSettingsDto sentimentSettingsDto = (SentimentSettingsDto) o;
    return Objects.equals(this.isHidden, sentimentSettingsDto.isHidden) &&
        Objects.equals(this.isMandatory, sentimentSettingsDto.isMandatory) &&
        Objects.equals(this.usePrevious, sentimentSettingsDto.usePrevious) &&
        equalsNullable(this.defaultId, sentimentSettingsDto.defaultId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isHidden, isMandatory, usePrevious, hashCodeNullable(defaultId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentimentSettingsDto {\n");
    sb.append("    isHidden: ").append(toIndentedString(isHidden)).append("\n");
    sb.append("    isMandatory: ").append(toIndentedString(isMandatory)).append("\n");
    sb.append("    usePrevious: ").append(toIndentedString(usePrevious)).append("\n");
    sb.append("    defaultId: ").append(toIndentedString(defaultId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

