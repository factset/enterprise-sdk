openapi: 3.0.0
info:
  contact:
    email: api@factset.com
    name: FactSet Research Systems
    url: https://developer.factset.com/contact
  description: Documentation on all available end points in the VRSAPI
  license:
    name: Apache License, Version 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: VRS API documentation
  version: 1.0.0
externalDocs:
  description: API Documentation
  url: https://developer.factset.com/api-catalog/vermilion-api
servers:
- url: /
security:
- FactSetApiKey: []
- FactSetOAuth2: []
tags:
- description: Endpoints for Data Source.
  name: Datasource
- description: Endpoints for Entities.
  name: Entity
- description: Endpoints for Reports.
  name: Report
- description: Endpoints for Report instances.
  name: Report instance
- description: Endpoints for Workflow.
  name: Workflow
- description: Endpoints for Users and Groups.
  name: SCIM
- description: Endpoints to retrieve the version details.
  name: Version
paths:
  /v1/{tenant}/data-sources:
    get:
      description: List all datasources the user has permission to see
      operationId: getAllDataSources
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The column to sort on. Append - to sort in descending order.
          If parameter is not given, no sorting will be done
        examples:
          name:
            description: The name of the datasource to sort
            value:
            - name
          type:
            description: The type of the datasource to sort
            value:
            - type
          outputRecordSet:
            description: The output recordset of the datasource to sort
            value:
            - outputRecordSet
          code:
            description: The code of the datasource to sort
            value:
            - code
          releaseTag:
            description: The release tag of the datasource to sort
            value:
            - releaseTag
          lastUpdatedBy:
            description: The last updated by user of the datasource to sort
            value:
            - lastUpdatedBy
          lastUpdated:
            description: The last updated by date of the datasource to sort
            value:
            - lastUpdated
        explode: false
        in: query
        name: _sort
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: Non-negative maximum number of entries to return. Default is
          25
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip. Default is 0
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                meta:
                  pagination:
                    total: 10
                    isEstimatedTotal: false
                  sort:
                  - name
                data:
                - dataSourceId: 123456
                  name: Metadata DS
                  code: METADATADS
                  dsType: AUTOMATIC
                  entities:
                  - entityId: 234
                    name: Date
                    code: SYSTEM_DATE
                  outputRecordSet: Meta Data RS
                  releaseTag: Build123
                  defaultDataSourceName: Default DS
                  dataPreview: Component123
                  lastUpdatedBy: user123
                  lastUpdated: 1715665983563
              schema:
                $ref: '#/components/schemas/DataSourceList'
          description: Successful operation
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view datasources in VRS
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Lists all datasources
      tags:
      - Datasource
      x-accepts: application/json
  /v1/{tenant}/data-sources/{dataSourceCode}:
    get:
      description: Gets a datasource based on the code passed
      operationId: getDataSourceByCode
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The code of the datasource
        example: DSCODE
        explode: false
        in: path
        name: dataSourceCode
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  dataSourceId: 123456
                  name: Metadata DS
                  code: METADATADS
                  dsType: AUTOMATIC
                  entities:
                  - entityId: 234
                    name: Date
                    code: SYSTEM_DATE
                  outputRecordSet: Meta Data RS
                  releaseTag: Build123
                  defaultDataSourceName: Default DS
                  dataPreview: Component123
                  lastUpdatedBy: user123
                  lastUpdated: 1715665983563
              schema:
                $ref: '#/components/schemas/DataSourceData'
          description: Successful operation
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view datasources in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The datasource code passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied datasource code was not found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets a datasource
      tags:
      - Datasource
      x-accepts: application/json
  /v1/{tenant}/data-sources/{dataSourceCode}/data:
    get:
      description: Gets the data for the datasource. There are optional query parameters
        to filter the data
      operationId: getDataSourceData
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The code of the datasource
        example: DSCODE
        explode: false
        in: path
        name: dataSourceCode
        required: true
        schema:
          type: string
        style: simple
      - description: 'A series of query parameter used to filter the data for a datasource.
          This represents the entities for the datasource. E.g.: entityCodes=ACCOUNT~FUNDS'
        example: FUNDS
        explode: true
        in: query
        name: entityCodes
        required: false
        schema:
          type: string
        style: form
      - description: 'A series of query parameter used to filter the data for a datasource.
          This is the entity key value for an entity selection. E.g.: entityKeys=1~Test2'
        example: Test2
        explode: true
        in: query
        name: entityKeys
        required: false
        schema:
          type: string
        style: form
      - description: Non-negative maximum number of entries to return. Default is
          25
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip. Default is 0
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  fields:
                  - fieldType: TEXT
                    id: 4567
                    hide: "false"
                    name: Pet
                    order: 10
                  dstInstance:
                    dstInstanceId: 123456
                    dstInstanceType: AUTOMATIC
                    rows:
                    - rowId: 123
                      order: 1
                      fields:
                      - fieldId: 4567
                        fieldType: TEXT
                        fieldValue: Dog
              schema:
                $ref: '#/components/schemas/DataSourceDataInstance'
          description: Successful operation - returns data for the datasource
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The datasource code passed was invalid
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied datasource code was either missing or invalid,
            or the query parameters are invalid
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view datasources in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The datasource code passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied datasource code was not found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets the data for the datasource
      tags:
      - Datasource
      x-accepts: application/json
  /v1/{tenant}/entities/{entityCode}/values:
    get:
      description: Gets the entity values for the specified entity
      operationId: getEntityValuesByCode
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The code of the entity
        example: ENTCODE
        explode: false
        in: path
        name: entityCode
        required: true
        schema:
          type: string
        style: simple
      - description: The entity field to sort on. Can only be sorted on entity key,
          description or secondary key fields. Append "-" to sort in descending order.
          If no parameter given, it will be sorted by key field in ascending order
          by default
        examples:
          entity key field:
            description: The name of the entity key field
            value:
            - entity key field
          entity description field:
            description: The name of the entity description field
            value:
            - entity description field
          entity secondary key field:
            description: The name of the entity secondary key field
            value:
            - entity secondary key field
        explode: false
        in: query
        name: _sort
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: Non-negative maximum number of entries to return. Default is
          25
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip. Default is 0
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: 'Whether to show all field values for each entity row. Value
          should either be 1 or 0. Default is 0 (false). Otherwise, show all field
          values in a JSON array named "fieldsWithValues", with each array value being
          a string in the format of "**<FIELD_NAME> : <FIELD_VALUE>**". Both key and
          description field values will be included in this JSON array too.'
        example: 1
        explode: true
        in: query
        name: showAll
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                meta:
                  pagination:
                    total: 10
                    isEstimatedTotal: false
                  sort:
                  - entityKey
                data:
                - entityRowId: 27706
                  keyValue: en-gb
                  descriptionValue: English (GB)
                  fieldsWithValues:
                  - 'language_code : en-gb'
                  - 'language_desc : English (GB)'
              schema:
                $ref: '#/components/schemas/EntityFieldValueDTO'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The entity code passed was invalid
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied entity code was either missing or invalid, or
            the entity was not found
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view datasources in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The entity code passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied entity code was not found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets the entity values
      tags:
      - Entity
      x-accepts: application/json
  /v1/{tenant}/reports:
    get:
      description: Gets all report definitions the user has permissions for
      operationId: getAllReportDefinitions
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The column to sort on. Can add - to sort
        examples:
          name:
            description: The name of the report to sort
            value:
            - name
          type:
            description: The template owner of the report to sort
            value:
            - templateOwner
          code:
            description: The code of the report to sort
            value:
            - code
          releaseTag:
            description: The release tag of the report to sort
            value:
            - releaseTag
          lastUpdatedBy:
            description: The last updated by user of the report to sort
            value:
            - lastUpdatedBy
          lastModifiedBy:
            description: The last updated by date of the report to sort
            value:
            - lastModifiedBy
        explode: false
        in: query
        name: _sort
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: Non-negative maximum number of entries to return
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                meta:
                  pagination:
                    total: 10
                    isEstimatedTotal: false
                data:
                - name: Test Report
                  code: TEST_REPORT
                  releaseTag: rel1.1
                  entities:
                  - entityId: 234
                    name: Date
                    code: SYSTEM_DATE
              schema:
                $ref: '#/components/schemas/ReportDefinitionList'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The report definition code passed was invalid
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied report definition code was either missing or invalid,
            or the report definition was not found
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view reports in VRS
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets all report definitions
      tags:
      - Report
      x-accepts: application/json
  /v1/{tenant}/reports/{reportDefinitionCode}:
    get:
      description: Gets a report defintion based on the code specified
      operationId: getReportDefinitionByCode
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The code of the report definition
        example: RPCODE
        explode: false
        in: path
        name: reportDefinitionCode
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  name: Test Report
                  code: TEST_REPORT
                  releaseTag: rel1.1
                  entities:
                  - entityId: 234
                    name: Date
                    code: SYSTEM_DATE
              schema:
                $ref: '#/components/schemas/ReportDefinitionData'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The report definition code passed was invalid
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied report definition code was either missing or invalid,
            or the report definition was not found
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view reports in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The report definition code passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied report definition code was was not found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets a report definition
      tags:
      - Report
      x-accepts: application/json
  /v1/report-instances/generate:
    post:
      description: Generates a report using the specified ID and the JSON in the request
        body
      operationId: startReportGeneration
      requestBody:
        content:
          application/json:
            example:
              vrs:
                "1":
                  report: MONTHLY_REPORT
                  tenancy: CLIENT_REPORTING
                  outputFormat: PDF
                  sectionFilter: Section One
                  priority: "2"
                  startDate: 15 December 2023 00:00:00
                  entitySelection:
                    ACCOUNT:
                      key: Account name
                    PORTFOLIO:
                      key: Test fund
                    DATE:
                      key: 01 January 2020 00:00:00
            schema:
              $ref: '#/components/schemas/ReportGenerationRequestBody'
        required: true
      responses:
        "202":
          content:
            application/json:
              example:
                data:
                  reportInstanceId: 123456
              schema:
                $ref: '#/components/schemas/ReportInstanceDataResponse'
          description: Report generation request succeeded and report generation is
            in progress
          headers:
            Location:
              description: End point location to retrieve the latest status of the
                report generation. This is v1/{tenant}/report-instances/{reportInstanceId}
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The report definition code passed was invalid
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied report definition code was either missing or invalid,
            or the report definition was not found
          headers:
            Location:
              description: End point location to retrieve the latest status of the
                report generation. This is v1/{tenant}/report-instances/{reportInstanceId}
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
          headers:
            Location:
              description: End point location to retrieve the latest status of the
                report generation. This is v1/{tenant}/report-instances/{reportInstanceId}
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view reports in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The report definition code passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The report code could not be found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Generates a report
      tags:
      - Report instance
      x-contentType: application/json
      x-accepts: application/json
  /v1/{tenant}/report-instances/{reportInstanceId}:
    delete:
      description: Sends a request to cancel a report generation based on the report
        instance id passed
      operationId: cancelReportGeneration
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the report instance
        example: "123456"
        explode: false
        in: path
        name: reportInstanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Successful operation - no response
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The ID passed is not a numerical value
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied report instance id was either missing or invalid
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view reports in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The report definition code passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied report instance ID could not be found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Cancels a report generation
      tags:
      - Report instance
      x-accepts: application/json
    get:
      description: Gets a report instance object based on the ID passed
      operationId: getReportInstanceById
      parameters:
      - description: The ID of the report instance
        example: "123456"
        explode: false
        in: path
        name: reportInstanceId
        required: true
        schema:
          type: string
        style: simple
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  reportInstanceId: 123456
                  reportDefinitionId: 12021
                  reportDefinitionName: Sample Report Name
                  reportName: rep_929_67715_1709130994429.pdf
                  userFriendlyReportName: Sample Report.pdf
                  extension: pdf
                  reportRevision:
                    reportStatus: COMPLETED
                    startDate: "1709130994000"
                    finishDate: "1709113002873"
                    signOffStatus: PENDING
                    signOffNotes: ""
                    reportReasonCd: ""
                    description: Sample report
                    languageCode: en-gb
                    outputFormat: pdf
                    percentageComplete: 100
                  name: Sample Report.pdf
              schema:
                $ref: '#/components/schemas/ReportInstanceData'
          description: Successful operation
          headers:
            Location:
              description: A callback URL to the report file on VRS ready to download
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The ID passed is not a numerical value
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied report instance id was either missing or invalid,
            or the report instance was not found
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view reports in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The report definition code passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied report instance ID could not be found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets a report instance based on the ID
      tags:
      - Report instance
      x-accepts: application/json
  /v1/{tenant}/report-instances:
    get:
      description: Gets a list of report instances. This can be filtered down further
        by including query parameters in the URL. For example, a report definition
        id can be added so the only report instances returned are the ones with a
        matching id
      operationId: getAllReportInstances
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: Acts as a filter for the retrieval process. Filters the report
          instances that match the report definition code
        example: RPCODE
        explode: true
        in: query
        name: reportDefinitionCode
        required: false
        schema:
          type: string
        style: form
      - description: 'A series of query parameters used to filter the report instances
          by entity code. E.g: entityCode=DATE&entityCode=SYSTEM_LANG'
        example: SYSTEM_LANG
        explode: true
        in: query
        name: entityCodes
        required: false
        schema:
          type: string
        style: form
      - description: 'A series of query parameters used to filter the report instances
          by entity keys. E.g: entityKey=en-gb'
        example: en-gb
        explode: true
        in: query
        name: entityKeys
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the report
          instances that match the section filter
        example: testFilter
        explode: true
        in: query
        name: sectionFilter
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the report
          instances that match the output format
        example: pdf
        explode: true
        in: query
        name: outputFormat
        required: false
        schema:
          type: string
        style: form
      - description: The column to sort on. Append - to sort in descending order.
          If parameter is not given, sorting will be based on the report instance
          id in descending order
        examples:
          reportInstanceId:
            description: The id of report instance to sort
            value:
            - reportInstanceId
          reportStatus:
            description: The status of the report to sort
            value:
            - reportStatus
          startDate:
            description: The start date of the report to sort
            value:
            - startDate
          finishDate:
            description: The finish date of the report to sort
            value:
            - finishDate
          signOffStatus:
            description: The sign off status of the report to sort
            value:
            - signOffStatus
          outputFormat:
            description: The output format of report to sort
            value:
            - outputFormat
        explode: false
        in: query
        name: _sort
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: Non-negative maximum number of entries to return
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                meta:
                  pagination:
                    total: 10
                    isEstimatedTotal: false
                data:
                - reportInstanceId: 123456
                  reportDefinitionId: 12021
                  reportDefinitionName: Sample Report Name
                  reportName: rep_929_67715_1709130994429.pdf
                  userFriendlyReportName: Sample Report.pdf
                  extension: pdf
                  reportRevision:
                    reportStatus: COMPLETED
                    startDate: "1709130994000"
                    finishDate: "1709113002873"
                    signOffStatus: PENDING
                    signOffNotes: ""
                    reportReasonCd: ""
                    description: Sample report
                    languageCode: en-gb
                    outputFormat: pdf
                    percentageComplete: 100
                  name: Sample Report.pdf
              schema:
                $ref: '#/components/schemas/ReportInstanceList'
          description: Successful operation
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view reports in VRS
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets a list of report instances
      tags:
      - Report instance
      x-accepts: application/json
  /v1/{tenant}/report-instances/{reportInstanceId}/results/{reportFileName}:
    get:
      description: |-
        Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation.
        | outputFormat | Content-Type |
        | ---------------- | ------------|
        |WORD     | application/msword |
        |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document|
        |EXCEL    |   application/vnd.ms-excel|
        |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|
        |PPT      |   application/vnd.ms-powerpoint|
        |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation|
        |PDF      |   application/pdf|
        |CSV      |   text/csv|
        |XML      |   application/xml|
        |VXML     |   application/xml|
        |HTML     |   text/html|
        |PS       |   application/postscript|
      operationId: downloadReportFile
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: Used to validate that report file name belongs to the report
          instance passed
        example: "123456"
        explode: false
        in: path
        name: reportInstanceId
        required: true
        schema:
          type: string
        style: simple
      - description: 'The report file name that has to be retrieved. report file name.
          E.g: xyz.pdf'
        example: xyz.pdf
        explode: false
        in: path
        name: reportFileName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/pdf:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            application/vnd.openxmlformats-officedocument.presentationml.presentation:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            application/vnd.ms-powerpoint:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            application/vnd.ms-excel:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            application/msword:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            application/postscript:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            text/csv:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            text/html:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
            application/zip:
              schema:
                $ref: '#/components/schemas/ReportDataResponse'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The ID passed is not a numerical value
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied report instance id was either missing or invalid
            or the report instance was not found. The supplied report file name was
            either invalid or not found
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view the generated file in VRS
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header.
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets the generated file
      tags:
      - Report instance
      x-accepts: application/json
  /v1/{tenant}/report-instances/{reportInstanceId}/logs:
    get:
      description: Gets a list of logs for the generated report instance. Allows the
        user to sort on log message, type and date. Also allows for retrieving of
        just the errors & warnings'
      operationId: getReportGenerationLogs
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: Used to validate that report file name belongs to the report
          instance passed
        example: "123456"
        explode: false
        in: path
        name: reportInstanceId
        required: true
        schema:
          type: string
        style: simple
      - description: 'If the parameter is set to true the endpoint should return just
          errors and warnings E.g: errorsOnly=true'
        example: "true"
        explode: true
        in: query
        name: errorsOnly
        required: false
        schema:
          type: string
        style: form
      - description: The column to sort on. Can add - to sort
        examples:
          sequenceNumber:
            description: The sequence number of the log entry
            value:
            - sequenceNumber
          message:
            description: The log message to sort
            value:
            - message
          type:
            description: The type of the log to sort
            value:
            - type
          updatedDate:
            description: The updated date of the log to sort
            value:
            - updatdeDate
        explode: false
        in: query
        name: _sort
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: Non-negative maximum number of entries to return
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                - sequenceNumber: 9464295
                  message: Get Data Completed
                  type: LOG
                  updateDate: "1709176498527"
              schema:
                $ref: '#/components/schemas/ReportInstanceLogList'
          description: Successful operation
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view reports in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The report instance ID passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied report instance ID could not be found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: |-
                    Unsupported Accept header. Header needs to be set to
                        application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets a list of logs for the report instance generation
      tags:
      - Report instance
      x-accepts: application/json
  /v1/{tenant}/schedule-definitions:
    get:
      description: Retrieves all schedule definitions the user has permissions for.
        User has sort and filter parameters available to use.
      operationId: getScheduleDefinitions
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: Acts as a filter for the retrieval process. Filters the schedule
          definitions that match the given schedule type. Accepts multiple values
          separated by a comma, e.g. ?scheduleType=REPEATING,MANUAL
        example: MANUAL
        explode: true
        in: query
        name: scheduleType
        required: false
        schema:
          enum:
          - MANUAL
          - REPEATING
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the schedule
          definitions that match the given schedule report date.  Accepts multiple
          values separated by a comma, e.g. ?reportDate=LAST_DAY_OF_PREV_MONTH,CREATION_DATE
        example: LAST_BUSINESS_DAY_OF_PREV_MONTH
        explode: true
        in: query
        name: reportDate
        required: false
        schema:
          enum:
          - LAST_DAY_OF_PREV_MONTH
          - LAST_BUSINESS_DAY_OF_PREV_MONTH
          - CREATION_DATE
          - DAY_BEFORE_CREATION_DATE
          - BUSINESS_DAY_BEFORE_CREATION_DATE
          - LAST_DAY_OF_MONTH_SCHEDULE_CREATED
          - LAST_BUSINESS_DAY_OF_MONTH_SCHEDULE_CREATED
          - LAST_BUSINESS_DAY_OF_PREVIOUS_WEEK_SCHEDULE_CREATED
          - LAST_BUSINESS_DAY_OF_WEEK_SCHEDULE_CREATED
          - TWO_BUSINESS_DAYS_BEFORE_SCHEDULE_CREATED
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the schedule
          definitions where the provided parameter value matches or is a substring
          of the last updated by value of the schedule definitions
        example: John
        explode: true
        in: query
        name: lastUpdatedBy
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the schedule
          definitions based on their last updated date, the input date must be of
          the date format (d MMMMM yyyy 00:00:00).
        example: 25 March 2024 00:00:00
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the schedule
          definitions based on their last updated date, the input date must be of
          the date format (d MMMMM yyyy 00:00:00).
        example: 25 March 2024 00:00:00
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          type: string
        style: form
      - description: The column to sort on. Can add '-' to the start of the parameter
          value to sort in descending order.
        examples:
          name:
            description: The name of the schedule definition
            value:
            - name
          scheduleGroup:
            description: The schedule group of the schedule definition
            value:
            - scheduleGroup
          scheduleType:
            description: The schedule type
            value:
            - scheduleType
          owner:
            description: The owner role name of the schedule definition
            value:
            - owner
          code:
            description: The code of the schedule definition
            value:
            - code
          businessCalendar:
            description: The country of the business calender the schedule definition
              follows
            value:
            - businessCalendar
          reportDate:
            description: The reporting date of the schedule
            value:
            - reportDate
          lastUpdated:
            description: The last updated date of the schedule definition
            value:
            - lastUpdated
        explode: false
        in: query
        name: _sort
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: Non-negative maximum number of entries to return
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                meta:
                  pagination:
                    total: 10
                    isEstimatedTotal: false
                  sort:
                  - name
                data:
                - scheduleDefinitionId: 42
                  lastUpdatedBy: John
                  notes: ""
                  name: Flash Report to Portal
                  code: FLASH_REPORT
                  scheduleGroup: Flash Report
                  businessCalendar: United States
                  deleteScheduleAfterDays: 3
                  scheduleType: MANUAL
                  reportDate: TWO_BUSINESS_DAYS_BEFORE_SCHEDULE_CREATED
                  numberOfObligations: 1
                  ownerRole:
                    code: ADMIN
                    name: Admin
                    roleId: 21
                  entities:
                  - entityId: 97
                    name: Date
                    code: SYSTEM_DATE
                  numberOfPackages: 0
                  lastUpdated: "1713435311043"
              schema:
                $ref: '#/components/schemas/ScheduleDefinitionsList'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The tenancy provided is invalid or not active
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Bad Request. Required values not provided in request parameter
            or invalid values given (e.g. tenant, scheduleType)
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden. No permissions to view schedule definitions in VRS
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: |-
                    Unsupported Accept header. Header needs to be set to
                        application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Retrieves a list of all schedule definitions
      tags:
      - Workflow
      x-accepts: application/json
  /v1/{tenant}/schedules/{scheduleId}:
    get:
      description: Gets a schedule Object based on the schedule ID passed.
      operationId: getScheduleById
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The Id of the schedule
        example: "16304"
        explode: false
        in: path
        name: scheduleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  scheduleId: 16304
                  lastUpdatedBy: test_user
                  notes: Automatically created at 2017-05-31 10:17:05 Europe/London
                  name: Test schddefn _1234 (2017.05.31 10:17)
                  definitionName: Test schddefn _1234
                  startDate: "1586870729577"
                  finishDate: "1694588295897"
                  scheduleGroup: test_group
                  businessCalendar: United Kingdom
                  reportDate: "1586802600577"
                  lastUpdated: "1694608095920"
                  noOfTasks: 12
                  owner: Admin
                  status: RUNNING
                  hasTaskGenIssues: false
              schema:
                $ref: '#/components/schemas/ScheduleResponseData'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The tenancy provided is invalid or not active
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Bad Request. Required values not provided in request parameter
            or invalid values given (e.g. tenant)
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item. Invalid role permission
                    for schedule id 34567
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden. No permissions to view schedule in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The Schedule id [351865] passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied schedule ID was not found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets a schedule based on the schedule ID
      tags:
      - Workflow
      x-accepts: application/json
  /v1/{tenant}/schedules:
    get:
      description: Retrieves all schedules the user has permissions for. User has
        sort and filter parameters available to use.
      operationId: getSchedules
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: Acts as a filter for the retrieval process. Filters the schedules
          that match the given status. Accepts multiple values separated by a comma,
          e.g. ?status=INITIALISED,RUNNING
        example: RUNNING
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - INITIALISED
          - RUNNING
          - CANCELLED
          - SUSPENDED
          - FINISHED
          - CLOSED
          - GENERATING_TASKS
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the schedules
          based on their last updated date, the input date must be of the date format
          (d MMMMM yyyy 00:00:00).
        example: 14 June 2024 00:00:00
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the schedules
          based on their last updated date, the input date must be of the date format
          (d MMMMM yyyy 00:00:00).
        example: 14 June 2024 00:00:00
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          type: string
        style: form
      - description: The column to sort on. Can add '-' to the start of the parameter
          value to sort in descending order.
        examples:
          scheduleId:
            description: The id of the schedule
            value:
            - scheduleId
          name:
            description: The name of the schedule
            value:
            - name
          scheduleGroup:
            description: The schedule group of the schedule
            value:
            - scheduleGroup
          status:
            description: The status of the schedule
            value:
            - status
          lastUpdated:
            description: The last updated date/time of the schedule
            value:
            - lastUpdated
          owner:
            description: The owner of the schedule
            value:
            - owner
          noOfTasks:
            description: The no of tasks in the schedule
            value:
            - noOfTasks
          businessCalendar:
            description: The business calendar of the schedule
            value:
            - businessCalendar
        explode: false
        in: query
        name: _sort
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: Non-negative maximum number of entries to return
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                meta:
                  pagination:
                    total: 10
                    isEstimatedTotal: false
                  sort:
                  - name
                data:
                - scheduleId: 16304
                  lastUpdatedBy: test_user
                  notes: Automatically created at 2017-05-31 10:17:05 Europe/London
                  name: Test schddefn _1234 (2017.05.31 10:17)
                  definitionName: Test schddefn _1234
                  startDate: "1586870729577"
                  finishDate: "1694588295897"
                  scheduleGroup: test_group
                  businessCalendar: United Kingdom
                  reportDate: "1586802600577"
                  lastUpdated: "1694608095920"
                  noOfTasks: 12
                  owner: Admin
                  status: RUNNING
              schema:
                $ref: '#/components/schemas/SchedulesList'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The tenancy provided is invalid or not active
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Bad Request. Required values not provided in request parameter
            or invalid values given (e.g. tenant, status)
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden. No permissions to view schedule definitions in VRS
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: |-
                    Unsupported Accept header. Header needs to be set to
                        application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Retrieves a list of all schedules
      tags:
      - Workflow
      x-accepts: application/json
  /v1/{tenant}/schedules/{scheduleDefinitionCode}:
    post:
      description: Creates schedule for the specified Schedule Definition code and
        sets to running based on the param in the JSON in the request body
      operationId: generateSchedule
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The schedule definition code for which to generate the schedule
        example: TEST_SCHEDULE_DEF
        explode: false
        in: path
        name: scheduleDefinitionCode
        required: true
        schema:
          type: string
        style: simple
      - description: This parameter is used to set the generated schedule's status
          to Running.If parameter is set to true, the generated schedule will be set
          to Running. If no value is provided, the schedule will remain in Initialised
          status.
        example: true
        explode: true
        in: query
        name: setToRunning
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "202":
          content:
            application/json:
              example:
                data:
                  scheduleInstanceId: 16304
                  status: RUNNING
              schema:
                $ref: '#/components/schemas/GenerateScheduleResponse'
          description: Schedule generation request succeeded and tasks have been generated
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The schedule definition code passed was invalid
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied schedule definition code missing or invalid
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to create schedule in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The schedule definition code passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The schedule definition code could not be found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Creates schedule for the specified schedule definition
      tags:
      - Workflow
      x-accepts: application/json
  /v1/{tenant}/schedules/{scheduleId}/{status}:
    patch:
      description: Updated the schedule status for the specified schedule id based
        on the given status
      operationId: updateScheduleStatus
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The schedule id for which to update the status
        example: "123456"
        explode: false
        in: path
        name: scheduleId
        required: true
        schema:
          type: string
        style: simple
      - description: The schedule status that needs to be updated only if the transition
          is valid
        example: RUNNING
        explode: false
        in: path
        name: status
        required: true
        schema:
          enum:
          - INITIALISED
          - RUNNING
          - CANCELLED
          - SUSPENDED
          - FINISHED
          - CLOSED
          - GENERATING_TASKS
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  scheduleId: 16304
                  lastUpdatedBy: test_user
                  notes: Automatically created at 2017-05-31 10:17:05 Europe/London
                  name: Test schddefn _1234 (2017.05.31 10:17)
                  definitionName: Test schddefn _1234
                  startDate: "1586870729577"
                  finishDate: "1694588295897"
                  scheduleGroup: test_group
                  businessCalendar: United Kingdom
                  reportDate: "1586802600577"
                  lastUpdated: "1694608095920"
                  noOfTasks: 12
                  owner: Admin
                  status: RUNNING
              schema:
                $ref: '#/components/schemas/ScheduleStatusUpdateResponse'
          description: Update schedule request succeeded and status has been changed
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: Schedule status is missing or invalid
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Schedule status in the request is missing or invalid
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to update this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to update schedule in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: 'JPQL query: No records returned'
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The schedule id could not be found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Update schedule status for specified schedule
      tags:
      - Workflow
      x-accepts: application/json
  /v1/{tenant}/schedules/{scheduleId}/generate-tasks:
    post:
      description: Generates the schedule tasks for the specified schedule id
      operationId: generateScheduleTasks
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The schedule id for which to generate the tasks
        example: "123456"
        explode: false
        in: path
        name: scheduleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              example:
                data:
                  scheduleId: 16304
                  lastUpdatedBy: test_user
                  notes: Automatically created at 2017-05-31 10:17:05 Europe/London
                  name: Test schddefn _1234 (2017.05.31 10:17)
                  definitionName: Test schddefn _1234
                  startDate: "1586870729577"
                  finishDate: "1694588295897"
                  scheduleGroup: test_group
                  businessCalendar: United Kingdom
                  reportDate: "1586802600577"
                  lastUpdated: "1694608095920"
                  noOfTasks: 12
                  owner: Admin
                  status: Running
              schema:
                $ref: '#/components/schemas/ScheduleStatusUpdateResponse'
          description: Task generation request succeeded and task generation is in
            progress
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: Could not generate the tasks because the schedule is not
                    in an initialized state
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Tasks could not be generated because the schedule is not in
            an initialized state
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item. User has no function permissions
                    for Workflow Schedules
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to generate tasks for the schedule
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The schedule id [3581196] passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The schedule id could not be found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server might have encountered an unhandled error due to
            which request was not fulfilled.
      summary: Generates the tasks for the initialised schedule
      tags:
      - Workflow
      x-accepts: application/json
  /v1/{tenant}/schedules/{scheduleId}/logs:
    get:
      description: Gets the generation logs for a specific schedule based on the Schedule
        ID. Allows the user to sort and filter logs.
      operationId: getScheduleGenerationLogs
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The scheduleId for which the logs are requested
        example: "123456"
        explode: false
        in: path
        name: scheduleId
        required: true
        schema:
          type: string
        style: simple
      - description: Acts as a filter for the retrieval process. Filters the log instances
          that match the input type
        example: INFO
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - INFO
          - WARN
          - ERROR
          - DEBUG
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the log instances
          that match the input message
        example: package definition
        explode: true
        in: query
        name: message
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the log instances
          that match the input logset
        example: "1"
        explode: true
        in: query
        name: logSet
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the log instances
          based on their last updated date, the input date must be of the date format
          (d MMMMM yyyy 00:00:00).
        example: 25 March 2024 00:00:00
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the log instances
          based on their last updated date, the input date must be of the date format
          (d MMMMM yyyy 00:00:00).
        example: 25 March 2024 00:00:00
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          type: string
        style: form
      - description: The column to sort on. Can add - to sort
        examples:
          sequenceNumber:
            description: The sequence number of the log entry
            value:
            - sequenceNumber
          type:
            description: The type of the log to sort
            value:
            - type
          lastUpdated:
            description: The date of the log to sort
            value:
            - lastUpdated
        explode: false
        in: query
        name: _sort
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: Non-negative maximum number of entries to return
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                meta:
                  pagination:
                    total: 10
                    isEstimatedTotal: false
                  sort:
                  - name
                data:
                - sequenceNumber: 10
                  message: Creating tasks
                  type: INFO
                  lastUpdated: "1709176498527"
                  logSet: 1
              schema:
                $ref: '#/components/schemas/ScheduleGenerationLogList'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The tenancy provided is invalid or not active
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Bad Request. Required values not provided in request parameter
            or invalid values given (e.g. tenant, type)
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view schedule logs in VRS
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: |-
                    Unsupported Accept header. Header needs to be set to
                        application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets the generation logs for a specific schedule
      tags:
      - Workflow
      x-accepts: application/json
  /v1/{tenant}/tasks:
    get:
      description: Retrieves all tasks the user has permissions for. User has sort
        and filter parameters available to use.
      operationId: getTasks
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: Acts as a filter for the retrieval process. Filters the tasks
          that match the given task type. Accepts multiple values separated by a comma,
          e.g. ?taskType=SIGNOFF_DATA,PACKAGE_REPORTS
        example: PACKAGE_REPORTS
        explode: true
        in: query
        name: taskType
        required: false
        schema:
          enum:
          - WAIT_FOR_DATA
          - CUSTOM_DATA
          - CREATE_MANUAL_DATA
          - CREATE_FILTERED_DATA
          - GET_DATA
          - GENERATE_PREVIEW
          - SIGNOFF_DATA
          - CUSTOM_GENERATE
          - GENERATE_REPORT
          - SIGNOFF_REPORT
          - CUSTOM_DELIVERY
          - EMAIL_REPORT
          - POST_REPORT
          - FTP_REPORT
          - CUSTOM_OTHER
          - COPY_REPORT_FILE
          - PACKAGE_REPORTS
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the tasks
          that match the given status. Accepts multiple values separated by a comma,
          e.g. ?status=PENDING,AWAITING_CORRECTION
        example: PENDING
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - COMPLETED
          - IN_PROGRESS
          - AWAITING_CORRECTION
          - PENDING
          - SKIPPED
          - FAILED_REJECTED
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the tasks
          that match the input role assigned to the task
        example: Client Reporting Manager
        explode: true
        in: query
        name: role
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the tasks
          that match the input user name assigned to the task
        example: John
        explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the immediate
          tasks if the parameter value is set to true
        example: true
        explode: true
        in: query
        name: immediateTasksOnly
        required: false
        schema:
          type: boolean
        style: form
      - description: Acts as a filter for the retrieval process. Filters the schedule
          tasks for the Schedule Id passed in the parameter value
        example: 37325
        explode: true
        in: query
        name: scheduleId
        required: false
        schema:
          type: integer
        style: form
      - description: The column to sort on. Can add '-' to the start of the parameter
          value to sort in descending order.
        examples:
          taskId:
            description: The id of the task
            value:
            - taskId
          scheduleName:
            description: The name of the schedule for the task
            value:
            - scheduleName
          taskType:
            description: The type of the task
            value:
            - taskType
          lastUpdatedBy:
            description: The last updated user of the task
            value:
            - lastUpdatedBy
          escalationLevel:
            description: The escalation level of the task
            value:
            - escalationLevel
          status:
            description: The status of the task
            value:
            - status
          description:
            description: The description of the task
            value:
            - description
          role:
            description: The role assigned to the task
            value:
            - role
          user:
            description: The user assigned to the task
            value:
            - user
          expectedStartDate:
            description: The expected start date date/time of the task
            value:
            - expectedStartDate
          expectedEndDate:
            description: The expected end date date/time of the task
            value:
            - expectedEndDate
          actualStartDate:
            description: The actual start date date/time of the task
            value:
            - actualStartDate
          lastUpdated:
            description: The last updated date/time of the task
            value:
            - lastUpdated
          order:
            description: The order of the task
            value:
            - order
        explode: false
        in: query
        name: _sort
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: Non-negative maximum number of entries to return
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                meta:
                  pagination:
                    total: 10
                    isEstimatedTotal: false
                  sort:
                  - taskId
                data:
                - taskId: 135621
                  lastUpdatedBy: test user
                  description: Sign Off 9491 ds(Bat/Germany/U.S. Dollars)
                  taskType: SIGNOFF_DATA
                  status: PENDING
                  expectedStartDate: 1725129000000
                  expectedEndDate: 1725129000000
                  actualStartDate: null
                  notes: ""
                  escalationLevel: 4
                  immediate: true
                  reason: null
                  outputFormat: null
                  order: 7
                  scheduleName: mytaskonly (2024.09.30 15:28)
                  mandatoryTaskApproveNotes: false
                  lastUpdated: 1727710396000
                  role: Admin
                  action: true
                  user: test user
              schema:
                $ref: '#/components/schemas/TaskList'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The tenancy provided is invalid or not active
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Bad Request. Required values not provided in request parameter
            or invalid values given (e.g. tenant, status)
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden. No permissions to view tasks in VRS
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notFound
                  title: The schedule Id passed was not found
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The supplied schedule Id was not found
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Retrieves a list of all tasks
      tags:
      - Workflow
      x-accepts: application/json
  /v1/{tenant}/tasks/{taskId}:
    get:
      description: Gets a task Object based on the task ID passed.
      operationId: getTask
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The Id of the task
        example: "135709"
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  lastUpdatedBy: testUser
                  description: Package Reports task
                  taskType: PACKAGE_REPORTS
                  status: PENDING
                  expectedStartDate: 1730399400000
                  expectedEndDate: 1730399400000
                  actualStartDate: null
                  notes: sent for review
                  immediate: false
                  reason: null
                  outputFormat: null
                  scheduleName: Dummy Schedule
                  mandatoryTaskApproveNotes: false
                  lastUpdated: 1730399400000
                  role: Admin
                  action: false
                  user: test user
              schema:
                $ref: '#/components/schemas/TaskDetailsObject'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The tenancy provided is invalid or not active
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Bad Request. Required values not provided in request parameter
            or invalid values given (e.g. tenant)
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden. No permissions to view tasks in VRS
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets a task based on the task ID
      tags:
      - Workflow
      x-accepts: application/json
    patch:
      description: Updates the task details for the specified task.
      operationId: updateTaskDetails
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for task
        example: "123456"
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              data:
                status: COMPLETED
                expectedStartDate: 25 December 2024 00:00:00
                expectedEndDate: 25 December 2024 01:00:00
                actualStartDate: 25 December 2024 00:00:00
                notes: string
                role: Admin
                user: user1
                action: Reject
                reason: Reason for rejection
            schema:
              $ref: '#/components/schemas/TaskPatchRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  task:
                    lastUpdatedBy: testUser
                    description: Package Reports task
                    taskType: PACKAGE_REPORTS
                    status: PENDING
                    expectedStartDate: 1730399400000
                    expectedEndDate: 1730399400000
                    actualStartDate: null
                    notes: sent for review
                    immediate: false
                    reason: null
                    outputFormat: null
                    scheduleName: Dummy Schedule
                    mandatoryTaskApproveNotes: false
                    lastUpdated: 1730399400000
                    role: Admin
                    action: false
                    user: test user
                  messages:
                  - null
              schema:
                $ref: '#/components/schemas/TaskPatchResponseObject'
          description: Successful operation
        "206":
          content:
            application/json:
              example:
                data:
                  task:
                    lastUpdatedBy: testUser
                    description: Package Reports task
                    taskType: PACKAGE_REPORTS
                    status: PENDING
                    expectedStartDate: 1730399400000
                    expectedEndDate: 1730399400000
                    actualStartDate: null
                    notes: sent for review
                    immediate: false
                    reason: null
                    outputFormat: null
                    scheduleName: Dummy Schedule
                    mandatoryTaskApproveNotes: false
                    lastUpdated: 1730399400000
                    role: Admin
                    action: false
                    user: test user
                  messages:
                  - Task status cannot be updated as the schedule is Cancelled/Closed/Finished
              schema:
                $ref: '#/components/schemas/TaskPatchResponseObject'
          description: Request was partially successful
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The tenancy provided is invalid or not active
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Bad Request. Required values not provided in request parameter
            or invalid values given (e.g. tenant)
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden. No permissions to view the task.
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Updates the task details for the specified task.
      tags:
      - Workflow
      x-contentType: application/json
      x-accepts: application/json
  /v1/{tenant}/tasks/{taskId}/history:
    get:
      description: Gets the task history for a specific task based on the Task ID.
        Allows the user to sort and filter the task history entries.
      operationId: getTaskHistory
      parameters:
      - description: The code of the tenancy
        example: TENANT
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: The taskId for which the history of the specific task is requested
        example: "123456"
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - description: Acts as a filter for the retrieval process. Filters the task
          history entries that match the given action type
        example: Status Changed
        explode: true
        in: query
        name: actionType
        required: false
        schema:
          enum:
          - Status Changed
          - Notes Changed
          - Reason code Changed
          - Current Role Changed
          - Current User Changed
          - Expected Start Changed
          - Expected End Changed
          - Actual Start Changed
          - Task Dependency Added
          - Task Dependency Removed
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the task
          history entries that match the given reason code
        example: Missing Data
        explode: true
        in: query
        name: reasonCode
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the task
          history events based on their last updated date, the input date must be
          of the date format (d MMMMM yyyy 00:00:00).
        example: 25 March 2024 00:00:00
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          type: string
        style: form
      - description: Acts as a filter for the retrieval process. Filters the task
          history events based on their last updated date, the input date must be
          of the date format (d MMMMM yyyy 00:00:00).
        example: 25 March 2024 00:00:00
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          type: string
        style: form
      - description: The column to sort on. Can add - to sort for descending order
        examples:
          dateAndTime:
            description: The date and time of the task history event
            value:
            - dateAndTime
          actionType:
            description: The action type of the task history event
            value:
            - actionType
          reasonCode:
            description: The reason code of the task history event
            value:
            - reasonCode
        explode: false
        in: query
        name: _sort
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: Non-negative maximum number of entries to return
        example: 10
        explode: true
        in: query
        name: _paginationLimit
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Non-negative number of entries to skip
        example: 0
        explode: true
        in: query
        name: _paginationOffset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                meta:
                  pagination:
                    total: 10
                    isEstimatedTotal: false
                  sort:
                  - dateAndTime
                data:
                - taskType: GENERATE_REPORT
                  description: Generate Simple Report
                  dateAndTime: 1730399400000
                  actionType: Status Changed
                  notes: Start generating
                  reasonCode: Start generating
                  details: Status is changed to In-progress
              schema:
                $ref: '#/components/schemas/TaskHistoryList'
          description: Successful operation
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: parameterError
                  title: The tenancy provided is invalid or not active
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Bad Request. Required values not provided in request parameter
            or invalid values given (e.g. tenant, taskId)
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthorized
                  title: No permissions to view this item
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: No permissions to view task in VRS
        "406":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAcceptable
                  title: Unsupported Accept header. Header needs to be set to application/json
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unsupported Accept header. Header needs to be set to application/json.
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets the task history for a specific task
      tags:
      - Workflow
      x-accepts: application/json
  /scim/v2/Users:
    get:
      description: Retrieves a list of VRS users
      operationId: getAllUsers
      parameters:
      - description: Non-negative maximum number of entries to return
        example: 10
        explode: true
        in: query
        name: count
        required: false
        schema:
          type: integer
        style: form
      - description: The 1-based index of the first query result
        example: 5
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/scim+json:
              example:
                totalResults: 10
                itemsPerPage: 10
                startIndex: 5
                Resources:
                - schemas:
                  - urn:scim:schemas:extension:FactSet:VRS:1.0:User
                  id: "123456"
                  userName: TestUser
                  name:
                    formatted: Test User
                  userType: "0"
                  active: true
                  authenticatedUserName: TestUser
                  tenant: TENANT
                  phoneNumbers:
                  - value: "9876543210"
                    type: work
                    primary: true
                  emails:
                  - value: dummy@ex.com
                    type: work
                    primary: true
                  photos:
                  - value: Photopath
                    type: work
                    primary: true
                  tenancies:
                  - value: TENANT
                  groups:
                  - value: "218"
                    $ref: https://api.factset.com/vrsapi/scim/v2/Groups/218
                    type: Group
                    display: API Group
                  domainCode: TESTDOMAIN
                  isAdministrator: false
                  meta:
                    resourceType: VRSUser
                    created: 2024-03-13T08:01:32.297Z
                    lastModified: 2024-03-15T09:48:21.375Z
                    location: https://api.factset.com/vrsapi/scim/v2/Users/123456
              schema:
                $ref: '#/components/schemas/ScimUserListResponse'
          description: Successful operation
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have view or update permission
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to view users
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Retrieves a list of VRS users
      tags:
      - SCIM
      x-accepts: application/scim+json
    post:
      description: Creates a VRS user
      operationId: createUser
      requestBody:
        content:
          application/scim+json:
            example:
              userName: vrstestuser
              name:
                formatted: Vrstest User
              userType: Employee
              active: true
              authenticatedUserName: vrstestuser
              tenant: XXXXXXXXXX
              emails:
              - value: xyz@email.com
                type: work
                primary: true
              phoneNumbers:
              - value: "1234567890"
                type: work
                primary: true
              domainCode: XXXXXXXXXX
            schema:
              $ref: '#/components/schemas/CreateScimUserJSONRequest'
        required: true
      responses:
        "201":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:scim:schemas:extension:FactSet:VRS:1.0:User
                id: "218"
                userName: vrstestuser
                name:
                  formatted: Vrstest User
                userType: "0"
                preferredLanguage: en-gb
                active: true
                authenticatedUserName: vrstestuser
                tenant: XXXXXXXXXX
                phoneNumbers:
                - value: "1234567890"
                  type: work
                  primary: true
                emails:
                - value: xyz@email.com
                  type: work
                  primary: true
                tenancies:
                - value: XXXXXXXXXX
                photos:
                - value: Photopath
                  type: work
                  primary: true
                domainCode: XXXXXXXXXX
                isAdministrator: false
                meta:
                  resourceType: VRSUser
                  created: 2024-03-13T08:01:32.297Z
                  lastModified: 2024-03-13T08:01:32.297Z
                  location: https://api.factset.com/vrsapi/scim/v2/Users/218
              schema:
                $ref: '#/components/schemas/CreatedScimUserJSONResponse'
          description: Created
          headers:
            Location:
              description: A callback URL to the newly create user, for example https://example.com/VRSAPI/scim/v2/Users/1
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: No tenant code given
                status: "400"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Bad Request, required values not provided in JSON request body
            (e.g. tenant, name or userName (loginID)
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have update permission for users
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to create users or
            it does not have requested tenancy assigned to it
        "409":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User already exists
                status: "409"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: User already exists
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Creates a user
      tags:
      - SCIM
      x-contentType: application/scim+json
      x-accepts: application/scim+json
  /scim/v2/Users/{userId}:
    delete:
      description: Deletes a VRS user (this marks them as 'Deleted' in the database)
      operationId: deleteUserById
      parameters:
      - description: The ID of the user
        example: "123456"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have permission to delete users
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to delete users
        "404":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Resource 1 not found
                status: "404"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Not Found
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Deletes a VRS user
      tags:
      - SCIM
      x-accepts: application/scim+json
    get:
      description: Retrieves a VRS user based on their ID
      operationId: getUserById
      parameters:
      - description: The ID of the user
        example: "123456"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:scim:schemas:extension:FactSet:VRS:1.0:User
                id: "123456"
                userName: TestUser
                name:
                  formatted: Test User
                userType: "0"
                active: true
                authenticatedUserName: TestUser
                tenant: TENANT
                phoneNumbers:
                - value: "9876543210"
                  type: work
                  primary: true
                emails:
                - value: dummy@ex.com
                  type: work
                  primary: true
                photos:
                - value: Photopath
                  type: work
                  primary: true
                tenancies:
                - value: TENANT
                groups:
                - value: "218"
                  $ref: https://api.factset.com/vrsapi/scim/v2/Groups/218
                  type: Group
                  display: API Group
                domainCode: TESTDOMAIN
                isAdministrator: false
                meta:
                  resourceType: VRSUser
                  created: 2024-03-13T08:01:32.297Z
                  lastModified: 2024-03-15T09:48:21.375Z
                  location: https://api.factset.com/vrsapi/scim/v2/Users/123456
              schema:
                $ref: '#/components/schemas/ScimUser'
          description: Successful operation
          headers:
            Location:
              description: A callback URL to the user, for example https://example.com/VRSAPI/scim/v2/Users/1
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have permission to view users
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to view users
        "404":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Resource 1 not found
                status: "404"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Not Found
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Retrieves a VRS User
      tags:
      - SCIM
      x-accepts: application/scim+json
    patch:
      description: Adds or removes VRS user attributes based on the JSON properties
      operationId: patchUserById
      parameters:
      - description: The ID of the user
        example: "123456"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/scim+json:
            example:
              schemas:
              - urn:ietf:params:scim:api:messages:2.0:PatchOp
              Operations:
              - op: replace
                path: name.formatted
                value: Vrs Test User
            schema:
              $ref: '#/components/schemas/ScimUserPatchRequestBody'
        required: true
      responses:
        "200":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:scim:schemas:extension:FactSet:VRS:1.0:User
                id: "123456"
                userName: TestUser
                name:
                  formatted: Vrs Test User
                userType: "0"
                active: true
                authenticatedUserName: TestUser
                tenant: TENANT
                phoneNumbers:
                - value: "9876543210"
                  type: work
                  primary: true
                emails:
                - value: dummy@ex.com
                  type: work
                  primary: true
                photos:
                - value: Photopath
                  type: work
                  primary: true
                tenancies:
                - value: TENANT
                groups:
                - value: "218"
                  $ref: https://api.factset.com/vrsapi/scim/v2/Groups/218
                  type: Group
                  display: API Group
                domainCode: TESTDOMAIN
                isAdministrator: false
                meta:
                  resourceType: VRSUser
                  created: 2024-03-13T08:01:32.297Z
                  lastModified: 2024-03-15T09:48:21.375Z
                  location: https://api.factset.com/vrsapi/scim/v2/Users/123456
              schema:
                $ref: '#/components/schemas/ScimUser'
          description: Successfully updated user
          headers:
            Location:
              description: A callback URL to the updated user, for example https://example.com/VRSAPI/scim/v2/Users/1
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have permission to update users
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to update users
        "404":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Resource 1 not found
                status: "404"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Not Found
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Add or remove VRS user attributes
      tags:
      - SCIM
      x-contentType: application/scim+json
      x-accepts: application/scim+json
    put:
      description: Updates (replaces) a VRS user with the properties in the JSON
      operationId: updateUserById
      parameters:
      - description: The ID of the user
        example: "123456"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/scim+json:
            example:
              userName: vrstestuser
              name:
                formatted: Vrstest User
              userType: Employee
              active: true
              authenticatedUserName: vrstestuser
              tenant: XXXXXXXXXX
              emails:
              - value: xyz@email.com
                type: work
                primary: true
              phoneNumbers:
              - value: "1234567890"
                type: work
                primary: true
              domainCode: XXXXXXXXXX
            schema:
              $ref: '#/components/schemas/ScimUser'
        required: true
      responses:
        "200":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:scim:schemas:extension:FactSet:VRS:1.0:User
                id: "123456"
                userName: vrstestuser
                name:
                  formatted: Vrstest User
                userType: "0"
                active: true
                authenticatedUserName: vrstestuser
                tenant: XXXXXXXXXX
                phoneNumbers:
                - value: "1234567890"
                  type: work
                  primary: true
                emails:
                - value: xyz@email.com
                  type: work
                  primary: true
                photos:
                - value: Photopath
                  type: work
                  primary: true
                tenancies:
                - value: XXXXXXXXXX
                groups:
                - value: "218"
                  $ref: https://api.factset.com/vrsapi/scim/v2/Groups/218
                  type: Group
                  display: API Group
                domainCode: XXXXXXXXXX
                isAdministrator: false
                meta:
                  resourceType: VRSUser
                  created: 2024-03-13T08:01:32.297Z
                  lastModified: 2024-03-15T09:48:21.375Z
                  location: https://api.factset.com/vrsapi/scim/v2/Users/123456
              schema:
                $ref: '#/components/schemas/ScimUser'
          description: Successfully updated user
          headers:
            Location:
              description: A callback URL to the updated user, for example https://example.com/VRSAPI/scim/v2/Users/1
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have permission to update users
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to update users
        "404":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Resource 1 not found
                status: "404"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Not Found
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Updates a VRS user
      tags:
      - SCIM
      x-contentType: application/scim+json
      x-accepts: application/scim+json
  /scim/v2/Groups:
    get:
      description: Retrieves VRS roles
      operationId: getAllGroups
      parameters:
      - description: Non-negative maximum number of entries to return
        example: 10
        explode: true
        in: query
        name: count
        required: false
        schema:
          type: integer
        style: form
      - description: The 1-based index of the first query result
        example: 5
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          type: integer
        style: form
      - description: Acts as a filter for the retrieval process. if filter=tenant,
          filters the groups that match the given tenant code. Accepts multiple values
          separated by a comma, e.g. ?filter=tenant eq MASTER,DEMO
        example: tenant eq "MASTER,DEMO"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The column to sort on. If parameter is not given, no sorting
          will be done
        examples:
          displayName:
            description: The display name of the group to sort
            value:
            - displayName
        explode: false
        in: query
        name: sortBy
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      - description: The order in which the sort is applied for the sort by parameter.
          If parameter is not given along with a sortBy, sorting will be done in ascending
          order
        examples:
          ascending:
            description: The sort will be applied in ascending order
            value:
            - ascending
          descending:
            description: The sort will be applied in descending order
            value:
            - descending
        explode: false
        in: query
        name: sortOrder
        required: false
        schema:
          items:
            type: string
          maxItems: 1
          type: array
        style: form
      responses:
        "200":
          content:
            application/scim+json:
              example:
                totalResults: 10
                itemsPerPage: 10
                startIndex: 5
                Resources:
                - schemas:
                  - urn:scim:schemas:extension:FactSet:VRS:1.0:Group
                  id: "123456"
                  displayName: API Group
                  members:
                  - value: "45678"
                    $ref: https://api.factset.com/vrsapi/scim/v2/Users/45678
                    type: User
                  tenant: TENANT
                  domainCode: TESTDOMAIN
              schema:
                $ref: '#/components/schemas/ScimGroupListResponse'
          description: Successful operation
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have permission to view roles
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to view roles
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Retrieves a list of VRS role
      tags:
      - SCIM
      x-accepts: application/scim+json
    post:
      description: Creates a VRS role
      operationId: createGroup
      requestBody:
        content:
          application/scim+json:
            example:
              displayName: vrstestgroup
              members:
              - value: scimuser1
                type: user
                $ref: VRSAPI/scim/v2/Users/1
              tenant: XXXXXXXXXX
              domainCode: XXXXXXXXXX
            schema:
              $ref: '#/components/schemas/ScimGroup'
        required: true
      responses:
        "201":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:scim:schemas:extension:FactSet:VRS:1.0:Group
                id: "123456"
                displayName: vrstestgroup
                members:
                - value: "218"
                  $ref: https://api.factset.com/vrsapi/scim/v2/Users/218
                  type: User
                tenant: XXXXXXXXXX
                domainCode: XXXXXXXXXX
                meta:
                  resourceType: VRSGroup
                  created: 2024-03-13T08:01:32.297Z
                  lastModified: 2024-03-15T09:48:21.375Z
                  location: https://api.factset.com/vrsapi/scim/v2/Groups/123456
              schema:
                $ref: '#/components/schemas/ScimGroup'
          description: Created
          headers:
            Location:
              description: A callback URL to the newly create role, for example https://example.com/VRSAPI/scim/v2/Groups/1
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have permission to create groups
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to create roles
        "409":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Group already exists
                status: "409"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Group already exists
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Creates a role
      tags:
      - SCIM
      x-contentType: application/scim+json
      x-accepts: application/scim+json
  /scim/v2/Groups/{groupId}:
    delete:
      description: Deletes a VRS role
      operationId: deleteGroupById
      parameters:
      - description: The ID of the group
        example: "123456"
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have permission to delete roles
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to delete roles
        "404":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Resource 1 not found
                status: "404"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Not Found
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Deletes a VRS role
      tags:
      - SCIM
      x-accepts: application/scim+json
    get:
      description: Retrieves a VRS role based on the ID
      operationId: getGroupById
      parameters:
      - description: The ID of the role
        example: "123456"
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:scim:schemas:extension:FactSet:VRS:1.0:Group
                id: "123456"
                displayName: API Group
                members:
                - value: "218"
                  $ref: https://api.factset.com/vrsapi/scim/v2/Users/218
                  type: User
                tenant: TENANT
                domainCode: TESTDOMAIN
                meta:
                  resourceType: VRSGroup
                  created: 2024-03-13T08:01:32.297Z
                  lastModified: 2024-03-15T09:48:21.375Z
                  location: https://api.factset.com/vrsapi/scim/v2/Groups/123456
              schema:
                $ref: '#/components/schemas/ScimGroup'
          description: Successful operation
          headers:
            Location:
              description: A callback URL to the newly create role, for example https://example.com/VRSAPI/scim/v2/Groups/1
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have permission to view roles
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to view roles
        "404":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Resource 1 not found
                status: "404"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Not Found
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Retrieves a VRS role
      tags:
      - SCIM
      x-accepts: application/scim+json
    patch:
      description: Adds or removes a VRS user to/from a VRS role
      operationId: patchGroupById
      parameters:
      - description: The ID of the role
        example: "123456"
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/scim+json:
            example:
              schemas:
              - urn:ietf:params:scim:api:messages:2.0:PatchOp
              Operations:
              - op: add
                path: members
                value:
                  display: Test user
                  $ref: VRSAPI/scim/v2/Users/45678
                  value: "45678"
            schema:
              $ref: '#/components/schemas/ScimGroupPatchRequestBody'
        required: true
      responses:
        "200":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:scim:schemas:extension:FactSet:VRS:1.0:Group
                id: "123456"
                displayName: API Group
                members:
                - value: "45678"
                  $ref: https://api.factset.com/vrsapi/scim/v2/Users/45678
                  type: User
                tenant: TENANT
                domainCode: TESTDOMAIN
                meta:
                  resourceType: VRSGroup
                  created: 2024-03-13T08:01:32.297Z
                  lastModified: 2024-03-15T09:48:21.375Z
                  location: https://api.factset.com/vrsapi/scim/v2/Groups/123456
              schema:
                $ref: '#/components/schemas/ScimGroup'
          description: Successfully added user to group
        "400":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: the attribute with the name 'tenants' is unknown to resource
                  type 'VRSGroup'
                status: "400"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Bad Request, invalid values provided in JSON request body.
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Add or remove a user to/from a group
      tags:
      - SCIM
      x-contentType: application/scim+json
      x-accepts: application/scim+json
    put:
      description: Updates (replaces) a VRS Group with the properties in the JSON
      operationId: updateGroupById
      parameters:
      - description: The ID of the group
        example: "123456"
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/scim+json:
            example:
              displayName: vrstestgroup
              members:
              - value: scimuser1
                type: user
                $ref: VRSAPI/scim/v2/Users/1
              tenant: XXXXXXXXXX
              domainCode: XXXXXXXXXX
            schema:
              $ref: '#/components/schemas/ScimGroup'
        required: true
      responses:
        "200":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:scim:schemas:extension:FactSet:VRS:1.0:Group
                id: "123456"
                displayName: vrstestgroup
                members:
                - value: "45678"
                  $ref: https://api.factset.com/vrsapi/scim/v2/Users/45678
                  type: User
                tenant: XXXXXXXXXX
                domainCode: XXXXXXXXXX
                meta:
                  resourceType: VRSGroup
                  created: 2024-03-13T08:01:32.297Z
                  lastModified: 2024-03-15T09:48:21.375Z
                  location: https://api.factset.com/vrsapi/scim/v2/Groups/123456
              schema:
                $ref: '#/components/schemas/ScimGroup'
          description: Successfully updated group
          headers:
            Location:
              description: A callback URL to the updated group, for example https://example.com/VRSAPI/scim/v2/Groups/1
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: User does not have permission to update groups
                status: "403"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Forbidden, user does not have permission to update groups
        "404":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Resource 1 not found
                status: "404"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: Not Found
        "500":
          content:
            application/scim+json:
              example:
                schemas:
                - urn:ietf:params:scim:api:messages:2.0:Error
                detail: An internal error has occurred.
                status: "500"
              schema:
                $ref: '#/components/schemas/ScimError'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Updates a VRS Group
      tags:
      - SCIM
      x-contentType: application/scim+json
      x-accepts: application/scim+json
  /v1/version:
    get:
      description: Gets the version of VRS,WRS and DBServer
      operationId: getVersion
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  vrsVersion: "21.58"
                  wrsVersion: 20.2.42
                  dbServer: Microsoft SQL Server 2016
              schema:
                $ref: '#/components/schemas/VersionResponseBody'
          description: Successful operation
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: notAuthenticated
                  title: User is not authenticated
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorised
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ID of the error
                  code: genericServerError
                  title: Internal server error
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: The server have encountered an unhandled error due to which
            request was not fulfilled.
      summary: Gets the version of VRS,WRS and DBServer
      tags:
      - Version
      x-accepts: application/json
components:
  schemas:
    DataSourceList:
      description: A list of Data Sources.
      example:
        data:
        - releaseTag: releaseTag
          defaultDataSourceName: defaultDataSourceName
          dataPreview: dataPreview
          lastUpdatedBy: lastUpdatedBy
          lastUpdated: 5.962133916683182
          dataSourceId: 6
          code: code
          entities:
          - code: code
            name: name
            entityId: 1
          - code: code
            name: name
            entityId: 1
          name: name
          dsType: AUTOMATIC
          outputRecordSet: outputRecordSet
        - releaseTag: releaseTag
          defaultDataSourceName: defaultDataSourceName
          dataPreview: dataPreview
          lastUpdatedBy: lastUpdatedBy
          lastUpdated: 5.962133916683182
          dataSourceId: 6
          code: code
          entities:
          - code: code
            name: name
            entityId: 1
          - code: code
            name: name
            entityId: 1
          name: name
          dsType: AUTOMATIC
          outputRecordSet: outputRecordSet
        meta:
          pagination:
            total: 0
            isEstimatedTotal: true
          sort:
          - sort
          - sort
      properties:
        meta:
          $ref: '#/components/schemas/DataSourceList_meta'
        data:
          description: An array of Data Sources.
          items:
            $ref: '#/components/schemas/DataSourceDTO'
          type: array
      type: object
    DataSourceData:
      description: Data object for the Data Source.
      example:
        data:
          releaseTag: releaseTag
          defaultDataSourceName: defaultDataSourceName
          dataPreview: dataPreview
          lastUpdatedBy: lastUpdatedBy
          lastUpdated: 5.962133916683182
          dataSourceId: 6
          code: code
          entities:
          - code: code
            name: name
            entityId: 1
          - code: code
            name: name
            entityId: 1
          name: name
          dsType: AUTOMATIC
          outputRecordSet: outputRecordSet
      properties:
        data:
          $ref: '#/components/schemas/DataSourceDTO'
      type: object
    DataSourceDTO:
      description: A DataSource object aggregates data from multiple providers, such
        as APIs, databases, or file systems, to simplify access and processing.
      example:
        releaseTag: releaseTag
        defaultDataSourceName: defaultDataSourceName
        dataPreview: dataPreview
        lastUpdatedBy: lastUpdatedBy
        lastUpdated: 5.962133916683182
        dataSourceId: 6
        code: code
        entities:
        - code: code
          name: name
          entityId: 1
        - code: code
          name: name
          entityId: 1
        name: name
        dsType: AUTOMATIC
        outputRecordSet: outputRecordSet
      properties:
        dataSourceId:
          description: Unique Identifier for the Data Source.
          format: int32
          type: integer
        name:
          description: Name of the Data Source.
          type: string
        code:
          description: Code of the Data Source.
          type: string
        dsType:
          description: Type of the Data Source.
          enum:
          - AUTOMATIC
          - MANUAL
          - FILTER
          type: string
        entities:
          description: An array of entities that are used in the Data Source.
          items:
            $ref: '#/components/schemas/EntityDTO'
          type: array
        outputRecordSet:
          description: Recordset name that is used for output in the Data Source.
          type: string
        releaseTag:
          description: Release tag associated with the Data Source.
          type: string
        defaultDataSourceName:
          description: Name of the default Data Source.
          type: string
        dataPreview:
          description: Name of the component/report used for Data Source preview.
          type: string
        lastUpdatedBy:
          description: Indicates the username of the person who last updated the Data
            Source.
          type: string
        lastUpdated:
          description: The timestamp of the most recent update in epoch format of
            the Data Source
          type: number
      type: object
    DataSourceDataInstance:
      description: Response for view data request.
      example:
        data:
          fields:
          - hide: hide
            format: format
            name: name
            id: 0
            fieldType: BOOLEAN
            order: 6
          - hide: hide
            format: format
            name: name
            id: 0
            fieldType: BOOLEAN
            order: 6
          dstInstance:
            dstInstanceId: 1
            rows:
            - fields:
              - fieldType: BOOLEAN
                fieldValue: fieldValue
                fieldId: 2
              - fieldType: BOOLEAN
                fieldValue: fieldValue
                fieldId: 2
              rowId: 5
              order: 5
            - fields:
              - fieldType: BOOLEAN
                fieldValue: fieldValue
                fieldId: 2
              - fieldType: BOOLEAN
                fieldValue: fieldValue
                fieldId: 2
              rowId: 5
              order: 5
            dstInstanceType: dstInstanceType
      properties:
        data:
          $ref: '#/components/schemas/DataSourceAllData'
      type: object
    DataSourceAllData:
      description: Data and Meta data from the Data Source, including any retrieval
        errors.
      example:
        fields:
        - hide: hide
          format: format
          name: name
          id: 0
          fieldType: BOOLEAN
          order: 6
        - hide: hide
          format: format
          name: name
          id: 0
          fieldType: BOOLEAN
          order: 6
        dstInstance:
          dstInstanceId: 1
          rows:
          - fields:
            - fieldType: BOOLEAN
              fieldValue: fieldValue
              fieldId: 2
            - fieldType: BOOLEAN
              fieldValue: fieldValue
              fieldId: 2
            rowId: 5
            order: 5
          - fields:
            - fieldType: BOOLEAN
              fieldValue: fieldValue
              fieldId: 2
            - fieldType: BOOLEAN
              fieldValue: fieldValue
              fieldId: 2
            rowId: 5
            order: 5
          dstInstanceType: dstInstanceType
      properties:
        fields:
          description: An array of fields from the input Record Set.
          items:
            $ref: '#/components/schemas/RecordSetFields'
          type: array
        dstInstance:
          $ref: '#/components/schemas/DataSourceInstance'
      type: object
    DataSourceInstance:
      description: Data Source instance object.
      example:
        dstInstanceId: 1
        rows:
        - fields:
          - fieldType: BOOLEAN
            fieldValue: fieldValue
            fieldId: 2
          - fieldType: BOOLEAN
            fieldValue: fieldValue
            fieldId: 2
          rowId: 5
          order: 5
        - fields:
          - fieldType: BOOLEAN
            fieldValue: fieldValue
            fieldId: 2
          - fieldType: BOOLEAN
            fieldValue: fieldValue
            fieldId: 2
          rowId: 5
          order: 5
        dstInstanceType: dstInstanceType
      properties:
        dstInstanceId:
          description: Unique Identifier of the Data Source Instance.
          type: integer
        dstInstanceType:
          description: Type of the Data source
          type: string
        rows:
          description: An array of data row of the Data source
          items:
            $ref: '#/components/schemas/DataSourceInstanceRows'
          type: array
      type: object
    DataSourceInstanceRows:
      description: Each data row of the Data source
      example:
        fields:
        - fieldType: BOOLEAN
          fieldValue: fieldValue
          fieldId: 2
        - fieldType: BOOLEAN
          fieldValue: fieldValue
          fieldId: 2
        rowId: 5
        order: 5
      properties:
        rowId:
          description: Unique Identifier of the data row.
          type: integer
        order:
          description: The display or processing order of the data row.
          type: integer
        fields:
          description: An array of values for each input Record Set fields.
          items:
            $ref: '#/components/schemas/RecordSetFieldValues'
          type: array
      type: object
    RecordSetFieldValues:
      description: Field value and associated metadata for the record set field.
      example:
        fieldType: BOOLEAN
        fieldValue: fieldValue
        fieldId: 2
      properties:
        fieldId:
          description: Unique identifier for the field.
          type: integer
        fieldType:
          description: The type of the field indicating the kind of data it holds.
          enum:
          - BOOLEAN
          - COLOUR
          - DATETIME
          - DECIMAL
          - FONT
          - FONTSIZE
          - HTML
          - INTEGER
          - TEXT
          type: string
        fieldValue:
          description: The value assigned to the field.
          type: string
      type: object
    RecordSetFields:
      description: Defines the properties and attributes of a record set field.
      example:
        hide: hide
        format: format
        name: name
        id: 0
        fieldType: BOOLEAN
        order: 6
      properties:
        fieldType:
          description: The type of the field indicating the kind of data it holds.
          enum:
          - BOOLEAN
          - COLOUR
          - DATETIME
          - DECIMAL
          - FONT
          - FONTSIZE
          - HTML
          - INTEGER
          - TEXT
          type: string
        format:
          description: The format applied to the field's value.
          type: string
        id:
          description: Unique identifier for the field.
          type: integer
        hide:
          description: Indicates whether the field is hidden.
          type: string
        name:
          description: The name of the field.
          type: string
        order:
          description: The ordering of the record set field.
          type: integer
      type: object
    EntityDTO:
      description: Entity with its unique identifiers and attributes.
      example:
        code: code
        name: name
        entityId: 1
      properties:
        entityId:
          description: Unique identifier for the Entity.
          format: int32
          type: integer
        name:
          description: Name of the Entity.
          type: string
        code:
          description: Code of the Entity.
          type: string
      type: object
    EntityFieldValueDTO:
      description: Entity value with its unique identifiers and attributes.
      example:
        data:
        - '{}'
        - '{}'
        meta:
          pagination:
            total: 0
            isEstimatedTotal: true
          sort:
          - sort
          - sort
      properties:
        meta:
          $ref: '#/components/schemas/EntityFieldValueDTO_meta'
        data:
          description: Collection of Entity rows with their associated values and
            fields.
          items:
            properties:
              entityRowId:
                description: Unique Identifier for the Entity row.
                type: integer
              keyValue:
                description: Key value associated with the Entity row.
                type: string
              descriptionValue:
                description: Descriptive value for the Entity row.
                type: string
              fieldsWithValues:
                description: An array of values associated with specific fields in
                  the Entity row.
                items:
                  description: The value along with field name, Example 'Field:Value'.
                  type: string
                type: array
          type: array
      type: object
    ReportInstanceDataResponse:
      description: Response containing details of the Report instance.
      example:
        data:
          reportInstanceId: 0
      properties:
        data:
          $ref: '#/components/schemas/ReportInstanceId'
      type: object
    ReportInstanceId:
      description: Report instance Object.
      example:
        reportInstanceId: 0
      properties:
        reportInstanceId:
          description: Unique Identifier for the Report instance.
          type: integer
      type: object
    ReportInstanceList:
      description: List of Report instances along with metadata.
      example:
        data:
        - extension: extension
          reportRevision:
            percentageComplete: 1.4658129805029452
            reportStatus: WAITING
            description: description
            finishDate: finishDate
            signOffStatus: REJECTED
            signOffNotes: signOffNotes
            reportReasonCd: reportReasonCd
            languageCode: languageCode
            outputFormat: outputFormat
            startDate: startDate
          reportInstanceId: 0
          reportName: reportName
          name: name
          reportDefinitionName: reportDefinitionName
          userFriendlyReportName: userFriendlyReportName
          reportDefinitionId: 6
        - extension: extension
          reportRevision:
            percentageComplete: 1.4658129805029452
            reportStatus: WAITING
            description: description
            finishDate: finishDate
            signOffStatus: REJECTED
            signOffNotes: signOffNotes
            reportReasonCd: reportReasonCd
            languageCode: languageCode
            outputFormat: outputFormat
            startDate: startDate
          reportInstanceId: 0
          reportName: reportName
          name: name
          reportDefinitionName: reportDefinitionName
          userFriendlyReportName: userFriendlyReportName
          reportDefinitionId: 6
        meta:
          pagination:
            total: 0
            isEstimatedTotal: true
      properties:
        meta:
          $ref: '#/components/schemas/ReportInstanceList_meta'
        data:
          description: A list of Report instances.
          items:
            $ref: '#/components/schemas/ReportInstanceDTO'
          type: array
      type: object
    ReportInstanceLogList:
      description: List of report generation logs associated with Report instances.
      example:
        data:
        - sequenceNumber: 0
          updateDate: updateDate
          message: message
          type: LOG
        - sequenceNumber: 0
          updateDate: updateDate
          message: message
          type: LOG
      properties:
        data:
          description: An array of Report generation log entries for the Report instance.
          items:
            $ref: '#/components/schemas/ReportInstanceLogDTO'
          type: array
      type: object
    ReportInstanceData:
      description: Single Report instance data response.
      example:
        data:
          extension: extension
          reportRevision:
            percentageComplete: 1.4658129805029452
            reportStatus: WAITING
            description: description
            finishDate: finishDate
            signOffStatus: REJECTED
            signOffNotes: signOffNotes
            reportReasonCd: reportReasonCd
            languageCode: languageCode
            outputFormat: outputFormat
            startDate: startDate
          reportInstanceId: 0
          reportName: reportName
          name: name
          reportDefinitionName: reportDefinitionName
          userFriendlyReportName: userFriendlyReportName
          reportDefinitionId: 6
      properties:
        data:
          $ref: '#/components/schemas/ReportInstanceDTO'
      type: object
    ReportInstanceDTO:
      description: Details of the Report instance.
      example:
        extension: extension
        reportRevision:
          percentageComplete: 1.4658129805029452
          reportStatus: WAITING
          description: description
          finishDate: finishDate
          signOffStatus: REJECTED
          signOffNotes: signOffNotes
          reportReasonCd: reportReasonCd
          languageCode: languageCode
          outputFormat: outputFormat
          startDate: startDate
        reportInstanceId: 0
        reportName: reportName
        name: name
        reportDefinitionName: reportDefinitionName
        userFriendlyReportName: userFriendlyReportName
        reportDefinitionId: 6
      properties:
        reportInstanceId:
          description: Unique Identifier of the Report instance.
          format: int32
          type: integer
        reportDefinitionId:
          description: Unique Identifier for the associated Report definition.
          format: int32
          type: integer
        reportDefinitionName:
          description: Name of the Report definition.
          type: string
        reportName:
          description: Name of the generated Report.
          type: string
        userFriendlyReportName:
          description: A user-friendly display name for the generated report file.
          type: string
        extension:
          description: File extension for the report output.
          type: string
        reportRevision:
          $ref: '#/components/schemas/ReportRevisionDTO'
        name:
          description: Display name for the generated report file.
          type: string
      type: object
    ReportInstanceLogDTO:
      description: Report Generation log details.
      example:
        sequenceNumber: 0
        updateDate: updateDate
        message: message
        type: LOG
      properties:
        sequenceNumber:
          description: Sequential number of the log entry.
          format: int32
          type: integer
        message:
          description: Detailed message describing the log event or error.
          type: string
        type:
          description: Indicates the type of log entry, either a general log or an
            error.
          enum:
          - LOG
          - ERROR
          type: string
        updateDate:
          description: The date and time of the last update for this log entry.
          type: string
      type: object
    ReportDefinitionList:
      description: List of Report Definitions.
      example:
        data:
        - releaseTag: releaseTag
          code: code
          entities:
          - code: code
            name: name
            entityId: 1
          - code: code
            name: name
            entityId: 1
          name: name
        - releaseTag: releaseTag
          code: code
          entities:
          - code: code
            name: name
            entityId: 1
          - code: code
            name: name
            entityId: 1
          name: name
        meta:
          pagination:
            total: 0
            isEstimatedTotal: true
      properties:
        meta:
          $ref: '#/components/schemas/ReportDefinitionList_meta'
        data:
          description: A list of Report Definitions.
          items:
            $ref: '#/components/schemas/ReportDefinitionDTO'
          type: array
      type: object
    ReportDefinitionData:
      description: Contains detailed data for a single Report definition.
      example:
        data:
          releaseTag: releaseTag
          code: code
          entities:
          - code: code
            name: name
            entityId: 1
          - code: code
            name: name
            entityId: 1
          name: name
      properties:
        data:
          $ref: '#/components/schemas/ReportDefinitionDTO'
      type: object
    ReportDefinitionDTO:
      description: Defines the details of the Report definition.
      example:
        releaseTag: releaseTag
        code: code
        entities:
        - code: code
          name: name
          entityId: 1
        - code: code
          name: name
          entityId: 1
        name: name
      properties:
        name:
          description: Name of the Report definition.
          type: string
        code:
          description: Code of the Report definition.
          type: string
        releaseTag:
          description: Release tag associated with the Report definition.
          type: string
        entities:
          description: A list of entities associated with the Report definition.
          items:
            $ref: '#/components/schemas/EntityDTO'
          type: array
      type: object
    ReportRevisionDTO:
      description: Contains details about the Report revision.
      example:
        percentageComplete: 1.4658129805029452
        reportStatus: WAITING
        description: description
        finishDate: finishDate
        signOffStatus: REJECTED
        signOffNotes: signOffNotes
        reportReasonCd: reportReasonCd
        languageCode: languageCode
        outputFormat: outputFormat
        startDate: startDate
      properties:
        reportStatus:
          description: The current status of the Report generation process.
          enum:
          - WAITING
          - STARTING
          - RETRIEVING_REQUEST
          - CONTENT_FILTER
          - STYLE_PROCESSING
          - STYLE_PREPROCESSING
          - RULE_PROCESSING
          - GETTING_DATA
          - RI_PROCESSING
          - COMPILE
          - SUBSTITUTION
          - TRANSLATION
          - GRID_PROCESSING
          - CHART_PROCESSING
          - IMPORTED_FILE_PROCESSING
          - TEXT_PROCESSING_STATUS
          - TOC_PROCESSING_STATUS
          - COMPONENT_PROCESSING
          - POST_PROCESSING
          - POSTING_TO_WRS
          - POSTED_TO_WRS
          - RENDERING
          - DOC_CREATION
          - PDF_CONVERSION
          - ABORTED
          - COMPLETED
          - COMPLETED_CAUTIONS
          - COMPLETED_ERROR
          - COMPLETED_MODIFYING
          - COMPLETED_CHANGED
          - DELETING
          - REPORT_ORIGINAL_GENERATION
          - REPORT_PREVIOUS_REVISION
          - GENERATING
          type: string
        startDate:
          description: Start date of the Report generation process.
          type: string
        finishDate:
          description: Completion date of the Report generation process.
          type: string
        signOffStatus:
          description: Sign-off status of the Report.
          enum:
          - REJECTED
          - PENDING
          - APPROVED
          type: string
        signOffNotes:
          description: Additional notes related to the sign-off process.
          type: string
        reportReasonCd:
          description: Reason code for generating the Report.
          type: string
        description:
          description: Description of the Report revision.
          type: string
        languageCode:
          description: Language code of the Report.
          type: string
        outputFormat:
          description: Output format of the Report.
          type: string
        percentageComplete:
          description: Percentage of completion for the Report generation.
          type: number
      type: object
    ReportGenerationRequestBody:
      description: Defines the request body for generating a report, encapsulating
        various generation parameters.
      example:
        vrs:
          key:
            entitySelection:
              key:
                key: key
            sectionFilter: sectionFilter
            report: report
            tenancy: tenancy
            priority: priority
            outputFormat: WORD
            startDate: startDate
      properties:
        vrs:
          additionalProperties:
            $ref: '#/components/schemas/ReportGenerationRequest'
          description: Contains report generation requests.
          type: object
      type: object
    ReportGenerationRequest:
      description: details needed to request the generation of a report.
      example:
        entitySelection:
          key:
            key: key
        sectionFilter: sectionFilter
        report: report
        tenancy: tenancy
        priority: priority
        outputFormat: WORD
        startDate: startDate
      properties:
        report:
          description: The Report definition code.
          type: string
        tenancy:
          description: The tenancy code in which the report generation occurs.
          type: string
        outputFormat:
          description: The desired output format for the generated report.
          enum:
          - WORD
          - WORD2010
          - EXCEL
          - EXCEL2010
          - PPT
          - PPT2010
          - PDF
          - CSV
          - XML
          - VXML
          - HTML
          - PS
          type: string
        sectionFilter:
          description: Section filter that has to be used in the report generation
            process.
          type: string
        priority:
          description: The priority level assigned to the report generation request.
          type: string
        startDate:
          description: The scheduled start date for generating the report.
          type: string
        entitySelection:
          additionalProperties:
            $ref: '#/components/schemas/EntitySelection'
          description: Specifies the Entity selections for the report generation.
          type: object
      type: object
    EntitySelection:
      description: Specifies an Entity or a set of entities selected for inclusion
        in a report.
      example:
        key: key
      properties:
        key:
          description: Key value for the selected Entity.
          type: string
      type: object
    ReportDataResponse:
      description: Binary data of the generated report response.
      format: binary
      type: string
    ScheduleDefinitionsList:
      description: A list of Schedule Definition.
      example:
        data:
        - lastUpdatedBy: lastUpdatedBy
          code: code
          notes: notes
          scheduleDefinitionId: 6
          ownerRole:
            code: code
            roleId: 2
            name: name
          scheduleGroup: scheduleGroup
          numberOfObligations: 1
          numberOfPackages: 5
          lastUpdated: lastUpdated
          scheduleType: MANUAL
          reportDate: LAST_DAY_OF_PREV_MONTH
          deleteScheduleAfterDays: 5
          entities:
          - code: code
            name: name
            entityId: 1
          - code: code
            name: name
            entityId: 1
          name: name
          businessCalendar: businessCalendar
        - lastUpdatedBy: lastUpdatedBy
          code: code
          notes: notes
          scheduleDefinitionId: 6
          ownerRole:
            code: code
            roleId: 2
            name: name
          scheduleGroup: scheduleGroup
          numberOfObligations: 1
          numberOfPackages: 5
          lastUpdated: lastUpdated
          scheduleType: MANUAL
          reportDate: LAST_DAY_OF_PREV_MONTH
          deleteScheduleAfterDays: 5
          entities:
          - code: code
            name: name
            entityId: 1
          - code: code
            name: name
            entityId: 1
          name: name
          businessCalendar: businessCalendar
        meta:
          pagination:
            total: 0
            isEstimatedTotal: true
          sort:
          - sort
          - sort
      properties:
        meta:
          $ref: '#/components/schemas/ScheduleDefinitionsList_meta'
        data:
          description: An array of Schedule Definitions.
          items:
            $ref: '#/components/schemas/ScheduleDefinition'
          type: array
      type: object
    ScheduleDefinition:
      description: List of Schedule Definition.
      example:
        lastUpdatedBy: lastUpdatedBy
        code: code
        notes: notes
        scheduleDefinitionId: 6
        ownerRole:
          code: code
          roleId: 2
          name: name
        scheduleGroup: scheduleGroup
        numberOfObligations: 1
        numberOfPackages: 5
        lastUpdated: lastUpdated
        scheduleType: MANUAL
        reportDate: LAST_DAY_OF_PREV_MONTH
        deleteScheduleAfterDays: 5
        entities:
        - code: code
          name: name
          entityId: 1
        - code: code
          name: name
          entityId: 1
        name: name
        businessCalendar: businessCalendar
      properties:
        scheduleDefinitionId:
          description: Unique Identifier for the Schedule Definition.
          format: int32
          type: integer
        name:
          description: Name of the Schedule Definition.
          type: string
        code:
          description: Code of the Schedule Definition.
          type: string
        scheduleType:
          description: Type of Schedule Definition.
          enum:
          - MANUAL
          - REPEATING
          type: string
        scheduleGroup:
          description: Group of the Schedule Definition.
          type: string
        reportDate:
          description: Report Date of the Schedule Definition.
          enum:
          - LAST_DAY_OF_PREV_MONTH
          - LAST_BUSINESS_DAY_OF_PREV_MONTH
          - CREATION_DATE
          - DAY_BEFORE_CREATION_DATE
          - BUSINESS_DAY_BEFORE_CREATION_DATE
          - LAST_DAY_OF_MONTH_SCHEDULE_CREATED
          - LAST_BUSINESS_DAY_OF_MONTH_SCHEDULE_CREATED
          - LAST_BUSINESS_DAY_OF_PREVIOUS_WEEK_SCHEDULE_CREATED
          - LAST_BUSINESS_DAY_OF_WEEK_SCHEDULE_CREATED
          - TWO_BUSINESS_DAYS_BEFORE_SCHEDULE_CREATED
          type: string
        numberOfObligations:
          description: Number of obligations used in the Schedule Definition.
          format: int32
          type: integer
        businessCalendar:
          description: Calender name used in the Schedule Definition.
          type: string
        deleteScheduleAfterDays:
          description: Indicates after how many days the Schedule should be deleted.
          format: int32
          type: integer
        numberOfPackages:
          description: Indicates number of packages involved in the Schedule Definition.
          format: int32
          type: integer
        entities:
          description: A set of entities used in Schedule Definition.
          items:
            $ref: '#/components/schemas/EntityDTO'
          type: array
        ownerRole:
          $ref: '#/components/schemas/ScheduleDefinition_ownerRole'
        notes:
          description: Notes of the Schedule Definition.
          type: string
        lastUpdatedBy:
          description: Indicates the username of the person who last updated the Data
            Source.
          type: string
        lastUpdated:
          description: The timestamp of the most recent update in epoch format for
            a specific Schedule Definition
          type: string
      type: object
    SchedulesList:
      description: List of Schedules.
      example:
        data:
        - owner: owner
          lastUpdatedBy: lastUpdatedBy
          definitionName: definitionName
          notes: notes
          noOfTasks: 1
          scheduleGroup: scheduleGroup
          lastUpdated: lastUpdated
          reportDate: reportDate
          name: name
          finishDate: finishDate
          businessCalendar: businessCalendar
          scheduleId: 6
          startDate: startDate
          status: INITIALISED
        - owner: owner
          lastUpdatedBy: lastUpdatedBy
          definitionName: definitionName
          notes: notes
          noOfTasks: 1
          scheduleGroup: scheduleGroup
          lastUpdated: lastUpdated
          reportDate: reportDate
          name: name
          finishDate: finishDate
          businessCalendar: businessCalendar
          scheduleId: 6
          startDate: startDate
          status: INITIALISED
        meta:
          pagination:
            total: 0
            isEstimatedTotal: true
          sort:
          - sort
          - sort
      properties:
        meta:
          $ref: '#/components/schemas/SchedulesList_meta'
        data:
          description: An array of schedule objects.
          items:
            $ref: '#/components/schemas/ScheduleData'
          type: array
      type: object
    ScheduleStatusUpdateResponse:
      description: Response object for updating the status of a schedule.
      example:
        data:
          owner: owner
          lastUpdatedBy: lastUpdatedBy
          definitionName: definitionName
          notes: notes
          noOfTasks: 1
          scheduleGroup: scheduleGroup
          lastUpdated: lastUpdated
          reportDate: reportDate
          name: name
          finishDate: finishDate
          businessCalendar: businessCalendar
          scheduleId: 6
          startDate: startDate
          status: INITIALISED
      properties:
        data:
          $ref: '#/components/schemas/ScheduleData'
      type: object
    ScheduleData:
      description: Details of an individual schedule.
      example:
        owner: owner
        lastUpdatedBy: lastUpdatedBy
        definitionName: definitionName
        notes: notes
        noOfTasks: 1
        scheduleGroup: scheduleGroup
        lastUpdated: lastUpdated
        reportDate: reportDate
        name: name
        finishDate: finishDate
        businessCalendar: businessCalendar
        scheduleId: 6
        startDate: startDate
        status: INITIALISED
      properties:
        scheduleId:
          description: Unique identifier of the Schedule.
          format: int32
          type: integer
        name:
          description: Name of the Schedule.
          type: string
        definitionName:
          description: Name of Schedule Definition from which the Schedule has been
            generated.
          type: string
        status:
          description: Status of the Schedule.
          enum:
          - INITIALISED
          - RUNNING
          - CANCELLED
          - SUSPENDED
          - FINISHED
          - CLOSED
          - GENERATING_TASKS
          type: string
        scheduleGroup:
          description: Group of the Schedule.
          type: string
        reportDate:
          description: The timestamp of the report date in epoch format for a specific
            Schedule
          type: string
        noOfTasks:
          description: No of tasks generated for the Schedule
          format: int32
          type: integer
        businessCalendar:
          description: Name of Business Calender used in the Schedule
          type: string
        owner:
          description: Owner role used in the Schedule
          type: string
        notes:
          description: Notes of the Schedule
          type: string
        finishDate:
          description: The timestamp of the Finish Date in epoch format of the Schedule
          type: string
        startDate:
          description: The timestamp of the Start Date in epoch format of the Schedule
          type: string
        lastUpdatedBy:
          description: Indicates the username of the person who last updated Schedule
          type: string
        lastUpdated:
          description: The timestamp of the most recent update in epoch format for
            a specific Schedule
          type: string
      type: object
    ScheduleResponseData:
      description: Data object for the Schedule response.
      example: {}
      properties:
        data:
          $ref: '#/components/schemas/ScheduleAPIDTO'
      type: object
    ScheduleAPIDTO:
      allOf:
      - $ref: '#/components/schemas/ScheduleData'
      - $ref: '#/components/schemas/ScheduleAPIDTO_allOf'
      description: Schedule along with an extra property to indicate the task generation
        log warning(s)/error(s)
      type: object
    GenerateScheduleResponse:
      description: Response object for schedule generation.
      example:
        data:
          scheduleInstanceId: 0
          status: INITIALISED
      properties:
        data:
          $ref: '#/components/schemas/ScheduleInstanceData'
      type: object
    ScheduleInstanceData:
      description: Details of an individual schedule instance.
      example:
        scheduleInstanceId: 0
        status: INITIALISED
      properties:
        scheduleInstanceId:
          description: Unique identifier of the schedule instance.
          format: int32
          type: integer
        status:
          description: Current status of the schedule instance.
          enum:
          - INITIALISED
          - RUNNING
          - CANCELLED
          - SUSPENDED
          - FINISHED
          - CLOSED
          - GENERATING_TASKS
          type: string
      type: object
    ScheduleGenerationLogList:
      description: List of task generation logs.
      example:
        data:
        - sequenceNumber: 6
          lastUpdated: lastUpdated
          logSet: 1
          message: message
          type: INFO
        - sequenceNumber: 6
          lastUpdated: lastUpdated
          logSet: 1
          message: message
          type: INFO
        meta:
          pagination:
            total: 0
            isEstimatedTotal: true
          sort:
          - sort
          - sort
      properties:
        meta:
          $ref: '#/components/schemas/ScheduleGenerationLogList_meta'
        data:
          description: A set of fields used in sorting the Task Generation Logs.
          items:
            $ref: '#/components/schemas/ScheduleGenerationLog'
          type: array
      type: object
    ScheduleGenerationLog:
      description: Details of an individual task generation log.
      example:
        sequenceNumber: 6
        lastUpdated: lastUpdated
        logSet: 1
        message: message
        type: INFO
      properties:
        sequenceNumber:
          description: The sequence number of the log entry.
          format: int32
          type: integer
        message:
          description: A detailed message describing the log event or error.
          type: string
        type:
          description: Type of log entry.
          enum:
          - INFO
          - WARN
          - ERROR
          - DEBUG
          type: string
        logSet:
          description: Identifier for the set of logs this entry belongs to.
          format: int32
          type: integer
        lastUpdated:
          description: The timestamp of the most recent update in epoch format for
            a specific Task Generation log
          type: string
      type: object
    TaskList:
      description: List of Tasks.
      example:
        data:
        - null
        - null
        meta:
          pagination:
            total: 0
            isEstimatedTotal: true
          sort:
          - sort
          - sort
      properties:
        meta:
          $ref: '#/components/schemas/TaskList_meta'
        data:
          description: An array of task objects.
          items:
            $ref: '#/components/schemas/TaskListItemDetails'
          type: array
      type: object
    TaskListItemDetails:
      allOf:
      - $ref: '#/components/schemas/TaskDetails'
      - $ref: '#/components/schemas/TaskListItemDetails_allOf'
      description: Task Object
      type: object
    TaskDetailsObject:
      description: Contains all details about the task.
      example:
        data:
          scheduleName: scheduleName
          lastUpdatedBy: lastUpdatedBy
          expectedStartDate: expectedStartDate
          reason: reason
          notes: notes
          role: role
          description: description
          mandatoryTaskApproveNotes: true
          lastUpdated: lastUpdated
          taskType: WAIT_FOR_DATA
          expectedEndDate: expectedEndDate
          immediate: true
          actualStartDate: actualStartDate
          action: true
          outputFormat: outputFormat
          user: user
          status: COMPLETED
      properties:
        data:
          $ref: '#/components/schemas/TaskDetails'
      type: object
    TaskDetails:
      description: Contains all details about the task.
      example:
        scheduleName: scheduleName
        lastUpdatedBy: lastUpdatedBy
        expectedStartDate: expectedStartDate
        reason: reason
        notes: notes
        role: role
        description: description
        mandatoryTaskApproveNotes: true
        lastUpdated: lastUpdated
        taskType: WAIT_FOR_DATA
        expectedEndDate: expectedEndDate
        immediate: true
        actualStartDate: actualStartDate
        action: true
        outputFormat: outputFormat
        user: user
        status: COMPLETED
      properties:
        lastUpdatedBy:
          description: Indicates the username of the person who last updated task
          type: string
        description:
          description: Task description.
          type: string
        taskType:
          description: Type of the task.
          enum:
          - WAIT_FOR_DATA
          - CUSTOM_DATA
          - CREATE_MANUAL_DATA
          - CREATE_FILTERED_DATA
          - GET_DATA
          - GENERATE_PREVIEW
          - SIGNOFF_DATA
          - CUSTOM_GENERATE
          - GENERATE_REPORT
          - SIGNOFF_REPORT
          - CUSTOM_DELIVERY
          - EMAIL_REPORT
          - POST_REPORT
          - FTP_REPORT
          - CUSTOM_OTHER
          - COPY_REPORT_FILE
          - PACKAGE_REPORTS
          type: string
        status:
          description: Status of the task.
          enum:
          - COMPLETED
          - IN_PROGRESS
          - AWAITING_CORRECTION
          - PENDING
          - SKIPPED
          - FAILED_REJECTED
          type: string
        expectedStartDate:
          description: Expected start date of the task.
          type: string
        expectedEndDate:
          description: Expected end date of the task.
          type: string
        actualStartDate:
          description: Actual start date of the task.
          type: string
        notes:
          description: Notes for the task.
          type: string
        immediate:
          description: Boolean flag to indicate whether the task is an immediate task.
          type: boolean
        reason:
          description: Reason for the task action.
          type: string
        outputFormat:
          description: Output Format for thet task.
          type: string
        scheduleName:
          description: Name of the schedule to which this task belongs to.
          type: string
        mandatoryTaskApproveNotes:
          description: The flag if task approve notes are mandatory for the task
          type: boolean
        lastUpdated:
          description: The timestamp of the most recent update in epoch format for
            a specific task
          type: string
        role:
          description: Role associated with the task.
          type: string
        action:
          description: Indicates if a task is actionable by the user.
          type: boolean
        user:
          description: User associated with the task.
          type: string
      type: object
    TaskPatchRequestBody:
      description: Request body for task patch operation, other task properties will
        be ignored.
      example:
        data:
          expectedStartDate: expectedStartDate
          reason: reason
          expectedEndDate: expectedEndDate
          notes: notes
          role: role
          actualStartDate: actualStartDate
          action: action
          user: user
          status: COMPLETED
      properties:
        data:
          $ref: '#/components/schemas/TaskPatchRequestBody_data'
      type: object
    TaskPatchResponseObject:
      description: Response body for task patch operation.
      example:
        data:
          task:
            scheduleName: scheduleName
            lastUpdatedBy: lastUpdatedBy
            expectedStartDate: expectedStartDate
            reason: reason
            notes: notes
            role: role
            description: description
            mandatoryTaskApproveNotes: true
            lastUpdated: lastUpdated
            taskType: WAIT_FOR_DATA
            expectedEndDate: expectedEndDate
            immediate: true
            actualStartDate: actualStartDate
            action: true
            outputFormat: outputFormat
            user: user
            status: COMPLETED
          messages:
          - messages
          - messages
      properties:
        data:
          $ref: '#/components/schemas/TaskPatchResponse'
      type: object
    TaskPatchResponse:
      description: Response with task details and error messages if there are any.
      example:
        task:
          scheduleName: scheduleName
          lastUpdatedBy: lastUpdatedBy
          expectedStartDate: expectedStartDate
          reason: reason
          notes: notes
          role: role
          description: description
          mandatoryTaskApproveNotes: true
          lastUpdated: lastUpdated
          taskType: WAIT_FOR_DATA
          expectedEndDate: expectedEndDate
          immediate: true
          actualStartDate: actualStartDate
          action: true
          outputFormat: outputFormat
          user: user
          status: COMPLETED
        messages:
        - messages
        - messages
      properties:
        task:
          $ref: '#/components/schemas/TaskDetails'
        messages:
          description: Array of error messages.
          items:
            type: string
          type: array
      type: object
    TaskHistoryList:
      description: List of task history events.
      example:
        data:
        - actionType: actionType
          taskType: taskType
          dateAndTime: dateAndTime
          notes: notes
          description: description
          details: details
          reasonCode: reasonCode
        - actionType: actionType
          taskType: taskType
          dateAndTime: dateAndTime
          notes: notes
          description: description
          details: details
          reasonCode: reasonCode
        meta:
          pagination:
            total: 0
            isEstimatedTotal: true
          sort:
          - sort
          - sort
      properties:
        meta:
          $ref: '#/components/schemas/TaskHistoryList_meta'
        data:
          description: An array of task history objects.
          items:
            $ref: '#/components/schemas/TaskHistoryObject'
          type: array
      type: object
    TaskHistoryObject:
      description: Details of an individual task history event.
      example:
        actionType: actionType
        taskType: taskType
        dateAndTime: dateAndTime
        notes: notes
        description: description
        details: details
        reasonCode: reasonCode
      properties:
        taskType:
          description: The task type of the task.
          type: string
        description:
          description: A description of the task.
          type: string
        dateAndTime:
          description: The timestamp of the task history event in epoch format
          type: string
        actionType:
          description: The action type of the task history event.
          type: string
        notes:
          description: The notes associated with the task history event.
          type: string
        reasonCode:
          description: The reason code associated with the task history event.
          type: string
        details:
          description: The details associated with the action of the task history
            event.
          type: string
      type: object
    ScimUser:
      description: A user object representing identity information, including attributes
        like username, email, with links for retrieving additional group details.
      properties:
        schemas:
          description: Array of schema URIs applicable to this resource.
          items:
            type: string
          type: array
        id:
          description: Unique identifier for the user.
          type: string
        userName:
          description: Username used for identifying and logging in the user.
          type: string
        name:
          $ref: '#/components/schemas/ScimUser_name'
        userType:
          description: Type of user.
          type: string
        active:
          description: Indicates whether the user account is active.
          type: boolean
        authenticatedUserName:
          description: Authenticated username used for the SSO logins.
          type: string
        tenant:
          description: Tenancy code in which user was created.
          type: string
        phoneNumbers:
          description: Array of phone numbers associated with the user.
          items:
            $ref: '#/components/schemas/ScimPhone'
          type: array
        emails:
          description: Array of email addresses linked to the user account.
          items:
            $ref: '#/components/schemas/ScimEmail'
          type: array
        photos:
          description: Array of URLs to the user's profile pictures.
          items:
            $ref: '#/components/schemas/ScimPhoto'
          type: array
        tenancies:
          description: Array of tenancies assigned to the user.
          items:
            $ref: '#/components/schemas/Tenancy'
          type: array
        groups:
          description: Array of groups/roles assigned to the user.
          items:
            $ref: '#/components/schemas/ScimUserGroup'
          type: array
        domainCode:
          description: Domain code representing the user's domain.
          type: string
        isAdministrator:
          description: Flag indicating if the user has admin privileges.
          type: boolean
        meta:
          $ref: '#/components/schemas/ScimMeta'
      type: object
    CreatedScimUserJSONResponse:
      description: Response object for creating a new SCIM user, containing core identity
        details, contact information, and account settings.
      properties:
        schemas:
          description: Array listing the schema URIs associated with the user resource.
          items:
            type: string
          type: array
        id:
          description: Unique identifier for the newly created user.
          type: string
        userName:
          description: Username used for identifying and logging in the user.
          type: string
        name:
          $ref: '#/components/schemas/ScimUser_name'
        userType:
          description: Type of user.
          type: string
        preferredLanguage:
          description: User's preferred language.
          type: string
        active:
          description: Indicates if the user's account is currently active.
          type: boolean
        authenticatedUserName:
          description: Authenticated username used by SSO login.
          type: string
        tenant:
          description: Tenancy code in which the user was created.
          type: string
        phoneNumbers:
          description: Array of phone numbers for the user, each with a type and value.
          items:
            $ref: '#/components/schemas/ScimPhone'
          type: array
        emails:
          description: Array of email addresses linked to the user account.
          items:
            $ref: '#/components/schemas/ScimEmail'
          type: array
        tenancies:
          description: List of tenancies the user is associated with.
          items:
            $ref: '#/components/schemas/Tenancy'
          type: array
        photos:
          description: Array of URLs to the user's profile photos or avatars.
          items:
            $ref: '#/components/schemas/ScimPhoto'
          type: array
        domainCode:
          description: Domain code representing the user's domain.
          type: string
        isAdministrator:
          description: Flag indicating if the user has admin privileges.
          type: boolean
        meta:
          $ref: '#/components/schemas/CreatedScimUserJSONResponse_meta'
      type: object
    CreateScimUserJSONRequest:
      description: Payload to create a new user in the system, including attributes
        like username, password, contact information, and tenant details.
      properties:
        userName:
          description: Unique identifier for the user within the system, typically
            their loginID.
          type: string
        password:
          description: Password associated with the user's account for authentication.
          type: string
        name:
          $ref: '#/components/schemas/CreateScimUserJSONRequest_name'
        preferredLanguage:
          description: The preferred language of the user.
          type: string
        active:
          description: Indicates whether the user account is active.
          type: boolean
        authenticatedUserName:
          description: Authenticated username used by the SSO logins.
          type: string
        tenant:
          description: Tenancy code in which user should be created.
          type: string
        domainCode:
          description: Domain associated with the user
          type: string
        phoneNumbers:
          description: A list of phone numbers associated with the user.
          items:
            $ref: '#/components/schemas/ScimPhone'
          type: array
        emails:
          description: A list of email addresses associated with the user.
          items:
            $ref: '#/components/schemas/ScimEmail'
          type: array
        photos:
          description: A list of profile photos or images associated with the user.
          items:
            $ref: '#/components/schemas/ScimPhoto'
          type: array
        tenancies:
          description: A list of tenancies that need to be assigned to the user.
          items:
            $ref: '#/components/schemas/Tenancy'
          type: array
      type: object
    ScimUserPatchRequestBody:
      description: Defines the request payload for updating a user's attributes. The
        patch operation modifies specific fields of a user.
      properties:
        schemas:
          description: A list of URIs that indicate the namespaces of the schema used
            in this request.
          items:
            description: A URI string representing the namespace applicable to the
              patch request.
            type: string
          type: array
        Operations:
          description: A list of operations defining the specific changes to apply
            to the user's attributes. Each operation specifies an action (e.g., add,
            remove, replace) the target attribute and value
          items:
            $ref: '#/components/schemas/ScimUserPatchOperation'
          type: array
      type: object
    ScimGroupPatchRequestBody:
      description: Defines the request payload for updating a group's attributes in
        SCIM. This patch operation allows for specific modifications to a group's
        properties.
      properties:
        schemas:
          description: An array of URIs representing the schema namespaces applied
            to this request.
          items:
            description: A URI string for the schema namespace associated with the
              patch request.
            type: string
          type: array
        Operations:
          description: A list of operations specifying the actions to perform on the
            group's attributes, such as adding, removing, or updating members.
          items:
            $ref: '#/components/schemas/ScimGroupPatchOperation'
          type: array
      type: object
    ScimUserPatchOperation:
      description: Patch operation to modify a user's attributes. It includes the
        action to be performed, the attribute to modify, and the new value.
      properties:
        op:
          description: Action to perform on the attribute.
          type: string
        path:
          description: The user attribute path to modify.
          type: string
        value:
          description: The value to set for the attribute.
          type: string
      type: object
    ScimGroupPatchOperation:
      description: Patch operation to modify a group's attributes. It defines the
        action to take, the attribute to modify, and the new value.
      properties:
        op:
          description: Action to perform on the group attribute.
          type: string
        path:
          description: The group/role attribute path to modify.
          type: string
        value:
          $ref: '#/components/schemas/ScimGroupPatchOperation_value'
      type: object
    ScimPhone:
      description: User's phone number details.
      properties:
        value:
          description: The phone number of the user.
          type: string
        type:
          description: The type of phone number (e.g., home, mobile, work).
          type: string
        primary:
          description: Indicates if this is the primary phone number for the user.
          type: boolean
      type: object
    ScimEmail:
      description: User's email address details.
      properties:
        value:
          description: The email address of the user.
          type: string
        type:
          description: The type of email address (e.g., personal, work).
          type: string
        primary:
          description: Indicates if this is the primary email address for the user.
          type: boolean
      type: object
    ScimPhoto:
      description: User's profile photo details.
      properties:
        value:
          description: The URL to the user's profile photo.
          type: string
        type:
          description: The type of photo (e.g., profile picture, avatar).
          type: string
        primary:
          description: Indicates if this is the primary photo for the user.
          type: boolean
      type: object
    Tenancy:
      description: Represents tenancy information.
      properties:
        value:
          description: Tenancy code.
          type: string
      type: object
    ScimGroup:
      description: Role details, defining permissions and access.
      properties:
        schemas:
          description: List of schema URIs for the group/role.
          items:
            type: string
          type: array
        id:
          description: Unique identifier of the group/role.
          type: string
        displayName:
          description: The display name of the group/role.
          type: string
        members:
          description: A list of users assigned to the group/role.
          items:
            $ref: '#/components/schemas/ScimGroupMember'
          type: array
        tenant:
          description: Tenant associated with the group/role.
          type: string
        domainCode:
          description: Domain code for the group.
          type: string
        meta:
          $ref: '#/components/schemas/ScimMeta'
      type: object
    ScimGroupMember:
      description: User in a group/role.
      properties:
        value:
          description: Unique identifier of the user.
          type: string
        $ref:
          description: A callback link which can be used to get the information of
            the user
          type: string
        type:
          description: Type of the resource.
          type: string
      type: object
    ScimUserGroup:
      description: Group/role the user was assigned with.
      properties:
        value:
          description: Unique identifier of the user's group.
          type: string
        $ref:
          description: A callback link which can be used to get the information of
            the group
          type: string
        type:
          description: Type of the resource.
          type: string
        display:
          description: Name of the group
          type: string
      type: object
    ScimGroupListResponse:
      description: List of groups/roles.
      properties:
        totalResults:
          description: The total number of groups/roles available.
          type: integer
        itemsPerPage:
          description: The number of groups per page.
          type: integer
        startIndex:
          description: The starting index for the returned groups.
          type: integer
        Resources:
          description: List of groups/roles returned in the response.
          items:
            $ref: '#/components/schemas/ScimGroup'
          type: array
      type: object
    ScimUserListResponse:
      description: List of users with pagination details.
      properties:
        totalResults:
          description: The total number of users available.
          type: integer
        itemsPerPage:
          description: The number of users per page.
          type: integer
        startIndex:
          description: The starting index for the returned users.
          type: integer
        Resources:
          description: The list of users returned in the response.
          items:
            $ref: '#/components/schemas/ScimUser'
          type: array
      type: object
    ScimMeta:
      description: Metadata information for the resource.
      properties:
        resourceType:
          description: The type of resource (e.g., VRSUser, VRSGroup).
          type: string
        created:
          description: The timestamp of when the resource was created.
          type: string
        lastModified:
          description: The timestamp of when the resource was last modified.
          type: string
        location:
          description: The URI location of the resource.
          type: string
      type: object
    Error:
      description: Represents an error response with an ID, code, and title.
      properties:
        id:
          description: Unique identifier for the error.
          type: string
        code:
          description: The error code.
          type: string
        title:
          description: A short description of the error.
          type: string
      type: object
    ErrorList:
      description: List of errors.
      properties:
        errors:
          description: A list of errors encountered.
          items:
            $ref: '#/components/schemas/Error'
          type: array
      type: object
    ScimError:
      description: Represents an error with detailed information, status, and schema.
      properties:
        schemas:
          description: Schemas associated with the error.
          items:
            type: string
          type: array
        detail:
          description: Detailed description of the error.
          type: string
        status:
          description: HTTP status code related to the error.
          type: string
      type: object
    VersionResponseBody:
      description: details of VRS WRS versions
      example:
        data:
          wrsVersion: wrsVersion
          vrsVersion: vrsVersion
          dbServer: dbServer
      properties:
        data:
          $ref: '#/components/schemas/VersionResponseBody_data'
      type: object
    DataSourceList_meta_pagination:
      description: Pagination information for the Data Source list response.
      example:
        total: 0
        isEstimatedTotal: true
      properties:
        total:
          description: The total number of Data Sources available in the response.
          type: integer
        isEstimatedTotal:
          description: A flag that specifies if the total number of records returned
            is an estimate (true) or an exact count (false).
          type: boolean
      type: object
    DataSourceList_meta:
      description: Meta data of Data Source List.
      example:
        pagination:
          total: 0
          isEstimatedTotal: true
        sort:
        - sort
        - sort
      properties:
        pagination:
          $ref: '#/components/schemas/DataSourceList_meta_pagination'
        sort:
          description: A set of fields used in sorting the Data Source list.
          items:
            type: string
          type: array
      type: object
    EntityFieldValueDTO_meta_pagination:
      description: Pagination information for the Entity Values.
      example:
        total: 0
        isEstimatedTotal: true
      properties:
        total:
          description: The total number of Entity Values available in the response.
          type: integer
        isEstimatedTotal:
          description: A flag that specifies if the total number of records returned
            is an estimate (true) or an exact count (false).
          type: boolean
      type: object
    EntityFieldValueDTO_meta:
      description: Meta data of Entity Values.
      example:
        pagination:
          total: 0
          isEstimatedTotal: true
        sort:
        - sort
        - sort
      properties:
        pagination:
          $ref: '#/components/schemas/EntityFieldValueDTO_meta_pagination'
        sort:
          description: Set of Entity fields used in sorting the Entity values.
          items:
            type: string
          type: array
      type: object
    ReportInstanceList_meta_pagination:
      description: Pagination information for the List of Report instance.
      example:
        total: 0
        isEstimatedTotal: true
      properties:
        total:
          description: The total number of Report instances available in the response.
          type: integer
        isEstimatedTotal:
          description: A flag that specifies if the total number of records returned
            is an estimate (true) or an exact count (false).
          type: boolean
      type: object
    ReportInstanceList_meta:
      description: Meta data of Report instance list.
      example:
        pagination:
          total: 0
          isEstimatedTotal: true
      properties:
        pagination:
          $ref: '#/components/schemas/ReportInstanceList_meta_pagination'
      type: object
    ReportDefinitionList_meta_pagination:
      description: Pagination information for the list of Report Definition.
      example:
        total: 0
        isEstimatedTotal: true
      properties:
        total:
          description: The total number of Report Definitions available in the response.
          type: integer
        isEstimatedTotal:
          description: A flag that specifies if the total number of records returned
            is an estimate (true) or an exact count (false).
          type: boolean
      type: object
    ReportDefinitionList_meta:
      description: Meta data of Report Definition list.
      example:
        pagination:
          total: 0
          isEstimatedTotal: true
      properties:
        pagination:
          $ref: '#/components/schemas/ReportDefinitionList_meta_pagination'
      type: object
    ScheduleDefinitionsList_meta_pagination:
      description: Pagination information for the list of Schedule Definition.
      example:
        total: 0
        isEstimatedTotal: true
      properties:
        total:
          description: The total number of Schedule Definitions available in the response.
          type: integer
        isEstimatedTotal:
          description: A flag that specifies if the total number of records returned
            is an estimate (true) or an exact count (false).
          type: boolean
      type: object
    ScheduleDefinitionsList_meta:
      description: Meta data of list of Schedule Definition.
      example:
        pagination:
          total: 0
          isEstimatedTotal: true
        sort:
        - sort
        - sort
      properties:
        pagination:
          $ref: '#/components/schemas/ScheduleDefinitionsList_meta_pagination'
        sort:
          description: A set of fields used in sorting the Schedule Definition list.
          items:
            type: string
          type: array
      type: object
    ScheduleDefinition_ownerRole:
      description: The owner of the Schedule Definition (Role)
      example:
        code: code
        roleId: 2
        name: name
      properties:
        roleId:
          description: Unique ID of Owner role for the Schedule Definition.
          format: int32
          type: integer
        name:
          description: Name of Owner role for the Schedule Definition.
          type: string
        code:
          description: Code of Owner role for the Schedule Definition.
          type: string
      type: object
    SchedulesList_meta_pagination:
      description: Pagination information for the list of Schedules.
      example:
        total: 0
        isEstimatedTotal: true
      properties:
        total:
          description: The total number of Schedules available in the response.
          type: integer
        isEstimatedTotal:
          description: A flag that specifies if the total number of records returned
            is an estimate (true) or an exact count (false).
          type: boolean
      type: object
    SchedulesList_meta:
      description: Meta data of list of Schedules.
      example:
        pagination:
          total: 0
          isEstimatedTotal: true
        sort:
        - sort
        - sort
      properties:
        pagination:
          $ref: '#/components/schemas/SchedulesList_meta_pagination'
        sort:
          description: A set of fields used in sorting the Schedule list.
          items:
            type: string
          type: array
      type: object
    ScheduleAPIDTO_allOf:
      properties:
        hasTaskGenIssues:
          description: A flag that specifies if task generation has warning or error
            logs.
          type: boolean
      type: object
    ScheduleGenerationLogList_meta_pagination:
      description: Pagination information for the Task Generation Logs.
      example:
        total: 0
        isEstimatedTotal: true
      properties:
        total:
          description: The total number of Task Generation logs available in the response.
          type: integer
        isEstimatedTotal:
          description: A flag that specifies if the total number of records returned
            is an estimate (true) or an exact count (false).
          type: boolean
      type: object
    ScheduleGenerationLogList_meta:
      description: Meta data of Task Generation Logs.
      example:
        pagination:
          total: 0
          isEstimatedTotal: true
        sort:
        - sort
        - sort
      properties:
        pagination:
          $ref: '#/components/schemas/ScheduleGenerationLogList_meta_pagination'
        sort:
          description: A set of fields used in sorting the Task Generation Logs.
          items:
            type: string
          type: array
      type: object
    TaskList_meta_pagination:
      description: Pagination information for the list of Tasks.
      example:
        total: 0
        isEstimatedTotal: true
      properties:
        total:
          description: The total number of Tasks available in the response.
          type: integer
        isEstimatedTotal:
          description: A flag that specifies if the total number of records returned
            is an estimate (true) or an exact count (false).
          type: boolean
      type: object
    TaskList_meta:
      description: Meta data of list of Tasks.
      example:
        pagination:
          total: 0
          isEstimatedTotal: true
        sort:
        - sort
        - sort
      properties:
        pagination:
          $ref: '#/components/schemas/TaskList_meta_pagination'
        sort:
          description: A set of fields used in sorting the Task list.
          items:
            type: string
          type: array
      type: object
    TaskListItemDetails_allOf:
      properties:
        taskId:
          description: Unique identifier of the Task.
          format: int32
          type: integer
        escalationLevel:
          description: The escalation level of the task.
          format: int32
          type: integer
        order:
          description: The order of the task.
          format: int32
          type: integer
      type: object
    TaskPatchRequestBody_data:
      description: Task data object.
      example:
        expectedStartDate: expectedStartDate
        reason: reason
        expectedEndDate: expectedEndDate
        notes: notes
        role: role
        actualStartDate: actualStartDate
        action: action
        user: user
        status: COMPLETED
      properties:
        status:
          description: Status of the task, status cannot be changed to IN_PROGRESS.
            It is case-sensitive and should be in upper case.
          enum:
          - COMPLETED
          - IN_PROGRESS
          - AWAITING_CORRECTION
          - PENDING
          - SKIPPED
          - FAILED_REJECTED
          type: string
        expectedStartDate:
          description: Expected start date of task, date format should be 'd MMMMM
            yyyy HH:mm:ss' and will be converted to server time zone.
          type: string
        expectedEndDate:
          description: Expected end date of task, date format should be 'd MMMMM yyyy
            HH:mm:ss' and will be converted to server time zone.
          type: string
        actualStartDate:
          description: Actual start date of task, date format should be 'd MMMMM yyyy
            HH:mm:ss' and will be converted to server time zone.
          type: string
        notes:
          description: Notes for the task.
          type: string
        role:
          description: Role assigned to the task, It can't be null or empty.
          type: string
        user:
          description: User name assigned to the task.
          type: string
        action:
          description: task action to be performed, Approve and Reject are the possible
            values.
          type: string
        reason:
          description: Reason code for rejection or approval, It will be validated
            against values from VRSReasonCodes.properties.
          type: string
      type: object
    TaskHistoryList_meta_pagination:
      description: Pagination information for the Task History Events.
      example:
        total: 0
        isEstimatedTotal: true
      properties:
        total:
          description: The total number of Task History Events available in the response.
          type: integer
        isEstimatedTotal:
          description: A flag that specifies if the total number of records returned
            is an estimate (true) or an exact count (false).
          type: boolean
      type: object
    TaskHistoryList_meta:
      description: Meta data of list of Task History Events.
      example:
        pagination:
          total: 0
          isEstimatedTotal: true
        sort:
        - sort
        - sort
      properties:
        pagination:
          $ref: '#/components/schemas/TaskHistoryList_meta_pagination'
        sort:
          description: A set of fields used in sorting the Task History Events.
          items:
            type: string
          type: array
      type: object
    ScimUser_name:
      description: User's full name object.
      properties:
        formatted:
          description: Full formatted name of the user.
          type: string
      type: object
    CreatedScimUserJSONResponse_meta:
      description: Metadata about the user resource.
      properties:
        resourceType:
          description: Type of the resource.
          type: string
        created:
          description: Timestamp indicating when the user resource was created.
          type: string
        lastModified:
          description: Timestamp of the last modification to the user resource.
          type: string
        location:
          description: URL indicating the location of the user resource.
          type: string
      type: object
    CreateScimUserJSONRequest_name:
      description: User's full name object.
      properties:
        formatted:
          description: The full formatted name of the user.
          type: string
      type: object
    ScimGroupPatchOperation_value:
      description: The new value for the attribute.
      properties:
        display:
          description: The value to set for the group's/role's attribute.
          type: string
        $ref:
          description: A reference to another object.
          type: string
        value:
          description: The actual value for the attribute.
          type: string
      type: object
    VersionResponseBody_data:
      description: Version details of VRS and WRS systems.
      example:
        wrsVersion: wrsVersion
        vrsVersion: vrsVersion
        dbServer: dbServer
      properties:
        vrsVersion:
          description: VRS version
          type: string
        wrsVersion:
          description: WRS version
          type: string
        dbServer:
          description: DB version
          type: string
      type: object
  securitySchemes:
    FactSetOAuth2:
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: https://auth.factset.com/as/token.oauth2
      type: oauth2
    FactSetApiKey:
      scheme: basic
      type: http

