/*
 * VRS API documentation
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Vermilion.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Vermilion.JSON;


/**
 * Defines the properties and attributes of a record set field.
 */
@ApiModel(description = "Defines the properties and attributes of a record set field.")
@JsonPropertyOrder({
  RecordSetFields.JSON_PROPERTY_FIELD_TYPE,
  RecordSetFields.JSON_PROPERTY_FORMAT,
  RecordSetFields.JSON_PROPERTY_ID,
  RecordSetFields.JSON_PROPERTY_HIDE,
  RecordSetFields.JSON_PROPERTY_NAME,
  RecordSetFields.JSON_PROPERTY_ORDER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class RecordSetFields implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * The type of the field indicating the kind of data it holds.
   */
  public enum FieldTypeEnum {
    BOOLEAN("BOOLEAN"),
    
    COLOUR("COLOUR"),
    
    DATETIME("DATETIME"),
    
    DECIMAL("DECIMAL"),
    
    FONT("FONT"),
    
    FONTSIZE("FONTSIZE"),
    
    HTML("HTML"),
    
    INTEGER("INTEGER"),
    
    TEXT("TEXT");

    private String value;

    FieldTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FieldTypeEnum fromValue(String value) {
      for (FieldTypeEnum b : FieldTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FIELD_TYPE = "fieldType";
  private FieldTypeEnum fieldType;

  public static final String JSON_PROPERTY_FORMAT = "format";
  private String format;

  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_HIDE = "hide";
  private String hide;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ORDER = "order";
  private Integer order;

  public RecordSetFields() { 
  }

  public RecordSetFields fieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
    return this;
  }

   /**
   * The type of the field indicating the kind of data it holds.
   * @return fieldType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The type of the field indicating the kind of data it holds.")
  @JsonProperty(JSON_PROPERTY_FIELD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FieldTypeEnum getFieldType() {
    return fieldType;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
  }


  public RecordSetFields format(String format) {
    this.format = format;
    return this;
  }

   /**
   * The format applied to the field&#39;s value.
   * @return format
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The format applied to the field's value.")
  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFormat() {
    return format;
  }


  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormat(String format) {
    this.format = format;
  }


  public RecordSetFields id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Unique identifier for the field.
   * @return id
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the field.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public RecordSetFields hide(String hide) {
    this.hide = hide;
    return this;
  }

   /**
   * Indicates whether the field is hidden.
   * @return hide
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the field is hidden.")
  @JsonProperty(JSON_PROPERTY_HIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHide() {
    return hide;
  }


  @JsonProperty(JSON_PROPERTY_HIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHide(String hide) {
    this.hide = hide;
  }


  public RecordSetFields name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the field.
   * @return name
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The name of the field.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public RecordSetFields order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * The ordering of the record set field.
   * @return order
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The ordering of the record set field.")
  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOrder() {
    return order;
  }


  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrder(Integer order) {
    this.order = order;
  }


  /**
   * Return true if this RecordSetFields object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordSetFields recordSetFields = (RecordSetFields) o;
    return Objects.equals(this.fieldType, recordSetFields.fieldType) &&
        Objects.equals(this.format, recordSetFields.format) &&
        Objects.equals(this.id, recordSetFields.id) &&
        Objects.equals(this.hide, recordSetFields.hide) &&
        Objects.equals(this.name, recordSetFields.name) &&
        Objects.equals(this.order, recordSetFields.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldType, format, id, hide, name, order);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordSetFields {\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    hide: ").append(toIndentedString(hide)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

