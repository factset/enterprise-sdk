/*
 * VRS API documentation
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Vermilion.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.Vermilion.models.TaskDetails;
import com.factset.sdk.Vermilion.models.TaskListItemDetailsAllOf;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Vermilion.JSON;


/**
 * Task Object
 */
@ApiModel(description = "Task Object")
@JsonPropertyOrder({
  TaskListItemDetails.JSON_PROPERTY_LAST_UPDATED_BY,
  TaskListItemDetails.JSON_PROPERTY_DESCRIPTION,
  TaskListItemDetails.JSON_PROPERTY_TASK_TYPE,
  TaskListItemDetails.JSON_PROPERTY_STATUS,
  TaskListItemDetails.JSON_PROPERTY_EXPECTED_START_DATE,
  TaskListItemDetails.JSON_PROPERTY_EXPECTED_END_DATE,
  TaskListItemDetails.JSON_PROPERTY_ACTUAL_START_DATE,
  TaskListItemDetails.JSON_PROPERTY_NOTES,
  TaskListItemDetails.JSON_PROPERTY_IMMEDIATE,
  TaskListItemDetails.JSON_PROPERTY_REASON,
  TaskListItemDetails.JSON_PROPERTY_OUTPUT_FORMAT,
  TaskListItemDetails.JSON_PROPERTY_SCHEDULE_NAME,
  TaskListItemDetails.JSON_PROPERTY_MANDATORY_TASK_APPROVE_NOTES,
  TaskListItemDetails.JSON_PROPERTY_LAST_UPDATED,
  TaskListItemDetails.JSON_PROPERTY_ROLE,
  TaskListItemDetails.JSON_PROPERTY_ACTION,
  TaskListItemDetails.JSON_PROPERTY_USER,
  TaskListItemDetails.JSON_PROPERTY_TASK_ID,
  TaskListItemDetails.JSON_PROPERTY_ESCALATION_LEVEL,
  TaskListItemDetails.JSON_PROPERTY_ORDER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class TaskListItemDetails implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_LAST_UPDATED_BY = "lastUpdatedBy";
  private String lastUpdatedBy;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  /**
   * Type of the task.
   */
  public enum TaskTypeEnum {
    WAIT_FOR_DATA("WAIT_FOR_DATA"),
    
    CUSTOM_DATA("CUSTOM_DATA"),
    
    CREATE_MANUAL_DATA("CREATE_MANUAL_DATA"),
    
    CREATE_FILTERED_DATA("CREATE_FILTERED_DATA"),
    
    GET_DATA("GET_DATA"),
    
    GENERATE_PREVIEW("GENERATE_PREVIEW"),
    
    SIGNOFF_DATA("SIGNOFF_DATA"),
    
    CUSTOM_GENERATE("CUSTOM_GENERATE"),
    
    GENERATE_REPORT("GENERATE_REPORT"),
    
    SIGNOFF_REPORT("SIGNOFF_REPORT"),
    
    CUSTOM_DELIVERY("CUSTOM_DELIVERY"),
    
    EMAIL_REPORT("EMAIL_REPORT"),
    
    POST_REPORT("POST_REPORT"),
    
    FTP_REPORT("FTP_REPORT"),
    
    CUSTOM_OTHER("CUSTOM_OTHER"),
    
    COPY_REPORT_FILE("COPY_REPORT_FILE"),
    
    PACKAGE_REPORTS("PACKAGE_REPORTS");

    private String value;

    TaskTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TaskTypeEnum fromValue(String value) {
      for (TaskTypeEnum b : TaskTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TASK_TYPE = "taskType";
  private TaskTypeEnum taskType;

  /**
   * Status of the task.
   */
  public enum StatusEnum {
    COMPLETED("COMPLETED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    AWAITING_CORRECTION("AWAITING_CORRECTION"),
    
    PENDING("PENDING"),
    
    SKIPPED("SKIPPED"),
    
    FAILED_REJECTED("FAILED_REJECTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_EXPECTED_START_DATE = "expectedStartDate";
  private String expectedStartDate;

  public static final String JSON_PROPERTY_EXPECTED_END_DATE = "expectedEndDate";
  private String expectedEndDate;

  public static final String JSON_PROPERTY_ACTUAL_START_DATE = "actualStartDate";
  private String actualStartDate;

  public static final String JSON_PROPERTY_NOTES = "notes";
  private String notes;

  public static final String JSON_PROPERTY_IMMEDIATE = "immediate";
  private Boolean immediate;

  public static final String JSON_PROPERTY_REASON = "reason";
  private String reason;

  public static final String JSON_PROPERTY_OUTPUT_FORMAT = "outputFormat";
  private String outputFormat;

  public static final String JSON_PROPERTY_SCHEDULE_NAME = "scheduleName";
  private String scheduleName;

  public static final String JSON_PROPERTY_MANDATORY_TASK_APPROVE_NOTES = "mandatoryTaskApproveNotes";
  private Boolean mandatoryTaskApproveNotes;

  public static final String JSON_PROPERTY_LAST_UPDATED = "lastUpdated";
  private String lastUpdated;

  public static final String JSON_PROPERTY_ROLE = "role";
  private String role;

  public static final String JSON_PROPERTY_ACTION = "action";
  private Boolean action;

  public static final String JSON_PROPERTY_USER = "user";
  private String user;

  public static final String JSON_PROPERTY_TASK_ID = "taskId";
  private Integer taskId;

  public static final String JSON_PROPERTY_ESCALATION_LEVEL = "escalationLevel";
  private Integer escalationLevel;

  public static final String JSON_PROPERTY_ORDER = "order";
  private Integer order;

  public TaskListItemDetails() { 
  }

  public TaskListItemDetails lastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

   /**
   * Indicates the username of the person who last updated task
   * @return lastUpdatedBy
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Indicates the username of the person who last updated task")
  @JsonProperty(JSON_PROPERTY_LAST_UPDATED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastUpdatedBy() {
    return lastUpdatedBy;
  }


  @JsonProperty(JSON_PROPERTY_LAST_UPDATED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  public TaskListItemDetails description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Task description.
   * @return description
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Task description.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public TaskListItemDetails taskType(TaskTypeEnum taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * Type of the task.
   * @return taskType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Type of the task.")
  @JsonProperty(JSON_PROPERTY_TASK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TaskTypeEnum getTaskType() {
    return taskType;
  }


  @JsonProperty(JSON_PROPERTY_TASK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskType(TaskTypeEnum taskType) {
    this.taskType = taskType;
  }


  public TaskListItemDetails status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the task.
   * @return status
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Status of the task.")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public TaskListItemDetails expectedStartDate(String expectedStartDate) {
    this.expectedStartDate = expectedStartDate;
    return this;
  }

   /**
   * Expected start date of the task.
   * @return expectedStartDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Expected start date of the task.")
  @JsonProperty(JSON_PROPERTY_EXPECTED_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpectedStartDate() {
    return expectedStartDate;
  }


  @JsonProperty(JSON_PROPERTY_EXPECTED_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpectedStartDate(String expectedStartDate) {
    this.expectedStartDate = expectedStartDate;
  }


  public TaskListItemDetails expectedEndDate(String expectedEndDate) {
    this.expectedEndDate = expectedEndDate;
    return this;
  }

   /**
   * Expected end date of the task.
   * @return expectedEndDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Expected end date of the task.")
  @JsonProperty(JSON_PROPERTY_EXPECTED_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpectedEndDate() {
    return expectedEndDate;
  }


  @JsonProperty(JSON_PROPERTY_EXPECTED_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpectedEndDate(String expectedEndDate) {
    this.expectedEndDate = expectedEndDate;
  }


  public TaskListItemDetails actualStartDate(String actualStartDate) {
    this.actualStartDate = actualStartDate;
    return this;
  }

   /**
   * Actual start date of the task.
   * @return actualStartDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Actual start date of the task.")
  @JsonProperty(JSON_PROPERTY_ACTUAL_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getActualStartDate() {
    return actualStartDate;
  }


  @JsonProperty(JSON_PROPERTY_ACTUAL_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActualStartDate(String actualStartDate) {
    this.actualStartDate = actualStartDate;
  }


  public TaskListItemDetails notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Notes for the task.
   * @return notes
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Notes for the task.")
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNotes() {
    return notes;
  }


  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotes(String notes) {
    this.notes = notes;
  }


  public TaskListItemDetails immediate(Boolean immediate) {
    this.immediate = immediate;
    return this;
  }

   /**
   * Boolean flag to indicate whether the task is an immediate task.
   * @return immediate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Boolean flag to indicate whether the task is an immediate task.")
  @JsonProperty(JSON_PROPERTY_IMMEDIATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getImmediate() {
    return immediate;
  }


  @JsonProperty(JSON_PROPERTY_IMMEDIATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImmediate(Boolean immediate) {
    this.immediate = immediate;
  }


  public TaskListItemDetails reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Reason for the task action.
   * @return reason
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Reason for the task action.")
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReason() {
    return reason;
  }


  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReason(String reason) {
    this.reason = reason;
  }


  public TaskListItemDetails outputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

   /**
   * Output Format for thet task.
   * @return outputFormat
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Output Format for thet task.")
  @JsonProperty(JSON_PROPERTY_OUTPUT_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOutputFormat() {
    return outputFormat;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
  }


  public TaskListItemDetails scheduleName(String scheduleName) {
    this.scheduleName = scheduleName;
    return this;
  }

   /**
   * Name of the schedule to which this task belongs to.
   * @return scheduleName
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Name of the schedule to which this task belongs to.")
  @JsonProperty(JSON_PROPERTY_SCHEDULE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScheduleName() {
    return scheduleName;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScheduleName(String scheduleName) {
    this.scheduleName = scheduleName;
  }


  public TaskListItemDetails mandatoryTaskApproveNotes(Boolean mandatoryTaskApproveNotes) {
    this.mandatoryTaskApproveNotes = mandatoryTaskApproveNotes;
    return this;
  }

   /**
   * The flag if task approve notes are mandatory for the task
   * @return mandatoryTaskApproveNotes
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The flag if task approve notes are mandatory for the task")
  @JsonProperty(JSON_PROPERTY_MANDATORY_TASK_APPROVE_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMandatoryTaskApproveNotes() {
    return mandatoryTaskApproveNotes;
  }


  @JsonProperty(JSON_PROPERTY_MANDATORY_TASK_APPROVE_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMandatoryTaskApproveNotes(Boolean mandatoryTaskApproveNotes) {
    this.mandatoryTaskApproveNotes = mandatoryTaskApproveNotes;
  }


  public TaskListItemDetails lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * The timestamp of the most recent update in epoch format for a specific task
   * @return lastUpdated
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The timestamp of the most recent update in epoch format for a specific task")
  @JsonProperty(JSON_PROPERTY_LAST_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastUpdated() {
    return lastUpdated;
  }


  @JsonProperty(JSON_PROPERTY_LAST_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public TaskListItemDetails role(String role) {
    this.role = role;
    return this;
  }

   /**
   * Role associated with the task.
   * @return role
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Role associated with the task.")
  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRole() {
    return role;
  }


  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRole(String role) {
    this.role = role;
  }


  public TaskListItemDetails action(Boolean action) {
    this.action = action;
    return this;
  }

   /**
   * Indicates if a task is actionable by the user.
   * @return action
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Indicates if a task is actionable by the user.")
  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAction() {
    return action;
  }


  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAction(Boolean action) {
    this.action = action;
  }


  public TaskListItemDetails user(String user) {
    this.user = user;
    return this;
  }

   /**
   * User associated with the task.
   * @return user
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "User associated with the task.")
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  public TaskListItemDetails taskId(Integer taskId) {
    this.taskId = taskId;
    return this;
  }

   /**
   * Unique identifier of the Task.
   * @return taskId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the Task.")
  @JsonProperty(JSON_PROPERTY_TASK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTaskId() {
    return taskId;
  }


  @JsonProperty(JSON_PROPERTY_TASK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskId(Integer taskId) {
    this.taskId = taskId;
  }


  public TaskListItemDetails escalationLevel(Integer escalationLevel) {
    this.escalationLevel = escalationLevel;
    return this;
  }

   /**
   * The escalation level of the task.
   * @return escalationLevel
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The escalation level of the task.")
  @JsonProperty(JSON_PROPERTY_ESCALATION_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEscalationLevel() {
    return escalationLevel;
  }


  @JsonProperty(JSON_PROPERTY_ESCALATION_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEscalationLevel(Integer escalationLevel) {
    this.escalationLevel = escalationLevel;
  }


  public TaskListItemDetails order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * The order of the task.
   * @return order
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The order of the task.")
  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOrder() {
    return order;
  }


  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrder(Integer order) {
    this.order = order;
  }


  /**
   * Return true if this TaskListItemDetails object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskListItemDetails taskListItemDetails = (TaskListItemDetails) o;
    return Objects.equals(this.lastUpdatedBy, taskListItemDetails.lastUpdatedBy) &&
        Objects.equals(this.description, taskListItemDetails.description) &&
        Objects.equals(this.taskType, taskListItemDetails.taskType) &&
        Objects.equals(this.status, taskListItemDetails.status) &&
        Objects.equals(this.expectedStartDate, taskListItemDetails.expectedStartDate) &&
        Objects.equals(this.expectedEndDate, taskListItemDetails.expectedEndDate) &&
        Objects.equals(this.actualStartDate, taskListItemDetails.actualStartDate) &&
        Objects.equals(this.notes, taskListItemDetails.notes) &&
        Objects.equals(this.immediate, taskListItemDetails.immediate) &&
        Objects.equals(this.reason, taskListItemDetails.reason) &&
        Objects.equals(this.outputFormat, taskListItemDetails.outputFormat) &&
        Objects.equals(this.scheduleName, taskListItemDetails.scheduleName) &&
        Objects.equals(this.mandatoryTaskApproveNotes, taskListItemDetails.mandatoryTaskApproveNotes) &&
        Objects.equals(this.lastUpdated, taskListItemDetails.lastUpdated) &&
        Objects.equals(this.role, taskListItemDetails.role) &&
        Objects.equals(this.action, taskListItemDetails.action) &&
        Objects.equals(this.user, taskListItemDetails.user) &&
        Objects.equals(this.taskId, taskListItemDetails.taskId) &&
        Objects.equals(this.escalationLevel, taskListItemDetails.escalationLevel) &&
        Objects.equals(this.order, taskListItemDetails.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastUpdatedBy, description, taskType, status, expectedStartDate, expectedEndDate, actualStartDate, notes, immediate, reason, outputFormat, scheduleName, mandatoryTaskApproveNotes, lastUpdated, role, action, user, taskId, escalationLevel, order);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskListItemDetails {\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    expectedStartDate: ").append(toIndentedString(expectedStartDate)).append("\n");
    sb.append("    expectedEndDate: ").append(toIndentedString(expectedEndDate)).append("\n");
    sb.append("    actualStartDate: ").append(toIndentedString(actualStartDate)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    immediate: ").append(toIndentedString(immediate)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    scheduleName: ").append(toIndentedString(scheduleName)).append("\n");
    sb.append("    mandatoryTaskApproveNotes: ").append(toIndentedString(mandatoryTaskApproveNotes)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    escalationLevel: ").append(toIndentedString(escalationLevel)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

