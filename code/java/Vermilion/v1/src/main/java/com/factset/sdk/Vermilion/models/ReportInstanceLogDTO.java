/*
 * VRS API documentation
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.Vermilion.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.Vermilion.JSON;


/**
 * Report Generation log details.
 */
@ApiModel(description = "Report Generation log details.")
@JsonPropertyOrder({
  ReportInstanceLogDTO.JSON_PROPERTY_SEQUENCE_NUMBER,
  ReportInstanceLogDTO.JSON_PROPERTY_MESSAGE,
  ReportInstanceLogDTO.JSON_PROPERTY_TYPE,
  ReportInstanceLogDTO.JSON_PROPERTY_UPDATE_DATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ReportInstanceLogDTO implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SEQUENCE_NUMBER = "sequenceNumber";
  private Integer sequenceNumber;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  /**
   * Indicates the type of log entry, either a general log or an error.
   */
  public enum TypeEnum {
    LOG("LOG"),
    
    ERROR("ERROR");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_UPDATE_DATE = "updateDate";
  private String updateDate;

  public ReportInstanceLogDTO() { 
  }

  public ReportInstanceLogDTO sequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Sequential number of the log entry.
   * @return sequenceNumber
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Sequential number of the log entry.")
  @JsonProperty(JSON_PROPERTY_SEQUENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSequenceNumber() {
    return sequenceNumber;
  }


  @JsonProperty(JSON_PROPERTY_SEQUENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public ReportInstanceLogDTO message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Detailed message describing the log event or error.
   * @return message
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Detailed message describing the log event or error.")
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
  }


  public ReportInstanceLogDTO type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Indicates the type of log entry, either a general log or an error.
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Indicates the type of log entry, either a general log or an error.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ReportInstanceLogDTO updateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

   /**
   * The date and time of the last update for this log entry.
   * @return updateDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The date and time of the last update for this log entry.")
  @JsonProperty(JSON_PROPERTY_UPDATE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpdateDate() {
    return updateDate;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
  }


  /**
   * Return true if this ReportInstanceLogDTO object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportInstanceLogDTO reportInstanceLogDTO = (ReportInstanceLogDTO) o;
    return Objects.equals(this.sequenceNumber, reportInstanceLogDTO.sequenceNumber) &&
        Objects.equals(this.message, reportInstanceLogDTO.message) &&
        Objects.equals(this.type, reportInstanceLogDTO.type) &&
        Objects.equals(this.updateDate, reportInstanceLogDTO.updateDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sequenceNumber, message, type, updateDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportInstanceLogDTO {\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

