/*
 * FactSet Mergers and Acquisitions API
 * The FactSet Mergers and Acquisitions API provides access to key transactions and pricing metrics on over 60,000 globally traded deals. Reference a Global Universe of Mergers and Acquisitions (M&A) transactions where the target of the deal is a Publicly traded Company. Review premiums, multiples and fundamental data to gather insights on deals and create predictive models based on different deal characteristics.    Monetary values returned by this API are converted and represented in USD.    This API is allows a limit of 10 requests per second and a maximum of 10 concurrent requests. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetMergersandAcquisitions.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetMergersandAcquisitions.JSON;


/**
 * Deal Value Object
 */
@ApiModel(description = "Deal Value Object")
@JsonPropertyOrder({
  DealValue.JSON_PROPERTY_BASE_EQUITY,
  DealValue.JSON_PROPERTY_TRANSACTION_VALUE,
  DealValue.JSON_PROPERTY_ENTERPRISE_VALUE,
  DealValue.JSON_PROPERTY_ANN_OFFER_PRICE_SHARE,
  DealValue.JSON_PROPERTY_BUYER_EXCHANGE_RATIO,
  DealValue.JSON_PROPERTY_TARGET_EXCHANGE_RATIO,
  DealValue.JSON_PROPERTY_CASH_SHARE,
  DealValue.JSON_PROPERTY_STOCK_SHARE,
  DealValue.JSON_PROPERTY_CHOICE,
  DealValue.JSON_PROPERTY_BUYER_SHARES_ISSUED,
  DealValue.JSON_PROPERTY_PERCENT_SOUGHT,
  DealValue.JSON_PROPERTY_SHARES_SOUGHT,
  DealValue.JSON_PROPERTY_SHARES_OWNED_PRIOR,
  DealValue.JSON_PROPERTY_PREMIUM1_DAY,
  DealValue.JSON_PROPERTY_PREMIUM5_DAY,
  DealValue.JSON_PROPERTY_PREMIUM30_DAY,
  DealValue.JSON_PROPERTY_PAYMENT_METHOD
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class DealValue implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_BASE_EQUITY = "baseEquity";
  private JsonNullable<BigDecimal> baseEquity = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_TRANSACTION_VALUE = "transactionValue";
  private JsonNullable<BigDecimal> transactionValue = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_ENTERPRISE_VALUE = "enterpriseValue";
  private JsonNullable<BigDecimal> enterpriseValue = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_ANN_OFFER_PRICE_SHARE = "annOfferPriceShare";
  private JsonNullable<BigDecimal> annOfferPriceShare = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_BUYER_EXCHANGE_RATIO = "buyerExchangeRatio";
  private JsonNullable<BigDecimal> buyerExchangeRatio = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_TARGET_EXCHANGE_RATIO = "targetExchangeRatio";
  private JsonNullable<BigDecimal> targetExchangeRatio = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_CASH_SHARE = "cashShare";
  private JsonNullable<BigDecimal> cashShare = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_STOCK_SHARE = "stockShare";
  private JsonNullable<BigDecimal> stockShare = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_CHOICE = "choice";
  private JsonNullable<Boolean> choice = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_BUYER_SHARES_ISSUED = "buyerSharesIssued";
  private JsonNullable<BigDecimal> buyerSharesIssued = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_PERCENT_SOUGHT = "percentSought";
  private JsonNullable<BigDecimal> percentSought = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_SHARES_SOUGHT = "sharesSought";
  private JsonNullable<BigDecimal> sharesSought = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_SHARES_OWNED_PRIOR = "sharesOwnedPrior";
  private JsonNullable<BigDecimal> sharesOwnedPrior = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_PREMIUM1_DAY = "premium1Day";
  private JsonNullable<BigDecimal> premium1Day = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_PREMIUM5_DAY = "premium5Day";
  private JsonNullable<BigDecimal> premium5Day = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_PREMIUM30_DAY = "premium30Day";
  private JsonNullable<BigDecimal> premium30Day = JsonNullable.<BigDecimal>undefined();

  /**
   * Gets or Sets paymentMethod
   */
  public enum PaymentMethodEnum {
    CASH("Cash"),
    
    CASH_STOCK("Cash & Stock"),
    
    CONVERTIBLE_PREFERRED_STOCK("Convertible Preferred Stock"),
    
    DEBT("Debt"),
    
    NOTES("Notes"),
    
    OTHER("Other"),
    
    PREFERRED_STOCK("Preferred Stock"),
    
    STOCK("Stock"),
    
    WARRANT_OPTIONS("Warrant / Options");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PAYMENT_METHOD = "paymentMethod";
  private JsonNullable<java.util.List<PaymentMethodEnum>> paymentMethod = JsonNullable.<java.util.List<PaymentMethodEnum>>undefined();

  public DealValue() { 
  }

  public DealValue baseEquity(BigDecimal baseEquity) {
    this.baseEquity = JsonNullable.<BigDecimal>of(baseEquity);
    return this;
  }

   /**
   * The total value of cash and all other forms of payment made to the Target – commonly cash and/or stock, though the calculation can include other methods of payment (e.g., notes, convertible debt, preferred stock, etc.) if disclosed and calculable. In transactions where multiple forms of payment are being made (e.g., cash and stock), the individual consideration components are calculated separately and then summed to arrive at the total Base Equity Value (e.g., cash component + stock component). Amounts returned are in USD.
   * @return baseEquity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "4178.77714", value = "The total value of cash and all other forms of payment made to the Target – commonly cash and/or stock, though the calculation can include other methods of payment (e.g., notes, convertible debt, preferred stock, etc.) if disclosed and calculable. In transactions where multiple forms of payment are being made (e.g., cash and stock), the individual consideration components are calculated separately and then summed to arrive at the total Base Equity Value (e.g., cash component + stock component). Amounts returned are in USD.")
  @JsonIgnore

  public BigDecimal getBaseEquity() {
        return baseEquity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BASE_EQUITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getBaseEquity_JsonNullable() {
    return baseEquity;
  }
  
  @JsonProperty(JSON_PROPERTY_BASE_EQUITY)
  public void setBaseEquity_JsonNullable(JsonNullable<BigDecimal> baseEquity) {
    this.baseEquity = baseEquity;
  }

  public void setBaseEquity(BigDecimal baseEquity) {
    this.baseEquity = JsonNullable.<BigDecimal>of(baseEquity);
  }


  public DealValue transactionValue(BigDecimal transactionValue) {
    this.transactionValue = JsonNullable.<BigDecimal>of(transactionValue);
    return this;
  }

   /**
   * Base Equity Value plus the value of the target’s outstanding net debt (where applicable). The target&#39;s outstanding net debt is defined as the total amount of short and long term interest-bearing debt less any cash and cash equivalents. The target&#39;s outstanding net debt will only be included in the Transaction Value calculation if a.) the acquirer is seeking to own 100% of the target, b.) the target is a non-financial company; and c.) the target&#39;s outstanding net debt is publicly disclosed (or the acquirer publicly states it is assuming a specific amount of liabilities). Otherwise, Transaction Value will be equal to the amount paid for the portion of the target acquired (Base Equity Value) and will exclude the target&#39;s outstanding net debt. Amounts returned are in USD.
   * @return transactionValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "4276.71114", value = "Base Equity Value plus the value of the target’s outstanding net debt (where applicable). The target's outstanding net debt is defined as the total amount of short and long term interest-bearing debt less any cash and cash equivalents. The target's outstanding net debt will only be included in the Transaction Value calculation if a.) the acquirer is seeking to own 100% of the target, b.) the target is a non-financial company; and c.) the target's outstanding net debt is publicly disclosed (or the acquirer publicly states it is assuming a specific amount of liabilities). Otherwise, Transaction Value will be equal to the amount paid for the portion of the target acquired (Base Equity Value) and will exclude the target's outstanding net debt. Amounts returned are in USD.")
  @JsonIgnore

  public BigDecimal getTransactionValue() {
        return transactionValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSACTION_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTransactionValue_JsonNullable() {
    return transactionValue;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSACTION_VALUE)
  public void setTransactionValue_JsonNullable(JsonNullable<BigDecimal> transactionValue) {
    this.transactionValue = transactionValue;
  }

  public void setTransactionValue(BigDecimal transactionValue) {
    this.transactionValue = JsonNullable.<BigDecimal>of(transactionValue);
  }


  public DealValue enterpriseValue(BigDecimal enterpriseValue) {
    this.enterpriseValue = JsonNullable.<BigDecimal>of(enterpriseValue);
    return this;
  }

   /**
   * The full value of the business acquired, using % sought to determine the value of 100% of the business if less than 100% was sought in the transaction. Amounts returned are in USD.
   * @return enterpriseValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "4276.71114", value = "The full value of the business acquired, using % sought to determine the value of 100% of the business if less than 100% was sought in the transaction. Amounts returned are in USD.")
  @JsonIgnore

  public BigDecimal getEnterpriseValue() {
        return enterpriseValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENTERPRISE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getEnterpriseValue_JsonNullable() {
    return enterpriseValue;
  }
  
  @JsonProperty(JSON_PROPERTY_ENTERPRISE_VALUE)
  public void setEnterpriseValue_JsonNullable(JsonNullable<BigDecimal> enterpriseValue) {
    this.enterpriseValue = enterpriseValue;
  }

  public void setEnterpriseValue(BigDecimal enterpriseValue) {
    this.enterpriseValue = JsonNullable.<BigDecimal>of(enterpriseValue);
  }


  public DealValue annOfferPriceShare(BigDecimal annOfferPriceShare) {
    this.annOfferPriceShare = JsonNullable.<BigDecimal>of(annOfferPriceShare);
    return this;
  }

   /**
   * The current price offered for each share of target stock (including all forms of consideration). In a transaction in which the acquirer has increased or decrease the price they are offering on a per share basis from their original offer price, this item will always reflect the most current price per share being offered. Amounts returned are in USD.
   * @return annOfferPriceShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "8.5", value = "The current price offered for each share of target stock (including all forms of consideration). In a transaction in which the acquirer has increased or decrease the price they are offering on a per share basis from their original offer price, this item will always reflect the most current price per share being offered. Amounts returned are in USD.")
  @JsonIgnore

  public BigDecimal getAnnOfferPriceShare() {
        return annOfferPriceShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ANN_OFFER_PRICE_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getAnnOfferPriceShare_JsonNullable() {
    return annOfferPriceShare;
  }
  
  @JsonProperty(JSON_PROPERTY_ANN_OFFER_PRICE_SHARE)
  public void setAnnOfferPriceShare_JsonNullable(JsonNullable<BigDecimal> annOfferPriceShare) {
    this.annOfferPriceShare = annOfferPriceShare;
  }

  public void setAnnOfferPriceShare(BigDecimal annOfferPriceShare) {
    this.annOfferPriceShare = JsonNullable.<BigDecimal>of(annOfferPriceShare);
  }


  public DealValue buyerExchangeRatio(BigDecimal buyerExchangeRatio) {
    this.buyerExchangeRatio = JsonNullable.<BigDecimal>of(buyerExchangeRatio);
    return this;
  }

   /**
   * Number of shares being issued by the acquirer to the target. Applicable only if the acquirer is issuing stock in the transaction. For example, Express Scripts, Inc. acquired Medco Health Solutions, Inc. in April 2012 for $28.5 bil in cash and stock. Medco shareholders received $28.8 in cash and 0.81 Express Scripts shares for every share held. Here, Stock Exchange Ratio - Buyers Shares is 0.81.
   * @return buyerExchangeRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.15", value = "Number of shares being issued by the acquirer to the target. Applicable only if the acquirer is issuing stock in the transaction. For example, Express Scripts, Inc. acquired Medco Health Solutions, Inc. in April 2012 for $28.5 bil in cash and stock. Medco shareholders received $28.8 in cash and 0.81 Express Scripts shares for every share held. Here, Stock Exchange Ratio - Buyers Shares is 0.81.")
  @JsonIgnore

  public BigDecimal getBuyerExchangeRatio() {
        return buyerExchangeRatio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BUYER_EXCHANGE_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getBuyerExchangeRatio_JsonNullable() {
    return buyerExchangeRatio;
  }
  
  @JsonProperty(JSON_PROPERTY_BUYER_EXCHANGE_RATIO)
  public void setBuyerExchangeRatio_JsonNullable(JsonNullable<BigDecimal> buyerExchangeRatio) {
    this.buyerExchangeRatio = buyerExchangeRatio;
  }

  public void setBuyerExchangeRatio(BigDecimal buyerExchangeRatio) {
    this.buyerExchangeRatio = JsonNullable.<BigDecimal>of(buyerExchangeRatio);
  }


  public DealValue targetExchangeRatio(BigDecimal targetExchangeRatio) {
    this.targetExchangeRatio = JsonNullable.<BigDecimal>of(targetExchangeRatio);
    return this;
  }

   /**
   * Number of target shares the stock swap exchange ratio is based upon when the acquirer is issuing stock in the transaction. For example, Express Scripts, Inc. acquired Medco Health Solutions, Inc. in April 2012 for $28.5 bil in cash and stock. Medco shareholders received $28.8 in cash and 0.81 Express Scripts shares for every share held. Here, Stock Exchange Ratio - Target Shares is 1.
   * @return targetExchangeRatio
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.15", value = "Number of target shares the stock swap exchange ratio is based upon when the acquirer is issuing stock in the transaction. For example, Express Scripts, Inc. acquired Medco Health Solutions, Inc. in April 2012 for $28.5 bil in cash and stock. Medco shareholders received $28.8 in cash and 0.81 Express Scripts shares for every share held. Here, Stock Exchange Ratio - Target Shares is 1.")
  @JsonIgnore

  public BigDecimal getTargetExchangeRatio() {
        return targetExchangeRatio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TARGET_EXCHANGE_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTargetExchangeRatio_JsonNullable() {
    return targetExchangeRatio;
  }
  
  @JsonProperty(JSON_PROPERTY_TARGET_EXCHANGE_RATIO)
  public void setTargetExchangeRatio_JsonNullable(JsonNullable<BigDecimal> targetExchangeRatio) {
    this.targetExchangeRatio = targetExchangeRatio;
  }

  public void setTargetExchangeRatio(BigDecimal targetExchangeRatio) {
    this.targetExchangeRatio = JsonNullable.<BigDecimal>of(targetExchangeRatio);
  }


  public DealValue cashShare(BigDecimal cashShare) {
    this.cashShare = JsonNullable.<BigDecimal>of(cashShare);
    return this;
  }

   /**
   * Portion of the current offer price per share to be paid in cash. For example, Pfizer acquired Wyeth in 2009 for $66.8 in cash and stock. Pfizer paid $50.19 per share, comprised of $33 in cash and 0.985 shares of Pfizer stock (representing $17.19 based upon Pfizer&#39;s last closing stock price of $17.45 prior to announcement). Here, the Price/Share - Cash ($) is 33. Amounts returned are in USD.
   * @return cashShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.5", value = "Portion of the current offer price per share to be paid in cash. For example, Pfizer acquired Wyeth in 2009 for $66.8 in cash and stock. Pfizer paid $50.19 per share, comprised of $33 in cash and 0.985 shares of Pfizer stock (representing $17.19 based upon Pfizer's last closing stock price of $17.45 prior to announcement). Here, the Price/Share - Cash ($) is 33. Amounts returned are in USD.")
  @JsonIgnore

  public BigDecimal getCashShare() {
        return cashShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CASH_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getCashShare_JsonNullable() {
    return cashShare;
  }
  
  @JsonProperty(JSON_PROPERTY_CASH_SHARE)
  public void setCashShare_JsonNullable(JsonNullable<BigDecimal> cashShare) {
    this.cashShare = cashShare;
  }

  public void setCashShare(BigDecimal cashShare) {
    this.cashShare = JsonNullable.<BigDecimal>of(cashShare);
  }


  public DealValue stockShare(BigDecimal stockShare) {
    this.stockShare = JsonNullable.<BigDecimal>of(stockShare);
    return this;
  }

   /**
   * Portion of the current offer price per share to be paid in the acquirer&#39;s stock. For example, Pfizer acquired Wyeth in 2009 for $66.8 in cash and stock. Pfizer paid $50.19 per share, comprised of $33 in cash and 0.985 shares of Pfizer stock (representing $17.19 based upon Pfizer&#39;s last closing stock price of $17.45 prior to announcement). Here, the Price/Share - Stock ($) is 17.19. Amounts returned are in USD.
   * @return stockShare
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.5", value = "Portion of the current offer price per share to be paid in the acquirer's stock. For example, Pfizer acquired Wyeth in 2009 for $66.8 in cash and stock. Pfizer paid $50.19 per share, comprised of $33 in cash and 0.985 shares of Pfizer stock (representing $17.19 based upon Pfizer's last closing stock price of $17.45 prior to announcement). Here, the Price/Share - Stock ($) is 17.19. Amounts returned are in USD.")
  @JsonIgnore

  public BigDecimal getStockShare() {
        return stockShare.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STOCK_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getStockShare_JsonNullable() {
    return stockShare;
  }
  
  @JsonProperty(JSON_PROPERTY_STOCK_SHARE)
  public void setStockShare_JsonNullable(JsonNullable<BigDecimal> stockShare) {
    this.stockShare = stockShare;
  }

  public void setStockShare(BigDecimal stockShare) {
    this.stockShare = JsonNullable.<BigDecimal>of(stockShare);
  }


  public DealValue choice(Boolean choice) {
    this.choice = JsonNullable.<Boolean>of(choice);
    return this;
  }

   /**
   * Indicates if the acquirer is offering the target shareholders a choice of considerations (which is almost always a choice between selecting cash only, stock only or a mixture of cash and stock) for the specified deal identifier.
   * @return choice
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates if the acquirer is offering the target shareholders a choice of considerations (which is almost always a choice between selecting cash only, stock only or a mixture of cash and stock) for the specified deal identifier.")
  @JsonIgnore

  public Boolean getChoice() {
        return choice.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getChoice_JsonNullable() {
    return choice;
  }
  
  @JsonProperty(JSON_PROPERTY_CHOICE)
  public void setChoice_JsonNullable(JsonNullable<Boolean> choice) {
    this.choice = choice;
  }

  public void setChoice(Boolean choice) {
    this.choice = JsonNullable.<Boolean>of(choice);
  }


  public DealValue buyerSharesIssued(BigDecimal buyerSharesIssued) {
    this.buyerSharesIssued = JsonNullable.<BigDecimal>of(buyerSharesIssued);
    return this;
  }

   /**
   * The number of shares issued by the buyer to the target as part of the payment.
   * @return buyerSharesIssued
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "122", value = "The number of shares issued by the buyer to the target as part of the payment.")
  @JsonIgnore

  public BigDecimal getBuyerSharesIssued() {
        return buyerSharesIssued.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BUYER_SHARES_ISSUED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getBuyerSharesIssued_JsonNullable() {
    return buyerSharesIssued;
  }
  
  @JsonProperty(JSON_PROPERTY_BUYER_SHARES_ISSUED)
  public void setBuyerSharesIssued_JsonNullable(JsonNullable<BigDecimal> buyerSharesIssued) {
    this.buyerSharesIssued = buyerSharesIssued;
  }

  public void setBuyerSharesIssued(BigDecimal buyerSharesIssued) {
    this.buyerSharesIssued = JsonNullable.<BigDecimal>of(buyerSharesIssued);
  }


  public DealValue percentSought(BigDecimal percentSought) {
    this.percentSought = JsonNullable.<BigDecimal>of(percentSought);
    return this;
  }

   /**
   * The percentage of the target company&#39;s stock sought by the acquirer at the time the transaction was publicly announced.
   * @return percentSought
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "100", value = "The percentage of the target company's stock sought by the acquirer at the time the transaction was publicly announced.")
  @JsonIgnore

  public BigDecimal getPercentSought() {
        return percentSought.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PERCENT_SOUGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getPercentSought_JsonNullable() {
    return percentSought;
  }
  
  @JsonProperty(JSON_PROPERTY_PERCENT_SOUGHT)
  public void setPercentSought_JsonNullable(JsonNullable<BigDecimal> percentSought) {
    this.percentSought = percentSought;
  }

  public void setPercentSought(BigDecimal percentSought) {
    this.percentSought = JsonNullable.<BigDecimal>of(percentSought);
  }


  public DealValue sharesSought(BigDecimal sharesSought) {
    this.sharesSought = JsonNullable.<BigDecimal>of(sharesSought);
    return this;
  }

   /**
   * The number of shares of the target company&#39;s stock sought by the acquirer at the time the transaction was publicly announced.
   * @return sharesSought
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "122", value = "The number of shares of the target company's stock sought by the acquirer at the time the transaction was publicly announced.")
  @JsonIgnore

  public BigDecimal getSharesSought() {
        return sharesSought.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SHARES_SOUGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getSharesSought_JsonNullable() {
    return sharesSought;
  }
  
  @JsonProperty(JSON_PROPERTY_SHARES_SOUGHT)
  public void setSharesSought_JsonNullable(JsonNullable<BigDecimal> sharesSought) {
    this.sharesSought = sharesSought;
  }

  public void setSharesSought(BigDecimal sharesSought) {
    this.sharesSought = JsonNullable.<BigDecimal>of(sharesSought);
  }


  public DealValue sharesOwnedPrior(BigDecimal sharesOwnedPrior) {
    this.sharesOwnedPrior = JsonNullable.<BigDecimal>of(sharesOwnedPrior);
    return this;
  }

   /**
   * The percent of the target company&#39;s shares owned by the buyer prior to the transaction.
   * @return sharesOwnedPrior
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "50", value = "The percent of the target company's shares owned by the buyer prior to the transaction.")
  @JsonIgnore

  public BigDecimal getSharesOwnedPrior() {
        return sharesOwnedPrior.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SHARES_OWNED_PRIOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getSharesOwnedPrior_JsonNullable() {
    return sharesOwnedPrior;
  }
  
  @JsonProperty(JSON_PROPERTY_SHARES_OWNED_PRIOR)
  public void setSharesOwnedPrior_JsonNullable(JsonNullable<BigDecimal> sharesOwnedPrior) {
    this.sharesOwnedPrior = sharesOwnedPrior;
  }

  public void setSharesOwnedPrior(BigDecimal sharesOwnedPrior) {
    this.sharesOwnedPrior = JsonNullable.<BigDecimal>of(sharesOwnedPrior);
  }


  public DealValue premium1Day(BigDecimal premium1Day) {
    this.premium1Day = JsonNullable.<BigDecimal>of(premium1Day);
    return this;
  }

   /**
   * The percentage difference between the price per share offered by the acquirer and the target&#39;s closing stock price 1 trading day prior to the announcement date. This data is only available if the target is a public company and the price/share is disclosed.
   * @return premium1Day
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.15", value = "The percentage difference between the price per share offered by the acquirer and the target's closing stock price 1 trading day prior to the announcement date. This data is only available if the target is a public company and the price/share is disclosed.")
  @JsonIgnore

  public BigDecimal getPremium1Day() {
        return premium1Day.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PREMIUM1_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getPremium1Day_JsonNullable() {
    return premium1Day;
  }
  
  @JsonProperty(JSON_PROPERTY_PREMIUM1_DAY)
  public void setPremium1Day_JsonNullable(JsonNullable<BigDecimal> premium1Day) {
    this.premium1Day = premium1Day;
  }

  public void setPremium1Day(BigDecimal premium1Day) {
    this.premium1Day = JsonNullable.<BigDecimal>of(premium1Day);
  }


  public DealValue premium5Day(BigDecimal premium5Day) {
    this.premium5Day = JsonNullable.<BigDecimal>of(premium5Day);
    return this;
  }

   /**
   * The percentage difference between the price per share offered by the acquirer and the target&#39;s closing stock price 5 trading days prior to the announcement date. This data is only available if the target is a public company and the price/share is disclosed.
   * @return premium5Day
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.15", value = "The percentage difference between the price per share offered by the acquirer and the target's closing stock price 5 trading days prior to the announcement date. This data is only available if the target is a public company and the price/share is disclosed.")
  @JsonIgnore

  public BigDecimal getPremium5Day() {
        return premium5Day.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PREMIUM5_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getPremium5Day_JsonNullable() {
    return premium5Day;
  }
  
  @JsonProperty(JSON_PROPERTY_PREMIUM5_DAY)
  public void setPremium5Day_JsonNullable(JsonNullable<BigDecimal> premium5Day) {
    this.premium5Day = premium5Day;
  }

  public void setPremium5Day(BigDecimal premium5Day) {
    this.premium5Day = JsonNullable.<BigDecimal>of(premium5Day);
  }


  public DealValue premium30Day(BigDecimal premium30Day) {
    this.premium30Day = JsonNullable.<BigDecimal>of(premium30Day);
    return this;
  }

   /**
   * The percentage difference between the price per share offered by the acquirer and the target&#39;s closing stock price 30 trading days prior to the announcement date. This data is only available if the target is a public company and the price/share is disclosed.
   * @return premium30Day
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.25", value = "The percentage difference between the price per share offered by the acquirer and the target's closing stock price 30 trading days prior to the announcement date. This data is only available if the target is a public company and the price/share is disclosed.")
  @JsonIgnore

  public BigDecimal getPremium30Day() {
        return premium30Day.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PREMIUM30_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getPremium30Day_JsonNullable() {
    return premium30Day;
  }
  
  @JsonProperty(JSON_PROPERTY_PREMIUM30_DAY)
  public void setPremium30Day_JsonNullable(JsonNullable<BigDecimal> premium30Day) {
    this.premium30Day = premium30Day;
  }

  public void setPremium30Day(BigDecimal premium30Day) {
    this.premium30Day = JsonNullable.<BigDecimal>of(premium30Day);
  }


  public DealValue paymentMethod(java.util.List<PaymentMethodEnum> paymentMethod) {
    this.paymentMethod = JsonNullable.<java.util.List<PaymentMethodEnum>>of(paymentMethod);
    return this;
  }

  public DealValue addPaymentMethodItem(PaymentMethodEnum paymentMethodItem) {
    if (this.paymentMethod == null || !this.paymentMethod.isPresent()) {
      this.paymentMethod = JsonNullable.<java.util.List<PaymentMethodEnum>>of(new java.util.ArrayList<>());
    }
    try {
      this.paymentMethod.get().add(paymentMethodItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Payment method/structure used in the transaction, including cash, stock, combination, or debt.
   * @return paymentMethod
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "[\"Cash\",\"Debt\"]", value = "Payment method/structure used in the transaction, including cash, stock, combination, or debt.")
  @JsonIgnore

  public java.util.List<PaymentMethodEnum> getPaymentMethod() {
        return paymentMethod.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<PaymentMethodEnum>> getPaymentMethod_JsonNullable() {
    return paymentMethod;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
  public void setPaymentMethod_JsonNullable(JsonNullable<java.util.List<PaymentMethodEnum>> paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public void setPaymentMethod(java.util.List<PaymentMethodEnum> paymentMethod) {
    this.paymentMethod = JsonNullable.<java.util.List<PaymentMethodEnum>>of(paymentMethod);
  }


  /**
   * Return true if this DealValue object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealValue dealValue = (DealValue) o;
    return equalsNullable(this.baseEquity, dealValue.baseEquity) &&
        equalsNullable(this.transactionValue, dealValue.transactionValue) &&
        equalsNullable(this.enterpriseValue, dealValue.enterpriseValue) &&
        equalsNullable(this.annOfferPriceShare, dealValue.annOfferPriceShare) &&
        equalsNullable(this.buyerExchangeRatio, dealValue.buyerExchangeRatio) &&
        equalsNullable(this.targetExchangeRatio, dealValue.targetExchangeRatio) &&
        equalsNullable(this.cashShare, dealValue.cashShare) &&
        equalsNullable(this.stockShare, dealValue.stockShare) &&
        equalsNullable(this.choice, dealValue.choice) &&
        equalsNullable(this.buyerSharesIssued, dealValue.buyerSharesIssued) &&
        equalsNullable(this.percentSought, dealValue.percentSought) &&
        equalsNullable(this.sharesSought, dealValue.sharesSought) &&
        equalsNullable(this.sharesOwnedPrior, dealValue.sharesOwnedPrior) &&
        equalsNullable(this.premium1Day, dealValue.premium1Day) &&
        equalsNullable(this.premium5Day, dealValue.premium5Day) &&
        equalsNullable(this.premium30Day, dealValue.premium30Day) &&
        equalsNullable(this.paymentMethod, dealValue.paymentMethod);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(baseEquity), hashCodeNullable(transactionValue), hashCodeNullable(enterpriseValue), hashCodeNullable(annOfferPriceShare), hashCodeNullable(buyerExchangeRatio), hashCodeNullable(targetExchangeRatio), hashCodeNullable(cashShare), hashCodeNullable(stockShare), hashCodeNullable(choice), hashCodeNullable(buyerSharesIssued), hashCodeNullable(percentSought), hashCodeNullable(sharesSought), hashCodeNullable(sharesOwnedPrior), hashCodeNullable(premium1Day), hashCodeNullable(premium5Day), hashCodeNullable(premium30Day), hashCodeNullable(paymentMethod));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealValue {\n");
    sb.append("    baseEquity: ").append(toIndentedString(baseEquity)).append("\n");
    sb.append("    transactionValue: ").append(toIndentedString(transactionValue)).append("\n");
    sb.append("    enterpriseValue: ").append(toIndentedString(enterpriseValue)).append("\n");
    sb.append("    annOfferPriceShare: ").append(toIndentedString(annOfferPriceShare)).append("\n");
    sb.append("    buyerExchangeRatio: ").append(toIndentedString(buyerExchangeRatio)).append("\n");
    sb.append("    targetExchangeRatio: ").append(toIndentedString(targetExchangeRatio)).append("\n");
    sb.append("    cashShare: ").append(toIndentedString(cashShare)).append("\n");
    sb.append("    stockShare: ").append(toIndentedString(stockShare)).append("\n");
    sb.append("    choice: ").append(toIndentedString(choice)).append("\n");
    sb.append("    buyerSharesIssued: ").append(toIndentedString(buyerSharesIssued)).append("\n");
    sb.append("    percentSought: ").append(toIndentedString(percentSought)).append("\n");
    sb.append("    sharesSought: ").append(toIndentedString(sharesSought)).append("\n");
    sb.append("    sharesOwnedPrior: ").append(toIndentedString(sharesOwnedPrior)).append("\n");
    sb.append("    premium1Day: ").append(toIndentedString(premium1Day)).append("\n");
    sb.append("    premium5Day: ").append(toIndentedString(premium5Day)).append("\n");
    sb.append("    premium30Day: ").append(toIndentedString(premium30Day)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

