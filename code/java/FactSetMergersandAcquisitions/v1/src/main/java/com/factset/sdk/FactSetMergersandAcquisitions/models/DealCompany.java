/*
 * FactSet Mergers and Acquisitions API
 * The FactSet Mergers and Acquisitions API provides access to key transactions and pricing metrics on over 60,000 globally traded deals. Reference a Global Universe of Mergers and Acquisitions (M&A) transactions where the target of the deal is a Publicly traded Company. Review premiums, multiples and fundamental data to gather insights on deals and create predictive models based on different deal characteristics.    Monetary values returned by this API are converted and represented in USD.    This API is allows a limit of 10 requests per second and a maximum of 10 concurrent requests. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetMergersandAcquisitions.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.FactSetMergersandAcquisitions.models.Participant;
import com.factset.sdk.FactSetMergersandAcquisitions.models.Target;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetMergersandAcquisitions.JSON;


/**
 * DealCompany
 */
@JsonPropertyOrder({
  DealCompany.JSON_PROPERTY_DEAL_ID,
  DealCompany.JSON_PROPERTY_TARGET,
  DealCompany.JSON_PROPERTY_BUYERS,
  DealCompany.JSON_PROPERTY_SELLERS,
  DealCompany.JSON_PROPERTY_DEAL_TYPE,
  DealCompany.JSON_PROPERTY_ANNOUNCE_DATE,
  DealCompany.JSON_PROPERTY_CLOSE_DATE,
  DealCompany.JSON_PROPERTY_TRANSACTION_VALUE,
  DealCompany.JSON_PROPERTY_STATUS,
  DealCompany.JSON_PROPERTY_REQUEST_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class DealCompany implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DEAL_ID = "dealId";
  private String dealId;

  public static final String JSON_PROPERTY_TARGET = "target";
  private Target target;

  public static final String JSON_PROPERTY_BUYERS = "buyers";
  private java.util.List<Participant> buyers = null;

  public static final String JSON_PROPERTY_SELLERS = "sellers";
  private JsonNullable<java.util.List<Participant>> sellers = JsonNullable.<java.util.List<Participant>>undefined();

  /**
   * Type of deal.
   */
  public enum DealTypeEnum {
    ACQUISITION_MERGER("Acquisition / Merger"),
    
    MAJORITY_STAKE("Majority Stake"),
    
    MINORITY_STAKE("Minority Stake"),
    
    SPINOFF("Spinoff");

    private String value;

    DealTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DealTypeEnum fromValue(String value) {
      for (DealTypeEnum b : DealTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DEAL_TYPE = "dealType";
  private DealTypeEnum dealType;

  public static final String JSON_PROPERTY_ANNOUNCE_DATE = "announceDate";
  private LocalDate announceDate;

  public static final String JSON_PROPERTY_CLOSE_DATE = "closeDate";
  private JsonNullable<LocalDate> closeDate = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_TRANSACTION_VALUE = "transactionValue";
  private JsonNullable<BigDecimal> transactionValue = JsonNullable.<BigDecimal>undefined();

  /**
   * Status of the deal 
   */
  public enum StatusEnum {
    PENDING("Pending"),
    
    COMPLETE("Complete"),
    
    CANCELLED("Cancelled"),
    
    RUMOR("Rumor"),
    
    RUMOR_CANCELLED("Rumor Cancelled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private String requestId;

  public DealCompany() { 
  }

  public DealCompany dealId(String dealId) {
    this.dealId = dealId;
    return this;
  }

   /**
   * Identifier for the deal.
   * @return dealId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "4181800MM", value = "Identifier for the deal.")
  @JsonProperty(JSON_PROPERTY_DEAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDealId() {
    return dealId;
  }


  @JsonProperty(JSON_PROPERTY_DEAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDealId(String dealId) {
    this.dealId = dealId;
  }


  public DealCompany target(Target target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Target getTarget() {
    return target;
  }


  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTarget(Target target) {
    this.target = target;
  }


  public DealCompany buyers(java.util.List<Participant> buyers) {
    this.buyers = buyers;
    return this;
  }

  public DealCompany addBuyersItem(Participant buyersItem) {
    if (this.buyers == null) {
      this.buyers = new java.util.ArrayList<>();
    }
    this.buyers.add(buyersItem);
    return this;
  }

   /**
   * Array of participants in the deal who are buyers.
   * @return buyers
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Array of participants in the deal who are buyers.")
  @JsonProperty(JSON_PROPERTY_BUYERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<Participant> getBuyers() {
    return buyers;
  }


  @JsonProperty(JSON_PROPERTY_BUYERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuyers(java.util.List<Participant> buyers) {
    this.buyers = buyers;
  }


  public DealCompany sellers(java.util.List<Participant> sellers) {
    this.sellers = JsonNullable.<java.util.List<Participant>>of(sellers);
    return this;
  }

  public DealCompany addSellersItem(Participant sellersItem) {
    if (this.sellers == null || !this.sellers.isPresent()) {
      this.sellers = JsonNullable.<java.util.List<Participant>>of(new java.util.ArrayList<>());
    }
    try {
      this.sellers.get().add(sellersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Array of participants in the deal who are sellers.
   * @return sellers
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Array of participants in the deal who are sellers.")
  @JsonIgnore

  public java.util.List<Participant> getSellers() {
        return sellers.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SELLERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<java.util.List<Participant>> getSellers_JsonNullable() {
    return sellers;
  }
  
  @JsonProperty(JSON_PROPERTY_SELLERS)
  public void setSellers_JsonNullable(JsonNullable<java.util.List<Participant>> sellers) {
    this.sellers = sellers;
  }

  public void setSellers(java.util.List<Participant> sellers) {
    this.sellers = JsonNullable.<java.util.List<Participant>>of(sellers);
  }


  public DealCompany dealType(DealTypeEnum dealType) {
    this.dealType = dealType;
    return this;
  }

   /**
   * Type of deal.
   * @return dealType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Acquisition / Merger", value = "Type of deal.")
  @JsonProperty(JSON_PROPERTY_DEAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DealTypeEnum getDealType() {
    return dealType;
  }


  @JsonProperty(JSON_PROPERTY_DEAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDealType(DealTypeEnum dealType) {
    this.dealType = dealType;
  }


  public DealCompany announceDate(LocalDate announceDate) {
    this.announceDate = announceDate;
    return this;
  }

   /**
   * Date the deal was announced. If the deal has a status of &#x60;rumor&#x60; or &#x60;rumor cancelled&#x60;, then this may be the same as &#x60;rumorDate&#x60;.
   * @return announceDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Thu Nov 19 00:00:00 UTC 2020", value = "Date the deal was announced. If the deal has a status of `rumor` or `rumor cancelled`, then this may be the same as `rumorDate`.")
  @JsonProperty(JSON_PROPERTY_ANNOUNCE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getAnnounceDate() {
    return announceDate;
  }


  @JsonProperty(JSON_PROPERTY_ANNOUNCE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnnounceDate(LocalDate announceDate) {
    this.announceDate = announceDate;
  }


  public DealCompany closeDate(LocalDate closeDate) {
    this.closeDate = JsonNullable.<LocalDate>of(closeDate);
    return this;
  }

   /**
   * Date the deal was closed.
   * @return closeDate
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Thu Nov 19 00:00:00 UTC 2020", value = "Date the deal was closed.")
  @JsonIgnore

  public LocalDate getCloseDate() {
        return closeDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLOSE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getCloseDate_JsonNullable() {
    return closeDate;
  }
  
  @JsonProperty(JSON_PROPERTY_CLOSE_DATE)
  public void setCloseDate_JsonNullable(JsonNullable<LocalDate> closeDate) {
    this.closeDate = closeDate;
  }

  public void setCloseDate(LocalDate closeDate) {
    this.closeDate = JsonNullable.<LocalDate>of(closeDate);
  }


  public DealCompany transactionValue(BigDecimal transactionValue) {
    this.transactionValue = JsonNullable.<BigDecimal>of(transactionValue);
    return this;
  }

   /**
   * Base Equity Value plus the value of the target’s outstanding net debt (where applicable). The target&#39;s outstanding net debt is defined as the total amount of short and long term interest-bearing debt less any cash and cash equivalents. The target&#39;s outstanding net debt will only be included in the Transaction Value calculation if a.) the acquirer is seeking to own 100% of the target, b.) the target is a non-financial company; and c.) the target&#39;s outstanding net debt is publicly disclosed (or the acquirer publicly states it is assuming a specific amount of liabilities). Otherwise, Transaction Value will be equal to the amount paid for the portion of the target acquired (Base Equity Value) and will exclude the target&#39;s outstanding net debt. Amounts returned are in USD.
   * @return transactionValue
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "42996.1034", value = "Base Equity Value plus the value of the target’s outstanding net debt (where applicable). The target's outstanding net debt is defined as the total amount of short and long term interest-bearing debt less any cash and cash equivalents. The target's outstanding net debt will only be included in the Transaction Value calculation if a.) the acquirer is seeking to own 100% of the target, b.) the target is a non-financial company; and c.) the target's outstanding net debt is publicly disclosed (or the acquirer publicly states it is assuming a specific amount of liabilities). Otherwise, Transaction Value will be equal to the amount paid for the portion of the target acquired (Base Equity Value) and will exclude the target's outstanding net debt. Amounts returned are in USD.")
  @JsonIgnore

  public BigDecimal getTransactionValue() {
        return transactionValue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSACTION_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTransactionValue_JsonNullable() {
    return transactionValue;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSACTION_VALUE)
  public void setTransactionValue_JsonNullable(JsonNullable<BigDecimal> transactionValue) {
    this.transactionValue = transactionValue;
  }

  public void setTransactionValue(BigDecimal transactionValue) {
    this.transactionValue = JsonNullable.<BigDecimal>of(transactionValue);
  }


  public DealCompany status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the deal 
   * @return status
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "Pending", value = "Status of the deal ")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DealCompany requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier that was used for the request.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "IBM-USA", value = "Identifier that was used for the request.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  /**
   * Return true if this DealCompany object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealCompany dealCompany = (DealCompany) o;
    return Objects.equals(this.dealId, dealCompany.dealId) &&
        Objects.equals(this.target, dealCompany.target) &&
        Objects.equals(this.buyers, dealCompany.buyers) &&
        equalsNullable(this.sellers, dealCompany.sellers) &&
        Objects.equals(this.dealType, dealCompany.dealType) &&
        Objects.equals(this.announceDate, dealCompany.announceDate) &&
        equalsNullable(this.closeDate, dealCompany.closeDate) &&
        equalsNullable(this.transactionValue, dealCompany.transactionValue) &&
        Objects.equals(this.status, dealCompany.status) &&
        Objects.equals(this.requestId, dealCompany.requestId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dealId, target, buyers, hashCodeNullable(sellers), dealType, announceDate, hashCodeNullable(closeDate), hashCodeNullable(transactionValue), status, requestId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealCompany {\n");
    sb.append("    dealId: ").append(toIndentedString(dealId)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    buyers: ").append(toIndentedString(buyers)).append("\n");
    sb.append("    sellers: ").append(toIndentedString(sellers)).append("\n");
    sb.append("    dealType: ").append(toIndentedString(dealType)).append("\n");
    sb.append("    announceDate: ").append(toIndentedString(announceDate)).append("\n");
    sb.append("    closeDate: ").append(toIndentedString(closeDate)).append("\n");
    sb.append("    transactionValue: ").append(toIndentedString(transactionValue)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

