/*
 * Quant API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.12.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.QuantEngine.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.QuantEngine.models.QuantFormula;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.QuantEngine.JSON;


/**
 * QuantScreeningExpression
 */
@JsonPropertyOrder({
  QuantScreeningExpression.JSON_PROPERTY_EXPR,
  QuantScreeningExpression.JSON_PROPERTY_NAME,
  QuantScreeningExpression.JSON_PROPERTY_DATE_OFFSET,
  QuantScreeningExpression.JSON_PROPERTY_SOURCE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class QuantScreeningExpression implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EXPR = "expr";
  private String expr;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DATE_OFFSET = "dateOffset";
  private JsonNullable<String> dateOffset = JsonNullable.<String>undefined();

  /**
   * Gets or Sets source
   */
  public enum SourceEnum {
    SCREENINGEXPRESSION("ScreeningExpression"),
    
    FQLEXPRESSION("FqlExpression"),
    
    UNIVERSALSCREENPARAMETER("UniversalScreenParameter"),
    
    ALLUNIVERSALSCREENPARAMETERS("AllUniversalScreenParameters");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SOURCE = "source";
  private SourceEnum source;

  public QuantScreeningExpression() { 
  }

  @JsonCreator
  public QuantScreeningExpression(
    @JsonProperty(value=JSON_PROPERTY_EXPR, required=true) String expr, 
    @JsonProperty(value=JSON_PROPERTY_NAME, required=true) String name, 
    @JsonProperty(value=JSON_PROPERTY_SOURCE, required=true) SourceEnum source
  ) {
    this();
    this.expr = expr;
    this.name = name;
    this.source = source;
  }

  public QuantScreeningExpression expr(String expr) {
    this.expr = expr;
    return this;
  }

   /**
   * Get expr
   * @return expr
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "PROPER_NAME(0,SECURITY,NAME)", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EXPR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExpr() {
    return expr;
  }


  @JsonProperty(JSON_PROPERTY_EXPR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpr(String expr) {
    this.expr = expr;
  }


  public QuantScreeningExpression name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Proper Name", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public QuantScreeningExpression dateOffset(String dateOffset) {
    this.dateOffset = JsonNullable.<String>of(dateOffset);
    return this;
  }

   /**
   * Get dateOffset
   * @return dateOffset
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getDateOffset() {
        return dateOffset.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DATE_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDateOffset_JsonNullable() {
    return dateOffset;
  }
  
  @JsonProperty(JSON_PROPERTY_DATE_OFFSET)
  public void setDateOffset_JsonNullable(JsonNullable<String> dateOffset) {
    this.dateOffset = dateOffset;
  }

  public void setDateOffset(String dateOffset) {
    this.dateOffset = JsonNullable.<String>of(dateOffset);
  }


  public QuantScreeningExpression source(SourceEnum source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "ScreeningExpression", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SourceEnum getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSource(SourceEnum source) {
    this.source = source;
  }


  /**
   * Return true if this QuantScreeningExpression object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuantScreeningExpression quantScreeningExpression = (QuantScreeningExpression) o;
    return Objects.equals(this.expr, quantScreeningExpression.expr) &&
        Objects.equals(this.name, quantScreeningExpression.name) &&
        equalsNullable(this.dateOffset, quantScreeningExpression.dateOffset) &&
        Objects.equals(this.source, quantScreeningExpression.source);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(expr, name, hashCodeNullable(dateOffset), source);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuantScreeningExpression {\n");
    sb.append("    expr: ").append(toIndentedString(expr)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dateOffset: ").append(toIndentedString(dateOffset)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

