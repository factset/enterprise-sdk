/*
 * FactSet RIBCS
 *
 * FactSet Revere Business Industry Classification System (RBICS) is a comprehensive structured taxonomy to classify companies by what they primarily do. It delivers a granular view for investors by classifying companies using a bottom-up approach according to the products and services they provide. By combining this approach with a top-level grouping based on companies' behavior similarities and stock co-movement, FactSet RBICS delivers unprecedented precision for 1,400+ sector groups.  RBICS Focus is a six level classification which highlights the companys main business. It is based on the company business line/s that stand for majority of a the revenue that the company generates. Updated monthly. For more details, visit [Online Assitant Page #20710](https://oa.apps.factset.com/pages/20710).<p><b>Rate limit is set to 40 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetRBICS.Client;
using FactSet.SDK.FactSetRBICS.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetRBICS.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityFocusApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get RBICS classification for the Focus industry
        /// </summary>
        /// <remarks>
        /// Gets RBICS classifications for the Focus industry for a short list of companies. Full history is included if _date_ parameter is not specified.      RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Company identifiers. Accepted identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**ids limit &#x3D; 2500 per request**&lt;/p&gt;    Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt; </param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="levels">List of RBICS industry levels to include in the response. **By default if left blank, all levels are returned.** (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <returns>EntityFocusResponse</returns>
        EntityFocusResponse GetRbicsEntityFocus(List<string> ids, string date = default(string), List<int> levels = default(List<int>), bool? includeNames = default(bool?));

        /// <summary>
        /// Get RBICS classification for the Focus industry
        /// </summary>
        /// <remarks>
        /// Gets RBICS classifications for the Focus industry for a short list of companies. Full history is included if _date_ parameter is not specified.      RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Company identifiers. Accepted identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**ids limit &#x3D; 2500 per request**&lt;/p&gt;    Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt; </param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="levels">List of RBICS industry levels to include in the response. **By default if left blank, all levels are returned.** (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <returns>ApiResponse of EntityFocusResponse</returns>
        ApiResponse<EntityFocusResponse> GetRbicsEntityFocusWithHttpInfo(List<string> ids, string date = default(string), List<int> levels = default(List<int>), bool? includeNames = default(bool?));
        /// <summary>
        /// Get RBICS classification for the Focus industry
        /// </summary>
        /// <remarks>
        /// Gets RBICS classifications for the Focus industry for a long list of companies. Full history is included if _date_ parameter is not specified.              RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityFocusRequest">Request Body to request a list of RBICS Entity Focus objects.</param>
        /// <returns>EntityFocusResponse</returns>
        EntityFocusResponse GetRbicsEntityFocusForList(EntityFocusRequest entityFocusRequest);

        /// <summary>
        /// Get RBICS classification for the Focus industry
        /// </summary>
        /// <remarks>
        /// Gets RBICS classifications for the Focus industry for a long list of companies. Full history is included if _date_ parameter is not specified.              RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityFocusRequest">Request Body to request a list of RBICS Entity Focus objects.</param>
        /// <returns>ApiResponse of EntityFocusResponse</returns>
        ApiResponse<EntityFocusResponse> GetRbicsEntityFocusForListWithHttpInfo(EntityFocusRequest entityFocusRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityFocusApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get RBICS classification for the Focus industry
        /// </summary>
        /// <remarks>
        /// Gets RBICS classifications for the Focus industry for a short list of companies. Full history is included if _date_ parameter is not specified.      RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Company identifiers. Accepted identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**ids limit &#x3D; 2500 per request**&lt;/p&gt;    Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt; </param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="levels">List of RBICS industry levels to include in the response. **By default if left blank, all levels are returned.** (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityFocusResponse</returns>
        System.Threading.Tasks.Task<EntityFocusResponse> GetRbicsEntityFocusAsync(List<string> ids, string date = default(string), List<int> levels = default(List<int>), bool? includeNames = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get RBICS classification for the Focus industry
        /// </summary>
        /// <remarks>
        /// Gets RBICS classifications for the Focus industry for a short list of companies. Full history is included if _date_ parameter is not specified.      RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Company identifiers. Accepted identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**ids limit &#x3D; 2500 per request**&lt;/p&gt;    Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt; </param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="levels">List of RBICS industry levels to include in the response. **By default if left blank, all levels are returned.** (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityFocusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityFocusResponse>> GetRbicsEntityFocusWithHttpInfoAsync(List<string> ids, string date = default(string), List<int> levels = default(List<int>), bool? includeNames = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get RBICS classification for the Focus industry
        /// </summary>
        /// <remarks>
        /// Gets RBICS classifications for the Focus industry for a long list of companies. Full history is included if _date_ parameter is not specified.              RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityFocusRequest">Request Body to request a list of RBICS Entity Focus objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityFocusResponse</returns>
        System.Threading.Tasks.Task<EntityFocusResponse> GetRbicsEntityFocusForListAsync(EntityFocusRequest entityFocusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get RBICS classification for the Focus industry
        /// </summary>
        /// <remarks>
        /// Gets RBICS classifications for the Focus industry for a long list of companies. Full history is included if _date_ parameter is not specified.              RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityFocusRequest">Request Body to request a list of RBICS Entity Focus objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityFocusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityFocusResponse>> GetRbicsEntityFocusForListWithHttpInfoAsync(EntityFocusRequest entityFocusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityFocusApi : IEntityFocusApiSync, IEntityFocusApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntityFocusApi : IEntityFocusApi
    {
        private FactSet.SDK.FactSetRBICS.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetRbicsEntityFocusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityFocusResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetRbicsEntityFocusForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityFocusResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityFocusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityFocusApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityFocusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityFocusApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetRBICS.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetRBICS.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetRBICS.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetRBICS.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetRBICS.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetRBICS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityFocusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntityFocusApi(FactSet.SDK.FactSetRBICS.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetRBICS.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetRBICS.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetRBICS.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetRBICS.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetRBICS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityFocusApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EntityFocusApi(FactSet.SDK.FactSetRBICS.Client.ISynchronousClient client, FactSet.SDK.FactSetRBICS.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetRBICS.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetRBICS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetRBICS.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetRBICS.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetRBICS.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetRBICS.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get RBICS classification for the Focus industry Gets RBICS classifications for the Focus industry for a short list of companies. Full history is included if _date_ parameter is not specified.      RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Company identifiers. Accepted identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**ids limit &#x3D; 2500 per request**&lt;/p&gt;    Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt; </param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="levels">List of RBICS industry levels to include in the response. **By default if left blank, all levels are returned.** (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <returns>EntityFocusResponse</returns>
        public EntityFocusResponse GetRbicsEntityFocus(List<string> ids, string date = default(string), List<int> levels = default(List<int>), bool? includeNames = default(bool?))
        {
            var localVarResponse = GetRbicsEntityFocusWithHttpInfo(ids, date, levels, includeNames);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get RBICS classification for the Focus industry Gets RBICS classifications for the Focus industry for a short list of companies. Full history is included if _date_ parameter is not specified.      RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Company identifiers. Accepted identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**ids limit &#x3D; 2500 per request**&lt;/p&gt;    Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt; </param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="levels">List of RBICS industry levels to include in the response. **By default if left blank, all levels are returned.** (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <returns>ApiResponse of EntityFocusResponse</returns>
        public ApiResponse<EntityFocusResponse> GetRbicsEntityFocusWithHttpInfo(List<string> ids, string date = default(string), List<int> levels = default(List<int>), bool? includeNames = default(bool?))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetRBICS.Client.ApiException(400, "Missing required parameter 'ids' when calling EntityFocusApi->GetRbicsEntityFocus");
            }

            FactSet.SDK.FactSetRBICS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetRBICS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (levels != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("csv", "levels", levels));
            }
            if (includeNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("", "includeNames", includeNames));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetRBICS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetRbicsEntityFocusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EntityFocusResponse>("/factset-rbics/v1/entity-focus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRbicsEntityFocus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get RBICS classification for the Focus industry Gets RBICS classifications for the Focus industry for a short list of companies. Full history is included if _date_ parameter is not specified.      RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Company identifiers. Accepted identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**ids limit &#x3D; 2500 per request**&lt;/p&gt;    Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt; </param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="levels">List of RBICS industry levels to include in the response. **By default if left blank, all levels are returned.** (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityFocusResponse</returns>
        public async System.Threading.Tasks.Task<EntityFocusResponse>GetRbicsEntityFocusAsync(List<string> ids, string date = default(string), List<int> levels = default(List<int>), bool? includeNames = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetRbicsEntityFocusWithHttpInfoAsync(ids, date, levels, includeNames, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get RBICS classification for the Focus industry Gets RBICS classifications for the Focus industry for a short list of companies. Full history is included if _date_ parameter is not specified.      RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Company identifiers. Accepted identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**ids limit &#x3D; 2500 per request**&lt;/p&gt;    Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt; </param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="levels">List of RBICS industry levels to include in the response. **By default if left blank, all levels are returned.** (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityFocusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityFocusResponse>> GetRbicsEntityFocusWithHttpInfoAsync(List<string> ids, string date = default(string), List<int> levels = default(List<int>), bool? includeNames = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetRBICS.Client.ApiException(400, "Missing required parameter 'ids' when calling EntityFocusApi->GetRbicsEntityFocus");
            }


            FactSet.SDK.FactSetRBICS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetRBICS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (levels != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("csv", "levels", levels));
            }
            if (includeNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("", "includeNames", includeNames));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetRBICS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetRbicsEntityFocusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityFocusResponse>("/factset-rbics/v1/entity-focus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRbicsEntityFocus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get RBICS classification for the Focus industry Gets RBICS classifications for the Focus industry for a long list of companies. Full history is included if _date_ parameter is not specified.              RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityFocusRequest">Request Body to request a list of RBICS Entity Focus objects.</param>
        /// <returns>EntityFocusResponse</returns>
        public EntityFocusResponse GetRbicsEntityFocusForList(EntityFocusRequest entityFocusRequest)
        {
            var localVarResponse = GetRbicsEntityFocusForListWithHttpInfo(entityFocusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get RBICS classification for the Focus industry Gets RBICS classifications for the Focus industry for a long list of companies. Full history is included if _date_ parameter is not specified.              RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityFocusRequest">Request Body to request a list of RBICS Entity Focus objects.</param>
        /// <returns>ApiResponse of EntityFocusResponse</returns>
        public ApiResponse<EntityFocusResponse> GetRbicsEntityFocusForListWithHttpInfo(EntityFocusRequest entityFocusRequest)
        {
            // verify the required parameter 'entityFocusRequest' is set
            if (entityFocusRequest == null)
            {
                throw new FactSet.SDK.FactSetRBICS.Client.ApiException(400, "Missing required parameter 'entityFocusRequest' when calling EntityFocusApi->GetRbicsEntityFocusForList");
            }

            FactSet.SDK.FactSetRBICS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetRBICS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = entityFocusRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetRBICS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetRbicsEntityFocusForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EntityFocusResponse>("/factset-rbics/v1/entity-focus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRbicsEntityFocusForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get RBICS classification for the Focus industry Gets RBICS classifications for the Focus industry for a long list of companies. Full history is included if _date_ parameter is not specified.              RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityFocusRequest">Request Body to request a list of RBICS Entity Focus objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityFocusResponse</returns>
        public async System.Threading.Tasks.Task<EntityFocusResponse>GetRbicsEntityFocusForListAsync(EntityFocusRequest entityFocusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetRbicsEntityFocusForListWithHttpInfoAsync(entityFocusRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get RBICS classification for the Focus industry Gets RBICS classifications for the Focus industry for a long list of companies. Full history is included if _date_ parameter is not specified.              RBICS Focus offers a single-sector mapping of about 48,000 of the most liquid and publicly-traded companies based on their primary lines of business; it uses revenues as the key factor in determining a company’s primary line of business, by mapping a company to the lowest-level sector from which it derives 50% or more of its revenues.    The RBICS Extended Universe – Industry Group is not currently supported through the RBICS API.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityFocusRequest">Request Body to request a list of RBICS Entity Focus objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityFocusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityFocusResponse>> GetRbicsEntityFocusForListWithHttpInfoAsync(EntityFocusRequest entityFocusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityFocusRequest' is set
            if (entityFocusRequest == null)
            {
                throw new FactSet.SDK.FactSetRBICS.Client.ApiException(400, "Missing required parameter 'entityFocusRequest' when calling EntityFocusApi->GetRbicsEntityFocusForList");
            }


            FactSet.SDK.FactSetRBICS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetRBICS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = entityFocusRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetRBICS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetRbicsEntityFocusForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EntityFocusResponse>("/factset-rbics/v1/entity-focus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRbicsEntityFocusForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
