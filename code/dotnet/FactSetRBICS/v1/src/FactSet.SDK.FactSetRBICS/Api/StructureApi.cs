/*
 * FactSet RIBCS
 *
 * FactSet Revere Business Industry Classification System (RBICS) is a comprehensive structured taxonomy to classify companies by what they primarily do. It delivers a granular view for investors by classifying companies using a bottom-up approach according to the products and services they provide. By combining this approach with a top-level grouping based on companies' behavior similarities and stock co-movement, FactSet RBICS delivers unprecedented precision for 1,400+ sector groups.  RBICS Focus is a six level classification which highlights the companys main business. It is based on the company business line/s that stand for majority of a the revenue that the company generates. Updated monthly. For more details, visit [Online Assitant Page #20710](https://oa.apps.factset.com/pages/20710).<p><b>Rate limit is set to 40 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetRBICS.Client;
using FactSet.SDK.FactSetRBICS.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetRBICS.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStructureApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods.
        /// </summary>
        /// <remarks>
        /// Understand the full RBICS Taxonomy Structure through time to help organize your analysis or facilitate the use of RBICS in application development.  Designed to overcome disparate and non-standardized company disclosures, the RBICS taxonomy is a normalized global industry classification consisting of a fourteen-by-six matrix. There are twelve economies with two specialty sectors, each with six incremental detailed layers, resulting in over 1,600 sector groups.  The top-levels&#39; market-defined approach groups companies based on their behavioral similarities and stock price co-movement, while the patented product-based approach used in the lower levels enables the necessary precision to capture the specialty sectors of global markets. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rbicsIds">RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested.  (optional)</param>
        /// <param name="level">RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629|  (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <returns>StructureResponse</returns>
        StructureResponse GetRbicsStructure(List<string> rbicsIds = default(List<string>), int? level = default(int?), bool? includeNames = default(bool?), string date = default(string));

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods.
        /// </summary>
        /// <remarks>
        /// Understand the full RBICS Taxonomy Structure through time to help organize your analysis or facilitate the use of RBICS in application development.  Designed to overcome disparate and non-standardized company disclosures, the RBICS taxonomy is a normalized global industry classification consisting of a fourteen-by-six matrix. There are twelve economies with two specialty sectors, each with six incremental detailed layers, resulting in over 1,600 sector groups.  The top-levels&#39; market-defined approach groups companies based on their behavioral similarities and stock price co-movement, while the patented product-based approach used in the lower levels enables the necessary precision to capture the specialty sectors of global markets. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rbicsIds">RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested.  (optional)</param>
        /// <param name="level">RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629|  (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <returns>ApiResponse of StructureResponse</returns>
        ApiResponse<StructureResponse> GetRbicsStructureWithHttpInfo(List<string> rbicsIds = default(List<string>), int? level = default(int?), bool? includeNames = default(bool?), string date = default(string));
        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods.
        /// </summary>
        /// <remarks>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. POST method is optimal for requesting large lists of &#x60;rbicsIds&#x60;. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureRequest">Request Body to request a list of RBICS Structure objects.</param>
        /// <returns>StructureResponse</returns>
        StructureResponse GetRbicsStructureForList(StructureRequest structureRequest);

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods.
        /// </summary>
        /// <remarks>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. POST method is optimal for requesting large lists of &#x60;rbicsIds&#x60;. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureRequest">Request Body to request a list of RBICS Structure objects.</param>
        /// <returns>ApiResponse of StructureResponse</returns>
        ApiResponse<StructureResponse> GetRbicsStructureForListWithHttpInfo(StructureRequest structureRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStructureApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods.
        /// </summary>
        /// <remarks>
        /// Understand the full RBICS Taxonomy Structure through time to help organize your analysis or facilitate the use of RBICS in application development.  Designed to overcome disparate and non-standardized company disclosures, the RBICS taxonomy is a normalized global industry classification consisting of a fourteen-by-six matrix. There are twelve economies with two specialty sectors, each with six incremental detailed layers, resulting in over 1,600 sector groups.  The top-levels&#39; market-defined approach groups companies based on their behavioral similarities and stock price co-movement, while the patented product-based approach used in the lower levels enables the necessary precision to capture the specialty sectors of global markets. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rbicsIds">RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested.  (optional)</param>
        /// <param name="level">RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629|  (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructureResponse</returns>
        System.Threading.Tasks.Task<StructureResponse> GetRbicsStructureAsync(List<string> rbicsIds = default(List<string>), int? level = default(int?), bool? includeNames = default(bool?), string date = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods.
        /// </summary>
        /// <remarks>
        /// Understand the full RBICS Taxonomy Structure through time to help organize your analysis or facilitate the use of RBICS in application development.  Designed to overcome disparate and non-standardized company disclosures, the RBICS taxonomy is a normalized global industry classification consisting of a fourteen-by-six matrix. There are twelve economies with two specialty sectors, each with six incremental detailed layers, resulting in over 1,600 sector groups.  The top-levels&#39; market-defined approach groups companies based on their behavioral similarities and stock price co-movement, while the patented product-based approach used in the lower levels enables the necessary precision to capture the specialty sectors of global markets. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rbicsIds">RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested.  (optional)</param>
        /// <param name="level">RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629|  (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StructureResponse>> GetRbicsStructureWithHttpInfoAsync(List<string> rbicsIds = default(List<string>), int? level = default(int?), bool? includeNames = default(bool?), string date = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods.
        /// </summary>
        /// <remarks>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. POST method is optimal for requesting large lists of &#x60;rbicsIds&#x60;. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureRequest">Request Body to request a list of RBICS Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructureResponse</returns>
        System.Threading.Tasks.Task<StructureResponse> GetRbicsStructureForListAsync(StructureRequest structureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods.
        /// </summary>
        /// <remarks>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. POST method is optimal for requesting large lists of &#x60;rbicsIds&#x60;. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureRequest">Request Body to request a list of RBICS Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StructureResponse>> GetRbicsStructureForListWithHttpInfoAsync(StructureRequest structureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStructureApi : IStructureApiSync, IStructureApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StructureApi : IStructureApi
    {
        private FactSet.SDK.FactSetRBICS.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetRbicsStructureResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(StructureResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetRbicsStructureForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(StructureResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="StructureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StructureApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StructureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StructureApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetRBICS.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetRBICS.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetRBICS.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetRBICS.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetRBICS.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetRBICS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StructureApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StructureApi(FactSet.SDK.FactSetRBICS.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetRBICS.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetRBICS.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetRBICS.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetRBICS.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetRBICS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StructureApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StructureApi(FactSet.SDK.FactSetRBICS.Client.ISynchronousClient client, FactSet.SDK.FactSetRBICS.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetRBICS.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetRBICS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetRBICS.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetRBICS.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetRBICS.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetRBICS.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. Understand the full RBICS Taxonomy Structure through time to help organize your analysis or facilitate the use of RBICS in application development.  Designed to overcome disparate and non-standardized company disclosures, the RBICS taxonomy is a normalized global industry classification consisting of a fourteen-by-six matrix. There are twelve economies with two specialty sectors, each with six incremental detailed layers, resulting in over 1,600 sector groups.  The top-levels&#39; market-defined approach groups companies based on their behavioral similarities and stock price co-movement, while the patented product-based approach used in the lower levels enables the necessary precision to capture the specialty sectors of global markets. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rbicsIds">RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested.  (optional)</param>
        /// <param name="level">RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629|  (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <returns>StructureResponse</returns>
        public StructureResponse GetRbicsStructure(List<string> rbicsIds = default(List<string>), int? level = default(int?), bool? includeNames = default(bool?), string date = default(string))
        {
            var localVarResponse = GetRbicsStructureWithHttpInfo(rbicsIds, level, includeNames, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. Understand the full RBICS Taxonomy Structure through time to help organize your analysis or facilitate the use of RBICS in application development.  Designed to overcome disparate and non-standardized company disclosures, the RBICS taxonomy is a normalized global industry classification consisting of a fourteen-by-six matrix. There are twelve economies with two specialty sectors, each with six incremental detailed layers, resulting in over 1,600 sector groups.  The top-levels&#39; market-defined approach groups companies based on their behavioral similarities and stock price co-movement, while the patented product-based approach used in the lower levels enables the necessary precision to capture the specialty sectors of global markets. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rbicsIds">RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested.  (optional)</param>
        /// <param name="level">RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629|  (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <returns>ApiResponse of StructureResponse</returns>
        public ApiResponse<StructureResponse> GetRbicsStructureWithHttpInfo(List<string> rbicsIds = default(List<string>), int? level = default(int?), bool? includeNames = default(bool?), string date = default(string))
        {
            FactSet.SDK.FactSetRBICS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetRBICS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (rbicsIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("csv", "rbicsIds", rbicsIds));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (includeNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("", "includeNames", includeNames));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetRBICS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetRbicsStructureResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            StructureResponse>("/factset-rbics/v1/structure", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRbicsStructure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. Understand the full RBICS Taxonomy Structure through time to help organize your analysis or facilitate the use of RBICS in application development.  Designed to overcome disparate and non-standardized company disclosures, the RBICS taxonomy is a normalized global industry classification consisting of a fourteen-by-six matrix. There are twelve economies with two specialty sectors, each with six incremental detailed layers, resulting in over 1,600 sector groups.  The top-levels&#39; market-defined approach groups companies based on their behavioral similarities and stock price co-movement, while the patented product-based approach used in the lower levels enables the necessary precision to capture the specialty sectors of global markets. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rbicsIds">RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested.  (optional)</param>
        /// <param name="level">RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629|  (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructureResponse</returns>
        public async System.Threading.Tasks.Task<StructureResponse>GetRbicsStructureAsync(List<string> rbicsIds = default(List<string>), int? level = default(int?), bool? includeNames = default(bool?), string date = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetRbicsStructureWithHttpInfoAsync(rbicsIds, level, includeNames, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. Understand the full RBICS Taxonomy Structure through time to help organize your analysis or facilitate the use of RBICS in application development.  Designed to overcome disparate and non-standardized company disclosures, the RBICS taxonomy is a normalized global industry classification consisting of a fourteen-by-six matrix. There are twelve economies with two specialty sectors, each with six incremental detailed layers, resulting in over 1,600 sector groups.  The top-levels&#39; market-defined approach groups companies based on their behavioral similarities and stock price co-movement, while the patented product-based approach used in the lower levels enables the necessary precision to capture the specialty sectors of global markets. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rbicsIds">RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested.  (optional)</param>
        /// <param name="level">RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629|  (optional)</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. true &#x3D; Include Names; false &#x3D; Exclude Names. (optional, default to true)</param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructureResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<StructureResponse>> GetRbicsStructureWithHttpInfoAsync(List<string> rbicsIds = default(List<string>), int? level = default(int?), bool? includeNames = default(bool?), string date = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetRBICS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetRBICS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (rbicsIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("csv", "rbicsIds", rbicsIds));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (includeNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("", "includeNames", includeNames));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetRBICS.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetRBICS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetRbicsStructureResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StructureResponse>("/factset-rbics/v1/structure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRbicsStructure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. POST method is optimal for requesting large lists of &#x60;rbicsIds&#x60;. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureRequest">Request Body to request a list of RBICS Structure objects.</param>
        /// <returns>StructureResponse</returns>
        public StructureResponse GetRbicsStructureForList(StructureRequest structureRequest)
        {
            var localVarResponse = GetRbicsStructureForListWithHttpInfo(structureRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. POST method is optimal for requesting large lists of &#x60;rbicsIds&#x60;. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureRequest">Request Body to request a list of RBICS Structure objects.</param>
        /// <returns>ApiResponse of StructureResponse</returns>
        public ApiResponse<StructureResponse> GetRbicsStructureForListWithHttpInfo(StructureRequest structureRequest)
        {
            // verify the required parameter 'structureRequest' is set
            if (structureRequest == null)
            {
                throw new FactSet.SDK.FactSetRBICS.Client.ApiException(400, "Missing required parameter 'structureRequest' when calling StructureApi->GetRbicsStructureForList");
            }

            FactSet.SDK.FactSetRBICS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetRBICS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = structureRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetRBICS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetRbicsStructureForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            StructureResponse>("/factset-rbics/v1/structure", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRbicsStructureForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. POST method is optimal for requesting large lists of &#x60;rbicsIds&#x60;. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureRequest">Request Body to request a list of RBICS Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructureResponse</returns>
        public async System.Threading.Tasks.Task<StructureResponse>GetRbicsStructureForListAsync(StructureRequest structureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetRbicsStructureForListWithHttpInfoAsync(structureRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. Get the full RBICS Taxonomy Structure Ids, Names, and effective periods. POST method is optimal for requesting large lists of &#x60;rbicsIds&#x60;. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetRBICS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureRequest">Request Body to request a list of RBICS Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructureResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<StructureResponse>> GetRbicsStructureForListWithHttpInfoAsync(StructureRequest structureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'structureRequest' is set
            if (structureRequest == null)
            {
                throw new FactSet.SDK.FactSetRBICS.Client.ApiException(400, "Missing required parameter 'structureRequest' when calling StructureApi->GetRbicsStructureForList");
            }


            FactSet.SDK.FactSetRBICS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetRBICS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetRBICS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = structureRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetRBICS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetRbicsStructureForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StructureResponse>("/factset-rbics/v1/structure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRbicsStructureForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
