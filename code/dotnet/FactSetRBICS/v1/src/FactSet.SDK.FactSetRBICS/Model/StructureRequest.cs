/*
 * FactSet RIBCS
 *
 * FactSet Revere Business Industry Classification System (RBICS) is a comprehensive structured taxonomy to classify companies by what they primarily do. It delivers a granular view for investors by classifying companies using a bottom-up approach according to the products and services they provide. By combining this approach with a top-level grouping based on companies' behavior similarities and stock co-movement, FactSet RBICS delivers unprecedented precision for 1,400+ sector groups.  RBICS Focus is a six level classification which highlights the companys main business. It is based on the company business line/s that stand for majority of a the revenue that the company generates. Updated monthly. For more details, visit [Online Assitant Page #20710](https://oa.apps.factset.com/pages/20710).<p><b>Rate limit is set to 40 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetRBICS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetRBICS.Model
{
    /// <summary>
    /// Structure Request Body
    /// </summary>
    [DataContract(Name = "structureRequest")]
    public partial class StructureRequest : IEquatable<StructureRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructureRequest" /> class.
        /// </summary>
        /// <param name="rbicsIds">RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested. .</param>
        /// <param name="level">RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629| .</param>
        /// <param name="includeNames">Option to include or exclude industry Names and the L6 Description. True &#x3D; Include Names; False &#x3D; Exclude Names.  (default to true).</param>
        /// <param name="date">Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. .</param>
        public StructureRequest(List<string> rbicsIds = default(List<string>), int level = default(int), bool includeNames = true, string date = default(string))
        {
            this.RbicsIds = rbicsIds;
            this.Level = level;
            this.IncludeNames = includeNames;
            this.Date = date;
        }

        /// <summary>
        /// RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested. 
        /// </summary>
        /// <value>RBICS Taxonomy Id Filter. Use to lookup the structure details for the Id requested. </value>
        [DataMember(Name = "rbicsIds", EmitDefaultValue = false)]
        public List<string> RbicsIds { get; set; }

        /// <summary>
        /// RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629| 
        /// </summary>
        /// <value>RBICS industry levels to include in the response. All levels from 1-N will be returned. For example, &#39;3&#39; returns all levels 1,2 and 3. To request all levels, request level&#x3D;6. Level 1 is returned by default.   |Level|Description|Number of Groups|   |- --|- --|- --|   |1|Economomy|14|   |2|Sector|37   |3|Sub-Sector|109|   |4|Industry Group|366|   |5|Inudstry|901|   |6|Sub-Industry|1629| </value>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public int Level { get; set; }

        /// <summary>
        /// Option to include or exclude industry Names and the L6 Description. True &#x3D; Include Names; False &#x3D; Exclude Names. 
        /// </summary>
        /// <value>Option to include or exclude industry Names and the L6 Description. True &#x3D; Include Names; False &#x3D; Exclude Names. </value>
        [DataMember(Name = "includeNames", EmitDefaultValue = true)]
        public bool IncludeNames { get; set; }

        /// <summary>
        /// Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. 
        /// </summary>
        /// <value>Effective date for data expressed in YYYY-MM-DD format. If no date is requested, the default behavior is to return the full history for the requested entity. </value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StructureRequest {\n");
            sb.Append("  RbicsIds: ").Append(RbicsIds).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  IncludeNames: ").Append(IncludeNames).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructureRequest);
        }

        /// <summary>
        /// Returns true if StructureRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of StructureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructureRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RbicsIds == input.RbicsIds ||
                    this.RbicsIds != null &&
                    input.RbicsIds != null &&
                    this.RbicsIds.SequenceEqual(input.RbicsIds)
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.IncludeNames == input.IncludeNames ||
                    this.IncludeNames.Equals(input.IncludeNames)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RbicsIds != null)
                {
                    hashCode = (hashCode * 59) + this.RbicsIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Level.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeNames.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Level (int) maximum
            if (this.Level > (int)6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Level, must be a value less than or equal to 6.", new [] { "Level" });
            }

            // Level (int) minimum
            if (this.Level < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Level, must be a value greater than or equal to 1.", new [] { "Level" });
            }

            yield break;
        }
    }

}
