/*
 * FactSet Private Company API
 *
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetPrivateCompany.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetPrivateCompany.Model
{
    /// <summary>
    /// Profile object
    /// </summary>
    [DataContract(Name = "Profile")]
    public partial class Profile : IEquatable<Profile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used for the request.</param>
        /// <param name="currency">Code representing the currency.</param>
        /// <param name="ceo">Currently listed company CEO.</param>
        /// <param name="founders">Currently listed company founders.</param>
        /// <param name="chair">Current chairperson.</param>
        /// <param name="peBackingCurrent">Flag for whether the specified company currently has PE backing.</param>
        /// <param name="peBackingEver">Flag for whether the specified company has ever had PE backing.</param>
        /// <param name="vcBackingCurrent">Flag for whether the specified company currently has VC backing.</param>
        /// <param name="vcBackingEver">Flag for whether the specified company has ever had VC backing.</param>
        /// <param name="totalInvestors">Total number of investment rounds for the portfolio company.</param>
        /// <param name="activeInvestors">Number of active portfolio companies for the specified private equity firm.</param>
        /// <param name="activeInvestorsList">List of investors that are active investors in the given portfolio company itemized by security.</param>
        /// <param name="exitedInvestorsList">List of investors that had previously invested in the given portfolio company itemized by security.</param>
        /// <param name="amountRaisedUSD">Current estimated total of venture capital raised in USD.  Each investment amount is currency converted on the day of the investment. Then all values are summed.  .</param>
        /// <param name="amountRaisedLocalCurrency">Current estimated total of venture capital raised in local currency..</param>
        /// <param name="vcpeAmountRaisedUSD">Current estimated total of venture capital and private equity raised in USD.  Each investment amount is currency converted on the day of the investment. Then all values are summed. .</param>
        /// <param name="vcpeAmountRaisedLocalCurrency">Current estimated total of venture capital raised in all rounds of the portfolio company. This item applies to venture capital raised rounds only.   .</param>
        /// <param name="investmentStats">Investment stats summary for the specified portfolio company. Always represented in USD.  .</param>
        /// <param name="lastInvestmentDate">The date that is associated with the most recent amount of money that was invested into the portfolio company.</param>
        /// <param name="firstInvestmentDate">The date that is associated with the amount of money that was first invested into the portfolio company..</param>
        /// <param name="businessTags">Tag(s) that describe what the company does based on the most common language (text snippets)  found on their website and/or social media sites. .</param>
        /// <param name="latestPostMoneyValuation">The value of a company, post capital injection. This is the latest value and may not include  the most recent rounds of funding. Always represented in USD .</param>
        public Profile(string requestId = default(string), string currency = default(string), string ceo = default(string), List<string> founders = default(List<string>), string chair = default(string), bool? peBackingCurrent = default(bool?), bool? peBackingEver = default(bool?), bool? vcBackingCurrent = default(bool?), bool? vcBackingEver = default(bool?), int? totalInvestors = default(int?), int? activeInvestors = default(int?), List<string> activeInvestorsList = default(List<string>), List<string> exitedInvestorsList = default(List<string>), double? amountRaisedUSD = default(double?), double? amountRaisedLocalCurrency = default(double?), double? vcpeAmountRaisedUSD = default(double?), double? vcpeAmountRaisedLocalCurrency = default(double?), double? investmentStats = default(double?), DateTime? lastInvestmentDate = default(DateTime?), DateTime? firstInvestmentDate = default(DateTime?), List<string> businessTags = default(List<string>), decimal? latestPostMoneyValuation = default(decimal?))
        {
            this.RequestId = requestId;
            this.Currency = currency;
            this.Ceo = ceo;
            this.Founders = founders;
            this.Chair = chair;
            this.PeBackingCurrent = peBackingCurrent;
            this.PeBackingEver = peBackingEver;
            this.VcBackingCurrent = vcBackingCurrent;
            this.VcBackingEver = vcBackingEver;
            this.TotalInvestors = totalInvestors;
            this.ActiveInvestors = activeInvestors;
            this.ActiveInvestorsList = activeInvestorsList;
            this.ExitedInvestorsList = exitedInvestorsList;
            this.AmountRaisedUSD = amountRaisedUSD;
            this.AmountRaisedLocalCurrency = amountRaisedLocalCurrency;
            this.VcpeAmountRaisedUSD = vcpeAmountRaisedUSD;
            this.VcpeAmountRaisedLocalCurrency = vcpeAmountRaisedLocalCurrency;
            this.InvestmentStats = investmentStats;
            this.LastInvestmentDate = lastInvestmentDate;
            this.FirstInvestmentDate = firstInvestmentDate;
            this.BusinessTags = businessTags;
            this.LatestPostMoneyValuation = latestPostMoneyValuation;
        }

        /// <summary>
        /// Identifier that was used for the request
        /// </summary>
        /// <value>Identifier that was used for the request</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Code representing the currency
        /// </summary>
        /// <value>Code representing the currency</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Currently listed company CEO
        /// </summary>
        /// <value>Currently listed company CEO</value>
        [DataMember(Name = "ceo", EmitDefaultValue = true)]
        public string Ceo { get; set; }

        /// <summary>
        /// Currently listed company founders
        /// </summary>
        /// <value>Currently listed company founders</value>
        [DataMember(Name = "founders", EmitDefaultValue = false)]
        public List<string> Founders { get; set; }

        /// <summary>
        /// Current chairperson
        /// </summary>
        /// <value>Current chairperson</value>
        [DataMember(Name = "chair", EmitDefaultValue = true)]
        public string Chair { get; set; }

        /// <summary>
        /// Flag for whether the specified company currently has PE backing
        /// </summary>
        /// <value>Flag for whether the specified company currently has PE backing</value>
        [DataMember(Name = "peBackingCurrent", EmitDefaultValue = true)]
        public bool? PeBackingCurrent { get; set; }

        /// <summary>
        /// Flag for whether the specified company has ever had PE backing
        /// </summary>
        /// <value>Flag for whether the specified company has ever had PE backing</value>
        [DataMember(Name = "peBackingEver", EmitDefaultValue = true)]
        public bool? PeBackingEver { get; set; }

        /// <summary>
        /// Flag for whether the specified company currently has VC backing
        /// </summary>
        /// <value>Flag for whether the specified company currently has VC backing</value>
        [DataMember(Name = "vcBackingCurrent", EmitDefaultValue = true)]
        public bool? VcBackingCurrent { get; set; }

        /// <summary>
        /// Flag for whether the specified company has ever had VC backing
        /// </summary>
        /// <value>Flag for whether the specified company has ever had VC backing</value>
        [DataMember(Name = "vcBackingEver", EmitDefaultValue = true)]
        public bool? VcBackingEver { get; set; }

        /// <summary>
        /// Total number of investment rounds for the portfolio company
        /// </summary>
        /// <value>Total number of investment rounds for the portfolio company</value>
        [DataMember(Name = "totalInvestors", EmitDefaultValue = true)]
        public int? TotalInvestors { get; set; }

        /// <summary>
        /// Number of active portfolio companies for the specified private equity firm
        /// </summary>
        /// <value>Number of active portfolio companies for the specified private equity firm</value>
        [DataMember(Name = "activeInvestors", EmitDefaultValue = true)]
        public int? ActiveInvestors { get; set; }

        /// <summary>
        /// List of investors that are active investors in the given portfolio company itemized by security
        /// </summary>
        /// <value>List of investors that are active investors in the given portfolio company itemized by security</value>
        [DataMember(Name = "activeInvestorsList", EmitDefaultValue = false)]
        public List<string> ActiveInvestorsList { get; set; }

        /// <summary>
        /// List of investors that had previously invested in the given portfolio company itemized by security
        /// </summary>
        /// <value>List of investors that had previously invested in the given portfolio company itemized by security</value>
        [DataMember(Name = "exitedInvestorsList", EmitDefaultValue = false)]
        public List<string> ExitedInvestorsList { get; set; }

        /// <summary>
        /// Current estimated total of venture capital raised in USD.  Each investment amount is currency converted on the day of the investment. Then all values are summed.  
        /// </summary>
        /// <value>Current estimated total of venture capital raised in USD.  Each investment amount is currency converted on the day of the investment. Then all values are summed.  </value>
        [DataMember(Name = "amountRaisedUSD", EmitDefaultValue = true)]
        public double? AmountRaisedUSD { get; set; }

        /// <summary>
        /// Current estimated total of venture capital raised in local currency.
        /// </summary>
        /// <value>Current estimated total of venture capital raised in local currency.</value>
        [DataMember(Name = "amountRaisedLocalCurrency", EmitDefaultValue = true)]
        public double? AmountRaisedLocalCurrency { get; set; }

        /// <summary>
        /// Current estimated total of venture capital and private equity raised in USD.  Each investment amount is currency converted on the day of the investment. Then all values are summed. 
        /// </summary>
        /// <value>Current estimated total of venture capital and private equity raised in USD.  Each investment amount is currency converted on the day of the investment. Then all values are summed. </value>
        [DataMember(Name = "vcpeAmountRaisedUSD", EmitDefaultValue = true)]
        public double? VcpeAmountRaisedUSD { get; set; }

        /// <summary>
        /// Current estimated total of venture capital raised in all rounds of the portfolio company. This item applies to venture capital raised rounds only.   
        /// </summary>
        /// <value>Current estimated total of venture capital raised in all rounds of the portfolio company. This item applies to venture capital raised rounds only.   </value>
        [DataMember(Name = "vcpeAmountRaisedLocalCurrency", EmitDefaultValue = true)]
        public double? VcpeAmountRaisedLocalCurrency { get; set; }

        /// <summary>
        /// Investment stats summary for the specified portfolio company. Always represented in USD.  
        /// </summary>
        /// <value>Investment stats summary for the specified portfolio company. Always represented in USD.  </value>
        [DataMember(Name = "investmentStats", EmitDefaultValue = true)]
        public double? InvestmentStats { get; set; }

        /// <summary>
        /// The date that is associated with the most recent amount of money that was invested into the portfolio company
        /// </summary>
        /// <value>The date that is associated with the most recent amount of money that was invested into the portfolio company</value>
        [DataMember(Name = "lastInvestmentDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? LastInvestmentDate { get; set; }

        /// <summary>
        /// The date that is associated with the amount of money that was first invested into the portfolio company.
        /// </summary>
        /// <value>The date that is associated with the amount of money that was first invested into the portfolio company.</value>
        [DataMember(Name = "firstInvestmentDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? FirstInvestmentDate { get; set; }

        /// <summary>
        /// Tag(s) that describe what the company does based on the most common language (text snippets)  found on their website and/or social media sites. 
        /// </summary>
        /// <value>Tag(s) that describe what the company does based on the most common language (text snippets)  found on their website and/or social media sites. </value>
        [DataMember(Name = "businessTags", EmitDefaultValue = false)]
        public List<string> BusinessTags { get; set; }

        /// <summary>
        /// The value of a company, post capital injection. This is the latest value and may not include  the most recent rounds of funding. Always represented in USD 
        /// </summary>
        /// <value>The value of a company, post capital injection. This is the latest value and may not include  the most recent rounds of funding. Always represented in USD </value>
        [DataMember(Name = "latestPostMoneyValuation", EmitDefaultValue = true)]
        public decimal? LatestPostMoneyValuation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Profile {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Ceo: ").Append(Ceo).Append("\n");
            sb.Append("  Founders: ").Append(Founders).Append("\n");
            sb.Append("  Chair: ").Append(Chair).Append("\n");
            sb.Append("  PeBackingCurrent: ").Append(PeBackingCurrent).Append("\n");
            sb.Append("  PeBackingEver: ").Append(PeBackingEver).Append("\n");
            sb.Append("  VcBackingCurrent: ").Append(VcBackingCurrent).Append("\n");
            sb.Append("  VcBackingEver: ").Append(VcBackingEver).Append("\n");
            sb.Append("  TotalInvestors: ").Append(TotalInvestors).Append("\n");
            sb.Append("  ActiveInvestors: ").Append(ActiveInvestors).Append("\n");
            sb.Append("  ActiveInvestorsList: ").Append(ActiveInvestorsList).Append("\n");
            sb.Append("  ExitedInvestorsList: ").Append(ExitedInvestorsList).Append("\n");
            sb.Append("  AmountRaisedUSD: ").Append(AmountRaisedUSD).Append("\n");
            sb.Append("  AmountRaisedLocalCurrency: ").Append(AmountRaisedLocalCurrency).Append("\n");
            sb.Append("  VcpeAmountRaisedUSD: ").Append(VcpeAmountRaisedUSD).Append("\n");
            sb.Append("  VcpeAmountRaisedLocalCurrency: ").Append(VcpeAmountRaisedLocalCurrency).Append("\n");
            sb.Append("  InvestmentStats: ").Append(InvestmentStats).Append("\n");
            sb.Append("  LastInvestmentDate: ").Append(LastInvestmentDate).Append("\n");
            sb.Append("  FirstInvestmentDate: ").Append(FirstInvestmentDate).Append("\n");
            sb.Append("  BusinessTags: ").Append(BusinessTags).Append("\n");
            sb.Append("  LatestPostMoneyValuation: ").Append(LatestPostMoneyValuation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Profile);
        }

        /// <summary>
        /// Returns true if Profile instances are equal
        /// </summary>
        /// <param name="input">Instance of Profile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Profile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Ceo == input.Ceo ||
                    (this.Ceo != null &&
                    this.Ceo.Equals(input.Ceo))
                ) && 
                (
                    this.Founders == input.Founders ||
                    this.Founders != null &&
                    input.Founders != null &&
                    this.Founders.SequenceEqual(input.Founders)
                ) && 
                (
                    this.Chair == input.Chair ||
                    (this.Chair != null &&
                    this.Chair.Equals(input.Chair))
                ) && 
                (
                    this.PeBackingCurrent == input.PeBackingCurrent ||
                    (this.PeBackingCurrent != null &&
                    this.PeBackingCurrent.Equals(input.PeBackingCurrent))
                ) && 
                (
                    this.PeBackingEver == input.PeBackingEver ||
                    (this.PeBackingEver != null &&
                    this.PeBackingEver.Equals(input.PeBackingEver))
                ) && 
                (
                    this.VcBackingCurrent == input.VcBackingCurrent ||
                    (this.VcBackingCurrent != null &&
                    this.VcBackingCurrent.Equals(input.VcBackingCurrent))
                ) && 
                (
                    this.VcBackingEver == input.VcBackingEver ||
                    (this.VcBackingEver != null &&
                    this.VcBackingEver.Equals(input.VcBackingEver))
                ) && 
                (
                    this.TotalInvestors == input.TotalInvestors ||
                    (this.TotalInvestors != null &&
                    this.TotalInvestors.Equals(input.TotalInvestors))
                ) && 
                (
                    this.ActiveInvestors == input.ActiveInvestors ||
                    (this.ActiveInvestors != null &&
                    this.ActiveInvestors.Equals(input.ActiveInvestors))
                ) && 
                (
                    this.ActiveInvestorsList == input.ActiveInvestorsList ||
                    this.ActiveInvestorsList != null &&
                    input.ActiveInvestorsList != null &&
                    this.ActiveInvestorsList.SequenceEqual(input.ActiveInvestorsList)
                ) && 
                (
                    this.ExitedInvestorsList == input.ExitedInvestorsList ||
                    this.ExitedInvestorsList != null &&
                    input.ExitedInvestorsList != null &&
                    this.ExitedInvestorsList.SequenceEqual(input.ExitedInvestorsList)
                ) && 
                (
                    this.AmountRaisedUSD == input.AmountRaisedUSD ||
                    (this.AmountRaisedUSD != null &&
                    this.AmountRaisedUSD.Equals(input.AmountRaisedUSD))
                ) && 
                (
                    this.AmountRaisedLocalCurrency == input.AmountRaisedLocalCurrency ||
                    (this.AmountRaisedLocalCurrency != null &&
                    this.AmountRaisedLocalCurrency.Equals(input.AmountRaisedLocalCurrency))
                ) && 
                (
                    this.VcpeAmountRaisedUSD == input.VcpeAmountRaisedUSD ||
                    (this.VcpeAmountRaisedUSD != null &&
                    this.VcpeAmountRaisedUSD.Equals(input.VcpeAmountRaisedUSD))
                ) && 
                (
                    this.VcpeAmountRaisedLocalCurrency == input.VcpeAmountRaisedLocalCurrency ||
                    (this.VcpeAmountRaisedLocalCurrency != null &&
                    this.VcpeAmountRaisedLocalCurrency.Equals(input.VcpeAmountRaisedLocalCurrency))
                ) && 
                (
                    this.InvestmentStats == input.InvestmentStats ||
                    (this.InvestmentStats != null &&
                    this.InvestmentStats.Equals(input.InvestmentStats))
                ) && 
                (
                    this.LastInvestmentDate == input.LastInvestmentDate ||
                    (this.LastInvestmentDate != null &&
                    this.LastInvestmentDate.Equals(input.LastInvestmentDate))
                ) && 
                (
                    this.FirstInvestmentDate == input.FirstInvestmentDate ||
                    (this.FirstInvestmentDate != null &&
                    this.FirstInvestmentDate.Equals(input.FirstInvestmentDate))
                ) && 
                (
                    this.BusinessTags == input.BusinessTags ||
                    this.BusinessTags != null &&
                    input.BusinessTags != null &&
                    this.BusinessTags.SequenceEqual(input.BusinessTags)
                ) && 
                (
                    this.LatestPostMoneyValuation == input.LatestPostMoneyValuation ||
                    (this.LatestPostMoneyValuation != null &&
                    this.LatestPostMoneyValuation.Equals(input.LatestPostMoneyValuation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Ceo != null)
                {
                    hashCode = (hashCode * 59) + this.Ceo.GetHashCode();
                }
                if (this.Founders != null)
                {
                    hashCode = (hashCode * 59) + this.Founders.GetHashCode();
                }
                if (this.Chair != null)
                {
                    hashCode = (hashCode * 59) + this.Chair.GetHashCode();
                }
                if (this.PeBackingCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.PeBackingCurrent.GetHashCode();
                }
                if (this.PeBackingEver != null)
                {
                    hashCode = (hashCode * 59) + this.PeBackingEver.GetHashCode();
                }
                if (this.VcBackingCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.VcBackingCurrent.GetHashCode();
                }
                if (this.VcBackingEver != null)
                {
                    hashCode = (hashCode * 59) + this.VcBackingEver.GetHashCode();
                }
                if (this.TotalInvestors != null)
                {
                    hashCode = (hashCode * 59) + this.TotalInvestors.GetHashCode();
                }
                if (this.ActiveInvestors != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveInvestors.GetHashCode();
                }
                if (this.ActiveInvestorsList != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveInvestorsList.GetHashCode();
                }
                if (this.ExitedInvestorsList != null)
                {
                    hashCode = (hashCode * 59) + this.ExitedInvestorsList.GetHashCode();
                }
                if (this.AmountRaisedUSD != null)
                {
                    hashCode = (hashCode * 59) + this.AmountRaisedUSD.GetHashCode();
                }
                if (this.AmountRaisedLocalCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.AmountRaisedLocalCurrency.GetHashCode();
                }
                if (this.VcpeAmountRaisedUSD != null)
                {
                    hashCode = (hashCode * 59) + this.VcpeAmountRaisedUSD.GetHashCode();
                }
                if (this.VcpeAmountRaisedLocalCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.VcpeAmountRaisedLocalCurrency.GetHashCode();
                }
                if (this.InvestmentStats != null)
                {
                    hashCode = (hashCode * 59) + this.InvestmentStats.GetHashCode();
                }
                if (this.LastInvestmentDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastInvestmentDate.GetHashCode();
                }
                if (this.FirstInvestmentDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirstInvestmentDate.GetHashCode();
                }
                if (this.BusinessTags != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessTags.GetHashCode();
                }
                if (this.LatestPostMoneyValuation != null)
                {
                    hashCode = (hashCode * 59) + this.LatestPostMoneyValuation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
