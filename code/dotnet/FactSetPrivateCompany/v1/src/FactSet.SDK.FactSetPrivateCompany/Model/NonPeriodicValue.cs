/*
 * FactSet Private Company API
 *
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetPrivateCompany.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetPrivateCompany.Model
{
    /// <summary>
    /// Value of the data item requested. Note that the type of value is &#39;object&#39;, and depending on the item requested, the value could be an object representation of a string or double. 
    /// </summary>
    [DataContract(Name = "NonPeriodicValue")]
    public partial class NonPeriodicValue : IEquatable<NonPeriodicValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NonPeriodicValue" /> class.
        /// </summary>
        /// <param name="stringValue">Value of the requested metric.</param>
        /// <param name="numberValue">Value of the requested metric.</param>
        /// <param name="valueType">Indicated whether the value of the requested metric is a string or a number.</param>
        public NonPeriodicValue(string stringValue = default(string), double? numberValue = default(double?), string valueType = default(string))
        {
            this.StringValue = stringValue;
            this.NumberValue = numberValue;
            this.ValueType = valueType;
        }

        /// <summary>
        /// Value of the requested metric
        /// </summary>
        /// <value>Value of the requested metric</value>
        [DataMember(Name = "stringValue", EmitDefaultValue = true)]
        public string StringValue { get; set; }

        /// <summary>
        /// Value of the requested metric
        /// </summary>
        /// <value>Value of the requested metric</value>
        [DataMember(Name = "numberValue", EmitDefaultValue = true)]
        public double? NumberValue { get; set; }

        /// <summary>
        /// Indicated whether the value of the requested metric is a string or a number
        /// </summary>
        /// <value>Indicated whether the value of the requested metric is a string or a number</value>
        [DataMember(Name = "valueType", EmitDefaultValue = true)]
        public string ValueType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NonPeriodicValue {\n");
            sb.Append("  StringValue: ").Append(StringValue).Append("\n");
            sb.Append("  NumberValue: ").Append(NumberValue).Append("\n");
            sb.Append("  ValueType: ").Append(ValueType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NonPeriodicValue);
        }

        /// <summary>
        /// Returns true if NonPeriodicValue instances are equal
        /// </summary>
        /// <param name="input">Instance of NonPeriodicValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NonPeriodicValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StringValue == input.StringValue ||
                    (this.StringValue != null &&
                    this.StringValue.Equals(input.StringValue))
                ) && 
                (
                    this.NumberValue == input.NumberValue ||
                    (this.NumberValue != null &&
                    this.NumberValue.Equals(input.NumberValue))
                ) && 
                (
                    this.ValueType == input.ValueType ||
                    (this.ValueType != null &&
                    this.ValueType.Equals(input.ValueType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StringValue != null)
                {
                    hashCode = (hashCode * 59) + this.StringValue.GetHashCode();
                }
                if (this.NumberValue != null)
                {
                    hashCode = (hashCode * 59) + this.NumberValue.GetHashCode();
                }
                if (this.ValueType != null)
                {
                    hashCode = (hashCode * 59) + this.ValueType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
