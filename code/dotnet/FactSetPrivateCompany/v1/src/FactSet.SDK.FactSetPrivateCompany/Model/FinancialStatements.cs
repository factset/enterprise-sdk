/*
 * FactSet Private Company API
 *
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetPrivateCompany.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetPrivateCompany.Model
{
    /// <summary>
    /// Financial statement object
    /// </summary>
    [DataContract(Name = "FinancialStatements")]
    public partial class FinancialStatements : IEquatable<FinancialStatements>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialStatements" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="fsymId">Unique FactSet-generated identifier representing an entity for the current entity identifier (-E).</param>
        /// <param name="reportDate">The date the reported fiscal period ended.</param>
        /// <param name="fiscalYear">Fiscal year of the reported period in YYYY format.</param>
        /// <param name="items">Array of financial statement items.</param>
        public FinancialStatements(string requestId = default(string), string fsymId = default(string), List<DateTime?> reportDate = default(List<DateTime?>), List<string> fiscalYear = default(List<string>), List<StatementItem> items = default(List<StatementItem>))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.ReportDate = reportDate;
            this.FiscalYear = fiscalYear;
            this.Items = items;
        }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Unique FactSet-generated identifier representing an entity for the current entity identifier (-E)
        /// </summary>
        /// <value>Unique FactSet-generated identifier representing an entity for the current entity identifier (-E)</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// The date the reported fiscal period ended
        /// </summary>
        /// <value>The date the reported fiscal period ended</value>
        [DataMember(Name = "reportDate", EmitDefaultValue = false)]
        public List<DateTime?> ReportDate { get; set; }

        /// <summary>
        /// Fiscal year of the reported period in YYYY format
        /// </summary>
        /// <value>Fiscal year of the reported period in YYYY format</value>
        [DataMember(Name = "fiscalYear", EmitDefaultValue = false)]
        public List<string> FiscalYear { get; set; }

        /// <summary>
        /// Array of financial statement items
        /// </summary>
        /// <value>Array of financial statement items</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<StatementItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinancialStatements {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialStatements);
        }

        /// <summary>
        /// Returns true if FinancialStatements instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialStatements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialStatements input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.ReportDate == input.ReportDate ||
                    this.ReportDate != null &&
                    input.ReportDate != null &&
                    this.ReportDate.SequenceEqual(input.ReportDate)
                ) && 
                (
                    this.FiscalYear == input.FiscalYear ||
                    this.FiscalYear != null &&
                    input.FiscalYear != null &&
                    this.FiscalYear.SequenceEqual(input.FiscalYear)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.ReportDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReportDate.GetHashCode();
                }
                if (this.FiscalYear != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalYear.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
