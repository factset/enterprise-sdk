/*
 * FactSet Private Company API
 *
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetPrivateCompany.Client;
using FactSet.SDK.FactSetPrivateCompany.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetPrivateCompany.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns available private company metrics, and ratios.
        /// </summary>
        /// <remarks>
        /// Returns list of available Private Company metrics, and ratios that can be used in the &#x60;metrics&#x60; parameter of related endpoints. These are related to FactSet Private Company standardized data. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateCompany.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Filters the list of available metrics per endpoint  - &lt;/br&gt;   * **FINANCIALS** &#x3D; Financials endpoint data items, such as Assets, Liabilities, and EBITDA. &lt;/br&gt;   * **NON_PERIODIC** &#x3D; Non-Periodic endpoint data items, such as ISO Currency, Current CEO, and Investor List.  (optional)</param>
        /// <returns>MetricsResponse</returns>
        MetricsResponse GetMetrics(string category = default(string));

        /// <summary>
        /// Returns available private company metrics, and ratios.
        /// </summary>
        /// <remarks>
        /// Returns list of available Private Company metrics, and ratios that can be used in the &#x60;metrics&#x60; parameter of related endpoints. These are related to FactSet Private Company standardized data. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateCompany.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Filters the list of available metrics per endpoint  - &lt;/br&gt;   * **FINANCIALS** &#x3D; Financials endpoint data items, such as Assets, Liabilities, and EBITDA. &lt;/br&gt;   * **NON_PERIODIC** &#x3D; Non-Periodic endpoint data items, such as ISO Currency, Current CEO, and Investor List.  (optional)</param>
        /// <returns>ApiResponse of MetricsResponse</returns>
        ApiResponse<MetricsResponse> GetMetricsWithHttpInfo(string category = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns available private company metrics, and ratios.
        /// </summary>
        /// <remarks>
        /// Returns list of available Private Company metrics, and ratios that can be used in the &#x60;metrics&#x60; parameter of related endpoints. These are related to FactSet Private Company standardized data. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateCompany.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Filters the list of available metrics per endpoint  - &lt;/br&gt;   * **FINANCIALS** &#x3D; Financials endpoint data items, such as Assets, Liabilities, and EBITDA. &lt;/br&gt;   * **NON_PERIODIC** &#x3D; Non-Periodic endpoint data items, such as ISO Currency, Current CEO, and Investor List.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetricsResponse</returns>
        System.Threading.Tasks.Task<MetricsResponse> GetMetricsAsync(string category = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns available private company metrics, and ratios.
        /// </summary>
        /// <remarks>
        /// Returns list of available Private Company metrics, and ratios that can be used in the &#x60;metrics&#x60; parameter of related endpoints. These are related to FactSet Private Company standardized data. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateCompany.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Filters the list of available metrics per endpoint  - &lt;/br&gt;   * **FINANCIALS** &#x3D; Financials endpoint data items, such as Assets, Liabilities, and EBITDA. &lt;/br&gt;   * **NON_PERIODIC** &#x3D; Non-Periodic endpoint data items, such as ISO Currency, Current CEO, and Investor List.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetricsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetricsResponse>> GetMetricsWithHttpInfoAsync(string category = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApi : IMetricsApiSync, IMetricsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetricsApi : IMetricsApi
    {
        private FactSet.SDK.FactSetPrivateCompany.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetMetricsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(MetricsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetricsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetricsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetPrivateCompany.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetPrivateCompany.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetPrivateCompany.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetPrivateCompany.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetPrivateCompany.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetPrivateCompany.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetricsApi(FactSet.SDK.FactSetPrivateCompany.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetPrivateCompany.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetPrivateCompany.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetPrivateCompany.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetPrivateCompany.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetPrivateCompany.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetricsApi(FactSet.SDK.FactSetPrivateCompany.Client.ISynchronousClient client, FactSet.SDK.FactSetPrivateCompany.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetPrivateCompany.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetPrivateCompany.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetPrivateCompany.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetPrivateCompany.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetPrivateCompany.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetPrivateCompany.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns available private company metrics, and ratios. Returns list of available Private Company metrics, and ratios that can be used in the &#x60;metrics&#x60; parameter of related endpoints. These are related to FactSet Private Company standardized data. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateCompany.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Filters the list of available metrics per endpoint  - &lt;/br&gt;   * **FINANCIALS** &#x3D; Financials endpoint data items, such as Assets, Liabilities, and EBITDA. &lt;/br&gt;   * **NON_PERIODIC** &#x3D; Non-Periodic endpoint data items, such as ISO Currency, Current CEO, and Investor List.  (optional)</param>
        /// <returns>MetricsResponse</returns>
        public MetricsResponse GetMetrics(string category = default(string))
        {
            var localVarResponse = GetMetricsWithHttpInfo(category);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns available private company metrics, and ratios. Returns list of available Private Company metrics, and ratios that can be used in the &#x60;metrics&#x60; parameter of related endpoints. These are related to FactSet Private Company standardized data. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateCompany.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Filters the list of available metrics per endpoint  - &lt;/br&gt;   * **FINANCIALS** &#x3D; Financials endpoint data items, such as Assets, Liabilities, and EBITDA. &lt;/br&gt;   * **NON_PERIODIC** &#x3D; Non-Periodic endpoint data items, such as ISO Currency, Current CEO, and Investor List.  (optional)</param>
        /// <returns>ApiResponse of MetricsResponse</returns>
        public ApiResponse<MetricsResponse> GetMetricsWithHttpInfo(string category = default(string))
        {
            FactSet.SDK.FactSetPrivateCompany.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPrivateCompany.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPrivateCompany.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPrivateCompany.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateCompany.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPrivateCompany.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetMetricsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            MetricsResponse>("/metrics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetrics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns available private company metrics, and ratios. Returns list of available Private Company metrics, and ratios that can be used in the &#x60;metrics&#x60; parameter of related endpoints. These are related to FactSet Private Company standardized data. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateCompany.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Filters the list of available metrics per endpoint  - &lt;/br&gt;   * **FINANCIALS** &#x3D; Financials endpoint data items, such as Assets, Liabilities, and EBITDA. &lt;/br&gt;   * **NON_PERIODIC** &#x3D; Non-Periodic endpoint data items, such as ISO Currency, Current CEO, and Investor List.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetricsResponse</returns>
        public async System.Threading.Tasks.Task<MetricsResponse>GetMetricsAsync(string category = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetMetricsWithHttpInfoAsync(category, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns available private company metrics, and ratios. Returns list of available Private Company metrics, and ratios that can be used in the &#x60;metrics&#x60; parameter of related endpoints. These are related to FactSet Private Company standardized data. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateCompany.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Filters the list of available metrics per endpoint  - &lt;/br&gt;   * **FINANCIALS** &#x3D; Financials endpoint data items, such as Assets, Liabilities, and EBITDA. &lt;/br&gt;   * **NON_PERIODIC** &#x3D; Non-Periodic endpoint data items, such as ISO Currency, Current CEO, and Investor List.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetricsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<MetricsResponse>> GetMetricsWithHttpInfoAsync(string category = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetPrivateCompany.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPrivateCompany.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPrivateCompany.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPrivateCompany.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateCompany.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPrivateCompany.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetMetricsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MetricsResponse>("/metrics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetrics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
