/*
 * Global Filings API
 *
 *  The Filings API provides a comprehensive set of functionalities for searching and retrieving filing documents from various sources.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  In addition, a document count request will provide information on the number of stories available for a particular security.  The reference endpoints, such as sources, formTypes, timeZones, and categories, provide comprehensive lists of available sources, form types, time zones, and categories, respectively.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GlobalFilings.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GlobalFilings.Model
{
    /// <summary>
    /// InvestmentResearchObject
    /// </summary>
    [DataContract(Name = "InvestmentResearchObject")]
    public partial class InvestmentResearchObject : IEquatable<InvestmentResearchObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestmentResearchObject" /> class.
        /// </summary>
        /// <param name="headline">Headline of the story, actual time and date of the event..</param>
        /// <param name="source">Provides the source of the document, and the source value is one among those provided by the \&quot;/reference/sources\&quot; endpoint..</param>
        /// <param name="primaryIds">Refers to the main company a particular document refers to..</param>
        /// <param name="allIds">Refers to all companies mentioned in the document. This could also include the primary company id as well.   **Note:** For the \&quot;allIds\&quot; and \&quot;primaryIds\&quot; fields:   - These identifiers can be either SEDOLs or CUSIPs, depending on the search criteria and the type of identifiers specified in your request.   - The API will return the corresponding identifiers based on the search parameters provided..</param>
        /// <param name="filingsDateTime">Publish date and time of the latest version (in ISO 8601 format, UTC)..</param>
        /// <param name="categories">- Comma-separated list of country, industry, and subject codes. - Sourced from \&quot;/reference/categories\&quot; with two-letter codes (SB for subjects, IN for industries, LN for languages, CN for countries, RN for regions, DT for document types)..</param>
        /// <param name="filingsLink">A secure HTTPS link for downloading the associated document..</param>
        /// <param name="documentId">Unique identifier for a document..</param>
        /// <param name="filingSize">Filings specific metadata providing info around the size of the document..</param>
        /// <param name="formType">Filings specific metadata providing info around the form type (e.g. 8K, 10K, etc.).</param>
        /// <param name="accession">A unique identifier given to each EDGAR filings document..</param>
        /// <param name="searchIds">Returns IDs used in the id&#39;s parameter. The identifier type is based on what was used in the parameter..</param>
        public InvestmentResearchObject(string headline = default(string), string source = default(string), List<string> primaryIds = default(List<string>), List<string> allIds = default(List<string>), string filingsDateTime = default(string), List<string> categories = default(List<string>), string filingsLink = default(string), string documentId = default(string), string filingSize = default(string), string formType = default(string), string accession = default(string), string searchIds = default(string))
        {
            this.Headline = headline;
            this.Source = source;
            this.PrimaryIds = primaryIds;
            this.AllIds = allIds;
            this.FilingsDateTime = filingsDateTime;
            this.Categories = categories;
            this.FilingsLink = filingsLink;
            this.DocumentId = documentId;
            this.FilingSize = filingSize;
            this.FormType = formType;
            this.Accession = accession;
            this.SearchIds = searchIds;
        }

        /// <summary>
        /// Headline of the story, actual time and date of the event.
        /// </summary>
        /// <value>Headline of the story, actual time and date of the event.</value>
        [DataMember(Name = "headline", EmitDefaultValue = false)]
        public string Headline { get; set; }

        /// <summary>
        /// Provides the source of the document, and the source value is one among those provided by the \&quot;/reference/sources\&quot; endpoint.
        /// </summary>
        /// <value>Provides the source of the document, and the source value is one among those provided by the \&quot;/reference/sources\&quot; endpoint.</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Refers to the main company a particular document refers to.
        /// </summary>
        /// <value>Refers to the main company a particular document refers to.</value>
        [DataMember(Name = "primaryIds", EmitDefaultValue = false)]
        public List<string> PrimaryIds { get; set; }

        /// <summary>
        /// Refers to all companies mentioned in the document. This could also include the primary company id as well.   **Note:** For the \&quot;allIds\&quot; and \&quot;primaryIds\&quot; fields:   - These identifiers can be either SEDOLs or CUSIPs, depending on the search criteria and the type of identifiers specified in your request.   - The API will return the corresponding identifiers based on the search parameters provided.
        /// </summary>
        /// <value>Refers to all companies mentioned in the document. This could also include the primary company id as well.   **Note:** For the \&quot;allIds\&quot; and \&quot;primaryIds\&quot; fields:   - These identifiers can be either SEDOLs or CUSIPs, depending on the search criteria and the type of identifiers specified in your request.   - The API will return the corresponding identifiers based on the search parameters provided.</value>
        [DataMember(Name = "allIds", EmitDefaultValue = false)]
        public List<string> AllIds { get; set; }

        /// <summary>
        /// Publish date and time of the latest version (in ISO 8601 format, UTC).
        /// </summary>
        /// <value>Publish date and time of the latest version (in ISO 8601 format, UTC).</value>
        [DataMember(Name = "filingsDateTime", EmitDefaultValue = false)]
        public string FilingsDateTime { get; set; }

        /// <summary>
        /// - Comma-separated list of country, industry, and subject codes. - Sourced from \&quot;/reference/categories\&quot; with two-letter codes (SB for subjects, IN for industries, LN for languages, CN for countries, RN for regions, DT for document types).
        /// </summary>
        /// <value>- Comma-separated list of country, industry, and subject codes. - Sourced from \&quot;/reference/categories\&quot; with two-letter codes (SB for subjects, IN for industries, LN for languages, CN for countries, RN for regions, DT for document types).</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// A secure HTTPS link for downloading the associated document.
        /// </summary>
        /// <value>A secure HTTPS link for downloading the associated document.</value>
        [DataMember(Name = "filingsLink", EmitDefaultValue = false)]
        public string FilingsLink { get; set; }

        /// <summary>
        /// Unique identifier for a document.
        /// </summary>
        /// <value>Unique identifier for a document.</value>
        [DataMember(Name = "documentId", EmitDefaultValue = false)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Filings specific metadata providing info around the size of the document.
        /// </summary>
        /// <value>Filings specific metadata providing info around the size of the document.</value>
        [DataMember(Name = "filingSize", EmitDefaultValue = false)]
        public string FilingSize { get; set; }

        /// <summary>
        /// Filings specific metadata providing info around the form type (e.g. 8K, 10K, etc.)
        /// </summary>
        /// <value>Filings specific metadata providing info around the form type (e.g. 8K, 10K, etc.)</value>
        [DataMember(Name = "formType", EmitDefaultValue = false)]
        public string FormType { get; set; }

        /// <summary>
        /// A unique identifier given to each EDGAR filings document.
        /// </summary>
        /// <value>A unique identifier given to each EDGAR filings document.</value>
        [DataMember(Name = "accession", EmitDefaultValue = false)]
        public string Accession { get; set; }

        /// <summary>
        /// Returns IDs used in the id&#39;s parameter. The identifier type is based on what was used in the parameter.
        /// </summary>
        /// <value>Returns IDs used in the id&#39;s parameter. The identifier type is based on what was used in the parameter.</value>
        [DataMember(Name = "searchIds", EmitDefaultValue = false)]
        public string SearchIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvestmentResearchObject {\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  PrimaryIds: ").Append(PrimaryIds).Append("\n");
            sb.Append("  AllIds: ").Append(AllIds).Append("\n");
            sb.Append("  FilingsDateTime: ").Append(FilingsDateTime).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  FilingsLink: ").Append(FilingsLink).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  FilingSize: ").Append(FilingSize).Append("\n");
            sb.Append("  FormType: ").Append(FormType).Append("\n");
            sb.Append("  Accession: ").Append(Accession).Append("\n");
            sb.Append("  SearchIds: ").Append(SearchIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvestmentResearchObject);
        }

        /// <summary>
        /// Returns true if InvestmentResearchObject instances are equal
        /// </summary>
        /// <param name="input">Instance of InvestmentResearchObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvestmentResearchObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.PrimaryIds == input.PrimaryIds ||
                    this.PrimaryIds != null &&
                    input.PrimaryIds != null &&
                    this.PrimaryIds.SequenceEqual(input.PrimaryIds)
                ) && 
                (
                    this.AllIds == input.AllIds ||
                    this.AllIds != null &&
                    input.AllIds != null &&
                    this.AllIds.SequenceEqual(input.AllIds)
                ) && 
                (
                    this.FilingsDateTime == input.FilingsDateTime ||
                    (this.FilingsDateTime != null &&
                    this.FilingsDateTime.Equals(input.FilingsDateTime))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.FilingsLink == input.FilingsLink ||
                    (this.FilingsLink != null &&
                    this.FilingsLink.Equals(input.FilingsLink))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.FilingSize == input.FilingSize ||
                    (this.FilingSize != null &&
                    this.FilingSize.Equals(input.FilingSize))
                ) && 
                (
                    this.FormType == input.FormType ||
                    (this.FormType != null &&
                    this.FormType.Equals(input.FormType))
                ) && 
                (
                    this.Accession == input.Accession ||
                    (this.Accession != null &&
                    this.Accession.Equals(input.Accession))
                ) && 
                (
                    this.SearchIds == input.SearchIds ||
                    (this.SearchIds != null &&
                    this.SearchIds.Equals(input.SearchIds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Headline != null)
                {
                    hashCode = (hashCode * 59) + this.Headline.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.PrimaryIds != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryIds.GetHashCode();
                }
                if (this.AllIds != null)
                {
                    hashCode = (hashCode * 59) + this.AllIds.GetHashCode();
                }
                if (this.FilingsDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.FilingsDateTime.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                if (this.FilingsLink != null)
                {
                    hashCode = (hashCode * 59) + this.FilingsLink.GetHashCode();
                }
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                if (this.FilingSize != null)
                {
                    hashCode = (hashCode * 59) + this.FilingSize.GetHashCode();
                }
                if (this.FormType != null)
                {
                    hashCode = (hashCode * 59) + this.FormType.GetHashCode();
                }
                if (this.Accession != null)
                {
                    hashCode = (hashCode * 59) + this.Accession.GetHashCode();
                }
                if (this.SearchIds != null)
                {
                    hashCode = (hashCode * 59) + this.SearchIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
