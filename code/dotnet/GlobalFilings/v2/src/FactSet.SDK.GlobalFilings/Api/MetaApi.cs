/*
 * Global Filings API
 *
 *  The Filings API provides a comprehensive set of functionalities for searching and retrieving filing documents from various sources.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  In addition, a document count request will provide information on the number of stories available for a particular security.  The meta endpoints, such as sources, formTypes, timeZones, and categories, provide comprehensive lists of available sources, form types, time zones, and categories, respectively.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.GlobalFilings.Client;
using FactSet.SDK.GlobalFilings.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.GlobalFilings.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the form types of specified sources.
        /// </summary>
        /// <remarks>
        ///  Retrieves and delivers a comprehensive list of all available  &#x60;formTypes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <returns>FormTypeResponse</returns>
        FormTypeResponse GetFormtype(List<string> sources = default(List<string>));

        /// <summary>
        /// Returns the form types of specified sources.
        /// </summary>
        /// <remarks>
        ///  Retrieves and delivers a comprehensive list of all available  &#x60;formTypes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <returns>ApiResponse of FormTypeResponse</returns>
        ApiResponse<FormTypeResponse> GetFormtypeWithHttpInfo(List<string> sources = default(List<string>));
        /// <summary>
        /// Returns the sources.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SourceResponse</returns>
        SourceResponse GetSources();

        /// <summary>
        /// Returns the sources.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SourceResponse</returns>
        ApiResponse<SourceResponse> GetSourcesWithHttpInfo();
        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TimeZoneResponse</returns>
        TimeZoneResponse GetTimezone();

        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TimeZoneResponse</returns>
        ApiResponse<TimeZoneResponse> GetTimezoneWithHttpInfo();
        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CategoryResponse</returns>
        CategoryResponse Getcategories();

        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CategoryResponse</returns>
        ApiResponse<CategoryResponse> GetcategoriesWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the form types of specified sources.
        /// </summary>
        /// <remarks>
        ///  Retrieves and delivers a comprehensive list of all available  &#x60;formTypes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormTypeResponse</returns>
        System.Threading.Tasks.Task<FormTypeResponse> GetFormtypeAsync(List<string> sources = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the form types of specified sources.
        /// </summary>
        /// <remarks>
        ///  Retrieves and delivers a comprehensive list of all available  &#x60;formTypes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormTypeResponse>> GetFormtypeWithHttpInfoAsync(List<string> sources = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the sources.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SourceResponse</returns>
        System.Threading.Tasks.Task<SourceResponse> GetSourcesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the sources.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SourceResponse>> GetSourcesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeZoneResponse</returns>
        System.Threading.Tasks.Task<TimeZoneResponse> GetTimezoneAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeZoneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeZoneResponse>> GetTimezoneWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> GetcategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetcategoriesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApi : IMetaApiSync, IMetaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetaApi : IMetaApi
    {
        private FactSet.SDK.GlobalFilings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFormtypeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FormTypeResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSourcesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SourceResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTimezoneResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(TimeZoneResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetcategoriesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CategoryResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetaApi(string basePath)
        {
            this.Configuration = FactSet.SDK.GlobalFilings.Client.Configuration.MergeConfigurations(
                FactSet.SDK.GlobalFilings.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.GlobalFilings.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.GlobalFilings.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.GlobalFilings.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.GlobalFilings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetaApi(FactSet.SDK.GlobalFilings.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.GlobalFilings.Client.Configuration.MergeConfigurations(
                FactSet.SDK.GlobalFilings.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.GlobalFilings.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.GlobalFilings.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.GlobalFilings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetaApi(FactSet.SDK.GlobalFilings.Client.ISynchronousClient client, FactSet.SDK.GlobalFilings.Client.IAsynchronousClient asyncClient, FactSet.SDK.GlobalFilings.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.GlobalFilings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.GlobalFilings.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.GlobalFilings.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.GlobalFilings.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.GlobalFilings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the form types of specified sources.  Retrieves and delivers a comprehensive list of all available  &#x60;formTypes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <returns>FormTypeResponse</returns>
        public FormTypeResponse GetFormtype(List<string> sources = default(List<string>))
        {
            var localVarResponse = GetFormtypeWithHttpInfo(sources);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the form types of specified sources.  Retrieves and delivers a comprehensive list of all available  &#x60;formTypes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <returns>ApiResponse of FormTypeResponse</returns>
        public ApiResponse<FormTypeResponse> GetFormtypeWithHttpInfo(List<string> sources = default(List<string>))
        {
            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sources != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "sources", sources));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFormtypeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FormTypeResponse>("/meta/form-types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFormtype", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the form types of specified sources.  Retrieves and delivers a comprehensive list of all available  &#x60;formTypes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormTypeResponse</returns>
        public async System.Threading.Tasks.Task<FormTypeResponse>GetFormtypeAsync(List<string> sources = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFormtypeWithHttpInfoAsync(sources, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the form types of specified sources.  Retrieves and delivers a comprehensive list of all available  &#x60;formTypes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormTypeResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FormTypeResponse>> GetFormtypeWithHttpInfoAsync(List<string> sources = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sources != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "sources", sources));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFormtypeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FormTypeResponse>("/meta/form-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFormtype", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the sources. Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SourceResponse</returns>
        public SourceResponse GetSources()
        {
            var localVarResponse = GetSourcesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the sources. Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SourceResponse</returns>
        public ApiResponse<SourceResponse> GetSourcesWithHttpInfo()
        {
            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSourcesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SourceResponse>("/meta/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the sources. Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SourceResponse</returns>
        public async System.Threading.Tasks.Task<SourceResponse>GetSourcesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSourcesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the sources. Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SourceResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SourceResponse>> GetSourcesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSourcesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SourceResponse>("/meta/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TimeZoneResponse</returns>
        public TimeZoneResponse GetTimezone()
        {
            var localVarResponse = GetTimezoneWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TimeZoneResponse</returns>
        public ApiResponse<TimeZoneResponse> GetTimezoneWithHttpInfo()
        {
            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTimezoneResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            TimeZoneResponse>("/meta/time-zones", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimezone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeZoneResponse</returns>
        public async System.Threading.Tasks.Task<TimeZoneResponse>GetTimezoneAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTimezoneWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeZoneResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TimeZoneResponse>> GetTimezoneWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTimezoneResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeZoneResponse>("/meta/time-zones", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimezone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CategoryResponse</returns>
        public CategoryResponse Getcategories()
        {
            var localVarResponse = GetcategoriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CategoryResponse</returns>
        public ApiResponse<CategoryResponse> GetcategoriesWithHttpInfo()
        {
            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetcategoriesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CategoryResponse>("/meta/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getcategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse>GetcategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetcategoriesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetcategoriesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetcategoriesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryResponse>("/meta/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getcategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
