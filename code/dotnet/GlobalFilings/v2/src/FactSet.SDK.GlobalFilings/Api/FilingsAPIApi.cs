/*
 * Global Filings API
 *
 *  The Filings API provides a comprehensive set of functionalities for searching and retrieving filing documents from various sources.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  In addition, a document count request will provide information on the number of stories available for a particular security.  The meta endpoints, such as sources, formTypes, timeZones, and categories, provide comprehensive lists of available sources, form types, time zones, and categories, respectively.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.GlobalFilings.Client;
using FactSet.SDK.GlobalFilings.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.GlobalFilings.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilingsAPIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the count of filings for specified source.
        /// </summary>
        /// <remarks>
        /// Returns the count of filings documents along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources">Code for document source to include.This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources.  </param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <returns>CountResponse</returns>
        CountResponse GetCount(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), string timeZone = default(string), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>));

        /// <summary>
        /// Returns the count of filings for specified source.
        /// </summary>
        /// <remarks>
        /// Returns the count of filings documents along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources">Code for document source to include.This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources.  </param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <returns>ApiResponse of CountResponse</returns>
        ApiResponse<CountResponse> GetCountWithHttpInfo(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), string timeZone = default(string), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>));
        /// <summary>
        /// Returns the filings documents and related metadata within FactSet coverage.
        /// </summary>
        /// <remarks>
        /// Returns the filings documents within FactSet coverage along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources"></param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending  order based on filingsDateTime.   * &#x60;filingsDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.   *  &#x60;-filingsDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query. (optional)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="edgarAccession">A unique identifier given to each EDGAR filings document. e.g. accession&#x3D;0001013237-21-000069&amp;sources&#x3D;EDG.   &gt; **Note:**  &gt; When used in conjunction with the &#39;sources&#39; parameter set to &#39;EDGAR, the API considers this accession for data retrieval.  &gt; For non-EDGAR sources, this parameter is ignored. (optional)</param>
        /// <returns>SearchResponse</returns>
        SearchResponse GetFilings(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), string edgarAccession = default(string));

        /// <summary>
        /// Returns the filings documents and related metadata within FactSet coverage.
        /// </summary>
        /// <remarks>
        /// Returns the filings documents within FactSet coverage along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources"></param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending  order based on filingsDateTime.   * &#x60;filingsDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.   *  &#x60;-filingsDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query. (optional)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="edgarAccession">A unique identifier given to each EDGAR filings document. e.g. accession&#x3D;0001013237-21-000069&amp;sources&#x3D;EDG.   &gt; **Note:**  &gt; When used in conjunction with the &#39;sources&#39; parameter set to &#39;EDGAR, the API considers this accession for data retrieval.  &gt; For non-EDGAR sources, this parameter is ignored. (optional)</param>
        /// <returns>ApiResponse of SearchResponse</returns>
        ApiResponse<SearchResponse> GetFilingsWithHttpInfo(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), string edgarAccession = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilingsAPIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the count of filings for specified source.
        /// </summary>
        /// <remarks>
        /// Returns the count of filings documents along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources">Code for document source to include.This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources.  </param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResponse</returns>
        System.Threading.Tasks.Task<CountResponse> GetCountAsync(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), string timeZone = default(string), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the count of filings for specified source.
        /// </summary>
        /// <remarks>
        /// Returns the count of filings documents along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources">Code for document source to include.This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources.  </param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResponse>> GetCountWithHttpInfoAsync(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), string timeZone = default(string), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the filings documents and related metadata within FactSet coverage.
        /// </summary>
        /// <remarks>
        /// Returns the filings documents within FactSet coverage along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources"></param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending  order based on filingsDateTime.   * &#x60;filingsDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.   *  &#x60;-filingsDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query. (optional)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="edgarAccession">A unique identifier given to each EDGAR filings document. e.g. accession&#x3D;0001013237-21-000069&amp;sources&#x3D;EDG.   &gt; **Note:**  &gt; When used in conjunction with the &#39;sources&#39; parameter set to &#39;EDGAR, the API considers this accession for data retrieval.  &gt; For non-EDGAR sources, this parameter is ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        System.Threading.Tasks.Task<SearchResponse> GetFilingsAsync(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), string edgarAccession = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the filings documents and related metadata within FactSet coverage.
        /// </summary>
        /// <remarks>
        /// Returns the filings documents within FactSet coverage along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources"></param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending  order based on filingsDateTime.   * &#x60;filingsDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.   *  &#x60;-filingsDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query. (optional)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="edgarAccession">A unique identifier given to each EDGAR filings document. e.g. accession&#x3D;0001013237-21-000069&amp;sources&#x3D;EDG.   &gt; **Note:**  &gt; When used in conjunction with the &#39;sources&#39; parameter set to &#39;EDGAR, the API considers this accession for data retrieval.  &gt; For non-EDGAR sources, this parameter is ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResponse>> GetFilingsWithHttpInfoAsync(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), string edgarAccession = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilingsAPIApi : IFilingsAPIApiSync, IFilingsAPIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilingsAPIApi : IFilingsAPIApi
    {
        private FactSet.SDK.GlobalFilings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCountResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CountResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFilingsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SearchResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FilingsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilingsAPIApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilingsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilingsAPIApi(string basePath)
        {
            this.Configuration = FactSet.SDK.GlobalFilings.Client.Configuration.MergeConfigurations(
                FactSet.SDK.GlobalFilings.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.GlobalFilings.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.GlobalFilings.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.GlobalFilings.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.GlobalFilings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilingsAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilingsAPIApi(FactSet.SDK.GlobalFilings.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.GlobalFilings.Client.Configuration.MergeConfigurations(
                FactSet.SDK.GlobalFilings.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.GlobalFilings.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.GlobalFilings.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.GlobalFilings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilingsAPIApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FilingsAPIApi(FactSet.SDK.GlobalFilings.Client.ISynchronousClient client, FactSet.SDK.GlobalFilings.Client.IAsynchronousClient asyncClient, FactSet.SDK.GlobalFilings.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.GlobalFilings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.GlobalFilings.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.GlobalFilings.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.GlobalFilings.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.GlobalFilings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the count of filings for specified source. Returns the count of filings documents along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources">Code for document source to include.This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources.  </param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <returns>CountResponse</returns>
        public CountResponse GetCount(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), string timeZone = default(string), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>))
        {
            var localVarResponse = GetCountWithHttpInfo(ids, sources, startDate, endDate, timeZone, categories, primaryId, searchText, formTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the count of filings for specified source. Returns the count of filings documents along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources">Code for document source to include.This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources.  </param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <returns>ApiResponse of CountResponse</returns>
        public ApiResponse<CountResponse> GetCountWithHttpInfo(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), string timeZone = default(string), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.GlobalFilings.Client.ApiException(400, "Missing required parameter 'ids' when calling FilingsAPIApi->GetCount");
            }

            // verify the required parameter 'sources' is set
            if (sources == null)
            {
                throw new FactSet.SDK.GlobalFilings.Client.ApiException(400, "Missing required parameter 'sources' when calling FilingsAPIApi->GetCount");
            }

            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "sources", sources));
            if (timeZone != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "timeZone", timeZone));
            }
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "categories", categories));
            }
            if (primaryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "primaryId", primaryId));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (formTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "formTypes", formTypes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CountResponse>("/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the count of filings for specified source. Returns the count of filings documents along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources">Code for document source to include.This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources.  </param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResponse</returns>
        public async System.Threading.Tasks.Task<CountResponse>GetCountAsync(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), string timeZone = default(string), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCountWithHttpInfoAsync(ids, sources, startDate, endDate, timeZone, categories, primaryId, searchText, formTypes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the count of filings for specified source. Returns the count of filings documents along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources">Code for document source to include.This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources.  </param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CountResponse>> GetCountWithHttpInfoAsync(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), string timeZone = default(string), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.GlobalFilings.Client.ApiException(400, "Missing required parameter 'ids' when calling FilingsAPIApi->GetCount");
            }

            // verify the required parameter 'sources' is set
            if (sources == null)
            {
                throw new FactSet.SDK.GlobalFilings.Client.ApiException(400, "Missing required parameter 'sources' when calling FilingsAPIApi->GetCount");
            }


            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "sources", sources));
            if (timeZone != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "timeZone", timeZone));
            }
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "categories", categories));
            }
            if (primaryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "primaryId", primaryId));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (formTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "formTypes", formTypes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResponse>("/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the filings documents and related metadata within FactSet coverage. Returns the filings documents within FactSet coverage along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources"></param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending  order based on filingsDateTime.   * &#x60;filingsDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.   *  &#x60;-filingsDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query. (optional)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="edgarAccession">A unique identifier given to each EDGAR filings document. e.g. accession&#x3D;0001013237-21-000069&amp;sources&#x3D;EDG.   &gt; **Note:**  &gt; When used in conjunction with the &#39;sources&#39; parameter set to &#39;EDGAR, the API considers this accession for data retrieval.  &gt; For non-EDGAR sources, this parameter is ignored. (optional)</param>
        /// <returns>SearchResponse</returns>
        public SearchResponse GetFilings(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), string edgarAccession = default(string))
        {
            var localVarResponse = GetFilingsWithHttpInfo(ids, sources, startDate, endDate, paginationLimit, paginationOffset, timeZone, sort, categories, primaryId, searchText, formTypes, edgarAccession);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the filings documents and related metadata within FactSet coverage. Returns the filings documents within FactSet coverage along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources"></param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending  order based on filingsDateTime.   * &#x60;filingsDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.   *  &#x60;-filingsDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query. (optional)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="edgarAccession">A unique identifier given to each EDGAR filings document. e.g. accession&#x3D;0001013237-21-000069&amp;sources&#x3D;EDG.   &gt; **Note:**  &gt; When used in conjunction with the &#39;sources&#39; parameter set to &#39;EDGAR, the API considers this accession for data retrieval.  &gt; For non-EDGAR sources, this parameter is ignored. (optional)</param>
        /// <returns>ApiResponse of SearchResponse</returns>
        public ApiResponse<SearchResponse> GetFilingsWithHttpInfo(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), string edgarAccession = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.GlobalFilings.Client.ApiException(400, "Missing required parameter 'ids' when calling FilingsAPIApi->GetFilings");
            }

            // verify the required parameter 'sources' is set
            if (sources == null)
            {
                throw new FactSet.SDK.GlobalFilings.Client.ApiException(400, "Missing required parameter 'sources' when calling FilingsAPIApi->GetFilings");
            }

            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (timeZone != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "timeZone", timeZone));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "sources", sources));
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "categories", categories));
            }
            if (primaryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "primaryId", primaryId));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (formTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "formTypes", formTypes));
            }
            if (edgarAccession != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "edgarAccession", edgarAccession));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFilingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SearchResponse>("/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the filings documents and related metadata within FactSet coverage. Returns the filings documents within FactSet coverage along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources"></param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending  order based on filingsDateTime.   * &#x60;filingsDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.   *  &#x60;-filingsDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query. (optional)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="edgarAccession">A unique identifier given to each EDGAR filings document. e.g. accession&#x3D;0001013237-21-000069&amp;sources&#x3D;EDG.   &gt; **Note:**  &gt; When used in conjunction with the &#39;sources&#39; parameter set to &#39;EDGAR, the API considers this accession for data retrieval.  &gt; For non-EDGAR sources, this parameter is ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        public async System.Threading.Tasks.Task<SearchResponse>GetFilingsAsync(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), string edgarAccession = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFilingsWithHttpInfoAsync(ids, sources, startDate, endDate, paginationLimit, paginationOffset, timeZone, sort, categories, primaryId, searchText, formTypes, edgarAccession, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the filings documents and related metadata within FactSet coverage. Returns the filings documents within FactSet coverage along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.GlobalFilings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</param>
        /// <param name="sources"></param>
        /// <param name="startDate">Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending  order based on filingsDateTime.   * &#x60;filingsDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.   *  &#x60;-filingsDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query. (optional)</param>
        /// <param name="categories">Code for categories to include.  This is a comma-separated list. Use the &#x60;/meta/categories&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="searchText">Restricts the search to include only document stories that include the searched text. This parameter supports boolean operators as well. (optional)</param>
        /// <param name="formTypes">The search to include any form types of given sources (optional)</param>
        /// <param name="edgarAccession">A unique identifier given to each EDGAR filings document. e.g. accession&#x3D;0001013237-21-000069&amp;sources&#x3D;EDG.   &gt; **Note:**  &gt; When used in conjunction with the &#39;sources&#39; parameter set to &#39;EDGAR, the API considers this accession for data retrieval.  &gt; For non-EDGAR sources, this parameter is ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SearchResponse>> GetFilingsWithHttpInfoAsync(List<string> ids, List<string> sources, string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), List<string> categories = default(List<string>), bool? primaryId = default(bool?), string searchText = default(string), List<string> formTypes = default(List<string>), string edgarAccession = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.GlobalFilings.Client.ApiException(400, "Missing required parameter 'ids' when calling FilingsAPIApi->GetFilings");
            }

            // verify the required parameter 'sources' is set
            if (sources == null)
            {
                throw new FactSet.SDK.GlobalFilings.Client.ApiException(400, "Missing required parameter 'sources' when calling FilingsAPIApi->GetFilings");
            }


            FactSet.SDK.GlobalFilings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GlobalFilings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GlobalFilings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (timeZone != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "timeZone", timeZone));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "sources", sources));
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "categories", categories));
            }
            if (primaryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "primaryId", primaryId));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (formTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("csv", "formTypes", formTypes));
            }
            if (edgarAccession != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GlobalFilings.Client.ClientUtils.ParameterToMultiMap("", "edgarAccession", edgarAccession));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GlobalFilings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFilingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResponse>("/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
