/*
 * Real-Time Price Alerting API
 *
 * The Price Alerting API is designed to inform the users of an application directly about important changes in the data on the platform. The endpoint group *basic price alerting* deals with generation of alerts based on current price data. For notations, users can define an upper or lower limit and choose on which price type those limit conditions apply.  Alerting uses the concepts of triggers and alerts.   * A trigger is an entity that is set up by an application to watch a certain condition in the market data around a financial instrument.   The standard conditions that can be applied are lower limit and upper limit for the value of the price for a given financial instrument. * When the condition of a trigger is met, an alert is created. Each alert thus represents one event where a trigger condition was met.  An application can learn about the creation of alerts in two ways: The application can actively request the list of alerts (pull approach) or it can subscribe to the list of existing alerts. If a new alert is created, that list changes and the application is notified about the new alert with an update that contains the details on the new alert (push approach).  The API supports both approaches. The push approach is realized most easily by using the subscription support that the client libraries provide.  See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price information.  Note: As part of the general trial access, endpoints to write data are excluded. For a description of the full alerting API, please work with a FactSet consultant and see https://endpointreference.factset.com. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.RealTimePriceAlerting.Client;
using FactSet.SDK.RealTimePriceAlerting.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.RealTimePriceAlerting.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlertingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Details of an alert.
        /// </summary>
        /// <remarks>
        /// Details of an alert. The details include the trigger definition at the time of alert creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the alert.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetAlertingPricesBasicAlertGet(string id, List<string> attributes = default(List<string>));

        /// <summary>
        /// Details of an alert.
        /// </summary>
        /// <remarks>
        /// Details of an alert. The details include the trigger definition at the time of alert creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the alert.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetAlertingPricesBasicAlertGetWithHttpInfo(string id, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of alerts.
        /// </summary>
        /// <remarks>
        /// List of alerts in descending order of creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaSubscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately. (optional, default to 0M)</param>
        /// <param name="paginationCursor">Starting point as returned in the attributes &#x60;pagination.next&#x60; or &#x60;pagination.previous&#x60; by a prior invocation of this endpoint, or undefined (default). (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetAlertingPricesBasicAlertList(List<string> attributes = default(List<string>), decimal? metaSubscriptionMinimumInterval = default(decimal?), string paginationCursor = default(string), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of alerts.
        /// </summary>
        /// <remarks>
        /// List of alerts in descending order of creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaSubscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately. (optional, default to 0M)</param>
        /// <param name="paginationCursor">Starting point as returned in the attributes &#x60;pagination.next&#x60; or &#x60;pagination.previous&#x60; by a prior invocation of this endpoint, or undefined (default). (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetAlertingPricesBasicAlertListWithHttpInfo(List<string> attributes = default(List<string>), decimal? metaSubscriptionMinimumInterval = default(decimal?), string paginationCursor = default(string), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Details of a trigger.
        /// </summary>
        /// <remarks>
        /// Details of a trigger.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the trigger.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetAlertingPricesBasicTriggerGet(string id, List<string> attributes = default(List<string>));

        /// <summary>
        /// Details of a trigger.
        /// </summary>
        /// <remarks>
        /// Details of a trigger.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the trigger.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetAlertingPricesBasicTriggerGetWithHttpInfo(string id, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of triggers.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers sorted in descending order of creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAlertingPricesBasicTriggerListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PostAlertingPricesBasicTriggerList(PostAlertingPricesBasicTriggerListRequest postAlertingPricesBasicTriggerListRequest = default(PostAlertingPricesBasicTriggerListRequest));

        /// <summary>
        /// List of triggers.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers sorted in descending order of creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAlertingPricesBasicTriggerListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PostAlertingPricesBasicTriggerListWithHttpInfo(PostAlertingPricesBasicTriggerListRequest postAlertingPricesBasicTriggerListRequest = default(PostAlertingPricesBasicTriggerListRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlertingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Details of an alert.
        /// </summary>
        /// <remarks>
        /// Details of an alert. The details include the trigger definition at the time of alert creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the alert.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetAlertingPricesBasicAlertGetAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of an alert.
        /// </summary>
        /// <remarks>
        /// Details of an alert. The details include the trigger definition at the time of alert creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the alert.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetAlertingPricesBasicAlertGetWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of alerts.
        /// </summary>
        /// <remarks>
        /// List of alerts in descending order of creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaSubscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately. (optional, default to 0M)</param>
        /// <param name="paginationCursor">Starting point as returned in the attributes &#x60;pagination.next&#x60; or &#x60;pagination.previous&#x60; by a prior invocation of this endpoint, or undefined (default). (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetAlertingPricesBasicAlertListAsync(List<string> attributes = default(List<string>), decimal? metaSubscriptionMinimumInterval = default(decimal?), string paginationCursor = default(string), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of alerts.
        /// </summary>
        /// <remarks>
        /// List of alerts in descending order of creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaSubscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately. (optional, default to 0M)</param>
        /// <param name="paginationCursor">Starting point as returned in the attributes &#x60;pagination.next&#x60; or &#x60;pagination.previous&#x60; by a prior invocation of this endpoint, or undefined (default). (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetAlertingPricesBasicAlertListWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? metaSubscriptionMinimumInterval = default(decimal?), string paginationCursor = default(string), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a trigger.
        /// </summary>
        /// <remarks>
        /// Details of a trigger.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the trigger.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetAlertingPricesBasicTriggerGetAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a trigger.
        /// </summary>
        /// <remarks>
        /// Details of a trigger.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the trigger.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetAlertingPricesBasicTriggerGetWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of triggers.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers sorted in descending order of creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAlertingPricesBasicTriggerListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PostAlertingPricesBasicTriggerListAsync(PostAlertingPricesBasicTriggerListRequest postAlertingPricesBasicTriggerListRequest = default(PostAlertingPricesBasicTriggerListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of triggers.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers sorted in descending order of creation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAlertingPricesBasicTriggerListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostAlertingPricesBasicTriggerListWithHttpInfoAsync(PostAlertingPricesBasicTriggerListRequest postAlertingPricesBasicTriggerListRequest = default(PostAlertingPricesBasicTriggerListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlertingApi : IAlertingApiSync, IAlertingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AlertingApi : IAlertingApi
    {
        private FactSet.SDK.RealTimePriceAlerting.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetAlertingPricesBasicAlertGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetAlertingPricesBasicAlertListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2001) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetAlertingPricesBasicTriggerGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostAlertingPricesBasicTriggerListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlertingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlertingApi(string basePath)
        {
            this.Configuration = FactSet.SDK.RealTimePriceAlerting.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimePriceAlerting.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.RealTimePriceAlerting.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.RealTimePriceAlerting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimePriceAlerting.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.RealTimePriceAlerting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AlertingApi(FactSet.SDK.RealTimePriceAlerting.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.RealTimePriceAlerting.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimePriceAlerting.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.RealTimePriceAlerting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimePriceAlerting.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.RealTimePriceAlerting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AlertingApi(FactSet.SDK.RealTimePriceAlerting.Client.ISynchronousClient client, FactSet.SDK.RealTimePriceAlerting.Client.IAsynchronousClient asyncClient, FactSet.SDK.RealTimePriceAlerting.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.RealTimePriceAlerting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.RealTimePriceAlerting.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.RealTimePriceAlerting.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.RealTimePriceAlerting.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.RealTimePriceAlerting.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Details of an alert. Details of an alert. The details include the trigger definition at the time of alert creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the alert.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetAlertingPricesBasicAlertGet(string id, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetAlertingPricesBasicAlertGetWithHttpInfo(id, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of an alert. Details of an alert. The details include the trigger definition at the time of alert creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the alert.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> GetAlertingPricesBasicAlertGetWithHttpInfo(string id, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.RealTimePriceAlerting.Client.ApiException(400, "Missing required parameter 'id' when calling AlertingApi->GetAlertingPricesBasicAlertGet");
            }

            FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAlertingPricesBasicAlertGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse200>("/alerting/prices/basic/alert/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlertingPricesBasicAlertGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of an alert. Details of an alert. The details include the trigger definition at the time of alert creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the alert.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>GetAlertingPricesBasicAlertGetAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAlertingPricesBasicAlertGetWithHttpInfoAsync(id, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of an alert. Details of an alert. The details include the trigger definition at the time of alert creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the alert.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetAlertingPricesBasicAlertGetWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.RealTimePriceAlerting.Client.ApiException(400, "Missing required parameter 'id' when calling AlertingApi->GetAlertingPricesBasicAlertGet");
            }


            FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAlertingPricesBasicAlertGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/alerting/prices/basic/alert/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlertingPricesBasicAlertGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of alerts. List of alerts in descending order of creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaSubscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately. (optional, default to 0M)</param>
        /// <param name="paginationCursor">Starting point as returned in the attributes &#x60;pagination.next&#x60; or &#x60;pagination.previous&#x60; by a prior invocation of this endpoint, or undefined (default). (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetAlertingPricesBasicAlertList(List<string> attributes = default(List<string>), decimal? metaSubscriptionMinimumInterval = default(decimal?), string paginationCursor = default(string), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetAlertingPricesBasicAlertListWithHttpInfo(attributes, metaSubscriptionMinimumInterval, paginationCursor, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of alerts. List of alerts in descending order of creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaSubscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately. (optional, default to 0M)</param>
        /// <param name="paginationCursor">Starting point as returned in the attributes &#x60;pagination.next&#x60; or &#x60;pagination.previous&#x60; by a prior invocation of this endpoint, or undefined (default). (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> GetAlertingPricesBasicAlertListWithHttpInfo(List<string> attributes = default(List<string>), decimal? metaSubscriptionMinimumInterval = default(decimal?), string paginationCursor = default(string), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaSubscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("", "metaSubscriptionMinimumInterval", metaSubscriptionMinimumInterval));
            }
            if (paginationCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("", "_paginationCursor", paginationCursor));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAlertingPricesBasicAlertListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2001>("/alerting/prices/basic/alert/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlertingPricesBasicAlertList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of alerts. List of alerts in descending order of creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaSubscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately. (optional, default to 0M)</param>
        /// <param name="paginationCursor">Starting point as returned in the attributes &#x60;pagination.next&#x60; or &#x60;pagination.previous&#x60; by a prior invocation of this endpoint, or undefined (default). (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001>GetAlertingPricesBasicAlertListAsync(List<string> attributes = default(List<string>), decimal? metaSubscriptionMinimumInterval = default(decimal?), string paginationCursor = default(string), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAlertingPricesBasicAlertListWithHttpInfoAsync(attributes, metaSubscriptionMinimumInterval, paginationCursor, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of alerts. List of alerts in descending order of creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaSubscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately. (optional, default to 0M)</param>
        /// <param name="paginationCursor">Starting point as returned in the attributes &#x60;pagination.next&#x60; or &#x60;pagination.previous&#x60; by a prior invocation of this endpoint, or undefined (default). (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetAlertingPricesBasicAlertListWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? metaSubscriptionMinimumInterval = default(decimal?), string paginationCursor = default(string), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaSubscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("", "metaSubscriptionMinimumInterval", metaSubscriptionMinimumInterval));
            }
            if (paginationCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("", "_paginationCursor", paginationCursor));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAlertingPricesBasicAlertListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/alerting/prices/basic/alert/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlertingPricesBasicAlertList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a trigger. Details of a trigger.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the trigger.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetAlertingPricesBasicTriggerGet(string id, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetAlertingPricesBasicTriggerGetWithHttpInfo(id, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a trigger. Details of a trigger.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the trigger.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> GetAlertingPricesBasicTriggerGetWithHttpInfo(string id, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.RealTimePriceAlerting.Client.ApiException(400, "Missing required parameter 'id' when calling AlertingApi->GetAlertingPricesBasicTriggerGet");
            }

            FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAlertingPricesBasicTriggerGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2002>("/alerting/prices/basic/trigger/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlertingPricesBasicTriggerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a trigger. Details of a trigger.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the trigger.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>GetAlertingPricesBasicTriggerGetAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAlertingPricesBasicTriggerGetWithHttpInfoAsync(id, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a trigger. Details of a trigger.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the trigger.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetAlertingPricesBasicTriggerGetWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.RealTimePriceAlerting.Client.ApiException(400, "Missing required parameter 'id' when calling AlertingApi->GetAlertingPricesBasicTriggerGet");
            }


            FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAlertingPricesBasicTriggerGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/alerting/prices/basic/trigger/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlertingPricesBasicTriggerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of triggers. Returns a list of triggers sorted in descending order of creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAlertingPricesBasicTriggerListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PostAlertingPricesBasicTriggerList(PostAlertingPricesBasicTriggerListRequest postAlertingPricesBasicTriggerListRequest = default(PostAlertingPricesBasicTriggerListRequest))
        {
            var localVarResponse = PostAlertingPricesBasicTriggerListWithHttpInfo(postAlertingPricesBasicTriggerListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of triggers. Returns a list of triggers sorted in descending order of creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAlertingPricesBasicTriggerListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> PostAlertingPricesBasicTriggerListWithHttpInfo(PostAlertingPricesBasicTriggerListRequest postAlertingPricesBasicTriggerListRequest = default(PostAlertingPricesBasicTriggerListRequest))
        {
            FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postAlertingPricesBasicTriggerListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostAlertingPricesBasicTriggerListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2003>("/alerting/prices/basic/trigger/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAlertingPricesBasicTriggerList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of triggers. Returns a list of triggers sorted in descending order of creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAlertingPricesBasicTriggerListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>PostAlertingPricesBasicTriggerListAsync(PostAlertingPricesBasicTriggerListRequest postAlertingPricesBasicTriggerListRequest = default(PostAlertingPricesBasicTriggerListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostAlertingPricesBasicTriggerListWithHttpInfoAsync(postAlertingPricesBasicTriggerListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of triggers. Returns a list of triggers sorted in descending order of creation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimePriceAlerting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAlertingPricesBasicTriggerListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostAlertingPricesBasicTriggerListWithHttpInfoAsync(PostAlertingPricesBasicTriggerListRequest postAlertingPricesBasicTriggerListRequest = default(PostAlertingPricesBasicTriggerListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimePriceAlerting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postAlertingPricesBasicTriggerListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimePriceAlerting.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostAlertingPricesBasicTriggerListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/alerting/prices/basic/trigger/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAlertingPricesBasicTriggerList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
