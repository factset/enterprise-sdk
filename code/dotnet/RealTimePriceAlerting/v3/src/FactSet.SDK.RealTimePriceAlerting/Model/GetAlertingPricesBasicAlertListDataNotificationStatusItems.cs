/*
 * Real-Time Price Alerting API
 *
 * The Price Alerting API is designed to inform the users of an application directly about important changes in the data on the platform. The endpoint group *basic price alerting* deals with generation of alerts based on current price data. For notations, users can define an upper or lower limit and choose on which price type those limit conditions apply.  Alerting uses the concepts of triggers and alerts.   * A trigger is an entity that is set up by an application to watch a certain condition in the market data around a financial instrument.   The standard conditions that can be applied are lower limit and upper limit for the value of the price for a given financial instrument. * When the condition of a trigger is met, an alert is created. Each alert thus represents one event where a trigger condition was met.  An application can learn about the creation of alerts in two ways: The application can actively request the list of alerts (pull approach) or it can subscribe to the list of existing alerts. If a new alert is created, that list changes and the application is notified about the new alert with an update that contains the details on the new alert (push approach).  The API supports both approaches. The push approach is realized most easily by using the subscription support that the client libraries provide.  See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price information.  Note: As part of the general trial access, endpoints to write data are excluded. For a description of the full alerting API, please work with a FactSet consultant and see https://endpointreference.factset.com. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimePriceAlerting.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimePriceAlerting.Model
{
    /// <summary>
    /// A list of objects. For semantical context see the description of the parent array.
    /// </summary>
    [DataContract(Name = "GetAlertingPricesBasicAlertListDataNotificationStatusItems")]
    public partial class GetAlertingPricesBasicAlertListDataNotificationStatusItems : IEquatable<GetAlertingPricesBasicAlertListDataNotificationStatusItems>, IValidatableObject
    {
        /// <summary>
        /// Code of the status. | Value | Description | | - -- | - -- | | pending | Notification has not been processed. | | sent | Notification has been sent but delivery status is unknown. | | delivered | Notification has been delivered. | | error | Notification has not been delivered due to an error. | | rejected | Notification delivery has been rejected (possibly due to return mails being received for delivery address). |  
        /// </summary>
        /// <value>Code of the status. | Value | Description | | - -- | - -- | | pending | Notification has not been processed. | | sent | Notification has been sent but delivery status is unknown. | | delivered | Notification has been delivered. | | error | Notification has not been delivered due to an error. | | rejected | Notification delivery has been rejected (possibly due to return mails being received for delivery address). |  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            [EnumMember(Value = "sent")]
            Sent = 2,

            /// <summary>
            /// Enum Delivered for value: delivered
            /// </summary>
            [EnumMember(Value = "delivered")]
            Delivered = 3,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 4,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 5

        }


        /// <summary>
        /// Code of the status. | Value | Description | | - -- | - -- | | pending | Notification has not been processed. | | sent | Notification has been sent but delivery status is unknown. | | delivered | Notification has been delivered. | | error | Notification has not been delivered due to an error. | | rejected | Notification delivery has been rejected (possibly due to return mails being received for delivery address). |  
        /// </summary>
        /// <value>Code of the status. | Value | Description | | - -- | - -- | | pending | Notification has not been processed. | | sent | Notification has been sent but delivery status is unknown. | | delivered | Notification has been delivered. | | error | Notification has not been delivered due to an error. | | rejected | Notification delivery has been rejected (possibly due to return mails being received for delivery address). |  </value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public CodeEnum? Code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAlertingPricesBasicAlertListDataNotificationStatusItems" /> class.
        /// </summary>
        /// <param name="channel">channel.</param>
        /// <param name="time">Date and time of the most recent change..</param>
        /// <param name="code">Code of the status. | Value | Description | | - -- | - -- | | pending | Notification has not been processed. | | sent | Notification has been sent but delivery status is unknown. | | delivered | Notification has been delivered. | | error | Notification has not been delivered due to an error. | | rejected | Notification delivery has been rejected (possibly due to return mails being received for delivery address). |  .</param>
        public GetAlertingPricesBasicAlertListDataNotificationStatusItems(GetAlertingPricesBasicAlertListDataNotificationStatusItemsChannel channel = default(GetAlertingPricesBasicAlertListDataNotificationStatusItemsChannel), DateTime? time = default(DateTime?), CodeEnum? code = default(CodeEnum?))
        {
            this.Channel = channel;
            this.Time = time;
            this.Code = code;
        }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public GetAlertingPricesBasicAlertListDataNotificationStatusItemsChannel Channel { get; set; }

        /// <summary>
        /// Date and time of the most recent change.
        /// </summary>
        /// <value>Date and time of the most recent change.</value>
        [DataMember(Name = "time", EmitDefaultValue = true)]
        public DateTime? Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAlertingPricesBasicAlertListDataNotificationStatusItems {\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAlertingPricesBasicAlertListDataNotificationStatusItems);
        }

        /// <summary>
        /// Returns true if GetAlertingPricesBasicAlertListDataNotificationStatusItems instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAlertingPricesBasicAlertListDataNotificationStatusItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAlertingPricesBasicAlertListDataNotificationStatusItems input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Code == input.Code ||
                    this.Code.Equals(input.Code)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Channel != null)
                {
                    hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                }
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Code.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
