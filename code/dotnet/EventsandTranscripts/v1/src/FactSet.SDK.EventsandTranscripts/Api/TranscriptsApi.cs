/*
 * EVENTS AND TRANSCRIPTS API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p>  
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.EventsandTranscripts.Client;
using FactSet.SDK.EventsandTranscripts.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.EventsandTranscripts.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranscriptsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseTime</returns>
        ResponseTime GetTimezone();

        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseTime</returns>
        ApiResponse<ResponseTime> GetTimezoneWithHttpInfo();
        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on search text.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Restricts the search to include only document stories which include the text searched. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>Transcripts</returns>
        Transcripts GetTranscripts(string searchText = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on search text.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Restricts the search to include only document stories which include the text searched. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of Transcripts</returns>
        ApiResponse<Transcripts> GetTranscriptsWithHttpInfo(string searchText = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific date range and time zones.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start Date. Format is YYYY-MM-DD    **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYY-MM-DD. (optional)</param>
        /// <param name="startDateRelative">The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - *If both &#x60;startDate&#x60; and &#x60;startDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;startDate&#x60; or &#x60;startDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="endDateRelative">The latest date of the feed file the API should fetch for based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* - *If both &#x60;endDate&#x60; and &#x60;endDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;endDate&#x60; or &#x60;endDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. The time fields in the response will adhere to this specified timezone. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>Transcripts</returns>
        Transcripts GetTranscriptsDates(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? startDateRelative = default(int?), int? endDateRelative = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific date range and time zones.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start Date. Format is YYYY-MM-DD    **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYY-MM-DD. (optional)</param>
        /// <param name="startDateRelative">The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - *If both &#x60;startDate&#x60; and &#x60;startDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;startDate&#x60; or &#x60;startDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="endDateRelative">The latest date of the feed file the API should fetch for based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* - *If both &#x60;endDate&#x60; and &#x60;endDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;endDate&#x60; or &#x60;endDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. The time fields in the response will adhere to this specified timezone. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of Transcripts</returns>
        ApiResponse<Transcripts> GetTranscriptsDatesWithHttpInfo(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? startDateRelative = default(int?), int? endDateRelative = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on eventIds and eventType.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventIds">Requests Event IDs. This is a comma-separated list with a maximum limit of 1000. (optional)</param>
        /// <param name="eventType">Specifies the type of event you want to retrieve.   Earnings - Denotes an Earnings event.   Guidance - Denotes a Guidance event.   AnalystsShareholdersMeeting - Denotes an Analysts and Shareholders Meeting event.   ConferencePresentation - Denotes a Conference Presentation event.   SalesRevenue - Denotes a Sales/Revenue event.   SpecialSituation - Denotes a Special Situation event (i.e. Merger/Acquisition). (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>Transcripts</returns>
        Transcripts GetTranscriptsEvents(List<string> eventIds = default(List<string>), string eventType = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on eventIds and eventType.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventIds">Requests Event IDs. This is a comma-separated list with a maximum limit of 1000. (optional)</param>
        /// <param name="eventType">Specifies the type of event you want to retrieve.   Earnings - Denotes an Earnings event.   Guidance - Denotes a Guidance event.   AnalystsShareholdersMeeting - Denotes an Analysts and Shareholders Meeting event.   ConferencePresentation - Denotes a Conference Presentation event.   SalesRevenue - Denotes a Sales/Revenue event.   SpecialSituation - Denotes a Special Situation event (i.e. Merger/Acquisition). (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of Transcripts</returns>
        ApiResponse<Transcripts> GetTranscriptsEventsWithHttpInfo(List<string> eventIds = default(List<string>), string eventType = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific IDs.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. (optional)</param>
        /// <param name="reportIds">Requests Report IDs. This is a comma-separated list with a maximum limit of 1000 (optional)</param>
        /// <param name="categories">Code for categories to include. This is a comma-separated list.which represent country, industry, and subject codes. Use the &#x60;&#x60;&#x60;/reference/categories&#x60;&#x60;&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>TranscriptsOne</returns>
        TranscriptsOne GetTranscriptsIds(bool? primaryId = default(bool?), List<string> ids = default(List<string>), List<string> reportIds = default(List<string>), List<string> categories = default(List<string>), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific IDs.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. (optional)</param>
        /// <param name="reportIds">Requests Report IDs. This is a comma-separated list with a maximum limit of 1000 (optional)</param>
        /// <param name="categories">Code for categories to include. This is a comma-separated list.which represent country, industry, and subject codes. Use the &#x60;&#x60;&#x60;/reference/categories&#x60;&#x60;&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of TranscriptsOne</returns>
        ApiResponse<TranscriptsOne> GetTranscriptsIdsWithHttpInfo(bool? primaryId = default(bool?), List<string> ids = default(List<string>), List<string> reportIds = default(List<string>), List<string> categories = default(List<string>), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific time.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDateTime"> **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**    (optional)</param>
        /// <param name="endDateTime">The date to which data is required (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>TranscriptsTimes</returns>
        TranscriptsTimes GetTranscriptsTime(DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific time.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDateTime"> **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**    (optional)</param>
        /// <param name="endDateTime">The date to which data is required (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of TranscriptsTimes</returns>
        ApiResponse<TranscriptsTimes> GetTranscriptsTimeWithHttpInfo(DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;which are defined as country, industry, and subject codes. The data is returned as a comma-separated list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseCategories</returns>
        ResponseCategories Getcategories();

        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;which are defined as country, industry, and subject codes. The data is returned as a comma-separated list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseCategories</returns>
        ApiResponse<ResponseCategories> GetcategoriesWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranscriptsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTime</returns>
        System.Threading.Tasks.Task<ResponseTime> GetTimezoneAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTime>> GetTimezoneWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on search text.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Restricts the search to include only document stories which include the text searched. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Transcripts</returns>
        System.Threading.Tasks.Task<Transcripts> GetTranscriptsAsync(string searchText = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on search text.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Restricts the search to include only document stories which include the text searched. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Transcripts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transcripts>> GetTranscriptsWithHttpInfoAsync(string searchText = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific date range and time zones.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start Date. Format is YYYY-MM-DD    **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYY-MM-DD. (optional)</param>
        /// <param name="startDateRelative">The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - *If both &#x60;startDate&#x60; and &#x60;startDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;startDate&#x60; or &#x60;startDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="endDateRelative">The latest date of the feed file the API should fetch for based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* - *If both &#x60;endDate&#x60; and &#x60;endDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;endDate&#x60; or &#x60;endDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. The time fields in the response will adhere to this specified timezone. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Transcripts</returns>
        System.Threading.Tasks.Task<Transcripts> GetTranscriptsDatesAsync(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? startDateRelative = default(int?), int? endDateRelative = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific date range and time zones.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start Date. Format is YYYY-MM-DD    **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYY-MM-DD. (optional)</param>
        /// <param name="startDateRelative">The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - *If both &#x60;startDate&#x60; and &#x60;startDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;startDate&#x60; or &#x60;startDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="endDateRelative">The latest date of the feed file the API should fetch for based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* - *If both &#x60;endDate&#x60; and &#x60;endDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;endDate&#x60; or &#x60;endDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. The time fields in the response will adhere to this specified timezone. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Transcripts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transcripts>> GetTranscriptsDatesWithHttpInfoAsync(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? startDateRelative = default(int?), int? endDateRelative = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on eventIds and eventType.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventIds">Requests Event IDs. This is a comma-separated list with a maximum limit of 1000. (optional)</param>
        /// <param name="eventType">Specifies the type of event you want to retrieve.   Earnings - Denotes an Earnings event.   Guidance - Denotes a Guidance event.   AnalystsShareholdersMeeting - Denotes an Analysts and Shareholders Meeting event.   ConferencePresentation - Denotes a Conference Presentation event.   SalesRevenue - Denotes a Sales/Revenue event.   SpecialSituation - Denotes a Special Situation event (i.e. Merger/Acquisition). (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Transcripts</returns>
        System.Threading.Tasks.Task<Transcripts> GetTranscriptsEventsAsync(List<string> eventIds = default(List<string>), string eventType = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on eventIds and eventType.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventIds">Requests Event IDs. This is a comma-separated list with a maximum limit of 1000. (optional)</param>
        /// <param name="eventType">Specifies the type of event you want to retrieve.   Earnings - Denotes an Earnings event.   Guidance - Denotes a Guidance event.   AnalystsShareholdersMeeting - Denotes an Analysts and Shareholders Meeting event.   ConferencePresentation - Denotes a Conference Presentation event.   SalesRevenue - Denotes a Sales/Revenue event.   SpecialSituation - Denotes a Special Situation event (i.e. Merger/Acquisition). (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Transcripts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transcripts>> GetTranscriptsEventsWithHttpInfoAsync(List<string> eventIds = default(List<string>), string eventType = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific IDs.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. (optional)</param>
        /// <param name="reportIds">Requests Report IDs. This is a comma-separated list with a maximum limit of 1000 (optional)</param>
        /// <param name="categories">Code for categories to include. This is a comma-separated list.which represent country, industry, and subject codes. Use the &#x60;&#x60;&#x60;/reference/categories&#x60;&#x60;&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptsOne</returns>
        System.Threading.Tasks.Task<TranscriptsOne> GetTranscriptsIdsAsync(bool? primaryId = default(bool?), List<string> ids = default(List<string>), List<string> reportIds = default(List<string>), List<string> categories = default(List<string>), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific IDs.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. (optional)</param>
        /// <param name="reportIds">Requests Report IDs. This is a comma-separated list with a maximum limit of 1000 (optional)</param>
        /// <param name="categories">Code for categories to include. This is a comma-separated list.which represent country, industry, and subject codes. Use the &#x60;&#x60;&#x60;/reference/categories&#x60;&#x60;&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptsOne)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranscriptsOne>> GetTranscriptsIdsWithHttpInfoAsync(bool? primaryId = default(bool?), List<string> ids = default(List<string>), List<string> reportIds = default(List<string>), List<string> categories = default(List<string>), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific time.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDateTime"> **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**    (optional)</param>
        /// <param name="endDateTime">The date to which data is required (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptsTimes</returns>
        System.Threading.Tasks.Task<TranscriptsTimes> GetTranscriptsTimeAsync(DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific time.
        /// </summary>
        /// <remarks>
        /// Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDateTime"> **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**    (optional)</param>
        /// <param name="endDateTime">The date to which data is required (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptsTimes)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranscriptsTimes>> GetTranscriptsTimeWithHttpInfoAsync(DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;which are defined as country, industry, and subject codes. The data is returned as a comma-separated list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseCategories</returns>
        System.Threading.Tasks.Task<ResponseCategories> GetcategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;which are defined as country, industry, and subject codes. The data is returned as a comma-separated list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCategories>> GetcategoriesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranscriptsApi : ITranscriptsApiSync, ITranscriptsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TranscriptsApi : ITranscriptsApi
    {
        private FactSet.SDK.EventsandTranscripts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetTimezoneResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ResponseTime) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTranscriptsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(Transcripts) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTranscriptsDatesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(Transcripts) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTranscriptsEventsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(Transcripts) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTranscriptsIdsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(TranscriptsOne) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTranscriptsTimeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(TranscriptsTimes) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetcategoriesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ResponseCategories) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TranscriptsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TranscriptsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.EventsandTranscripts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.EventsandTranscripts.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.EventsandTranscripts.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.EventsandTranscripts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TranscriptsApi(FactSet.SDK.EventsandTranscripts.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.EventsandTranscripts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.EventsandTranscripts.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.EventsandTranscripts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TranscriptsApi(FactSet.SDK.EventsandTranscripts.Client.ISynchronousClient client, FactSet.SDK.EventsandTranscripts.Client.IAsynchronousClient asyncClient, FactSet.SDK.EventsandTranscripts.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.EventsandTranscripts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.EventsandTranscripts.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.EventsandTranscripts.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.EventsandTranscripts.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.EventsandTranscripts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseTime</returns>
        public ResponseTime GetTimezone()
        {
            var localVarResponse = GetTimezoneWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseTime</returns>
        public ApiResponse<ResponseTime> GetTimezoneWithHttpInfo()
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTimezoneResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ResponseTime>("/reference/time-zones", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimezone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTime</returns>
        public async System.Threading.Tasks.Task<ResponseTime>GetTimezoneAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTimezoneWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;timeZones&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTime)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ResponseTime>> GetTimezoneWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTimezoneResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseTime>("/reference/time-zones", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimezone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on search text. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Restricts the search to include only document stories which include the text searched. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>Transcripts</returns>
        public Transcripts GetTranscripts(string searchText = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetTranscriptsWithHttpInfo(searchText, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on search text. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Restricts the search to include only document stories which include the text searched. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of Transcripts</returns>
        public ApiResponse<Transcripts> GetTranscriptsWithHttpInfo(string searchText = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTranscriptsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Transcripts>("/transcripts/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on search text. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Restricts the search to include only document stories which include the text searched. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Transcripts</returns>
        public async System.Threading.Tasks.Task<Transcripts>GetTranscriptsAsync(string searchText = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTranscriptsWithHttpInfoAsync(searchText, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on search text. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Restricts the search to include only document stories which include the text searched. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Transcripts)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Transcripts>> GetTranscriptsWithHttpInfoAsync(string searchText = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTranscriptsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Transcripts>("/transcripts/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific date range and time zones. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start Date. Format is YYYY-MM-DD    **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYY-MM-DD. (optional)</param>
        /// <param name="startDateRelative">The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - *If both &#x60;startDate&#x60; and &#x60;startDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;startDate&#x60; or &#x60;startDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="endDateRelative">The latest date of the feed file the API should fetch for based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* - *If both &#x60;endDate&#x60; and &#x60;endDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;endDate&#x60; or &#x60;endDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. The time fields in the response will adhere to this specified timezone. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>Transcripts</returns>
        public Transcripts GetTranscriptsDates(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? startDateRelative = default(int?), int? endDateRelative = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetTranscriptsDatesWithHttpInfo(startDate, endDate, startDateRelative, endDateRelative, timeZone, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific date range and time zones. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start Date. Format is YYYY-MM-DD    **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYY-MM-DD. (optional)</param>
        /// <param name="startDateRelative">The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - *If both &#x60;startDate&#x60; and &#x60;startDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;startDate&#x60; or &#x60;startDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="endDateRelative">The latest date of the feed file the API should fetch for based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* - *If both &#x60;endDate&#x60; and &#x60;endDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;endDate&#x60; or &#x60;endDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. The time fields in the response will adhere to this specified timezone. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of Transcripts</returns>
        public ApiResponse<Transcripts> GetTranscriptsDatesWithHttpInfo(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? startDateRelative = default(int?), int? endDateRelative = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate.Value)));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate.Value)));
            }
            if (startDateRelative != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "startDateRelative", startDateRelative));
            }
            if (endDateRelative != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "endDateRelative", endDateRelative));
            }
            if (timeZone != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "timeZone", timeZone));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTranscriptsDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Transcripts>("/transcripts/dates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscriptsDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific date range and time zones. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start Date. Format is YYYY-MM-DD    **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYY-MM-DD. (optional)</param>
        /// <param name="startDateRelative">The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - *If both &#x60;startDate&#x60; and &#x60;startDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;startDate&#x60; or &#x60;startDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="endDateRelative">The latest date of the feed file the API should fetch for based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* - *If both &#x60;endDate&#x60; and &#x60;endDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;endDate&#x60; or &#x60;endDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. The time fields in the response will adhere to this specified timezone. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Transcripts</returns>
        public async System.Threading.Tasks.Task<Transcripts>GetTranscriptsDatesAsync(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? startDateRelative = default(int?), int? endDateRelative = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTranscriptsDatesWithHttpInfoAsync(startDate, endDate, startDateRelative, endDateRelative, timeZone, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific date range and time zones. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start Date. Format is YYYY-MM-DD    **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**  (optional)</param>
        /// <param name="endDate">End Date. Format is YYYY-MM-DD. (optional)</param>
        /// <param name="startDateRelative">The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - *If both &#x60;startDate&#x60; and &#x60;startDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;startDate&#x60; or &#x60;startDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="endDateRelative">The latest date of the feed file the API should fetch for based on the file timestamp.  - Format: Specify the date using a relative term as an integer: &#39;0&#39; for today, &#39;-1&#39; for yesterday, &#39;-2&#39; for two days ago, and so forth. Negative values are used to represent past dates.   - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* - *If both &#x60;endDate&#x60; and &#x60;endDateRelative&#x60; are provided in the same request, the API will return an error.* - *If users provide future dates in requests for &#x60;endDate&#x60; or &#x60;endDateRelative&#x60;, the API will not return any data.*  (optional)</param>
        /// <param name="timeZone">timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. The time fields in the response will adhere to this specified timezone. (optional, default to &quot;America/New_York&quot;)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Transcripts)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Transcripts>> GetTranscriptsDatesWithHttpInfoAsync(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? startDateRelative = default(int?), int? endDateRelative = default(int?), string timeZone = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate.Value)));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate.Value)));
            }
            if (startDateRelative != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "startDateRelative", startDateRelative));
            }
            if (endDateRelative != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "endDateRelative", endDateRelative));
            }
            if (timeZone != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "timeZone", timeZone));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTranscriptsDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Transcripts>("/transcripts/dates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscriptsDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on eventIds and eventType. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventIds">Requests Event IDs. This is a comma-separated list with a maximum limit of 1000. (optional)</param>
        /// <param name="eventType">Specifies the type of event you want to retrieve.   Earnings - Denotes an Earnings event.   Guidance - Denotes a Guidance event.   AnalystsShareholdersMeeting - Denotes an Analysts and Shareholders Meeting event.   ConferencePresentation - Denotes a Conference Presentation event.   SalesRevenue - Denotes a Sales/Revenue event.   SpecialSituation - Denotes a Special Situation event (i.e. Merger/Acquisition). (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>Transcripts</returns>
        public Transcripts GetTranscriptsEvents(List<string> eventIds = default(List<string>), string eventType = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetTranscriptsEventsWithHttpInfo(eventIds, eventType, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on eventIds and eventType. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventIds">Requests Event IDs. This is a comma-separated list with a maximum limit of 1000. (optional)</param>
        /// <param name="eventType">Specifies the type of event you want to retrieve.   Earnings - Denotes an Earnings event.   Guidance - Denotes a Guidance event.   AnalystsShareholdersMeeting - Denotes an Analysts and Shareholders Meeting event.   ConferencePresentation - Denotes a Conference Presentation event.   SalesRevenue - Denotes a Sales/Revenue event.   SpecialSituation - Denotes a Special Situation event (i.e. Merger/Acquisition). (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of Transcripts</returns>
        public ApiResponse<Transcripts> GetTranscriptsEventsWithHttpInfo(List<string> eventIds = default(List<string>), string eventType = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eventIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "eventIds", eventIds));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTranscriptsEventsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Transcripts>("/transcripts/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscriptsEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on eventIds and eventType. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventIds">Requests Event IDs. This is a comma-separated list with a maximum limit of 1000. (optional)</param>
        /// <param name="eventType">Specifies the type of event you want to retrieve.   Earnings - Denotes an Earnings event.   Guidance - Denotes a Guidance event.   AnalystsShareholdersMeeting - Denotes an Analysts and Shareholders Meeting event.   ConferencePresentation - Denotes a Conference Presentation event.   SalesRevenue - Denotes a Sales/Revenue event.   SpecialSituation - Denotes a Special Situation event (i.e. Merger/Acquisition). (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Transcripts</returns>
        public async System.Threading.Tasks.Task<Transcripts>GetTranscriptsEventsAsync(List<string> eventIds = default(List<string>), string eventType = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTranscriptsEventsWithHttpInfoAsync(eventIds, eventType, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on eventIds and eventType. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventIds">Requests Event IDs. This is a comma-separated list with a maximum limit of 1000. (optional)</param>
        /// <param name="eventType">Specifies the type of event you want to retrieve.   Earnings - Denotes an Earnings event.   Guidance - Denotes a Guidance event.   AnalystsShareholdersMeeting - Denotes an Analysts and Shareholders Meeting event.   ConferencePresentation - Denotes a Conference Presentation event.   SalesRevenue - Denotes a Sales/Revenue event.   SpecialSituation - Denotes a Special Situation event (i.e. Merger/Acquisition). (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Transcripts)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Transcripts>> GetTranscriptsEventsWithHttpInfoAsync(List<string> eventIds = default(List<string>), string eventType = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eventIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "eventIds", eventIds));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTranscriptsEventsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Transcripts>("/transcripts/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscriptsEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific IDs. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. (optional)</param>
        /// <param name="reportIds">Requests Report IDs. This is a comma-separated list with a maximum limit of 1000 (optional)</param>
        /// <param name="categories">Code for categories to include. This is a comma-separated list.which represent country, industry, and subject codes. Use the &#x60;&#x60;&#x60;/reference/categories&#x60;&#x60;&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>TranscriptsOne</returns>
        public TranscriptsOne GetTranscriptsIds(bool? primaryId = default(bool?), List<string> ids = default(List<string>), List<string> reportIds = default(List<string>), List<string> categories = default(List<string>), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetTranscriptsIdsWithHttpInfo(primaryId, ids, reportIds, categories, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific IDs. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. (optional)</param>
        /// <param name="reportIds">Requests Report IDs. This is a comma-separated list with a maximum limit of 1000 (optional)</param>
        /// <param name="categories">Code for categories to include. This is a comma-separated list.which represent country, industry, and subject codes. Use the &#x60;&#x60;&#x60;/reference/categories&#x60;&#x60;&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of TranscriptsOne</returns>
        public ApiResponse<TranscriptsOne> GetTranscriptsIdsWithHttpInfo(bool? primaryId = default(bool?), List<string> ids = default(List<string>), List<string> reportIds = default(List<string>), List<string> categories = default(List<string>), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (primaryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "primaryId", primaryId));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (reportIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "reportIds", reportIds));
            }
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "categories", categories));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTranscriptsIdsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            TranscriptsOne>("/transcripts/ids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscriptsIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific IDs. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. (optional)</param>
        /// <param name="reportIds">Requests Report IDs. This is a comma-separated list with a maximum limit of 1000 (optional)</param>
        /// <param name="categories">Code for categories to include. This is a comma-separated list.which represent country, industry, and subject codes. Use the &#x60;&#x60;&#x60;/reference/categories&#x60;&#x60;&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptsOne</returns>
        public async System.Threading.Tasks.Task<TranscriptsOne>GetTranscriptsIdsAsync(bool? primaryId = default(bool?), List<string> ids = default(List<string>), List<string> reportIds = default(List<string>), List<string> categories = default(List<string>), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTranscriptsIdsWithHttpInfoAsync(primaryId, ids, reportIds, categories, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific IDs. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="primaryId">Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (optional, default to false)</param>
        /// <param name="ids">Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. (optional)</param>
        /// <param name="reportIds">Requests Report IDs. This is a comma-separated list with a maximum limit of 1000 (optional)</param>
        /// <param name="categories">Code for categories to include. This is a comma-separated list.which represent country, industry, and subject codes. Use the &#x60;&#x60;&#x60;/reference/categories&#x60;&#x60;&#x60; endpoint to get the list of available categories.  Default &#x3D; All categories. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptsOne)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TranscriptsOne>> GetTranscriptsIdsWithHttpInfoAsync(bool? primaryId = default(bool?), List<string> ids = default(List<string>), List<string> reportIds = default(List<string>), List<string> categories = default(List<string>), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (primaryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "primaryId", primaryId));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (reportIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "reportIds", reportIds));
            }
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "categories", categories));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTranscriptsIdsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TranscriptsOne>("/transcripts/ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscriptsIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific time. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDateTime"> **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**    (optional)</param>
        /// <param name="endDateTime">The date to which data is required (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>TranscriptsTimes</returns>
        public TranscriptsTimes GetTranscriptsTime(DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetTranscriptsTimeWithHttpInfo(startDateTime, endDateTime, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific time. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDateTime"> **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**    (optional)</param>
        /// <param name="endDateTime">The date to which data is required (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of TranscriptsTimes</returns>
        public ApiResponse<TranscriptsTimes> GetTranscriptsTimeWithHttpInfo(DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTranscriptsTimeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            TranscriptsTimes>("/transcripts/times", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscriptsTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific time. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDateTime"> **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**    (optional)</param>
        /// <param name="endDateTime">The date to which data is required (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptsTimes</returns>
        public async System.Threading.Tasks.Task<TranscriptsTimes>GetTranscriptsTimeAsync(DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTranscriptsTimeWithHttpInfoAsync(startDateTime, endDateTime, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific time. Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDateTime"> **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**    (optional)</param>
        /// <param name="endDateTime">The date to which data is required (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDate.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptsTimes)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TranscriptsTimes>> GetTranscriptsTimeWithHttpInfoAsync(DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (endDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTranscriptsTimeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TranscriptsTimes>("/transcripts/times", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscriptsTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;which are defined as country, industry, and subject codes. The data is returned as a comma-separated list.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseCategories</returns>
        public ResponseCategories Getcategories()
        {
            var localVarResponse = GetcategoriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;which are defined as country, industry, and subject codes. The data is returned as a comma-separated list.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseCategories</returns>
        public ApiResponse<ResponseCategories> GetcategoriesWithHttpInfo()
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetcategoriesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ResponseCategories>("/reference/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getcategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;which are defined as country, industry, and subject codes. The data is returned as a comma-separated list.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseCategories</returns>
        public async System.Threading.Tasks.Task<ResponseCategories>GetcategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetcategoriesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;which are defined as country, industry, and subject codes. The data is returned as a comma-separated list.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseCategories)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ResponseCategories>> GetcategoriesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetcategoriesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseCategories>("/reference/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getcategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
