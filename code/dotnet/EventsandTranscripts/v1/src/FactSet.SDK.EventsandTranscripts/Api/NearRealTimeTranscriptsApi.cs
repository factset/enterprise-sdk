/*
 * EVENTS AND TRANSCRIPTS API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p>  
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.EventsandTranscripts.Client;
using FactSet.SDK.EventsandTranscripts.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.EventsandTranscripts.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INearRealTimeTranscriptsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the active calls happening at the moment based on ticker,call status and entity ID.
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event. (optional)</param>
        /// <param name="callStatus">Status of the call, i.e., Ended, InProgress, EndedWithoutNotification, or IssueAtSource. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>NrtCalls</returns>
        NrtCalls GetBulkDocumentsNrtV1Calls(string ticker = default(string), string entityId = default(string), string callStatus = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the active calls happening at the moment based on ticker,call status and entity ID.
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event. (optional)</param>
        /// <param name="callStatus">Status of the call, i.e., Ended, InProgress, EndedWithoutNotification, or IssueAtSource. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of NrtCalls</returns>
        ApiResponse<NrtCalls> GetBulkDocumentsNrtV1CallsWithHttpInfo(string ticker = default(string), string entityId = default(string), string callStatus = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the active calls happening at the moment based on audio source ID and report ID.
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs. (optional)</param>
        /// <param name="reportId">Unique identifier for an event. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>NrtCalls</returns>
        NrtCalls GetBulkDocumentsNrtV1CallsByAudioSourceId(int? audioSourceId = default(int?), int? reportId = default(int?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the active calls happening at the moment based on audio source ID and report ID.
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs. (optional)</param>
        /// <param name="reportId">Unique identifier for an event. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of NrtCalls</returns>
        ApiResponse<NrtCalls> GetBulkDocumentsNrtV1CallsByAudioSourceIdWithHttpInfo(int? audioSourceId = default(int?), int? reportId = default(int?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <remarks>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>IndexedNrt</returns>
        IndexedNrt GetBulkDocumentsNrtV1Indexedrt(int audioSourceId, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <remarks>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of IndexedNrt</returns>
        ApiResponse<IndexedNrt> GetBulkDocumentsNrtV1IndexedrtWithHttpInfo(int audioSourceId, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <remarks>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on the start offset of the speaker.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>NrtSpeakerIds</returns>
        NrtSpeakerIds GetBulkDocumentsNrtV1SpeakerIds(int audioSourceId, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <remarks>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on the start offset of the speaker.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of NrtSpeakerIds</returns>
        ApiResponse<NrtSpeakerIds> GetBulkDocumentsNrtV1SpeakerIdsWithHttpInfo(int audioSourceId, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INearRealTimeTranscriptsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the active calls happening at the moment based on ticker,call status and entity ID.
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event. (optional)</param>
        /// <param name="callStatus">Status of the call, i.e., Ended, InProgress, EndedWithoutNotification, or IssueAtSource. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NrtCalls</returns>
        System.Threading.Tasks.Task<NrtCalls> GetBulkDocumentsNrtV1CallsAsync(string ticker = default(string), string entityId = default(string), string callStatus = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the active calls happening at the moment based on ticker,call status and entity ID.
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event. (optional)</param>
        /// <param name="callStatus">Status of the call, i.e., Ended, InProgress, EndedWithoutNotification, or IssueAtSource. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NrtCalls)</returns>
        System.Threading.Tasks.Task<ApiResponse<NrtCalls>> GetBulkDocumentsNrtV1CallsWithHttpInfoAsync(string ticker = default(string), string entityId = default(string), string callStatus = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the active calls happening at the moment based on audio source ID and report ID.
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs. (optional)</param>
        /// <param name="reportId">Unique identifier for an event. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NrtCalls</returns>
        System.Threading.Tasks.Task<NrtCalls> GetBulkDocumentsNrtV1CallsByAudioSourceIdAsync(int? audioSourceId = default(int?), int? reportId = default(int?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the active calls happening at the moment based on audio source ID and report ID.
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs. (optional)</param>
        /// <param name="reportId">Unique identifier for an event. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NrtCalls)</returns>
        System.Threading.Tasks.Task<ApiResponse<NrtCalls>> GetBulkDocumentsNrtV1CallsByAudioSourceIdWithHttpInfoAsync(int? audioSourceId = default(int?), int? reportId = default(int?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <remarks>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndexedNrt</returns>
        System.Threading.Tasks.Task<IndexedNrt> GetBulkDocumentsNrtV1IndexedrtAsync(int audioSourceId, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <remarks>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndexedNrt)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndexedNrt>> GetBulkDocumentsNrtV1IndexedrtWithHttpInfoAsync(int audioSourceId, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <remarks>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on the start offset of the speaker.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NrtSpeakerIds</returns>
        System.Threading.Tasks.Task<NrtSpeakerIds> GetBulkDocumentsNrtV1SpeakerIdsAsync(int audioSourceId, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <remarks>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on the start offset of the speaker.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NrtSpeakerIds)</returns>
        System.Threading.Tasks.Task<ApiResponse<NrtSpeakerIds>> GetBulkDocumentsNrtV1SpeakerIdsWithHttpInfoAsync(int audioSourceId, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INearRealTimeTranscriptsApi : INearRealTimeTranscriptsApiSync, INearRealTimeTranscriptsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NearRealTimeTranscriptsApi : INearRealTimeTranscriptsApi
    {
        private FactSet.SDK.EventsandTranscripts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetBulkDocumentsNrtV1CallsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NrtCalls) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBulkDocumentsNrtV1CallsByAudioSourceIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NrtCalls) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBulkDocumentsNrtV1IndexedrtResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(IndexedNrt) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBulkDocumentsNrtV1SpeakerIdsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NrtSpeakerIds) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="NearRealTimeTranscriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NearRealTimeTranscriptsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NearRealTimeTranscriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NearRealTimeTranscriptsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.EventsandTranscripts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.EventsandTranscripts.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.EventsandTranscripts.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.EventsandTranscripts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NearRealTimeTranscriptsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NearRealTimeTranscriptsApi(FactSet.SDK.EventsandTranscripts.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.EventsandTranscripts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.EventsandTranscripts.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.EventsandTranscripts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NearRealTimeTranscriptsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NearRealTimeTranscriptsApi(FactSet.SDK.EventsandTranscripts.Client.ISynchronousClient client, FactSet.SDK.EventsandTranscripts.Client.IAsynchronousClient asyncClient, FactSet.SDK.EventsandTranscripts.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.EventsandTranscripts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.EventsandTranscripts.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.EventsandTranscripts.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.EventsandTranscripts.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.EventsandTranscripts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the active calls happening at the moment based on ticker,call status and entity ID. Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event. (optional)</param>
        /// <param name="callStatus">Status of the call, i.e., Ended, InProgress, EndedWithoutNotification, or IssueAtSource. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>NrtCalls</returns>
        public NrtCalls GetBulkDocumentsNrtV1Calls(string ticker = default(string), string entityId = default(string), string callStatus = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetBulkDocumentsNrtV1CallsWithHttpInfo(ticker, entityId, callStatus, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the active calls happening at the moment based on ticker,call status and entity ID. Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event. (optional)</param>
        /// <param name="callStatus">Status of the call, i.e., Ended, InProgress, EndedWithoutNotification, or IssueAtSource. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of NrtCalls</returns>
        public ApiResponse<NrtCalls> GetBulkDocumentsNrtV1CallsWithHttpInfo(string ticker = default(string), string entityId = default(string), string callStatus = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ticker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "ticker", ticker));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }
            if (callStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "callStatus", callStatus));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1CallsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NrtCalls>("/nrt/by-ticker", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1Calls", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the active calls happening at the moment based on ticker,call status and entity ID. Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event. (optional)</param>
        /// <param name="callStatus">Status of the call, i.e., Ended, InProgress, EndedWithoutNotification, or IssueAtSource. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NrtCalls</returns>
        public async System.Threading.Tasks.Task<NrtCalls>GetBulkDocumentsNrtV1CallsAsync(string ticker = default(string), string entityId = default(string), string callStatus = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBulkDocumentsNrtV1CallsWithHttpInfoAsync(ticker, entityId, callStatus, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the active calls happening at the moment based on ticker,call status and entity ID. Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event. (optional)</param>
        /// <param name="callStatus">Status of the call, i.e., Ended, InProgress, EndedWithoutNotification, or IssueAtSource. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NrtCalls)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NrtCalls>> GetBulkDocumentsNrtV1CallsWithHttpInfoAsync(string ticker = default(string), string entityId = default(string), string callStatus = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ticker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "ticker", ticker));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }
            if (callStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "callStatus", callStatus));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1CallsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NrtCalls>("/nrt/by-ticker", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1Calls", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the active calls happening at the moment based on audio source ID and report ID. Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs. (optional)</param>
        /// <param name="reportId">Unique identifier for an event. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>NrtCalls</returns>
        public NrtCalls GetBulkDocumentsNrtV1CallsByAudioSourceId(int? audioSourceId = default(int?), int? reportId = default(int?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetBulkDocumentsNrtV1CallsByAudioSourceIdWithHttpInfo(audioSourceId, reportId, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the active calls happening at the moment based on audio source ID and report ID. Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs. (optional)</param>
        /// <param name="reportId">Unique identifier for an event. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of NrtCalls</returns>
        public ApiResponse<NrtCalls> GetBulkDocumentsNrtV1CallsByAudioSourceIdWithHttpInfo(int? audioSourceId = default(int?), int? reportId = default(int?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (audioSourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            }
            if (reportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "reportId", reportId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1CallsByAudioSourceIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NrtCalls>("/nrt/by-ids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1CallsByAudioSourceId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the active calls happening at the moment based on audio source ID and report ID. Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs. (optional)</param>
        /// <param name="reportId">Unique identifier for an event. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NrtCalls</returns>
        public async System.Threading.Tasks.Task<NrtCalls>GetBulkDocumentsNrtV1CallsByAudioSourceIdAsync(int? audioSourceId = default(int?), int? reportId = default(int?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBulkDocumentsNrtV1CallsByAudioSourceIdWithHttpInfoAsync(audioSourceId, reportId, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the active calls happening at the moment based on audio source ID and report ID. Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs. (optional)</param>
        /// <param name="reportId">Unique identifier for an event. (optional)</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on eventDatetimeUtc.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NrtCalls)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NrtCalls>> GetBulkDocumentsNrtV1CallsByAudioSourceIdWithHttpInfoAsync(int? audioSourceId = default(int?), int? reportId = default(int?), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (audioSourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            }
            if (reportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "reportId", reportId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1CallsByAudioSourceIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NrtCalls>("/nrt/by-ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1CallsByAudioSourceId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call. Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>IndexedNrt</returns>
        public IndexedNrt GetBulkDocumentsNrtV1Indexedrt(int audioSourceId, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetBulkDocumentsNrtV1IndexedrtWithHttpInfo(audioSourceId, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call. Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of IndexedNrt</returns>
        public ApiResponse<IndexedNrt> GetBulkDocumentsNrtV1IndexedrtWithHttpInfo(int audioSourceId, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1IndexedrtResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            IndexedNrt>("/nrt/indexed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1Indexedrt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call. Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndexedNrt</returns>
        public async System.Threading.Tasks.Task<IndexedNrt>GetBulkDocumentsNrtV1IndexedrtAsync(int audioSourceId, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBulkDocumentsNrtV1IndexedrtWithHttpInfoAsync(audioSourceId, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call. Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndexedNrt)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<IndexedNrt>> GetBulkDocumentsNrtV1IndexedrtWithHttpInfoAsync(int audioSourceId, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1IndexedrtResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IndexedNrt>("/nrt/indexed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1Indexedrt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call. Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on the start offset of the speaker.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>NrtSpeakerIds</returns>
        public NrtSpeakerIds GetBulkDocumentsNrtV1SpeakerIds(int audioSourceId, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetBulkDocumentsNrtV1SpeakerIdsWithHttpInfo(audioSourceId, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call. Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on the start offset of the speaker.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of NrtSpeakerIds</returns>
        public ApiResponse<NrtSpeakerIds> GetBulkDocumentsNrtV1SpeakerIdsWithHttpInfo(int audioSourceId, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1SpeakerIdsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NrtSpeakerIds>("/nrt/speakerids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1SpeakerIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call. Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on the start offset of the speaker.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NrtSpeakerIds</returns>
        public async System.Threading.Tasks.Task<NrtSpeakerIds>GetBulkDocumentsNrtV1SpeakerIdsAsync(int audioSourceId, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBulkDocumentsNrtV1SpeakerIdsWithHttpInfoAsync(audioSourceId, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call. Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.</param>
        /// <param name="sort">Enables sorting data in ascending or descending chronological order based on the start offset of the speaker.  (optional)</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NrtSpeakerIds)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NrtSpeakerIds>> GetBulkDocumentsNrtV1SpeakerIdsWithHttpInfoAsync(int audioSourceId, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.EventsandTranscripts.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1SpeakerIdsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NrtSpeakerIds>("/nrt/speakerids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1SpeakerIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
