/*
 * EVENTS AND TRANSCRIPTS API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p>  
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.EventsandTranscripts.Client;
using FactSet.SDK.EventsandTranscripts.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.EventsandTranscripts.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalendarEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Company Event data
        /// </summary>
        /// <remarks>
        /// This endpoint returns all company events with filters from the request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyEventRequest">Company Event request body</param>
        /// <returns>CompanyEventResponse</returns>
        CompanyEventResponse GetCompanyEvent(CompanyEventRequest companyEventRequest);

        /// <summary>
        /// Retrieve Company Event data
        /// </summary>
        /// <remarks>
        /// This endpoint returns all company events with filters from the request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyEventRequest">Company Event request body</param>
        /// <returns>ApiResponse of CompanyEventResponse</returns>
        ApiResponse<CompanyEventResponse> GetCompanyEventWithHttpInfo(CompanyEventRequest companyEventRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalendarEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Company Event data
        /// </summary>
        /// <remarks>
        /// This endpoint returns all company events with filters from the request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyEventRequest">Company Event request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyEventResponse</returns>
        System.Threading.Tasks.Task<CompanyEventResponse> GetCompanyEventAsync(CompanyEventRequest companyEventRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Company Event data
        /// </summary>
        /// <remarks>
        /// This endpoint returns all company events with filters from the request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyEventRequest">Company Event request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyEventResponse>> GetCompanyEventWithHttpInfoAsync(CompanyEventRequest companyEventRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalendarEventsApi : ICalendarEventsApiSync, ICalendarEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CalendarEventsApi : ICalendarEventsApi
    {
        private FactSet.SDK.EventsandTranscripts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyEventResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CompanyEventResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarEventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalendarEventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarEventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalendarEventsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.EventsandTranscripts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.EventsandTranscripts.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.EventsandTranscripts.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.EventsandTranscripts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarEventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalendarEventsApi(FactSet.SDK.EventsandTranscripts.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.EventsandTranscripts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.EventsandTranscripts.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.EventsandTranscripts.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.EventsandTranscripts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarEventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CalendarEventsApi(FactSet.SDK.EventsandTranscripts.Client.ISynchronousClient client, FactSet.SDK.EventsandTranscripts.Client.IAsynchronousClient asyncClient, FactSet.SDK.EventsandTranscripts.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.EventsandTranscripts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.EventsandTranscripts.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.EventsandTranscripts.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.EventsandTranscripts.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.EventsandTranscripts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Company Event data This endpoint returns all company events with filters from the request.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyEventRequest">Company Event request body</param>
        /// <returns>CompanyEventResponse</returns>
        public CompanyEventResponse GetCompanyEvent(CompanyEventRequest companyEventRequest)
        {
            var localVarResponse = GetCompanyEventWithHttpInfo(companyEventRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Company Event data This endpoint returns all company events with filters from the request.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyEventRequest">Company Event request body</param>
        /// <returns>ApiResponse of CompanyEventResponse</returns>
        public ApiResponse<CompanyEventResponse> GetCompanyEventWithHttpInfo(CompanyEventRequest companyEventRequest)
        {
            // verify the required parameter 'companyEventRequest' is set
            if (companyEventRequest == null)
            {
                throw new FactSet.SDK.EventsandTranscripts.Client.ApiException(400, "Missing required parameter 'companyEventRequest' when calling CalendarEventsApi->GetCompanyEvent");
            }

            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companyEventRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyEventResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CompanyEventResponse>("/calendar/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Company Event data This endpoint returns all company events with filters from the request.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyEventRequest">Company Event request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyEventResponse</returns>
        public async System.Threading.Tasks.Task<CompanyEventResponse>GetCompanyEventAsync(CompanyEventRequest companyEventRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyEventWithHttpInfoAsync(companyEventRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Company Event data This endpoint returns all company events with filters from the request.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsandTranscripts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyEventRequest">Company Event request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyEventResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CompanyEventResponse>> GetCompanyEventWithHttpInfoAsync(CompanyEventRequest companyEventRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyEventRequest' is set
            if (companyEventRequest == null)
            {
                throw new FactSet.SDK.EventsandTranscripts.Client.ApiException(400, "Missing required parameter 'companyEventRequest' when calling CalendarEventsApi->GetCompanyEvent");
            }


            FactSet.SDK.EventsandTranscripts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsandTranscripts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsandTranscripts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companyEventRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsandTranscripts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyEventResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompanyEventResponse>("/calendar/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
