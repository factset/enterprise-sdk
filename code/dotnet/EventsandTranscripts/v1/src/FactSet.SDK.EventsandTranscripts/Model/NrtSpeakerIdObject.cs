/*
 * EVENTS AND TRANSCRIPTS API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p>  
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsandTranscripts.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsandTranscripts.Model
{
    /// <summary>
    /// NrtSpeakerIdObject
    /// </summary>
    [DataContract(Name = "NrtSpeakerIdObject")]
    public partial class NrtSpeakerIdObject : IEquatable<NrtSpeakerIdObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NrtSpeakerIdObject" /> class.
        /// </summary>
        /// <param name="audioSourceId">The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSourceIDs..</param>
        /// <param name="speakerStartOffset">The number of seconds into the call when a speaker starts / is speaking..</param>
        /// <param name="speakerId">A unique identifier for a speaker. You can find speakerIds within [FactSet People API](https://developer.factset.com/api-catalog/factset-people-api). .</param>
        /// <param name="confidenceScore">The  Confidence score similarity for a particular speaker.  A score &gt;&#x3D; 0.49 while a speaker is speaking can be considered as a high confidence in the predicted speaker.  Only the SpeakerIDs with the highest cosineScore are rendered in the result set..</param>
        /// <param name="affiliationId">The affiliationId represents the entity ID associated with the organization or company to which the speaker is affiliated..</param>
        public NrtSpeakerIdObject(int? audioSourceId = default(int?), decimal? speakerStartOffset = default(decimal?), string speakerId = default(string), decimal? confidenceScore = default(decimal?), string affiliationId = default(string))
        {
            this.AudioSourceId = audioSourceId;
            this.SpeakerStartOffset = speakerStartOffset;
            this.SpeakerId = speakerId;
            this.ConfidenceScore = confidenceScore;
            this.AffiliationId = affiliationId;
        }

        /// <summary>
        /// The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSourceIDs.
        /// </summary>
        /// <value>The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSourceIDs.</value>
        [DataMember(Name = "audioSourceId", EmitDefaultValue = true)]
        public int? AudioSourceId { get; set; }

        /// <summary>
        /// The number of seconds into the call when a speaker starts / is speaking.
        /// </summary>
        /// <value>The number of seconds into the call when a speaker starts / is speaking.</value>
        [DataMember(Name = "speakerStartOffset", EmitDefaultValue = true)]
        public decimal? SpeakerStartOffset { get; set; }

        /// <summary>
        /// A unique identifier for a speaker. You can find speakerIds within [FactSet People API](https://developer.factset.com/api-catalog/factset-people-api). 
        /// </summary>
        /// <value>A unique identifier for a speaker. You can find speakerIds within [FactSet People API](https://developer.factset.com/api-catalog/factset-people-api). </value>
        [DataMember(Name = "speakerId", EmitDefaultValue = true)]
        public string SpeakerId { get; set; }

        /// <summary>
        /// The  Confidence score similarity for a particular speaker.  A score &gt;&#x3D; 0.49 while a speaker is speaking can be considered as a high confidence in the predicted speaker.  Only the SpeakerIDs with the highest cosineScore are rendered in the result set.
        /// </summary>
        /// <value>The  Confidence score similarity for a particular speaker.  A score &gt;&#x3D; 0.49 while a speaker is speaking can be considered as a high confidence in the predicted speaker.  Only the SpeakerIDs with the highest cosineScore are rendered in the result set.</value>
        [DataMember(Name = "confidenceScore", EmitDefaultValue = true)]
        public decimal? ConfidenceScore { get; set; }

        /// <summary>
        /// The affiliationId represents the entity ID associated with the organization or company to which the speaker is affiliated.
        /// </summary>
        /// <value>The affiliationId represents the entity ID associated with the organization or company to which the speaker is affiliated.</value>
        [DataMember(Name = "affiliationId", EmitDefaultValue = true)]
        public string AffiliationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NrtSpeakerIdObject {\n");
            sb.Append("  AudioSourceId: ").Append(AudioSourceId).Append("\n");
            sb.Append("  SpeakerStartOffset: ").Append(SpeakerStartOffset).Append("\n");
            sb.Append("  SpeakerId: ").Append(SpeakerId).Append("\n");
            sb.Append("  ConfidenceScore: ").Append(ConfidenceScore).Append("\n");
            sb.Append("  AffiliationId: ").Append(AffiliationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NrtSpeakerIdObject);
        }

        /// <summary>
        /// Returns true if NrtSpeakerIdObject instances are equal
        /// </summary>
        /// <param name="input">Instance of NrtSpeakerIdObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NrtSpeakerIdObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AudioSourceId == input.AudioSourceId ||
                    (this.AudioSourceId != null &&
                    this.AudioSourceId.Equals(input.AudioSourceId))
                ) && 
                (
                    this.SpeakerStartOffset == input.SpeakerStartOffset ||
                    (this.SpeakerStartOffset != null &&
                    this.SpeakerStartOffset.Equals(input.SpeakerStartOffset))
                ) && 
                (
                    this.SpeakerId == input.SpeakerId ||
                    (this.SpeakerId != null &&
                    this.SpeakerId.Equals(input.SpeakerId))
                ) && 
                (
                    this.ConfidenceScore == input.ConfidenceScore ||
                    (this.ConfidenceScore != null &&
                    this.ConfidenceScore.Equals(input.ConfidenceScore))
                ) && 
                (
                    this.AffiliationId == input.AffiliationId ||
                    (this.AffiliationId != null &&
                    this.AffiliationId.Equals(input.AffiliationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AudioSourceId != null)
                {
                    hashCode = (hashCode * 59) + this.AudioSourceId.GetHashCode();
                }
                if (this.SpeakerStartOffset != null)
                {
                    hashCode = (hashCode * 59) + this.SpeakerStartOffset.GetHashCode();
                }
                if (this.SpeakerId != null)
                {
                    hashCode = (hashCode * 59) + this.SpeakerId.GetHashCode();
                }
                if (this.ConfidenceScore != null)
                {
                    hashCode = (hashCode * 59) + this.ConfidenceScore.GetHashCode();
                }
                if (this.AffiliationId != null)
                {
                    hashCode = (hashCode * 59) + this.AffiliationId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
