/*
 * Events and Transcripts API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsandTranscripts.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsandTranscripts.Model
{
    /// <summary>
    /// Search criteria for transcripts based on date range and timeZone.
    /// </summary>
    [DataContract(Name = "TranscriptsByDateRequest")]
    public partial class TranscriptsByDateRequest : IEquatable<TranscriptsByDateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsByDateRequest" /> class.
        /// </summary>
        /// <param name="startDate">Start Date (YYYY-MM-DD). Data available from April 21st, 1999 onwards. *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used.* .</param>
        /// <param name="endDate">End Date (YYYY-MM-DD). *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used.* .</param>
        /// <param name="startDateRelative">Start date relative to today (0&#x3D;today, -1&#x3D;yesterday). *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used.* .</param>
        /// <param name="endDateRelative">End date relative to today (0&#x3D;today, -1&#x3D;yesterday). *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used.* .</param>
        /// <param name="timeZone">Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the &#x60;/meta/time-zones&#x60; endpoint to get the list of available time zones. (default to &quot;America/New_York&quot;).</param>
        public TranscriptsByDateRequest(DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), int startDateRelative = default(int), int endDateRelative = default(int), string timeZone = "America/New_York")
        {
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.StartDateRelative = startDateRelative;
            this.EndDateRelative = endDateRelative;
            // use default value if no "timeZone" provided
            this.TimeZone = timeZone ?? "America/New_York";
        }

        /// <summary>
        /// Start Date (YYYY-MM-DD). Data available from April 21st, 1999 onwards. *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used.* 
        /// </summary>
        /// <value>Start Date (YYYY-MM-DD). Data available from April 21st, 1999 onwards. *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used.* </value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// End Date (YYYY-MM-DD). *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used.* 
        /// </summary>
        /// <value>End Date (YYYY-MM-DD). *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used.* </value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Start date relative to today (0&#x3D;today, -1&#x3D;yesterday). *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used.* 
        /// </summary>
        /// <value>Start date relative to today (0&#x3D;today, -1&#x3D;yesterday). *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used.* </value>
        [DataMember(Name = "startDateRelative", EmitDefaultValue = false)]
        public int StartDateRelative { get; set; }

        /// <summary>
        /// End date relative to today (0&#x3D;today, -1&#x3D;yesterday). *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used.* 
        /// </summary>
        /// <value>End date relative to today (0&#x3D;today, -1&#x3D;yesterday). *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used.* </value>
        [DataMember(Name = "endDateRelative", EmitDefaultValue = false)]
        public int EndDateRelative { get; set; }

        /// <summary>
        /// Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the &#x60;/meta/time-zones&#x60; endpoint to get the list of available time zones.
        /// </summary>
        /// <value>Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the &#x60;/meta/time-zones&#x60; endpoint to get the list of available time zones.</value>
        [DataMember(Name = "timeZone", EmitDefaultValue = false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranscriptsByDateRequest {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StartDateRelative: ").Append(StartDateRelative).Append("\n");
            sb.Append("  EndDateRelative: ").Append(EndDateRelative).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranscriptsByDateRequest);
        }

        /// <summary>
        /// Returns true if TranscriptsByDateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TranscriptsByDateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscriptsByDateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.StartDateRelative == input.StartDateRelative ||
                    this.StartDateRelative.Equals(input.StartDateRelative)
                ) && 
                (
                    this.EndDateRelative == input.EndDateRelative ||
                    this.EndDateRelative.Equals(input.EndDateRelative)
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartDateRelative.GetHashCode();
                hashCode = (hashCode * 59) + this.EndDateRelative.GetHashCode();
                if (this.TimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZone.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StartDateRelative (int) maximum
            if (this.StartDateRelative > (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDateRelative, must be a value less than or equal to 0.", new [] { "StartDateRelative" });
            }

            // EndDateRelative (int) maximum
            if (this.EndDateRelative > (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDateRelative, must be a value less than or equal to 0.", new [] { "EndDateRelative" });
            }

            yield break;
        }
    }

}
