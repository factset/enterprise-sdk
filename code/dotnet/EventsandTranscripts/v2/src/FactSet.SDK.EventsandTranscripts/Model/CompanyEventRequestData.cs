/*
 * Events and Transcripts API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsandTranscripts.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsandTranscripts.Model
{
    /// <summary>
    /// CompanyEventRequestData
    /// </summary>
    [DataContract(Name = "CompanyEventRequest_data")]
    public partial class CompanyEventRequestData : IEquatable<CompanyEventRequestData>, IValidatableObject
    {
        /// <summary>
        /// Defines EventTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypesEnum
        {
            /// <summary>
            /// Enum Earnings for value: Earnings
            /// </summary>
            [EnumMember(Value = "Earnings")]
            Earnings = 1,

            /// <summary>
            /// Enum SalesRevenueCall for value: SalesRevenueCall
            /// </summary>
            [EnumMember(Value = "SalesRevenueCall")]
            SalesRevenueCall = 2,

            /// <summary>
            /// Enum GuidanceCall for value: GuidanceCall
            /// </summary>
            [EnumMember(Value = "GuidanceCall")]
            GuidanceCall = 3,

            /// <summary>
            /// Enum AnalystsInvestorsMeeting for value: AnalystsInvestorsMeeting
            /// </summary>
            [EnumMember(Value = "AnalystsInvestorsMeeting")]
            AnalystsInvestorsMeeting = 4,

            /// <summary>
            /// Enum ShareholdersMeeting for value: ShareholdersMeeting
            /// </summary>
            [EnumMember(Value = "ShareholdersMeeting")]
            ShareholdersMeeting = 5,

            /// <summary>
            /// Enum SpecialSituation for value: SpecialSituation
            /// </summary>
            [EnumMember(Value = "SpecialSituation")]
            SpecialSituation = 6,

            /// <summary>
            /// Enum Conference for value: Conference
            /// </summary>
            [EnumMember(Value = "Conference")]
            Conference = 7,

            /// <summary>
            /// Enum ConfirmedEarningsRelease for value: ConfirmedEarningsRelease
            /// </summary>
            [EnumMember(Value = "ConfirmedEarningsRelease")]
            ConfirmedEarningsRelease = 8,

            /// <summary>
            /// Enum ProjectedEarningsRelease for value: ProjectedEarningsRelease
            /// </summary>
            [EnumMember(Value = "ProjectedEarningsRelease")]
            ProjectedEarningsRelease = 9,

            /// <summary>
            /// Enum SalesRevenueRelease for value: SalesRevenueRelease
            /// </summary>
            [EnumMember(Value = "SalesRevenueRelease")]
            SalesRevenueRelease = 10,

            /// <summary>
            /// Enum Split for value: Split
            /// </summary>
            [EnumMember(Value = "Split")]
            Split = 11,

            /// <summary>
            /// Enum Dividend for value: Dividend
            /// </summary>
            [EnumMember(Value = "Dividend")]
            Dividend = 12

        }



        /// <summary>
        /// Refers to the various event types returned in the response:  * Earnings: Regular quarterly calls where companies provide insights into their latest earnings, sharing details on their financial performance, including revenue, profits, and earnings per share.  * SalesRevenueCall: Conference calls focused on discussing comprehensive sales activity and revenue figures, typically held monthly or quarterly.  * GuidanceCall: Calls where companies offer estimated financial information about future earnings or outline business outlooks before official earnings are released.  * AnalystsInvestorsMeeting: A company-hosted gathering for analysts and investors to discuss strategic updates and financial health.  * ShareholdersMeeting: A meeting where shareholders convene to discuss corporate developments and vote on important matters.  * SpecialSituation: Conference calls addressing situations that do not fit into standard categories, often concerning mergers, acquisitions, joint ventures, or significant business updates.  * Conference: An event where individuals gather to discuss and share ideas on common interests, often including various formats such as panel discussions, workshops, and keynote presentations.  * ConfirmedEarningsRelease: Officially announced date when a company will publish its actual earnings results.  * ProjectedEarningsRelease:  Scheduled release date of a company’s estimated or forecasted earnings before actual results.  * SalesRevenueRelease: Disclosure of a company’s revenue figures, usually as part of earnings or performance updates.  * Split: Corporate action that multiplies share count and reduces share price proportionally, without affecting market cap.  * Dividend: Cash or stock distribution paid to shareholders, reflecting a share of company profits.
        /// </summary>
        /// <value>Refers to the various event types returned in the response:  * Earnings: Regular quarterly calls where companies provide insights into their latest earnings, sharing details on their financial performance, including revenue, profits, and earnings per share.  * SalesRevenueCall: Conference calls focused on discussing comprehensive sales activity and revenue figures, typically held monthly or quarterly.  * GuidanceCall: Calls where companies offer estimated financial information about future earnings or outline business outlooks before official earnings are released.  * AnalystsInvestorsMeeting: A company-hosted gathering for analysts and investors to discuss strategic updates and financial health.  * ShareholdersMeeting: A meeting where shareholders convene to discuss corporate developments and vote on important matters.  * SpecialSituation: Conference calls addressing situations that do not fit into standard categories, often concerning mergers, acquisitions, joint ventures, or significant business updates.  * Conference: An event where individuals gather to discuss and share ideas on common interests, often including various formats such as panel discussions, workshops, and keynote presentations.  * ConfirmedEarningsRelease: Officially announced date when a company will publish its actual earnings results.  * ProjectedEarningsRelease:  Scheduled release date of a company’s estimated or forecasted earnings before actual results.  * SalesRevenueRelease: Disclosure of a company’s revenue figures, usually as part of earnings or performance updates.  * Split: Corporate action that multiplies share count and reduces share price proportionally, without affecting market cap.  * Dividend: Cash or stock distribution paid to shareholders, reflecting a share of company profits.</value>
        [DataMember(Name = "eventTypes", EmitDefaultValue = false)]
        public List<EventTypesEnum> EventTypes { get; set; }
        /// <summary>
        /// The duration within which the events were last modified.  **Note 1:** When using &#x60;lastModifiedWithin&#x60;, the endpoint will return events that have been modified within the specified interval in the recent past as well as those anticipated in the near future—within a span of 45 days.  **Note 2:** If both &#x60;dateTime&#x60; and &#x60;lastModifiedWithin&#x60; are provided in the same request, the API will return an error. 
        /// </summary>
        /// <value>The duration within which the events were last modified.  **Note 1:** When using &#x60;lastModifiedWithin&#x60;, the endpoint will return events that have been modified within the specified interval in the recent past as well as those anticipated in the near future—within a span of 45 days.  **Note 2:** If both &#x60;dateTime&#x60; and &#x60;lastModifiedWithin&#x60; are provided in the same request, the API will return an error. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LastModifiedWithinEnum
        {
            /// <summary>
            /// Enum SixHours for value: SixHours
            /// </summary>
            [EnumMember(Value = "SixHours")]
            SixHours = 1,

            /// <summary>
            /// Enum TwelveHours for value: TwelveHours
            /// </summary>
            [EnumMember(Value = "TwelveHours")]
            TwelveHours = 2,

            /// <summary>
            /// Enum Today for value: Today
            /// </summary>
            [EnumMember(Value = "Today")]
            Today = 3,

            /// <summary>
            /// Enum TwoDays for value: TwoDays
            /// </summary>
            [EnumMember(Value = "TwoDays")]
            TwoDays = 4,

            /// <summary>
            /// Enum OneWeek for value: OneWeek
            /// </summary>
            [EnumMember(Value = "OneWeek")]
            OneWeek = 5,

            /// <summary>
            /// Enum OneMonth for value: OneMonth
            /// </summary>
            [EnumMember(Value = "OneMonth")]
            OneMonth = 6

        }


        /// <summary>
        /// The duration within which the events were last modified.  **Note 1:** When using &#x60;lastModifiedWithin&#x60;, the endpoint will return events that have been modified within the specified interval in the recent past as well as those anticipated in the near future—within a span of 45 days.  **Note 2:** If both &#x60;dateTime&#x60; and &#x60;lastModifiedWithin&#x60; are provided in the same request, the API will return an error. 
        /// </summary>
        /// <value>The duration within which the events were last modified.  **Note 1:** When using &#x60;lastModifiedWithin&#x60;, the endpoint will return events that have been modified within the specified interval in the recent past as well as those anticipated in the near future—within a span of 45 days.  **Note 2:** If both &#x60;dateTime&#x60; and &#x60;lastModifiedWithin&#x60; are provided in the same request, the API will return an error. </value>
        [DataMember(Name = "lastModifiedWithin", EmitDefaultValue = false)]
        public LastModifiedWithinEnum? LastModifiedWithin { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyEventRequestData" /> class.
        /// </summary>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="universe">universe.</param>
        /// <param name="eventTypes">Refers to the various event types returned in the response:  * Earnings: Regular quarterly calls where companies provide insights into their latest earnings, sharing details on their financial performance, including revenue, profits, and earnings per share.  * SalesRevenueCall: Conference calls focused on discussing comprehensive sales activity and revenue figures, typically held monthly or quarterly.  * GuidanceCall: Calls where companies offer estimated financial information about future earnings or outline business outlooks before official earnings are released.  * AnalystsInvestorsMeeting: A company-hosted gathering for analysts and investors to discuss strategic updates and financial health.  * ShareholdersMeeting: A meeting where shareholders convene to discuss corporate developments and vote on important matters.  * SpecialSituation: Conference calls addressing situations that do not fit into standard categories, often concerning mergers, acquisitions, joint ventures, or significant business updates.  * Conference: An event where individuals gather to discuss and share ideas on common interests, often including various formats such as panel discussions, workshops, and keynote presentations.  * ConfirmedEarningsRelease: Officially announced date when a company will publish its actual earnings results.  * ProjectedEarningsRelease:  Scheduled release date of a company’s estimated or forecasted earnings before actual results.  * SalesRevenueRelease: Disclosure of a company’s revenue figures, usually as part of earnings or performance updates.  * Split: Corporate action that multiplies share count and reduces share price proportionally, without affecting market cap.  * Dividend: Cash or stock distribution paid to shareholders, reflecting a share of company profits..</param>
        /// <param name="lastModifiedWithin">The duration within which the events were last modified.  **Note 1:** When using &#x60;lastModifiedWithin&#x60;, the endpoint will return events that have been modified within the specified interval in the recent past as well as those anticipated in the near future—within a span of 45 days.  **Note 2:** If both &#x60;dateTime&#x60; and &#x60;lastModifiedWithin&#x60; are provided in the same request, the API will return an error. .</param>
        public CompanyEventRequestData(CompanyEventRequestDataDateTime dateTime = default(CompanyEventRequestDataDateTime), CompanyEventRequestDataUniverse universe = default(CompanyEventRequestDataUniverse), List<EventTypesEnum> eventTypes = default(List<EventTypesEnum>), LastModifiedWithinEnum? lastModifiedWithin = default(LastModifiedWithinEnum?))
        {
            this.DateTime = dateTime;
            this.Universe = universe;
            this.EventTypes = eventTypes;
            this.LastModifiedWithin = lastModifiedWithin;
        }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public CompanyEventRequestDataDateTime DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Universe
        /// </summary>
        [DataMember(Name = "universe", EmitDefaultValue = false)]
        public CompanyEventRequestDataUniverse Universe { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyEventRequestData {\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Universe: ").Append(Universe).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  LastModifiedWithin: ").Append(LastModifiedWithin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyEventRequestData);
        }

        /// <summary>
        /// Returns true if CompanyEventRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyEventRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyEventRequestData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Universe == input.Universe ||
                    (this.Universe != null &&
                    this.Universe.Equals(input.Universe))
                ) && 
                (
                    this.EventTypes == input.EventTypes ||
                    this.EventTypes.SequenceEqual(input.EventTypes)
                ) && 
                (
                    this.LastModifiedWithin == input.LastModifiedWithin ||
                    this.LastModifiedWithin.Equals(input.LastModifiedWithin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.Universe != null)
                {
                    hashCode = (hashCode * 59) + this.Universe.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EventTypes.GetHashCode();
                hashCode = (hashCode * 59) + this.LastModifiedWithin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
