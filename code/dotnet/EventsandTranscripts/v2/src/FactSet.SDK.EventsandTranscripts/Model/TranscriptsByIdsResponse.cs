/*
 * Events and Transcripts API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsandTranscripts.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsandTranscripts.Model
{
    /// <summary>
    /// The data being returned in the search response are search results, and under each search result, the documents are organized by requested identifiers. 
    /// </summary>
    [DataContract(Name = "TranscriptsByIdsResponse")]
    public partial class TranscriptsByIdsResponse : IEquatable<TranscriptsByIdsResponse>, IValidatableObject
    {
        /// <summary>
        /// The data being returned in the search response based on the requested IDs.
        /// </summary>
        /// <value>The data being returned in the search response based on the requested IDs.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TranscriptResponseTypeEnum
        {
            /// <summary>
            /// Enum TranscriptById for value: transcriptById
            /// </summary>
            [EnumMember(Value = "transcriptById")]
            TranscriptById = 1

        }


        /// <summary>
        /// The data being returned in the search response based on the requested IDs.
        /// </summary>
        /// <value>The data being returned in the search response based on the requested IDs.</value>
        [DataMember(Name = "transcriptResponseType", EmitDefaultValue = false)]
        public TranscriptResponseTypeEnum? TranscriptResponseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsByIdsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TranscriptsByIdsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsByIdsResponse" /> class.
        /// </summary>
        /// <param name="transcriptResponseType">The data being returned in the search response based on the requested IDs..</param>
        /// <param name="requestId">The requested identifier associated with this group of documents. (required).</param>
        /// <param name="documents">Contains list of documents.</param>
        /// <param name="error">error.</param>
        public TranscriptsByIdsResponse(string requestId,TranscriptResponseTypeEnum? transcriptResponseType = default(TranscriptResponseTypeEnum?), List<DocumentResult> documents = default(List<DocumentResult>), InvalidIdErrorData error = default(InvalidIdErrorData))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null) {
                throw new ArgumentNullException("requestId is a required property for TranscriptsByIdsResponse and cannot be null");
            }
            this.RequestId = requestId;
            this.TranscriptResponseType = transcriptResponseType;
            this.Documents = documents;
            this.Error = error;
        }

        /// <summary>
        /// The requested identifier associated with this group of documents.
        /// </summary>
        /// <value>The requested identifier associated with this group of documents.</value>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Contains list of documents
        /// </summary>
        /// <value>Contains list of documents</value>
        [DataMember(Name = "documents", EmitDefaultValue = false)]
        public List<DocumentResult> Documents { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public InvalidIdErrorData Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranscriptsByIdsResponse {\n");
            sb.Append("  TranscriptResponseType: ").Append(TranscriptResponseType).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranscriptsByIdsResponse);
        }

        /// <summary>
        /// Returns true if TranscriptsByIdsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TranscriptsByIdsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscriptsByIdsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TranscriptResponseType == input.TranscriptResponseType ||
                    this.TranscriptResponseType.Equals(input.TranscriptResponseType)
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TranscriptResponseType.GetHashCode();
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.Documents != null)
                {
                    hashCode = (hashCode * 59) + this.Documents.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
