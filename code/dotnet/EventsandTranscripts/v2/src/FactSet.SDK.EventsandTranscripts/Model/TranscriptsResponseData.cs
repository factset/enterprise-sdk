/*
 * Events and Transcripts API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsandTranscripts.Client.OpenAPIDateConverter;
using System.Reflection;

namespace FactSet.SDK.EventsandTranscripts.Model
{
    /// <summary>
    /// TranscriptsResponseData
    /// </summary>
    [JsonConverter(typeof(TranscriptsResponseDataJsonConverter))]
    [DataContract(Name = "TranscriptsResponseData")]
    public partial class TranscriptsResponseData : AbstractOpenAPISchema, IEquatable<TranscriptsResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsResponseData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TranscriptsByIdsResponse.</param>
        public TranscriptsResponseData(TranscriptsByIdsResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsResponseData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DocumentResult.</param>
        public TranscriptsResponseData(DocumentResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value is TranscriptsByIdsResponse)
                {
                    this._actualInstance = value;
                }
                else if (value is DocumentResult)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: TranscriptsByIdsResponse, DocumentResult");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `TranscriptsByIdsResponse`. If the actual instance is not `TranscriptsByIdsResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TranscriptsByIdsResponse</returns>
        public TranscriptsByIdsResponse GetTranscriptsByIdsResponse()
        {
            return (TranscriptsByIdsResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DocumentResult`. If the actual instance is not `DocumentResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DocumentResult</returns>
        public DocumentResult GetDocumentResult()
        {
            return (DocumentResult)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranscriptsResponseData {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, TranscriptsResponseData.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of TranscriptsResponseData
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of TranscriptsResponseData</returns>
        public static TranscriptsResponseData FromJson(string jsonString)
        {
            TranscriptsResponseData newTranscriptsResponseData = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newTranscriptsResponseData;
            }

            try
            {
                var discriminatorObj = JObject.Parse(jsonString)["transcriptResponseType"];
                string discriminatorValue =  discriminatorObj == null ?string.Empty :discriminatorObj.ToString();
                switch (discriminatorValue)
                {
                    case "DocumentResult":
                        newTranscriptsResponseData = new TranscriptsResponseData(JsonConvert.DeserializeObject<DocumentResult>(jsonString, TranscriptsResponseData.AdditionalPropertiesSerializerSettings));
                        return newTranscriptsResponseData;
                    case "TranscriptsByIdsResponse":
                        newTranscriptsResponseData = new TranscriptsResponseData(JsonConvert.DeserializeObject<TranscriptsByIdsResponse>(jsonString, TranscriptsResponseData.AdditionalPropertiesSerializerSettings));
                        return newTranscriptsResponseData;
                    case "documentResult":
                        newTranscriptsResponseData = new TranscriptsResponseData(JsonConvert.DeserializeObject<DocumentResult>(jsonString, TranscriptsResponseData.AdditionalPropertiesSerializerSettings));
                        return newTranscriptsResponseData;
                    case "transcriptById":
                        newTranscriptsResponseData = new TranscriptsResponseData(JsonConvert.DeserializeObject<TranscriptsByIdsResponse>(jsonString, TranscriptsResponseData.AdditionalPropertiesSerializerSettings));
                        return newTranscriptsResponseData;
                    default:
                        System.Diagnostics.Debug.WriteLine(string.Format("Failed to lookup discriminator value `{0}` for TranscriptsResponseData. Possible values: DocumentResult TranscriptsByIdsResponse documentResult transcriptById", discriminatorValue));
                        break;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to parse the json data : `{0}` {1}", jsonString, ex.ToString()));
            }

            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                var hasAdditionalProperties = !(typeof(TranscriptsByIdsResponse).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<TranscriptsByIdsResponse>(
                    jsonString,
                    hasAdditionalProperties ? TranscriptsResponseData.AdditionalPropertiesSerializerSettings : TranscriptsResponseData.SerializerSettings
                );
                newTranscriptsResponseData = new TranscriptsResponseData(parsedValue);
                matchedTypes.Add("TranscriptsByIdsResponse");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TranscriptsByIdsResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(DocumentResult).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<DocumentResult>(
                    jsonString,
                    hasAdditionalProperties ? TranscriptsResponseData.AdditionalPropertiesSerializerSettings : TranscriptsResponseData.SerializerSettings
                );
                newTranscriptsResponseData = new TranscriptsResponseData(parsedValue);
                matchedTypes.Add("DocumentResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DocumentResult: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newTranscriptsResponseData;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranscriptsResponseData);
        }

        /// <summary>
        /// Returns true if TranscriptsResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of TranscriptsResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscriptsResponseData input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for TranscriptsResponseData
    /// </summary>
    public class TranscriptsResponseDataJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(TranscriptsResponseData).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return TranscriptsResponseData.FromJson(JToken.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
