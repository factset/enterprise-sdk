/*
 * Events and Transcripts API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsandTranscripts.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsandTranscripts.Model
{
    /// <summary>
    /// EventsAudioHistoryResponseData
    /// </summary>
    [DataContract(Name = "EventsAudioHistoryResponseData")]
    public partial class EventsAudioHistoryResponseData : IEquatable<EventsAudioHistoryResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventsAudioHistoryResponseData" /> class.
        /// </summary>
        /// <param name="year">The year corresponding to the file containing historical audio recordings that can be downloaded via presigned URL..</param>
        /// <param name="trimmed">true - it signifies that the pre-signed URL for downloading includes trimmed historical audio recordings along with their metadata for a specific year.  false -  it signifies that the pre-signed URL for downloading contains the untrimmed historical audio recordings along with their relevant metadata for a specific year..</param>
        /// <param name="fileName">The name of the archive file..</param>
        /// <param name="fileSize">The size of the archive file, in bytes..</param>
        /// <param name="fileCount">The number of files included in the archive..</param>
        /// <param name="url">A pre-signed URL for downloading historical audio recordings and related metadata of a specific year. The URL provided in the response will expire after 3 hours..</param>
        public EventsAudioHistoryResponseData(int year = default(int), bool trimmed = default(bool), string fileName = default(string), long fileSize = default(long), long fileCount = default(long), string url = default(string))
        {
            this.Year = year;
            this.Trimmed = trimmed;
            this.FileName = fileName;
            this.FileSize = fileSize;
            this.FileCount = fileCount;
            this.Url = url;
        }

        /// <summary>
        /// The year corresponding to the file containing historical audio recordings that can be downloaded via presigned URL.
        /// </summary>
        /// <value>The year corresponding to the file containing historical audio recordings that can be downloaded via presigned URL.</value>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// true - it signifies that the pre-signed URL for downloading includes trimmed historical audio recordings along with their metadata for a specific year.  false -  it signifies that the pre-signed URL for downloading contains the untrimmed historical audio recordings along with their relevant metadata for a specific year.
        /// </summary>
        /// <value>true - it signifies that the pre-signed URL for downloading includes trimmed historical audio recordings along with their metadata for a specific year.  false -  it signifies that the pre-signed URL for downloading contains the untrimmed historical audio recordings along with their relevant metadata for a specific year.</value>
        [DataMember(Name = "trimmed", EmitDefaultValue = true)]
        public bool Trimmed { get; set; }

        /// <summary>
        /// The name of the archive file.
        /// </summary>
        /// <value>The name of the archive file.</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// The size of the archive file, in bytes.
        /// </summary>
        /// <value>The size of the archive file, in bytes.</value>
        [DataMember(Name = "fileSize", EmitDefaultValue = false)]
        public long FileSize { get; set; }

        /// <summary>
        /// The number of files included in the archive.
        /// </summary>
        /// <value>The number of files included in the archive.</value>
        [DataMember(Name = "fileCount", EmitDefaultValue = false)]
        public long FileCount { get; set; }

        /// <summary>
        /// A pre-signed URL for downloading historical audio recordings and related metadata of a specific year. The URL provided in the response will expire after 3 hours.
        /// </summary>
        /// <value>A pre-signed URL for downloading historical audio recordings and related metadata of a specific year. The URL provided in the response will expire after 3 hours.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventsAudioHistoryResponseData {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Trimmed: ").Append(Trimmed).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileCount: ").Append(FileCount).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventsAudioHistoryResponseData);
        }

        /// <summary>
        /// Returns true if EventsAudioHistoryResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of EventsAudioHistoryResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventsAudioHistoryResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Trimmed == input.Trimmed ||
                    this.Trimmed.Equals(input.Trimmed)
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    this.FileSize.Equals(input.FileSize)
                ) && 
                (
                    this.FileCount == input.FileCount ||
                    this.FileCount.Equals(input.FileCount)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Year.GetHashCode();
                hashCode = (hashCode * 59) + this.Trimmed.GetHashCode();
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileSize.GetHashCode();
                hashCode = (hashCode * 59) + this.FileCount.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
