/*
 * Events and Transcripts API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsandTranscripts.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsandTranscripts.Model
{
    /// <summary>
    /// NrtCallsRequestData
    /// </summary>
    [JsonConverter(typeof(NrtCallsRequestDataJsonConverter))]
    [DataContract(Name = "NrtCallsRequestData")]
    public partial class NrtCallsRequestData : AbstractOpenAPISchema, IEquatable<NrtCallsRequestData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NrtCallsRequestData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of NrtCallsRequestByTicker.</param>
        public NrtCallsRequestData(NrtCallsRequestByTicker actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NrtCallsRequestData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of NrtCallsRequestByIds.</param>
        public NrtCallsRequestData(NrtCallsRequestByIds actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value is NrtCallsRequestByTicker)
                {
                    this._actualInstance = value;
                }
                else if (value is NrtCallsRequestByIds)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: NrtCallsRequestByTicker, NrtCallsRequestByIds");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `NrtCallsRequestByTicker`. If the actual instance is not `NrtCallsRequestByTicker`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of NrtCallsRequestByTicker</returns>
        public NrtCallsRequestByTicker GetNrtCallsRequestByTicker()
        {
            return (NrtCallsRequestByTicker)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `NrtCallsRequestByIds`. If the actual instance is not `NrtCallsRequestByIds`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of NrtCallsRequestByIds</returns>
        public NrtCallsRequestByIds GetNrtCallsRequestByIds()
        {
            return (NrtCallsRequestByIds)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NrtCallsRequestData {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, NrtCallsRequestData.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of NrtCallsRequestData
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of NrtCallsRequestData</returns>
        public static NrtCallsRequestData FromJson(string jsonString)
        {
            NrtCallsRequestData newNrtCallsRequestData = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newNrtCallsRequestData;
            }

            try
            {
                var hasAdditionalProperties = !(typeof(NrtCallsRequestByTicker).GetProperty("AdditionalProperties") is null);
                newNrtCallsRequestData = new NrtCallsRequestData(JsonConvert.DeserializeObject<NrtCallsRequestByTicker>(
                    jsonString,
                    hasAdditionalProperties ? NrtCallsRequestData.AdditionalPropertiesSerializerSettings : NrtCallsRequestData.SerializerSettings
                ));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newNrtCallsRequestData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into NrtCallsRequestByTicker: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(NrtCallsRequestByIds).GetProperty("AdditionalProperties") is null);
                newNrtCallsRequestData = new NrtCallsRequestData(JsonConvert.DeserializeObject<NrtCallsRequestByIds>(
                    jsonString,
                    hasAdditionalProperties ? NrtCallsRequestData.AdditionalPropertiesSerializerSettings : NrtCallsRequestData.SerializerSettings
                ));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newNrtCallsRequestData;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into NrtCallsRequestByIds: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NrtCallsRequestData);
        }

        /// <summary>
        /// Returns true if NrtCallsRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of NrtCallsRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NrtCallsRequestData input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for NrtCallsRequestData
    /// </summary>
    public class NrtCallsRequestDataJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(NrtCallsRequestData).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return NrtCallsRequestData.FromJson(JToken.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
