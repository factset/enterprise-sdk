/*
 * Events and Transcripts API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsandTranscripts.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsandTranscripts.Model
{
    /// <summary>
    /// Search criteria for audio files based on date range.
    /// </summary>
    [DataContract(Name = "AudioByDateRequest")]
    public partial class AudioByDateRequest : IEquatable<AudioByDateRequest>, IValidatableObject
    {
        /// <summary>
        /// Source of the Audio file: * Phone &#x3D; Originated from phone call * Webcast &#x3D; Originated from a webcast * Vendor &#x3D; Received from vendor * WebcastReplay &#x3D; Replay of a webcast * Flash &#x3D; Identical to webcast; can merge with \&quot;Webcast\&quot; in the future * Replay &#x3D; Phone replay          
        /// </summary>
        /// <value>Source of the Audio file: * Phone &#x3D; Originated from phone call * Webcast &#x3D; Originated from a webcast * Vendor &#x3D; Received from vendor * WebcastReplay &#x3D; Replay of a webcast * Flash &#x3D; Identical to webcast; can merge with \&quot;Webcast\&quot; in the future * Replay &#x3D; Phone replay          </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AudioSourceEnum
        {
            /// <summary>
            /// Enum Phone for value: Phone
            /// </summary>
            [EnumMember(Value = "Phone")]
            Phone = 1,

            /// <summary>
            /// Enum Webcast for value: Webcast
            /// </summary>
            [EnumMember(Value = "Webcast")]
            Webcast = 2,

            /// <summary>
            /// Enum Vendor for value: Vendor
            /// </summary>
            [EnumMember(Value = "Vendor")]
            Vendor = 3,

            /// <summary>
            /// Enum WebcastReplay for value: WebcastReplay
            /// </summary>
            [EnumMember(Value = "WebcastReplay")]
            WebcastReplay = 4,

            /// <summary>
            /// Enum Flash for value: Flash
            /// </summary>
            [EnumMember(Value = "Flash")]
            Flash = 5,

            /// <summary>
            /// Enum Replay for value: Replay
            /// </summary>
            [EnumMember(Value = "Replay")]
            Replay = 6

        }


        /// <summary>
        /// Source of the Audio file: * Phone &#x3D; Originated from phone call * Webcast &#x3D; Originated from a webcast * Vendor &#x3D; Received from vendor * WebcastReplay &#x3D; Replay of a webcast * Flash &#x3D; Identical to webcast; can merge with \&quot;Webcast\&quot; in the future * Replay &#x3D; Phone replay          
        /// </summary>
        /// <value>Source of the Audio file: * Phone &#x3D; Originated from phone call * Webcast &#x3D; Originated from a webcast * Vendor &#x3D; Received from vendor * WebcastReplay &#x3D; Replay of a webcast * Flash &#x3D; Identical to webcast; can merge with \&quot;Webcast\&quot; in the future * Replay &#x3D; Phone replay          </value>
        [DataMember(Name = "audioSource", EmitDefaultValue = false)]
        public AudioSourceEnum? AudioSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudioByDateRequest" /> class.
        /// </summary>
        /// <param name="startDate">The earliest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - Data available from 10th May 2011 onwards. .</param>
        /// <param name="endDate">The latest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* .</param>
        /// <param name="startDateRelative">The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (&#39;0&#39; for today, &#39;-1&#39; for yesterday, etc.). - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* .</param>
        /// <param name="endDateRelative">The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (&#39;0&#39; for today, &#39;-1&#39; for yesterday, etc.). - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* .</param>
        /// <param name="audioSource">Source of the Audio file: * Phone &#x3D; Originated from phone call * Webcast &#x3D; Originated from a webcast * Vendor &#x3D; Received from vendor * WebcastReplay &#x3D; Replay of a webcast * Flash &#x3D; Identical to webcast; can merge with \&quot;Webcast\&quot; in the future * Replay &#x3D; Phone replay          .</param>
        /// <param name="ids">Filter results based on ticker-region or Entity ID..</param>
        /// <param name="trimmed">Search for trimmed audio files (non-speaking portions removed). (default to false).</param>
        public AudioByDateRequest(DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), int startDateRelative = default(int), int endDateRelative = default(int), AudioSourceEnum? audioSource = default(AudioSourceEnum?), List<string> ids = default(List<string>), bool trimmed = false)
        {
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.StartDateRelative = startDateRelative;
            this.EndDateRelative = endDateRelative;
            this.AudioSource = audioSource;
            this.Ids = ids;
            this.Trimmed = trimmed;
        }

        /// <summary>
        /// The earliest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - Data available from 10th May 2011 onwards. 
        /// </summary>
        /// <value>The earliest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* - Data available from 10th May 2011 onwards. </value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// The latest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* 
        /// </summary>
        /// <value>The latest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* </value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (&#39;0&#39; for today, &#39;-1&#39; for yesterday, etc.). - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* 
        /// </summary>
        /// <value>The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (&#39;0&#39; for today, &#39;-1&#39; for yesterday, etc.). - *Either &#x60;startDate&#x60; or &#x60;startDateRelative&#x60; should be used, but not both.* </value>
        [DataMember(Name = "startDateRelative", EmitDefaultValue = false)]
        public int StartDateRelative { get; set; }

        /// <summary>
        /// The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (&#39;0&#39; for today, &#39;-1&#39; for yesterday, etc.). - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* 
        /// </summary>
        /// <value>The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (&#39;0&#39; for today, &#39;-1&#39; for yesterday, etc.). - *Either &#x60;endDate&#x60; or &#x60;endDateRelative&#x60; should be used, but not both.* </value>
        [DataMember(Name = "endDateRelative", EmitDefaultValue = false)]
        public int EndDateRelative { get; set; }

        /// <summary>
        /// Filter results based on ticker-region or Entity ID.
        /// </summary>
        /// <value>Filter results based on ticker-region or Entity ID.</value>
        [DataMember(Name = "ids", EmitDefaultValue = false)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// Search for trimmed audio files (non-speaking portions removed).
        /// </summary>
        /// <value>Search for trimmed audio files (non-speaking portions removed).</value>
        [DataMember(Name = "trimmed", EmitDefaultValue = true)]
        public bool Trimmed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudioByDateRequest {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StartDateRelative: ").Append(StartDateRelative).Append("\n");
            sb.Append("  EndDateRelative: ").Append(EndDateRelative).Append("\n");
            sb.Append("  AudioSource: ").Append(AudioSource).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Trimmed: ").Append(Trimmed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudioByDateRequest);
        }

        /// <summary>
        /// Returns true if AudioByDateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AudioByDateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudioByDateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.StartDateRelative == input.StartDateRelative ||
                    this.StartDateRelative.Equals(input.StartDateRelative)
                ) && 
                (
                    this.EndDateRelative == input.EndDateRelative ||
                    this.EndDateRelative.Equals(input.EndDateRelative)
                ) && 
                (
                    this.AudioSource == input.AudioSource ||
                    this.AudioSource.Equals(input.AudioSource)
                ) && 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Trimmed == input.Trimmed ||
                    this.Trimmed.Equals(input.Trimmed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartDateRelative.GetHashCode();
                hashCode = (hashCode * 59) + this.EndDateRelative.GetHashCode();
                hashCode = (hashCode * 59) + this.AudioSource.GetHashCode();
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Trimmed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StartDateRelative (int) maximum
            if (this.StartDateRelative > (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDateRelative, must be a value less than or equal to 0.", new [] { "StartDateRelative" });
            }

            // EndDateRelative (int) maximum
            if (this.EndDateRelative > (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDateRelative, must be a value less than or equal to 0.", new [] { "EndDateRelative" });
            }

            yield break;
        }
    }

}
