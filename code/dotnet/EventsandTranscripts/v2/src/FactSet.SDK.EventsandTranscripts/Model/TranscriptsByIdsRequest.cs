/*
 * Events and Transcripts API
 *
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsandTranscripts.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsandTranscripts.Model
{
    /// <summary>
    /// Search criteria for transcripts based on various IDs and categories.
    /// </summary>
    [DataContract(Name = "TranscriptsByIdsRequest")]
    public partial class TranscriptsByIdsRequest : IEquatable<TranscriptsByIdsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsByIdsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TranscriptsByIdsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptsByIdsRequest" /> class.
        /// </summary>
        /// <param name="primaryId">If true, search only for documents where the provided &#x60;ids&#x60; are the primary identifiers. If false, search for any mention.  **Note:** Transcripts only have a primary ID, so the results remain the same regardless of whether primaryId&#x3D;true or primaryId&#x3D;false is specified in the request.  (default to false).</param>
        /// <param name="ids">Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID (required).</param>
        /// <param name="reportIds">List of report IDs (max 1000)..</param>
        /// <param name="categories">List of category codes (country, industry, subject). Use &#x60;/meta/categories&#x60; endpoint. Default is all..</param>
        /// <param name="startDate">Start Date (YYYY-MM-DD). .</param>
        /// <param name="endDate">End Date (YYYY-MM-DD). .</param>
        /// <param name="searchText">Text to search for within the transcript document stories..</param>
        public TranscriptsByIdsRequest(List<string> ids,bool primaryId = false, List<string> reportIds = default(List<string>), List<string> categories = default(List<string>), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), string searchText = default(string))
        {
            // to ensure "ids" is required (not null)
            if (ids == null) {
                throw new ArgumentNullException("ids is a required property for TranscriptsByIdsRequest and cannot be null");
            }
            this.Ids = ids;
            this.PrimaryId = primaryId;
            this.ReportIds = reportIds;
            this.Categories = categories;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.SearchText = searchText;
        }

        /// <summary>
        /// If true, search only for documents where the provided &#x60;ids&#x60; are the primary identifiers. If false, search for any mention.  **Note:** Transcripts only have a primary ID, so the results remain the same regardless of whether primaryId&#x3D;true or primaryId&#x3D;false is specified in the request. 
        /// </summary>
        /// <value>If true, search only for documents where the provided &#x60;ids&#x60; are the primary identifiers. If false, search for any mention.  **Note:** Transcripts only have a primary ID, so the results remain the same regardless of whether primaryId&#x3D;true or primaryId&#x3D;false is specified in the request. </value>
        [DataMember(Name = "primaryId", EmitDefaultValue = true)]
        public bool PrimaryId { get; set; }

        /// <summary>
        /// Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
        /// </summary>
        /// <value>Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID</value>
        [DataMember(Name = "ids", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// List of report IDs (max 1000).
        /// </summary>
        /// <value>List of report IDs (max 1000).</value>
        [DataMember(Name = "reportIds", EmitDefaultValue = false)]
        public List<string> ReportIds { get; set; }

        /// <summary>
        /// List of category codes (country, industry, subject). Use &#x60;/meta/categories&#x60; endpoint. Default is all.
        /// </summary>
        /// <value>List of category codes (country, industry, subject). Use &#x60;/meta/categories&#x60; endpoint. Default is all.</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Start Date (YYYY-MM-DD). 
        /// </summary>
        /// <value>Start Date (YYYY-MM-DD). </value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// End Date (YYYY-MM-DD). 
        /// </summary>
        /// <value>End Date (YYYY-MM-DD). </value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Text to search for within the transcript document stories.
        /// </summary>
        /// <value>Text to search for within the transcript document stories.</value>
        [DataMember(Name = "searchText", EmitDefaultValue = false)]
        public string SearchText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranscriptsByIdsRequest {\n");
            sb.Append("  PrimaryId: ").Append(PrimaryId).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  ReportIds: ").Append(ReportIds).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  SearchText: ").Append(SearchText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranscriptsByIdsRequest);
        }

        /// <summary>
        /// Returns true if TranscriptsByIdsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TranscriptsByIdsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscriptsByIdsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PrimaryId == input.PrimaryId ||
                    this.PrimaryId.Equals(input.PrimaryId)
                ) && 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.ReportIds == input.ReportIds ||
                    this.ReportIds != null &&
                    input.ReportIds != null &&
                    this.ReportIds.SequenceEqual(input.ReportIds)
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.SearchText == input.SearchText ||
                    (this.SearchText != null &&
                    this.SearchText.Equals(input.SearchText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PrimaryId.GetHashCode();
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                if (this.ReportIds != null)
                {
                    hashCode = (hashCode * 59) + this.ReportIds.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.SearchText != null)
                {
                    hashCode = (hashCode * 59) + this.SearchText.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
