/*
 * News API
 *
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNews.Model
{
    /// <summary>
    /// HeadlinesRequestMeta
    /// </summary>
    [DataContract(Name = "HeadlinesRequest_meta")]
    public partial class HeadlinesRequestMeta : IEquatable<HeadlinesRequestMeta>, IValidatableObject
    {
        /// <summary>
        /// Defines Attributes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttributesEnum
        {
            /// <summary>
            /// Enum StoryDateAndTime for value: storyDateAndTime
            /// </summary>
            [EnumMember(Value = "storyDateAndTime")]
            StoryDateAndTime = 1,

            /// <summary>
            /// Enum Headlines for value: headlines
            /// </summary>
            [EnumMember(Value = "headlines")]
            Headlines = 2,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            [EnumMember(Value = "id")]
            Id = 3,

            /// <summary>
            /// Enum Url for value: url
            /// </summary>
            [EnumMember(Value = "url")]
            Url = 4,

            /// <summary>
            /// Enum Source for value: source
            /// </summary>
            [EnumMember(Value = "source")]
            Source = 5,

            /// <summary>
            /// Enum Product for value: product
            /// </summary>
            [EnumMember(Value = "product")]
            Product = 6,

            /// <summary>
            /// Enum PrimarySymbols for value: primarySymbols
            /// </summary>
            [EnumMember(Value = "primarySymbols")]
            PrimarySymbols = 7,

            /// <summary>
            /// Enum Symbols for value: symbols
            /// </summary>
            [EnumMember(Value = "symbols")]
            Symbols = 8,

            /// <summary>
            /// Enum Subjects for value: subjects
            /// </summary>
            [EnumMember(Value = "subjects")]
            Subjects = 9,

            /// <summary>
            /// Enum FdsSubject for value: fdsSubject
            /// </summary>
            [EnumMember(Value = "fdsSubject")]
            FdsSubject = 10

        }



        /// <summary>
        /// A specific set of attributes to return in the response. If empty or not specified, the response does not omit attributes.
        /// </summary>
        /// <value>A specific set of attributes to return in the response. If empty or not specified, the response does not omit attributes.</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public List<AttributesEnum> Attributes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HeadlinesRequestMeta" /> class.
        /// </summary>
        /// <param name="pagination">pagination.</param>
        /// <param name="attributes">A specific set of attributes to return in the response. If empty or not specified, the response does not omit attributes..</param>
        public HeadlinesRequestMeta(HeadlinesRequestByViewMetaPagination pagination = default(HeadlinesRequestByViewMetaPagination), List<AttributesEnum> attributes = default(List<AttributesEnum>))
        {
            this.Pagination = pagination;
            this.Attributes = attributes;
        }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name = "pagination", EmitDefaultValue = false)]
        public HeadlinesRequestByViewMetaPagination Pagination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HeadlinesRequestMeta {\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HeadlinesRequestMeta);
        }

        /// <summary>
        /// Returns true if HeadlinesRequestMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of HeadlinesRequestMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HeadlinesRequestMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes.SequenceEqual(input.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pagination != null)
                {
                    hashCode = (hashCode * 59) + this.Pagination.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
