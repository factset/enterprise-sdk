/*
 * News API
 *
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNews.Model
{
    /// <summary>
    /// StructuredFiltersCategoriesObject
    /// </summary>
    [DataContract(Name = "StructuredFiltersCategoriesObject")]
    public partial class StructuredFiltersCategoriesObject : IEquatable<StructuredFiltersCategoriesObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredFiltersCategoriesObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StructuredFiltersCategoriesObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredFiltersCategoriesObject" /> class.
        /// </summary>
        /// <param name="name">The name of the category. (required).</param>
        /// <param name="toplevel">Indicates if its a toplevel value or not..</param>
        /// <param name="value">value.</param>
        /// <param name="field">The field associated with the category..</param>
        /// <param name="_operator">The operator associated with the category..</param>
        /// <param name="source">source.</param>
        /// <param name="sourceDisplayNames">sourceDisplayNames.</param>
        /// <param name="type">The type associated with the category..</param>
        /// <param name="children">An array of children objects..</param>
        public StructuredFiltersCategoriesObject(string name,bool toplevel = default(bool), List<string> value = default(List<string>), string field = default(string), string _operator = default(string), List<string> source = default(List<string>), List<string> sourceDisplayNames = default(List<string>), string type = default(string), List<StructuredFiltersChildrenObject> children = default(List<StructuredFiltersChildrenObject>))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for StructuredFiltersCategoriesObject and cannot be null");
            }
            this.Name = name;
            this.Toplevel = toplevel;
            this.Value = value;
            this.Field = field;
            this.Operator = _operator;
            this.Source = source;
            this.SourceDisplayNames = sourceDisplayNames;
            this.Type = type;
            this.Children = children;
        }

        /// <summary>
        /// The name of the category.
        /// </summary>
        /// <value>The name of the category.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if its a toplevel value or not.
        /// </summary>
        /// <value>Indicates if its a toplevel value or not.</value>
        [DataMember(Name = "toplevel", EmitDefaultValue = true)]
        public bool Toplevel { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public List<string> Value { get; set; }

        /// <summary>
        /// The field associated with the category.
        /// </summary>
        /// <value>The field associated with the category.</value>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// The operator associated with the category.
        /// </summary>
        /// <value>The operator associated with the category.</value>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public string Operator { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public List<string> Source { get; set; }

        /// <summary>
        /// Gets or Sets SourceDisplayNames
        /// </summary>
        [DataMember(Name = "sourceDisplayNames", EmitDefaultValue = false)]
        public List<string> SourceDisplayNames { get; set; }

        /// <summary>
        /// The type associated with the category.
        /// </summary>
        /// <value>The type associated with the category.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// An array of children objects.
        /// </summary>
        /// <value>An array of children objects.</value>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public List<StructuredFiltersChildrenObject> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StructuredFiltersCategoriesObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Toplevel: ").Append(Toplevel).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SourceDisplayNames: ").Append(SourceDisplayNames).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredFiltersCategoriesObject);
        }

        /// <summary>
        /// Returns true if StructuredFiltersCategoriesObject instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredFiltersCategoriesObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredFiltersCategoriesObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Toplevel == input.Toplevel ||
                    this.Toplevel.Equals(input.Toplevel)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value != null &&
                    input.Value != null &&
                    this.Value.SequenceEqual(input.Value)
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source != null &&
                    input.Source != null &&
                    this.Source.SequenceEqual(input.Source)
                ) && 
                (
                    this.SourceDisplayNames == input.SourceDisplayNames ||
                    this.SourceDisplayNames != null &&
                    input.SourceDisplayNames != null &&
                    this.SourceDisplayNames.SequenceEqual(input.SourceDisplayNames)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Toplevel.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.Operator != null)
                {
                    hashCode = (hashCode * 59) + this.Operator.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.SourceDisplayNames != null)
                {
                    hashCode = (hashCode * 59) + this.SourceDisplayNames.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
