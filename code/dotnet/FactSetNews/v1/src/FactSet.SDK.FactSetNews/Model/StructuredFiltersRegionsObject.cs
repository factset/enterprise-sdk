/*
 * News API
 *
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNews.Model
{
    /// <summary>
    /// StructuredFiltersRegionsObject
    /// </summary>
    [DataContract(Name = "StructuredFiltersRegionsObject")]
    public partial class StructuredFiltersRegionsObject : IEquatable<StructuredFiltersRegionsObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredFiltersRegionsObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StructuredFiltersRegionsObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredFiltersRegionsObject" /> class.
        /// </summary>
        /// <param name="name">The name of the region. (required).</param>
        /// <param name="topLevel">Indicates if its a toplevel value or not. (required).</param>
        /// <param name="value">value (required).</param>
        /// <param name="children">children (required).</param>
        public StructuredFiltersRegionsObject(string name, bool topLevel, List<string> value, List<RegionObject> children)
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for StructuredFiltersRegionsObject and cannot be null");
            }
            this.Name = name;
            this.TopLevel = topLevel;
            // to ensure "value" is required (not null)
            if (value == null) {
                throw new ArgumentNullException("value is a required property for StructuredFiltersRegionsObject and cannot be null");
            }
            this.Value = value;
            // to ensure "children" is required (not null)
            if (children == null) {
                throw new ArgumentNullException("children is a required property for StructuredFiltersRegionsObject and cannot be null");
            }
            this.Children = children;
        }

        /// <summary>
        /// The name of the region.
        /// </summary>
        /// <value>The name of the region.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if its a toplevel value or not.
        /// </summary>
        /// <value>Indicates if its a toplevel value or not.</value>
        [DataMember(Name = "topLevel", IsRequired = true, EmitDefaultValue = true)]
        public bool TopLevel { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Value { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name = "children", IsRequired = true, EmitDefaultValue = false)]
        public List<RegionObject> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StructuredFiltersRegionsObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TopLevel: ").Append(TopLevel).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredFiltersRegionsObject);
        }

        /// <summary>
        /// Returns true if StructuredFiltersRegionsObject instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredFiltersRegionsObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredFiltersRegionsObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TopLevel == input.TopLevel ||
                    this.TopLevel.Equals(input.TopLevel)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value != null &&
                    input.Value != null &&
                    this.Value.SequenceEqual(input.Value)
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TopLevel.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
