/*
 * News API
 *
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNews.Model
{
    /// <summary>
    /// Criteria object within a search object.
    /// </summary>
    [DataContract(Name = "Criteria")]
    public partial class Criteria : IEquatable<Criteria>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Criteria" /> class.
        /// </summary>
        /// <param name="field">field.</param>
        /// <param name="detail">detail.</param>
        /// <param name="_operator">_operator.</param>
        /// <param name="effect">effect.</param>
        /// <param name="source">source.</param>
        /// <param name="criteria">criteria.</param>
        /// <param name="caseSensitive">caseSensitive.</param>
        /// <param name="enableHighlight">enableHighlight.</param>
        /// <param name="enableStemming">enableStemming.</param>
        /// <param name="enableThesaurus">enableThesaurus.</param>
        /// <param name="textSearchSlop">textSearchSlop.</param>
        public Criteria(string field = default(string), CriteriaDetail detail = default(CriteriaDetail), string _operator = default(string), string effect = default(string), List<string> source = default(List<string>), CriteriaOneOf criteria = default(CriteriaOneOf), bool caseSensitive = default(bool), bool enableHighlight = default(bool), bool enableStemming = default(bool), bool enableThesaurus = default(bool), decimal textSearchSlop = default(decimal))
        {
            this.Field = field;
            this.Detail = detail;
            this.Operator = _operator;
            this.Effect = effect;
            this.Source = source;
            this._Criteria = criteria;
            this.CaseSensitive = caseSensitive;
            this.EnableHighlight = enableHighlight;
            this.EnableStemming = enableStemming;
            this.EnableThesaurus = enableThesaurus;
            this.TextSearchSlop = textSearchSlop;
        }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", EmitDefaultValue = false)]
        public CriteriaDetail Detail { get; set; }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public string Operator { get; set; }

        /// <summary>
        /// Gets or Sets Effect
        /// </summary>
        [DataMember(Name = "effect", EmitDefaultValue = false)]
        public string Effect { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public List<string> Source { get; set; }

        /// <summary>
        /// Gets or Sets _Criteria
        /// </summary>
        [DataMember(Name = "criteria", EmitDefaultValue = false)]
        public CriteriaOneOf _Criteria { get; set; }

        /// <summary>
        /// Gets or Sets CaseSensitive
        /// </summary>
        [DataMember(Name = "caseSensitive", EmitDefaultValue = true)]
        public bool CaseSensitive { get; set; }

        /// <summary>
        /// Gets or Sets EnableHighlight
        /// </summary>
        [DataMember(Name = "enableHighlight", EmitDefaultValue = true)]
        public bool EnableHighlight { get; set; }

        /// <summary>
        /// Gets or Sets EnableStemming
        /// </summary>
        [DataMember(Name = "enableStemming", EmitDefaultValue = true)]
        public bool EnableStemming { get; set; }

        /// <summary>
        /// Gets or Sets EnableThesaurus
        /// </summary>
        [DataMember(Name = "enableThesaurus", EmitDefaultValue = true)]
        public bool EnableThesaurus { get; set; }

        /// <summary>
        /// Gets or Sets TextSearchSlop
        /// </summary>
        [DataMember(Name = "textSearchSlop", EmitDefaultValue = false)]
        public decimal TextSearchSlop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Criteria {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Effect: ").Append(Effect).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  _Criteria: ").Append(_Criteria).Append("\n");
            sb.Append("  CaseSensitive: ").Append(CaseSensitive).Append("\n");
            sb.Append("  EnableHighlight: ").Append(EnableHighlight).Append("\n");
            sb.Append("  EnableStemming: ").Append(EnableStemming).Append("\n");
            sb.Append("  EnableThesaurus: ").Append(EnableThesaurus).Append("\n");
            sb.Append("  TextSearchSlop: ").Append(TextSearchSlop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Criteria);
        }

        /// <summary>
        /// Returns true if Criteria instances are equal
        /// </summary>
        /// <param name="input">Instance of Criteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Criteria input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Effect == input.Effect ||
                    (this.Effect != null &&
                    this.Effect.Equals(input.Effect))
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source != null &&
                    input.Source != null &&
                    this.Source.SequenceEqual(input.Source)
                ) && 
                (
                    this._Criteria == input._Criteria ||
                    (this._Criteria != null &&
                    this._Criteria.Equals(input._Criteria))
                ) && 
                (
                    this.CaseSensitive == input.CaseSensitive ||
                    this.CaseSensitive.Equals(input.CaseSensitive)
                ) && 
                (
                    this.EnableHighlight == input.EnableHighlight ||
                    this.EnableHighlight.Equals(input.EnableHighlight)
                ) && 
                (
                    this.EnableStemming == input.EnableStemming ||
                    this.EnableStemming.Equals(input.EnableStemming)
                ) && 
                (
                    this.EnableThesaurus == input.EnableThesaurus ||
                    this.EnableThesaurus.Equals(input.EnableThesaurus)
                ) && 
                (
                    this.TextSearchSlop == input.TextSearchSlop ||
                    this.TextSearchSlop.Equals(input.TextSearchSlop)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.Detail != null)
                {
                    hashCode = (hashCode * 59) + this.Detail.GetHashCode();
                }
                if (this.Operator != null)
                {
                    hashCode = (hashCode * 59) + this.Operator.GetHashCode();
                }
                if (this.Effect != null)
                {
                    hashCode = (hashCode * 59) + this.Effect.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this._Criteria != null)
                {
                    hashCode = (hashCode * 59) + this._Criteria.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CaseSensitive.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableHighlight.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableStemming.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableThesaurus.GetHashCode();
                hashCode = (hashCode * 59) + this.TextSearchSlop.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
