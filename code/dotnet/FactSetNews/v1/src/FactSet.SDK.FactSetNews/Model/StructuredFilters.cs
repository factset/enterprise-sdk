/*
 * News API
 *
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNews.Model
{
    /// <summary>
    /// Structured Filters Object
    /// </summary>
    [DataContract(Name = "StructuredFilters")]
    public partial class StructuredFilters : IEquatable<StructuredFilters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredFilters" /> class.
        /// </summary>
        /// <param name="sources">sources.</param>
        /// <param name="categories">categories.</param>
        /// <param name="topics">topics.</param>
        /// <param name="regions">regions.</param>
        /// <param name="countries">countries.</param>
        /// <param name="watchlists">watchlists.</param>
        public StructuredFilters(List<StructuredFiltersSourcesObject> sources = default(List<StructuredFiltersSourcesObject>), List<StructuredFiltersCategoriesObject> categories = default(List<StructuredFiltersCategoriesObject>), List<StructuredFiltersTopicsObject> topics = default(List<StructuredFiltersTopicsObject>), List<StructuredFiltersRegionsObject> regions = default(List<StructuredFiltersRegionsObject>), List<StructuredFiltersCountriesObject> countries = default(List<StructuredFiltersCountriesObject>), List<StructuredFiltersWatchlistsObject> watchlists = default(List<StructuredFiltersWatchlistsObject>))
        {
            this.Sources = sources;
            this.Categories = categories;
            this.Topics = topics;
            this.Regions = regions;
            this.Countries = countries;
            this.Watchlists = watchlists;
        }

        /// <summary>
        /// Gets or Sets Sources
        /// </summary>
        [DataMember(Name = "sources", EmitDefaultValue = false)]
        public List<StructuredFiltersSourcesObject> Sources { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<StructuredFiltersCategoriesObject> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [DataMember(Name = "topics", EmitDefaultValue = false)]
        public List<StructuredFiltersTopicsObject> Topics { get; set; }

        /// <summary>
        /// Gets or Sets Regions
        /// </summary>
        [DataMember(Name = "regions", EmitDefaultValue = false)]
        public List<StructuredFiltersRegionsObject> Regions { get; set; }

        /// <summary>
        /// Gets or Sets Countries
        /// </summary>
        [DataMember(Name = "countries", EmitDefaultValue = false)]
        public List<StructuredFiltersCountriesObject> Countries { get; set; }

        /// <summary>
        /// Gets or Sets Watchlists
        /// </summary>
        [DataMember(Name = "watchlists", EmitDefaultValue = false)]
        public List<StructuredFiltersWatchlistsObject> Watchlists { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StructuredFilters {\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  Watchlists: ").Append(Watchlists).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredFilters);
        }

        /// <summary>
        /// Returns true if StructuredFilters instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredFilters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredFilters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sources == input.Sources ||
                    this.Sources != null &&
                    input.Sources != null &&
                    this.Sources.SequenceEqual(input.Sources)
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Topics == input.Topics ||
                    this.Topics != null &&
                    input.Topics != null &&
                    this.Topics.SequenceEqual(input.Topics)
                ) && 
                (
                    this.Regions == input.Regions ||
                    this.Regions != null &&
                    input.Regions != null &&
                    this.Regions.SequenceEqual(input.Regions)
                ) && 
                (
                    this.Countries == input.Countries ||
                    this.Countries != null &&
                    input.Countries != null &&
                    this.Countries.SequenceEqual(input.Countries)
                ) && 
                (
                    this.Watchlists == input.Watchlists ||
                    this.Watchlists != null &&
                    input.Watchlists != null &&
                    this.Watchlists.SequenceEqual(input.Watchlists)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sources != null)
                {
                    hashCode = (hashCode * 59) + this.Sources.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                if (this.Topics != null)
                {
                    hashCode = (hashCode * 59) + this.Topics.GetHashCode();
                }
                if (this.Regions != null)
                {
                    hashCode = (hashCode * 59) + this.Regions.GetHashCode();
                }
                if (this.Countries != null)
                {
                    hashCode = (hashCode * 59) + this.Countries.GetHashCode();
                }
                if (this.Watchlists != null)
                {
                    hashCode = (hashCode * 59) + this.Watchlists.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
