/*
 * News API
 *
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNews.Model
{
    /// <summary>
    ///   &#39;(Note: the value array will always have just one value.)&#39; 
    /// </summary>
    [DataContract(Name = "FlattenedFiltersTopicsObject")]
    public partial class FlattenedFiltersTopicsObject : IEquatable<FlattenedFiltersTopicsObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlattenedFiltersTopicsObject" /> class.
        /// </summary>
        /// <param name="name">The name of the topic..</param>
        /// <param name="field">The field of the topic..</param>
        /// <param name="source">The source of the topic..</param>
        /// <param name="value">An array containing a single value associated with the topic..</param>
        public FlattenedFiltersTopicsObject(string name = default(string), string field = default(string), List<string> source = default(List<string>), List<string> value = default(List<string>))
        {
            this.Name = name;
            this.Field = field;
            this.Source = source;
            this.Value = value;
        }

        /// <summary>
        /// The name of the topic.
        /// </summary>
        /// <value>The name of the topic.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The field of the topic.
        /// </summary>
        /// <value>The field of the topic.</value>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// The source of the topic.
        /// </summary>
        /// <value>The source of the topic.</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public List<string> Source { get; set; }

        /// <summary>
        /// An array containing a single value associated with the topic.
        /// </summary>
        /// <value>An array containing a single value associated with the topic.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public List<string> Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlattenedFiltersTopicsObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlattenedFiltersTopicsObject);
        }

        /// <summary>
        /// Returns true if FlattenedFiltersTopicsObject instances are equal
        /// </summary>
        /// <param name="input">Instance of FlattenedFiltersTopicsObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlattenedFiltersTopicsObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source != null &&
                    input.Source != null &&
                    this.Source.SequenceEqual(input.Source)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value != null &&
                    input.Value != null &&
                    this.Value.SequenceEqual(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
