/*
 * News API
 *
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNews.Model
{
    /// <summary>
    /// StructuredFiltersTopicsObject
    /// </summary>
    [DataContract(Name = "StructuredFiltersTopicsObject")]
    public partial class StructuredFiltersTopicsObject : IEquatable<StructuredFiltersTopicsObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredFiltersTopicsObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StructuredFiltersTopicsObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredFiltersTopicsObject" /> class.
        /// </summary>
        /// <param name="name">The name of the topic. (required).</param>
        /// <param name="parentConfig">Indicates if there&#39;s a parent configuration or not..</param>
        /// <param name="field">The field associated with the topic..</param>
        /// <param name="_operator">The operator associated with the topic..</param>
        /// <param name="source">source.</param>
        /// <param name="type">The source associated with the topic..</param>
        /// <param name="toplevel">Indicates if its the toplevel value or not..</param>
        /// <param name="value">value.</param>
        /// <param name="children">An array of child objects..</param>
        public StructuredFiltersTopicsObject(string name,bool parentConfig = default(bool), string field = default(string), string _operator = default(string), List<string> source = default(List<string>), string type = default(string), bool toplevel = default(bool), List<string> value = default(List<string>), List<StructuredFiltersChildrenObject> children = default(List<StructuredFiltersChildrenObject>))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for StructuredFiltersTopicsObject and cannot be null");
            }
            this.Name = name;
            this.ParentConfig = parentConfig;
            this.Field = field;
            this.Operator = _operator;
            this.Source = source;
            this.Type = type;
            this.Toplevel = toplevel;
            this.Value = value;
            this.Children = children;
        }

        /// <summary>
        /// The name of the topic.
        /// </summary>
        /// <value>The name of the topic.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if there&#39;s a parent configuration or not.
        /// </summary>
        /// <value>Indicates if there&#39;s a parent configuration or not.</value>
        [DataMember(Name = "parentConfig", EmitDefaultValue = true)]
        public bool ParentConfig { get; set; }

        /// <summary>
        /// The field associated with the topic.
        /// </summary>
        /// <value>The field associated with the topic.</value>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// The operator associated with the topic.
        /// </summary>
        /// <value>The operator associated with the topic.</value>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public string Operator { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public List<string> Source { get; set; }

        /// <summary>
        /// The source associated with the topic.
        /// </summary>
        /// <value>The source associated with the topic.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Indicates if its the toplevel value or not.
        /// </summary>
        /// <value>Indicates if its the toplevel value or not.</value>
        [DataMember(Name = "toplevel", EmitDefaultValue = true)]
        public bool Toplevel { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public List<string> Value { get; set; }

        /// <summary>
        /// An array of child objects.
        /// </summary>
        /// <value>An array of child objects.</value>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public List<StructuredFiltersChildrenObject> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StructuredFiltersTopicsObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentConfig: ").Append(ParentConfig).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Toplevel: ").Append(Toplevel).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredFiltersTopicsObject);
        }

        /// <summary>
        /// Returns true if StructuredFiltersTopicsObject instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredFiltersTopicsObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredFiltersTopicsObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParentConfig == input.ParentConfig ||
                    this.ParentConfig.Equals(input.ParentConfig)
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source != null &&
                    input.Source != null &&
                    this.Source.SequenceEqual(input.Source)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Toplevel == input.Toplevel ||
                    this.Toplevel.Equals(input.Toplevel)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value != null &&
                    input.Value != null &&
                    this.Value.SequenceEqual(input.Value)
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ParentConfig.GetHashCode();
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.Operator != null)
                {
                    hashCode = (hashCode * 59) + this.Operator.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Toplevel.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
