/*
 * News API
 *
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNews.Model
{
    /// <summary>
    /// HeadlinesRequestByViewData
    /// </summary>
    [DataContract(Name = "HeadlinesRequestByView_data")]
    public partial class HeadlinesRequestByViewData : IEquatable<HeadlinesRequestByViewData>, IValidatableObject
    {
        /// <summary>
        /// See list of valid date ranges. Date range is mutually exlusive to start/end time.
        /// </summary>
        /// <value>See list of valid date ranges. Date range is mutually exlusive to start/end time.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PredefinedRangeEnum
        {
            /// <summary>
            /// Enum Today for value: today
            /// </summary>
            [EnumMember(Value = "today")]
            Today = 1,

            /// <summary>
            /// Enum TwoDays for value: twoDays
            /// </summary>
            [EnumMember(Value = "twoDays")]
            TwoDays = 2,

            /// <summary>
            /// Enum OneWeek for value: oneWeek
            /// </summary>
            [EnumMember(Value = "oneWeek")]
            OneWeek = 3,

            /// <summary>
            /// Enum OneMonth for value: oneMonth
            /// </summary>
            [EnumMember(Value = "oneMonth")]
            OneMonth = 4,

            /// <summary>
            /// Enum ThreeMonths for value: threeMonths
            /// </summary>
            [EnumMember(Value = "threeMonths")]
            ThreeMonths = 5,

            /// <summary>
            /// Enum SixMonths for value: sixMonths
            /// </summary>
            [EnumMember(Value = "sixMonths")]
            SixMonths = 6,

            /// <summary>
            /// Enum OneYear for value: oneYear
            /// </summary>
            [EnumMember(Value = "oneYear")]
            OneYear = 7,

            /// <summary>
            /// Enum ThreeYears for value: threeYears
            /// </summary>
            [EnumMember(Value = "threeYears")]
            ThreeYears = 8,

            /// <summary>
            /// Enum FiveYears for value: fiveYears
            /// </summary>
            [EnumMember(Value = "fiveYears")]
            FiveYears = 9,

            /// <summary>
            /// Enum TenYears for value: tenYears
            /// </summary>
            [EnumMember(Value = "tenYears")]
            TenYears = 10,

            /// <summary>
            /// Enum AllAvailable for value: allAvailable
            /// </summary>
            [EnumMember(Value = "allAvailable")]
            AllAvailable = 11

        }


        /// <summary>
        /// See list of valid date ranges. Date range is mutually exlusive to start/end time.
        /// </summary>
        /// <value>See list of valid date ranges. Date range is mutually exlusive to start/end time.</value>
        [DataMember(Name = "predefinedRange", EmitDefaultValue = false)]
        public PredefinedRangeEnum? PredefinedRange { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HeadlinesRequestByViewData" /> class.
        /// </summary>
        /// <param name="name">Name of the view to return headlines for..</param>
        /// <param name="predefinedRange">See list of valid date ranges. Date range is mutually exlusive to start/end time..</param>
        /// <param name="searchTime">searchTime.</param>
        public HeadlinesRequestByViewData(string name = default(string), PredefinedRangeEnum? predefinedRange = default(PredefinedRangeEnum?), HeadlinesRequestByViewDataSearchTime searchTime = default(HeadlinesRequestByViewDataSearchTime))
        {
            this.Name = name;
            this.PredefinedRange = predefinedRange;
            this.SearchTime = searchTime;
        }

        /// <summary>
        /// Name of the view to return headlines for.
        /// </summary>
        /// <value>Name of the view to return headlines for.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SearchTime
        /// </summary>
        [DataMember(Name = "searchTime", EmitDefaultValue = false)]
        public HeadlinesRequestByViewDataSearchTime SearchTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HeadlinesRequestByViewData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PredefinedRange: ").Append(PredefinedRange).Append("\n");
            sb.Append("  SearchTime: ").Append(SearchTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HeadlinesRequestByViewData);
        }

        /// <summary>
        /// Returns true if HeadlinesRequestByViewData instances are equal
        /// </summary>
        /// <param name="input">Instance of HeadlinesRequestByViewData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HeadlinesRequestByViewData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PredefinedRange == input.PredefinedRange ||
                    this.PredefinedRange.Equals(input.PredefinedRange)
                ) && 
                (
                    this.SearchTime == input.SearchTime ||
                    (this.SearchTime != null &&
                    this.SearchTime.Equals(input.SearchTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PredefinedRange.GetHashCode();
                if (this.SearchTime != null)
                {
                    hashCode = (hashCode * 59) + this.SearchTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
