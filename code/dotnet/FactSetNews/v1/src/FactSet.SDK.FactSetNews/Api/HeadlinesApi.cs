/*
 * News API
 *
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetNews.Client;
using FactSet.SDK.FactSetNews.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetNews.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHeadlinesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve FactSet News headlines for the given filters
        /// </summary>
        /// <remarks>
        /// This endpoint will pull all FactSet News headlines. Filters can be specified via the endpoint below. Please refer to &#x60;/filters&#x60; endpoint to obtain the values.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequest">Filter Body which needs to be sent with request. (optional)</param>
        /// <returns>SearchResponse</returns>
        SearchResponse GetFactSetNewsHeadlines(HeadlinesRequest headlinesRequest = default(HeadlinesRequest));

        /// <summary>
        /// Retrieve FactSet News headlines for the given filters
        /// </summary>
        /// <remarks>
        /// This endpoint will pull all FactSet News headlines. Filters can be specified via the endpoint below. Please refer to &#x60;/filters&#x60; endpoint to obtain the values.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequest">Filter Body which needs to be sent with request. (optional)</param>
        /// <returns>ApiResponse of SearchResponse</returns>
        ApiResponse<SearchResponse> GetFactSetNewsHeadlinesWithHttpInfo(HeadlinesRequest headlinesRequest = default(HeadlinesRequest));
        /// <summary>
        /// Retrieve FactSet News headlines for given view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull all FactSet News Headlines for a saved view. Views can be created via the &#39;Create Views&#39; endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequestByView">View body which needs to be sent with request. (optional)</param>
        /// <returns>SearchResponse</returns>
        SearchResponse GetFactSetNewsHeadlinesByView(HeadlinesRequestByView headlinesRequestByView = default(HeadlinesRequestByView));

        /// <summary>
        /// Retrieve FactSet News headlines for given view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull all FactSet News Headlines for a saved view. Views can be created via the &#39;Create Views&#39; endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequestByView">View body which needs to be sent with request. (optional)</param>
        /// <returns>ApiResponse of SearchResponse</returns>
        ApiResponse<SearchResponse> GetFactSetNewsHeadlinesByViewWithHttpInfo(HeadlinesRequestByView headlinesRequestByView = default(HeadlinesRequestByView));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHeadlinesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve FactSet News headlines for the given filters
        /// </summary>
        /// <remarks>
        /// This endpoint will pull all FactSet News headlines. Filters can be specified via the endpoint below. Please refer to &#x60;/filters&#x60; endpoint to obtain the values.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequest">Filter Body which needs to be sent with request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        System.Threading.Tasks.Task<SearchResponse> GetFactSetNewsHeadlinesAsync(HeadlinesRequest headlinesRequest = default(HeadlinesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve FactSet News headlines for the given filters
        /// </summary>
        /// <remarks>
        /// This endpoint will pull all FactSet News headlines. Filters can be specified via the endpoint below. Please refer to &#x60;/filters&#x60; endpoint to obtain the values.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequest">Filter Body which needs to be sent with request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResponse>> GetFactSetNewsHeadlinesWithHttpInfoAsync(HeadlinesRequest headlinesRequest = default(HeadlinesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve FactSet News headlines for given view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull all FactSet News Headlines for a saved view. Views can be created via the &#39;Create Views&#39; endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequestByView">View body which needs to be sent with request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        System.Threading.Tasks.Task<SearchResponse> GetFactSetNewsHeadlinesByViewAsync(HeadlinesRequestByView headlinesRequestByView = default(HeadlinesRequestByView), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve FactSet News headlines for given view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull all FactSet News Headlines for a saved view. Views can be created via the &#39;Create Views&#39; endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequestByView">View body which needs to be sent with request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResponse>> GetFactSetNewsHeadlinesByViewWithHttpInfoAsync(HeadlinesRequestByView headlinesRequestByView = default(HeadlinesRequestByView), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHeadlinesApi : IHeadlinesApiSync, IHeadlinesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HeadlinesApi : IHeadlinesApi
    {
        private FactSet.SDK.FactSetNews.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactSetNewsHeadlinesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SearchResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactSetNewsHeadlinesByViewResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SearchResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="HeadlinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HeadlinesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeadlinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HeadlinesApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetNews.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetNews.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetNews.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeadlinesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HeadlinesApi(FactSet.SDK.FactSetNews.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetNews.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetNews.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeadlinesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HeadlinesApi(FactSet.SDK.FactSetNews.Client.ISynchronousClient client, FactSet.SDK.FactSetNews.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetNews.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetNews.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetNews.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetNews.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetNews.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve FactSet News headlines for the given filters This endpoint will pull all FactSet News headlines. Filters can be specified via the endpoint below. Please refer to &#x60;/filters&#x60; endpoint to obtain the values.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequest">Filter Body which needs to be sent with request. (optional)</param>
        /// <returns>SearchResponse</returns>
        public SearchResponse GetFactSetNewsHeadlines(HeadlinesRequest headlinesRequest = default(HeadlinesRequest))
        {
            var localVarResponse = GetFactSetNewsHeadlinesWithHttpInfo(headlinesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve FactSet News headlines for the given filters This endpoint will pull all FactSet News headlines. Filters can be specified via the endpoint below. Please refer to &#x60;/filters&#x60; endpoint to obtain the values.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequest">Filter Body which needs to be sent with request. (optional)</param>
        /// <returns>ApiResponse of SearchResponse</returns>
        public ApiResponse<SearchResponse> GetFactSetNewsHeadlinesWithHttpInfo(HeadlinesRequest headlinesRequest = default(HeadlinesRequest))
        {
            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = headlinesRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactSetNewsHeadlinesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SearchResponse>("/headlines", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactSetNewsHeadlines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve FactSet News headlines for the given filters This endpoint will pull all FactSet News headlines. Filters can be specified via the endpoint below. Please refer to &#x60;/filters&#x60; endpoint to obtain the values.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequest">Filter Body which needs to be sent with request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        public async System.Threading.Tasks.Task<SearchResponse>GetFactSetNewsHeadlinesAsync(HeadlinesRequest headlinesRequest = default(HeadlinesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactSetNewsHeadlinesWithHttpInfoAsync(headlinesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve FactSet News headlines for the given filters This endpoint will pull all FactSet News headlines. Filters can be specified via the endpoint below. Please refer to &#x60;/filters&#x60; endpoint to obtain the values.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequest">Filter Body which needs to be sent with request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SearchResponse>> GetFactSetNewsHeadlinesWithHttpInfoAsync(HeadlinesRequest headlinesRequest = default(HeadlinesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = headlinesRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactSetNewsHeadlinesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResponse>("/headlines", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactSetNewsHeadlines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve FactSet News headlines for given view This endpoint allows you to pull all FactSet News Headlines for a saved view. Views can be created via the &#39;Create Views&#39; endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequestByView">View body which needs to be sent with request. (optional)</param>
        /// <returns>SearchResponse</returns>
        public SearchResponse GetFactSetNewsHeadlinesByView(HeadlinesRequestByView headlinesRequestByView = default(HeadlinesRequestByView))
        {
            var localVarResponse = GetFactSetNewsHeadlinesByViewWithHttpInfo(headlinesRequestByView);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve FactSet News headlines for given view This endpoint allows you to pull all FactSet News Headlines for a saved view. Views can be created via the &#39;Create Views&#39; endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequestByView">View body which needs to be sent with request. (optional)</param>
        /// <returns>ApiResponse of SearchResponse</returns>
        public ApiResponse<SearchResponse> GetFactSetNewsHeadlinesByViewWithHttpInfo(HeadlinesRequestByView headlinesRequestByView = default(HeadlinesRequestByView))
        {
            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = headlinesRequestByView;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactSetNewsHeadlinesByViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SearchResponse>("/headlines/view", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactSetNewsHeadlinesByView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve FactSet News headlines for given view This endpoint allows you to pull all FactSet News Headlines for a saved view. Views can be created via the &#39;Create Views&#39; endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequestByView">View body which needs to be sent with request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        public async System.Threading.Tasks.Task<SearchResponse>GetFactSetNewsHeadlinesByViewAsync(HeadlinesRequestByView headlinesRequestByView = default(HeadlinesRequestByView), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactSetNewsHeadlinesByViewWithHttpInfoAsync(headlinesRequestByView, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve FactSet News headlines for given view This endpoint allows you to pull all FactSet News Headlines for a saved view. Views can be created via the &#39;Create Views&#39; endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headlinesRequestByView">View body which needs to be sent with request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SearchResponse>> GetFactSetNewsHeadlinesByViewWithHttpInfoAsync(HeadlinesRequestByView headlinesRequestByView = default(HeadlinesRequestByView), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = headlinesRequestByView;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactSetNewsHeadlinesByViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResponse>("/headlines/view", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactSetNewsHeadlinesByView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
