/*
 * News API
 *
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetNews.Client;
using FactSet.SDK.FactSetNews.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetNews.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFiltersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve all FactSet News filters
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterResponse</returns>
        FilterResponse GetFilters(List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve all FactSet News filters
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterResponse</returns>
        ApiResponse<FilterResponse> GetFiltersWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve all News filter categories
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter categories. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterCategoriesResponse</returns>
        FilterCategoriesResponse GetNewsFiltersCategories(List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve all News filter categories
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter categories. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterCategoriesResponse</returns>
        ApiResponse<FilterCategoriesResponse> GetNewsFiltersCategoriesWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve all News filter countries
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter countries. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterCountriesResponse</returns>
        FilterCountriesResponse GetNewsFiltersCountries(List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve all News filter countries
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter countries. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterCountriesResponse</returns>
        ApiResponse<FilterCountriesResponse> GetNewsFiltersCountriesWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve all News filter regions
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter regions. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterRegionsResponse</returns>
        FilterRegionsResponse GetNewsFiltersRegions(List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve all News filter regions
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter regions. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterRegionsResponse</returns>
        ApiResponse<FilterRegionsResponse> GetNewsFiltersRegionsWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve all News filter sources
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter sources. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterSourcesResponse</returns>
        FilterSourcesResponse GetNewsFiltersSources(List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve all News filter sources
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter sources. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterSourcesResponse</returns>
        ApiResponse<FilterSourcesResponse> GetNewsFiltersSourcesWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve all News filter topics
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter topics. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterTopicResponse</returns>
        FilterTopicResponse GetNewsFiltersTopics(List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve all News filter topics
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter topics. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterTopicResponse</returns>
        ApiResponse<FilterTopicResponse> GetNewsFiltersTopicsWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve all News filter watchlists
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter watchlists. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterWatchlistsResponse</returns>
        FilterWatchlistsResponse GetNewsFiltersWatchlists(List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve all News filter watchlists
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter watchlists. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterWatchlistsResponse</returns>
        ApiResponse<FilterWatchlistsResponse> GetNewsFiltersWatchlistsWithHttpInfo(List<string> attributes = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFiltersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve all FactSet News filters
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterResponse</returns>
        System.Threading.Tasks.Task<FilterResponse> GetFiltersAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all FactSet News filters
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterResponse>> GetFiltersWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all News filter categories
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter categories. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterCategoriesResponse</returns>
        System.Threading.Tasks.Task<FilterCategoriesResponse> GetNewsFiltersCategoriesAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all News filter categories
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter categories. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterCategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterCategoriesResponse>> GetNewsFiltersCategoriesWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all News filter countries
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter countries. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterCountriesResponse</returns>
        System.Threading.Tasks.Task<FilterCountriesResponse> GetNewsFiltersCountriesAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all News filter countries
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter countries. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterCountriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterCountriesResponse>> GetNewsFiltersCountriesWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all News filter regions
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter regions. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterRegionsResponse</returns>
        System.Threading.Tasks.Task<FilterRegionsResponse> GetNewsFiltersRegionsAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all News filter regions
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter regions. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterRegionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterRegionsResponse>> GetNewsFiltersRegionsWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all News filter sources
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter sources. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterSourcesResponse</returns>
        System.Threading.Tasks.Task<FilterSourcesResponse> GetNewsFiltersSourcesAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all News filter sources
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter sources. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterSourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterSourcesResponse>> GetNewsFiltersSourcesWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all News filter topics
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter topics. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterTopicResponse</returns>
        System.Threading.Tasks.Task<FilterTopicResponse> GetNewsFiltersTopicsAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all News filter topics
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter topics. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterTopicResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterTopicResponse>> GetNewsFiltersTopicsWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all News filter watchlists
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter watchlists. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterWatchlistsResponse</returns>
        System.Threading.Tasks.Task<FilterWatchlistsResponse> GetNewsFiltersWatchlistsAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all News filter watchlists
        /// </summary>
        /// <remarks>
        /// If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter watchlists. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterWatchlistsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterWatchlistsResponse>> GetNewsFiltersWatchlistsWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFiltersApi : IFiltersApiSync, IFiltersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FiltersApi : IFiltersApi
    {
        private FactSet.SDK.FactSetNews.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFiltersResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FilterResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsFiltersCategoriesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FilterCategoriesResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsFiltersCountriesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FilterCountriesResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsFiltersRegionsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FilterRegionsResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsFiltersSourcesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FilterSourcesResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsFiltersTopicsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FilterTopicResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsFiltersWatchlistsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FilterWatchlistsResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FiltersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FiltersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FiltersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FiltersApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetNews.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetNews.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetNews.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FiltersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FiltersApi(FactSet.SDK.FactSetNews.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetNews.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetNews.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FiltersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FiltersApi(FactSet.SDK.FactSetNews.Client.ISynchronousClient client, FactSet.SDK.FactSetNews.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetNews.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetNews.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetNews.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetNews.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetNews.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve all FactSet News filters If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterResponse</returns>
        public FilterResponse GetFilters(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFiltersWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all FactSet News filters If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterResponse</returns>
        public ApiResponse<FilterResponse> GetFiltersWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFiltersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FilterResponse>("/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all FactSet News filters If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterResponse</returns>
        public async System.Threading.Tasks.Task<FilterResponse>GetFiltersAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFiltersWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all FactSet News filters If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FilterResponse>> GetFiltersWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFiltersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FilterResponse>("/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter categories If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter categories. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterCategoriesResponse</returns>
        public FilterCategoriesResponse GetNewsFiltersCategories(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNewsFiltersCategoriesWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter categories If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter categories. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterCategoriesResponse</returns>
        public ApiResponse<FilterCategoriesResponse> GetNewsFiltersCategoriesWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersCategoriesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FilterCategoriesResponse>("/filters/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter categories If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter categories. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterCategoriesResponse</returns>
        public async System.Threading.Tasks.Task<FilterCategoriesResponse>GetNewsFiltersCategoriesAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsFiltersCategoriesWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter categories If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter categories. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterCategoriesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FilterCategoriesResponse>> GetNewsFiltersCategoriesWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersCategoriesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FilterCategoriesResponse>("/filters/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter countries If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter countries. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterCountriesResponse</returns>
        public FilterCountriesResponse GetNewsFiltersCountries(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNewsFiltersCountriesWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter countries If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter countries. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterCountriesResponse</returns>
        public ApiResponse<FilterCountriesResponse> GetNewsFiltersCountriesWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersCountriesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FilterCountriesResponse>("/filters/countries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersCountries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter countries If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter countries. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterCountriesResponse</returns>
        public async System.Threading.Tasks.Task<FilterCountriesResponse>GetNewsFiltersCountriesAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsFiltersCountriesWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter countries If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter countries. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterCountriesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FilterCountriesResponse>> GetNewsFiltersCountriesWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersCountriesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FilterCountriesResponse>("/filters/countries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersCountries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter regions If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter regions. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterRegionsResponse</returns>
        public FilterRegionsResponse GetNewsFiltersRegions(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNewsFiltersRegionsWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter regions If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter regions. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterRegionsResponse</returns>
        public ApiResponse<FilterRegionsResponse> GetNewsFiltersRegionsWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersRegionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FilterRegionsResponse>("/filters/regions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersRegions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter regions If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter regions. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterRegionsResponse</returns>
        public async System.Threading.Tasks.Task<FilterRegionsResponse>GetNewsFiltersRegionsAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsFiltersRegionsWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter regions If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter regions. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterRegionsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FilterRegionsResponse>> GetNewsFiltersRegionsWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersRegionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FilterRegionsResponse>("/filters/regions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersRegions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter sources If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter sources. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterSourcesResponse</returns>
        public FilterSourcesResponse GetNewsFiltersSources(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNewsFiltersSourcesWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter sources If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter sources. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterSourcesResponse</returns>
        public ApiResponse<FilterSourcesResponse> GetNewsFiltersSourcesWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersSourcesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FilterSourcesResponse>("/filters/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter sources If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter sources. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterSourcesResponse</returns>
        public async System.Threading.Tasks.Task<FilterSourcesResponse>GetNewsFiltersSourcesAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsFiltersSourcesWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter sources If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter sources. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterSourcesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FilterSourcesResponse>> GetNewsFiltersSourcesWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersSourcesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FilterSourcesResponse>("/filters/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter topics If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter topics. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterTopicResponse</returns>
        public FilterTopicResponse GetNewsFiltersTopics(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNewsFiltersTopicsWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter topics If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter topics. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterTopicResponse</returns>
        public ApiResponse<FilterTopicResponse> GetNewsFiltersTopicsWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersTopicsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FilterTopicResponse>("/filters/topics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersTopics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter topics If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter topics. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterTopicResponse</returns>
        public async System.Threading.Tasks.Task<FilterTopicResponse>GetNewsFiltersTopicsAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsFiltersTopicsWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter topics If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter topics. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterTopicResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FilterTopicResponse>> GetNewsFiltersTopicsWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersTopicsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FilterTopicResponse>("/filters/topics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersTopics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter watchlists If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter watchlists. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>FilterWatchlistsResponse</returns>
        public FilterWatchlistsResponse GetNewsFiltersWatchlists(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNewsFiltersWatchlistsWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter watchlists If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter watchlists. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <returns>ApiResponse of FilterWatchlistsResponse</returns>
        public ApiResponse<FilterWatchlistsResponse> GetNewsFiltersWatchlistsWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersWatchlistsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FilterWatchlistsResponse>("/filters/watchlists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersWatchlists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all News filter watchlists If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter watchlists. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterWatchlistsResponse</returns>
        public async System.Threading.Tasks.Task<FilterWatchlistsResponse>GetNewsFiltersWatchlistsAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsFiltersWatchlistsWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all News filter watchlists If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the &#x60;/headlines&#x60; and &#x60;/views/create&#x60; endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Pass a list of filters to return the respective type of filter watchlists. Accepted list values are \&quot;structured\&quot; and/or \&quot;flattened\&quot;. If no _attributes are specified, all filters will be returned in the response (this is the default response).  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterWatchlistsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FilterWatchlistsResponse>> GetNewsFiltersWatchlistsWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsFiltersWatchlistsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FilterWatchlistsResponse>("/filters/watchlists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsFiltersWatchlists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
