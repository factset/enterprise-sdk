/*
 * FactSet Formula API
 *
 *  **FactSet Formula API**  FactSet’s Formula API is a modern, flexible, formula-based API that enables users to access FactSet’s wide range of financial data and content. The API offers two endpoints, one optimized for time-series analysis and one designed for cross-sectional analysis, providing users a simplified interface into FactSet’s expansive offering. By providing two endpoints, it allows for the optimization of user workflows, while reducing complexity.  Leverage the power and flexibility of the Formula API to -   * Pull data from across most content sets that a user has access to in a single request   * Include business logic and mathematical operations in request   * Submit a dynamic universe in both endpoints   * Return the fsymId to easily combine with other FactSet content / products   * Set the trading calendar   * Define custom display names  **Formula API Request Builder**  The Formula API Request Builder provides users everything they need to form a Formula API request. In the Request Builder, you can select identifiers, build a universe expression, select FQL or Screening formulas, easily apply business logic and mathematical functions to the FQL or Screening formulas, specify optional parameters, and construct a GET or POST request. The Request Builder eliminates the need to have previous FQL and Screening knowledge and allows you to quickly find your desired data items and form the request.  The Formula API Request Builder can be accessed by navigating to [https://developer.factset.com/formula-api-request-builder](https://developer.factset.com/formula-api-request-builder) and logging in using your FactSet.net ID. When using the Request Builder to construct requests for the one of the Formula API's endpoints, be sure to toggle to the correct endpoint at the top of the page.  **How to Check the Health and Availability of the Formula API**  Please use the below endpoint to check the health and availability of the Formula API. You must be authorized for this API to use the Health endpoint.  [https://api.factset.com/formula-api/health](https://api.factset.com/formula-api/health)  **How to Programmatically Download API Specification File**  You can download the FactSet Formula API Specification File in .yaml. using the \"Download Spec\" button to the right of the version number. This specification can then be used for Codegen to create your own SDKs. 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Formula.Client;
using FactSet.SDK.Formula.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Formula.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchProcessingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the response for a Batch Request
        /// </summary>
        /// <remarks>
        /// Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <returns>BatchProcessingApi.GetBatchDataResponseWrapper</returns>
        BatchProcessingApi.GetBatchDataResponseWrapper GetBatchData(Guid id);

        /// <summary>
        /// Returns the response for a Batch Request
        /// </summary>
        /// <remarks>
        /// Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <returns>ApiResponse of BatchProcessingApi.GetBatchDataResponseWrapper</returns>
        ApiResponse<BatchProcessingApi.GetBatchDataResponseWrapper> GetBatchDataWithHttpInfo(Guid id);
        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <returns>BatchProcessingApi.GetBatchDataWithPostResponseWrapper</returns>
        BatchProcessingApi.GetBatchDataWithPostResponseWrapper GetBatchDataWithPost(BatchDataRequest batchDataRequest);

        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <returns>ApiResponse of BatchProcessingApi.GetBatchDataWithPostResponseWrapper</returns>
        ApiResponse<BatchProcessingApi.GetBatchDataWithPostResponseWrapper> GetBatchDataWithPostWithHttpInfo(BatchDataRequest batchDataRequest);
        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <returns>BatchStatusResponse</returns>
        BatchStatusResponse GetBatchStatus(Guid id);

        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <returns>ApiResponse of BatchStatusResponse</returns>
        ApiResponse<BatchStatusResponse> GetBatchStatusWithHttpInfo(Guid id);
        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <returns>BatchStatusResponse</returns>
        BatchStatusResponse GetBatchStatusWithPost(BatchDataRequest batchDataRequest);

        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <returns>ApiResponse of BatchStatusResponse</returns>
        ApiResponse<BatchStatusResponse> GetBatchStatusWithPostWithHttpInfo(BatchDataRequest batchDataRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchProcessingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the response for a Batch Request
        /// </summary>
        /// <remarks>
        /// Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDataResponse</returns>
        System.Threading.Tasks.Task<BatchProcessingApi.GetBatchDataResponseWrapper> GetBatchDataAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the response for a Batch Request
        /// </summary>
        /// <remarks>
        /// Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchProcessingApi.GetBatchDataResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchProcessingApi.GetBatchDataResponseWrapper>> GetBatchDataWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDataResponse</returns>
        System.Threading.Tasks.Task<BatchProcessingApi.GetBatchDataWithPostResponseWrapper> GetBatchDataWithPostAsync(BatchDataRequest batchDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchProcessingApi.GetBatchDataWithPostResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchProcessingApi.GetBatchDataWithPostResponseWrapper>> GetBatchDataWithPostWithHttpInfoAsync(BatchDataRequest batchDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatusResponse</returns>
        System.Threading.Tasks.Task<BatchStatusResponse> GetBatchStatusAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchStatusResponse>> GetBatchStatusWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatusResponse</returns>
        System.Threading.Tasks.Task<BatchStatusResponse> GetBatchStatusWithPostAsync(BatchDataRequest batchDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the status for a Batch Request
        /// </summary>
        /// <remarks>
        /// Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchStatusResponse>> GetBatchStatusWithPostWithHttpInfoAsync(BatchDataRequest batchDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchProcessingApi : IBatchProcessingApiSync, IBatchProcessingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchProcessingApi : IBatchProcessingApi
    {
        private FactSet.SDK.Formula.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetBatchDataResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BatchDataResponse) },
            { (HttpStatusCode)202, typeof(BatchStatusResponse) },
            { (HttpStatusCode)404, typeof(ErrorDetail) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBatchDataWithPostResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BatchDataResponse) },
            { (HttpStatusCode)202, typeof(BatchStatusResponse) },
            { (HttpStatusCode)404, typeof(ErrorDetail) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBatchStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(BatchStatusResponse) },
            { (HttpStatusCode)202, typeof(BatchStatusResponse) },
            { (HttpStatusCode)404, typeof(ErrorDetail) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBatchStatusWithPostResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(BatchStatusResponse) },
            { (HttpStatusCode)202, typeof(BatchStatusResponse) },
            { (HttpStatusCode)404, typeof(ErrorDetail) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        
        /// <summary>
        /// Wrapper to support GET /batch-result returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : BatchDataResponse<br />
        /// Request Response Object when batch request has completed and response is created
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : BatchStatusResponse<br />
        /// Batch Request has not finished and the result has NOT been created.
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetBatchDataResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     BatchDataResponse data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     BatchStatusResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetBatchDataResponseWrapper {

            /// <summary>This constructor initializes the new GetBatchDataResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetBatchDataResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Request Response Object when batch request has completed and response is created
            /// </summary>
            public BatchDataResponse Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.Formula.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (BatchDataResponse) Response;
                }
            }
            
            /// <summary>
            /// Batch Request has not finished and the result has NOT been created.
            /// </summary>
            public BatchStatusResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.Formula.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (BatchStatusResponse) Response;
                }
            }
            
        }


        /// <summary>
        /// Wrapper to support POST /batch-result returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : BatchDataResponse<br />
        /// Request Response Object when batch request has completed and response is created
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : BatchStatusResponse<br />
        /// Batch Request has not finished and the result has NOT been created.
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetBatchDataWithPostResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     BatchDataResponse data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     BatchStatusResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetBatchDataWithPostResponseWrapper {

            /// <summary>This constructor initializes the new GetBatchDataWithPostResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetBatchDataWithPostResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Request Response Object when batch request has completed and response is created
            /// </summary>
            public BatchDataResponse Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.Formula.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (BatchDataResponse) Response;
                }
            }
            
            /// <summary>
            /// Batch Request has not finished and the result has NOT been created.
            /// </summary>
            public BatchStatusResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.Formula.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (BatchStatusResponse) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchProcessingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchProcessingApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Formula.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Formula.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Formula.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Formula.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Formula.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Formula.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchProcessingApi(FactSet.SDK.Formula.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Formula.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Formula.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Formula.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Formula.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Formula.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BatchProcessingApi(FactSet.SDK.Formula.Client.ISynchronousClient client, FactSet.SDK.Formula.Client.IAsynchronousClient asyncClient, FactSet.SDK.Formula.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Formula.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Formula.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Formula.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Formula.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Formula.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the response for a Batch Request Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <returns>BatchProcessingApi.GetBatchDataResponseWrapper</returns>
        public BatchProcessingApi.GetBatchDataResponseWrapper GetBatchData(Guid id)
        {
            var localVarResponse = GetBatchDataWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the response for a Batch Request Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <returns>ApiResponse of BatchDataResponse</returns>
        public ApiResponse<BatchProcessingApi.GetBatchDataResponseWrapper> GetBatchDataWithHttpInfo(Guid id)
        {
            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBatchDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/batch-result", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getbatchdataResponse = new GetBatchDataResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetBatchDataResponseWrapper>(localVarResponse.StatusCode, getbatchdataResponse);
        }

        /// <summary>
        /// Returns the response for a Batch Request Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDataResponse</returns>
        public async System.Threading.Tasks.Task<BatchProcessingApi.GetBatchDataResponseWrapper>GetBatchDataAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBatchDataWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the response for a Batch Request Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDataResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BatchProcessingApi.GetBatchDataResponseWrapper>> GetBatchDataWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBatchDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/batch-result", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getbatchdataResponse = new GetBatchDataResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetBatchDataResponseWrapper>(localVarResponse.StatusCode, getbatchdataResponse);
        }

        /// <summary>
        /// Returns the status for a Batch Request Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <returns>BatchProcessingApi.GetBatchDataWithPostResponseWrapper</returns>
        public BatchProcessingApi.GetBatchDataWithPostResponseWrapper GetBatchDataWithPost(BatchDataRequest batchDataRequest)
        {
            var localVarResponse = GetBatchDataWithPostWithHttpInfo(batchDataRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status for a Batch Request Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <returns>ApiResponse of BatchDataResponse</returns>
        public ApiResponse<BatchProcessingApi.GetBatchDataWithPostResponseWrapper> GetBatchDataWithPostWithHttpInfo(BatchDataRequest batchDataRequest)
        {
            // verify the required parameter 'batchDataRequest' is set
            if (batchDataRequest == null)
            {
                throw new FactSet.SDK.Formula.Client.ApiException(400, "Missing required parameter 'batchDataRequest' when calling BatchProcessingApi->GetBatchDataWithPost");
            }

            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchDataRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBatchDataWithPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/batch-result", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchDataWithPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getbatchdatawithpostResponse = new GetBatchDataWithPostResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetBatchDataWithPostResponseWrapper>(localVarResponse.StatusCode, getbatchdatawithpostResponse);
        }

        /// <summary>
        /// Returns the status for a Batch Request Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDataResponse</returns>
        public async System.Threading.Tasks.Task<BatchProcessingApi.GetBatchDataWithPostResponseWrapper>GetBatchDataWithPostAsync(BatchDataRequest batchDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBatchDataWithPostWithHttpInfoAsync(batchDataRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status for a Batch Request Returns the response data for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDataResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BatchProcessingApi.GetBatchDataWithPostResponseWrapper>> GetBatchDataWithPostWithHttpInfoAsync(BatchDataRequest batchDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchDataRequest' is set
            if (batchDataRequest == null)
            {
                throw new FactSet.SDK.Formula.Client.ApiException(400, "Missing required parameter 'batchDataRequest' when calling BatchProcessingApi->GetBatchDataWithPost");
            }


            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchDataRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBatchDataWithPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/batch-result", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchDataWithPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getbatchdatawithpostResponse = new GetBatchDataWithPostResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetBatchDataWithPostResponseWrapper>(localVarResponse.StatusCode, getbatchdatawithpostResponse);
        }

        /// <summary>
        /// Returns the status for a Batch Request Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <returns>BatchStatusResponse</returns>
        public BatchStatusResponse GetBatchStatus(Guid id)
        {
            var localVarResponse = GetBatchStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status for a Batch Request Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <returns>ApiResponse of BatchStatusResponse</returns>
        public ApiResponse<BatchStatusResponse> GetBatchStatusWithHttpInfo(Guid id)
        {
            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBatchStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            BatchStatusResponse>("/batch-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the status for a Batch Request Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatusResponse</returns>
        public async System.Threading.Tasks.Task<BatchStatusResponse>GetBatchStatusAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBatchStatusWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status for a Batch Request Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch Request identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BatchStatusResponse>> GetBatchStatusWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBatchStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BatchStatusResponse>("/batch-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the status for a Batch Request Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <returns>BatchStatusResponse</returns>
        public BatchStatusResponse GetBatchStatusWithPost(BatchDataRequest batchDataRequest)
        {
            var localVarResponse = GetBatchStatusWithPostWithHttpInfo(batchDataRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status for a Batch Request Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <returns>ApiResponse of BatchStatusResponse</returns>
        public ApiResponse<BatchStatusResponse> GetBatchStatusWithPostWithHttpInfo(BatchDataRequest batchDataRequest)
        {
            // verify the required parameter 'batchDataRequest' is set
            if (batchDataRequest == null)
            {
                throw new FactSet.SDK.Formula.Client.ApiException(400, "Missing required parameter 'batchDataRequest' when calling BatchProcessingApi->GetBatchStatusWithPost");
            }

            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchDataRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBatchStatusWithPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            BatchStatusResponse>("/batch-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchStatusWithPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the status for a Batch Request Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatusResponse</returns>
        public async System.Threading.Tasks.Task<BatchStatusResponse>GetBatchStatusWithPostAsync(BatchDataRequest batchDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBatchStatusWithPostWithHttpInfoAsync(batchDataRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status for a Batch Request Return the status for the underlying batch request that is specified by the id.    The Formula API supports Long Running asynchronous requests up to **30 minutes** via the &#x60;batch&#x60; parameter for both the &#x60;/time-series&#x60; and &#x60;/cross-sectional&#x60; endpoint.    *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BatchStatusResponse>> GetBatchStatusWithPostWithHttpInfoAsync(BatchDataRequest batchDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchDataRequest' is set
            if (batchDataRequest == null)
            {
                throw new FactSet.SDK.Formula.Client.ApiException(400, "Missing required parameter 'batchDataRequest' when calling BatchProcessingApi->GetBatchStatusWithPost");
            }


            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchDataRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBatchStatusWithPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchStatusResponse>("/batch-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchStatusWithPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
