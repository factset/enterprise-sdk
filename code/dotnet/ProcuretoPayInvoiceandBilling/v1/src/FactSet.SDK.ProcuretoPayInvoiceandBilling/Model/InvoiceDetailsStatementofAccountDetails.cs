/*
 * Invoice and Billing Endpoints
 *
 * API endpoints for managing and downloading FactSet Invoices
 *
 * The version of the OpenAPI document: 1K
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayInvoiceandBilling.Model
{
    /// <summary>
    /// InvoiceDetailsStatementofAccountDetails
    /// </summary>
    [DataContract(Name = "invoiceDetails_statementofAccountDetails")]
    public partial class InvoiceDetailsStatementofAccountDetails : IEquatable<InvoiceDetailsStatementofAccountDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetailsStatementofAccountDetails" /> class.
        /// </summary>
        /// <param name="date">Date of invoice generation..</param>
        /// <param name="agingDate">Date of invoices, credits or payments issued..</param>
        /// <param name="documentTypeId">See White Paper for Invoices and Billing API endpoints for descriptions..</param>
        /// <param name="amount">amount.</param>
        /// <param name="description">description.</param>
        public InvoiceDetailsStatementofAccountDetails(string date = default(string), string agingDate = default(string), string documentTypeId = default(string), int amount = default(int), int description = default(int))
        {
            this.Date = date;
            this.AgingDate = agingDate;
            this.DocumentTypeId = documentTypeId;
            this.Amount = amount;
            this.Description = description;
        }

        /// <summary>
        /// Date of invoice generation.
        /// </summary>
        /// <value>Date of invoice generation.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Date of invoices, credits or payments issued.
        /// </summary>
        /// <value>Date of invoices, credits or payments issued.</value>
        [DataMember(Name = "agingDate", EmitDefaultValue = false)]
        public string AgingDate { get; set; }

        /// <summary>
        /// See White Paper for Invoices and Billing API endpoints for descriptions.
        /// </summary>
        /// <value>See White Paper for Invoices and Billing API endpoints for descriptions.</value>
        [DataMember(Name = "documentTypeId", EmitDefaultValue = false)]
        public string DocumentTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public int Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceDetailsStatementofAccountDetails {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  AgingDate: ").Append(AgingDate).Append("\n");
            sb.Append("  DocumentTypeId: ").Append(DocumentTypeId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceDetailsStatementofAccountDetails);
        }

        /// <summary>
        /// Returns true if InvoiceDetailsStatementofAccountDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceDetailsStatementofAccountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceDetailsStatementofAccountDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.AgingDate == input.AgingDate ||
                    (this.AgingDate != null &&
                    this.AgingDate.Equals(input.AgingDate))
                ) && 
                (
                    this.DocumentTypeId == input.DocumentTypeId ||
                    (this.DocumentTypeId != null &&
                    this.DocumentTypeId.Equals(input.DocumentTypeId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description.Equals(input.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.AgingDate != null)
                {
                    hashCode = (hashCode * 59) + this.AgingDate.GetHashCode();
                }
                if (this.DocumentTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentTypeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
