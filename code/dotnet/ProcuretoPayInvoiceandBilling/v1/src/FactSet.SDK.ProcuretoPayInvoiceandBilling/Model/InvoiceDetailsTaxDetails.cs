/*
 * Invoice and Billing Endpoints
 *
 * API endpoints for managing and downloading FactSet Invoices
 *
 * The version of the OpenAPI document: 1K
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayInvoiceandBilling.Model
{
    /// <summary>
    /// InvoiceDetailsTaxDetails
    /// </summary>
    [DataContract(Name = "invoiceDetails_taxDetails")]
    public partial class InvoiceDetailsTaxDetails : IEquatable<InvoiceDetailsTaxDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetailsTaxDetails" /> class.
        /// </summary>
        /// <param name="services">services.</param>
        /// <param name="tax">tax.</param>
        /// <param name="allocationPercent">Taxes allocation to a particular TaxZone.</param>
        /// <param name="taxRate">taxRate.</param>
        /// <param name="taxZone">taxZone.</param>
        /// <param name="currencySymbol">currencySymbol.</param>
        /// <param name="conversionRatio">conversionRatio.</param>
        /// <param name="ukExchangeRate">ukExchangeRate.</param>
        public InvoiceDetailsTaxDetails(int services = default(int), int tax = default(int), int allocationPercent = default(int), string taxRate = default(string), string taxZone = default(string), string currencySymbol = default(string), int conversionRatio = default(int), int ukExchangeRate = default(int))
        {
            this.Services = services;
            this.Tax = tax;
            this.AllocationPercent = allocationPercent;
            this.TaxRate = taxRate;
            this.TaxZone = taxZone;
            this.CurrencySymbol = currencySymbol;
            this.ConversionRatio = conversionRatio;
            this.UkExchangeRate = ukExchangeRate;
        }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name = "services", EmitDefaultValue = false)]
        public int Services { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name = "tax", EmitDefaultValue = false)]
        public int Tax { get; set; }

        /// <summary>
        /// Taxes allocation to a particular TaxZone
        /// </summary>
        /// <value>Taxes allocation to a particular TaxZone</value>
        [DataMember(Name = "allocationPercent", EmitDefaultValue = false)]
        public int AllocationPercent { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name = "taxRate", EmitDefaultValue = false)]
        public string TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets TaxZone
        /// </summary>
        [DataMember(Name = "taxZone", EmitDefaultValue = false)]
        public string TaxZone { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        [DataMember(Name = "currencySymbol", EmitDefaultValue = false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Gets or Sets ConversionRatio
        /// </summary>
        [DataMember(Name = "conversionRatio", EmitDefaultValue = false)]
        public int ConversionRatio { get; set; }

        /// <summary>
        /// Gets or Sets UkExchangeRate
        /// </summary>
        [DataMember(Name = "ukExchangeRate", EmitDefaultValue = false)]
        public int UkExchangeRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceDetailsTaxDetails {\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  AllocationPercent: ").Append(AllocationPercent).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  TaxZone: ").Append(TaxZone).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  ConversionRatio: ").Append(ConversionRatio).Append("\n");
            sb.Append("  UkExchangeRate: ").Append(UkExchangeRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceDetailsTaxDetails);
        }

        /// <summary>
        /// Returns true if InvoiceDetailsTaxDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceDetailsTaxDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceDetailsTaxDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Services == input.Services ||
                    this.Services.Equals(input.Services)
                ) && 
                (
                    this.Tax == input.Tax ||
                    this.Tax.Equals(input.Tax)
                ) && 
                (
                    this.AllocationPercent == input.AllocationPercent ||
                    this.AllocationPercent.Equals(input.AllocationPercent)
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.TaxZone == input.TaxZone ||
                    (this.TaxZone != null &&
                    this.TaxZone.Equals(input.TaxZone))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.ConversionRatio == input.ConversionRatio ||
                    this.ConversionRatio.Equals(input.ConversionRatio)
                ) && 
                (
                    this.UkExchangeRate == input.UkExchangeRate ||
                    this.UkExchangeRate.Equals(input.UkExchangeRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Services.GetHashCode();
                hashCode = (hashCode * 59) + this.Tax.GetHashCode();
                hashCode = (hashCode * 59) + this.AllocationPercent.GetHashCode();
                if (this.TaxRate != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRate.GetHashCode();
                }
                if (this.TaxZone != null)
                {
                    hashCode = (hashCode * 59) + this.TaxZone.GetHashCode();
                }
                if (this.CurrencySymbol != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencySymbol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConversionRatio.GetHashCode();
                hashCode = (hashCode * 59) + this.UkExchangeRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
