/*
 * Invoice and Billing Endpoints
 *
 * API endpoints for managing and downloading FactSet Invoices
 *
 * The version of the OpenAPI document: 1K
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayInvoiceandBilling.Model
{
    /// <summary>
    /// InvoiceDetails
    /// </summary>
    [DataContract(Name = "invoiceDetails")]
    public partial class InvoiceDetails : IEquatable<InvoiceDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetails" /> class.
        /// </summary>
        /// <param name="invoiceTitle">invoiceTitle.</param>
        /// <param name="invoiceId">&#x3D;accountId + 2 char year + 2 char month.</param>
        /// <param name="invoicedate">invoicedate.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="servicesRenderedCompanyName">If invoice is paid by a 3rd party company the name will appear here..</param>
        /// <param name="startPeriod">startPeriod.</param>
        /// <param name="endPeriod">endPeriod.</param>
        /// <param name="currencyId">currencyId.</param>
        /// <param name="currencySymbol">currencySymbol.</param>
        /// <param name="openingBalance">Any prior unpaid balances..</param>
        /// <param name="billingAdjustementsTotal">billingAdjustementsTotal.</param>
        /// <param name="tax">tax.</param>
        /// <param name="closingBalance">Current account balance..</param>
        /// <param name="serviceDetails">serviceDetails.</param>
        /// <param name="nonRecurringDetails">nonRecurringDetails.</param>
        /// <param name="taxDetails">taxDetails.</param>
        /// <param name="statementofAccountDetails">statementofAccountDetails.</param>
        /// <param name="subscriptionChanges">subscriptionChanges.</param>
        /// <param name="notes">notes.</param>
        /// <param name="billingAdjustments">billingAdjustments.</param>
        public InvoiceDetails(string invoiceTitle = default(string), string invoiceId = default(string), string invoicedate = default(string), string accountId = default(string), string companyName = default(string), string servicesRenderedCompanyName = default(string), string startPeriod = default(string), string endPeriod = default(string), string currencyId = default(string), string currencySymbol = default(string), int openingBalance = default(int), int billingAdjustementsTotal = default(int), int tax = default(int), int closingBalance = default(int), InvoiceDetailsServiceDetails serviceDetails = default(InvoiceDetailsServiceDetails), InvoiceDetailsNonRecurringDetails nonRecurringDetails = default(InvoiceDetailsNonRecurringDetails), List<InvoiceDetailsTaxDetails> taxDetails = default(List<InvoiceDetailsTaxDetails>), List<InvoiceDetailsStatementofAccountDetails> statementofAccountDetails = default(List<InvoiceDetailsStatementofAccountDetails>), InvoiceDetailsSubscriptionChanges subscriptionChanges = default(InvoiceDetailsSubscriptionChanges), List<string> notes = default(List<string>), List<InvoiceDetailsBillingAdjustments> billingAdjustments = default(List<InvoiceDetailsBillingAdjustments>))
        {
            this.InvoiceTitle = invoiceTitle;
            this.InvoiceId = invoiceId;
            this.Invoicedate = invoicedate;
            this.AccountId = accountId;
            this.CompanyName = companyName;
            this.ServicesRenderedCompanyName = servicesRenderedCompanyName;
            this.StartPeriod = startPeriod;
            this.EndPeriod = endPeriod;
            this.CurrencyId = currencyId;
            this.CurrencySymbol = currencySymbol;
            this.OpeningBalance = openingBalance;
            this.BillingAdjustementsTotal = billingAdjustementsTotal;
            this.Tax = tax;
            this.ClosingBalance = closingBalance;
            this.ServiceDetails = serviceDetails;
            this.NonRecurringDetails = nonRecurringDetails;
            this.TaxDetails = taxDetails;
            this.StatementofAccountDetails = statementofAccountDetails;
            this.SubscriptionChanges = subscriptionChanges;
            this.Notes = notes;
            this.BillingAdjustments = billingAdjustments;
        }

        /// <summary>
        /// Gets or Sets InvoiceTitle
        /// </summary>
        [DataMember(Name = "invoiceTitle", EmitDefaultValue = false)]
        public string InvoiceTitle { get; set; }

        /// <summary>
        /// &#x3D;accountId + 2 char year + 2 char month
        /// </summary>
        /// <value>&#x3D;accountId + 2 char year + 2 char month</value>
        [DataMember(Name = "invoiceId", EmitDefaultValue = false)]
        public string InvoiceId { get; set; }

        /// <summary>
        /// Gets or Sets Invoicedate
        /// </summary>
        [DataMember(Name = "invoicedate", EmitDefaultValue = false)]
        public string Invoicedate { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// If invoice is paid by a 3rd party company the name will appear here.
        /// </summary>
        /// <value>If invoice is paid by a 3rd party company the name will appear here.</value>
        [DataMember(Name = "servicesRenderedCompanyName", EmitDefaultValue = false)]
        public string ServicesRenderedCompanyName { get; set; }

        /// <summary>
        /// Gets or Sets StartPeriod
        /// </summary>
        [DataMember(Name = "startPeriod", EmitDefaultValue = false)]
        public string StartPeriod { get; set; }

        /// <summary>
        /// Gets or Sets EndPeriod
        /// </summary>
        [DataMember(Name = "endPeriod", EmitDefaultValue = false)]
        public string EndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name = "currencyId", EmitDefaultValue = false)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        [DataMember(Name = "currencySymbol", EmitDefaultValue = false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Any prior unpaid balances.
        /// </summary>
        /// <value>Any prior unpaid balances.</value>
        [DataMember(Name = "openingBalance", EmitDefaultValue = false)]
        public int OpeningBalance { get; set; }

        /// <summary>
        /// Gets or Sets BillingAdjustementsTotal
        /// </summary>
        [DataMember(Name = "billingAdjustementsTotal", EmitDefaultValue = false)]
        public int BillingAdjustementsTotal { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name = "tax", EmitDefaultValue = false)]
        public int Tax { get; set; }

        /// <summary>
        /// Current account balance.
        /// </summary>
        /// <value>Current account balance.</value>
        [DataMember(Name = "closingBalance", EmitDefaultValue = false)]
        public int ClosingBalance { get; set; }

        /// <summary>
        /// Gets or Sets ServiceDetails
        /// </summary>
        [DataMember(Name = "serviceDetails", EmitDefaultValue = false)]
        public InvoiceDetailsServiceDetails ServiceDetails { get; set; }

        /// <summary>
        /// Gets or Sets NonRecurringDetails
        /// </summary>
        [DataMember(Name = "nonRecurringDetails", EmitDefaultValue = false)]
        public InvoiceDetailsNonRecurringDetails NonRecurringDetails { get; set; }

        /// <summary>
        /// Gets or Sets TaxDetails
        /// </summary>
        [DataMember(Name = "taxDetails", EmitDefaultValue = false)]
        public List<InvoiceDetailsTaxDetails> TaxDetails { get; set; }

        /// <summary>
        /// Gets or Sets StatementofAccountDetails
        /// </summary>
        [DataMember(Name = "statementofAccountDetails", EmitDefaultValue = false)]
        public List<InvoiceDetailsStatementofAccountDetails> StatementofAccountDetails { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionChanges
        /// </summary>
        [DataMember(Name = "subscriptionChanges", EmitDefaultValue = false)]
        public InvoiceDetailsSubscriptionChanges SubscriptionChanges { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public List<string> Notes { get; set; }

        /// <summary>
        /// Gets or Sets BillingAdjustments
        /// </summary>
        [DataMember(Name = "billingAdjustments", EmitDefaultValue = false)]
        public List<InvoiceDetailsBillingAdjustments> BillingAdjustments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceDetails {\n");
            sb.Append("  InvoiceTitle: ").Append(InvoiceTitle).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  Invoicedate: ").Append(Invoicedate).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  ServicesRenderedCompanyName: ").Append(ServicesRenderedCompanyName).Append("\n");
            sb.Append("  StartPeriod: ").Append(StartPeriod).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  OpeningBalance: ").Append(OpeningBalance).Append("\n");
            sb.Append("  BillingAdjustementsTotal: ").Append(BillingAdjustementsTotal).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  ClosingBalance: ").Append(ClosingBalance).Append("\n");
            sb.Append("  ServiceDetails: ").Append(ServiceDetails).Append("\n");
            sb.Append("  NonRecurringDetails: ").Append(NonRecurringDetails).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  StatementofAccountDetails: ").Append(StatementofAccountDetails).Append("\n");
            sb.Append("  SubscriptionChanges: ").Append(SubscriptionChanges).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  BillingAdjustments: ").Append(BillingAdjustments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceDetails);
        }

        /// <summary>
        /// Returns true if InvoiceDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InvoiceTitle == input.InvoiceTitle ||
                    (this.InvoiceTitle != null &&
                    this.InvoiceTitle.Equals(input.InvoiceTitle))
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                ) && 
                (
                    this.Invoicedate == input.Invoicedate ||
                    (this.Invoicedate != null &&
                    this.Invoicedate.Equals(input.Invoicedate))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.ServicesRenderedCompanyName == input.ServicesRenderedCompanyName ||
                    (this.ServicesRenderedCompanyName != null &&
                    this.ServicesRenderedCompanyName.Equals(input.ServicesRenderedCompanyName))
                ) && 
                (
                    this.StartPeriod == input.StartPeriod ||
                    (this.StartPeriod != null &&
                    this.StartPeriod.Equals(input.StartPeriod))
                ) && 
                (
                    this.EndPeriod == input.EndPeriod ||
                    (this.EndPeriod != null &&
                    this.EndPeriod.Equals(input.EndPeriod))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.OpeningBalance == input.OpeningBalance ||
                    this.OpeningBalance.Equals(input.OpeningBalance)
                ) && 
                (
                    this.BillingAdjustementsTotal == input.BillingAdjustementsTotal ||
                    this.BillingAdjustementsTotal.Equals(input.BillingAdjustementsTotal)
                ) && 
                (
                    this.Tax == input.Tax ||
                    this.Tax.Equals(input.Tax)
                ) && 
                (
                    this.ClosingBalance == input.ClosingBalance ||
                    this.ClosingBalance.Equals(input.ClosingBalance)
                ) && 
                (
                    this.ServiceDetails == input.ServiceDetails ||
                    (this.ServiceDetails != null &&
                    this.ServiceDetails.Equals(input.ServiceDetails))
                ) && 
                (
                    this.NonRecurringDetails == input.NonRecurringDetails ||
                    (this.NonRecurringDetails != null &&
                    this.NonRecurringDetails.Equals(input.NonRecurringDetails))
                ) && 
                (
                    this.TaxDetails == input.TaxDetails ||
                    this.TaxDetails != null &&
                    input.TaxDetails != null &&
                    this.TaxDetails.SequenceEqual(input.TaxDetails)
                ) && 
                (
                    this.StatementofAccountDetails == input.StatementofAccountDetails ||
                    this.StatementofAccountDetails != null &&
                    input.StatementofAccountDetails != null &&
                    this.StatementofAccountDetails.SequenceEqual(input.StatementofAccountDetails)
                ) && 
                (
                    this.SubscriptionChanges == input.SubscriptionChanges ||
                    (this.SubscriptionChanges != null &&
                    this.SubscriptionChanges.Equals(input.SubscriptionChanges))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.BillingAdjustments == input.BillingAdjustments ||
                    this.BillingAdjustments != null &&
                    input.BillingAdjustments != null &&
                    this.BillingAdjustments.SequenceEqual(input.BillingAdjustments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceTitle != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceTitle.GetHashCode();
                }
                if (this.InvoiceId != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceId.GetHashCode();
                }
                if (this.Invoicedate != null)
                {
                    hashCode = (hashCode * 59) + this.Invoicedate.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.ServicesRenderedCompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.ServicesRenderedCompanyName.GetHashCode();
                }
                if (this.StartPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.StartPeriod.GetHashCode();
                }
                if (this.EndPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.EndPeriod.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.CurrencySymbol != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencySymbol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OpeningBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.BillingAdjustementsTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.Tax.GetHashCode();
                hashCode = (hashCode * 59) + this.ClosingBalance.GetHashCode();
                if (this.ServiceDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceDetails.GetHashCode();
                }
                if (this.NonRecurringDetails != null)
                {
                    hashCode = (hashCode * 59) + this.NonRecurringDetails.GetHashCode();
                }
                if (this.TaxDetails != null)
                {
                    hashCode = (hashCode * 59) + this.TaxDetails.GetHashCode();
                }
                if (this.StatementofAccountDetails != null)
                {
                    hashCode = (hashCode * 59) + this.StatementofAccountDetails.GetHashCode();
                }
                if (this.SubscriptionChanges != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionChanges.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.BillingAdjustments != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAdjustments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
