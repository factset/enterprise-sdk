/*
 * Invoice and Billing Endpoints
 *
 * API endpoints for managing and downloading FactSet Invoices
 *
 * The version of the OpenAPI document: 1K
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayInvoiceandBilling.Model
{
    /// <summary>
    /// InvoiceDetailsServiceDetails
    /// </summary>
    [DataContract(Name = "invoiceDetails_serviceDetails")]
    public partial class InvoiceDetailsServiceDetails : IEquatable<InvoiceDetailsServiceDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetailsServiceDetails" /> class.
        /// </summary>
        /// <param name="exchangeFees">exchangeFees.</param>
        /// <param name="workstations">Invoice details returns arrays of objects designated by Product Groups. E.G. Workstations.</param>
        public InvoiceDetailsServiceDetails(List<InvoiceDetailsServiceDetailsExchangeFees> exchangeFees = default(List<InvoiceDetailsServiceDetailsExchangeFees>), List<InvoiceDetailsServiceDetailsExchangeFees> workstations = default(List<InvoiceDetailsServiceDetailsExchangeFees>))
        {
            this.ExchangeFees = exchangeFees;
            this.Workstations = workstations;
        }

        /// <summary>
        /// Gets or Sets ExchangeFees
        /// </summary>
        [DataMember(Name = "Exchange Fees", EmitDefaultValue = false)]
        public List<InvoiceDetailsServiceDetailsExchangeFees> ExchangeFees { get; set; }

        /// <summary>
        /// Invoice details returns arrays of objects designated by Product Groups. E.G. Workstations
        /// </summary>
        /// <value>Invoice details returns arrays of objects designated by Product Groups. E.G. Workstations</value>
        [DataMember(Name = "workstations", EmitDefaultValue = false)]
        public List<InvoiceDetailsServiceDetailsExchangeFees> Workstations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceDetailsServiceDetails {\n");
            sb.Append("  ExchangeFees: ").Append(ExchangeFees).Append("\n");
            sb.Append("  Workstations: ").Append(Workstations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceDetailsServiceDetails);
        }

        /// <summary>
        /// Returns true if InvoiceDetailsServiceDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceDetailsServiceDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceDetailsServiceDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExchangeFees == input.ExchangeFees ||
                    this.ExchangeFees != null &&
                    input.ExchangeFees != null &&
                    this.ExchangeFees.SequenceEqual(input.ExchangeFees)
                ) && 
                (
                    this.Workstations == input.Workstations ||
                    this.Workstations != null &&
                    input.Workstations != null &&
                    this.Workstations.SequenceEqual(input.Workstations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExchangeFees != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeFees.GetHashCode();
                }
                if (this.Workstations != null)
                {
                    hashCode = (hashCode * 59) + this.Workstations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
