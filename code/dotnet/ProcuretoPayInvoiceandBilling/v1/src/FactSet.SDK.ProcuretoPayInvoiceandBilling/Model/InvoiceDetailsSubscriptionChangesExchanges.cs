/*
 * Invoice and Billing Endpoints
 *
 * API endpoints for managing and downloading FactSet Invoices
 *
 * The version of the OpenAPI document: 1K
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayInvoiceandBilling.Model
{
    /// <summary>
    /// InvoiceDetailsSubscriptionChangesExchanges
    /// </summary>
    [DataContract(Name = "invoiceDetails_subscriptionChanges_exchanges")]
    public partial class InvoiceDetailsSubscriptionChangesExchanges : IEquatable<InvoiceDetailsSubscriptionChangesExchanges>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetailsSubscriptionChangesExchanges" /> class.
        /// </summary>
        /// <param name="orderDate">orderDate.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="productId">productId.</param>
        /// <param name="productName">productName.</param>
        /// <param name="serial">serial.</param>
        /// <param name="individual">individual.</param>
        /// <param name="quanitity">quanitity.</param>
        /// <param name="amount">amount.</param>
        /// <param name="subTotalAmount">subTotalAmount.</param>
        /// <param name="lastMonthAdd">lastMonthAdd.</param>
        public InvoiceDetailsSubscriptionChangesExchanges(string orderDate = default(string), int orderId = default(int), string orderType = default(string), int productId = default(int), string productName = default(string), string serial = default(string), string individual = default(string), int quanitity = default(int), int amount = default(int), int subTotalAmount = default(int), bool lastMonthAdd = default(bool))
        {
            this.OrderDate = orderDate;
            this.OrderId = orderId;
            this.OrderType = orderType;
            this.ProductId = productId;
            this.ProductName = productName;
            this.Serial = serial;
            this.Individual = individual;
            this.Quanitity = quanitity;
            this.Amount = amount;
            this.SubTotalAmount = subTotalAmount;
            this.LastMonthAdd = lastMonthAdd;
        }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name = "orderDate", EmitDefaultValue = false)]
        public string OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public int OrderId { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public int ProductId { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name = "productName", EmitDefaultValue = false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets Serial
        /// </summary>
        [DataMember(Name = "serial", EmitDefaultValue = false)]
        public string Serial { get; set; }

        /// <summary>
        /// Gets or Sets Individual
        /// </summary>
        [DataMember(Name = "individual", EmitDefaultValue = false)]
        public string Individual { get; set; }

        /// <summary>
        /// Gets or Sets Quanitity
        /// </summary>
        [DataMember(Name = "quanitity", EmitDefaultValue = false)]
        public int Quanitity { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets SubTotalAmount
        /// </summary>
        [DataMember(Name = "subTotalAmount", EmitDefaultValue = false)]
        public int SubTotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets LastMonthAdd
        /// </summary>
        [DataMember(Name = "lastMonthAdd", EmitDefaultValue = true)]
        public bool LastMonthAdd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceDetailsSubscriptionChangesExchanges {\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  Individual: ").Append(Individual).Append("\n");
            sb.Append("  Quanitity: ").Append(Quanitity).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SubTotalAmount: ").Append(SubTotalAmount).Append("\n");
            sb.Append("  LastMonthAdd: ").Append(LastMonthAdd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceDetailsSubscriptionChangesExchanges);
        }

        /// <summary>
        /// Returns true if InvoiceDetailsSubscriptionChangesExchanges instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceDetailsSubscriptionChangesExchanges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceDetailsSubscriptionChangesExchanges input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    this.ProductId.Equals(input.ProductId)
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.Serial == input.Serial ||
                    (this.Serial != null &&
                    this.Serial.Equals(input.Serial))
                ) && 
                (
                    this.Individual == input.Individual ||
                    (this.Individual != null &&
                    this.Individual.Equals(input.Individual))
                ) && 
                (
                    this.Quanitity == input.Quanitity ||
                    this.Quanitity.Equals(input.Quanitity)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.SubTotalAmount == input.SubTotalAmount ||
                    this.SubTotalAmount.Equals(input.SubTotalAmount)
                ) && 
                (
                    this.LastMonthAdd == input.LastMonthAdd ||
                    this.LastMonthAdd.Equals(input.LastMonthAdd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                if (this.OrderType != null)
                {
                    hashCode = (hashCode * 59) + this.OrderType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                if (this.ProductName != null)
                {
                    hashCode = (hashCode * 59) + this.ProductName.GetHashCode();
                }
                if (this.Serial != null)
                {
                    hashCode = (hashCode * 59) + this.Serial.GetHashCode();
                }
                if (this.Individual != null)
                {
                    hashCode = (hashCode * 59) + this.Individual.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quanitity.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.SubTotalAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.LastMonthAdd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
