/*
 * Invoice and Billing Endpoints
 *
 * API endpoints for managing and downloading FactSet Invoices
 *
 * The version of the OpenAPI document: 1K
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ProcuretoPayInvoiceandBilling.Client;
using FactSet.SDK.ProcuretoPayInvoiceandBilling.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ProcuretoPayInvoiceandBilling.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoiceAndBillingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns Fits report by given FITSID
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fitsID">FITSID can be determined by concatenating the AccountNumber + two-digit year (e.g 21 for 2021) and two-digit month (e.g. 01 for January). Available AccountNumbers are available from the /listInvoices endpoint.</param>
        /// <returns>List<Object></returns>
        List<Object> GetFitsReportGet(string fitsID);

        /// <summary>
        /// Returns Fits report by given FITSID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fitsID">FITSID can be determined by concatenating the AccountNumber + two-digit year (e.g 21 for 2021) and two-digit month (e.g. 01 for January). Available AccountNumbers are available from the /listInvoices endpoint.</param>
        /// <returns>ApiResponse of List<Object></returns>
        ApiResponse<List<Object>> GetFitsReportGetWithHttpInfo(string fitsID);
        /// <summary>
        /// Returns PDF of specific invoice
        /// </summary>
        /// <remarks>
        /// A .PDF File
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code you wish to download</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetInvoiceGet(string invoiceId);

        /// <summary>
        /// Returns PDF of specific invoice
        /// </summary>
        /// <remarks>
        /// A .PDF File
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code you wish to download</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetInvoiceGetWithHttpInfo(string invoiceId);
        /// <summary>
        /// Returns details on specific invoice.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code to query. See /listInvoices endpoint for list of available invoices to query.</param>
        /// <returns>InvoiceDetails</returns>
        InvoiceDetails InvoiceDetailsGet(string invoiceId);

        /// <summary>
        /// Returns details on specific invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code to query. See /listInvoices endpoint for list of available invoices to query.</param>
        /// <returns>ApiResponse of InvoiceDetails</returns>
        ApiResponse<InvoiceDetails> InvoiceDetailsGetWithHttpInfo(string invoiceId);
        /// <summary>
        /// Returns all available invoices
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Object></returns>
        List<Object> ListInvoicesGet();

        /// <summary>
        /// Returns all available invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<Object></returns>
        ApiResponse<List<Object>> ListInvoicesGetWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoiceAndBillingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns Fits report by given FITSID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fitsID">FITSID can be determined by concatenating the AccountNumber + two-digit year (e.g 21 for 2021) and two-digit month (e.g. 01 for January). Available AccountNumbers are available from the /listInvoices endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetFitsReportGetAsync(string fitsID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns Fits report by given FITSID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fitsID">FITSID can be determined by concatenating the AccountNumber + two-digit year (e.g 21 for 2021) and two-digit month (e.g. 01 for January). Available AccountNumbers are available from the /listInvoices endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<Object>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetFitsReportGetWithHttpInfoAsync(string fitsID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns PDF of specific invoice
        /// </summary>
        /// <remarks>
        /// A .PDF File
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code you wish to download</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceGetAsync(string invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns PDF of specific invoice
        /// </summary>
        /// <remarks>
        /// A .PDF File
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code you wish to download</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetInvoiceGetWithHttpInfoAsync(string invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns details on specific invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code to query. See /listInvoices endpoint for list of available invoices to query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceDetails</returns>
        System.Threading.Tasks.Task<InvoiceDetails> InvoiceDetailsGetAsync(string invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns details on specific invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code to query. See /listInvoices endpoint for list of available invoices to query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceDetails>> InvoiceDetailsGetWithHttpInfoAsync(string invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns all available invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> ListInvoicesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all available invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<Object>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> ListInvoicesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoiceAndBillingApi : IInvoiceAndBillingApiSync, IInvoiceAndBillingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvoiceAndBillingApi : IInvoiceAndBillingApi
    {
        private FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFitsReportGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<Object>) },
            { (HttpStatusCode)404, typeof(string) },
            { (HttpStatusCode)429, typeof(string) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInvoiceGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(System.IO.Stream) },
            { (HttpStatusCode)404, typeof(string) },
            { (HttpStatusCode)429, typeof(string) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> InvoiceDetailsGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InvoiceDetails) },
            { (HttpStatusCode)404, typeof(string) },
            { (HttpStatusCode)429, typeof(string) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> ListInvoicesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<Object>) },
            { (HttpStatusCode)404, typeof(string) },
            { (HttpStatusCode)429, typeof(string) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceAndBillingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoiceAndBillingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceAndBillingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoiceAndBillingApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceAndBillingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvoiceAndBillingApi(FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceAndBillingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InvoiceAndBillingApi(FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ISynchronousClient client, FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.IAsynchronousClient asyncClient, FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns Fits report by given FITSID 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fitsID">FITSID can be determined by concatenating the AccountNumber + two-digit year (e.g 21 for 2021) and two-digit month (e.g. 01 for January). Available AccountNumbers are available from the /listInvoices endpoint.</param>
        /// <returns>List<Object></returns>
        public List<Object> GetFitsReportGet(string fitsID)
        {
            var localVarResponse = GetFitsReportGetWithHttpInfo(fitsID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Fits report by given FITSID 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fitsID">FITSID can be determined by concatenating the AccountNumber + two-digit year (e.g 21 for 2021) and two-digit month (e.g. 01 for January). Available AccountNumbers are available from the /listInvoices endpoint.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse<List<Object>> GetFitsReportGetWithHttpInfo(string fitsID)
        {
            // verify the required parameter 'fitsID' is set
            if (fitsID == null)
            {
                throw new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException(400, "Missing required parameter 'fitsID' when calling InvoiceAndBillingApi->GetFitsReportGet");
            }

            FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.ParameterToMultiMap("", "fitsID", fitsID));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFitsReportGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<Object>>("/getFitsReport", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFitsReportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns Fits report by given FITSID 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fitsID">FITSID can be determined by concatenating the AccountNumber + two-digit year (e.g 21 for 2021) and two-digit month (e.g. 01 for January). Available AccountNumbers are available from the /listInvoices endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>>GetFitsReportGetAsync(string fitsID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFitsReportGetWithHttpInfoAsync(fitsID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Fits report by given FITSID 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fitsID">FITSID can be determined by concatenating the AccountNumber + two-digit year (e.g 21 for 2021) and two-digit month (e.g. 01 for January). Available AccountNumbers are available from the /listInvoices endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetFitsReportGetWithHttpInfoAsync(string fitsID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fitsID' is set
            if (fitsID == null)
            {
                throw new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException(400, "Missing required parameter 'fitsID' when calling InvoiceAndBillingApi->GetFitsReportGet");
            }


            FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.ParameterToMultiMap("", "fitsID", fitsID));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFitsReportGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Object>>("/getFitsReport", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFitsReportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns PDF of specific invoice A .PDF File
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code you wish to download</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetInvoiceGet(string invoiceId)
        {
            var localVarResponse = GetInvoiceGetWithHttpInfo(invoiceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns PDF of specific invoice A .PDF File
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code you wish to download</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetInvoiceGetWithHttpInfo(string invoiceId)
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
            {
                throw new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling InvoiceAndBillingApi->GetInvoiceGet");
            }

            FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "appliction/pdf",
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.ParameterToMultiMap("", "invoiceId", invoiceId));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInvoiceGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            System.IO.Stream>("/getInvoice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns PDF of specific invoice A .PDF File
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code you wish to download</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream>GetInvoiceGetAsync(string invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInvoiceGetWithHttpInfoAsync(invoiceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns PDF of specific invoice A .PDF File
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code you wish to download</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetInvoiceGetWithHttpInfoAsync(string invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
            {
                throw new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling InvoiceAndBillingApi->GetInvoiceGet");
            }


            FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "appliction/pdf",
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.ParameterToMultiMap("", "invoiceId", invoiceId));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInvoiceGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/getInvoice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details on specific invoice. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code to query. See /listInvoices endpoint for list of available invoices to query.</param>
        /// <returns>InvoiceDetails</returns>
        public InvoiceDetails InvoiceDetailsGet(string invoiceId)
        {
            var localVarResponse = InvoiceDetailsGetWithHttpInfo(invoiceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details on specific invoice. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code to query. See /listInvoices endpoint for list of available invoices to query.</param>
        /// <returns>ApiResponse of InvoiceDetails</returns>
        public ApiResponse<InvoiceDetails> InvoiceDetailsGetWithHttpInfo(string invoiceId)
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
            {
                throw new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling InvoiceAndBillingApi->InvoiceDetailsGet");
            }

            FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.ParameterToMultiMap("", "invoiceId", invoiceId));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = InvoiceDetailsGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InvoiceDetails>("/invoiceDetails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns details on specific invoice. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code to query. See /listInvoices endpoint for list of available invoices to query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceDetails</returns>
        public async System.Threading.Tasks.Task<InvoiceDetails>InvoiceDetailsGetAsync(string invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await InvoiceDetailsGetWithHttpInfoAsync(invoiceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details on specific invoice. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId">Invoice code to query. See /listInvoices endpoint for list of available invoices to query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceDetails)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InvoiceDetails>> InvoiceDetailsGetWithHttpInfoAsync(string invoiceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
            {
                throw new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling InvoiceAndBillingApi->InvoiceDetailsGet");
            }


            FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.ParameterToMultiMap("", "invoiceId", invoiceId));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = InvoiceDetailsGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InvoiceDetails>("/invoiceDetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all available invoices 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Object></returns>
        public List<Object> ListInvoicesGet()
        {
            var localVarResponse = ListInvoicesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all available invoices 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse<List<Object>> ListInvoicesGetWithHttpInfo()
        {
            FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = ListInvoicesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<Object>>("/listInvoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInvoicesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns all available invoices 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>>ListInvoicesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await ListInvoicesGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all available invoices 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> ListInvoicesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayInvoiceandBilling.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = ListInvoicesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Object>>("/listInvoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInvoicesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
