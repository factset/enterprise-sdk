/*
 * FactSet Entity API
 *
 * Using an entity centric data model, FactSet's Entity API provides access to FactSet's complete security and entity level symbology, comprehensive entity reference data, and all of the necessary relationships and connections to create a foundation that tightly correlates disparate sources of information to a master entity identifier. Use this API to quickly understand the full entity structure and related securities.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetEntity.Client;
using FactSet.SDK.FactSetEntity.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetEntity.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntitySecuritiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity.
        /// </summary>
        /// <remarks>
        /// Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="securityType">The category describes which security types will be returned in the response. Defined as: * **EQ** &#x3D; All related traded equity listings * **AEQ** &#x3D; All active traded and non-traded equity listings * **PR** &#x3D; All active preferred securities * **F** &#x3D; All active funds * **FI** &#x3D; All debt instruments * **ALL** &#x3D; All related traded equity listings and debt  (optional, default to EQ)</param>
        /// <returns>EntitySecuritiesResponse</returns>
        EntitySecuritiesResponse GetEntitySecurities(List<string> ids, string securityType = default(string));

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity.
        /// </summary>
        /// <remarks>
        /// Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="securityType">The category describes which security types will be returned in the response. Defined as: * **EQ** &#x3D; All related traded equity listings * **AEQ** &#x3D; All active traded and non-traded equity listings * **PR** &#x3D; All active preferred securities * **F** &#x3D; All active funds * **FI** &#x3D; All debt instruments * **ALL** &#x3D; All related traded equity listings and debt  (optional, default to EQ)</param>
        /// <returns>ApiResponse of EntitySecuritiesResponse</returns>
        ApiResponse<EntitySecuritiesResponse> GetEntitySecuritiesWithHttpInfo(List<string> ids, string securityType = default(string));
        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity.
        /// </summary>
        /// <remarks>
        /// Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySecuritiesRequest">Request Body to request a list of Entity Security objects.</param>
        /// <returns>EntitySecuritiesResponse</returns>
        EntitySecuritiesResponse PostEntitySecurities(EntitySecuritiesRequest entitySecuritiesRequest);

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity.
        /// </summary>
        /// <remarks>
        /// Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySecuritiesRequest">Request Body to request a list of Entity Security objects.</param>
        /// <returns>ApiResponse of EntitySecuritiesResponse</returns>
        ApiResponse<EntitySecuritiesResponse> PostEntitySecuritiesWithHttpInfo(EntitySecuritiesRequest entitySecuritiesRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntitySecuritiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity.
        /// </summary>
        /// <remarks>
        /// Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="securityType">The category describes which security types will be returned in the response. Defined as: * **EQ** &#x3D; All related traded equity listings * **AEQ** &#x3D; All active traded and non-traded equity listings * **PR** &#x3D; All active preferred securities * **F** &#x3D; All active funds * **FI** &#x3D; All debt instruments * **ALL** &#x3D; All related traded equity listings and debt  (optional, default to EQ)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntitySecuritiesResponse</returns>
        System.Threading.Tasks.Task<EntitySecuritiesResponse> GetEntitySecuritiesAsync(List<string> ids, string securityType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity.
        /// </summary>
        /// <remarks>
        /// Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="securityType">The category describes which security types will be returned in the response. Defined as: * **EQ** &#x3D; All related traded equity listings * **AEQ** &#x3D; All active traded and non-traded equity listings * **PR** &#x3D; All active preferred securities * **F** &#x3D; All active funds * **FI** &#x3D; All debt instruments * **ALL** &#x3D; All related traded equity listings and debt  (optional, default to EQ)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntitySecuritiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitySecuritiesResponse>> GetEntitySecuritiesWithHttpInfoAsync(List<string> ids, string securityType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity.
        /// </summary>
        /// <remarks>
        /// Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySecuritiesRequest">Request Body to request a list of Entity Security objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntitySecuritiesResponse</returns>
        System.Threading.Tasks.Task<EntitySecuritiesResponse> PostEntitySecuritiesAsync(EntitySecuritiesRequest entitySecuritiesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity.
        /// </summary>
        /// <remarks>
        /// Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySecuritiesRequest">Request Body to request a list of Entity Security objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntitySecuritiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitySecuritiesResponse>> PostEntitySecuritiesWithHttpInfoAsync(EntitySecuritiesRequest entitySecuritiesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntitySecuritiesApi : IEntitySecuritiesApiSync, IEntitySecuritiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntitySecuritiesApi : IEntitySecuritiesApi
    {
        private FactSet.SDK.FactSetEntity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetEntitySecuritiesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntitySecuritiesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostEntitySecuritiesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntitySecuritiesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitySecuritiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntitySecuritiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitySecuritiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntitySecuritiesApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetEntity.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetEntity.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetEntity.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetEntity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitySecuritiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntitySecuritiesApi(FactSet.SDK.FactSetEntity.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetEntity.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetEntity.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetEntity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitySecuritiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EntitySecuritiesApi(FactSet.SDK.FactSetEntity.Client.ISynchronousClient client, FactSet.SDK.FactSetEntity.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetEntity.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetEntity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetEntity.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetEntity.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetEntity.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetEntity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity. Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="securityType">The category describes which security types will be returned in the response. Defined as: * **EQ** &#x3D; All related traded equity listings * **AEQ** &#x3D; All active traded and non-traded equity listings * **PR** &#x3D; All active preferred securities * **F** &#x3D; All active funds * **FI** &#x3D; All debt instruments * **ALL** &#x3D; All related traded equity listings and debt  (optional, default to EQ)</param>
        /// <returns>EntitySecuritiesResponse</returns>
        public EntitySecuritiesResponse GetEntitySecurities(List<string> ids, string securityType = default(string))
        {
            var localVarResponse = GetEntitySecuritiesWithHttpInfo(ids, securityType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity. Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="securityType">The category describes which security types will be returned in the response. Defined as: * **EQ** &#x3D; All related traded equity listings * **AEQ** &#x3D; All active traded and non-traded equity listings * **PR** &#x3D; All active preferred securities * **F** &#x3D; All active funds * **FI** &#x3D; All debt instruments * **ALL** &#x3D; All related traded equity listings and debt  (optional, default to EQ)</param>
        /// <returns>ApiResponse of EntitySecuritiesResponse</returns>
        public ApiResponse<EntitySecuritiesResponse> GetEntitySecuritiesWithHttpInfo(List<string> ids, string securityType = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'ids' when calling EntitySecuritiesApi->GetEntitySecurities");
            }

            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (securityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("", "securityType", securityType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEntitySecuritiesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EntitySecuritiesResponse>("/factset-entity/v1/entity-securities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntitySecurities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity. Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="securityType">The category describes which security types will be returned in the response. Defined as: * **EQ** &#x3D; All related traded equity listings * **AEQ** &#x3D; All active traded and non-traded equity listings * **PR** &#x3D; All active preferred securities * **F** &#x3D; All active funds * **FI** &#x3D; All debt instruments * **ALL** &#x3D; All related traded equity listings and debt  (optional, default to EQ)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntitySecuritiesResponse</returns>
        public async System.Threading.Tasks.Task<EntitySecuritiesResponse>GetEntitySecuritiesAsync(List<string> ids, string securityType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEntitySecuritiesWithHttpInfoAsync(ids, securityType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity. Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="securityType">The category describes which security types will be returned in the response. Defined as: * **EQ** &#x3D; All related traded equity listings * **AEQ** &#x3D; All active traded and non-traded equity listings * **PR** &#x3D; All active preferred securities * **F** &#x3D; All active funds * **FI** &#x3D; All debt instruments * **ALL** &#x3D; All related traded equity listings and debt  (optional, default to EQ)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntitySecuritiesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntitySecuritiesResponse>> GetEntitySecuritiesWithHttpInfoAsync(List<string> ids, string securityType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'ids' when calling EntitySecuritiesApi->GetEntitySecurities");
            }


            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (securityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("", "securityType", securityType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEntitySecuritiesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EntitySecuritiesResponse>("/factset-entity/v1/entity-securities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntitySecurities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity. Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySecuritiesRequest">Request Body to request a list of Entity Security objects.</param>
        /// <returns>EntitySecuritiesResponse</returns>
        public EntitySecuritiesResponse PostEntitySecurities(EntitySecuritiesRequest entitySecuritiesRequest)
        {
            var localVarResponse = PostEntitySecuritiesWithHttpInfo(entitySecuritiesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity. Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySecuritiesRequest">Request Body to request a list of Entity Security objects.</param>
        /// <returns>ApiResponse of EntitySecuritiesResponse</returns>
        public ApiResponse<EntitySecuritiesResponse> PostEntitySecuritiesWithHttpInfo(EntitySecuritiesRequest entitySecuritiesRequest)
        {
            // verify the required parameter 'entitySecuritiesRequest' is set
            if (entitySecuritiesRequest == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'entitySecuritiesRequest' when calling EntitySecuritiesApi->PostEntitySecurities");
            }

            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = entitySecuritiesRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostEntitySecuritiesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EntitySecuritiesResponse>("/factset-entity/v1/entity-securities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEntitySecurities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity. Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySecuritiesRequest">Request Body to request a list of Entity Security objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntitySecuritiesResponse</returns>
        public async System.Threading.Tasks.Task<EntitySecuritiesResponse>PostEntitySecuritiesAsync(EntitySecuritiesRequest entitySecuritiesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostEntitySecuritiesWithHttpInfoAsync(entitySecuritiesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Equity Exchange Listings and all debt instruments issued for the requested entity. Returns all Equity Exchange Listings (ticker-exchange) and all debt instruments (cusips) issued for the requested entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySecuritiesRequest">Request Body to request a list of Entity Security objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntitySecuritiesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntitySecuritiesResponse>> PostEntitySecuritiesWithHttpInfoAsync(EntitySecuritiesRequest entitySecuritiesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entitySecuritiesRequest' is set
            if (entitySecuritiesRequest == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'entitySecuritiesRequest' when calling EntitySecuritiesApi->PostEntitySecurities");
            }


            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = entitySecuritiesRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostEntitySecuritiesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EntitySecuritiesResponse>("/factset-entity/v1/entity-securities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEntitySecurities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
