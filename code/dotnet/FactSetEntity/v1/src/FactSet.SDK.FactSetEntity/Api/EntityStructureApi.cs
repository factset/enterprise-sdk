/*
 * FactSet Entity API
 *
 * Using an entity centric data model, FactSet's Entity API provides access to FactSet's complete security and entity level symbology, comprehensive entity reference data, and all of the necessary relationships and connections to create a foundation that tightly correlates disparate sources of information to a master entity identifier. Use this API to quickly understand the full entity structure and related securities.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetEntity.Client;
using FactSet.SDK.FactSetEntity.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetEntity.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityStructureApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <returns>EntityStructureResponse</returns>
        EntityStructureResponse GetEntityStructure(List<string> ids, int? level = default(int?), int? active = default(int?));

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <returns>ApiResponse of EntityStructureResponse</returns>
        ApiResponse<EntityStructureResponse> GetEntityStructureWithHttpInfo(List<string> ids, int? level = default(int?), int? active = default(int?));
        /// <summary>
        /// Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities.
        /// </summary>
        /// <remarks>
        /// Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <returns>UltimateEntityStructureResponse</returns>
        UltimateEntityStructureResponse GetUltimateEntityStructure(List<string> ids, int? level = default(int?), int? active = default(int?));

        /// <summary>
        /// Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities.
        /// </summary>
        /// <remarks>
        /// Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <returns>ApiResponse of UltimateEntityStructureResponse</returns>
        ApiResponse<UltimateEntityStructureResponse> GetUltimateEntityStructureWithHttpInfo(List<string> ids, int? level = default(int?), int? active = default(int?));
        /// <summary>
        /// Returns all active or inactive entities below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityStructureRequest">Request Body to request a list of Entity Structure objects.</param>
        /// <returns>EntityStructureResponse</returns>
        EntityStructureResponse PostEntityStructure(EntityStructureRequest entityStructureRequest);

        /// <summary>
        /// Returns all active or inactive entities below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityStructureRequest">Request Body to request a list of Entity Structure objects.</param>
        /// <returns>ApiResponse of EntityStructureResponse</returns>
        ApiResponse<EntityStructureResponse> PostEntityStructureWithHttpInfo(EntityStructureRequest entityStructureRequest);
        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ultimateEntityStructureRequest">Request Body to request a list of Ultimate Entity Structure objects.</param>
        /// <returns>UltimateEntityStructureResponse</returns>
        UltimateEntityStructureResponse PostUltimateEntityStructure(UltimateEntityStructureRequest ultimateEntityStructureRequest);

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ultimateEntityStructureRequest">Request Body to request a list of Ultimate Entity Structure objects.</param>
        /// <returns>ApiResponse of UltimateEntityStructureResponse</returns>
        ApiResponse<UltimateEntityStructureResponse> PostUltimateEntityStructureWithHttpInfo(UltimateEntityStructureRequest ultimateEntityStructureRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityStructureApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityStructureResponse</returns>
        System.Threading.Tasks.Task<EntityStructureResponse> GetEntityStructureAsync(List<string> ids, int? level = default(int?), int? active = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityStructureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityStructureResponse>> GetEntityStructureWithHttpInfoAsync(List<string> ids, int? level = default(int?), int? active = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities.
        /// </summary>
        /// <remarks>
        /// Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UltimateEntityStructureResponse</returns>
        System.Threading.Tasks.Task<UltimateEntityStructureResponse> GetUltimateEntityStructureAsync(List<string> ids, int? level = default(int?), int? active = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities.
        /// </summary>
        /// <remarks>
        /// Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UltimateEntityStructureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UltimateEntityStructureResponse>> GetUltimateEntityStructureWithHttpInfoAsync(List<string> ids, int? level = default(int?), int? active = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns all active or inactive entities below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityStructureRequest">Request Body to request a list of Entity Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityStructureResponse</returns>
        System.Threading.Tasks.Task<EntityStructureResponse> PostEntityStructureAsync(EntityStructureRequest entityStructureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all active or inactive entities below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityStructureRequest">Request Body to request a list of Entity Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityStructureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityStructureResponse>> PostEntityStructureWithHttpInfoAsync(EntityStructureRequest entityStructureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ultimateEntityStructureRequest">Request Body to request a list of Ultimate Entity Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UltimateEntityStructureResponse</returns>
        System.Threading.Tasks.Task<UltimateEntityStructureResponse> PostUltimateEntityStructureAsync(UltimateEntityStructureRequest ultimateEntityStructureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id.
        /// </summary>
        /// <remarks>
        /// Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ultimateEntityStructureRequest">Request Body to request a list of Ultimate Entity Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UltimateEntityStructureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UltimateEntityStructureResponse>> PostUltimateEntityStructureWithHttpInfoAsync(UltimateEntityStructureRequest ultimateEntityStructureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityStructureApi : IEntityStructureApiSync, IEntityStructureApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntityStructureApi : IEntityStructureApi
    {
        private FactSet.SDK.FactSetEntity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetEntityStructureResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityStructureResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetUltimateEntityStructureResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(UltimateEntityStructureResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostEntityStructureResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityStructureResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostUltimateEntityStructureResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(UltimateEntityStructureResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityStructureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityStructureApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityStructureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityStructureApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetEntity.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetEntity.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetEntity.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetEntity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityStructureApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntityStructureApi(FactSet.SDK.FactSetEntity.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetEntity.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetEntity.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetEntity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityStructureApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EntityStructureApi(FactSet.SDK.FactSetEntity.Client.ISynchronousClient client, FactSet.SDK.FactSetEntity.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetEntity.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetEntity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetEntity.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetEntity.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetEntity.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetEntity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id. Returns all active or inactive entities below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <returns>EntityStructureResponse</returns>
        public EntityStructureResponse GetEntityStructure(List<string> ids, int? level = default(int?), int? active = default(int?))
        {
            var localVarResponse = GetEntityStructureWithHttpInfo(ids, level, active);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id. Returns all active or inactive entities below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <returns>ApiResponse of EntityStructureResponse</returns>
        public ApiResponse<EntityStructureResponse> GetEntityStructureWithHttpInfo(List<string> ids, int? level = default(int?), int? active = default(int?))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'ids' when calling EntityStructureApi->GetEntityStructure");
            }

            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEntityStructureResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EntityStructureResponse>("/factset-entity/v1/entity-structures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityStructure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id. Returns all active or inactive entities below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityStructureResponse</returns>
        public async System.Threading.Tasks.Task<EntityStructureResponse>GetEntityStructureAsync(List<string> ids, int? level = default(int?), int? active = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEntityStructureWithHttpInfoAsync(ids, level, active, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id. Returns all active or inactive entities below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityStructureResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityStructureResponse>> GetEntityStructureWithHttpInfoAsync(List<string> ids, int? level = default(int?), int? active = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'ids' when calling EntityStructureApi->GetEntityStructure");
            }


            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEntityStructureResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityStructureResponse>("/factset-entity/v1/entity-structures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityStructure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities. Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <returns>UltimateEntityStructureResponse</returns>
        public UltimateEntityStructureResponse GetUltimateEntityStructure(List<string> ids, int? level = default(int?), int? active = default(int?))
        {
            var localVarResponse = GetUltimateEntityStructureWithHttpInfo(ids, level, active);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities. Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <returns>ApiResponse of UltimateEntityStructureResponse</returns>
        public ApiResponse<UltimateEntityStructureResponse> GetUltimateEntityStructureWithHttpInfo(List<string> ids, int? level = default(int?), int? active = default(int?))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'ids' when calling EntityStructureApi->GetUltimateEntityStructure");
            }

            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetUltimateEntityStructureResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            UltimateEntityStructureResponse>("/factset-entity/v1/ultimate-entity-structures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUltimateEntityStructure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities. Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UltimateEntityStructureResponse</returns>
        public async System.Threading.Tasks.Task<UltimateEntityStructureResponse>GetUltimateEntityStructureAsync(List<string> ids, int? level = default(int?), int? active = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetUltimateEntityStructureWithHttpInfoAsync(ids, level, active, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities. Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 100 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="level">Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (optional, default to -1)</param>
        /// <param name="active">Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UltimateEntityStructureResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<UltimateEntityStructureResponse>> GetUltimateEntityStructureWithHttpInfoAsync(List<string> ids, int? level = default(int?), int? active = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'ids' when calling EntityStructureApi->GetUltimateEntityStructure");
            }


            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("", "level", level));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetUltimateEntityStructureResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UltimateEntityStructureResponse>("/factset-entity/v1/ultimate-entity-structures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUltimateEntityStructure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all active or inactive entities below the requested entity id. Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityStructureRequest">Request Body to request a list of Entity Structure objects.</param>
        /// <returns>EntityStructureResponse</returns>
        public EntityStructureResponse PostEntityStructure(EntityStructureRequest entityStructureRequest)
        {
            var localVarResponse = PostEntityStructureWithHttpInfo(entityStructureRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all active or inactive entities below the requested entity id. Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityStructureRequest">Request Body to request a list of Entity Structure objects.</param>
        /// <returns>ApiResponse of EntityStructureResponse</returns>
        public ApiResponse<EntityStructureResponse> PostEntityStructureWithHttpInfo(EntityStructureRequest entityStructureRequest)
        {
            // verify the required parameter 'entityStructureRequest' is set
            if (entityStructureRequest == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'entityStructureRequest' when calling EntityStructureApi->PostEntityStructure");
            }

            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = entityStructureRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostEntityStructureResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EntityStructureResponse>("/factset-entity/v1/entity-structures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEntityStructure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns all active or inactive entities below the requested entity id. Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityStructureRequest">Request Body to request a list of Entity Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityStructureResponse</returns>
        public async System.Threading.Tasks.Task<EntityStructureResponse>PostEntityStructureAsync(EntityStructureRequest entityStructureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostEntityStructureWithHttpInfoAsync(entityStructureRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all active or inactive entities below the requested entity id. Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityStructureRequest">Request Body to request a list of Entity Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityStructureResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityStructureResponse>> PostEntityStructureWithHttpInfoAsync(EntityStructureRequest entityStructureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityStructureRequest' is set
            if (entityStructureRequest == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'entityStructureRequest' when calling EntityStructureApi->PostEntityStructure");
            }


            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = entityStructureRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostEntityStructureResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EntityStructureResponse>("/factset-entity/v1/entity-structures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEntityStructure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id. Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ultimateEntityStructureRequest">Request Body to request a list of Ultimate Entity Structure objects.</param>
        /// <returns>UltimateEntityStructureResponse</returns>
        public UltimateEntityStructureResponse PostUltimateEntityStructure(UltimateEntityStructureRequest ultimateEntityStructureRequest)
        {
            var localVarResponse = PostUltimateEntityStructureWithHttpInfo(ultimateEntityStructureRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id. Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ultimateEntityStructureRequest">Request Body to request a list of Ultimate Entity Structure objects.</param>
        /// <returns>ApiResponse of UltimateEntityStructureResponse</returns>
        public ApiResponse<UltimateEntityStructureResponse> PostUltimateEntityStructureWithHttpInfo(UltimateEntityStructureRequest ultimateEntityStructureRequest)
        {
            // verify the required parameter 'ultimateEntityStructureRequest' is set
            if (ultimateEntityStructureRequest == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'ultimateEntityStructureRequest' when calling EntityStructureApi->PostUltimateEntityStructure");
            }

            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ultimateEntityStructureRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostUltimateEntityStructureResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            UltimateEntityStructureResponse>("/factset-entity/v1/ultimate-entity-structures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostUltimateEntityStructure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id. Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ultimateEntityStructureRequest">Request Body to request a list of Ultimate Entity Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UltimateEntityStructureResponse</returns>
        public async System.Threading.Tasks.Task<UltimateEntityStructureResponse>PostUltimateEntityStructureAsync(UltimateEntityStructureRequest ultimateEntityStructureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostUltimateEntityStructureWithHttpInfoAsync(ultimateEntityStructureRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all active or inactive entities and respective levels below the requested entity id. Returns all active or inactive entities and respective levels below the requested entity id. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ultimateEntityStructureRequest">Request Body to request a list of Ultimate Entity Structure objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UltimateEntityStructureResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<UltimateEntityStructureResponse>> PostUltimateEntityStructureWithHttpInfoAsync(UltimateEntityStructureRequest ultimateEntityStructureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ultimateEntityStructureRequest' is set
            if (ultimateEntityStructureRequest == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'ultimateEntityStructureRequest' when calling EntityStructureApi->PostUltimateEntityStructure");
            }


            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ultimateEntityStructureRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostUltimateEntityStructureResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UltimateEntityStructureResponse>("/factset-entity/v1/ultimate-entity-structures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostUltimateEntityStructure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
