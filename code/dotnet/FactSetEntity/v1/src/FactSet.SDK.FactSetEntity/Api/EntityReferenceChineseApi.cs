/*
 * FactSet Entity API
 *
 * Using an entity centric data model, FactSet's Entity API provides access to FactSet's complete security and entity level symbology, comprehensive entity reference data, and all of the necessary relationships and connections to create a foundation that tightly correlates disparate sources of information to a master entity identifier. Use this API to quickly understand the full entity structure and related securities.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetEntity.Client;
using FactSet.SDK.FactSetEntity.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetEntity.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityReferenceChineseApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity.
        /// </summary>
        /// <remarks>
        /// Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, BBGs or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 1500 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <returns>EntityReferenceChiResponse</returns>
        EntityReferenceChiResponse GetEntityReferenceChi(List<string> ids);

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity.
        /// </summary>
        /// <remarks>
        /// Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, BBGs or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 1500 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <returns>ApiResponse of EntityReferenceChiResponse</returns>
        ApiResponse<EntityReferenceChiResponse> GetEntityReferenceChiWithHttpInfo(List<string> ids);
        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity.
        /// </summary>
        /// <remarks>
        /// Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityReferenceChiRequest">Request Body to request a list of Entity Reference Chinese objects.</param>
        /// <returns>EntityReferenceChiResponse</returns>
        EntityReferenceChiResponse GetEntityReferenceChiForList(EntityReferenceChiRequest entityReferenceChiRequest);

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity.
        /// </summary>
        /// <remarks>
        /// Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityReferenceChiRequest">Request Body to request a list of Entity Reference Chinese objects.</param>
        /// <returns>ApiResponse of EntityReferenceChiResponse</returns>
        ApiResponse<EntityReferenceChiResponse> GetEntityReferenceChiForListWithHttpInfo(EntityReferenceChiRequest entityReferenceChiRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityReferenceChineseApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity.
        /// </summary>
        /// <remarks>
        /// Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, BBGs or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 1500 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityReferenceChiResponse</returns>
        System.Threading.Tasks.Task<EntityReferenceChiResponse> GetEntityReferenceChiAsync(List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity.
        /// </summary>
        /// <remarks>
        /// Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, BBGs or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 1500 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityReferenceChiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityReferenceChiResponse>> GetEntityReferenceChiWithHttpInfoAsync(List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity.
        /// </summary>
        /// <remarks>
        /// Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityReferenceChiRequest">Request Body to request a list of Entity Reference Chinese objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityReferenceChiResponse</returns>
        System.Threading.Tasks.Task<EntityReferenceChiResponse> GetEntityReferenceChiForListAsync(EntityReferenceChiRequest entityReferenceChiRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity.
        /// </summary>
        /// <remarks>
        /// Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityReferenceChiRequest">Request Body to request a list of Entity Reference Chinese objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityReferenceChiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityReferenceChiResponse>> GetEntityReferenceChiForListWithHttpInfoAsync(EntityReferenceChiRequest entityReferenceChiRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityReferenceChineseApi : IEntityReferenceChineseApiSync, IEntityReferenceChineseApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntityReferenceChineseApi : IEntityReferenceChineseApi
    {
        private FactSet.SDK.FactSetEntity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetEntityReferenceChiResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityReferenceChiResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetEntityReferenceChiForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityReferenceChiResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityReferenceChineseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityReferenceChineseApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityReferenceChineseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityReferenceChineseApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetEntity.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetEntity.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetEntity.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetEntity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityReferenceChineseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntityReferenceChineseApi(FactSet.SDK.FactSetEntity.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetEntity.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetEntity.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetEntity.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetEntity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityReferenceChineseApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EntityReferenceChineseApi(FactSet.SDK.FactSetEntity.Client.ISynchronousClient client, FactSet.SDK.FactSetEntity.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetEntity.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetEntity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetEntity.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetEntity.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetEntity.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetEntity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity. Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, BBGs or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 1500 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <returns>EntityReferenceChiResponse</returns>
        public EntityReferenceChiResponse GetEntityReferenceChi(List<string> ids)
        {
            var localVarResponse = GetEntityReferenceChiWithHttpInfo(ids);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity. Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, BBGs or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 1500 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <returns>ApiResponse of EntityReferenceChiResponse</returns>
        public ApiResponse<EntityReferenceChiResponse> GetEntityReferenceChiWithHttpInfo(List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'ids' when calling EntityReferenceChineseApi->GetEntityReferenceChi");
            }

            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEntityReferenceChiResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EntityReferenceChiResponse>("/factset-entity/v1/entity-reference-chi", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityReferenceChi", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity. Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, BBGs or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 1500 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityReferenceChiResponse</returns>
        public async System.Threading.Tasks.Task<EntityReferenceChiResponse>GetEntityReferenceChiAsync(List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEntityReferenceChiWithHttpInfoAsync(ids, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity. Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, BBGs or FactSet Permanent Ids, such as -R, -L, or -E.&lt;p&gt;**Max Ids Limit set to 1500 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityReferenceChiResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityReferenceChiResponse>> GetEntityReferenceChiWithHttpInfoAsync(List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'ids' when calling EntityReferenceChineseApi->GetEntityReferenceChi");
            }


            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEntity.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEntityReferenceChiResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityReferenceChiResponse>("/factset-entity/v1/entity-reference-chi", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityReferenceChi", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity. Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityReferenceChiRequest">Request Body to request a list of Entity Reference Chinese objects.</param>
        /// <returns>EntityReferenceChiResponse</returns>
        public EntityReferenceChiResponse GetEntityReferenceChiForList(EntityReferenceChiRequest entityReferenceChiRequest)
        {
            var localVarResponse = GetEntityReferenceChiForListWithHttpInfo(entityReferenceChiRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity. Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityReferenceChiRequest">Request Body to request a list of Entity Reference Chinese objects.</param>
        /// <returns>ApiResponse of EntityReferenceChiResponse</returns>
        public ApiResponse<EntityReferenceChiResponse> GetEntityReferenceChiForListWithHttpInfo(EntityReferenceChiRequest entityReferenceChiRequest)
        {
            // verify the required parameter 'entityReferenceChiRequest' is set
            if (entityReferenceChiRequest == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'entityReferenceChiRequest' when calling EntityReferenceChineseApi->GetEntityReferenceChiForList");
            }

            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = entityReferenceChiRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEntityReferenceChiForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EntityReferenceChiResponse>("/factset-entity/v1/entity-reference-chi", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityReferenceChiForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity. Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityReferenceChiRequest">Request Body to request a list of Entity Reference Chinese objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityReferenceChiResponse</returns>
        public async System.Threading.Tasks.Task<EntityReferenceChiResponse>GetEntityReferenceChiForListAsync(EntityReferenceChiRequest entityReferenceChiRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEntityReferenceChiForListWithHttpInfoAsync(entityReferenceChiRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns entity reference data in Chinese for an individual entity. Returns entity reference data in Chinese for the requested Id(s). Data points include Business Description and Entity Name in both simplified and traditional Chinese. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEntity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityReferenceChiRequest">Request Body to request a list of Entity Reference Chinese objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityReferenceChiResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityReferenceChiResponse>> GetEntityReferenceChiForListWithHttpInfoAsync(EntityReferenceChiRequest entityReferenceChiRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityReferenceChiRequest' is set
            if (entityReferenceChiRequest == null)
            {
                throw new FactSet.SDK.FactSetEntity.Client.ApiException(400, "Missing required parameter 'entityReferenceChiRequest' when calling EntityReferenceChineseApi->GetEntityReferenceChiForList");
            }


            FactSet.SDK.FactSetEntity.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEntity.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEntity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = entityReferenceChiRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEntity.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEntityReferenceChiForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EntityReferenceChiResponse>("/factset-entity/v1/entity-reference-chi", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityReferenceChiForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
