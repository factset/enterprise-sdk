/*
 * FactSet Entity API
 *
 * Using an entity centric data model, FactSet's Entity API provides access to FactSet's complete security and entity level symbology, comprehensive entity reference data, and all of the necessary relationships and connections to create a foundation that tightly correlates disparate sources of information to a master entity identifier. Use this API to quickly understand the full entity structure and related securities.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetEntity.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetEntity.Model
{
    /// <summary>
    /// EntitySecurities
    /// </summary>
    [DataContract(Name = "entitySecurities")]
    public partial class EntitySecurities : IEquatable<EntitySecurities>, IValidatableObject
    {
        /// <summary>
        /// The Security Type Code. Security Type Code details and mapping are described on Online Assistant Page 15776 for Equity and Page 16014 for Fixed Income.
        /// </summary>
        /// <value>The Security Type Code. Security Type Code details and mapping are described on Online Assistant Page 15776 for Equity and Page 16014 for Fixed Income.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityTypeEnum
        {
            /// <summary>
            /// Enum SHARE for value: SHARE
            /// </summary>
            [EnumMember(Value = "SHARE")]
            SHARE = 1,

            /// <summary>
            /// Enum PREFEQ for value: PREFEQ
            /// </summary>
            [EnumMember(Value = "PREFEQ")]
            PREFEQ = 2,

            /// <summary>
            /// Enum MFC for value: MF_C
            /// </summary>
            [EnumMember(Value = "MF_C")]
            MFC = 3,

            /// <summary>
            /// Enum MFO for value: MF_O
            /// </summary>
            [EnumMember(Value = "MF_O")]
            MFO = 4,

            /// <summary>
            /// Enum ETFETF for value: ETF_ETF
            /// </summary>
            [EnumMember(Value = "ETF_ETF")]
            ETFETF = 5,

            /// <summary>
            /// Enum ETFUVI for value: ETF_UVI
            /// </summary>
            [EnumMember(Value = "ETF_UVI")]
            ETFUVI = 6,

            /// <summary>
            /// Enum ETFNAV for value: ETF_NAV
            /// </summary>
            [EnumMember(Value = "ETF_NAV")]
            ETFNAV = 7,

            /// <summary>
            /// Enum ADR for value: ADR
            /// </summary>
            [EnumMember(Value = "ADR")]
            ADR = 8,

            /// <summary>
            /// Enum GDR for value: GDR
            /// </summary>
            [EnumMember(Value = "GDR")]
            GDR = 9,

            /// <summary>
            /// Enum NVDR for value: NVDR
            /// </summary>
            [EnumMember(Value = "NVDR")]
            NVDR = 10,

            /// <summary>
            /// Enum DR for value: DR
            /// </summary>
            [EnumMember(Value = "DR")]
            DR = 11,

            /// <summary>
            /// Enum ALIEN for value: ALIEN
            /// </summary>
            [EnumMember(Value = "ALIEN")]
            ALIEN = 12,

            /// <summary>
            /// Enum PREF for value: PREF
            /// </summary>
            [EnumMember(Value = "PREF")]
            PREF = 13,

            /// <summary>
            /// Enum WARRANT for value: WARRANT
            /// </summary>
            [EnumMember(Value = "WARRANT")]
            WARRANT = 14,

            /// <summary>
            /// Enum RIGHT for value: RIGHT
            /// </summary>
            [EnumMember(Value = "RIGHT")]
            RIGHT = 15,

            /// <summary>
            /// Enum UNIT for value: UNIT
            /// </summary>
            [EnumMember(Value = "UNIT")]
            UNIT = 16,

            /// <summary>
            /// Enum STRUCT for value: STRUCT
            /// </summary>
            [EnumMember(Value = "STRUCT")]
            STRUCT = 17,

            /// <summary>
            /// Enum TEMP for value: TEMP
            /// </summary>
            [EnumMember(Value = "TEMP")]
            TEMP = 18,

            /// <summary>
            /// Enum CONV for value: CONV
            /// </summary>
            [EnumMember(Value = "CONV")]
            CONV = 19,

            /// <summary>
            /// Enum BDNT for value: BDNT
            /// </summary>
            [EnumMember(Value = "BDNT")]
            BDNT = 20,

            /// <summary>
            /// Enum PFD for value: PFD
            /// </summary>
            [EnumMember(Value = "PFD")]
            PFD = 21,

            /// <summary>
            /// Enum PASS for value: PASS
            /// </summary>
            [EnumMember(Value = "PASS")]
            PASS = 22,

            /// <summary>
            /// Enum MM for value: MM
            /// </summary>
            [EnumMember(Value = "MM")]
            MM = 23,

            /// <summary>
            /// Enum RMBS for value: RMBS
            /// </summary>
            [EnumMember(Value = "RMBS")]
            RMBS = 24,

            /// <summary>
            /// Enum ABS for value: ABS
            /// </summary>
            [EnumMember(Value = "ABS")]
            ABS = 25,

            /// <summary>
            /// Enum COVR for value: COVR
            /// </summary>
            [EnumMember(Value = "COVR")]
            COVR = 26,

            /// <summary>
            /// Enum LKS for value: LKS
            /// </summary>
            [EnumMember(Value = "LKS")]
            LKS = 27,

            /// <summary>
            /// Enum LAUTH for value: LAUTH
            /// </summary>
            [EnumMember(Value = "LAUTH")]
            LAUTH = 28,

            /// <summary>
            /// Enum BLDN for value: BLDN
            /// </summary>
            [EnumMember(Value = "BLDN")]
            BLDN = 29,

            /// <summary>
            /// Enum CMBS for value: CMBS
            /// </summary>
            [EnumMember(Value = "CMBS")]
            CMBS = 30

        }


        /// <summary>
        /// The Security Type Code. Security Type Code details and mapping are described on Online Assistant Page 15776 for Equity and Page 16014 for Fixed Income.
        /// </summary>
        /// <value>The Security Type Code. Security Type Code details and mapping are described on Online Assistant Page 15776 for Equity and Page 16014 for Fixed Income.</value>
        [DataMember(Name = "securityType", EmitDefaultValue = true)]
        public SecurityTypeEnum? SecurityType { get; set; }
        /// <summary>
        /// Indicates if security is active. 1 &#x3D; Active; 0 &#x3D; Inactive.
        /// </summary>
        /// <value>Indicates if security is active. 1 &#x3D; Active; 0 &#x3D; Inactive.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActiveFlagEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1

        }


        /// <summary>
        /// Indicates if security is active. 1 &#x3D; Active; 0 &#x3D; Inactive.
        /// </summary>
        /// <value>Indicates if security is active. 1 &#x3D; Active; 0 &#x3D; Inactive.</value>
        [DataMember(Name = "activeFlag", EmitDefaultValue = true)]
        public ActiveFlagEnum? ActiveFlag { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntitySecurities" /> class.
        /// </summary>
        /// <param name="fsymId">FactSet Ultimate Parent ID of the Requested Security ID.</param>
        /// <param name="fsymSecurityId">FactSet Security ID (-S)..</param>
        /// <param name="fsymListingId">FactSet Listing ID (-L). Corresponds to the listing exchange for the requested security. Not applicable for FI instruments..</param>
        /// <param name="securityType">The Security Type Code. Security Type Code details and mapping are described on Online Assistant Page 15776 for Equity and Page 16014 for Fixed Income..</param>
        /// <param name="listingExchange">The securities primary listing exchange..</param>
        /// <param name="securityName">Security name.</param>
        /// <param name="fsymEntityId">Unique FactSet-generated identifier representing an entity..</param>
        /// <param name="fsymTickerExchange">The security&#39;s ticker-exchange, representing the listing exchange symbol..</param>
        /// <param name="fsymTickerRegion">The security&#39;s regional ticker..</param>
        /// <param name="activeFlag">Indicates if security is active. 1 &#x3D; Active; 0 &#x3D; Inactive..</param>
        /// <param name="requestId">Identifier used in &#x60;ids&#x60; parameter.  When list of identifiers used, they will be parsed and resolved individually..</param>
        public EntitySecurities(string fsymId = default(string), string fsymSecurityId = default(string), string fsymListingId = default(string), SecurityTypeEnum? securityType = default(SecurityTypeEnum?), string listingExchange = default(string), string securityName = default(string), string fsymEntityId = default(string), string fsymTickerExchange = default(string), string fsymTickerRegion = default(string), ActiveFlagEnum? activeFlag = default(ActiveFlagEnum?), string requestId = default(string))
        {
            this.FsymId = fsymId;
            this.FsymSecurityId = fsymSecurityId;
            this.FsymListingId = fsymListingId;
            this.SecurityType = securityType;
            this.ListingExchange = listingExchange;
            this.SecurityName = securityName;
            this.FsymEntityId = fsymEntityId;
            this.FsymTickerExchange = fsymTickerExchange;
            this.FsymTickerRegion = fsymTickerRegion;
            this.ActiveFlag = activeFlag;
            this.RequestId = requestId;
        }

        /// <summary>
        /// FactSet Ultimate Parent ID of the Requested Security ID
        /// </summary>
        /// <value>FactSet Ultimate Parent ID of the Requested Security ID</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// FactSet Security ID (-S).
        /// </summary>
        /// <value>FactSet Security ID (-S).</value>
        [DataMember(Name = "fsymSecurityId", EmitDefaultValue = true)]
        public string FsymSecurityId { get; set; }

        /// <summary>
        /// FactSet Listing ID (-L). Corresponds to the listing exchange for the requested security. Not applicable for FI instruments.
        /// </summary>
        /// <value>FactSet Listing ID (-L). Corresponds to the listing exchange for the requested security. Not applicable for FI instruments.</value>
        [DataMember(Name = "fsymListingId", EmitDefaultValue = true)]
        public string FsymListingId { get; set; }

        /// <summary>
        /// The securities primary listing exchange.
        /// </summary>
        /// <value>The securities primary listing exchange.</value>
        [DataMember(Name = "listingExchange", EmitDefaultValue = true)]
        public string ListingExchange { get; set; }

        /// <summary>
        /// Security name
        /// </summary>
        /// <value>Security name</value>
        [DataMember(Name = "securityName", EmitDefaultValue = true)]
        public string SecurityName { get; set; }

        /// <summary>
        /// Unique FactSet-generated identifier representing an entity.
        /// </summary>
        /// <value>Unique FactSet-generated identifier representing an entity.</value>
        [DataMember(Name = "fsymEntityId", EmitDefaultValue = true)]
        public string FsymEntityId { get; set; }

        /// <summary>
        /// The security&#39;s ticker-exchange, representing the listing exchange symbol.
        /// </summary>
        /// <value>The security&#39;s ticker-exchange, representing the listing exchange symbol.</value>
        [DataMember(Name = "fsymTickerExchange", EmitDefaultValue = true)]
        public string FsymTickerExchange { get; set; }

        /// <summary>
        /// The security&#39;s regional ticker.
        /// </summary>
        /// <value>The security&#39;s regional ticker.</value>
        [DataMember(Name = "fsymTickerRegion", EmitDefaultValue = true)]
        public string FsymTickerRegion { get; set; }

        /// <summary>
        /// Identifier used in &#x60;ids&#x60; parameter.  When list of identifiers used, they will be parsed and resolved individually.
        /// </summary>
        /// <value>Identifier used in &#x60;ids&#x60; parameter.  When list of identifiers used, they will be parsed and resolved individually.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntitySecurities {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  FsymSecurityId: ").Append(FsymSecurityId).Append("\n");
            sb.Append("  FsymListingId: ").Append(FsymListingId).Append("\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("  ListingExchange: ").Append(ListingExchange).Append("\n");
            sb.Append("  SecurityName: ").Append(SecurityName).Append("\n");
            sb.Append("  FsymEntityId: ").Append(FsymEntityId).Append("\n");
            sb.Append("  FsymTickerExchange: ").Append(FsymTickerExchange).Append("\n");
            sb.Append("  FsymTickerRegion: ").Append(FsymTickerRegion).Append("\n");
            sb.Append("  ActiveFlag: ").Append(ActiveFlag).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntitySecurities);
        }

        /// <summary>
        /// Returns true if EntitySecurities instances are equal
        /// </summary>
        /// <param name="input">Instance of EntitySecurities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntitySecurities input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.FsymSecurityId == input.FsymSecurityId ||
                    (this.FsymSecurityId != null &&
                    this.FsymSecurityId.Equals(input.FsymSecurityId))
                ) && 
                (
                    this.FsymListingId == input.FsymListingId ||
                    (this.FsymListingId != null &&
                    this.FsymListingId.Equals(input.FsymListingId))
                ) && 
                (
                    this.SecurityType == input.SecurityType ||
                    this.SecurityType.Equals(input.SecurityType)
                ) && 
                (
                    this.ListingExchange == input.ListingExchange ||
                    (this.ListingExchange != null &&
                    this.ListingExchange.Equals(input.ListingExchange))
                ) && 
                (
                    this.SecurityName == input.SecurityName ||
                    (this.SecurityName != null &&
                    this.SecurityName.Equals(input.SecurityName))
                ) && 
                (
                    this.FsymEntityId == input.FsymEntityId ||
                    (this.FsymEntityId != null &&
                    this.FsymEntityId.Equals(input.FsymEntityId))
                ) && 
                (
                    this.FsymTickerExchange == input.FsymTickerExchange ||
                    (this.FsymTickerExchange != null &&
                    this.FsymTickerExchange.Equals(input.FsymTickerExchange))
                ) && 
                (
                    this.FsymTickerRegion == input.FsymTickerRegion ||
                    (this.FsymTickerRegion != null &&
                    this.FsymTickerRegion.Equals(input.FsymTickerRegion))
                ) && 
                (
                    this.ActiveFlag == input.ActiveFlag ||
                    this.ActiveFlag.Equals(input.ActiveFlag)
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.FsymSecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymSecurityId.GetHashCode();
                }
                if (this.FsymListingId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymListingId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecurityType.GetHashCode();
                if (this.ListingExchange != null)
                {
                    hashCode = (hashCode * 59) + this.ListingExchange.GetHashCode();
                }
                if (this.SecurityName != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityName.GetHashCode();
                }
                if (this.FsymEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymEntityId.GetHashCode();
                }
                if (this.FsymTickerExchange != null)
                {
                    hashCode = (hashCode * 59) + this.FsymTickerExchange.GetHashCode();
                }
                if (this.FsymTickerRegion != null)
                {
                    hashCode = (hashCode * 59) + this.FsymTickerRegion.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ActiveFlag.GetHashCode();
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
