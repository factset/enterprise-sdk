/*
 * Trading API
 *
 * Allow clients to trade orders.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTrading.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTrading.Model
{
    /// <summary>
    /// Child Orders Response
    /// </summary>
    [DataContract(Name = "ChildOrdersResponse")]
    public partial class ChildOrdersResponse : IEquatable<ChildOrdersResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChildOrdersResponse" /> class.
        /// </summary>
        /// <param name="accepted">Accepted Orders. Key is the clientOrderId of the request..</param>
        /// <param name="rejected">Rejected Orders. Key is the clientOrderId of the request..</param>
        public ChildOrdersResponse(Dictionary<string, ChildOrderInfo> accepted = default(Dictionary<string, ChildOrderInfo>), Dictionary<string, ChildOrderRejectInfo> rejected = default(Dictionary<string, ChildOrderRejectInfo>))
        {
            this.Accepted = accepted;
            this.Rejected = rejected;
        }

        /// <summary>
        /// Accepted Orders. Key is the clientOrderId of the request.
        /// </summary>
        /// <value>Accepted Orders. Key is the clientOrderId of the request.</value>
        [DataMember(Name = "accepted", EmitDefaultValue = true)]
        public Dictionary<string, ChildOrderInfo> Accepted { get; set; }

        /// <summary>
        /// Rejected Orders. Key is the clientOrderId of the request.
        /// </summary>
        /// <value>Rejected Orders. Key is the clientOrderId of the request.</value>
        [DataMember(Name = "rejected", EmitDefaultValue = true)]
        public Dictionary<string, ChildOrderRejectInfo> Rejected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChildOrdersResponse {\n");
            sb.Append("  Accepted: ").Append(Accepted).Append("\n");
            sb.Append("  Rejected: ").Append(Rejected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChildOrdersResponse);
        }

        /// <summary>
        /// Returns true if ChildOrdersResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ChildOrdersResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChildOrdersResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Accepted == input.Accepted ||
                    this.Accepted != null &&
                    input.Accepted != null &&
                    this.Accepted.SequenceEqual(input.Accepted)
                ) && 
                (
                    this.Rejected == input.Rejected ||
                    this.Rejected != null &&
                    input.Rejected != null &&
                    this.Rejected.SequenceEqual(input.Rejected)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accepted != null)
                {
                    hashCode = (hashCode * 59) + this.Accepted.GetHashCode();
                }
                if (this.Rejected != null)
                {
                    hashCode = (hashCode * 59) + this.Rejected.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
