/*
 * Trading API
 *
 * Allow clients to trade orders.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTrading.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTrading.Model
{
    /// <summary>
    /// Parent Order
    /// </summary>
    [DataContract(Name = "ParentOrder")]
    public partial class ParentOrder : IEquatable<ParentOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParentOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParentOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParentOrder" /> class.
        /// </summary>
        /// <param name="parentId">parentId (required).</param>
        /// <param name="userGroup">User groups.</param>
        /// <param name="userDefinedFields">User defined fields..</param>
        public ParentOrder(ParentId parentId,string userGroup = default(string), Dictionary<string, string> userDefinedFields = default(Dictionary<string, string>))
        {
            // to ensure "parentId" is required (not null)
            if (parentId == null) {
                throw new ArgumentNullException("parentId is a required property for ParentOrder and cannot be null");
            }
            this.ParentId = parentId;
            this.UserGroup = userGroup;
            this.UserDefinedFields = userDefinedFields;
        }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "parentId", IsRequired = true, EmitDefaultValue = false)]
        public ParentId ParentId { get; set; }

        /// <summary>
        /// User groups
        /// </summary>
        /// <value>User groups</value>
        [DataMember(Name = "userGroup", EmitDefaultValue = true)]
        public string UserGroup { get; set; }

        /// <summary>
        /// User defined fields.
        /// </summary>
        /// <value>User defined fields.</value>
        [DataMember(Name = "userDefinedFields", EmitDefaultValue = true)]
        public Dictionary<string, string> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParentOrder {\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  UserGroup: ").Append(UserGroup).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParentOrder);
        }

        /// <summary>
        /// Returns true if ParentOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of ParentOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParentOrder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.UserGroup == input.UserGroup ||
                    (this.UserGroup != null &&
                    this.UserGroup.Equals(input.UserGroup))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    input.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.UserGroup != null)
                {
                    hashCode = (hashCode * 59) + this.UserGroup.GetHashCode();
                }
                if (this.UserDefinedFields != null)
                {
                    hashCode = (hashCode * 59) + this.UserDefinedFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
