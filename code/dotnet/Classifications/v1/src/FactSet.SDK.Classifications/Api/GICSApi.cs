/*
 * Classifications API
 *
 * Classifications API offers fast, reliable access to global security classification data - enabling smarter portfolio decisions and precise sector analytics using GICS standards. Instantly retrieve GICS sector, industry group, industry, and sub-industry data covering more than 37,000 securities worldwide to streamline portfolio benchmarking, custom screening, and regulatory compliance. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Classifications.Client;
using FactSet.SDK.Classifications.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Classifications.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGICSApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the GICS Direct Classifications
        /// </summary>
        /// <remarks>
        /// Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">Requested start date expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">Requested End Date for Range expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to M)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. (optional, default to FIVEDAY)</param>
        /// <returns>GicsResponse</returns>
        GicsResponse GetGics(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string));

        /// <summary>
        /// Gets the GICS Direct Classifications
        /// </summary>
        /// <remarks>
        /// Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">Requested start date expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">Requested End Date for Range expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to M)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. (optional, default to FIVEDAY)</param>
        /// <returns>ApiResponse of GicsResponse</returns>
        ApiResponse<GicsResponse> GetGicsWithHttpInfo(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string));
        /// <summary>
        /// Returns the GICS classifications for the requested &#39;ids&#39; and date range.
        /// </summary>
        /// <remarks>
        /// Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gicsRequest">Requests GICS Classifications for the given identifier and date range.</param>
        /// <returns>GicsResponse</returns>
        GicsResponse PostGics(GicsRequest gicsRequest);

        /// <summary>
        /// Returns the GICS classifications for the requested &#39;ids&#39; and date range.
        /// </summary>
        /// <remarks>
        /// Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gicsRequest">Requests GICS Classifications for the given identifier and date range.</param>
        /// <returns>ApiResponse of GicsResponse</returns>
        ApiResponse<GicsResponse> PostGicsWithHttpInfo(GicsRequest gicsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGICSApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Gets the GICS Direct Classifications
        /// </summary>
        /// <remarks>
        /// Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">Requested start date expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">Requested End Date for Range expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to M)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. (optional, default to FIVEDAY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GicsResponse</returns>
        System.Threading.Tasks.Task<GicsResponse> GetGicsAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the GICS Direct Classifications
        /// </summary>
        /// <remarks>
        /// Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">Requested start date expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">Requested End Date for Range expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to M)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. (optional, default to FIVEDAY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GicsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GicsResponse>> GetGicsWithHttpInfoAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the GICS classifications for the requested &#39;ids&#39; and date range.
        /// </summary>
        /// <remarks>
        /// Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gicsRequest">Requests GICS Classifications for the given identifier and date range.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GicsResponse</returns>
        System.Threading.Tasks.Task<GicsResponse> PostGicsAsync(GicsRequest gicsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the GICS classifications for the requested &#39;ids&#39; and date range.
        /// </summary>
        /// <remarks>
        /// Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gicsRequest">Requests GICS Classifications for the given identifier and date range.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GicsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GicsResponse>> PostGicsWithHttpInfoAsync(GicsRequest gicsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGICSApi : IGICSApiSync, IGICSApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GICSApi : IGICSApi
    {
        private FactSet.SDK.Classifications.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetGicsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(GicsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostGicsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(GicsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="GICSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GICSApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GICSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GICSApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Classifications.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Classifications.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Classifications.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Classifications.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Classifications.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Classifications.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GICSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GICSApi(FactSet.SDK.Classifications.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Classifications.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Classifications.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Classifications.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Classifications.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Classifications.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GICSApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GICSApi(FactSet.SDK.Classifications.Client.ISynchronousClient client, FactSet.SDK.Classifications.Client.IAsynchronousClient asyncClient, FactSet.SDK.Classifications.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Classifications.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Classifications.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Classifications.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Classifications.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Classifications.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the GICS Direct Classifications Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">Requested start date expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">Requested End Date for Range expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to M)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. (optional, default to FIVEDAY)</param>
        /// <returns>GicsResponse</returns>
        public GicsResponse GetGics(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string))
        {
            var localVarResponse = GetGicsWithHttpInfo(ids, startDate, endDate, frequency, calendar);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the GICS Direct Classifications Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">Requested start date expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">Requested End Date for Range expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to M)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. (optional, default to FIVEDAY)</param>
        /// <returns>ApiResponse of GicsResponse</returns>
        public ApiResponse<GicsResponse> GetGicsWithHttpInfo(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.Classifications.Client.ApiException(400, "Missing required parameter 'ids' when calling GICSApi->GetGics");
            }

            FactSet.SDK.Classifications.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Classifications.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Classifications.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Classifications.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Classifications.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Classifications.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Classifications.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Classifications.Client.ClientUtils.ParameterToMultiMap("", "frequency", frequency));
            }
            if (calendar != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Classifications.Client.ClientUtils.ParameterToMultiMap("", "calendar", calendar));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Classifications.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetGicsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            GicsResponse>("/classifications/v1/gics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets the GICS Direct Classifications Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">Requested start date expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">Requested End Date for Range expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to M)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. (optional, default to FIVEDAY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GicsResponse</returns>
        public async System.Threading.Tasks.Task<GicsResponse>GetGicsAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetGicsWithHttpInfoAsync(ids, startDate, endDate, frequency, calendar, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the GICS Direct Classifications Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">Requested start date expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">Requested End Date for Range expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to M)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. (optional, default to FIVEDAY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GicsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<GicsResponse>> GetGicsWithHttpInfoAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.Classifications.Client.ApiException(400, "Missing required parameter 'ids' when calling GICSApi->GetGics");
            }


            FactSet.SDK.Classifications.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Classifications.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Classifications.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Classifications.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Classifications.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Classifications.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Classifications.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Classifications.Client.ClientUtils.ParameterToMultiMap("", "frequency", frequency));
            }
            if (calendar != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Classifications.Client.ClientUtils.ParameterToMultiMap("", "calendar", calendar));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Classifications.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetGicsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GicsResponse>("/classifications/v1/gics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the GICS classifications for the requested &#39;ids&#39; and date range. Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gicsRequest">Requests GICS Classifications for the given identifier and date range.</param>
        /// <returns>GicsResponse</returns>
        public GicsResponse PostGics(GicsRequest gicsRequest)
        {
            var localVarResponse = PostGicsWithHttpInfo(gicsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the GICS classifications for the requested &#39;ids&#39; and date range. Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gicsRequest">Requests GICS Classifications for the given identifier and date range.</param>
        /// <returns>ApiResponse of GicsResponse</returns>
        public ApiResponse<GicsResponse> PostGicsWithHttpInfo(GicsRequest gicsRequest)
        {
            // verify the required parameter 'gicsRequest' is set
            if (gicsRequest == null)
            {
                throw new FactSet.SDK.Classifications.Client.ApiException(400, "Missing required parameter 'gicsRequest' when calling GICSApi->PostGics");
            }

            FactSet.SDK.Classifications.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Classifications.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Classifications.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Classifications.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = gicsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Classifications.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostGicsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            GicsResponse>("/classifications/v1/gics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the GICS classifications for the requested &#39;ids&#39; and date range. Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gicsRequest">Requests GICS Classifications for the given identifier and date range.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GicsResponse</returns>
        public async System.Threading.Tasks.Task<GicsResponse>PostGicsAsync(GicsRequest gicsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostGicsWithHttpInfoAsync(gicsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the GICS classifications for the requested &#39;ids&#39; and date range. Gets the **Global Industry Classification Standard (\&quot;GICS\&quot;)** Sectors, Industry Group, Industry, and Sub-Industry Names and Numbers for a requested list of ids and date range. All economic sectors have a two-digit identification code, all industry groups have a four-digit identification code, all industries have a six-digit identification code, and all sub-industries have an eight-digit identification code. To access the complete GICS structure and definitions, visit the [MSCI GICS](https://www.msci.com/gics) or [S&amp;P GICS](https://www.spglobal.com/spdji/en/landing/topic/gics/) home pages. Coverage includes over 37,000 securities. *Licensing for GICS Classifications, Regions, and History is required in addition to FactSet API license. Reach out to your FactSet Account Team for assistance.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Classifications.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gicsRequest">Requests GICS Classifications for the given identifier and date range.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GicsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<GicsResponse>> PostGicsWithHttpInfoAsync(GicsRequest gicsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'gicsRequest' is set
            if (gicsRequest == null)
            {
                throw new FactSet.SDK.Classifications.Client.ApiException(400, "Missing required parameter 'gicsRequest' when calling GICSApi->PostGics");
            }


            FactSet.SDK.Classifications.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Classifications.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Classifications.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Classifications.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = gicsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Classifications.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostGicsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GicsResponse>("/classifications/v1/gics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
