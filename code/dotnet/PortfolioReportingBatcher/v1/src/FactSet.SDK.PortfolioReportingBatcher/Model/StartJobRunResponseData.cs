/*
 * Portfolio Reporting Batcher
 *
 * The Portfolio Reporting Batcher (PRB) API allows clients to systematically leverage functionalities of the PRB application.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.PortfolioReportingBatcher.Client.OpenAPIDateConverter;

namespace FactSet.SDK.PortfolioReportingBatcher.Model
{
    /// <summary>
    /// The main object within the StartJobRunResponse schema
    /// </summary>
    [DataContract(Name = "StartJobRunResponse_data")]
    public partial class StartJobRunResponseData : IEquatable<StartJobRunResponseData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public Status Status { get; set; }

        /// <summary>
        /// Gets or Sets JobType
        /// </summary>
        [DataMember(Name = "jobType", IsRequired = true, EmitDefaultValue = false)]
        public JobTypes JobType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartJobRunResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StartJobRunResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartJobRunResponseData" /> class.
        /// </summary>
        /// <param name="id">The run ID for the job that has been triggered which is used in the /runs/{id}/status endpoint (required).</param>
        /// <param name="jobName">Name of the job (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="jobType">jobType (required).</param>
        public StartJobRunResponseData(string id, string jobName, Status status, JobTypes jobType)
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for StartJobRunResponseData and cannot be null");
            }
            this.Id = id;
            // to ensure "jobName" is required (not null)
            if (jobName == null) {
                throw new ArgumentNullException("jobName is a required property for StartJobRunResponseData and cannot be null");
            }
            this.JobName = jobName;
            this.Status = status;
            this.JobType = jobType;
        }

        /// <summary>
        /// The run ID for the job that has been triggered which is used in the /runs/{id}/status endpoint
        /// </summary>
        /// <value>The run ID for the job that has been triggered which is used in the /runs/{id}/status endpoint</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the job
        /// </summary>
        /// <value>Name of the job</value>
        [DataMember(Name = "jobName", IsRequired = true, EmitDefaultValue = false)]
        public string JobName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StartJobRunResponseData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  JobType: ").Append(JobType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StartJobRunResponseData);
        }

        /// <summary>
        /// Returns true if StartJobRunResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of StartJobRunResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StartJobRunResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.JobName == input.JobName ||
                    (this.JobName != null &&
                    this.JobName.Equals(input.JobName))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.JobType == input.JobType ||
                    this.JobType.Equals(input.JobType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.JobName != null)
                {
                    hashCode = (hashCode * 59) + this.JobName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.JobType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // JobName (string) maxLength
            if (this.JobName != null && this.JobName.Length > 29)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobName, length must be less than 29.", new [] { "JobName" });
            }

            yield break;
        }
    }

}
