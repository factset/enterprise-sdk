/*
 * Portfolio Reporting Batcher
 *
 * The Portfolio Reporting Batcher (PRB) API allows clients to systematically leverage functionalities of the PRB application.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.PortfolioReportingBatcher.Client.OpenAPIDateConverter;

namespace FactSet.SDK.PortfolioReportingBatcher.Model
{
    /// <summary>
    /// Available details of a PRB job, please note limited details are available if the job has not been run before, please see the examples
    /// </summary>
    [DataContract(Name = "JobListResponseRoot")]
    public partial class JobListResponseRoot : IEquatable<JobListResponseRoot>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public Status? Status { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public JobTypes? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobListResponseRoot" /> class.
        /// </summary>
        /// <param name="runId">Latest run ID for the job.</param>
        /// <param name="isApiTriggered">Indicates if the latest run was triggered by this API.</param>
        /// <param name="name">The name of the job.</param>
        /// <param name="serialNumber">The FactSet serial number which identifies the person or account the job is assigned to.</param>
        /// <param name="status">status.</param>
        /// <param name="type">type.</param>
        public JobListResponseRoot(string runId = default(string), bool isApiTriggered = default(bool), string name = default(string), string serialNumber = default(string), Status status = default(Status), JobTypes type = default(JobTypes))
        {
            this.RunId = runId;
            this.IsApiTriggered = isApiTriggered;
            this.Name = name;
            this.SerialNumber = serialNumber;
            this.Status = status;
            this.Type = type;
        }

        /// <summary>
        /// Latest run ID for the job
        /// </summary>
        /// <value>Latest run ID for the job</value>
        [DataMember(Name = "runId", EmitDefaultValue = false)]
        public string RunId { get; set; }

        /// <summary>
        /// Indicates if the latest run was triggered by this API
        /// </summary>
        /// <value>Indicates if the latest run was triggered by this API</value>
        [DataMember(Name = "isApiTriggered", EmitDefaultValue = true)]
        public bool IsApiTriggered { get; set; }

        /// <summary>
        /// The name of the job
        /// </summary>
        /// <value>The name of the job</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The FactSet serial number which identifies the person or account the job is assigned to
        /// </summary>
        /// <value>The FactSet serial number which identifies the person or account the job is assigned to</value>
        [DataMember(Name = "serialNumber", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobListResponseRoot {\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  IsApiTriggered: ").Append(IsApiTriggered).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobListResponseRoot);
        }

        /// <summary>
        /// Returns true if JobListResponseRoot instances are equal
        /// </summary>
        /// <param name="input">Instance of JobListResponseRoot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobListResponseRoot input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.IsApiTriggered == input.IsApiTriggered ||
                    this.IsApiTriggered.Equals(input.IsApiTriggered)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunId != null)
                {
                    hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsApiTriggered.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
