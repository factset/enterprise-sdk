/*
 * Portfolio Reporting Batcher
 *
 * The Portfolio Reporting Batcher (PRB) API allows clients to systematically leverage functionalities of the PRB application.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.PortfolioReportingBatcher.Client.OpenAPIDateConverter;

namespace FactSet.SDK.PortfolioReportingBatcher.Model
{
    /// <summary>
    /// This creates a matrix of the given details. When the job is run, it will only run for the accounts, dates and/or tasks within the objects given. Dates can be specified either by giving individual dates in the &#x60;dates&#x60; parameter, or by using the &#x60;dateRange&#x60; parameter for where these are supported. The job will fail if both are provided. (Settings will only be used temporarily and no changes will be made to the default PRB job.) Certain parameters are only valid for certain job types. Please see below for more details.
    /// </summary>
    [DataContract(Name = "JobOverridesCombinationsRoot")]
    public partial class JobOverridesCombinationsRoot : IEquatable<JobOverridesCombinationsRoot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobOverridesCombinationsRoot" /> class.
        /// </summary>
        /// <param name="accounts">An array of accounts, used for jobs types PA, ADF, PUB, and Vault.</param>
        /// <param name="dates">An array of dates, used for jobs types PA, ADF, PUB, and Vault. Please see OA Page 23173 for more details.</param>
        /// <param name="dateRange">dateRange.</param>
        /// <param name="tasks">Used only for jobs where type is ADF, PA, PUB, or vault.</param>
        /// <param name="allTasks">boolean flag to indicate if all tasks for given ADF, PA, PUB, or vault job should be run, e.g. if account is newly created and not yet added to any tasks.</param>
        public JobOverridesCombinationsRoot(List<string> accounts = default(List<string>), List<DateTime> dates = default(List<DateTime>), JobOverridesCombinationsRootDateRange dateRange = default(JobOverridesCombinationsRootDateRange), List<string> tasks = default(List<string>), bool allTasks = default(bool))
        {
            this.Accounts = accounts;
            this.Dates = dates;
            this.DateRange = dateRange;
            this.Tasks = tasks;
            this.AllTasks = allTasks;
        }

        /// <summary>
        /// An array of accounts, used for jobs types PA, ADF, PUB, and Vault
        /// </summary>
        /// <value>An array of accounts, used for jobs types PA, ADF, PUB, and Vault</value>
        [DataMember(Name = "accounts", EmitDefaultValue = false)]
        public List<string> Accounts { get; set; }

        /// <summary>
        /// An array of dates, used for jobs types PA, ADF, PUB, and Vault. Please see OA Page 23173 for more details
        /// </summary>
        /// <value>An array of dates, used for jobs types PA, ADF, PUB, and Vault. Please see OA Page 23173 for more details</value>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public List<DateTime> Dates { get; set; }

        /// <summary>
        /// Gets or Sets DateRange
        /// </summary>
        [DataMember(Name = "dateRange", EmitDefaultValue = false)]
        public JobOverridesCombinationsRootDateRange DateRange { get; set; }

        /// <summary>
        /// Used only for jobs where type is ADF, PA, PUB, or vault
        /// </summary>
        /// <value>Used only for jobs where type is ADF, PA, PUB, or vault</value>
        [DataMember(Name = "tasks", EmitDefaultValue = false)]
        public List<string> Tasks { get; set; }

        /// <summary>
        /// boolean flag to indicate if all tasks for given ADF, PA, PUB, or vault job should be run, e.g. if account is newly created and not yet added to any tasks
        /// </summary>
        /// <value>boolean flag to indicate if all tasks for given ADF, PA, PUB, or vault job should be run, e.g. if account is newly created and not yet added to any tasks</value>
        [DataMember(Name = "allTasks", EmitDefaultValue = true)]
        public bool AllTasks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobOverridesCombinationsRoot {\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  AllTasks: ").Append(AllTasks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobOverridesCombinationsRoot);
        }

        /// <summary>
        /// Returns true if JobOverridesCombinationsRoot instances are equal
        /// </summary>
        /// <param name="input">Instance of JobOverridesCombinationsRoot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobOverridesCombinationsRoot input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                ) && 
                (
                    this.Dates == input.Dates ||
                    this.Dates != null &&
                    input.Dates != null &&
                    this.Dates.SequenceEqual(input.Dates)
                ) && 
                (
                    this.DateRange == input.DateRange ||
                    (this.DateRange != null &&
                    this.DateRange.Equals(input.DateRange))
                ) && 
                (
                    this.Tasks == input.Tasks ||
                    this.Tasks != null &&
                    input.Tasks != null &&
                    this.Tasks.SequenceEqual(input.Tasks)
                ) && 
                (
                    this.AllTasks == input.AllTasks ||
                    this.AllTasks.Equals(input.AllTasks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accounts != null)
                {
                    hashCode = (hashCode * 59) + this.Accounts.GetHashCode();
                }
                if (this.Dates != null)
                {
                    hashCode = (hashCode * 59) + this.Dates.GetHashCode();
                }
                if (this.DateRange != null)
                {
                    hashCode = (hashCode * 59) + this.DateRange.GetHashCode();
                }
                if (this.Tasks != null)
                {
                    hashCode = (hashCode * 59) + this.Tasks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllTasks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
