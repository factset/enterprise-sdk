/*
 * Portfolio Reporting Batcher
 *
 * The Portfolio Reporting Batcher (PRB) API allows clients to systematically leverage functionalities of the PRB application.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.PortfolioReportingBatcher.Client.OpenAPIDateConverter;

namespace FactSet.SDK.PortfolioReportingBatcher.Model
{
    /// <summary>
    /// Details required to start a job
    /// </summary>
    [DataContract(Name = "startJob")]
    public partial class StartJob : IEquatable<StartJob>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StartJob" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StartJob() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartJob" /> class.
        /// </summary>
        /// <param name="jobName">The name of the PRB job (required).</param>
        /// <param name="overrides">overrides.</param>
        /// <param name="jobType">jobType (required).</param>
        public StartJob(string jobName, JobTypes jobType,JobOverrides overrides = default(JobOverrides))
        {
            // to ensure "jobName" is required (not null)
            if (jobName == null) {
                throw new ArgumentNullException("jobName is a required property for StartJob and cannot be null");
            }
            this.JobName = jobName;
            // to ensure "jobType" is required (not null)
            if (jobType == null) {
                throw new ArgumentNullException("jobType is a required property for StartJob and cannot be null");
            }
            this.JobType = jobType;
            this.Overrides = overrides;
        }

        /// <summary>
        /// The name of the PRB job
        /// </summary>
        /// <value>The name of the PRB job</value>
        [DataMember(Name = "jobName", IsRequired = true, EmitDefaultValue = false)]
        public string JobName { get; set; }

        /// <summary>
        /// Gets or Sets Overrides
        /// </summary>
        [DataMember(Name = "overrides", EmitDefaultValue = false)]
        public JobOverrides Overrides { get; set; }

        /// <summary>
        /// Gets or Sets JobType
        /// </summary>
        [DataMember(Name = "jobType", IsRequired = true, EmitDefaultValue = false)]
        public JobTypes JobType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StartJob {\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  Overrides: ").Append(Overrides).Append("\n");
            sb.Append("  JobType: ").Append(JobType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StartJob);
        }

        /// <summary>
        /// Returns true if StartJob instances are equal
        /// </summary>
        /// <param name="input">Instance of StartJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StartJob input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JobName == input.JobName ||
                    (this.JobName != null &&
                    this.JobName.Equals(input.JobName))
                ) && 
                (
                    this.Overrides == input.Overrides ||
                    (this.Overrides != null &&
                    this.Overrides.Equals(input.Overrides))
                ) && 
                (
                    this.JobType == input.JobType ||
                    (this.JobType != null &&
                    this.JobType.Equals(input.JobType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobName != null)
                {
                    hashCode = (hashCode * 59) + this.JobName.GetHashCode();
                }
                if (this.Overrides != null)
                {
                    hashCode = (hashCode * 59) + this.Overrides.GetHashCode();
                }
                if (this.JobType != null)
                {
                    hashCode = (hashCode * 59) + this.JobType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
