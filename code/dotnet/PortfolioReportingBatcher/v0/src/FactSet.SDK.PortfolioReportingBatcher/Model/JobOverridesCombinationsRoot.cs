/*
 * Portfolio Reporting Batcher
 *
 * The Portfolio Reporting Batcher (PRB) API allows clients to systematically leverage functionalities of the PRB application.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.PortfolioReportingBatcher.Client.OpenAPIDateConverter;

namespace FactSet.SDK.PortfolioReportingBatcher.Model
{
    /// <summary>
    /// Used for Vault job type only. This creates a matrix of given accounts and dates. When the job is run, it will only run for the accounts and dates within this object. (Settings will only be used temporarily and no changes will be made to the default PRB job.)
    /// </summary>
    [DataContract(Name = "jobOverridesCombinationsRoot")]
    public partial class JobOverridesCombinationsRoot : IEquatable<JobOverridesCombinationsRoot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobOverridesCombinationsRoot" /> class.
        /// </summary>
        /// <param name="accounts">An array of accounts.</param>
        /// <param name="dates">An array of dates.</param>
        public JobOverridesCombinationsRoot(List<string> accounts = default(List<string>), List<DateTime> dates = default(List<DateTime>))
        {
            this.Accounts = accounts;
            this.Dates = dates;
        }

        /// <summary>
        /// An array of accounts
        /// </summary>
        /// <value>An array of accounts</value>
        [DataMember(Name = "accounts", EmitDefaultValue = false)]
        public List<string> Accounts { get; set; }

        /// <summary>
        /// An array of dates
        /// </summary>
        /// <value>An array of dates</value>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public List<DateTime> Dates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobOverridesCombinationsRoot {\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobOverridesCombinationsRoot);
        }

        /// <summary>
        /// Returns true if JobOverridesCombinationsRoot instances are equal
        /// </summary>
        /// <param name="input">Instance of JobOverridesCombinationsRoot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobOverridesCombinationsRoot input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                ) && 
                (
                    this.Dates == input.Dates ||
                    this.Dates != null &&
                    input.Dates != null &&
                    this.Dates.SequenceEqual(input.Dates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accounts != null)
                {
                    hashCode = (hashCode * 59) + this.Accounts.GetHashCode();
                }
                if (this.Dates != null)
                {
                    hashCode = (hashCode * 59) + this.Dates.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
