/*
 * Portfolio Reporting Batcher
 *
 * The Portfolio Reporting Batcher (PRB) API allows clients to systematically leverage functionalities of the PRB application.
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.PortfolioReportingBatcher.Client.OpenAPIDateConverter;

namespace FactSet.SDK.PortfolioReportingBatcher.Model
{
    /// <summary>
    /// Details about the instance of the job run specified via id
    /// </summary>
    [DataContract(Name = "idStatus_data")]
    public partial class IdStatusData : IEquatable<IdStatusData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdStatusData" /> class.
        /// </summary>
        /// <param name="id">The run ID.</param>
        /// <param name="inputs">inputs.</param>
        /// <param name="prbStatus">prbStatus.</param>
        /// <param name="status">status.</param>
        /// <param name="statusDescription">Further details on the job&#39;s status.</param>
        public IdStatusData(string id = default(string), StartJob inputs = default(StartJob), PrbStatus prbStatus = default(PrbStatus), Status status = default(Status), string statusDescription = default(string))
        {
            this.Id = id;
            this.Inputs = inputs;
            this.PrbStatus = prbStatus;
            this.Status = status;
            this.StatusDescription = statusDescription;
        }

        /// <summary>
        /// The run ID
        /// </summary>
        /// <value>The run ID</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", EmitDefaultValue = false)]
        public StartJob Inputs { get; set; }

        /// <summary>
        /// Gets or Sets PrbStatus
        /// </summary>
        [DataMember(Name = "prbStatus", EmitDefaultValue = false)]
        public PrbStatus PrbStatus { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public Status Status { get; set; }

        /// <summary>
        /// Further details on the job&#39;s status
        /// </summary>
        /// <value>Further details on the job&#39;s status</value>
        [DataMember(Name = "statusDescription", EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdStatusData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  PrbStatus: ").Append(PrbStatus).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdStatusData);
        }

        /// <summary>
        /// Returns true if IdStatusData instances are equal
        /// </summary>
        /// <param name="input">Instance of IdStatusData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdStatusData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    (this.Inputs != null &&
                    this.Inputs.Equals(input.Inputs))
                ) && 
                (
                    this.PrbStatus == input.PrbStatus ||
                    (this.PrbStatus != null &&
                    this.PrbStatus.Equals(input.PrbStatus))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Inputs != null)
                {
                    hashCode = (hashCode * 59) + this.Inputs.GetHashCode();
                }
                if (this.PrbStatus != null)
                {
                    hashCode = (hashCode * 59) + this.PrbStatus.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.StatusDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDescription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StatusDescription (string) maxLength
            if (this.StatusDescription != null && this.StatusDescription.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StatusDescription, length must be less than 500.", new [] { "StatusDescription" });
            }

            yield break;
        }
    }

}
