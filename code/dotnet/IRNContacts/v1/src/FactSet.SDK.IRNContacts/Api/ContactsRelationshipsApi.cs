/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IRNContacts.Client;
using FactSet.SDK.IRNContacts.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IRNContacts.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsRelationshipsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a contact relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipTwoSidedSaveDto">contactRelationship object to save (optional)</param>
        /// <returns>NewItemDto</returns>
        NewItemDto CreateContactRelationship(ContactRelationshipTwoSidedSaveDto contactRelationshipTwoSidedSaveDto = default(ContactRelationshipTwoSidedSaveDto));

        /// <summary>
        /// Create a contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipTwoSidedSaveDto">contactRelationship object to save (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        ApiResponse<NewItemDto> CreateContactRelationshipWithHttpInfo(ContactRelationshipTwoSidedSaveDto contactRelationshipTwoSidedSaveDto = default(ContactRelationshipTwoSidedSaveDto));
        /// <summary>
        /// Delete a contact relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to delete associated record</param>
        /// <returns>void</returns>
        void DeleteContactRelationship(Guid contactRelationshipId);

        /// <summary>
        /// Delete a contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactRelationshipWithHttpInfo(Guid contactRelationshipId);
        /// <summary>
        /// Get all the relationships where the given symbol or contact identifier has been tagged in a relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="contactId"> (optional)</param>
        /// <param name="relationshipId"> (optional)</param>
        /// <returns>List<ContactRelationshipTwoSidedDto></returns>
        List<ContactRelationshipTwoSidedDto> GetAllRelationshipsTaggingAContact(string symbol = default(string), Guid? contactId = default(Guid?), Guid? relationshipId = default(Guid?));

        /// <summary>
        /// Get all the relationships where the given symbol or contact identifier has been tagged in a relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="contactId"> (optional)</param>
        /// <param name="relationshipId"> (optional)</param>
        /// <returns>ApiResponse of List<ContactRelationshipTwoSidedDto></returns>
        ApiResponse<List<ContactRelationshipTwoSidedDto>> GetAllRelationshipsTaggingAContactWithHttpInfo(string symbol = default(string), Guid? contactId = default(Guid?), Guid? relationshipId = default(Guid?));
        /// <summary>
        /// Get details on a specific contact relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to get associated record</param>
        /// <returns>ContactRelationshipTwoSidedDto</returns>
        ContactRelationshipTwoSidedDto GetContactRelationship(Guid contactRelationshipId);

        /// <summary>
        /// Get details on a specific contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to get associated record</param>
        /// <returns>ApiResponse of ContactRelationshipTwoSidedDto</returns>
        ApiResponse<ContactRelationshipTwoSidedDto> GetContactRelationshipWithHttpInfo(Guid contactRelationshipId);
        /// <summary>
        /// Update a contact relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to update associated record</param>
        /// <param name="operation">contactRelationshipPatch object to update (optional)</param>
        /// <returns>void</returns>
        void PatchContactRelationship(Guid contactRelationshipId, List<Operation> operation = default(List<Operation>));

        /// <summary>
        /// Update a contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to update associated record</param>
        /// <param name="operation">contactRelationshipPatch object to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchContactRelationshipWithHttpInfo(Guid contactRelationshipId, List<Operation> operation = default(List<Operation>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsRelationshipsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipTwoSidedSaveDto">contactRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        System.Threading.Tasks.Task<NewItemDto> CreateContactRelationshipAsync(ContactRelationshipTwoSidedSaveDto contactRelationshipTwoSidedSaveDto = default(ContactRelationshipTwoSidedSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipTwoSidedSaveDto">contactRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateContactRelationshipWithHttpInfoAsync(ContactRelationshipTwoSidedSaveDto contactRelationshipTwoSidedSaveDto = default(ContactRelationshipTwoSidedSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactRelationshipAsync(Guid contactRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactRelationshipWithHttpInfoAsync(Guid contactRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the relationships where the given symbol or contact identifier has been tagged in a relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="contactId"> (optional)</param>
        /// <param name="relationshipId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactRelationshipTwoSidedDto&gt;</returns>
        System.Threading.Tasks.Task<List<ContactRelationshipTwoSidedDto>> GetAllRelationshipsTaggingAContactAsync(string symbol = default(string), Guid? contactId = default(Guid?), Guid? relationshipId = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the relationships where the given symbol or contact identifier has been tagged in a relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="contactId"> (optional)</param>
        /// <param name="relationshipId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<ContactRelationshipTwoSidedDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactRelationshipTwoSidedDto>>> GetAllRelationshipsTaggingAContactWithHttpInfoAsync(string symbol = default(string), Guid? contactId = default(Guid?), Guid? relationshipId = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details on a specific contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactRelationshipTwoSidedDto</returns>
        System.Threading.Tasks.Task<ContactRelationshipTwoSidedDto> GetContactRelationshipAsync(Guid contactRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details on a specific contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactRelationshipTwoSidedDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactRelationshipTwoSidedDto>> GetContactRelationshipWithHttpInfoAsync(Guid contactRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to update associated record</param>
        /// <param name="operation">contactRelationshipPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchContactRelationshipAsync(Guid contactRelationshipId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a contact relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to update associated record</param>
        /// <param name="operation">contactRelationshipPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchContactRelationshipWithHttpInfoAsync(Guid contactRelationshipId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsRelationshipsApi : IContactsRelationshipsApiSync, IContactsRelationshipsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsRelationshipsApi : IContactsRelationshipsApi
    {
        private FactSet.SDK.IRNContacts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateContactRelationshipResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(NewItemDto) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteContactRelationshipResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetAllRelationshipsTaggingAContactResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<ContactRelationshipTwoSidedDto>) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContactRelationshipResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ContactRelationshipTwoSidedDto) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PatchContactRelationshipResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsRelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsRelationshipsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsRelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsRelationshipsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IRNContacts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNContacts.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IRNContacts.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IRNContacts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsRelationshipsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsRelationshipsApi(FactSet.SDK.IRNContacts.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IRNContacts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNContacts.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IRNContacts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsRelationshipsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContactsRelationshipsApi(FactSet.SDK.IRNContacts.Client.ISynchronousClient client, FactSet.SDK.IRNContacts.Client.IAsynchronousClient asyncClient, FactSet.SDK.IRNContacts.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IRNContacts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IRNContacts.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IRNContacts.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IRNContacts.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IRNContacts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipTwoSidedSaveDto">contactRelationship object to save (optional)</param>
        /// <returns>NewItemDto</returns>
        public NewItemDto CreateContactRelationship(ContactRelationshipTwoSidedSaveDto contactRelationshipTwoSidedSaveDto = default(ContactRelationshipTwoSidedSaveDto))
        {
            var localVarResponse = CreateContactRelationshipWithHttpInfo(contactRelationshipTwoSidedSaveDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipTwoSidedSaveDto">contactRelationship object to save (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        public ApiResponse<NewItemDto> CreateContactRelationshipWithHttpInfo(ContactRelationshipTwoSidedSaveDto contactRelationshipTwoSidedSaveDto = default(ContactRelationshipTwoSidedSaveDto))
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactRelationshipTwoSidedSaveDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateContactRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            NewItemDto>("/contact-relationships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipTwoSidedSaveDto">contactRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        public async System.Threading.Tasks.Task<NewItemDto>CreateContactRelationshipAsync(ContactRelationshipTwoSidedSaveDto contactRelationshipTwoSidedSaveDto = default(ContactRelationshipTwoSidedSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateContactRelationshipWithHttpInfoAsync(contactRelationshipTwoSidedSaveDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipTwoSidedSaveDto">contactRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateContactRelationshipWithHttpInfoAsync(ContactRelationshipTwoSidedSaveDto contactRelationshipTwoSidedSaveDto = default(ContactRelationshipTwoSidedSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactRelationshipTwoSidedSaveDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateContactRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewItemDto>("/contact-relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to delete associated record</param>
        /// <returns>void</returns>
        public void DeleteContactRelationship(Guid contactRelationshipId)
        {
            DeleteContactRelationshipWithHttpInfo(contactRelationshipId);
        }

        /// <summary>
        /// Delete a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactRelationshipWithHttpInfo(Guid contactRelationshipId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactRelationshipId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactRelationshipId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteContactRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/contact-relationships/{contactRelationshipId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContactRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactRelationshipAsync(Guid contactRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteContactRelationshipWithHttpInfoAsync(contactRelationshipId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactRelationshipWithHttpInfoAsync(Guid contactRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactRelationshipId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactRelationshipId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteContactRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/contact-relationships/{contactRelationshipId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContactRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the relationships where the given symbol or contact identifier has been tagged in a relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="contactId"> (optional)</param>
        /// <param name="relationshipId"> (optional)</param>
        /// <returns>List<ContactRelationshipTwoSidedDto></returns>
        public List<ContactRelationshipTwoSidedDto> GetAllRelationshipsTaggingAContact(string symbol = default(string), Guid? contactId = default(Guid?), Guid? relationshipId = default(Guid?))
        {
            var localVarResponse = GetAllRelationshipsTaggingAContactWithHttpInfo(symbol, contactId, relationshipId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the relationships where the given symbol or contact identifier has been tagged in a relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="contactId"> (optional)</param>
        /// <param name="relationshipId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ContactRelationshipTwoSidedDto&gt;</returns>
        public ApiResponse<List<ContactRelationshipTwoSidedDto>> GetAllRelationshipsTaggingAContactWithHttpInfo(string symbol = default(string), Guid? contactId = default(Guid?), Guid? relationshipId = default(Guid?))
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (symbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            }
            if (contactId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "contactId", contactId));
            }
            if (relationshipId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "relationshipId", relationshipId));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAllRelationshipsTaggingAContactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<ContactRelationshipTwoSidedDto>>("/contact-relationships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRelationshipsTaggingAContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all the relationships where the given symbol or contact identifier has been tagged in a relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="contactId"> (optional)</param>
        /// <param name="relationshipId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactRelationshipTwoSidedDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactRelationshipTwoSidedDto>>GetAllRelationshipsTaggingAContactAsync(string symbol = default(string), Guid? contactId = default(Guid?), Guid? relationshipId = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAllRelationshipsTaggingAContactWithHttpInfoAsync(symbol, contactId, relationshipId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the relationships where the given symbol or contact identifier has been tagged in a relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="contactId"> (optional)</param>
        /// <param name="relationshipId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactRelationshipTwoSidedDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<ContactRelationshipTwoSidedDto>>> GetAllRelationshipsTaggingAContactWithHttpInfoAsync(string symbol = default(string), Guid? contactId = default(Guid?), Guid? relationshipId = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (symbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            }
            if (contactId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "contactId", contactId));
            }
            if (relationshipId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "relationshipId", relationshipId));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAllRelationshipsTaggingAContactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactRelationshipTwoSidedDto>>("/contact-relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRelationshipsTaggingAContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details on a specific contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to get associated record</param>
        /// <returns>ContactRelationshipTwoSidedDto</returns>
        public ContactRelationshipTwoSidedDto GetContactRelationship(Guid contactRelationshipId)
        {
            var localVarResponse = GetContactRelationshipWithHttpInfo(contactRelationshipId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details on a specific contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to get associated record</param>
        /// <returns>ApiResponse of ContactRelationshipTwoSidedDto</returns>
        public ApiResponse<ContactRelationshipTwoSidedDto> GetContactRelationshipWithHttpInfo(Guid contactRelationshipId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactRelationshipId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactRelationshipId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContactRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ContactRelationshipTwoSidedDto>("/contact-relationships/{contactRelationshipId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get details on a specific contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactRelationshipTwoSidedDto</returns>
        public async System.Threading.Tasks.Task<ContactRelationshipTwoSidedDto>GetContactRelationshipAsync(Guid contactRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContactRelationshipWithHttpInfoAsync(contactRelationshipId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details on a specific contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactRelationshipTwoSidedDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ContactRelationshipTwoSidedDto>> GetContactRelationshipWithHttpInfoAsync(Guid contactRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactRelationshipId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactRelationshipId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContactRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContactRelationshipTwoSidedDto>("/contact-relationships/{contactRelationshipId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to update associated record</param>
        /// <param name="operation">contactRelationshipPatch object to update (optional)</param>
        /// <returns>void</returns>
        public void PatchContactRelationship(Guid contactRelationshipId, List<Operation> operation = default(List<Operation>))
        {
            PatchContactRelationshipWithHttpInfo(contactRelationshipId, operation);
        }

        /// <summary>
        /// Update a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to update associated record</param>
        /// <param name="operation">contactRelationshipPatch object to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchContactRelationshipWithHttpInfo(Guid contactRelationshipId, List<Operation> operation = default(List<Operation>))
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactRelationshipId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactRelationshipId)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PatchContactRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<
            Object>("/contact-relationships/{contactRelationshipId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchContactRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Update a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to update associated record</param>
        /// <param name="operation">contactRelationshipPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchContactRelationshipAsync(Guid contactRelationshipId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PatchContactRelationshipWithHttpInfoAsync(contactRelationshipId, operation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a contact relationship 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactRelationshipId">contactRelationshipId to update associated record</param>
        /// <param name="operation">contactRelationshipPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchContactRelationshipWithHttpInfoAsync(Guid contactRelationshipId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactRelationshipId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactRelationshipId)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PatchContactRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/contact-relationships/{contactRelationshipId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchContactRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
