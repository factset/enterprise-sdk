/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IRNContacts.Client;
using FactSet.SDK.IRNContacts.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IRNContacts.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a contact
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <returns>NewItemDto</returns>
        NewItemDto CreateContact(ContactSaveDto contactSaveDto = default(ContactSaveDto));

        /// <summary>
        /// Create a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        ApiResponse<NewItemDto> CreateContactWithHttpInfo(ContactSaveDto contactSaveDto = default(ContactSaveDto));
        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <returns>void</returns>
        void DeleteContact(Guid contactId);

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactWithHttpInfo(Guid contactId);
        /// <summary>
        /// Get all custom field and standard field details on a specific contact
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <returns>ContactDto</returns>
        ContactDto GetContact(Guid contactId);

        /// <summary>
        /// Get all custom field and standard field details on a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <returns>ApiResponse of ContactDto</returns>
        ApiResponse<ContactDto> GetContactWithHttpInfo(Guid contactId);
        /// <summary>
        /// Get a contact’s audit history
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List<ContactEventDto></returns>
        List<ContactEventDto> GetContactEvents(Guid contactId);

        /// <summary>
        /// Get a contact’s audit history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List<ContactEventDto></returns>
        ApiResponse<List<ContactEventDto>> GetContactEventsWithHttpInfo(Guid contactId);
        /// <summary>
        /// Get the About field content for a specific contact
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <returns>string</returns>
        string GetContactNotes(Guid contactId);

        /// <summary>
        /// Get the About field content for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetContactNotesWithHttpInfo(Guid contactId);
        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List<RecordPreviewDto></returns>
        List<RecordPreviewDto> GetContactRecords(Guid contactId);

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List<RecordPreviewDto></returns>
        ApiResponse<List<RecordPreviewDto>> GetContactRecordsWithHttpInfo(Guid contactId);
        /// <summary>
        /// Returns a list of a contact’s relationships
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List<ContactRelationshipDto></returns>
        List<ContactRelationshipDto> GetContactRelationships(Guid contactId);

        /// <summary>
        /// Returns a list of a contact’s relationships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List<ContactRelationshipDto></returns>
        ApiResponse<List<ContactRelationshipDto>> GetContactRelationshipsWithHttpInfo(Guid contactId);
        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <returns>List<ContactSummaryDto></returns>
        List<ContactSummaryDto> GetContacts(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?));

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <returns>ApiResponse of List<ContactSummaryDto></returns>
        ApiResponse<List<ContactSummaryDto>> GetContactsWithHttpInfo(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?));
        /// <summary>
        /// Edit a contact’s standard field and custom field data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <returns>void</returns>
        void PatchContact(Guid contactId, List<Operation> operation = default(List<Operation>));

        /// <summary>
        /// Edit a contact’s standard field and custom field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchContactWithHttpInfo(Guid contactId, List<Operation> operation = default(List<Operation>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        System.Threading.Tasks.Task<NewItemDto> CreateContactAsync(ContactSaveDto contactSaveDto = default(ContactSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateContactWithHttpInfoAsync(ContactSaveDto contactSaveDto = default(ContactSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all custom field and standard field details on a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactDto</returns>
        System.Threading.Tasks.Task<ContactDto> GetContactAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all custom field and standard field details on a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactDto>> GetContactWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a contact’s audit history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactEventDto&gt;</returns>
        System.Threading.Tasks.Task<List<ContactEventDto>> GetContactEventsAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a contact’s audit history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<ContactEventDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactEventDto>>> GetContactEventsWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the About field content for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetContactNotesAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the About field content for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetContactNotesWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecordPreviewDto&gt;</returns>
        System.Threading.Tasks.Task<List<RecordPreviewDto>> GetContactRecordsAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<RecordPreviewDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecordPreviewDto>>> GetContactRecordsWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of a contact’s relationships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactRelationshipDto&gt;</returns>
        System.Threading.Tasks.Task<List<ContactRelationshipDto>> GetContactRelationshipsAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of a contact’s relationships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<ContactRelationshipDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactRelationshipDto>>> GetContactRelationshipsWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactSummaryDto&gt;</returns>
        System.Threading.Tasks.Task<List<ContactSummaryDto>> GetContactsAsync(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<ContactSummaryDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactSummaryDto>>> GetContactsWithHttpInfoAsync(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit a contact’s standard field and custom field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchContactAsync(Guid contactId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit a contact’s standard field and custom field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchContactWithHttpInfoAsync(Guid contactId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IContactsApiSync, IContactsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private FactSet.SDK.IRNContacts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateContactResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(NewItemDto) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteContactResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContactResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ContactDto) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContactEventsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<ContactEventDto>) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContactNotesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(string) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContactRecordsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<RecordPreviewDto>) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContactRelationshipsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<ContactRelationshipDto>) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContactsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<ContactSummaryDto>) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PatchContactResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IRNContacts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNContacts.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IRNContacts.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IRNContacts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(FactSet.SDK.IRNContacts.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IRNContacts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNContacts.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IRNContacts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContactsApi(FactSet.SDK.IRNContacts.Client.ISynchronousClient client, FactSet.SDK.IRNContacts.Client.IAsynchronousClient asyncClient, FactSet.SDK.IRNContacts.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IRNContacts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IRNContacts.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IRNContacts.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IRNContacts.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IRNContacts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <returns>NewItemDto</returns>
        public NewItemDto CreateContact(ContactSaveDto contactSaveDto = default(ContactSaveDto))
        {
            var localVarResponse = CreateContactWithHttpInfo(contactSaveDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        public ApiResponse<NewItemDto> CreateContactWithHttpInfo(ContactSaveDto contactSaveDto = default(ContactSaveDto))
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactSaveDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateContactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            NewItemDto>("/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        public async System.Threading.Tasks.Task<NewItemDto>CreateContactAsync(ContactSaveDto contactSaveDto = default(ContactSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateContactWithHttpInfoAsync(contactSaveDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateContactWithHttpInfoAsync(ContactSaveDto contactSaveDto = default(ContactSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactSaveDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateContactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewItemDto>("/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <returns>void</returns>
        public void DeleteContact(Guid contactId)
        {
            DeleteContactWithHttpInfo(contactId);
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteContactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/contacts/{contactId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteContactWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteContactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/contacts/{contactId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <returns>ContactDto</returns>
        public ContactDto GetContact(Guid contactId)
        {
            var localVarResponse = GetContactWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <returns>ApiResponse of ContactDto</returns>
        public ApiResponse<ContactDto> GetContactWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ContactDto>("/contacts/{contactId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactDto</returns>
        public async System.Threading.Tasks.Task<ContactDto>GetContactAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContactWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ContactDto>> GetContactWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContactDto>("/contacts/{contactId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a contact’s audit history 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List<ContactEventDto></returns>
        public List<ContactEventDto> GetContactEvents(Guid contactId)
        {
            var localVarResponse = GetContactEventsWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a contact’s audit history 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List&lt;ContactEventDto&gt;</returns>
        public ApiResponse<List<ContactEventDto>> GetContactEventsWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContactEventsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<ContactEventDto>>("/contacts/{contactId}/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a contact’s audit history 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactEventDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactEventDto>>GetContactEventsAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContactEventsWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a contact’s audit history 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactEventDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<ContactEventDto>>> GetContactEventsWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContactEventsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactEventDto>>("/contacts/{contactId}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the About field content for a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <returns>string</returns>
        public string GetContactNotes(Guid contactId)
        {
            var localVarResponse = GetContactNotesWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the About field content for a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetContactNotesWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContactNotesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            string>("/contacts/{contactId}/about", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the About field content for a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string>GetContactNotesAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContactNotesWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the About field content for a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<string>> GetContactNotesWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContactNotesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/contacts/{contactId}/about", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List<RecordPreviewDto></returns>
        public List<RecordPreviewDto> GetContactRecords(Guid contactId)
        {
            var localVarResponse = GetContactRecordsWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List&lt;RecordPreviewDto&gt;</returns>
        public ApiResponse<List<RecordPreviewDto>> GetContactRecordsWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContactRecordsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<RecordPreviewDto>>("/contacts/{contactId}/records", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecordPreviewDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecordPreviewDto>>GetContactRecordsAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContactRecordsWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecordPreviewDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<RecordPreviewDto>>> GetContactRecordsWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContactRecordsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RecordPreviewDto>>("/contacts/{contactId}/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of a contact’s relationships 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List<ContactRelationshipDto></returns>
        public List<ContactRelationshipDto> GetContactRelationships(Guid contactId)
        {
            var localVarResponse = GetContactRelationshipsWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of a contact’s relationships 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List&lt;ContactRelationshipDto&gt;</returns>
        public ApiResponse<List<ContactRelationshipDto>> GetContactRelationshipsWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContactRelationshipsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<ContactRelationshipDto>>("/contacts/{contactId}/relationships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of a contact’s relationships 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactRelationshipDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactRelationshipDto>>GetContactRelationshipsAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContactRelationshipsWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of a contact’s relationships 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactRelationshipDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<ContactRelationshipDto>>> GetContactRelationshipsWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContactRelationshipsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactRelationshipDto>>("/contacts/{contactId}/relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <returns>List<ContactSummaryDto></returns>
        public List<ContactSummaryDto> GetContacts(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?))
        {
            var localVarResponse = GetContactsWithHttpInfo(fullName, emailAddress, identifier, employerName, customFieldValues, search, sort, includeLastMeetingDate, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;ContactSummaryDto&gt;</returns>
        public ApiResponse<List<ContactSummaryDto>> GetContactsWithHttpInfo(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?))
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "fullName", fullName));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (employerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "employerName", employerName));
            }
            if (customFieldValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "customFieldValues", customFieldValues));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (includeLastMeetingDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "includeLastMeetingDate", includeLastMeetingDate));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContactsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<ContactSummaryDto>>("/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactSummaryDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactSummaryDto>>GetContactsAsync(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContactsWithHttpInfoAsync(fullName, emailAddress, identifier, employerName, customFieldValues, search, sort, includeLastMeetingDate, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactSummaryDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<ContactSummaryDto>>> GetContactsWithHttpInfoAsync(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "fullName", fullName));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (employerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "employerName", employerName));
            }
            if (customFieldValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "customFieldValues", customFieldValues));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (includeLastMeetingDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "includeLastMeetingDate", includeLastMeetingDate));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContactsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactSummaryDto>>("/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a contact’s standard field and custom field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <returns>void</returns>
        public void PatchContact(Guid contactId, List<Operation> operation = default(List<Operation>))
        {
            PatchContactWithHttpInfo(contactId, operation);
        }

        /// <summary>
        /// Edit a contact’s standard field and custom field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchContactWithHttpInfo(Guid contactId, List<Operation> operation = default(List<Operation>))
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PatchContactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<
            Object>("/contacts/{contactId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Edit a contact’s standard field and custom field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchContactAsync(Guid contactId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PatchContactWithHttpInfoAsync(contactId, operation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Edit a contact’s standard field and custom field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchContactWithHttpInfoAsync(Guid contactId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PatchContactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/contacts/{contactId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
