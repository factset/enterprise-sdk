/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNContacts.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNContacts.Model
{
    /// <summary>
    /// ContactSaveDto
    /// </summary>
    [DataContract(Name = "ContactSaveDto")]
    public partial class ContactSaveDto : IEquatable<ContactSaveDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactSaveDto" /> class.
        /// </summary>
        /// <param name="primaryEmailAddress">primaryEmailAddress.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="notes">notes.</param>
        /// <param name="linkedInProfile">linkedInProfile.</param>
        /// <param name="personSymbol">personSymbol.</param>
        /// <param name="roleId">roleId.</param>
        /// <param name="typeId">typeId.</param>
        /// <param name="address">address.</param>
        /// <param name="phoneNumbers">phoneNumbers.</param>
        /// <param name="leftRelationships">leftRelationships.</param>
        /// <param name="rightRelationships">rightRelationships.</param>
        /// <param name="alternativeEmailAddresses">alternativeEmailAddresses.</param>
        /// <param name="customFields">customFields.</param>
        public ContactSaveDto(string primaryEmailAddress = default(string), string fullName = default(string), string notes = default(string), string linkedInProfile = default(string), string personSymbol = default(string), Guid roleId = default(Guid), Guid typeId = default(Guid), ContactAddressDto address = default(ContactAddressDto), List<ContactPhoneSaveDto> phoneNumbers = default(List<ContactPhoneSaveDto>), List<ContactRelationshipSaveDto> leftRelationships = default(List<ContactRelationshipSaveDto>), List<ContactRelationshipSaveDto> rightRelationships = default(List<ContactRelationshipSaveDto>), List<AlternativeEmailAddressDto> alternativeEmailAddresses = default(List<AlternativeEmailAddressDto>), List<ContactCustomFieldValueSaveDto> customFields = default(List<ContactCustomFieldValueSaveDto>))
        {
            this.PrimaryEmailAddress = primaryEmailAddress;
            this.FullName = fullName;
            this.Notes = notes;
            this.LinkedInProfile = linkedInProfile;
            this.PersonSymbol = personSymbol;
            this.RoleId = roleId;
            this.TypeId = typeId;
            this.Address = address;
            this.PhoneNumbers = phoneNumbers;
            this.LeftRelationships = leftRelationships;
            this.RightRelationships = rightRelationships;
            this.AlternativeEmailAddresses = alternativeEmailAddresses;
            this.CustomFields = customFields;
        }

        /// <summary>
        /// Gets or Sets PrimaryEmailAddress
        /// </summary>
        [DataMember(Name = "primaryEmailAddress", EmitDefaultValue = true)]
        public string PrimaryEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "fullName", EmitDefaultValue = true)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets LinkedInProfile
        /// </summary>
        [DataMember(Name = "linkedInProfile", EmitDefaultValue = true)]
        public string LinkedInProfile { get; set; }

        /// <summary>
        /// Gets or Sets PersonSymbol
        /// </summary>
        [DataMember(Name = "personSymbol", EmitDefaultValue = true)]
        public string PersonSymbol { get; set; }

        /// <summary>
        /// Gets or Sets RoleId
        /// </summary>
        [DataMember(Name = "roleId", EmitDefaultValue = false)]
        public Guid RoleId { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "typeId", EmitDefaultValue = false)]
        public Guid TypeId { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = true)]
        public ContactAddressDto Address { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumbers
        /// </summary>
        [DataMember(Name = "phoneNumbers", EmitDefaultValue = true)]
        public List<ContactPhoneSaveDto> PhoneNumbers { get; set; }

        /// <summary>
        /// Gets or Sets LeftRelationships
        /// </summary>
        [DataMember(Name = "leftRelationships", EmitDefaultValue = true)]
        public List<ContactRelationshipSaveDto> LeftRelationships { get; set; }

        /// <summary>
        /// Gets or Sets RightRelationships
        /// </summary>
        [DataMember(Name = "rightRelationships", EmitDefaultValue = true)]
        public List<ContactRelationshipSaveDto> RightRelationships { get; set; }

        /// <summary>
        /// Gets or Sets AlternativeEmailAddresses
        /// </summary>
        [DataMember(Name = "alternativeEmailAddresses", EmitDefaultValue = true)]
        public List<AlternativeEmailAddressDto> AlternativeEmailAddresses { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = true)]
        public List<ContactCustomFieldValueSaveDto> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactSaveDto {\n");
            sb.Append("  PrimaryEmailAddress: ").Append(PrimaryEmailAddress).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  LinkedInProfile: ").Append(LinkedInProfile).Append("\n");
            sb.Append("  PersonSymbol: ").Append(PersonSymbol).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("  LeftRelationships: ").Append(LeftRelationships).Append("\n");
            sb.Append("  RightRelationships: ").Append(RightRelationships).Append("\n");
            sb.Append("  AlternativeEmailAddresses: ").Append(AlternativeEmailAddresses).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactSaveDto);
        }

        /// <summary>
        /// Returns true if ContactSaveDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactSaveDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactSaveDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PrimaryEmailAddress == input.PrimaryEmailAddress ||
                    (this.PrimaryEmailAddress != null &&
                    this.PrimaryEmailAddress.Equals(input.PrimaryEmailAddress))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.LinkedInProfile == input.LinkedInProfile ||
                    (this.LinkedInProfile != null &&
                    this.LinkedInProfile.Equals(input.LinkedInProfile))
                ) && 
                (
                    this.PersonSymbol == input.PersonSymbol ||
                    (this.PersonSymbol != null &&
                    this.PersonSymbol.Equals(input.PersonSymbol))
                ) && 
                (
                    this.RoleId == input.RoleId ||
                    (this.RoleId != null &&
                    this.RoleId.Equals(input.RoleId))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.PhoneNumbers == input.PhoneNumbers ||
                    this.PhoneNumbers != null &&
                    input.PhoneNumbers != null &&
                    this.PhoneNumbers.SequenceEqual(input.PhoneNumbers)
                ) && 
                (
                    this.LeftRelationships == input.LeftRelationships ||
                    this.LeftRelationships != null &&
                    input.LeftRelationships != null &&
                    this.LeftRelationships.SequenceEqual(input.LeftRelationships)
                ) && 
                (
                    this.RightRelationships == input.RightRelationships ||
                    this.RightRelationships != null &&
                    input.RightRelationships != null &&
                    this.RightRelationships.SequenceEqual(input.RightRelationships)
                ) && 
                (
                    this.AlternativeEmailAddresses == input.AlternativeEmailAddresses ||
                    this.AlternativeEmailAddresses != null &&
                    input.AlternativeEmailAddresses != null &&
                    this.AlternativeEmailAddresses.SequenceEqual(input.AlternativeEmailAddresses)
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrimaryEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryEmailAddress.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.LinkedInProfile != null)
                {
                    hashCode = (hashCode * 59) + this.LinkedInProfile.GetHashCode();
                }
                if (this.PersonSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.PersonSymbol.GetHashCode();
                }
                if (this.RoleId != null)
                {
                    hashCode = (hashCode * 59) + this.RoleId.GetHashCode();
                }
                if (this.TypeId != null)
                {
                    hashCode = (hashCode * 59) + this.TypeId.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.PhoneNumbers != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumbers.GetHashCode();
                }
                if (this.LeftRelationships != null)
                {
                    hashCode = (hashCode * 59) + this.LeftRelationships.GetHashCode();
                }
                if (this.RightRelationships != null)
                {
                    hashCode = (hashCode * 59) + this.RightRelationships.GetHashCode();
                }
                if (this.AlternativeEmailAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.AlternativeEmailAddresses.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PrimaryEmailAddress (string) maxLength
            if (this.PrimaryEmailAddress != null && this.PrimaryEmailAddress.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryEmailAddress, length must be less than 255.", new [] { "PrimaryEmailAddress" });
            }

            // PrimaryEmailAddress (string) minLength
            if (this.PrimaryEmailAddress != null && this.PrimaryEmailAddress.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryEmailAddress, length must be greater than 0.", new [] { "PrimaryEmailAddress" });
            }

            // FullName (string) maxLength
            if (this.FullName != null && this.FullName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FullName, length must be less than 255.", new [] { "FullName" });
            }

            // FullName (string) minLength
            if (this.FullName != null && this.FullName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FullName, length must be greater than 0.", new [] { "FullName" });
            }

            // LinkedInProfile (string) maxLength
            if (this.LinkedInProfile != null && this.LinkedInProfile.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LinkedInProfile, length must be less than 255.", new [] { "LinkedInProfile" });
            }

            // LinkedInProfile (string) minLength
            if (this.LinkedInProfile != null && this.LinkedInProfile.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LinkedInProfile, length must be greater than 0.", new [] { "LinkedInProfile" });
            }

            // PersonSymbol (string) maxLength
            if (this.PersonSymbol != null && this.PersonSymbol.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PersonSymbol, length must be less than 255.", new [] { "PersonSymbol" });
            }

            // PersonSymbol (string) minLength
            if (this.PersonSymbol != null && this.PersonSymbol.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PersonSymbol, length must be greater than 0.", new [] { "PersonSymbol" });
            }

            yield break;
        }
    }

}
