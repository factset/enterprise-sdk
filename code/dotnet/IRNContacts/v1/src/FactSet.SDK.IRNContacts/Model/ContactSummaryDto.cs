/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNContacts.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNContacts.Model
{
    /// <summary>
    /// ContactSummaryDto
    /// </summary>
    [DataContract(Name = "ContactSummaryDto")]
    public partial class ContactSummaryDto : IEquatable<ContactSummaryDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactSummaryDto" /> class.
        /// </summary>
        /// <param name="id">A guid that identifies the contact for further interactions.</param>
        /// <param name="irnPersonId">A Unique ticker with suffix -x that identifies the contact, which can be used in identifier lookup to tag the contact.</param>
        /// <param name="primaryEmailAddress">primaryEmailAddress.</param>
        /// <param name="identifier">identifier.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="employerName">employerName.</param>
        /// <param name="employerIdentifier">employerIdentifier.</param>
        /// <param name="city">city.</param>
        /// <param name="stateProvince">stateProvince.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="country">country.</param>
        /// <param name="role">role.</param>
        /// <param name="type">type.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="lastMeeting">lastMeeting.</param>
        /// <param name="alternativeEmailAddresses">alternativeEmailAddresses.</param>
        /// <param name="customFieldValues">customFieldValues.</param>
        public ContactSummaryDto(Guid id = default(Guid), string irnPersonId = default(string), string primaryEmailAddress = default(string), string identifier = default(string), string fullName = default(string), string employerName = default(string), string employerIdentifier = default(string), string city = default(string), string stateProvince = default(string), string postalCode = default(string), string country = default(string), ContactRoleDto role = default(ContactRoleDto), ContactTypeDto type = default(ContactTypeDto), bool isDeleted = default(bool), string lastMeeting = default(string), List<AlternativeEmailAddressDto> alternativeEmailAddresses = default(List<AlternativeEmailAddressDto>), List<ContactCustomFieldValueDto> customFieldValues = default(List<ContactCustomFieldValueDto>))
        {
            this.Id = id;
            this.IrnPersonId = irnPersonId;
            this.PrimaryEmailAddress = primaryEmailAddress;
            this.Identifier = identifier;
            this.FullName = fullName;
            this.EmployerName = employerName;
            this.EmployerIdentifier = employerIdentifier;
            this.City = city;
            this.StateProvince = stateProvince;
            this.PostalCode = postalCode;
            this.Country = country;
            this.Role = role;
            this.Type = type;
            this.IsDeleted = isDeleted;
            this.LastMeeting = lastMeeting;
            this.AlternativeEmailAddresses = alternativeEmailAddresses;
            this.CustomFieldValues = customFieldValues;
        }

        /// <summary>
        /// A guid that identifies the contact for further interactions
        /// </summary>
        /// <value>A guid that identifies the contact for further interactions</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// A Unique ticker with suffix -x that identifies the contact, which can be used in identifier lookup to tag the contact
        /// </summary>
        /// <value>A Unique ticker with suffix -x that identifies the contact, which can be used in identifier lookup to tag the contact</value>
        [DataMember(Name = "irnPersonId", EmitDefaultValue = true)]
        public string IrnPersonId { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryEmailAddress
        /// </summary>
        [DataMember(Name = "primaryEmailAddress", EmitDefaultValue = true)]
        public string PrimaryEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name = "identifier", EmitDefaultValue = true)]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "fullName", EmitDefaultValue = true)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets EmployerName
        /// </summary>
        [DataMember(Name = "employerName", EmitDefaultValue = true)]
        public string EmployerName { get; set; }

        /// <summary>
        /// Gets or Sets EmployerIdentifier
        /// </summary>
        [DataMember(Name = "employerIdentifier", EmitDefaultValue = true)]
        public string EmployerIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets StateProvince
        /// </summary>
        [DataMember(Name = "stateProvince", EmitDefaultValue = true)]
        public string StateProvince { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postalCode", EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = true)]
        public ContactRoleDto Role { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public ContactTypeDto Type { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets LastMeeting
        /// </summary>
        [DataMember(Name = "lastMeeting", EmitDefaultValue = true)]
        public string LastMeeting { get; set; }

        /// <summary>
        /// Gets or Sets AlternativeEmailAddresses
        /// </summary>
        [DataMember(Name = "alternativeEmailAddresses", EmitDefaultValue = true)]
        public List<AlternativeEmailAddressDto> AlternativeEmailAddresses { get; set; }

        /// <summary>
        /// Gets or Sets CustomFieldValues
        /// </summary>
        [DataMember(Name = "customFieldValues", EmitDefaultValue = true)]
        public List<ContactCustomFieldValueDto> CustomFieldValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactSummaryDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IrnPersonId: ").Append(IrnPersonId).Append("\n");
            sb.Append("  PrimaryEmailAddress: ").Append(PrimaryEmailAddress).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  EmployerName: ").Append(EmployerName).Append("\n");
            sb.Append("  EmployerIdentifier: ").Append(EmployerIdentifier).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  LastMeeting: ").Append(LastMeeting).Append("\n");
            sb.Append("  AlternativeEmailAddresses: ").Append(AlternativeEmailAddresses).Append("\n");
            sb.Append("  CustomFieldValues: ").Append(CustomFieldValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactSummaryDto);
        }

        /// <summary>
        /// Returns true if ContactSummaryDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactSummaryDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactSummaryDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IrnPersonId == input.IrnPersonId ||
                    (this.IrnPersonId != null &&
                    this.IrnPersonId.Equals(input.IrnPersonId))
                ) && 
                (
                    this.PrimaryEmailAddress == input.PrimaryEmailAddress ||
                    (this.PrimaryEmailAddress != null &&
                    this.PrimaryEmailAddress.Equals(input.PrimaryEmailAddress))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.EmployerName == input.EmployerName ||
                    (this.EmployerName != null &&
                    this.EmployerName.Equals(input.EmployerName))
                ) && 
                (
                    this.EmployerIdentifier == input.EmployerIdentifier ||
                    (this.EmployerIdentifier != null &&
                    this.EmployerIdentifier.Equals(input.EmployerIdentifier))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.StateProvince == input.StateProvince ||
                    (this.StateProvince != null &&
                    this.StateProvince.Equals(input.StateProvince))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.LastMeeting == input.LastMeeting ||
                    (this.LastMeeting != null &&
                    this.LastMeeting.Equals(input.LastMeeting))
                ) && 
                (
                    this.AlternativeEmailAddresses == input.AlternativeEmailAddresses ||
                    this.AlternativeEmailAddresses != null &&
                    input.AlternativeEmailAddresses != null &&
                    this.AlternativeEmailAddresses.SequenceEqual(input.AlternativeEmailAddresses)
                ) && 
                (
                    this.CustomFieldValues == input.CustomFieldValues ||
                    this.CustomFieldValues != null &&
                    input.CustomFieldValues != null &&
                    this.CustomFieldValues.SequenceEqual(input.CustomFieldValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.IrnPersonId != null)
                {
                    hashCode = (hashCode * 59) + this.IrnPersonId.GetHashCode();
                }
                if (this.PrimaryEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryEmailAddress.GetHashCode();
                }
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                if (this.EmployerName != null)
                {
                    hashCode = (hashCode * 59) + this.EmployerName.GetHashCode();
                }
                if (this.EmployerIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.EmployerIdentifier.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.StateProvince != null)
                {
                    hashCode = (hashCode * 59) + this.StateProvince.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Role != null)
                {
                    hashCode = (hashCode * 59) + this.Role.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.LastMeeting != null)
                {
                    hashCode = (hashCode * 59) + this.LastMeeting.GetHashCode();
                }
                if (this.AlternativeEmailAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.AlternativeEmailAddresses.GetHashCode();
                }
                if (this.CustomFieldValues != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFieldValues.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
