/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayAPISCIM.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayAPISCIM.Model
{
    /// <summary>
    /// A reference to a Federation resource.
    /// </summary>
    [DataContract(Name = "FederationResourceReference")]
    public partial class FederationResourceReference : IEquatable<FederationResourceReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FederationResourceReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FederationResourceReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FederationResourceReference" /> class.
        /// </summary>
        /// <param name="value">Identifier of the Federation. (required).</param>
        /// <param name="assertionValues">References to the federations in which the user has at least one assertion value. (required).</param>
        public FederationResourceReference(Guid value, List<FederationResourceReferenceAssertionValue> assertionValues,string _ref = default(string), string display = default(string))
        {
            this.Value = value;
            // to ensure "assertionValues" is required (not null)
            if (assertionValues == null) {
                throw new ArgumentNullException("assertionValues is a required property for FederationResourceReference and cannot be null");
            }
            this.AssertionValues = assertionValues;
        }

        /// <summary>
        /// Identifier of the Federation.
        /// </summary>
        /// <value>Identifier of the Federation.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public Guid Value { get; set; }

        /// <summary>
        /// The URI corresponding to a SCIM resource that is this Federation.
        /// </summary>
        /// <value>The URI corresponding to a SCIM resource that is this Federation.</value>
        [DataMember(Name = "$ref", EmitDefaultValue = false)]
        public string Ref { get; private set; }

        /// <summary>
        /// Returns false as Ref should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRef()
        {
            return false;
        }
        /// <summary>
        /// A human-readable name, primarily used for display purposes.
        /// </summary>
        /// <value>A human-readable name, primarily used for display purposes.</value>
        [DataMember(Name = "display", EmitDefaultValue = false)]
        public string Display { get; private set; }

        /// <summary>
        /// Returns false as Display should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplay()
        {
            return false;
        }
        /// <summary>
        /// References to the federations in which the user has at least one assertion value.
        /// </summary>
        /// <value>References to the federations in which the user has at least one assertion value.</value>
        [DataMember(Name = "assertionValues", IsRequired = true, EmitDefaultValue = false)]
        public List<FederationResourceReferenceAssertionValue> AssertionValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FederationResourceReference {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  AssertionValues: ").Append(AssertionValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FederationResourceReference);
        }

        /// <summary>
        /// Returns true if FederationResourceReference instances are equal
        /// </summary>
        /// <param name="input">Instance of FederationResourceReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FederationResourceReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Ref == input.Ref ||
                    (this.Ref != null &&
                    this.Ref.Equals(input.Ref))
                ) && 
                (
                    this.Display == input.Display ||
                    (this.Display != null &&
                    this.Display.Equals(input.Display))
                ) && 
                (
                    this.AssertionValues == input.AssertionValues ||
                    this.AssertionValues != null &&
                    input.AssertionValues != null &&
                    this.AssertionValues.SequenceEqual(input.AssertionValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Ref != null)
                {
                    hashCode = (hashCode * 59) + this.Ref.GetHashCode();
                }
                if (this.Display != null)
                {
                    hashCode = (hashCode * 59) + this.Display.GetHashCode();
                }
                if (this.AssertionValues != null)
                {
                    hashCode = (hashCode * 59) + this.AssertionValues.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
