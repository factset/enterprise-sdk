/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayAPISCIM.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayAPISCIM.Model
{
    /// <summary>
    /// Attributes of the file.
    /// </summary>
    [DataContract(Name = "FileManagerAuditItemAdditionalProperty")]
    public partial class FileManagerAuditItemAdditionalProperty : IEquatable<FileManagerAuditItemAdditionalProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileManagerAuditItemAdditionalProperty" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileManagerAuditItemAdditionalProperty() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileManagerAuditItemAdditionalProperty" /> class.
        /// </summary>
        /// <param name="entity">entity (required).</param>
        /// <param name="permissions">permissions (required).</param>
        /// <param name="permissionOverride">permissionOverride.</param>
        /// <param name="inheritanceDistance">inheritanceDistance.</param>
        public FileManagerAuditItemAdditionalProperty(FileManagerAuditItemAdditionalPropertyEntity entity, FileManagerAuditItemAdditionalPropertyPermissions permissions,FileManagerAuditItemAdditionalPropertyPermissionOverride permissionOverride = default(FileManagerAuditItemAdditionalPropertyPermissionOverride), int inheritanceDistance = default(int))
        {
            // to ensure "entity" is required (not null)
            if (entity == null) {
                throw new ArgumentNullException("entity is a required property for FileManagerAuditItemAdditionalProperty and cannot be null");
            }
            this.Entity = entity;
            // to ensure "permissions" is required (not null)
            if (permissions == null) {
                throw new ArgumentNullException("permissions is a required property for FileManagerAuditItemAdditionalProperty and cannot be null");
            }
            this.Permissions = permissions;
            this.PermissionOverride = permissionOverride;
            this.InheritanceDistance = inheritanceDistance;
        }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", IsRequired = true, EmitDefaultValue = false)]
        public FileManagerAuditItemAdditionalPropertyEntity Entity { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", IsRequired = true, EmitDefaultValue = false)]
        public FileManagerAuditItemAdditionalPropertyPermissions Permissions { get; set; }

        /// <summary>
        /// Gets or Sets PermissionOverride
        /// </summary>
        [DataMember(Name = "permission-override", EmitDefaultValue = false)]
        public FileManagerAuditItemAdditionalPropertyPermissionOverride PermissionOverride { get; set; }

        /// <summary>
        /// Gets or Sets InheritanceDistance
        /// </summary>
        [DataMember(Name = "inheritance-distance", EmitDefaultValue = false)]
        public int InheritanceDistance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileManagerAuditItemAdditionalProperty {\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  PermissionOverride: ").Append(PermissionOverride).Append("\n");
            sb.Append("  InheritanceDistance: ").Append(InheritanceDistance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileManagerAuditItemAdditionalProperty);
        }

        /// <summary>
        /// Returns true if FileManagerAuditItemAdditionalProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of FileManagerAuditItemAdditionalProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileManagerAuditItemAdditionalProperty input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.PermissionOverride == input.PermissionOverride ||
                    (this.PermissionOverride != null &&
                    this.PermissionOverride.Equals(input.PermissionOverride))
                ) && 
                (
                    this.InheritanceDistance == input.InheritanceDistance ||
                    this.InheritanceDistance.Equals(input.InheritanceDistance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                if (this.Permissions != null)
                {
                    hashCode = (hashCode * 59) + this.Permissions.GetHashCode();
                }
                if (this.PermissionOverride != null)
                {
                    hashCode = (hashCode * 59) + this.PermissionOverride.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InheritanceDistance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
