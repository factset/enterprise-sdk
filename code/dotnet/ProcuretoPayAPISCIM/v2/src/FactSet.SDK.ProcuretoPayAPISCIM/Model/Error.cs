/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayAPISCIM.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayAPISCIM.Model
{
    /// <summary>
    /// Error
    /// </summary>
    [DataContract(Name = "Error")]
    public partial class Error : IEquatable<Error>, IValidatableObject
    {
        /// <summary>
        /// Defines Schemas
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SchemasEnum
        {
            /// <summary>
            /// Enum Urnietfparamsscimapimessages20Error for value: urn:ietf:params:scim:api:messages:2.0:Error
            /// </summary>
            [EnumMember(Value = "urn:ietf:params:scim:api:messages:2.0:Error")]
            Urnietfparamsscimapimessages20Error = 1

        }



        /// <summary>
        /// An array containing the standard schema URI used for identifying an error. See RFC 7644 section 3.12.
        /// </summary>
        /// <value>An array containing the standard schema URI used for identifying an error. See RFC 7644 section 3.12.</value>
        [DataMember(Name = "schemas", EmitDefaultValue = false)]
        public List<SchemasEnum> Schemas { get; set; }
        /// <summary>
        /// Defines ScimType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScimTypeEnum
        {
            /// <summary>
            /// Enum InvalidFilter for value: invalidFilter
            /// </summary>
            [EnumMember(Value = "invalidFilter")]
            InvalidFilter = 1,

            /// <summary>
            /// Enum TooMany for value: tooMany
            /// </summary>
            [EnumMember(Value = "tooMany")]
            TooMany = 2,

            /// <summary>
            /// Enum Uniqueness for value: uniqueness
            /// </summary>
            [EnumMember(Value = "uniqueness")]
            Uniqueness = 3,

            /// <summary>
            /// Enum Mutability for value: mutability
            /// </summary>
            [EnumMember(Value = "mutability")]
            Mutability = 4,

            /// <summary>
            /// Enum InvalidSyntax for value: invalidSyntax
            /// </summary>
            [EnumMember(Value = "invalidSyntax")]
            InvalidSyntax = 5,

            /// <summary>
            /// Enum InvalidPath for value: invalidPath
            /// </summary>
            [EnumMember(Value = "invalidPath")]
            InvalidPath = 6,

            /// <summary>
            /// Enum NoTarget for value: noTarget
            /// </summary>
            [EnumMember(Value = "noTarget")]
            NoTarget = 7,

            /// <summary>
            /// Enum InvalidValue for value: invalidValue
            /// </summary>
            [EnumMember(Value = "invalidValue")]
            InvalidValue = 8,

            /// <summary>
            /// Enum InvalidVers for value: invalidVers
            /// </summary>
            [EnumMember(Value = "invalidVers")]
            InvalidVers = 9,

            /// <summary>
            /// Enum Sensitive for value: sensitive
            /// </summary>
            [EnumMember(Value = "sensitive")]
            Sensitive = 10

        }


        /// <summary>
        /// Gets or Sets ScimType
        /// </summary>
        [DataMember(Name = "scimType", EmitDefaultValue = false)]
        public ScimTypeEnum? ScimType { get; set; }
        /// <summary>
        /// HTTP status code.
        /// </summary>
        /// <value>HTTP status code.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum _307 for value: 307
            /// </summary>
            [EnumMember(Value = "307")]
            _307 = 1,

            /// <summary>
            /// Enum _308 for value: 308
            /// </summary>
            [EnumMember(Value = "308")]
            _308 = 2,

            /// <summary>
            /// Enum _400 for value: 400
            /// </summary>
            [EnumMember(Value = "400")]
            _400 = 3,

            /// <summary>
            /// Enum _401 for value: 401
            /// </summary>
            [EnumMember(Value = "401")]
            _401 = 4,

            /// <summary>
            /// Enum _403 for value: 403
            /// </summary>
            [EnumMember(Value = "403")]
            _403 = 5,

            /// <summary>
            /// Enum _404 for value: 404
            /// </summary>
            [EnumMember(Value = "404")]
            _404 = 6,

            /// <summary>
            /// Enum _409 for value: 409
            /// </summary>
            [EnumMember(Value = "409")]
            _409 = 7,

            /// <summary>
            /// Enum _412 for value: 412
            /// </summary>
            [EnumMember(Value = "412")]
            _412 = 8,

            /// <summary>
            /// Enum _413 for value: 413
            /// </summary>
            [EnumMember(Value = "413")]
            _413 = 9,

            /// <summary>
            /// Enum _500 for value: 500
            /// </summary>
            [EnumMember(Value = "500")]
            _500 = 10,

            /// <summary>
            /// Enum _501 for value: 501
            /// </summary>
            [EnumMember(Value = "501")]
            _501 = 11

        }


        /// <summary>
        /// HTTP status code.
        /// </summary>
        /// <value>HTTP status code.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="schemas">An array containing the standard schema URI used for identifying an error. See RFC 7644 section 3.12..</param>
        /// <param name="scimType">scimType.</param>
        /// <param name="detail">A detailed human-readable message..</param>
        /// <param name="status">HTTP status code..</param>
        public Error(List<SchemasEnum> schemas = default(List<SchemasEnum>), ScimTypeEnum? scimType = default(ScimTypeEnum?), string detail = default(string), StatusEnum? status = default(StatusEnum?))
        {
            this.Schemas = schemas;
            this.ScimType = scimType;
            this.Detail = detail;
            this.Status = status;
        }

        /// <summary>
        /// A detailed human-readable message.
        /// </summary>
        /// <value>A detailed human-readable message.</value>
        [DataMember(Name = "detail", EmitDefaultValue = false)]
        public string Detail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  Schemas: ").Append(Schemas).Append("\n");
            sb.Append("  ScimType: ").Append(ScimType).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Error);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Schemas == input.Schemas ||
                    this.Schemas.SequenceEqual(input.Schemas)
                ) && 
                (
                    this.ScimType == input.ScimType ||
                    this.ScimType.Equals(input.ScimType)
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Schemas.GetHashCode();
                hashCode = (hashCode * 59) + this.ScimType.GetHashCode();
                if (this.Detail != null)
                {
                    hashCode = (hashCode * 59) + this.Detail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
