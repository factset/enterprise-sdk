/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayAPISCIM.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayAPISCIM.Model
{
    /// <summary>
    /// UserResourceUrnScimSchemasExtensionFactSetCore10User
    /// </summary>
    [DataContract(Name = "UserResource_urn_scim_schemas_extension_FactSet_Core_1_0_User")]
    public partial class UserResourceUrnScimSchemasExtensionFactSetCore10User : IEquatable<UserResourceUrnScimSchemasExtensionFactSetCore10User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceUrnScimSchemasExtensionFactSetCore10User" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserResourceUrnScimSchemasExtensionFactSetCore10User() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceUrnScimSchemasExtensionFactSetCore10User" /> class.
        /// </summary>
        /// <param name="username">A FactSet \&quot;username\&quot; is FactSet&#39;s logical structure for grouping serial numbers into like-groups based on roleName, geographical location or line of business. (required).</param>
        /// <param name="location">location.</param>
        /// <param name="userTaxonomyData">userTaxonomyData.</param>
        /// <param name="roleName">Predetermined role of specific individual. Issues individual a base FactSet workstation and serial number. If passed as NULL a base-FactSet workstation will be allocated to the individual granting the individual a FactSet SerialNumber.</param>
        /// <param name="royaltyClass">Determines the type of client the individual and the royalty fee to be remitted to FactSet for the individual. Expected Royalty Class values will be provided to you by your FactSet account representative..</param>
        /// <param name="products">An array of FactSet products to allocate/remove from an individual. Individual must have a FactSet serial number associated with them..</param>
        /// <param name="federations">References to the federations in which the user has at least one assertion value..</param>
        /// <param name="invoiceId">The identifier of the invoice that should be associated with a new user for billing purposes. Note once an invoice ID has been assigned to a user, it cannot be modified via this API. If invoice ID re-assignment is necessary, please contact your FactSet representative..</param>
        public UserResourceUrnScimSchemasExtensionFactSetCore10User(string username,string serialNumber = default(string), string uniqueId = default(string), LocationResourceReference location = default(LocationResourceReference), UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData userTaxonomyData = default(UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData), string roleName = default(string), string royaltyClass = default(string), List<ProductResourceReferenceWithRapidActivationInfo> products = default(List<ProductResourceReferenceWithRapidActivationInfo>), List<PendingProductOrder> pendingProductOrders = default(List<PendingProductOrder>), List<FederationResourceReference> federations = default(List<FederationResourceReference>), string invoiceId = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null) {
                throw new ArgumentNullException("username is a required property for UserResourceUrnScimSchemasExtensionFactSetCore10User and cannot be null");
            }
            this.Username = username;
            this.Location = location;
            this.UserTaxonomyData = userTaxonomyData;
            this.RoleName = roleName;
            this.RoyaltyClass = royaltyClass;
            this.Products = products;
            this.Federations = federations;
            this.InvoiceId = invoiceId;
        }

        /// <summary>
        /// A FactSet \&quot;username\&quot; is FactSet&#39;s logical structure for grouping serial numbers into like-groups based on roleName, geographical location or line of business.
        /// </summary>
        /// <value>A FactSet \&quot;username\&quot; is FactSet&#39;s logical structure for grouping serial numbers into like-groups based on roleName, geographical location or line of business.</value>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// A serial number represents an individual&#39;s unique FactSet account identifier and base-workstation access. Serial numbers are allocated to an individual when a valid RoleName is present.
        /// </summary>
        /// <value>A serial number represents an individual&#39;s unique FactSet account identifier and base-workstation access. Serial numbers are allocated to an individual when a valid RoleName is present.</value>
        [DataMember(Name = "serialNumber", EmitDefaultValue = false)]
        public string SerialNumber { get; private set; }

        /// <summary>
        /// Returns false as SerialNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSerialNumber()
        {
            return false;
        }
        /// <summary>
        /// User identifier from the legacy User Provisioning API.
        /// </summary>
        /// <value>User identifier from the legacy User Provisioning API.</value>
        [DataMember(Name = "uniqueId", EmitDefaultValue = false)]
        public string UniqueId { get; private set; }

        /// <summary>
        /// Returns false as UniqueId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUniqueId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public LocationResourceReference Location { get; set; }

        /// <summary>
        /// Gets or Sets UserTaxonomyData
        /// </summary>
        [DataMember(Name = "userTaxonomyData", EmitDefaultValue = false)]
        public UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData UserTaxonomyData { get; set; }

        /// <summary>
        /// Predetermined role of specific individual. Issues individual a base FactSet workstation and serial number. If passed as NULL a base-FactSet workstation will be allocated to the individual granting the individual a FactSet SerialNumber
        /// </summary>
        /// <value>Predetermined role of specific individual. Issues individual a base FactSet workstation and serial number. If passed as NULL a base-FactSet workstation will be allocated to the individual granting the individual a FactSet SerialNumber</value>
        [DataMember(Name = "roleName", EmitDefaultValue = false)]
        public string RoleName { get; set; }

        /// <summary>
        /// Determines the type of client the individual and the royalty fee to be remitted to FactSet for the individual. Expected Royalty Class values will be provided to you by your FactSet account representative.
        /// </summary>
        /// <value>Determines the type of client the individual and the royalty fee to be remitted to FactSet for the individual. Expected Royalty Class values will be provided to you by your FactSet account representative.</value>
        [DataMember(Name = "royaltyClass", EmitDefaultValue = false)]
        public string RoyaltyClass { get; set; }

        /// <summary>
        /// An array of FactSet products to allocate/remove from an individual. Individual must have a FactSet serial number associated with them.
        /// </summary>
        /// <value>An array of FactSet products to allocate/remove from an individual. Individual must have a FactSet serial number associated with them.</value>
        [DataMember(Name = "products", EmitDefaultValue = false)]
        public List<ProductResourceReferenceWithRapidActivationInfo> Products { get; set; }

        /// <summary>
        /// An array of pending FactSet product orders.
        /// </summary>
        /// <value>An array of pending FactSet product orders.</value>
        [DataMember(Name = "pendingProductOrders", EmitDefaultValue = false)]
        public List<PendingProductOrder> PendingProductOrders { get; private set; }

        /// <summary>
        /// Returns false as PendingProductOrders should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePendingProductOrders()
        {
            return false;
        }
        /// <summary>
        /// References to the federations in which the user has at least one assertion value.
        /// </summary>
        /// <value>References to the federations in which the user has at least one assertion value.</value>
        [DataMember(Name = "federations", EmitDefaultValue = false)]
        public List<FederationResourceReference> Federations { get; set; }

        /// <summary>
        /// The identifier of the invoice that should be associated with a new user for billing purposes. Note once an invoice ID has been assigned to a user, it cannot be modified via this API. If invoice ID re-assignment is necessary, please contact your FactSet representative.
        /// </summary>
        /// <value>The identifier of the invoice that should be associated with a new user for billing purposes. Note once an invoice ID has been assigned to a user, it cannot be modified via this API. If invoice ID re-assignment is necessary, please contact your FactSet representative.</value>
        [DataMember(Name = "invoiceId", EmitDefaultValue = false)]
        public string InvoiceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserResourceUrnScimSchemasExtensionFactSetCore10User {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  UserTaxonomyData: ").Append(UserTaxonomyData).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  RoyaltyClass: ").Append(RoyaltyClass).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  PendingProductOrders: ").Append(PendingProductOrders).Append("\n");
            sb.Append("  Federations: ").Append(Federations).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserResourceUrnScimSchemasExtensionFactSetCore10User);
        }

        /// <summary>
        /// Returns true if UserResourceUrnScimSchemasExtensionFactSetCore10User instances are equal
        /// </summary>
        /// <param name="input">Instance of UserResourceUrnScimSchemasExtensionFactSetCore10User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserResourceUrnScimSchemasExtensionFactSetCore10User input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.UniqueId == input.UniqueId ||
                    (this.UniqueId != null &&
                    this.UniqueId.Equals(input.UniqueId))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.UserTaxonomyData == input.UserTaxonomyData ||
                    (this.UserTaxonomyData != null &&
                    this.UserTaxonomyData.Equals(input.UserTaxonomyData))
                ) && 
                (
                    this.RoleName == input.RoleName ||
                    (this.RoleName != null &&
                    this.RoleName.Equals(input.RoleName))
                ) && 
                (
                    this.RoyaltyClass == input.RoyaltyClass ||
                    (this.RoyaltyClass != null &&
                    this.RoyaltyClass.Equals(input.RoyaltyClass))
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.PendingProductOrders == input.PendingProductOrders ||
                    this.PendingProductOrders != null &&
                    input.PendingProductOrders != null &&
                    this.PendingProductOrders.SequenceEqual(input.PendingProductOrders)
                ) && 
                (
                    this.Federations == input.Federations ||
                    this.Federations != null &&
                    input.Federations != null &&
                    this.Federations.SequenceEqual(input.Federations)
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this.UniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueId.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.UserTaxonomyData != null)
                {
                    hashCode = (hashCode * 59) + this.UserTaxonomyData.GetHashCode();
                }
                if (this.RoleName != null)
                {
                    hashCode = (hashCode * 59) + this.RoleName.GetHashCode();
                }
                if (this.RoyaltyClass != null)
                {
                    hashCode = (hashCode * 59) + this.RoyaltyClass.GetHashCode();
                }
                if (this.Products != null)
                {
                    hashCode = (hashCode * 59) + this.Products.GetHashCode();
                }
                if (this.PendingProductOrders != null)
                {
                    hashCode = (hashCode * 59) + this.PendingProductOrders.GetHashCode();
                }
                if (this.Federations != null)
                {
                    hashCode = (hashCode * 59) + this.Federations.GetHashCode();
                }
                if (this.InvoiceId != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
