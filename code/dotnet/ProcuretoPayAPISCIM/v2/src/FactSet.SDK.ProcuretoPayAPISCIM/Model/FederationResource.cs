/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayAPISCIM.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayAPISCIM.Model
{
    /// <summary>
    /// Represents an authentication relationship between FactSet and a client firm for web technologies that facilitate single sign-on (SSO) access to FactSet services, such as SAML.
    /// </summary>
    [DataContract(Name = "FederationResource")]
    public partial class FederationResource : IEquatable<FederationResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FederationResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FederationResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FederationResource" /> class.
        /// </summary>
        /// <param name="schemas">A list of schema URIs in use by the resource..</param>
        /// <param name="location">location (required).</param>
        /// <param name="users">A list of mappings for users between their assertion value(s) as provided by this identity provider and their corresponding FactSet username-serial..</param>
        public FederationResource(string name, string entityId, string singleSignOnServiceUrl, string requestBinding, List<byte[]> certificates, FederationResourceLocation location,List<string> schemas = default(List<string>), Guid id = default(Guid), string metadataUrl = default(string), List<string> autoSyncUsernames = default(List<string>), List<FederationResourceUser> users = default(List<FederationResourceUser>))
        {
            // to ensure "location" is required (not null)
            if (location == null) {
                throw new ArgumentNullException("location is a required property for FederationResource and cannot be null");
            }
            this.Location = location;
            this.Schemas = schemas;
            this.Users = users;
        }

        /// <summary>
        /// A list of schema URIs in use by the resource.
        /// </summary>
        /// <value>A list of schema URIs in use by the resource.</value>
        [DataMember(Name = "schemas", EmitDefaultValue = false)]
        public List<string> Schemas { get; set; }

        /// <summary>
        /// The Globally Unique Identifier (GUID) of the federation.
        /// </summary>
        /// <value>The Globally Unique Identifier (GUID) of the federation.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Name of federation.
        /// </summary>
        /// <value>Name of federation.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// The entity identifier of the corresponding identity provider.
        /// </summary>
        /// <value>The entity identifier of the corresponding identity provider.</value>
        [DataMember(Name = "entityId", IsRequired = true, EmitDefaultValue = false)]
        public string EntityId { get; private set; }

        /// <summary>
        /// Returns false as EntityId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntityId()
        {
            return false;
        }
        /// <summary>
        /// Public link to the IdP&#39;s metadata.xml.
        /// </summary>
        /// <value>Public link to the IdP&#39;s metadata.xml.</value>
        [DataMember(Name = "metadataUrl", EmitDefaultValue = false)]
        public string MetadataUrl { get; private set; }

        /// <summary>
        /// Returns false as MetadataUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadataUrl()
        {
            return false;
        }
        /// <summary>
        /// Destination client browsers are directed to, at the IdP, for Single Sign-on Protocol Message exchange.
        /// </summary>
        /// <value>Destination client browsers are directed to, at the IdP, for Single Sign-on Protocol Message exchange.</value>
        [DataMember(Name = "singleSignOnServiceUrl", IsRequired = true, EmitDefaultValue = false)]
        public string SingleSignOnServiceUrl { get; private set; }

        /// <summary>
        /// Returns false as SingleSignOnServiceUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSingleSignOnServiceUrl()
        {
            return false;
        }
        /// <summary>
        /// Preferred HTTP method for IdP&#39;s singleSignOnServiceUrl destination.
        /// </summary>
        /// <value>Preferred HTTP method for IdP&#39;s singleSignOnServiceUrl destination.</value>
        [DataMember(Name = "requestBinding", IsRequired = true, EmitDefaultValue = false)]
        public string RequestBinding { get; private set; }

        /// <summary>
        /// Returns false as RequestBinding should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequestBinding()
        {
            return false;
        }
        /// <summary>
        /// Public x509 certificate values the Service Provider can expect Single Sign-on messages to be signed with from the IdP.
        /// </summary>
        /// <value>Public x509 certificate values the Service Provider can expect Single Sign-on messages to be signed with from the IdP.</value>
        [DataMember(Name = "certificates", IsRequired = true, EmitDefaultValue = false)]
        public List<byte[]> Certificates { get; private set; }

        /// <summary>
        /// Returns false as Certificates should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCertificates()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = false)]
        public FederationResourceLocation Location { get; set; }

        /// <summary>
        /// List of FactSet usernames automatically mapped into the federation with email address expected as contents of &#39;nameID&#39;.
        /// </summary>
        /// <value>List of FactSet usernames automatically mapped into the federation with email address expected as contents of &#39;nameID&#39;.</value>
        [DataMember(Name = "autoSyncUsernames", EmitDefaultValue = false)]
        public List<string> AutoSyncUsernames { get; private set; }

        /// <summary>
        /// Returns false as AutoSyncUsernames should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAutoSyncUsernames()
        {
            return false;
        }
        /// <summary>
        /// A list of mappings for users between their assertion value(s) as provided by this identity provider and their corresponding FactSet username-serial.
        /// </summary>
        /// <value>A list of mappings for users between their assertion value(s) as provided by this identity provider and their corresponding FactSet username-serial.</value>
        [DataMember(Name = "users", EmitDefaultValue = false)]
        public List<FederationResourceUser> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FederationResource {\n");
            sb.Append("  Schemas: ").Append(Schemas).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  MetadataUrl: ").Append(MetadataUrl).Append("\n");
            sb.Append("  SingleSignOnServiceUrl: ").Append(SingleSignOnServiceUrl).Append("\n");
            sb.Append("  RequestBinding: ").Append(RequestBinding).Append("\n");
            sb.Append("  Certificates: ").Append(Certificates).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  AutoSyncUsernames: ").Append(AutoSyncUsernames).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FederationResource);
        }

        /// <summary>
        /// Returns true if FederationResource instances are equal
        /// </summary>
        /// <param name="input">Instance of FederationResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FederationResource input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Schemas == input.Schemas ||
                    this.Schemas != null &&
                    input.Schemas != null &&
                    this.Schemas.SequenceEqual(input.Schemas)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.MetadataUrl == input.MetadataUrl ||
                    (this.MetadataUrl != null &&
                    this.MetadataUrl.Equals(input.MetadataUrl))
                ) && 
                (
                    this.SingleSignOnServiceUrl == input.SingleSignOnServiceUrl ||
                    (this.SingleSignOnServiceUrl != null &&
                    this.SingleSignOnServiceUrl.Equals(input.SingleSignOnServiceUrl))
                ) && 
                (
                    this.RequestBinding == input.RequestBinding ||
                    (this.RequestBinding != null &&
                    this.RequestBinding.Equals(input.RequestBinding))
                ) && 
                (
                    this.Certificates == input.Certificates ||
                    this.Certificates != null &&
                    input.Certificates != null &&
                    this.Certificates.SequenceEqual(input.Certificates)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.AutoSyncUsernames == input.AutoSyncUsernames ||
                    this.AutoSyncUsernames != null &&
                    input.AutoSyncUsernames != null &&
                    this.AutoSyncUsernames.SequenceEqual(input.AutoSyncUsernames)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Schemas != null)
                {
                    hashCode = (hashCode * 59) + this.Schemas.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                if (this.MetadataUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MetadataUrl.GetHashCode();
                }
                if (this.SingleSignOnServiceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SingleSignOnServiceUrl.GetHashCode();
                }
                if (this.RequestBinding != null)
                {
                    hashCode = (hashCode * 59) + this.RequestBinding.GetHashCode();
                }
                if (this.Certificates != null)
                {
                    hashCode = (hashCode * 59) + this.Certificates.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.AutoSyncUsernames != null)
                {
                    hashCode = (hashCode * 59) + this.AutoSyncUsernames.GetHashCode();
                }
                if (this.Users != null)
                {
                    hashCode = (hashCode * 59) + this.Users.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
