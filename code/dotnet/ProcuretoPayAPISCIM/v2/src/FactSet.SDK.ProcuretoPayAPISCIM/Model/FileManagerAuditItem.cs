/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayAPISCIM.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayAPISCIM.Model
{
    /// <summary>
    /// FileManagerAuditItem
    /// </summary>
    [DataContract(Name = "FileManagerAuditItem")]
    public partial class FileManagerAuditItem : IEquatable<FileManagerAuditItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileManagerAuditItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileManagerAuditItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileManagerAuditItem" /> class.
        /// </summary>
        /// <param name="username">The FactSet username associated with the file paths. (required).</param>
        /// <param name="paths">Object containing all file paths and their associated attributes. (required).</param>
        public FileManagerAuditItem(string username, Dictionary<string, List<FileManagerAuditItemAdditionalProperty>> paths)
        {
            // to ensure "username" is required (not null)
            if (username == null) {
                throw new ArgumentNullException("username is a required property for FileManagerAuditItem and cannot be null");
            }
            this.Username = username;
            // to ensure "paths" is required (not null)
            if (paths == null) {
                throw new ArgumentNullException("paths is a required property for FileManagerAuditItem and cannot be null");
            }
            this.Paths = paths;
        }

        /// <summary>
        /// The FactSet username associated with the file paths.
        /// </summary>
        /// <value>The FactSet username associated with the file paths.</value>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Object containing all file paths and their associated attributes.
        /// </summary>
        /// <value>Object containing all file paths and their associated attributes.</value>
        [DataMember(Name = "paths", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, List<FileManagerAuditItemAdditionalProperty>> Paths { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileManagerAuditItem {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Paths: ").Append(Paths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileManagerAuditItem);
        }

        /// <summary>
        /// Returns true if FileManagerAuditItem instances are equal
        /// </summary>
        /// <param name="input">Instance of FileManagerAuditItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileManagerAuditItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Paths == input.Paths ||
                    this.Paths != null &&
                    input.Paths != null &&
                    this.Paths.SequenceEqual(input.Paths)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Paths != null)
                {
                    hashCode = (hashCode * 59) + this.Paths.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
