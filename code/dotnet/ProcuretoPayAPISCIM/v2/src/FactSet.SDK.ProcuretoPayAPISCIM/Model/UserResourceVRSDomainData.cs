/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayAPISCIM.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayAPISCIM.Model
{
    /// <summary>
    /// UserResourceVRSDomainData
    /// </summary>
    [DataContract(Name = "UserResourceVRSDomainData")]
    public partial class UserResourceVRSDomainData : IEquatable<UserResourceVRSDomainData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceVRSDomainData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserResourceVRSDomainData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceVRSDomainData" /> class.
        /// </summary>
        /// <param name="domainCode">Unique identifier for the Vermilion domain. (required).</param>
        /// <param name="tenancies">tenancies (required).</param>
        /// <param name="isAdministrator">Whether the User is an administrator in the associated domain. (required).</param>
        /// <param name="password">Password of the User in the associated domain. May be null upon creation of the User, but afterward may not change from a non-null to a null value..</param>
        public UserResourceVRSDomainData(string domainCode, UserResourceVRSDomainDataTenancies tenancies, bool isAdministrator,string password = default(string))
        {
            // to ensure "domainCode" is required (not null)
            if (domainCode == null) {
                throw new ArgumentNullException("domainCode is a required property for UserResourceVRSDomainData and cannot be null");
            }
            this.DomainCode = domainCode;
            // to ensure "tenancies" is required (not null)
            if (tenancies == null) {
                throw new ArgumentNullException("tenancies is a required property for UserResourceVRSDomainData and cannot be null");
            }
            this.Tenancies = tenancies;
            this.IsAdministrator = isAdministrator;
            this.Password = password;
        }

        /// <summary>
        /// Unique identifier for the Vermilion domain.
        /// </summary>
        /// <value>Unique identifier for the Vermilion domain.</value>
        [DataMember(Name = "domainCode", IsRequired = true, EmitDefaultValue = false)]
        public string DomainCode { get; set; }

        /// <summary>
        /// Gets or Sets Tenancies
        /// </summary>
        [DataMember(Name = "tenancies", IsRequired = true, EmitDefaultValue = false)]
        public UserResourceVRSDomainDataTenancies Tenancies { get; set; }

        /// <summary>
        /// Whether the User is an administrator in the associated domain.
        /// </summary>
        /// <value>Whether the User is an administrator in the associated domain.</value>
        [DataMember(Name = "isAdministrator", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAdministrator { get; set; }

        /// <summary>
        /// Password of the User in the associated domain. May be null upon creation of the User, but afterward may not change from a non-null to a null value.
        /// </summary>
        /// <value>Password of the User in the associated domain. May be null upon creation of the User, but afterward may not change from a non-null to a null value.</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserResourceVRSDomainData {\n");
            sb.Append("  DomainCode: ").Append(DomainCode).Append("\n");
            sb.Append("  Tenancies: ").Append(Tenancies).Append("\n");
            sb.Append("  IsAdministrator: ").Append(IsAdministrator).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserResourceVRSDomainData);
        }

        /// <summary>
        /// Returns true if UserResourceVRSDomainData instances are equal
        /// </summary>
        /// <param name="input">Instance of UserResourceVRSDomainData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserResourceVRSDomainData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DomainCode == input.DomainCode ||
                    (this.DomainCode != null &&
                    this.DomainCode.Equals(input.DomainCode))
                ) && 
                (
                    this.Tenancies == input.Tenancies ||
                    (this.Tenancies != null &&
                    this.Tenancies.Equals(input.Tenancies))
                ) && 
                (
                    this.IsAdministrator == input.IsAdministrator ||
                    this.IsAdministrator.Equals(input.IsAdministrator)
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DomainCode != null)
                {
                    hashCode = (hashCode * 59) + this.DomainCode.GetHashCode();
                }
                if (this.Tenancies != null)
                {
                    hashCode = (hashCode * 59) + this.Tenancies.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAdministrator.GetHashCode();
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
