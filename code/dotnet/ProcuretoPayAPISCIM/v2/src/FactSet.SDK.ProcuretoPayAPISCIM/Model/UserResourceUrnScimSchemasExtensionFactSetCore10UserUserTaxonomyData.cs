/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayAPISCIM.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayAPISCIM.Model
{
    /// <summary>
    /// FactSet&#39;s classification of the user. Use taxonomy is composed of a user class as well as a user position.
    /// </summary>
    [DataContract(Name = "UserResource_urn_scim_schemas_extension_FactSet_Core_1_0_User_userTaxonomyData")]
    public partial class UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData : IEquatable<UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData" /> class.
        /// </summary>
        /// <param name="userClass">userClass (required).</param>
        /// <param name="userPosition">userPosition (required).</param>
        public UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData(UserClassResourceReference userClass, UserPositionResourceReference userPosition)
        {
            // to ensure "userClass" is required (not null)
            if (userClass == null) {
                throw new ArgumentNullException("userClass is a required property for UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData and cannot be null");
            }
            this.UserClass = userClass;
            // to ensure "userPosition" is required (not null)
            if (userPosition == null) {
                throw new ArgumentNullException("userPosition is a required property for UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData and cannot be null");
            }
            this.UserPosition = userPosition;
        }

        /// <summary>
        /// Gets or Sets UserClass
        /// </summary>
        [DataMember(Name = "userClass", IsRequired = true, EmitDefaultValue = false)]
        public UserClassResourceReference UserClass { get; set; }

        /// <summary>
        /// Gets or Sets UserPosition
        /// </summary>
        [DataMember(Name = "userPosition", IsRequired = true, EmitDefaultValue = false)]
        public UserPositionResourceReference UserPosition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData {\n");
            sb.Append("  UserClass: ").Append(UserClass).Append("\n");
            sb.Append("  UserPosition: ").Append(UserPosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData);
        }

        /// <summary>
        /// Returns true if UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData instances are equal
        /// </summary>
        /// <param name="input">Instance of UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserClass == input.UserClass ||
                    (this.UserClass != null &&
                    this.UserClass.Equals(input.UserClass))
                ) && 
                (
                    this.UserPosition == input.UserPosition ||
                    (this.UserPosition != null &&
                    this.UserPosition.Equals(input.UserPosition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserClass != null)
                {
                    hashCode = (hashCode * 59) + this.UserClass.GetHashCode();
                }
                if (this.UserPosition != null)
                {
                    hashCode = (hashCode * 59) + this.UserPosition.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
