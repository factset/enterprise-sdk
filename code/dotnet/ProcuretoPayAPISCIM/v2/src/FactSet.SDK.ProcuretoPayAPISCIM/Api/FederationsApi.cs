/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ProcuretoPayAPISCIM.Client;
using FactSet.SDK.ProcuretoPayAPISCIM.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ProcuretoPayAPISCIM.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFederationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a federation.
        /// </summary>
        /// <remarks>
        /// Get a specific federation resource.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>FederationResource</returns>
        FederationResource GetFederation(string id);

        /// <summary>
        /// Get a federation.
        /// </summary>
        /// <remarks>
        /// Get a specific federation resource.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>ApiResponse of FederationResource</returns>
        ApiResponse<FederationResource> GetFederationWithHttpInfo(string id);
        /// <summary>
        /// Get a list of federations.
        /// </summary>
        /// <remarks>
        /// Get a list of federation resources.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against string attributes. When using the \&quot;re\&quot; operator, do not include slash characters as delimiters (e.g. use \&quot;foo\&quot; instead of \&quot;/foo/\&quot;.) Also note the case-sensitivity of the regular expression corresponds to the \&quot;caseExact\&quot; characteristic of the target attribute. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <returns>FederationResourceList</returns>
        FederationResourceList GetFederations(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string));

        /// <summary>
        /// Get a list of federations.
        /// </summary>
        /// <remarks>
        /// Get a list of federation resources.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against string attributes. When using the \&quot;re\&quot; operator, do not include slash characters as delimiters (e.g. use \&quot;foo\&quot; instead of \&quot;/foo/\&quot;.) Also note the case-sensitivity of the regular expression corresponds to the \&quot;caseExact\&quot; characteristic of the target attribute. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <returns>ApiResponse of FederationResourceList</returns>
        ApiResponse<FederationResourceList> GetFederationsWithHttpInfo(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string));
        /// <summary>
        /// Patch a federation.
        /// </summary>
        /// <remarks>
        /// Modify a specific federation resource (i.e. add, replace, or remove attributes of a federation resource.)
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <returns>FederationResource</returns>
        FederationResource ModifyFederation(string id, Patch patch = default(Patch));

        /// <summary>
        /// Patch a federation.
        /// </summary>
        /// <remarks>
        /// Modify a specific federation resource (i.e. add, replace, or remove attributes of a federation resource.)
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <returns>ApiResponse of FederationResource</returns>
        ApiResponse<FederationResource> ModifyFederationWithHttpInfo(string id, Patch patch = default(Patch));
        /// <summary>
        /// Replace a federation.
        /// </summary>
        /// <remarks>
        /// Replace a specific federation resource with another provided federation resource.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="federationResource">Federation resource.</param>
        /// <returns>FederationResource</returns>
        FederationResource ReplaceFederation(string id, FederationResource federationResource);

        /// <summary>
        /// Replace a federation.
        /// </summary>
        /// <remarks>
        /// Replace a specific federation resource with another provided federation resource.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="federationResource">Federation resource.</param>
        /// <returns>ApiResponse of FederationResource</returns>
        ApiResponse<FederationResource> ReplaceFederationWithHttpInfo(string id, FederationResource federationResource);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFederationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a federation.
        /// </summary>
        /// <remarks>
        /// Get a specific federation resource.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FederationResource</returns>
        System.Threading.Tasks.Task<FederationResource> GetFederationAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a federation.
        /// </summary>
        /// <remarks>
        /// Get a specific federation resource.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FederationResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<FederationResource>> GetFederationWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of federations.
        /// </summary>
        /// <remarks>
        /// Get a list of federation resources.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against string attributes. When using the \&quot;re\&quot; operator, do not include slash characters as delimiters (e.g. use \&quot;foo\&quot; instead of \&quot;/foo/\&quot;.) Also note the case-sensitivity of the regular expression corresponds to the \&quot;caseExact\&quot; characteristic of the target attribute. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FederationResourceList</returns>
        System.Threading.Tasks.Task<FederationResourceList> GetFederationsAsync(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of federations.
        /// </summary>
        /// <remarks>
        /// Get a list of federation resources.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against string attributes. When using the \&quot;re\&quot; operator, do not include slash characters as delimiters (e.g. use \&quot;foo\&quot; instead of \&quot;/foo/\&quot;.) Also note the case-sensitivity of the regular expression corresponds to the \&quot;caseExact\&quot; characteristic of the target attribute. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FederationResourceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FederationResourceList>> GetFederationsWithHttpInfoAsync(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch a federation.
        /// </summary>
        /// <remarks>
        /// Modify a specific federation resource (i.e. add, replace, or remove attributes of a federation resource.)
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FederationResource</returns>
        System.Threading.Tasks.Task<FederationResource> ModifyFederationAsync(string id, Patch patch = default(Patch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch a federation.
        /// </summary>
        /// <remarks>
        /// Modify a specific federation resource (i.e. add, replace, or remove attributes of a federation resource.)
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FederationResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<FederationResource>> ModifyFederationWithHttpInfoAsync(string id, Patch patch = default(Patch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace a federation.
        /// </summary>
        /// <remarks>
        /// Replace a specific federation resource with another provided federation resource.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="federationResource">Federation resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FederationResource</returns>
        System.Threading.Tasks.Task<FederationResource> ReplaceFederationAsync(string id, FederationResource federationResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace a federation.
        /// </summary>
        /// <remarks>
        /// Replace a specific federation resource with another provided federation resource.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="federationResource">Federation resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FederationResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<FederationResource>> ReplaceFederationWithHttpInfoAsync(string id, FederationResource federationResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFederationsApi : IFederationsApiSync, IFederationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FederationsApi : IFederationsApi
    {
        private FactSet.SDK.ProcuretoPayAPISCIM.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFederationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FederationResource) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
            { (HttpStatusCode)429, typeof(InlineResponse429) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFederationsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FederationResourceList) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)429, typeof(InlineResponse429) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> ModifyFederationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FederationResource) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)429, typeof(InlineResponse429) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> ReplaceFederationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FederationResource) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
            { (HttpStatusCode)429, typeof(InlineResponse429) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FederationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FederationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FederationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FederationsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ProcuretoPayAPISCIM.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FederationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FederationsApi(FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ProcuretoPayAPISCIM.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FederationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FederationsApi(FactSet.SDK.ProcuretoPayAPISCIM.Client.ISynchronousClient client, FactSet.SDK.ProcuretoPayAPISCIM.Client.IAsynchronousClient asyncClient, FactSet.SDK.ProcuretoPayAPISCIM.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ProcuretoPayAPISCIM.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ProcuretoPayAPISCIM.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ProcuretoPayAPISCIM.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ProcuretoPayAPISCIM.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a federation. Get a specific federation resource.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>FederationResource</returns>
        public FederationResource GetFederation(string id)
        {
            var localVarResponse = GetFederationWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a federation. Get a specific federation resource.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>ApiResponse of FederationResource</returns>
        public ApiResponse<FederationResource> GetFederationWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling FederationsApi->GetFederation");
            }

            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFederationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FederationResource>("/Federations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFederation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a federation. Get a specific federation resource.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FederationResource</returns>
        public async System.Threading.Tasks.Task<FederationResource>GetFederationAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFederationWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a federation. Get a specific federation resource.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FederationResource)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FederationResource>> GetFederationWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling FederationsApi->GetFederation");
            }


            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFederationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FederationResource>("/Federations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFederation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of federations. Get a list of federation resources.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against string attributes. When using the \&quot;re\&quot; operator, do not include slash characters as delimiters (e.g. use \&quot;foo\&quot; instead of \&quot;/foo/\&quot;.) Also note the case-sensitivity of the regular expression corresponds to the \&quot;caseExact\&quot; characteristic of the target attribute. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <returns>FederationResourceList</returns>
        public FederationResourceList GetFederations(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string))
        {
            var localVarResponse = GetFederationsWithHttpInfo(filter, startIndex, count, attributes, excludedAttributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of federations. Get a list of federation resources.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against string attributes. When using the \&quot;re\&quot; operator, do not include slash characters as delimiters (e.g. use \&quot;foo\&quot; instead of \&quot;/foo/\&quot;.) Also note the case-sensitivity of the regular expression corresponds to the \&quot;caseExact\&quot; characteristic of the target attribute. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <returns>ApiResponse of FederationResourceList</returns>
        public ApiResponse<FederationResourceList> GetFederationsWithHttpInfo(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string))
        {
            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "startIndex", startIndex));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "attributes", attributes));
            }
            if (excludedAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "excludedAttributes", excludedAttributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFederationsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FederationResourceList>("/Federations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFederations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a list of federations. Get a list of federation resources.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against string attributes. When using the \&quot;re\&quot; operator, do not include slash characters as delimiters (e.g. use \&quot;foo\&quot; instead of \&quot;/foo/\&quot;.) Also note the case-sensitivity of the regular expression corresponds to the \&quot;caseExact\&quot; characteristic of the target attribute. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FederationResourceList</returns>
        public async System.Threading.Tasks.Task<FederationResourceList>GetFederationsAsync(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFederationsWithHttpInfoAsync(filter, startIndex, count, attributes, excludedAttributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of federations. Get a list of federation resources.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against string attributes. When using the \&quot;re\&quot; operator, do not include slash characters as delimiters (e.g. use \&quot;foo\&quot; instead of \&quot;/foo/\&quot;.) Also note the case-sensitivity of the regular expression corresponds to the \&quot;caseExact\&quot; characteristic of the target attribute. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FederationResourceList)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FederationResourceList>> GetFederationsWithHttpInfoAsync(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "startIndex", startIndex));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "attributes", attributes));
            }
            if (excludedAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "excludedAttributes", excludedAttributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFederationsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FederationResourceList>("/Federations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFederations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch a federation. Modify a specific federation resource (i.e. add, replace, or remove attributes of a federation resource.)
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <returns>FederationResource</returns>
        public FederationResource ModifyFederation(string id, Patch patch = default(Patch))
        {
            var localVarResponse = ModifyFederationWithHttpInfo(id, patch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a federation. Modify a specific federation resource (i.e. add, replace, or remove attributes of a federation resource.)
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <returns>ApiResponse of FederationResource</returns>
        public ApiResponse<FederationResource> ModifyFederationWithHttpInfo(string id, Patch patch = default(Patch))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling FederationsApi->ModifyFederation");
            }

            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patch;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = ModifyFederationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<
            FederationResource>("/Federations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyFederation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Patch a federation. Modify a specific federation resource (i.e. add, replace, or remove attributes of a federation resource.)
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FederationResource</returns>
        public async System.Threading.Tasks.Task<FederationResource>ModifyFederationAsync(string id, Patch patch = default(Patch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await ModifyFederationWithHttpInfoAsync(id, patch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a federation. Modify a specific federation resource (i.e. add, replace, or remove attributes of a federation resource.)
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FederationResource)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FederationResource>> ModifyFederationWithHttpInfoAsync(string id, Patch patch = default(Patch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling FederationsApi->ModifyFederation");
            }


            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patch;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = ModifyFederationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<FederationResource>("/Federations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyFederation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a federation. Replace a specific federation resource with another provided federation resource.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="federationResource">Federation resource.</param>
        /// <returns>FederationResource</returns>
        public FederationResource ReplaceFederation(string id, FederationResource federationResource)
        {
            var localVarResponse = ReplaceFederationWithHttpInfo(id, federationResource);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a federation. Replace a specific federation resource with another provided federation resource.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="federationResource">Federation resource.</param>
        /// <returns>ApiResponse of FederationResource</returns>
        public ApiResponse<FederationResource> ReplaceFederationWithHttpInfo(string id, FederationResource federationResource)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling FederationsApi->ReplaceFederation");
            }

            // verify the required parameter 'federationResource' is set
            if (federationResource == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'federationResource' when calling FederationsApi->ReplaceFederation");
            }

            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = federationResource;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = ReplaceFederationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            FederationResource>("/Federations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceFederation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Replace a federation. Replace a specific federation resource with another provided federation resource.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="federationResource">Federation resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FederationResource</returns>
        public async System.Threading.Tasks.Task<FederationResource>ReplaceFederationAsync(string id, FederationResource federationResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await ReplaceFederationWithHttpInfoAsync(id, federationResource, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a federation. Replace a specific federation resource with another provided federation resource.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="federationResource">Federation resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FederationResource)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FederationResource>> ReplaceFederationWithHttpInfoAsync(string id, FederationResource federationResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling FederationsApi->ReplaceFederation");
            }

            // verify the required parameter 'federationResource' is set
            if (federationResource == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'federationResource' when calling FederationsApi->ReplaceFederation");
            }


            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = federationResource;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = ReplaceFederationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<FederationResource>("/Federations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceFederation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
