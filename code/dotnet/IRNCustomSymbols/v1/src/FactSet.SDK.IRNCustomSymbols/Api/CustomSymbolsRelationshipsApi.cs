/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IRNCustomSymbols.Client;
using FactSet.SDK.IRNCustomSymbols.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IRNCustomSymbols.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomSymbolsRelationshipsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a symbol relationship
        /// </summary>
        /// <remarks>
        /// Create a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipSaveDto">symbolRelationship object to save (optional)</param>
        /// <returns>void</returns>
        void CreateSymbolRelationship(List<SymbolRelationshipSaveDto> symbolRelationshipSaveDto = default(List<SymbolRelationshipSaveDto>));

        /// <summary>
        /// Create a symbol relationship
        /// </summary>
        /// <remarks>
        /// Create a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipSaveDto">symbolRelationship object to save (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateSymbolRelationshipWithHttpInfo(List<SymbolRelationshipSaveDto> symbolRelationshipSaveDto = default(List<SymbolRelationshipSaveDto>));
        /// <summary>
        /// Delete a symbol relationship
        /// </summary>
        /// <remarks>
        /// Delete a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to delete associated record</param>
        /// <returns>void</returns>
        void DeleteSymbolRelationship(Guid symbolRelationshipId);

        /// <summary>
        /// Delete a symbol relationship
        /// </summary>
        /// <remarks>
        /// Delete a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSymbolRelationshipWithHttpInfo(Guid symbolRelationshipId);
        /// <summary>
        /// Edit a symbol relationship
        /// </summary>
        /// <remarks>
        /// Edit a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="symbolRelationshipUpdateDto">symbolRelationship object to save (optional)</param>
        /// <returns>void</returns>
        void EditAndAddSymbolRelationship(string symbol, List<SymbolRelationshipUpdateDto> symbolRelationshipUpdateDto = default(List<SymbolRelationshipUpdateDto>));

        /// <summary>
        /// Edit a symbol relationship
        /// </summary>
        /// <remarks>
        /// Edit a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="symbolRelationshipUpdateDto">symbolRelationship object to save (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditAndAddSymbolRelationshipWithHttpInfo(string symbol, List<SymbolRelationshipUpdateDto> symbolRelationshipUpdateDto = default(List<SymbolRelationshipUpdateDto>));
        /// <summary>
        /// Get details on a specific symbol relationship
        /// </summary>
        /// <remarks>
        /// Get details on a specific symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to get associated record</param>
        /// <returns>SymbolRelationshipDto</returns>
        SymbolRelationshipDto GetSymbolRelationship(Guid symbolRelationshipId);

        /// <summary>
        /// Get details on a specific symbol relationship
        /// </summary>
        /// <remarks>
        /// Get details on a specific symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to get associated record</param>
        /// <returns>ApiResponse of SymbolRelationshipDto</returns>
        ApiResponse<SymbolRelationshipDto> GetSymbolRelationshipWithHttpInfo(Guid symbolRelationshipId);
        /// <summary>
        /// Returns a list of a symbol’s relationships
        /// </summary>
        /// <remarks>
        /// Returns a list of a symbol’s relationships
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">symbolId to get associated records</param>
        /// <returns>List<SymbolRelationshipDto></returns>
        List<SymbolRelationshipDto> GetSymbolRelationships(Guid symbolId);

        /// <summary>
        /// Returns a list of a symbol’s relationships
        /// </summary>
        /// <remarks>
        /// Returns a list of a symbol’s relationships
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">symbolId to get associated records</param>
        /// <returns>ApiResponse of List<SymbolRelationshipDto></returns>
        ApiResponse<List<SymbolRelationshipDto>> GetSymbolRelationshipsWithHttpInfo(Guid symbolId);
        /// <summary>
        /// Get list of all symbol relationships in your group
        /// </summary>
        /// <remarks>
        /// Get list of all symbol relationships in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipType">Filter results on relationship type (optional)</param>
        /// <param name="relationshipCode">Filter results on relationship code (optional)</param>
        /// <returns>List<SymbolRelationshipDto></returns>
        List<SymbolRelationshipDto> GetSymbolsRelationships(SymbolsRelationshipType? relationshipType = default(SymbolsRelationshipType?), string relationshipCode = default(string));

        /// <summary>
        /// Get list of all symbol relationships in your group
        /// </summary>
        /// <remarks>
        /// Get list of all symbol relationships in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipType">Filter results on relationship type (optional)</param>
        /// <param name="relationshipCode">Filter results on relationship code (optional)</param>
        /// <returns>ApiResponse of List<SymbolRelationshipDto></returns>
        ApiResponse<List<SymbolRelationshipDto>> GetSymbolsRelationshipsWithHttpInfo(SymbolsRelationshipType? relationshipType = default(SymbolsRelationshipType?), string relationshipCode = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomSymbolsRelationshipsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a symbol relationship
        /// </summary>
        /// <remarks>
        /// Create a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipSaveDto">symbolRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateSymbolRelationshipAsync(List<SymbolRelationshipSaveDto> symbolRelationshipSaveDto = default(List<SymbolRelationshipSaveDto>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a symbol relationship
        /// </summary>
        /// <remarks>
        /// Create a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipSaveDto">symbolRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateSymbolRelationshipWithHttpInfoAsync(List<SymbolRelationshipSaveDto> symbolRelationshipSaveDto = default(List<SymbolRelationshipSaveDto>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a symbol relationship
        /// </summary>
        /// <remarks>
        /// Delete a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSymbolRelationshipAsync(Guid symbolRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a symbol relationship
        /// </summary>
        /// <remarks>
        /// Delete a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSymbolRelationshipWithHttpInfoAsync(Guid symbolRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit a symbol relationship
        /// </summary>
        /// <remarks>
        /// Edit a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="symbolRelationshipUpdateDto">symbolRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditAndAddSymbolRelationshipAsync(string symbol, List<SymbolRelationshipUpdateDto> symbolRelationshipUpdateDto = default(List<SymbolRelationshipUpdateDto>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit a symbol relationship
        /// </summary>
        /// <remarks>
        /// Edit a symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="symbolRelationshipUpdateDto">symbolRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditAndAddSymbolRelationshipWithHttpInfoAsync(string symbol, List<SymbolRelationshipUpdateDto> symbolRelationshipUpdateDto = default(List<SymbolRelationshipUpdateDto>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details on a specific symbol relationship
        /// </summary>
        /// <remarks>
        /// Get details on a specific symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SymbolRelationshipDto</returns>
        System.Threading.Tasks.Task<SymbolRelationshipDto> GetSymbolRelationshipAsync(Guid symbolRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details on a specific symbol relationship
        /// </summary>
        /// <remarks>
        /// Get details on a specific symbol relationship
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SymbolRelationshipDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SymbolRelationshipDto>> GetSymbolRelationshipWithHttpInfoAsync(Guid symbolRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of a symbol’s relationships
        /// </summary>
        /// <remarks>
        /// Returns a list of a symbol’s relationships
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">symbolId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SymbolRelationshipDto&gt;</returns>
        System.Threading.Tasks.Task<List<SymbolRelationshipDto>> GetSymbolRelationshipsAsync(Guid symbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of a symbol’s relationships
        /// </summary>
        /// <remarks>
        /// Returns a list of a symbol’s relationships
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">symbolId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<SymbolRelationshipDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SymbolRelationshipDto>>> GetSymbolRelationshipsWithHttpInfoAsync(Guid symbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of all symbol relationships in your group
        /// </summary>
        /// <remarks>
        /// Get list of all symbol relationships in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipType">Filter results on relationship type (optional)</param>
        /// <param name="relationshipCode">Filter results on relationship code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SymbolRelationshipDto&gt;</returns>
        System.Threading.Tasks.Task<List<SymbolRelationshipDto>> GetSymbolsRelationshipsAsync(SymbolsRelationshipType? relationshipType = default(SymbolsRelationshipType?), string relationshipCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of all symbol relationships in your group
        /// </summary>
        /// <remarks>
        /// Get list of all symbol relationships in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipType">Filter results on relationship type (optional)</param>
        /// <param name="relationshipCode">Filter results on relationship code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<SymbolRelationshipDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SymbolRelationshipDto>>> GetSymbolsRelationshipsWithHttpInfoAsync(SymbolsRelationshipType? relationshipType = default(SymbolsRelationshipType?), string relationshipCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomSymbolsRelationshipsApi : ICustomSymbolsRelationshipsApiSync, ICustomSymbolsRelationshipsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomSymbolsRelationshipsApi : ICustomSymbolsRelationshipsApi
    {
        private FactSet.SDK.IRNCustomSymbols.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateSymbolRelationshipResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteSymbolRelationshipResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> EditAndAddSymbolRelationshipResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSymbolRelationshipResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SymbolRelationshipDto) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSymbolRelationshipsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<SymbolRelationshipDto>) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSymbolsRelationshipsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<SymbolRelationshipDto>) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSymbolsRelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomSymbolsRelationshipsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSymbolsRelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomSymbolsRelationshipsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IRNCustomSymbols.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNCustomSymbols.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IRNCustomSymbols.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IRNCustomSymbols.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNCustomSymbols.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IRNCustomSymbols.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSymbolsRelationshipsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomSymbolsRelationshipsApi(FactSet.SDK.IRNCustomSymbols.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IRNCustomSymbols.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNCustomSymbols.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IRNCustomSymbols.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNCustomSymbols.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IRNCustomSymbols.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSymbolsRelationshipsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomSymbolsRelationshipsApi(FactSet.SDK.IRNCustomSymbols.Client.ISynchronousClient client, FactSet.SDK.IRNCustomSymbols.Client.IAsynchronousClient asyncClient, FactSet.SDK.IRNCustomSymbols.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IRNCustomSymbols.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IRNCustomSymbols.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IRNCustomSymbols.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IRNCustomSymbols.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IRNCustomSymbols.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a symbol relationship Create a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipSaveDto">symbolRelationship object to save (optional)</param>
        /// <returns>void</returns>
        public void CreateSymbolRelationship(List<SymbolRelationshipSaveDto> symbolRelationshipSaveDto = default(List<SymbolRelationshipSaveDto>))
        {
            CreateSymbolRelationshipWithHttpInfo(symbolRelationshipSaveDto);
        }

        /// <summary>
        /// Create a symbol relationship Create a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipSaveDto">symbolRelationship object to save (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateSymbolRelationshipWithHttpInfo(List<SymbolRelationshipSaveDto> symbolRelationshipSaveDto = default(List<SymbolRelationshipSaveDto>))
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = symbolRelationshipSaveDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateSymbolRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/symbol-relationships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSymbolRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a symbol relationship Create a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipSaveDto">symbolRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateSymbolRelationshipAsync(List<SymbolRelationshipSaveDto> symbolRelationshipSaveDto = default(List<SymbolRelationshipSaveDto>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateSymbolRelationshipWithHttpInfoAsync(symbolRelationshipSaveDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a symbol relationship Create a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipSaveDto">symbolRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateSymbolRelationshipWithHttpInfoAsync(List<SymbolRelationshipSaveDto> symbolRelationshipSaveDto = default(List<SymbolRelationshipSaveDto>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = symbolRelationshipSaveDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateSymbolRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/symbol-relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSymbolRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a symbol relationship Delete a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to delete associated record</param>
        /// <returns>void</returns>
        public void DeleteSymbolRelationship(Guid symbolRelationshipId)
        {
            DeleteSymbolRelationshipWithHttpInfo(symbolRelationshipId);
        }

        /// <summary>
        /// Delete a symbol relationship Delete a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSymbolRelationshipWithHttpInfo(Guid symbolRelationshipId)
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("symbolRelationshipId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(symbolRelationshipId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteSymbolRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/symbol-relationships/{symbolRelationshipId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSymbolRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a symbol relationship Delete a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSymbolRelationshipAsync(Guid symbolRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSymbolRelationshipWithHttpInfoAsync(symbolRelationshipId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a symbol relationship Delete a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSymbolRelationshipWithHttpInfoAsync(Guid symbolRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("symbolRelationshipId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(symbolRelationshipId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteSymbolRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/symbol-relationships/{symbolRelationshipId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSymbolRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a symbol relationship Edit a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="symbolRelationshipUpdateDto">symbolRelationship object to save (optional)</param>
        /// <returns>void</returns>
        public void EditAndAddSymbolRelationship(string symbol, List<SymbolRelationshipUpdateDto> symbolRelationshipUpdateDto = default(List<SymbolRelationshipUpdateDto>))
        {
            EditAndAddSymbolRelationshipWithHttpInfo(symbol, symbolRelationshipUpdateDto);
        }

        /// <summary>
        /// Edit a symbol relationship Edit a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="symbolRelationshipUpdateDto">symbolRelationship object to save (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditAndAddSymbolRelationshipWithHttpInfo(string symbol, List<SymbolRelationshipUpdateDto> symbolRelationshipUpdateDto = default(List<SymbolRelationshipUpdateDto>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.IRNCustomSymbols.Client.ApiException(400, "Missing required parameter 'symbol' when calling CustomSymbolsRelationshipsApi->EditAndAddSymbolRelationship");
            }

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.Data = symbolRelationshipUpdateDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = EditAndAddSymbolRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            Object>("/symbol-relationships/{symbol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditAndAddSymbolRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Edit a symbol relationship Edit a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="symbolRelationshipUpdateDto">symbolRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditAndAddSymbolRelationshipAsync(string symbol, List<SymbolRelationshipUpdateDto> symbolRelationshipUpdateDto = default(List<SymbolRelationshipUpdateDto>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EditAndAddSymbolRelationshipWithHttpInfoAsync(symbol, symbolRelationshipUpdateDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Edit a symbol relationship Edit a symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="symbolRelationshipUpdateDto">symbolRelationship object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditAndAddSymbolRelationshipWithHttpInfoAsync(string symbol, List<SymbolRelationshipUpdateDto> symbolRelationshipUpdateDto = default(List<SymbolRelationshipUpdateDto>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.IRNCustomSymbols.Client.ApiException(400, "Missing required parameter 'symbol' when calling CustomSymbolsRelationshipsApi->EditAndAddSymbolRelationship");
            }


            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.Data = symbolRelationshipUpdateDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = EditAndAddSymbolRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/symbol-relationships/{symbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditAndAddSymbolRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details on a specific symbol relationship Get details on a specific symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to get associated record</param>
        /// <returns>SymbolRelationshipDto</returns>
        public SymbolRelationshipDto GetSymbolRelationship(Guid symbolRelationshipId)
        {
            var localVarResponse = GetSymbolRelationshipWithHttpInfo(symbolRelationshipId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details on a specific symbol relationship Get details on a specific symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to get associated record</param>
        /// <returns>ApiResponse of SymbolRelationshipDto</returns>
        public ApiResponse<SymbolRelationshipDto> GetSymbolRelationshipWithHttpInfo(Guid symbolRelationshipId)
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("symbolRelationshipId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(symbolRelationshipId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSymbolRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SymbolRelationshipDto>("/symbol-relationships/{symbolRelationshipId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSymbolRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get details on a specific symbol relationship Get details on a specific symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SymbolRelationshipDto</returns>
        public async System.Threading.Tasks.Task<SymbolRelationshipDto>GetSymbolRelationshipAsync(Guid symbolRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSymbolRelationshipWithHttpInfoAsync(symbolRelationshipId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details on a specific symbol relationship Get details on a specific symbol relationship
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolRelationshipId">symbolRelationshipId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SymbolRelationshipDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SymbolRelationshipDto>> GetSymbolRelationshipWithHttpInfoAsync(Guid symbolRelationshipId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("symbolRelationshipId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(symbolRelationshipId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSymbolRelationshipResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SymbolRelationshipDto>("/symbol-relationships/{symbolRelationshipId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSymbolRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of a symbol’s relationships Returns a list of a symbol’s relationships
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">symbolId to get associated records</param>
        /// <returns>List<SymbolRelationshipDto></returns>
        public List<SymbolRelationshipDto> GetSymbolRelationships(Guid symbolId)
        {
            var localVarResponse = GetSymbolRelationshipsWithHttpInfo(symbolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of a symbol’s relationships Returns a list of a symbol’s relationships
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">symbolId to get associated records</param>
        /// <returns>ApiResponse of List&lt;SymbolRelationshipDto&gt;</returns>
        public ApiResponse<List<SymbolRelationshipDto>> GetSymbolRelationshipsWithHttpInfo(Guid symbolId)
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("symbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(symbolId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSymbolRelationshipsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<SymbolRelationshipDto>>("/symbol-relationships/{symbolId}/relationships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSymbolRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of a symbol’s relationships Returns a list of a symbol’s relationships
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">symbolId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SymbolRelationshipDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<SymbolRelationshipDto>>GetSymbolRelationshipsAsync(Guid symbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSymbolRelationshipsWithHttpInfoAsync(symbolId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of a symbol’s relationships Returns a list of a symbol’s relationships
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">symbolId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SymbolRelationshipDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<SymbolRelationshipDto>>> GetSymbolRelationshipsWithHttpInfoAsync(Guid symbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("symbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(symbolId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSymbolRelationshipsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SymbolRelationshipDto>>("/symbol-relationships/{symbolId}/relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSymbolRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of all symbol relationships in your group Get list of all symbol relationships in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipType">Filter results on relationship type (optional)</param>
        /// <param name="relationshipCode">Filter results on relationship code (optional)</param>
        /// <returns>List<SymbolRelationshipDto></returns>
        public List<SymbolRelationshipDto> GetSymbolsRelationships(SymbolsRelationshipType? relationshipType = default(SymbolsRelationshipType?), string relationshipCode = default(string))
        {
            var localVarResponse = GetSymbolsRelationshipsWithHttpInfo(relationshipType, relationshipCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all symbol relationships in your group Get list of all symbol relationships in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipType">Filter results on relationship type (optional)</param>
        /// <param name="relationshipCode">Filter results on relationship code (optional)</param>
        /// <returns>ApiResponse of List&lt;SymbolRelationshipDto&gt;</returns>
        public ApiResponse<List<SymbolRelationshipDto>> GetSymbolsRelationshipsWithHttpInfo(SymbolsRelationshipType? relationshipType = default(SymbolsRelationshipType?), string relationshipCode = default(string))
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (relationshipType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "relationshipType", relationshipType));
            }
            if (relationshipCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "relationshipCode", relationshipCode));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSymbolsRelationshipsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<SymbolRelationshipDto>>("/symbol-relationships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSymbolsRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get list of all symbol relationships in your group Get list of all symbol relationships in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipType">Filter results on relationship type (optional)</param>
        /// <param name="relationshipCode">Filter results on relationship code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SymbolRelationshipDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<SymbolRelationshipDto>>GetSymbolsRelationshipsAsync(SymbolsRelationshipType? relationshipType = default(SymbolsRelationshipType?), string relationshipCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSymbolsRelationshipsWithHttpInfoAsync(relationshipType, relationshipCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all symbol relationships in your group Get list of all symbol relationships in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipType">Filter results on relationship type (optional)</param>
        /// <param name="relationshipCode">Filter results on relationship code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SymbolRelationshipDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<SymbolRelationshipDto>>> GetSymbolsRelationshipsWithHttpInfoAsync(SymbolsRelationshipType? relationshipType = default(SymbolsRelationshipType?), string relationshipCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (relationshipType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "relationshipType", relationshipType));
            }
            if (relationshipCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "relationshipCode", relationshipCode));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSymbolsRelationshipsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SymbolRelationshipDto>>("/symbol-relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSymbolsRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
