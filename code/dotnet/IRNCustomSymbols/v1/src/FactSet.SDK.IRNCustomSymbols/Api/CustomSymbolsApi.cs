/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IRNCustomSymbols.Client;
using FactSet.SDK.IRNCustomSymbols.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IRNCustomSymbols.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomSymbolsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a custom symbol
        /// </summary>
        /// <remarks>
        /// Create a custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomSymbolDto">createCustomSymbolDto object to save (optional)</param>
        /// <returns>NewItemDto</returns>
        NewItemDto CreateCustomSymbol(CreateCustomSymbolDto createCustomSymbolDto = default(CreateCustomSymbolDto));

        /// <summary>
        /// Create a custom symbol
        /// </summary>
        /// <remarks>
        /// Create a custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomSymbolDto">createCustomSymbolDto object to save (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        ApiResponse<NewItemDto> CreateCustomSymbolWithHttpInfo(CreateCustomSymbolDto createCustomSymbolDto = default(CreateCustomSymbolDto));
        /// <summary>
        /// Delete a custom symbol
        /// </summary>
        /// <remarks>
        /// Delete a custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to delete associated custom symbol</param>
        /// <returns>void</returns>
        void DeleteCustomSymbol(Guid customSymbolId);

        /// <summary>
        /// Delete a custom symbol
        /// </summary>
        /// <remarks>
        /// Delete a custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to delete associated custom symbol</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomSymbolWithHttpInfo(Guid customSymbolId);
        /// <summary>
        /// Get all custom field and standard field details on a specific custom symbol
        /// </summary>
        /// <remarks>
        /// Get all custom field and standard field details on a specific custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to get associated custom symbol</param>
        /// <returns>CustomSymbolDto</returns>
        CustomSymbolDto GetCustomSymbol(Guid customSymbolId);

        /// <summary>
        /// Get all custom field and standard field details on a specific custom symbol
        /// </summary>
        /// <remarks>
        /// Get all custom field and standard field details on a specific custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to get associated custom symbol</param>
        /// <returns>ApiResponse of CustomSymbolDto</returns>
        ApiResponse<CustomSymbolDto> GetCustomSymbolWithHttpInfo(Guid customSymbolId);
        /// <summary>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </summary>
        /// <remarks>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">CustomSymbolId to get associated records</param>
        /// <returns>List<RecordPreviewDto></returns>
        List<RecordPreviewDto> GetCustomSymbolRecords(Guid customSymbolId);

        /// <summary>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </summary>
        /// <remarks>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">CustomSymbolId to get associated records</param>
        /// <returns>ApiResponse of List<RecordPreviewDto></returns>
        ApiResponse<List<RecordPreviewDto>> GetCustomSymbolRecordsWithHttpInfo(Guid customSymbolId);
        /// <summary>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </summary>
        /// <remarks>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeName">filter custom symbols based on custom symbol type (optional)</param>
        /// <param name="query">filter custom symbols based on custom symbol code, name or linked factset entity&#39;s properties (optional)</param>
        /// <param name="includeCustomFieldValues">Whether or not to include customFieldValues (optional, default to false)</param>
        /// <param name="excludeLinkedCustomSymbol">Whether or not to exclude linked custom symbol (optional, default to false)</param>
        /// <param name="modifiedSince">Only return Custom Symbols which have been modified or created since a particular time (optional)</param>
        /// <param name="jobId">Filter custom symbols based on custom symbol sync job (optional)</param>
        /// <param name="batchJobId">Filter custom symbols based on rbl custom symbol job (optional)</param>
        /// <param name="includeDeleted">Whether or not to include deleted custom symbols (optional, default to false)</param>
        /// <returns>List<CustomSymbolDto></returns>
        List<CustomSymbolDto> GetCustomSymbols(string typeName = default(string), string query = default(string), bool? includeCustomFieldValues = default(bool?), bool? excludeLinkedCustomSymbol = default(bool?), string modifiedSince = default(string), Guid? jobId = default(Guid?), Guid? batchJobId = default(Guid?), bool? includeDeleted = default(bool?));

        /// <summary>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </summary>
        /// <remarks>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeName">filter custom symbols based on custom symbol type (optional)</param>
        /// <param name="query">filter custom symbols based on custom symbol code, name or linked factset entity&#39;s properties (optional)</param>
        /// <param name="includeCustomFieldValues">Whether or not to include customFieldValues (optional, default to false)</param>
        /// <param name="excludeLinkedCustomSymbol">Whether or not to exclude linked custom symbol (optional, default to false)</param>
        /// <param name="modifiedSince">Only return Custom Symbols which have been modified or created since a particular time (optional)</param>
        /// <param name="jobId">Filter custom symbols based on custom symbol sync job (optional)</param>
        /// <param name="batchJobId">Filter custom symbols based on rbl custom symbol job (optional)</param>
        /// <param name="includeDeleted">Whether or not to include deleted custom symbols (optional, default to false)</param>
        /// <returns>ApiResponse of List<CustomSymbolDto></returns>
        ApiResponse<List<CustomSymbolDto>> GetCustomSymbolsWithHttpInfo(string typeName = default(string), string query = default(string), bool? includeCustomFieldValues = default(bool?), bool? excludeLinkedCustomSymbol = default(bool?), string modifiedSince = default(string), Guid? jobId = default(Guid?), Guid? batchJobId = default(Guid?), bool? includeDeleted = default(bool?));
        /// <summary>
        /// Link custom symbol to standard symbol
        /// </summary>
        /// <remarks>
        /// Link custom symbol to standard symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId associated with custom symbol</param>
        /// <param name="standardSymbolDto">standard symbol name (optional)</param>
        /// <returns>void</returns>
        void LinkCustomSymbolToStandardSymbol(Guid customSymbolId, StandardSymbolDto standardSymbolDto = default(StandardSymbolDto));

        /// <summary>
        /// Link custom symbol to standard symbol
        /// </summary>
        /// <remarks>
        /// Link custom symbol to standard symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId associated with custom symbol</param>
        /// <param name="standardSymbolDto">standard symbol name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LinkCustomSymbolToStandardSymbolWithHttpInfo(Guid customSymbolId, StandardSymbolDto standardSymbolDto = default(StandardSymbolDto));
        /// <summary>
        /// Edit a custom symbol’s standard field and custom field data
        /// </summary>
        /// <remarks>
        /// Edit a custom symbol’s standard field and custom field data
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to update associated custom symbol</param>
        /// <param name="operation">updateCustomSymbolDto object to update (optional)</param>
        /// <returns>void</returns>
        void PatchCustomSymbol(Guid customSymbolId, List<Operation> operation = default(List<Operation>));

        /// <summary>
        /// Edit a custom symbol’s standard field and custom field data
        /// </summary>
        /// <remarks>
        /// Edit a custom symbol’s standard field and custom field data
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to update associated custom symbol</param>
        /// <param name="operation">updateCustomSymbolDto object to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchCustomSymbolWithHttpInfo(Guid customSymbolId, List<Operation> operation = default(List<Operation>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomSymbolsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a custom symbol
        /// </summary>
        /// <remarks>
        /// Create a custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomSymbolDto">createCustomSymbolDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        System.Threading.Tasks.Task<NewItemDto> CreateCustomSymbolAsync(CreateCustomSymbolDto createCustomSymbolDto = default(CreateCustomSymbolDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a custom symbol
        /// </summary>
        /// <remarks>
        /// Create a custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomSymbolDto">createCustomSymbolDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateCustomSymbolWithHttpInfoAsync(CreateCustomSymbolDto createCustomSymbolDto = default(CreateCustomSymbolDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a custom symbol
        /// </summary>
        /// <remarks>
        /// Delete a custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to delete associated custom symbol</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomSymbolAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a custom symbol
        /// </summary>
        /// <remarks>
        /// Delete a custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to delete associated custom symbol</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomSymbolWithHttpInfoAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all custom field and standard field details on a specific custom symbol
        /// </summary>
        /// <remarks>
        /// Get all custom field and standard field details on a specific custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to get associated custom symbol</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomSymbolDto</returns>
        System.Threading.Tasks.Task<CustomSymbolDto> GetCustomSymbolAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all custom field and standard field details on a specific custom symbol
        /// </summary>
        /// <remarks>
        /// Get all custom field and standard field details on a specific custom symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to get associated custom symbol</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomSymbolDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomSymbolDto>> GetCustomSymbolWithHttpInfoAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </summary>
        /// <remarks>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">CustomSymbolId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecordPreviewDto&gt;</returns>
        System.Threading.Tasks.Task<List<RecordPreviewDto>> GetCustomSymbolRecordsAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </summary>
        /// <remarks>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">CustomSymbolId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<RecordPreviewDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecordPreviewDto>>> GetCustomSymbolRecordsWithHttpInfoAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </summary>
        /// <remarks>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeName">filter custom symbols based on custom symbol type (optional)</param>
        /// <param name="query">filter custom symbols based on custom symbol code, name or linked factset entity&#39;s properties (optional)</param>
        /// <param name="includeCustomFieldValues">Whether or not to include customFieldValues (optional, default to false)</param>
        /// <param name="excludeLinkedCustomSymbol">Whether or not to exclude linked custom symbol (optional, default to false)</param>
        /// <param name="modifiedSince">Only return Custom Symbols which have been modified or created since a particular time (optional)</param>
        /// <param name="jobId">Filter custom symbols based on custom symbol sync job (optional)</param>
        /// <param name="batchJobId">Filter custom symbols based on rbl custom symbol job (optional)</param>
        /// <param name="includeDeleted">Whether or not to include deleted custom symbols (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomSymbolDto&gt;</returns>
        System.Threading.Tasks.Task<List<CustomSymbolDto>> GetCustomSymbolsAsync(string typeName = default(string), string query = default(string), bool? includeCustomFieldValues = default(bool?), bool? excludeLinkedCustomSymbol = default(bool?), string modifiedSince = default(string), Guid? jobId = default(Guid?), Guid? batchJobId = default(Guid?), bool? includeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </summary>
        /// <remarks>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeName">filter custom symbols based on custom symbol type (optional)</param>
        /// <param name="query">filter custom symbols based on custom symbol code, name or linked factset entity&#39;s properties (optional)</param>
        /// <param name="includeCustomFieldValues">Whether or not to include customFieldValues (optional, default to false)</param>
        /// <param name="excludeLinkedCustomSymbol">Whether or not to exclude linked custom symbol (optional, default to false)</param>
        /// <param name="modifiedSince">Only return Custom Symbols which have been modified or created since a particular time (optional)</param>
        /// <param name="jobId">Filter custom symbols based on custom symbol sync job (optional)</param>
        /// <param name="batchJobId">Filter custom symbols based on rbl custom symbol job (optional)</param>
        /// <param name="includeDeleted">Whether or not to include deleted custom symbols (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<CustomSymbolDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomSymbolDto>>> GetCustomSymbolsWithHttpInfoAsync(string typeName = default(string), string query = default(string), bool? includeCustomFieldValues = default(bool?), bool? excludeLinkedCustomSymbol = default(bool?), string modifiedSince = default(string), Guid? jobId = default(Guid?), Guid? batchJobId = default(Guid?), bool? includeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Link custom symbol to standard symbol
        /// </summary>
        /// <remarks>
        /// Link custom symbol to standard symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId associated with custom symbol</param>
        /// <param name="standardSymbolDto">standard symbol name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LinkCustomSymbolToStandardSymbolAsync(Guid customSymbolId, StandardSymbolDto standardSymbolDto = default(StandardSymbolDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Link custom symbol to standard symbol
        /// </summary>
        /// <remarks>
        /// Link custom symbol to standard symbol
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId associated with custom symbol</param>
        /// <param name="standardSymbolDto">standard symbol name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LinkCustomSymbolToStandardSymbolWithHttpInfoAsync(Guid customSymbolId, StandardSymbolDto standardSymbolDto = default(StandardSymbolDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit a custom symbol’s standard field and custom field data
        /// </summary>
        /// <remarks>
        /// Edit a custom symbol’s standard field and custom field data
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to update associated custom symbol</param>
        /// <param name="operation">updateCustomSymbolDto object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchCustomSymbolAsync(Guid customSymbolId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit a custom symbol’s standard field and custom field data
        /// </summary>
        /// <remarks>
        /// Edit a custom symbol’s standard field and custom field data
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to update associated custom symbol</param>
        /// <param name="operation">updateCustomSymbolDto object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchCustomSymbolWithHttpInfoAsync(Guid customSymbolId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomSymbolsApi : ICustomSymbolsApiSync, ICustomSymbolsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomSymbolsApi : ICustomSymbolsApi
    {
        private FactSet.SDK.IRNCustomSymbols.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateCustomSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(NewItemDto) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteCustomSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCustomSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CustomSymbolDto) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCustomSymbolRecordsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<RecordPreviewDto>) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCustomSymbolsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<CustomSymbolDto>) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
            { (HttpStatusCode)404, typeof(string) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> LinkCustomSymbolToStandardSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PatchCustomSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSymbolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomSymbolsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSymbolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomSymbolsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IRNCustomSymbols.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNCustomSymbols.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IRNCustomSymbols.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IRNCustomSymbols.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNCustomSymbols.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IRNCustomSymbols.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSymbolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomSymbolsApi(FactSet.SDK.IRNCustomSymbols.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IRNCustomSymbols.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNCustomSymbols.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IRNCustomSymbols.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNCustomSymbols.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IRNCustomSymbols.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSymbolsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomSymbolsApi(FactSet.SDK.IRNCustomSymbols.Client.ISynchronousClient client, FactSet.SDK.IRNCustomSymbols.Client.IAsynchronousClient asyncClient, FactSet.SDK.IRNCustomSymbols.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IRNCustomSymbols.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IRNCustomSymbols.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IRNCustomSymbols.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IRNCustomSymbols.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IRNCustomSymbols.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a custom symbol Create a custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomSymbolDto">createCustomSymbolDto object to save (optional)</param>
        /// <returns>NewItemDto</returns>
        public NewItemDto CreateCustomSymbol(CreateCustomSymbolDto createCustomSymbolDto = default(CreateCustomSymbolDto))
        {
            var localVarResponse = CreateCustomSymbolWithHttpInfo(createCustomSymbolDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a custom symbol Create a custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomSymbolDto">createCustomSymbolDto object to save (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        public ApiResponse<NewItemDto> CreateCustomSymbolWithHttpInfo(CreateCustomSymbolDto createCustomSymbolDto = default(CreateCustomSymbolDto))
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomSymbolDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateCustomSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            NewItemDto>("/custom-symbols", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a custom symbol Create a custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomSymbolDto">createCustomSymbolDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        public async System.Threading.Tasks.Task<NewItemDto>CreateCustomSymbolAsync(CreateCustomSymbolDto createCustomSymbolDto = default(CreateCustomSymbolDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateCustomSymbolWithHttpInfoAsync(createCustomSymbolDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a custom symbol Create a custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomSymbolDto">createCustomSymbolDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateCustomSymbolWithHttpInfoAsync(CreateCustomSymbolDto createCustomSymbolDto = default(CreateCustomSymbolDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomSymbolDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateCustomSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewItemDto>("/custom-symbols", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a custom symbol Delete a custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to delete associated custom symbol</param>
        /// <returns>void</returns>
        public void DeleteCustomSymbol(Guid customSymbolId)
        {
            DeleteCustomSymbolWithHttpInfo(customSymbolId);
        }

        /// <summary>
        /// Delete a custom symbol Delete a custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to delete associated custom symbol</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomSymbolWithHttpInfo(Guid customSymbolId)
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customSymbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(customSymbolId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteCustomSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/custom-symbols/{customSymbolId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a custom symbol Delete a custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to delete associated custom symbol</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomSymbolAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCustomSymbolWithHttpInfoAsync(customSymbolId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a custom symbol Delete a custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to delete associated custom symbol</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomSymbolWithHttpInfoAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customSymbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(customSymbolId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteCustomSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/custom-symbols/{customSymbolId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific custom symbol Get all custom field and standard field details on a specific custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to get associated custom symbol</param>
        /// <returns>CustomSymbolDto</returns>
        public CustomSymbolDto GetCustomSymbol(Guid customSymbolId)
        {
            var localVarResponse = GetCustomSymbolWithHttpInfo(customSymbolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific custom symbol Get all custom field and standard field details on a specific custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to get associated custom symbol</param>
        /// <returns>ApiResponse of CustomSymbolDto</returns>
        public ApiResponse<CustomSymbolDto> GetCustomSymbolWithHttpInfo(Guid customSymbolId)
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customSymbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(customSymbolId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCustomSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CustomSymbolDto>("/custom-symbols/{customSymbolId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific custom symbol Get all custom field and standard field details on a specific custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to get associated custom symbol</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomSymbolDto</returns>
        public async System.Threading.Tasks.Task<CustomSymbolDto>GetCustomSymbolAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCustomSymbolWithHttpInfoAsync(customSymbolId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific custom symbol Get all custom field and standard field details on a specific custom symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to get associated custom symbol</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomSymbolDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CustomSymbolDto>> GetCustomSymbolWithHttpInfoAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customSymbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(customSymbolId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCustomSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomSymbolDto>("/custom-symbols/{customSymbolId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">CustomSymbolId to get associated records</param>
        /// <returns>List<RecordPreviewDto></returns>
        public List<RecordPreviewDto> GetCustomSymbolRecords(Guid customSymbolId)
        {
            var localVarResponse = GetCustomSymbolRecordsWithHttpInfo(customSymbolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">CustomSymbolId to get associated records</param>
        /// <returns>ApiResponse of List&lt;RecordPreviewDto&gt;</returns>
        public ApiResponse<List<RecordPreviewDto>> GetCustomSymbolRecordsWithHttpInfo(Guid customSymbolId)
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customSymbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(customSymbolId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCustomSymbolRecordsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<RecordPreviewDto>>("/custom-symbols/{customSymbolId}/records", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomSymbolRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">CustomSymbolId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecordPreviewDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecordPreviewDto>>GetCustomSymbolRecordsAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCustomSymbolRecordsWithHttpInfoAsync(customSymbolId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier Get all notes and meetings where a specific customSymbol was tagged as primary or related identifier
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">CustomSymbolId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecordPreviewDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<RecordPreviewDto>>> GetCustomSymbolRecordsWithHttpInfoAsync(Guid customSymbolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customSymbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(customSymbolId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCustomSymbolRecordsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RecordPreviewDto>>("/custom-symbols/{customSymbolId}/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomSymbolRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeName">filter custom symbols based on custom symbol type (optional)</param>
        /// <param name="query">filter custom symbols based on custom symbol code, name or linked factset entity&#39;s properties (optional)</param>
        /// <param name="includeCustomFieldValues">Whether or not to include customFieldValues (optional, default to false)</param>
        /// <param name="excludeLinkedCustomSymbol">Whether or not to exclude linked custom symbol (optional, default to false)</param>
        /// <param name="modifiedSince">Only return Custom Symbols which have been modified or created since a particular time (optional)</param>
        /// <param name="jobId">Filter custom symbols based on custom symbol sync job (optional)</param>
        /// <param name="batchJobId">Filter custom symbols based on rbl custom symbol job (optional)</param>
        /// <param name="includeDeleted">Whether or not to include deleted custom symbols (optional, default to false)</param>
        /// <returns>List<CustomSymbolDto></returns>
        public List<CustomSymbolDto> GetCustomSymbols(string typeName = default(string), string query = default(string), bool? includeCustomFieldValues = default(bool?), bool? excludeLinkedCustomSymbol = default(bool?), string modifiedSince = default(string), Guid? jobId = default(Guid?), Guid? batchJobId = default(Guid?), bool? includeDeleted = default(bool?))
        {
            var localVarResponse = GetCustomSymbolsWithHttpInfo(typeName, query, includeCustomFieldValues, excludeLinkedCustomSymbol, modifiedSince, jobId, batchJobId, includeDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeName">filter custom symbols based on custom symbol type (optional)</param>
        /// <param name="query">filter custom symbols based on custom symbol code, name or linked factset entity&#39;s properties (optional)</param>
        /// <param name="includeCustomFieldValues">Whether or not to include customFieldValues (optional, default to false)</param>
        /// <param name="excludeLinkedCustomSymbol">Whether or not to exclude linked custom symbol (optional, default to false)</param>
        /// <param name="modifiedSince">Only return Custom Symbols which have been modified or created since a particular time (optional)</param>
        /// <param name="jobId">Filter custom symbols based on custom symbol sync job (optional)</param>
        /// <param name="batchJobId">Filter custom symbols based on rbl custom symbol job (optional)</param>
        /// <param name="includeDeleted">Whether or not to include deleted custom symbols (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CustomSymbolDto&gt;</returns>
        public ApiResponse<List<CustomSymbolDto>> GetCustomSymbolsWithHttpInfo(string typeName = default(string), string query = default(string), bool? includeCustomFieldValues = default(bool?), bool? excludeLinkedCustomSymbol = default(bool?), string modifiedSince = default(string), Guid? jobId = default(Guid?), Guid? batchJobId = default(Guid?), bool? includeDeleted = default(bool?))
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (typeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "typeName", typeName));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (includeCustomFieldValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "includeCustomFieldValues", includeCustomFieldValues));
            }
            if (excludeLinkedCustomSymbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "excludeLinkedCustomSymbol", excludeLinkedCustomSymbol));
            }
            if (modifiedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "modifiedSince", modifiedSince));
            }
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (batchJobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "batchJobId", batchJobId));
            }
            if (includeDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "includeDeleted", includeDeleted));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCustomSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<CustomSymbolDto>>("/custom-symbols", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeName">filter custom symbols based on custom symbol type (optional)</param>
        /// <param name="query">filter custom symbols based on custom symbol code, name or linked factset entity&#39;s properties (optional)</param>
        /// <param name="includeCustomFieldValues">Whether or not to include customFieldValues (optional, default to false)</param>
        /// <param name="excludeLinkedCustomSymbol">Whether or not to exclude linked custom symbol (optional, default to false)</param>
        /// <param name="modifiedSince">Only return Custom Symbols which have been modified or created since a particular time (optional)</param>
        /// <param name="jobId">Filter custom symbols based on custom symbol sync job (optional)</param>
        /// <param name="batchJobId">Filter custom symbols based on rbl custom symbol job (optional)</param>
        /// <param name="includeDeleted">Whether or not to include deleted custom symbols (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomSymbolDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomSymbolDto>>GetCustomSymbolsAsync(string typeName = default(string), string query = default(string), bool? includeCustomFieldValues = default(bool?), bool? excludeLinkedCustomSymbol = default(bool?), string modifiedSince = default(string), Guid? jobId = default(Guid?), Guid? batchJobId = default(Guid?), bool? includeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCustomSymbolsWithHttpInfoAsync(typeName, query, includeCustomFieldValues, excludeLinkedCustomSymbol, modifiedSince, jobId, batchJobId, includeDeleted, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all custom symbols in your group along with some of their standard field and custom fields data Get list of all custom symbols in your group along with some of their standard field and custom fields data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeName">filter custom symbols based on custom symbol type (optional)</param>
        /// <param name="query">filter custom symbols based on custom symbol code, name or linked factset entity&#39;s properties (optional)</param>
        /// <param name="includeCustomFieldValues">Whether or not to include customFieldValues (optional, default to false)</param>
        /// <param name="excludeLinkedCustomSymbol">Whether or not to exclude linked custom symbol (optional, default to false)</param>
        /// <param name="modifiedSince">Only return Custom Symbols which have been modified or created since a particular time (optional)</param>
        /// <param name="jobId">Filter custom symbols based on custom symbol sync job (optional)</param>
        /// <param name="batchJobId">Filter custom symbols based on rbl custom symbol job (optional)</param>
        /// <param name="includeDeleted">Whether or not to include deleted custom symbols (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomSymbolDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<CustomSymbolDto>>> GetCustomSymbolsWithHttpInfoAsync(string typeName = default(string), string query = default(string), bool? includeCustomFieldValues = default(bool?), bool? excludeLinkedCustomSymbol = default(bool?), string modifiedSince = default(string), Guid? jobId = default(Guid?), Guid? batchJobId = default(Guid?), bool? includeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (typeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "typeName", typeName));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (includeCustomFieldValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "includeCustomFieldValues", includeCustomFieldValues));
            }
            if (excludeLinkedCustomSymbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "excludeLinkedCustomSymbol", excludeLinkedCustomSymbol));
            }
            if (modifiedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "modifiedSince", modifiedSince));
            }
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (batchJobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "batchJobId", batchJobId));
            }
            if (includeDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToMultiMap("", "includeDeleted", includeDeleted));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCustomSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CustomSymbolDto>>("/custom-symbols", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Link custom symbol to standard symbol Link custom symbol to standard symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId associated with custom symbol</param>
        /// <param name="standardSymbolDto">standard symbol name (optional)</param>
        /// <returns>void</returns>
        public void LinkCustomSymbolToStandardSymbol(Guid customSymbolId, StandardSymbolDto standardSymbolDto = default(StandardSymbolDto))
        {
            LinkCustomSymbolToStandardSymbolWithHttpInfo(customSymbolId, standardSymbolDto);
        }

        /// <summary>
        /// Link custom symbol to standard symbol Link custom symbol to standard symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId associated with custom symbol</param>
        /// <param name="standardSymbolDto">standard symbol name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LinkCustomSymbolToStandardSymbolWithHttpInfo(Guid customSymbolId, StandardSymbolDto standardSymbolDto = default(StandardSymbolDto))
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customSymbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(customSymbolId)); // path parameter
            localVarRequestOptions.Data = standardSymbolDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = LinkCustomSymbolToStandardSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/custom-symbols/{customSymbolId}/link-standard-symbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkCustomSymbolToStandardSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Link custom symbol to standard symbol Link custom symbol to standard symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId associated with custom symbol</param>
        /// <param name="standardSymbolDto">standard symbol name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LinkCustomSymbolToStandardSymbolAsync(Guid customSymbolId, StandardSymbolDto standardSymbolDto = default(StandardSymbolDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LinkCustomSymbolToStandardSymbolWithHttpInfoAsync(customSymbolId, standardSymbolDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Link custom symbol to standard symbol Link custom symbol to standard symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId associated with custom symbol</param>
        /// <param name="standardSymbolDto">standard symbol name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> LinkCustomSymbolToStandardSymbolWithHttpInfoAsync(Guid customSymbolId, StandardSymbolDto standardSymbolDto = default(StandardSymbolDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customSymbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(customSymbolId)); // path parameter
            localVarRequestOptions.Data = standardSymbolDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = LinkCustomSymbolToStandardSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/custom-symbols/{customSymbolId}/link-standard-symbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkCustomSymbolToStandardSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a custom symbol’s standard field and custom field data Edit a custom symbol’s standard field and custom field data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to update associated custom symbol</param>
        /// <param name="operation">updateCustomSymbolDto object to update (optional)</param>
        /// <returns>void</returns>
        public void PatchCustomSymbol(Guid customSymbolId, List<Operation> operation = default(List<Operation>))
        {
            PatchCustomSymbolWithHttpInfo(customSymbolId, operation);
        }

        /// <summary>
        /// Edit a custom symbol’s standard field and custom field data Edit a custom symbol’s standard field and custom field data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to update associated custom symbol</param>
        /// <param name="operation">updateCustomSymbolDto object to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchCustomSymbolWithHttpInfo(Guid customSymbolId, List<Operation> operation = default(List<Operation>))
        {
            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customSymbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(customSymbolId)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PatchCustomSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<
            Object>("/custom-symbols/{customSymbolId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCustomSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Edit a custom symbol’s standard field and custom field data Edit a custom symbol’s standard field and custom field data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to update associated custom symbol</param>
        /// <param name="operation">updateCustomSymbolDto object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchCustomSymbolAsync(Guid customSymbolId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PatchCustomSymbolWithHttpInfoAsync(customSymbolId, operation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Edit a custom symbol’s standard field and custom field data Edit a custom symbol’s standard field and custom field data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNCustomSymbols.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customSymbolId">customSymbolId to update associated custom symbol</param>
        /// <param name="operation">updateCustomSymbolDto object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchCustomSymbolWithHttpInfoAsync(Guid customSymbolId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNCustomSymbols.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNCustomSymbols.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customSymbolId", FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.ParameterToString(customSymbolId)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNCustomSymbols.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PatchCustomSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/custom-symbols/{customSymbolId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCustomSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
