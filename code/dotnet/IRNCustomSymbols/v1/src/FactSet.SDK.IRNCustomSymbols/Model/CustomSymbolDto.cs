/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNCustomSymbols.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNCustomSymbols.Model
{
    /// <summary>
    /// CustomSymbolDto
    /// </summary>
    [DataContract(Name = "CustomSymbolDto")]
    public partial class CustomSymbolDto : IEquatable<CustomSymbolDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSymbolDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="code">code.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="type">type.</param>
        /// <param name="subType">subType.</param>
        /// <param name="address">address.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="standardSymbol">standardSymbol.</param>
        /// <param name="standardSymbolInstrumentData">standardSymbolInstrumentData.</param>
        /// <param name="isAddressAutoFilled">isAddressAutoFilled.</param>
        /// <param name="isDescriptionAutoFilled">isDescriptionAutoFilled.</param>
        /// <param name="isDeleted">isDeleted.</param>
        public CustomSymbolDto(Guid id = default(Guid), string code = default(string), string name = default(string), string description = default(string), CustomSymbolTypeSummaryDto type = default(CustomSymbolTypeSummaryDto), CustomSymbolSubTypeSummaryDto subType = default(CustomSymbolSubTypeSummaryDto), CustomSymbolAddressDto address = default(CustomSymbolAddressDto), List<CustomSymbolCustomFieldValueDto> customFields = default(List<CustomSymbolCustomFieldValueDto>), string createdDate = default(string), string createdBy = default(string), string standardSymbol = default(string), InstrumentDto standardSymbolInstrumentData = default(InstrumentDto), bool isAddressAutoFilled = default(bool), bool isDescriptionAutoFilled = default(bool), bool isDeleted = default(bool))
        {
            this.Id = id;
            this.Code = code;
            this.Name = name;
            this.Description = description;
            this.Type = type;
            this.SubType = subType;
            this.Address = address;
            this.CustomFields = customFields;
            this.CreatedDate = createdDate;
            this.CreatedBy = createdBy;
            this.StandardSymbol = standardSymbol;
            this.StandardSymbolInstrumentData = standardSymbolInstrumentData;
            this.IsAddressAutoFilled = isAddressAutoFilled;
            this.IsDescriptionAutoFilled = isDescriptionAutoFilled;
            this.IsDeleted = isDeleted;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public CustomSymbolTypeSummaryDto Type { get; set; }

        /// <summary>
        /// Gets or Sets SubType
        /// </summary>
        [DataMember(Name = "subType", EmitDefaultValue = true)]
        public CustomSymbolSubTypeSummaryDto SubType { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = true)]
        public CustomSymbolAddressDto Address { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields", EmitDefaultValue = true)]
        public List<CustomSymbolCustomFieldValueDto> CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = true)]
        public string CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets StandardSymbol
        /// </summary>
        [DataMember(Name = "standardSymbol", EmitDefaultValue = true)]
        public string StandardSymbol { get; set; }

        /// <summary>
        /// Gets or Sets StandardSymbolInstrumentData
        /// </summary>
        [DataMember(Name = "standardSymbolInstrumentData", EmitDefaultValue = true)]
        public InstrumentDto StandardSymbolInstrumentData { get; set; }

        /// <summary>
        /// Gets or Sets IsAddressAutoFilled
        /// </summary>
        [DataMember(Name = "isAddressAutoFilled", EmitDefaultValue = true)]
        public bool IsAddressAutoFilled { get; set; }

        /// <summary>
        /// Gets or Sets IsDescriptionAutoFilled
        /// </summary>
        [DataMember(Name = "isDescriptionAutoFilled", EmitDefaultValue = true)]
        public bool IsDescriptionAutoFilled { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomSymbolDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  StandardSymbol: ").Append(StandardSymbol).Append("\n");
            sb.Append("  StandardSymbolInstrumentData: ").Append(StandardSymbolInstrumentData).Append("\n");
            sb.Append("  IsAddressAutoFilled: ").Append(IsAddressAutoFilled).Append("\n");
            sb.Append("  IsDescriptionAutoFilled: ").Append(IsDescriptionAutoFilled).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomSymbolDto);
        }

        /// <summary>
        /// Returns true if CustomSymbolDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomSymbolDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomSymbolDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.StandardSymbol == input.StandardSymbol ||
                    (this.StandardSymbol != null &&
                    this.StandardSymbol.Equals(input.StandardSymbol))
                ) && 
                (
                    this.StandardSymbolInstrumentData == input.StandardSymbolInstrumentData ||
                    (this.StandardSymbolInstrumentData != null &&
                    this.StandardSymbolInstrumentData.Equals(input.StandardSymbolInstrumentData))
                ) && 
                (
                    this.IsAddressAutoFilled == input.IsAddressAutoFilled ||
                    this.IsAddressAutoFilled.Equals(input.IsAddressAutoFilled)
                ) && 
                (
                    this.IsDescriptionAutoFilled == input.IsDescriptionAutoFilled ||
                    this.IsDescriptionAutoFilled.Equals(input.IsDescriptionAutoFilled)
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.SubType != null)
                {
                    hashCode = (hashCode * 59) + this.SubType.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.StandardSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.StandardSymbol.GetHashCode();
                }
                if (this.StandardSymbolInstrumentData != null)
                {
                    hashCode = (hashCode * 59) + this.StandardSymbolInstrumentData.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAddressAutoFilled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDescriptionAutoFilled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
