/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNCustomSymbols.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNCustomSymbols.Model
{
    /// <summary>
    /// StandardSymbolDto
    /// </summary>
    [DataContract(Name = "StandardSymbolDto")]
    public partial class StandardSymbolDto : IEquatable<StandardSymbolDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardSymbolDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StandardSymbolDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardSymbolDto" /> class.
        /// </summary>
        /// <param name="standardSymbol">standardSymbol (required).</param>
        public StandardSymbolDto(string standardSymbol)
        {
            // to ensure "standardSymbol" is required (not null)
            if (standardSymbol == null) {
                throw new ArgumentNullException("standardSymbol is a required property for StandardSymbolDto and cannot be null");
            }
            this.StandardSymbol = standardSymbol;
        }

        /// <summary>
        /// Gets or Sets StandardSymbol
        /// </summary>
        [DataMember(Name = "standardSymbol", IsRequired = true, EmitDefaultValue = false)]
        public string StandardSymbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StandardSymbolDto {\n");
            sb.Append("  StandardSymbol: ").Append(StandardSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardSymbolDto);
        }

        /// <summary>
        /// Returns true if StandardSymbolDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardSymbolDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardSymbolDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StandardSymbol == input.StandardSymbol ||
                    (this.StandardSymbol != null &&
                    this.StandardSymbol.Equals(input.StandardSymbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StandardSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.StandardSymbol.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StandardSymbol (string) minLength
            if (this.StandardSymbol != null && this.StandardSymbol.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StandardSymbol, length must be greater than 1.", new [] { "StandardSymbol" });
            }

            yield break;
        }
    }

}
