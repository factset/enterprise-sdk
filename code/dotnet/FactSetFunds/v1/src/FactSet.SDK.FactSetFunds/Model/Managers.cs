/*
 * FactSet Funds API
 *
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFunds.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFunds.Model
{
    /// <summary>
    /// Managers
    /// </summary>
    [DataContract(Name = "managers")]
    public partial class Managers : IEquatable<Managers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Managers" /> class.
        /// </summary>
        /// <param name="fsymId">FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested..</param>
        /// <param name="managerName">Proper Name of the Fund Manager.</param>
        /// <param name="managerTitle">Proper Title of the Fund Manager.</param>
        /// <param name="managerPhone">Phone Number of the Fund Manager.</param>
        /// <param name="managerInceptionDate">Inception Date of the Fund Manager.</param>
        /// <param name="managerJobId">Job Identifier for the Fund Manager.</param>
        /// <param name="requestId">The requested Id sent as input..</param>
        public Managers(string fsymId = default(string), string managerName = default(string), string managerTitle = default(string), string managerPhone = default(string), DateTime? managerInceptionDate = default(DateTime?), int? managerJobId = default(int?), string requestId = default(string))
        {
            this.FsymId = fsymId;
            this.ManagerName = managerName;
            this.ManagerTitle = managerTitle;
            this.ManagerPhone = managerPhone;
            this.ManagerInceptionDate = managerInceptionDate;
            this.ManagerJobId = managerJobId;
            this.RequestId = requestId;
        }

        /// <summary>
        /// FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.
        /// </summary>
        /// <value>FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Proper Name of the Fund Manager
        /// </summary>
        /// <value>Proper Name of the Fund Manager</value>
        [DataMember(Name = "managerName", EmitDefaultValue = true)]
        public string ManagerName { get; set; }

        /// <summary>
        /// Proper Title of the Fund Manager
        /// </summary>
        /// <value>Proper Title of the Fund Manager</value>
        [DataMember(Name = "managerTitle", EmitDefaultValue = true)]
        public string ManagerTitle { get; set; }

        /// <summary>
        /// Phone Number of the Fund Manager
        /// </summary>
        /// <value>Phone Number of the Fund Manager</value>
        [DataMember(Name = "managerPhone", EmitDefaultValue = true)]
        public string ManagerPhone { get; set; }

        /// <summary>
        /// Inception Date of the Fund Manager
        /// </summary>
        /// <value>Inception Date of the Fund Manager</value>
        [DataMember(Name = "managerInceptionDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ManagerInceptionDate { get; set; }

        /// <summary>
        /// Job Identifier for the Fund Manager
        /// </summary>
        /// <value>Job Identifier for the Fund Manager</value>
        [DataMember(Name = "managerJobId", EmitDefaultValue = true)]
        public int? ManagerJobId { get; set; }

        /// <summary>
        /// The requested Id sent as input.
        /// </summary>
        /// <value>The requested Id sent as input.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Managers {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  ManagerName: ").Append(ManagerName).Append("\n");
            sb.Append("  ManagerTitle: ").Append(ManagerTitle).Append("\n");
            sb.Append("  ManagerPhone: ").Append(ManagerPhone).Append("\n");
            sb.Append("  ManagerInceptionDate: ").Append(ManagerInceptionDate).Append("\n");
            sb.Append("  ManagerJobId: ").Append(ManagerJobId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Managers);
        }

        /// <summary>
        /// Returns true if Managers instances are equal
        /// </summary>
        /// <param name="input">Instance of Managers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Managers input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.ManagerName == input.ManagerName ||
                    (this.ManagerName != null &&
                    this.ManagerName.Equals(input.ManagerName))
                ) && 
                (
                    this.ManagerTitle == input.ManagerTitle ||
                    (this.ManagerTitle != null &&
                    this.ManagerTitle.Equals(input.ManagerTitle))
                ) && 
                (
                    this.ManagerPhone == input.ManagerPhone ||
                    (this.ManagerPhone != null &&
                    this.ManagerPhone.Equals(input.ManagerPhone))
                ) && 
                (
                    this.ManagerInceptionDate == input.ManagerInceptionDate ||
                    (this.ManagerInceptionDate != null &&
                    this.ManagerInceptionDate.Equals(input.ManagerInceptionDate))
                ) && 
                (
                    this.ManagerJobId == input.ManagerJobId ||
                    (this.ManagerJobId != null &&
                    this.ManagerJobId.Equals(input.ManagerJobId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.ManagerName != null)
                {
                    hashCode = (hashCode * 59) + this.ManagerName.GetHashCode();
                }
                if (this.ManagerTitle != null)
                {
                    hashCode = (hashCode * 59) + this.ManagerTitle.GetHashCode();
                }
                if (this.ManagerPhone != null)
                {
                    hashCode = (hashCode * 59) + this.ManagerPhone.GetHashCode();
                }
                if (this.ManagerInceptionDate != null)
                {
                    hashCode = (hashCode * 59) + this.ManagerInceptionDate.GetHashCode();
                }
                if (this.ManagerJobId != null)
                {
                    hashCode = (hashCode * 59) + this.ManagerJobId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
