/*
 * FactSet Funds API
 *
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFunds.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFunds.Model
{
    /// <summary>
    /// DistHistorical
    /// </summary>
    [DataContract(Name = "distHistorical")]
    public partial class DistHistorical : IEquatable<DistHistorical>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DistHistorical" /> class.
        /// </summary>
        /// <param name="fsymId">FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested..</param>
        /// <param name="date">The date of the distribution in YYYY-MM-DD format..</param>
        /// <param name="currency">ISO Currency.</param>
        /// <param name="totalDistributions">Total Distributions..</param>
        /// <param name="returnOfCapital">Return on Capital..</param>
        /// <param name="qualifiedDividends">Qualified Dividends..</param>
        /// <param name="nonQalifiedDividends">Qualified Dividends..</param>
        /// <param name="dailyAccruedDividends">Daily Accrued Dividends..</param>
        /// <param name="stCapitalGains">Short-Term Capital Gains..</param>
        /// <param name="ltCapitalGains">Long-Term Capital Gains..</param>
        /// <param name="sevenDayNetSecYield">Net SEC yield for the last seven days..</param>
        /// <param name="sevenDayGrossSecYield">Gross SEC yield for the last seven days..</param>
        /// <param name="thirtyDayNetSecYield">Net SEC yield for the thirty thirty days..</param>
        /// <param name="thirtyDayGrossSecYield">Gross SEC yield for the last thirty days..</param>
        /// <param name="requestId">The requested Id sent as input..</param>
        public DistHistorical(string fsymId = default(string), DateTime? date = default(DateTime?), string currency = default(string), double? totalDistributions = default(double?), double? returnOfCapital = default(double?), double? qualifiedDividends = default(double?), double? nonQalifiedDividends = default(double?), double? dailyAccruedDividends = default(double?), double? stCapitalGains = default(double?), double? ltCapitalGains = default(double?), double? sevenDayNetSecYield = default(double?), double? sevenDayGrossSecYield = default(double?), double? thirtyDayNetSecYield = default(double?), double? thirtyDayGrossSecYield = default(double?), string requestId = default(string))
        {
            this.FsymId = fsymId;
            this.Date = date;
            this.Currency = currency;
            this.TotalDistributions = totalDistributions;
            this.ReturnOfCapital = returnOfCapital;
            this.QualifiedDividends = qualifiedDividends;
            this.NonQalifiedDividends = nonQalifiedDividends;
            this.DailyAccruedDividends = dailyAccruedDividends;
            this.StCapitalGains = stCapitalGains;
            this.LtCapitalGains = ltCapitalGains;
            this.SevenDayNetSecYield = sevenDayNetSecYield;
            this.SevenDayGrossSecYield = sevenDayGrossSecYield;
            this.ThirtyDayNetSecYield = thirtyDayNetSecYield;
            this.ThirtyDayGrossSecYield = thirtyDayGrossSecYield;
            this.RequestId = requestId;
        }

        /// <summary>
        /// FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.
        /// </summary>
        /// <value>FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// The date of the distribution in YYYY-MM-DD format.
        /// </summary>
        /// <value>The date of the distribution in YYYY-MM-DD format.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// ISO Currency
        /// </summary>
        /// <value>ISO Currency</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Total Distributions.
        /// </summary>
        /// <value>Total Distributions.</value>
        [DataMember(Name = "totalDistributions", EmitDefaultValue = true)]
        public double? TotalDistributions { get; set; }

        /// <summary>
        /// Return on Capital.
        /// </summary>
        /// <value>Return on Capital.</value>
        [DataMember(Name = "returnOfCapital", EmitDefaultValue = true)]
        public double? ReturnOfCapital { get; set; }

        /// <summary>
        /// Qualified Dividends.
        /// </summary>
        /// <value>Qualified Dividends.</value>
        [DataMember(Name = "qualifiedDividends", EmitDefaultValue = true)]
        public double? QualifiedDividends { get; set; }

        /// <summary>
        /// Qualified Dividends.
        /// </summary>
        /// <value>Qualified Dividends.</value>
        [DataMember(Name = "nonQalifiedDividends", EmitDefaultValue = true)]
        public double? NonQalifiedDividends { get; set; }

        /// <summary>
        /// Daily Accrued Dividends.
        /// </summary>
        /// <value>Daily Accrued Dividends.</value>
        [DataMember(Name = "dailyAccruedDividends", EmitDefaultValue = true)]
        public double? DailyAccruedDividends { get; set; }

        /// <summary>
        /// Short-Term Capital Gains.
        /// </summary>
        /// <value>Short-Term Capital Gains.</value>
        [DataMember(Name = "stCapitalGains", EmitDefaultValue = true)]
        public double? StCapitalGains { get; set; }

        /// <summary>
        /// Long-Term Capital Gains.
        /// </summary>
        /// <value>Long-Term Capital Gains.</value>
        [DataMember(Name = "ltCapitalGains", EmitDefaultValue = true)]
        public double? LtCapitalGains { get; set; }

        /// <summary>
        /// Net SEC yield for the last seven days.
        /// </summary>
        /// <value>Net SEC yield for the last seven days.</value>
        [DataMember(Name = "sevenDayNetSecYield", EmitDefaultValue = true)]
        public double? SevenDayNetSecYield { get; set; }

        /// <summary>
        /// Gross SEC yield for the last seven days.
        /// </summary>
        /// <value>Gross SEC yield for the last seven days.</value>
        [DataMember(Name = "sevenDayGrossSecYield", EmitDefaultValue = true)]
        public double? SevenDayGrossSecYield { get; set; }

        /// <summary>
        /// Net SEC yield for the thirty thirty days.
        /// </summary>
        /// <value>Net SEC yield for the thirty thirty days.</value>
        [DataMember(Name = "thirtyDayNetSecYield", EmitDefaultValue = true)]
        public double? ThirtyDayNetSecYield { get; set; }

        /// <summary>
        /// Gross SEC yield for the last thirty days.
        /// </summary>
        /// <value>Gross SEC yield for the last thirty days.</value>
        [DataMember(Name = "thirtyDayGrossSecYield", EmitDefaultValue = true)]
        public double? ThirtyDayGrossSecYield { get; set; }

        /// <summary>
        /// The requested Id sent as input.
        /// </summary>
        /// <value>The requested Id sent as input.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DistHistorical {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TotalDistributions: ").Append(TotalDistributions).Append("\n");
            sb.Append("  ReturnOfCapital: ").Append(ReturnOfCapital).Append("\n");
            sb.Append("  QualifiedDividends: ").Append(QualifiedDividends).Append("\n");
            sb.Append("  NonQalifiedDividends: ").Append(NonQalifiedDividends).Append("\n");
            sb.Append("  DailyAccruedDividends: ").Append(DailyAccruedDividends).Append("\n");
            sb.Append("  StCapitalGains: ").Append(StCapitalGains).Append("\n");
            sb.Append("  LtCapitalGains: ").Append(LtCapitalGains).Append("\n");
            sb.Append("  SevenDayNetSecYield: ").Append(SevenDayNetSecYield).Append("\n");
            sb.Append("  SevenDayGrossSecYield: ").Append(SevenDayGrossSecYield).Append("\n");
            sb.Append("  ThirtyDayNetSecYield: ").Append(ThirtyDayNetSecYield).Append("\n");
            sb.Append("  ThirtyDayGrossSecYield: ").Append(ThirtyDayGrossSecYield).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DistHistorical);
        }

        /// <summary>
        /// Returns true if DistHistorical instances are equal
        /// </summary>
        /// <param name="input">Instance of DistHistorical to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistHistorical input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.TotalDistributions == input.TotalDistributions ||
                    (this.TotalDistributions != null &&
                    this.TotalDistributions.Equals(input.TotalDistributions))
                ) && 
                (
                    this.ReturnOfCapital == input.ReturnOfCapital ||
                    (this.ReturnOfCapital != null &&
                    this.ReturnOfCapital.Equals(input.ReturnOfCapital))
                ) && 
                (
                    this.QualifiedDividends == input.QualifiedDividends ||
                    (this.QualifiedDividends != null &&
                    this.QualifiedDividends.Equals(input.QualifiedDividends))
                ) && 
                (
                    this.NonQalifiedDividends == input.NonQalifiedDividends ||
                    (this.NonQalifiedDividends != null &&
                    this.NonQalifiedDividends.Equals(input.NonQalifiedDividends))
                ) && 
                (
                    this.DailyAccruedDividends == input.DailyAccruedDividends ||
                    (this.DailyAccruedDividends != null &&
                    this.DailyAccruedDividends.Equals(input.DailyAccruedDividends))
                ) && 
                (
                    this.StCapitalGains == input.StCapitalGains ||
                    (this.StCapitalGains != null &&
                    this.StCapitalGains.Equals(input.StCapitalGains))
                ) && 
                (
                    this.LtCapitalGains == input.LtCapitalGains ||
                    (this.LtCapitalGains != null &&
                    this.LtCapitalGains.Equals(input.LtCapitalGains))
                ) && 
                (
                    this.SevenDayNetSecYield == input.SevenDayNetSecYield ||
                    (this.SevenDayNetSecYield != null &&
                    this.SevenDayNetSecYield.Equals(input.SevenDayNetSecYield))
                ) && 
                (
                    this.SevenDayGrossSecYield == input.SevenDayGrossSecYield ||
                    (this.SevenDayGrossSecYield != null &&
                    this.SevenDayGrossSecYield.Equals(input.SevenDayGrossSecYield))
                ) && 
                (
                    this.ThirtyDayNetSecYield == input.ThirtyDayNetSecYield ||
                    (this.ThirtyDayNetSecYield != null &&
                    this.ThirtyDayNetSecYield.Equals(input.ThirtyDayNetSecYield))
                ) && 
                (
                    this.ThirtyDayGrossSecYield == input.ThirtyDayGrossSecYield ||
                    (this.ThirtyDayGrossSecYield != null &&
                    this.ThirtyDayGrossSecYield.Equals(input.ThirtyDayGrossSecYield))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.TotalDistributions != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDistributions.GetHashCode();
                }
                if (this.ReturnOfCapital != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnOfCapital.GetHashCode();
                }
                if (this.QualifiedDividends != null)
                {
                    hashCode = (hashCode * 59) + this.QualifiedDividends.GetHashCode();
                }
                if (this.NonQalifiedDividends != null)
                {
                    hashCode = (hashCode * 59) + this.NonQalifiedDividends.GetHashCode();
                }
                if (this.DailyAccruedDividends != null)
                {
                    hashCode = (hashCode * 59) + this.DailyAccruedDividends.GetHashCode();
                }
                if (this.StCapitalGains != null)
                {
                    hashCode = (hashCode * 59) + this.StCapitalGains.GetHashCode();
                }
                if (this.LtCapitalGains != null)
                {
                    hashCode = (hashCode * 59) + this.LtCapitalGains.GetHashCode();
                }
                if (this.SevenDayNetSecYield != null)
                {
                    hashCode = (hashCode * 59) + this.SevenDayNetSecYield.GetHashCode();
                }
                if (this.SevenDayGrossSecYield != null)
                {
                    hashCode = (hashCode * 59) + this.SevenDayGrossSecYield.GetHashCode();
                }
                if (this.ThirtyDayNetSecYield != null)
                {
                    hashCode = (hashCode * 59) + this.ThirtyDayNetSecYield.GetHashCode();
                }
                if (this.ThirtyDayGrossSecYield != null)
                {
                    hashCode = (hashCode * 59) + this.ThirtyDayGrossSecYield.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
