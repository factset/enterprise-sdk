/*
 * FactSet Funds API
 *
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFunds.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFunds.Model
{
    /// <summary>
    /// The operator to be used in the filter criteria, where   * **EQ**  &#x3D; Equals,   * **NE** &#x3D; Not equals,   * **CT**  &#x3D; Contains returns values which contain given substring,   * **NOT_CT** &#x3D; Not Contains - returns values that **do not** contain the given substring,   * **IN** &#x3D; The \&quot;In\&quot; operator accepts an array of values and returns data that matches any of them,   * **NOT_IN** &#x3D; The \&quot;NOT_IN\&quot; operator accepts an array of values and returns data that matches none of them,   * **LT** &#x3D; Less than,   * **LTE** &#x3D; Less than or equal to,   * **GT**  &#x3D; Greater than,   * **GTE** &#x3D; Greater than or equal to.      &lt;br&gt; **Note:** Both the &#x60;IN&#x60; and &#x60;NOT_IN&#x60; operators accept multiple values, while all other operators should be used with a single value. 
    /// </summary>
    /// <value>The operator to be used in the filter criteria, where   * **EQ**  &#x3D; Equals,   * **NE** &#x3D; Not equals,   * **CT**  &#x3D; Contains returns values which contain given substring,   * **NOT_CT** &#x3D; Not Contains - returns values that **do not** contain the given substring,   * **IN** &#x3D; The \&quot;In\&quot; operator accepts an array of values and returns data that matches any of them,   * **NOT_IN** &#x3D; The \&quot;NOT_IN\&quot; operator accepts an array of values and returns data that matches none of them,   * **LT** &#x3D; Less than,   * **LTE** &#x3D; Less than or equal to,   * **GT**  &#x3D; Greater than,   * **GTE** &#x3D; Greater than or equal to.      &lt;br&gt; **Note:** Both the &#x60;IN&#x60; and &#x60;NOT_IN&#x60; operators accept multiple values, while all other operators should be used with a single value. </value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Operator
    {
        /// <summary>
        /// Enum EQ for value: EQ
        /// </summary>
        [EnumMember(Value = "EQ")]
        EQ = 1,

        /// <summary>
        /// Enum NE for value: NE
        /// </summary>
        [EnumMember(Value = "NE")]
        NE = 2,

        /// <summary>
        /// Enum CT for value: CT
        /// </summary>
        [EnumMember(Value = "CT")]
        CT = 3,

        /// <summary>
        /// Enum NOTCT for value: NOT_CT
        /// </summary>
        [EnumMember(Value = "NOT_CT")]
        NOTCT = 4,

        /// <summary>
        /// Enum IN for value: IN
        /// </summary>
        [EnumMember(Value = "IN")]
        IN = 5,

        /// <summary>
        /// Enum NOTIN for value: NOT_IN
        /// </summary>
        [EnumMember(Value = "NOT_IN")]
        NOTIN = 6,

        /// <summary>
        /// Enum LT for value: LT
        /// </summary>
        [EnumMember(Value = "LT")]
        LT = 7,

        /// <summary>
        /// Enum LTE for value: LTE
        /// </summary>
        [EnumMember(Value = "LTE")]
        LTE = 8,

        /// <summary>
        /// Enum GT for value: GT
        /// </summary>
        [EnumMember(Value = "GT")]
        GT = 9,

        /// <summary>
        /// Enum GTE for value: GTE
        /// </summary>
        [EnumMember(Value = "GTE")]
        GTE = 10

    }

}
