/*
 * FactSet Funds API
 *
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFunds.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFunds.Model
{
    /// <summary>
    /// Field
    /// </summary>
    [DataContract(Name = "Field")]
    public partial class Field : IEquatable<Field>, IValidatableObject
    {
        /// <summary>
        /// Field data type, where field datatype can be one of the following: * &#x60;text&#x60;  &#x3D; String, * &#x60;float&#x60; &#x3D; Floating point number, * &#x60;long&#x60;  &#x3D; integer, * &#x60;date&#x60; &#x3D; Date. * &#x60;boolean&#x60; &#x3D; &#x60;true&#x60; or &#x60;false&#x60;.  &lt;br&gt; 
        /// </summary>
        /// <value>Field data type, where field datatype can be one of the following: * &#x60;text&#x60;  &#x3D; String, * &#x60;float&#x60; &#x3D; Floating point number, * &#x60;long&#x60;  &#x3D; integer, * &#x60;date&#x60; &#x3D; Date. * &#x60;boolean&#x60; &#x3D; &#x60;true&#x60; or &#x60;false&#x60;.  &lt;br&gt; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Float for value: float
            /// </summary>
            [EnumMember(Value = "float")]
            Float = 2,

            /// <summary>
            /// Enum Long for value: long
            /// </summary>
            [EnumMember(Value = "long")]
            Long = 3,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 4,

            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 5

        }


        /// <summary>
        /// Field data type, where field datatype can be one of the following: * &#x60;text&#x60;  &#x3D; String, * &#x60;float&#x60; &#x3D; Floating point number, * &#x60;long&#x60;  &#x3D; integer, * &#x60;date&#x60; &#x3D; Date. * &#x60;boolean&#x60; &#x3D; &#x60;true&#x60; or &#x60;false&#x60;.  &lt;br&gt; 
        /// </summary>
        /// <value>Field data type, where field datatype can be one of the following: * &#x60;text&#x60;  &#x3D; String, * &#x60;float&#x60; &#x3D; Floating point number, * &#x60;long&#x60;  &#x3D; integer, * &#x60;date&#x60; &#x3D; Date. * &#x60;boolean&#x60; &#x3D; &#x60;true&#x60; or &#x60;false&#x60;.  &lt;br&gt; </value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Field" /> class.
        /// </summary>
        /// <param name="fieldName">Field name..</param>
        /// <param name="displayName">Field display name as provided during the creation of the content set. This is returned only for custom content sets..</param>
        /// <param name="type">Field data type, where field datatype can be one of the following: * &#x60;text&#x60;  &#x3D; String, * &#x60;float&#x60; &#x3D; Floating point number, * &#x60;long&#x60;  &#x3D; integer, * &#x60;date&#x60; &#x3D; Date. * &#x60;boolean&#x60; &#x3D; &#x60;true&#x60; or &#x60;false&#x60;.  &lt;br&gt; .</param>
        /// <param name="description">Field description..</param>
        public Field(string fieldName = default(string), string displayName = default(string), TypeEnum? type = default(TypeEnum?), string description = default(string))
        {
            this.FieldName = fieldName;
            this.DisplayName = displayName;
            this.Type = type;
            this.Description = description;
        }

        /// <summary>
        /// Field name.
        /// </summary>
        /// <value>Field name.</value>
        [DataMember(Name = "fieldName", EmitDefaultValue = false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Field display name as provided during the creation of the content set. This is returned only for custom content sets.
        /// </summary>
        /// <value>Field display name as provided during the creation of the content set. This is returned only for custom content sets.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Field description.
        /// </summary>
        /// <value>Field description.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Field {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Field);
        }

        /// <summary>
        /// Returns true if Field instances are equal
        /// </summary>
        /// <param name="input">Instance of Field to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Field input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                {
                    hashCode = (hashCode * 59) + this.FieldName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
