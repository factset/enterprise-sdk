/*
 * FactSet Funds API
 *
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFunds.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFunds.Model
{
    /// <summary>
    /// Aggregate statistics for a given field within the specified content sets.
    /// </summary>
    [DataContract(Name = "StatisticsResponse_data")]
    public partial class StatisticsResponseData : IEquatable<StatisticsResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsResponseData" /> class.
        /// </summary>
        /// <param name="minimum">The minimum value of the field..</param>
        /// <param name="maximum">The maximum value of the field..</param>
        /// <param name="average">The average value of the field..</param>
        /// <param name="sum">The sum of the field values..</param>
        /// <param name="count">The number of records..</param>
        /// <param name="median">The median value of the field..</param>
        /// <param name="stdDev">The standard deviation of the field values..</param>
        /// <param name="histogram">The histogram of the field values. The histogram is an array of 10 bins, each bin containing the minimum, maximum, and count of records in that bin. The bins are equally spaced between the minimum and maximum values of the field..</param>
        public StatisticsResponseData(decimal minimum = default(decimal), decimal maximum = default(decimal), decimal average = default(decimal), decimal sum = default(decimal), long count = default(long), decimal median = default(decimal), decimal stdDev = default(decimal), List<HistogramData> histogram = default(List<HistogramData>))
        {
            this.Minimum = minimum;
            this.Maximum = maximum;
            this.Average = average;
            this.Sum = sum;
            this.Count = count;
            this.Median = median;
            this.StdDev = stdDev;
            this.Histogram = histogram;
        }

        /// <summary>
        /// The minimum value of the field.
        /// </summary>
        /// <value>The minimum value of the field.</value>
        [DataMember(Name = "minimum", EmitDefaultValue = false)]
        public decimal Minimum { get; set; }

        /// <summary>
        /// The maximum value of the field.
        /// </summary>
        /// <value>The maximum value of the field.</value>
        [DataMember(Name = "maximum", EmitDefaultValue = false)]
        public decimal Maximum { get; set; }

        /// <summary>
        /// The average value of the field.
        /// </summary>
        /// <value>The average value of the field.</value>
        [DataMember(Name = "average", EmitDefaultValue = false)]
        public decimal Average { get; set; }

        /// <summary>
        /// The sum of the field values.
        /// </summary>
        /// <value>The sum of the field values.</value>
        [DataMember(Name = "sum", EmitDefaultValue = false)]
        public decimal Sum { get; set; }

        /// <summary>
        /// The number of records.
        /// </summary>
        /// <value>The number of records.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public long Count { get; set; }

        /// <summary>
        /// The median value of the field.
        /// </summary>
        /// <value>The median value of the field.</value>
        [DataMember(Name = "median", EmitDefaultValue = false)]
        public decimal Median { get; set; }

        /// <summary>
        /// The standard deviation of the field values.
        /// </summary>
        /// <value>The standard deviation of the field values.</value>
        [DataMember(Name = "stdDev", EmitDefaultValue = false)]
        public decimal StdDev { get; set; }

        /// <summary>
        /// The histogram of the field values. The histogram is an array of 10 bins, each bin containing the minimum, maximum, and count of records in that bin. The bins are equally spaced between the minimum and maximum values of the field.
        /// </summary>
        /// <value>The histogram of the field values. The histogram is an array of 10 bins, each bin containing the minimum, maximum, and count of records in that bin. The bins are equally spaced between the minimum and maximum values of the field.</value>
        [DataMember(Name = "histogram", EmitDefaultValue = false)]
        public List<HistogramData> Histogram { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatisticsResponseData {\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Average: ").Append(Average).Append("\n");
            sb.Append("  Sum: ").Append(Sum).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Median: ").Append(Median).Append("\n");
            sb.Append("  StdDev: ").Append(StdDev).Append("\n");
            sb.Append("  Histogram: ").Append(Histogram).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatisticsResponseData);
        }

        /// <summary>
        /// Returns true if StatisticsResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of StatisticsResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatisticsResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Minimum == input.Minimum ||
                    this.Minimum.Equals(input.Minimum)
                ) && 
                (
                    this.Maximum == input.Maximum ||
                    this.Maximum.Equals(input.Maximum)
                ) && 
                (
                    this.Average == input.Average ||
                    this.Average.Equals(input.Average)
                ) && 
                (
                    this.Sum == input.Sum ||
                    this.Sum.Equals(input.Sum)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Median == input.Median ||
                    this.Median.Equals(input.Median)
                ) && 
                (
                    this.StdDev == input.StdDev ||
                    this.StdDev.Equals(input.StdDev)
                ) && 
                (
                    this.Histogram == input.Histogram ||
                    this.Histogram != null &&
                    input.Histogram != null &&
                    this.Histogram.SequenceEqual(input.Histogram)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Minimum.GetHashCode();
                hashCode = (hashCode * 59) + this.Maximum.GetHashCode();
                hashCode = (hashCode * 59) + this.Average.GetHashCode();
                hashCode = (hashCode * 59) + this.Sum.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                hashCode = (hashCode * 59) + this.Median.GetHashCode();
                hashCode = (hashCode * 59) + this.StdDev.GetHashCode();
                if (this.Histogram != null)
                {
                    hashCode = (hashCode * 59) + this.Histogram.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
