/*
 * FactSet Funds API
 *
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFunds.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFunds.Model
{
    /// <summary>
    /// ReturnsSnapshot
    /// </summary>
    [DataContract(Name = "returnsSnapshot")]
    public partial class ReturnsSnapshot : IEquatable<ReturnsSnapshot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnsSnapshot" /> class.
        /// </summary>
        /// <param name="fsymId">FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested..</param>
        /// <param name="oneWeek">The one-week return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="oneMonth">The one-month return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="threeMonth">The three-month return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="yearToDate">The year-to-date return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="oneYear">The one-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="threeYear">The three-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="threeYearAnnualized">The three-year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="fiveYear">The five-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="fiveYearAnnualized">The five year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="tenYear">The ten-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="tenYearAnnualized">The ten year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter..</param>
        /// <param name="date">The date of the return in YYYY-MM-DD format..</param>
        /// <param name="requestId">The requested Id sent as input..</param>
        /// <param name="sinceInceptionAnnualized">The average annual rate of return since the fund&#39;s inception date, calculated using compounding. This is always a total return (dividends are included) and is not affected by the dividendAdjust parameter..</param>
        public ReturnsSnapshot(string fsymId = default(string), double? oneWeek = default(double?), double? oneMonth = default(double?), double? threeMonth = default(double?), double? yearToDate = default(double?), double? oneYear = default(double?), double? threeYear = default(double?), double? threeYearAnnualized = default(double?), double? fiveYear = default(double?), double? fiveYearAnnualized = default(double?), double? tenYear = default(double?), double? tenYearAnnualized = default(double?), DateTime? date = default(DateTime?), string requestId = default(string), double? sinceInceptionAnnualized = default(double?))
        {
            this.FsymId = fsymId;
            this.OneWeek = oneWeek;
            this.OneMonth = oneMonth;
            this.ThreeMonth = threeMonth;
            this.YearToDate = yearToDate;
            this.OneYear = oneYear;
            this.ThreeYear = threeYear;
            this.ThreeYearAnnualized = threeYearAnnualized;
            this.FiveYear = fiveYear;
            this.FiveYearAnnualized = fiveYearAnnualized;
            this.TenYear = tenYear;
            this.TenYearAnnualized = tenYearAnnualized;
            this.Date = date;
            this.RequestId = requestId;
            this.SinceInceptionAnnualized = sinceInceptionAnnualized;
        }

        /// <summary>
        /// FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.
        /// </summary>
        /// <value>FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// The one-week return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The one-week return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "oneWeek", EmitDefaultValue = true)]
        public double? OneWeek { get; set; }

        /// <summary>
        /// The one-month return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The one-month return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "oneMonth", EmitDefaultValue = true)]
        public double? OneMonth { get; set; }

        /// <summary>
        /// The three-month return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The three-month return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "threeMonth", EmitDefaultValue = true)]
        public double? ThreeMonth { get; set; }

        /// <summary>
        /// The year-to-date return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The year-to-date return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "yearToDate", EmitDefaultValue = true)]
        public double? YearToDate { get; set; }

        /// <summary>
        /// The one-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The one-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "oneYear", EmitDefaultValue = true)]
        public double? OneYear { get; set; }

        /// <summary>
        /// The three-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The three-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "threeYear", EmitDefaultValue = true)]
        public double? ThreeYear { get; set; }

        /// <summary>
        /// The three-year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The three-year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "threeYearAnnualized", EmitDefaultValue = true)]
        public double? ThreeYearAnnualized { get; set; }

        /// <summary>
        /// The five-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The five-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "fiveYear", EmitDefaultValue = true)]
        public double? FiveYear { get; set; }

        /// <summary>
        /// The five year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The five year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "fiveYearAnnualized", EmitDefaultValue = true)]
        public double? FiveYearAnnualized { get; set; }

        /// <summary>
        /// The ten-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The ten-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "tenYear", EmitDefaultValue = true)]
        public double? TenYear { get; set; }

        /// <summary>
        /// The ten year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
        /// </summary>
        /// <value>The ten year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.</value>
        [DataMember(Name = "tenYearAnnualized", EmitDefaultValue = true)]
        public double? TenYearAnnualized { get; set; }

        /// <summary>
        /// The date of the return in YYYY-MM-DD format.
        /// </summary>
        /// <value>The date of the return in YYYY-MM-DD format.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// The requested Id sent as input.
        /// </summary>
        /// <value>The requested Id sent as input.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// The average annual rate of return since the fund&#39;s inception date, calculated using compounding. This is always a total return (dividends are included) and is not affected by the dividendAdjust parameter.
        /// </summary>
        /// <value>The average annual rate of return since the fund&#39;s inception date, calculated using compounding. This is always a total return (dividends are included) and is not affected by the dividendAdjust parameter.</value>
        [DataMember(Name = "sinceInceptionAnnualized", EmitDefaultValue = true)]
        public double? SinceInceptionAnnualized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnsSnapshot {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  OneWeek: ").Append(OneWeek).Append("\n");
            sb.Append("  OneMonth: ").Append(OneMonth).Append("\n");
            sb.Append("  ThreeMonth: ").Append(ThreeMonth).Append("\n");
            sb.Append("  YearToDate: ").Append(YearToDate).Append("\n");
            sb.Append("  OneYear: ").Append(OneYear).Append("\n");
            sb.Append("  ThreeYear: ").Append(ThreeYear).Append("\n");
            sb.Append("  ThreeYearAnnualized: ").Append(ThreeYearAnnualized).Append("\n");
            sb.Append("  FiveYear: ").Append(FiveYear).Append("\n");
            sb.Append("  FiveYearAnnualized: ").Append(FiveYearAnnualized).Append("\n");
            sb.Append("  TenYear: ").Append(TenYear).Append("\n");
            sb.Append("  TenYearAnnualized: ").Append(TenYearAnnualized).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  SinceInceptionAnnualized: ").Append(SinceInceptionAnnualized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReturnsSnapshot);
        }

        /// <summary>
        /// Returns true if ReturnsSnapshot instances are equal
        /// </summary>
        /// <param name="input">Instance of ReturnsSnapshot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnsSnapshot input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.OneWeek == input.OneWeek ||
                    (this.OneWeek != null &&
                    this.OneWeek.Equals(input.OneWeek))
                ) && 
                (
                    this.OneMonth == input.OneMonth ||
                    (this.OneMonth != null &&
                    this.OneMonth.Equals(input.OneMonth))
                ) && 
                (
                    this.ThreeMonth == input.ThreeMonth ||
                    (this.ThreeMonth != null &&
                    this.ThreeMonth.Equals(input.ThreeMonth))
                ) && 
                (
                    this.YearToDate == input.YearToDate ||
                    (this.YearToDate != null &&
                    this.YearToDate.Equals(input.YearToDate))
                ) && 
                (
                    this.OneYear == input.OneYear ||
                    (this.OneYear != null &&
                    this.OneYear.Equals(input.OneYear))
                ) && 
                (
                    this.ThreeYear == input.ThreeYear ||
                    (this.ThreeYear != null &&
                    this.ThreeYear.Equals(input.ThreeYear))
                ) && 
                (
                    this.ThreeYearAnnualized == input.ThreeYearAnnualized ||
                    (this.ThreeYearAnnualized != null &&
                    this.ThreeYearAnnualized.Equals(input.ThreeYearAnnualized))
                ) && 
                (
                    this.FiveYear == input.FiveYear ||
                    (this.FiveYear != null &&
                    this.FiveYear.Equals(input.FiveYear))
                ) && 
                (
                    this.FiveYearAnnualized == input.FiveYearAnnualized ||
                    (this.FiveYearAnnualized != null &&
                    this.FiveYearAnnualized.Equals(input.FiveYearAnnualized))
                ) && 
                (
                    this.TenYear == input.TenYear ||
                    (this.TenYear != null &&
                    this.TenYear.Equals(input.TenYear))
                ) && 
                (
                    this.TenYearAnnualized == input.TenYearAnnualized ||
                    (this.TenYearAnnualized != null &&
                    this.TenYearAnnualized.Equals(input.TenYearAnnualized))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.SinceInceptionAnnualized == input.SinceInceptionAnnualized ||
                    (this.SinceInceptionAnnualized != null &&
                    this.SinceInceptionAnnualized.Equals(input.SinceInceptionAnnualized))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.OneWeek != null)
                {
                    hashCode = (hashCode * 59) + this.OneWeek.GetHashCode();
                }
                if (this.OneMonth != null)
                {
                    hashCode = (hashCode * 59) + this.OneMonth.GetHashCode();
                }
                if (this.ThreeMonth != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeMonth.GetHashCode();
                }
                if (this.YearToDate != null)
                {
                    hashCode = (hashCode * 59) + this.YearToDate.GetHashCode();
                }
                if (this.OneYear != null)
                {
                    hashCode = (hashCode * 59) + this.OneYear.GetHashCode();
                }
                if (this.ThreeYear != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeYear.GetHashCode();
                }
                if (this.ThreeYearAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeYearAnnualized.GetHashCode();
                }
                if (this.FiveYear != null)
                {
                    hashCode = (hashCode * 59) + this.FiveYear.GetHashCode();
                }
                if (this.FiveYearAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.FiveYearAnnualized.GetHashCode();
                }
                if (this.TenYear != null)
                {
                    hashCode = (hashCode * 59) + this.TenYear.GetHashCode();
                }
                if (this.TenYearAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.TenYearAnnualized.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.SinceInceptionAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.SinceInceptionAnnualized.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
