/*
 * FactSet Funds API
 *
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFunds.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFunds.Model
{
    /// <summary>
    /// Summaries
    /// </summary>
    [DataContract(Name = "summaries")]
    public partial class Summaries : IEquatable<Summaries>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Summaries" /> class.
        /// </summary>
        /// <param name="fsymId">FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested..</param>
        /// <param name="fsymEntityId">FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E), resolved from the requestId of the Fund requested..</param>
        /// <param name="fsymRegionalId">FactSet Regional Identifier. Six alpha-numeric characters, excluding vowels, with a -R suffix (XXXXXX-R), resolved from the requestId of the Fund requested..</param>
        /// <param name="fsymTickerRegion">FactSet Ticker-Region for the requested fund..</param>
        /// <param name="fsymUltimateParentId">The FactSet Ultimate Parent Entity Identifer, with a -E suffix (XXXXXX-E)..</param>
        /// <param name="requestId">The requested Id sent as input..</param>
        /// <param name="activeFlag">Binary flag to indicate whether the fund is currently active, where 1 is active and 0 is inactive..</param>
        /// <param name="activelyManagedFlag">Binary indicator of whether the fund is actively managed, where 1 is active and 0 is inactive..</param>
        /// <param name="brand">The Funds Brand Name in proper format..</param>
        /// <param name="countryDomicile">Returns the fund&#39;s country of domicile in ISO2 format. Only available for Mutual Funds..</param>
        /// <param name="countryOfRegistration">Countries where the mutual fund is registered and is available for sale, represented as ISO 3166 2-letter country codes..</param>
        /// <param name="currency">The fund&#39;s currency..</param>
        /// <param name="descInfo">The Fund&#39;s Investment Strategy short description..</param>
        /// <param name="fundOfFundsId">The fund of fund&#39;s id if applicable. Will provide plain Fund of Funds text..</param>
        /// <param name="inceptionDate">The fund&#39;s inception date in YYYY-MM-DD format..</param>
        /// <param name="insight">The fund&#39;s investment strategy long description. Use &#x60;descInfo&#x60; if needing short description..</param>
        /// <param name="issuerId">The Issuer Identifier..</param>
        /// <param name="issuerName">The Issuer Name in proper format..</param>
        /// <param name="legalStructure">The legal structure of the fund, e.g. Open-Ended Fund, close-ended fund.</param>
        /// <param name="leverageFactor">The leverage factor of the fund..</param>
        /// <param name="leverageInverse">Indicates whether the fund is leveraged, inverse, or neither in proper format..</param>
        /// <param name="name">The Fund security&#39;s name in proper format..</param>
        /// <param name="navCurrency">The NAV currency for the specified share class..</param>
        /// <param name="objective">The Fund&#39;s objective long description..</param>
        /// <param name="priceFirstDate">The fund&#39;s first available date for prices (NAV) in YYYY-MM-DD format. This can be used to fetch the first available price from FactSet. *NOTE: This is not the inception date of fund.*.</param>
        /// <param name="priceRecentDate">The fund&#39;s most recent available date for prices (NAV) in YYYY-MM-DD format..</param>
        /// <param name="shrClass">The Funds Share class type name in proper format..</param>
        /// <param name="shrClassActiveFlag">Returns a binary indicator of whether the specified share class is currently active, where 1 is active and 0 is inactive..</param>
        /// <param name="shrClsActivelyManagedFlag">Returns a binary indicator of whether the specified share class is actively managed, where 1 is active and 0 is inactive..</param>
        /// <param name="shrClsCurrency">The currency for the specified share class..</param>
        /// <param name="shrClsInceptDate">The specified share class&#39;s inception date in YYYY-MM-DD format..</param>
        /// <param name="shrClsName">The specified share class name for the fund in proper format..</param>
        /// <param name="shrClsTermDate">The Share class Termination Date in YYYY-MM-DD format. If still active, value will be null..</param>
        /// <param name="terminationDate">The Termination Date in YYYY-MM-DD format. If still active, value will be null..</param>
        /// <param name="type">The Type of Fund, e.g. Mutual Fund, Unit Investment Trust.</param>
        /// <param name="webSite">The URL of the Fund..</param>
        /// <param name="ucitsCompliance">A regulatory flag that shows if the fund can be marketed within all countries that are part of the European Union. Returns 1 for True to 0 for False..</param>
        /// <param name="ucitsScheme">Determines whether the fund is regulated under the UCITS IV (Directive 2009/65/EC) or UCITS V (Directive 2014/91/EU).</param>
        public Summaries(string fsymId = default(string), string fsymEntityId = default(string), string fsymRegionalId = default(string), string fsymTickerRegion = default(string), string fsymUltimateParentId = default(string), string requestId = default(string), int? activeFlag = default(int?), int? activelyManagedFlag = default(int?), string brand = default(string), string countryDomicile = default(string), string countryOfRegistration = default(string), string currency = default(string), string descInfo = default(string), string fundOfFundsId = default(string), DateTime? inceptionDate = default(DateTime?), string insight = default(string), string issuerId = default(string), string issuerName = default(string), string legalStructure = default(string), double? leverageFactor = default(double?), string leverageInverse = default(string), string name = default(string), string navCurrency = default(string), string objective = default(string), DateTime? priceFirstDate = default(DateTime?), DateTime? priceRecentDate = default(DateTime?), string shrClass = default(string), int? shrClassActiveFlag = default(int?), int? shrClsActivelyManagedFlag = default(int?), string shrClsCurrency = default(string), DateTime? shrClsInceptDate = default(DateTime?), string shrClsName = default(string), DateTime? shrClsTermDate = default(DateTime?), DateTime? terminationDate = default(DateTime?), string type = default(string), string webSite = default(string), int? ucitsCompliance = default(int?), string ucitsScheme = default(string))
        {
            this.FsymId = fsymId;
            this.FsymEntityId = fsymEntityId;
            this.FsymRegionalId = fsymRegionalId;
            this.FsymTickerRegion = fsymTickerRegion;
            this.FsymUltimateParentId = fsymUltimateParentId;
            this.RequestId = requestId;
            this.ActiveFlag = activeFlag;
            this.ActivelyManagedFlag = activelyManagedFlag;
            this.Brand = brand;
            this.CountryDomicile = countryDomicile;
            this.CountryOfRegistration = countryOfRegistration;
            this.Currency = currency;
            this.DescInfo = descInfo;
            this.FundOfFundsId = fundOfFundsId;
            this.InceptionDate = inceptionDate;
            this.Insight = insight;
            this.IssuerId = issuerId;
            this.IssuerName = issuerName;
            this.LegalStructure = legalStructure;
            this.LeverageFactor = leverageFactor;
            this.LeverageInverse = leverageInverse;
            this.Name = name;
            this.NavCurrency = navCurrency;
            this.Objective = objective;
            this.PriceFirstDate = priceFirstDate;
            this.PriceRecentDate = priceRecentDate;
            this.ShrClass = shrClass;
            this.ShrClassActiveFlag = shrClassActiveFlag;
            this.ShrClsActivelyManagedFlag = shrClsActivelyManagedFlag;
            this.ShrClsCurrency = shrClsCurrency;
            this.ShrClsInceptDate = shrClsInceptDate;
            this.ShrClsName = shrClsName;
            this.ShrClsTermDate = shrClsTermDate;
            this.TerminationDate = terminationDate;
            this.Type = type;
            this.WebSite = webSite;
            this.UcitsCompliance = ucitsCompliance;
            this.UcitsScheme = ucitsScheme;
        }

        /// <summary>
        /// FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.
        /// </summary>
        /// <value>FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E), resolved from the requestId of the Fund requested.
        /// </summary>
        /// <value>FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E), resolved from the requestId of the Fund requested.</value>
        [DataMember(Name = "fsymEntityId", EmitDefaultValue = true)]
        public string FsymEntityId { get; set; }

        /// <summary>
        /// FactSet Regional Identifier. Six alpha-numeric characters, excluding vowels, with a -R suffix (XXXXXX-R), resolved from the requestId of the Fund requested.
        /// </summary>
        /// <value>FactSet Regional Identifier. Six alpha-numeric characters, excluding vowels, with a -R suffix (XXXXXX-R), resolved from the requestId of the Fund requested.</value>
        [DataMember(Name = "fsymRegionalId", EmitDefaultValue = true)]
        public string FsymRegionalId { get; set; }

        /// <summary>
        /// FactSet Ticker-Region for the requested fund.
        /// </summary>
        /// <value>FactSet Ticker-Region for the requested fund.</value>
        [DataMember(Name = "fsymTickerRegion", EmitDefaultValue = true)]
        public string FsymTickerRegion { get; set; }

        /// <summary>
        /// The FactSet Ultimate Parent Entity Identifer, with a -E suffix (XXXXXX-E).
        /// </summary>
        /// <value>The FactSet Ultimate Parent Entity Identifer, with a -E suffix (XXXXXX-E).</value>
        [DataMember(Name = "fsymUltimateParentId", EmitDefaultValue = true)]
        public string FsymUltimateParentId { get; set; }

        /// <summary>
        /// The requested Id sent as input.
        /// </summary>
        /// <value>The requested Id sent as input.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Binary flag to indicate whether the fund is currently active, where 1 is active and 0 is inactive.
        /// </summary>
        /// <value>Binary flag to indicate whether the fund is currently active, where 1 is active and 0 is inactive.</value>
        [DataMember(Name = "activeFlag", EmitDefaultValue = true)]
        public int? ActiveFlag { get; set; }

        /// <summary>
        /// Binary indicator of whether the fund is actively managed, where 1 is active and 0 is inactive.
        /// </summary>
        /// <value>Binary indicator of whether the fund is actively managed, where 1 is active and 0 is inactive.</value>
        [DataMember(Name = "activelyManagedFlag", EmitDefaultValue = true)]
        public int? ActivelyManagedFlag { get; set; }

        /// <summary>
        /// The Funds Brand Name in proper format.
        /// </summary>
        /// <value>The Funds Brand Name in proper format.</value>
        [DataMember(Name = "brand", EmitDefaultValue = true)]
        public string Brand { get; set; }

        /// <summary>
        /// Returns the fund&#39;s country of domicile in ISO2 format. Only available for Mutual Funds.
        /// </summary>
        /// <value>Returns the fund&#39;s country of domicile in ISO2 format. Only available for Mutual Funds.</value>
        [DataMember(Name = "countryDomicile", EmitDefaultValue = true)]
        public string CountryDomicile { get; set; }

        /// <summary>
        /// Countries where the mutual fund is registered and is available for sale, represented as ISO 3166 2-letter country codes.
        /// </summary>
        /// <value>Countries where the mutual fund is registered and is available for sale, represented as ISO 3166 2-letter country codes.</value>
        [DataMember(Name = "countryOfRegistration", EmitDefaultValue = true)]
        public string CountryOfRegistration { get; set; }

        /// <summary>
        /// The fund&#39;s currency.
        /// </summary>
        /// <value>The fund&#39;s currency.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The Fund&#39;s Investment Strategy short description.
        /// </summary>
        /// <value>The Fund&#39;s Investment Strategy short description.</value>
        [DataMember(Name = "descInfo", EmitDefaultValue = true)]
        public string DescInfo { get; set; }

        /// <summary>
        /// The fund of fund&#39;s id if applicable. Will provide plain Fund of Funds text.
        /// </summary>
        /// <value>The fund of fund&#39;s id if applicable. Will provide plain Fund of Funds text.</value>
        [DataMember(Name = "fundOfFundsId", EmitDefaultValue = true)]
        public string FundOfFundsId { get; set; }

        /// <summary>
        /// The fund&#39;s inception date in YYYY-MM-DD format.
        /// </summary>
        /// <value>The fund&#39;s inception date in YYYY-MM-DD format.</value>
        [DataMember(Name = "inceptionDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? InceptionDate { get; set; }

        /// <summary>
        /// The fund&#39;s investment strategy long description. Use &#x60;descInfo&#x60; if needing short description.
        /// </summary>
        /// <value>The fund&#39;s investment strategy long description. Use &#x60;descInfo&#x60; if needing short description.</value>
        [DataMember(Name = "insight", EmitDefaultValue = true)]
        public string Insight { get; set; }

        /// <summary>
        /// The Issuer Identifier.
        /// </summary>
        /// <value>The Issuer Identifier.</value>
        [DataMember(Name = "issuerId", EmitDefaultValue = true)]
        public string IssuerId { get; set; }

        /// <summary>
        /// The Issuer Name in proper format.
        /// </summary>
        /// <value>The Issuer Name in proper format.</value>
        [DataMember(Name = "issuerName", EmitDefaultValue = true)]
        public string IssuerName { get; set; }

        /// <summary>
        /// The legal structure of the fund, e.g. Open-Ended Fund, close-ended fund
        /// </summary>
        /// <value>The legal structure of the fund, e.g. Open-Ended Fund, close-ended fund</value>
        [DataMember(Name = "legalStructure", EmitDefaultValue = true)]
        public string LegalStructure { get; set; }

        /// <summary>
        /// The leverage factor of the fund.
        /// </summary>
        /// <value>The leverage factor of the fund.</value>
        [DataMember(Name = "leverageFactor", EmitDefaultValue = true)]
        public double? LeverageFactor { get; set; }

        /// <summary>
        /// Indicates whether the fund is leveraged, inverse, or neither in proper format.
        /// </summary>
        /// <value>Indicates whether the fund is leveraged, inverse, or neither in proper format.</value>
        [DataMember(Name = "leverageInverse", EmitDefaultValue = true)]
        public string LeverageInverse { get; set; }

        /// <summary>
        /// The Fund security&#39;s name in proper format.
        /// </summary>
        /// <value>The Fund security&#39;s name in proper format.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The NAV currency for the specified share class.
        /// </summary>
        /// <value>The NAV currency for the specified share class.</value>
        [DataMember(Name = "navCurrency", EmitDefaultValue = true)]
        public string NavCurrency { get; set; }

        /// <summary>
        /// The Fund&#39;s objective long description.
        /// </summary>
        /// <value>The Fund&#39;s objective long description.</value>
        [DataMember(Name = "objective", EmitDefaultValue = true)]
        public string Objective { get; set; }

        /// <summary>
        /// The fund&#39;s first available date for prices (NAV) in YYYY-MM-DD format. This can be used to fetch the first available price from FactSet. *NOTE: This is not the inception date of fund.*
        /// </summary>
        /// <value>The fund&#39;s first available date for prices (NAV) in YYYY-MM-DD format. This can be used to fetch the first available price from FactSet. *NOTE: This is not the inception date of fund.*</value>
        [DataMember(Name = "priceFirstDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PriceFirstDate { get; set; }

        /// <summary>
        /// The fund&#39;s most recent available date for prices (NAV) in YYYY-MM-DD format.
        /// </summary>
        /// <value>The fund&#39;s most recent available date for prices (NAV) in YYYY-MM-DD format.</value>
        [DataMember(Name = "priceRecentDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PriceRecentDate { get; set; }

        /// <summary>
        /// The Funds Share class type name in proper format.
        /// </summary>
        /// <value>The Funds Share class type name in proper format.</value>
        [DataMember(Name = "shrClass", EmitDefaultValue = true)]
        public string ShrClass { get; set; }

        /// <summary>
        /// Returns a binary indicator of whether the specified share class is currently active, where 1 is active and 0 is inactive.
        /// </summary>
        /// <value>Returns a binary indicator of whether the specified share class is currently active, where 1 is active and 0 is inactive.</value>
        [DataMember(Name = "shrClassActiveFlag", EmitDefaultValue = true)]
        public int? ShrClassActiveFlag { get; set; }

        /// <summary>
        /// Returns a binary indicator of whether the specified share class is actively managed, where 1 is active and 0 is inactive.
        /// </summary>
        /// <value>Returns a binary indicator of whether the specified share class is actively managed, where 1 is active and 0 is inactive.</value>
        [DataMember(Name = "shrClsActivelyManagedFlag", EmitDefaultValue = true)]
        public int? ShrClsActivelyManagedFlag { get; set; }

        /// <summary>
        /// The currency for the specified share class.
        /// </summary>
        /// <value>The currency for the specified share class.</value>
        [DataMember(Name = "shrClsCurrency", EmitDefaultValue = true)]
        public string ShrClsCurrency { get; set; }

        /// <summary>
        /// The specified share class&#39;s inception date in YYYY-MM-DD format.
        /// </summary>
        /// <value>The specified share class&#39;s inception date in YYYY-MM-DD format.</value>
        [DataMember(Name = "shrClsInceptDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ShrClsInceptDate { get; set; }

        /// <summary>
        /// The specified share class name for the fund in proper format.
        /// </summary>
        /// <value>The specified share class name for the fund in proper format.</value>
        [DataMember(Name = "shrClsName", EmitDefaultValue = true)]
        public string ShrClsName { get; set; }

        /// <summary>
        /// The Share class Termination Date in YYYY-MM-DD format. If still active, value will be null.
        /// </summary>
        /// <value>The Share class Termination Date in YYYY-MM-DD format. If still active, value will be null.</value>
        [DataMember(Name = "shrClsTermDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ShrClsTermDate { get; set; }

        /// <summary>
        /// The Termination Date in YYYY-MM-DD format. If still active, value will be null.
        /// </summary>
        /// <value>The Termination Date in YYYY-MM-DD format. If still active, value will be null.</value>
        [DataMember(Name = "terminationDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? TerminationDate { get; set; }

        /// <summary>
        /// The Type of Fund, e.g. Mutual Fund, Unit Investment Trust
        /// </summary>
        /// <value>The Type of Fund, e.g. Mutual Fund, Unit Investment Trust</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The URL of the Fund.
        /// </summary>
        /// <value>The URL of the Fund.</value>
        [DataMember(Name = "webSite", EmitDefaultValue = true)]
        public string WebSite { get; set; }

        /// <summary>
        /// A regulatory flag that shows if the fund can be marketed within all countries that are part of the European Union. Returns 1 for True to 0 for False.
        /// </summary>
        /// <value>A regulatory flag that shows if the fund can be marketed within all countries that are part of the European Union. Returns 1 for True to 0 for False.</value>
        [DataMember(Name = "ucitsCompliance", EmitDefaultValue = true)]
        public int? UcitsCompliance { get; set; }

        /// <summary>
        /// Determines whether the fund is regulated under the UCITS IV (Directive 2009/65/EC) or UCITS V (Directive 2014/91/EU)
        /// </summary>
        /// <value>Determines whether the fund is regulated under the UCITS IV (Directive 2009/65/EC) or UCITS V (Directive 2014/91/EU)</value>
        [DataMember(Name = "ucitsScheme", EmitDefaultValue = true)]
        public string UcitsScheme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Summaries {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  FsymEntityId: ").Append(FsymEntityId).Append("\n");
            sb.Append("  FsymRegionalId: ").Append(FsymRegionalId).Append("\n");
            sb.Append("  FsymTickerRegion: ").Append(FsymTickerRegion).Append("\n");
            sb.Append("  FsymUltimateParentId: ").Append(FsymUltimateParentId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  ActiveFlag: ").Append(ActiveFlag).Append("\n");
            sb.Append("  ActivelyManagedFlag: ").Append(ActivelyManagedFlag).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  CountryDomicile: ").Append(CountryDomicile).Append("\n");
            sb.Append("  CountryOfRegistration: ").Append(CountryOfRegistration).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DescInfo: ").Append(DescInfo).Append("\n");
            sb.Append("  FundOfFundsId: ").Append(FundOfFundsId).Append("\n");
            sb.Append("  InceptionDate: ").Append(InceptionDate).Append("\n");
            sb.Append("  Insight: ").Append(Insight).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  LegalStructure: ").Append(LegalStructure).Append("\n");
            sb.Append("  LeverageFactor: ").Append(LeverageFactor).Append("\n");
            sb.Append("  LeverageInverse: ").Append(LeverageInverse).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NavCurrency: ").Append(NavCurrency).Append("\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  PriceFirstDate: ").Append(PriceFirstDate).Append("\n");
            sb.Append("  PriceRecentDate: ").Append(PriceRecentDate).Append("\n");
            sb.Append("  ShrClass: ").Append(ShrClass).Append("\n");
            sb.Append("  ShrClassActiveFlag: ").Append(ShrClassActiveFlag).Append("\n");
            sb.Append("  ShrClsActivelyManagedFlag: ").Append(ShrClsActivelyManagedFlag).Append("\n");
            sb.Append("  ShrClsCurrency: ").Append(ShrClsCurrency).Append("\n");
            sb.Append("  ShrClsInceptDate: ").Append(ShrClsInceptDate).Append("\n");
            sb.Append("  ShrClsName: ").Append(ShrClsName).Append("\n");
            sb.Append("  ShrClsTermDate: ").Append(ShrClsTermDate).Append("\n");
            sb.Append("  TerminationDate: ").Append(TerminationDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WebSite: ").Append(WebSite).Append("\n");
            sb.Append("  UcitsCompliance: ").Append(UcitsCompliance).Append("\n");
            sb.Append("  UcitsScheme: ").Append(UcitsScheme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Summaries);
        }

        /// <summary>
        /// Returns true if Summaries instances are equal
        /// </summary>
        /// <param name="input">Instance of Summaries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Summaries input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.FsymEntityId == input.FsymEntityId ||
                    (this.FsymEntityId != null &&
                    this.FsymEntityId.Equals(input.FsymEntityId))
                ) && 
                (
                    this.FsymRegionalId == input.FsymRegionalId ||
                    (this.FsymRegionalId != null &&
                    this.FsymRegionalId.Equals(input.FsymRegionalId))
                ) && 
                (
                    this.FsymTickerRegion == input.FsymTickerRegion ||
                    (this.FsymTickerRegion != null &&
                    this.FsymTickerRegion.Equals(input.FsymTickerRegion))
                ) && 
                (
                    this.FsymUltimateParentId == input.FsymUltimateParentId ||
                    (this.FsymUltimateParentId != null &&
                    this.FsymUltimateParentId.Equals(input.FsymUltimateParentId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.ActiveFlag == input.ActiveFlag ||
                    (this.ActiveFlag != null &&
                    this.ActiveFlag.Equals(input.ActiveFlag))
                ) && 
                (
                    this.ActivelyManagedFlag == input.ActivelyManagedFlag ||
                    (this.ActivelyManagedFlag != null &&
                    this.ActivelyManagedFlag.Equals(input.ActivelyManagedFlag))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.CountryDomicile == input.CountryDomicile ||
                    (this.CountryDomicile != null &&
                    this.CountryDomicile.Equals(input.CountryDomicile))
                ) && 
                (
                    this.CountryOfRegistration == input.CountryOfRegistration ||
                    (this.CountryOfRegistration != null &&
                    this.CountryOfRegistration.Equals(input.CountryOfRegistration))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.DescInfo == input.DescInfo ||
                    (this.DescInfo != null &&
                    this.DescInfo.Equals(input.DescInfo))
                ) && 
                (
                    this.FundOfFundsId == input.FundOfFundsId ||
                    (this.FundOfFundsId != null &&
                    this.FundOfFundsId.Equals(input.FundOfFundsId))
                ) && 
                (
                    this.InceptionDate == input.InceptionDate ||
                    (this.InceptionDate != null &&
                    this.InceptionDate.Equals(input.InceptionDate))
                ) && 
                (
                    this.Insight == input.Insight ||
                    (this.Insight != null &&
                    this.Insight.Equals(input.Insight))
                ) && 
                (
                    this.IssuerId == input.IssuerId ||
                    (this.IssuerId != null &&
                    this.IssuerId.Equals(input.IssuerId))
                ) && 
                (
                    this.IssuerName == input.IssuerName ||
                    (this.IssuerName != null &&
                    this.IssuerName.Equals(input.IssuerName))
                ) && 
                (
                    this.LegalStructure == input.LegalStructure ||
                    (this.LegalStructure != null &&
                    this.LegalStructure.Equals(input.LegalStructure))
                ) && 
                (
                    this.LeverageFactor == input.LeverageFactor ||
                    (this.LeverageFactor != null &&
                    this.LeverageFactor.Equals(input.LeverageFactor))
                ) && 
                (
                    this.LeverageInverse == input.LeverageInverse ||
                    (this.LeverageInverse != null &&
                    this.LeverageInverse.Equals(input.LeverageInverse))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NavCurrency == input.NavCurrency ||
                    (this.NavCurrency != null &&
                    this.NavCurrency.Equals(input.NavCurrency))
                ) && 
                (
                    this.Objective == input.Objective ||
                    (this.Objective != null &&
                    this.Objective.Equals(input.Objective))
                ) && 
                (
                    this.PriceFirstDate == input.PriceFirstDate ||
                    (this.PriceFirstDate != null &&
                    this.PriceFirstDate.Equals(input.PriceFirstDate))
                ) && 
                (
                    this.PriceRecentDate == input.PriceRecentDate ||
                    (this.PriceRecentDate != null &&
                    this.PriceRecentDate.Equals(input.PriceRecentDate))
                ) && 
                (
                    this.ShrClass == input.ShrClass ||
                    (this.ShrClass != null &&
                    this.ShrClass.Equals(input.ShrClass))
                ) && 
                (
                    this.ShrClassActiveFlag == input.ShrClassActiveFlag ||
                    (this.ShrClassActiveFlag != null &&
                    this.ShrClassActiveFlag.Equals(input.ShrClassActiveFlag))
                ) && 
                (
                    this.ShrClsActivelyManagedFlag == input.ShrClsActivelyManagedFlag ||
                    (this.ShrClsActivelyManagedFlag != null &&
                    this.ShrClsActivelyManagedFlag.Equals(input.ShrClsActivelyManagedFlag))
                ) && 
                (
                    this.ShrClsCurrency == input.ShrClsCurrency ||
                    (this.ShrClsCurrency != null &&
                    this.ShrClsCurrency.Equals(input.ShrClsCurrency))
                ) && 
                (
                    this.ShrClsInceptDate == input.ShrClsInceptDate ||
                    (this.ShrClsInceptDate != null &&
                    this.ShrClsInceptDate.Equals(input.ShrClsInceptDate))
                ) && 
                (
                    this.ShrClsName == input.ShrClsName ||
                    (this.ShrClsName != null &&
                    this.ShrClsName.Equals(input.ShrClsName))
                ) && 
                (
                    this.ShrClsTermDate == input.ShrClsTermDate ||
                    (this.ShrClsTermDate != null &&
                    this.ShrClsTermDate.Equals(input.ShrClsTermDate))
                ) && 
                (
                    this.TerminationDate == input.TerminationDate ||
                    (this.TerminationDate != null &&
                    this.TerminationDate.Equals(input.TerminationDate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.WebSite == input.WebSite ||
                    (this.WebSite != null &&
                    this.WebSite.Equals(input.WebSite))
                ) && 
                (
                    this.UcitsCompliance == input.UcitsCompliance ||
                    (this.UcitsCompliance != null &&
                    this.UcitsCompliance.Equals(input.UcitsCompliance))
                ) && 
                (
                    this.UcitsScheme == input.UcitsScheme ||
                    (this.UcitsScheme != null &&
                    this.UcitsScheme.Equals(input.UcitsScheme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.FsymEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymEntityId.GetHashCode();
                }
                if (this.FsymRegionalId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymRegionalId.GetHashCode();
                }
                if (this.FsymTickerRegion != null)
                {
                    hashCode = (hashCode * 59) + this.FsymTickerRegion.GetHashCode();
                }
                if (this.FsymUltimateParentId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymUltimateParentId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.ActiveFlag != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveFlag.GetHashCode();
                }
                if (this.ActivelyManagedFlag != null)
                {
                    hashCode = (hashCode * 59) + this.ActivelyManagedFlag.GetHashCode();
                }
                if (this.Brand != null)
                {
                    hashCode = (hashCode * 59) + this.Brand.GetHashCode();
                }
                if (this.CountryDomicile != null)
                {
                    hashCode = (hashCode * 59) + this.CountryDomicile.GetHashCode();
                }
                if (this.CountryOfRegistration != null)
                {
                    hashCode = (hashCode * 59) + this.CountryOfRegistration.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.DescInfo != null)
                {
                    hashCode = (hashCode * 59) + this.DescInfo.GetHashCode();
                }
                if (this.FundOfFundsId != null)
                {
                    hashCode = (hashCode * 59) + this.FundOfFundsId.GetHashCode();
                }
                if (this.InceptionDate != null)
                {
                    hashCode = (hashCode * 59) + this.InceptionDate.GetHashCode();
                }
                if (this.Insight != null)
                {
                    hashCode = (hashCode * 59) + this.Insight.GetHashCode();
                }
                if (this.IssuerId != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerId.GetHashCode();
                }
                if (this.IssuerName != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerName.GetHashCode();
                }
                if (this.LegalStructure != null)
                {
                    hashCode = (hashCode * 59) + this.LegalStructure.GetHashCode();
                }
                if (this.LeverageFactor != null)
                {
                    hashCode = (hashCode * 59) + this.LeverageFactor.GetHashCode();
                }
                if (this.LeverageInverse != null)
                {
                    hashCode = (hashCode * 59) + this.LeverageInverse.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NavCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.NavCurrency.GetHashCode();
                }
                if (this.Objective != null)
                {
                    hashCode = (hashCode * 59) + this.Objective.GetHashCode();
                }
                if (this.PriceFirstDate != null)
                {
                    hashCode = (hashCode * 59) + this.PriceFirstDate.GetHashCode();
                }
                if (this.PriceRecentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PriceRecentDate.GetHashCode();
                }
                if (this.ShrClass != null)
                {
                    hashCode = (hashCode * 59) + this.ShrClass.GetHashCode();
                }
                if (this.ShrClassActiveFlag != null)
                {
                    hashCode = (hashCode * 59) + this.ShrClassActiveFlag.GetHashCode();
                }
                if (this.ShrClsActivelyManagedFlag != null)
                {
                    hashCode = (hashCode * 59) + this.ShrClsActivelyManagedFlag.GetHashCode();
                }
                if (this.ShrClsCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.ShrClsCurrency.GetHashCode();
                }
                if (this.ShrClsInceptDate != null)
                {
                    hashCode = (hashCode * 59) + this.ShrClsInceptDate.GetHashCode();
                }
                if (this.ShrClsName != null)
                {
                    hashCode = (hashCode * 59) + this.ShrClsName.GetHashCode();
                }
                if (this.ShrClsTermDate != null)
                {
                    hashCode = (hashCode * 59) + this.ShrClsTermDate.GetHashCode();
                }
                if (this.TerminationDate != null)
                {
                    hashCode = (hashCode * 59) + this.TerminationDate.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.WebSite != null)
                {
                    hashCode = (hashCode * 59) + this.WebSite.GetHashCode();
                }
                if (this.UcitsCompliance != null)
                {
                    hashCode = (hashCode * 59) + this.UcitsCompliance.GetHashCode();
                }
                if (this.UcitsScheme != null)
                {
                    hashCode = (hashCode * 59) + this.UcitsScheme.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
