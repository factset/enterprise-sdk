/*
 * FactSet Funds API
 *
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFunds.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFunds.Model
{
    /// <summary>
    /// Criteria to filter by
    /// </summary>
    [DataContract(Name = "Criterion")]
    public partial class Criterion : IEquatable<Criterion>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = false)]
        public Operator Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Criterion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Criterion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Criterion" /> class.
        /// </summary>
        /// <param name="fieldName">The field name to be used in the filter criteria. For custom content sets, display name should be used as a field name. The inputField must be a member of the contentSet specified above. (required).</param>
        /// <param name="_operator">_operator (required).</param>
        /// <param name="values">The value to be used in the filter criteria. (required).</param>
        public Criterion(string fieldName, Operator _operator, List<string> values)
        {
            // to ensure "fieldName" is required (not null)
            if (fieldName == null) {
                throw new ArgumentNullException("fieldName is a required property for Criterion and cannot be null");
            }
            this.FieldName = fieldName;
            this.Operator = _operator;
            // to ensure "values" is required (not null)
            if (values == null) {
                throw new ArgumentNullException("values is a required property for Criterion and cannot be null");
            }
            this.Values = values;
        }

        /// <summary>
        /// The field name to be used in the filter criteria. For custom content sets, display name should be used as a field name. The inputField must be a member of the contentSet specified above.
        /// </summary>
        /// <value>The field name to be used in the filter criteria. For custom content sets, display name should be used as a field name. The inputField must be a member of the contentSet specified above.</value>
        [DataMember(Name = "fieldName", IsRequired = true, EmitDefaultValue = false)]
        public string FieldName { get; set; }

        /// <summary>
        /// The value to be used in the filter criteria.
        /// </summary>
        /// <value>The value to be used in the filter criteria.</value>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Criterion {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Criterion);
        }

        /// <summary>
        /// Returns true if Criterion instances are equal
        /// </summary>
        /// <param name="input">Instance of Criterion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Criterion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.Operator == input.Operator ||
                    this.Operator.Equals(input.Operator)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                {
                    hashCode = (hashCode * 59) + this.FieldName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Operator.GetHashCode();
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
