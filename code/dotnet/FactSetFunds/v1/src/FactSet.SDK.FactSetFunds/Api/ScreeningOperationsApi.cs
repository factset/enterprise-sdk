/*
 * FactSet Funds API
 *
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetFunds.Client;
using FactSet.SDK.FactSetFunds.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetFunds.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScreeningOperationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new custom content set with required fields from the default content sets.
        /// </summary>
        /// <remarks>
        /// Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The &#x60;/screener/content-sets&#x60; and &#x60;/screener/fields&#x60; endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContentSetRequest">Request object for create content-set endpoint.</param>
        /// <returns>CreateContentSetResponse</returns>
        CreateContentSetResponse CreateContentSet(CreateContentSetRequest createContentSetRequest);

        /// <summary>
        /// Create a new custom content set with required fields from the default content sets.
        /// </summary>
        /// <remarks>
        /// Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The &#x60;/screener/content-sets&#x60; and &#x60;/screener/fields&#x60; endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContentSetRequest">Request object for create content-set endpoint.</param>
        /// <returns>ApiResponse of CreateContentSetResponse</returns>
        ApiResponse<CreateContentSetResponse> CreateContentSetWithHttpInfo(CreateContentSetRequest createContentSetRequest);
        /// <summary>
        /// Delete a custom content set.
        /// </summary>
        /// <remarks>
        /// Delete a custom content set by providing the content set name.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the content set to be deleted.</param>
        /// <returns>void</returns>
        void DeleteContentSet(string name);

        /// <summary>
        /// Delete a custom content set.
        /// </summary>
        /// <remarks>
        /// Delete a custom content set by providing the content set name.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the content set to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContentSetWithHttpInfo(string name);
        /// <summary>
        /// Get the content sets that are permissioned for the user.
        /// </summary>
        /// <remarks>
        /// Gets the content sets that are permissioned for the user. for example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ContentSetsResponse</returns>
        ContentSetsResponse GetContentSets();

        /// <summary>
        /// Get the content sets that are permissioned for the user.
        /// </summary>
        /// <remarks>
        /// Gets the content sets that are permissioned for the user. for example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ContentSetsResponse</returns>
        ApiResponse<ContentSetsResponse> GetContentSetsWithHttpInfo();
        /// <summary>
        /// Returns the number of records for a given field spread across all possible values.
        /// </summary>
        /// <remarks>
        /// Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinctCountRequest">Request object for &#x60;distinct-count&#x60;.</param>
        /// <returns>DistinctCountResponse</returns>
        DistinctCountResponse GetDistinctCount(DistinctCountRequest distinctCountRequest);

        /// <summary>
        /// Returns the number of records for a given field spread across all possible values.
        /// </summary>
        /// <remarks>
        /// Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinctCountRequest">Request object for &#x60;distinct-count&#x60;.</param>
        /// <returns>ApiResponse of DistinctCountResponse</returns>
        ApiResponse<DistinctCountResponse> GetDistinctCountWithHttpInfo(DistinctCountRequest distinctCountRequest);
        /// <summary>
        /// Get the list of fields available for given content set.
        /// </summary>
        /// <remarks>
        /// Gets the list of fields available for a given content set (or combination of content sets). For example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc.  Both default and custom content sets are supported. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentSets">The content sets from which the fields are requested. For example: &#x60;Factset Fundamentals&#x60;,  &#x60;Factset Funds&#x60;, etc. </param>
        /// <returns>FieldsResponse</returns>
        FieldsResponse GetFields(List<string> contentSets);

        /// <summary>
        /// Get the list of fields available for given content set.
        /// </summary>
        /// <remarks>
        /// Gets the list of fields available for a given content set (or combination of content sets). For example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc.  Both default and custom content sets are supported. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentSets">The content sets from which the fields are requested. For example: &#x60;Factset Fundamentals&#x60;,  &#x60;Factset Funds&#x60;, etc. </param>
        /// <returns>ApiResponse of FieldsResponse</returns>
        ApiResponse<FieldsResponse> GetFieldsWithHttpInfo(List<string> contentSets);
        /// <summary>
        /// Returns all the records that match the given criteria.
        /// </summary>
        /// <remarks>
        /// Returns the records that match the given criteria. The request object for &#x60;Search&#x60; allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses &#x60;displayName&#x60;. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest">Request object for &#x60;Search&#x60;.</param>
        /// <returns>SearchResponse</returns>
        SearchResponse GetScreenerData(SearchRequest searchRequest);

        /// <summary>
        /// Returns all the records that match the given criteria.
        /// </summary>
        /// <remarks>
        /// Returns the records that match the given criteria. The request object for &#x60;Search&#x60; allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses &#x60;displayName&#x60;. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest">Request object for &#x60;Search&#x60;.</param>
        /// <returns>ApiResponse of SearchResponse</returns>
        ApiResponse<SearchResponse> GetScreenerDataWithHttpInfo(SearchRequest searchRequest);
        /// <summary>
        /// Returns the statistics and histogram data for a given field within the specified content sets.
        /// </summary>
        /// <remarks>
        /// Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsRequest">Request object for &#x60;Statistics&#x60;.</param>
        /// <returns>StatisticsResponse</returns>
        StatisticsResponse GetStatistics(StatisticsRequest statisticsRequest);

        /// <summary>
        /// Returns the statistics and histogram data for a given field within the specified content sets.
        /// </summary>
        /// <remarks>
        /// Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsRequest">Request object for &#x60;Statistics&#x60;.</param>
        /// <returns>ApiResponse of StatisticsResponse</returns>
        ApiResponse<StatisticsResponse> GetStatisticsWithHttpInfo(StatisticsRequest statisticsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScreeningOperationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new custom content set with required fields from the default content sets.
        /// </summary>
        /// <remarks>
        /// Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The &#x60;/screener/content-sets&#x60; and &#x60;/screener/fields&#x60; endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContentSetRequest">Request object for create content-set endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateContentSetResponse</returns>
        System.Threading.Tasks.Task<CreateContentSetResponse> CreateContentSetAsync(CreateContentSetRequest createContentSetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new custom content set with required fields from the default content sets.
        /// </summary>
        /// <remarks>
        /// Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The &#x60;/screener/content-sets&#x60; and &#x60;/screener/fields&#x60; endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContentSetRequest">Request object for create content-set endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateContentSetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateContentSetResponse>> CreateContentSetWithHttpInfoAsync(CreateContentSetRequest createContentSetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a custom content set.
        /// </summary>
        /// <remarks>
        /// Delete a custom content set by providing the content set name.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the content set to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContentSetAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a custom content set.
        /// </summary>
        /// <remarks>
        /// Delete a custom content set by providing the content set name.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the content set to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContentSetWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the content sets that are permissioned for the user.
        /// </summary>
        /// <remarks>
        /// Gets the content sets that are permissioned for the user. for example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentSetsResponse</returns>
        System.Threading.Tasks.Task<ContentSetsResponse> GetContentSetsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the content sets that are permissioned for the user.
        /// </summary>
        /// <remarks>
        /// Gets the content sets that are permissioned for the user. for example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentSetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentSetsResponse>> GetContentSetsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the number of records for a given field spread across all possible values.
        /// </summary>
        /// <remarks>
        /// Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinctCountRequest">Request object for &#x60;distinct-count&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DistinctCountResponse</returns>
        System.Threading.Tasks.Task<DistinctCountResponse> GetDistinctCountAsync(DistinctCountRequest distinctCountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the number of records for a given field spread across all possible values.
        /// </summary>
        /// <remarks>
        /// Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinctCountRequest">Request object for &#x60;distinct-count&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DistinctCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctCountResponse>> GetDistinctCountWithHttpInfoAsync(DistinctCountRequest distinctCountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of fields available for given content set.
        /// </summary>
        /// <remarks>
        /// Gets the list of fields available for a given content set (or combination of content sets). For example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc.  Both default and custom content sets are supported. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentSets">The content sets from which the fields are requested. For example: &#x60;Factset Fundamentals&#x60;,  &#x60;Factset Funds&#x60;, etc. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FieldsResponse</returns>
        System.Threading.Tasks.Task<FieldsResponse> GetFieldsAsync(List<string> contentSets, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of fields available for given content set.
        /// </summary>
        /// <remarks>
        /// Gets the list of fields available for a given content set (or combination of content sets). For example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc.  Both default and custom content sets are supported. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentSets">The content sets from which the fields are requested. For example: &#x60;Factset Fundamentals&#x60;,  &#x60;Factset Funds&#x60;, etc. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldsResponse>> GetFieldsWithHttpInfoAsync(List<string> contentSets, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns all the records that match the given criteria.
        /// </summary>
        /// <remarks>
        /// Returns the records that match the given criteria. The request object for &#x60;Search&#x60; allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses &#x60;displayName&#x60;. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest">Request object for &#x60;Search&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        System.Threading.Tasks.Task<SearchResponse> GetScreenerDataAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all the records that match the given criteria.
        /// </summary>
        /// <remarks>
        /// Returns the records that match the given criteria. The request object for &#x60;Search&#x60; allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses &#x60;displayName&#x60;. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest">Request object for &#x60;Search&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResponse>> GetScreenerDataWithHttpInfoAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the statistics and histogram data for a given field within the specified content sets.
        /// </summary>
        /// <remarks>
        /// Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsRequest">Request object for &#x60;Statistics&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsResponse</returns>
        System.Threading.Tasks.Task<StatisticsResponse> GetStatisticsAsync(StatisticsRequest statisticsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the statistics and histogram data for a given field within the specified content sets.
        /// </summary>
        /// <remarks>
        /// Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsRequest">Request object for &#x60;Statistics&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticsResponse>> GetStatisticsWithHttpInfoAsync(StatisticsRequest statisticsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScreeningOperationsApi : IScreeningOperationsApiSync, IScreeningOperationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScreeningOperationsApi : IScreeningOperationsApi
    {
        private FactSet.SDK.FactSetFunds.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateContentSetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(CreateContentSetResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteContentSetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContentSetsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ContentSetsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponseScreener) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetDistinctCountResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DistinctCountResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFieldsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FieldsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetScreenerDataResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SearchResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetStatisticsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(StatisticsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreeningOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScreeningOperationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreeningOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScreeningOperationsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetFunds.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetFunds.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetFunds.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetFunds.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetFunds.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetFunds.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreeningOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScreeningOperationsApi(FactSet.SDK.FactSetFunds.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetFunds.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetFunds.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetFunds.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetFunds.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetFunds.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreeningOperationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScreeningOperationsApi(FactSet.SDK.FactSetFunds.Client.ISynchronousClient client, FactSet.SDK.FactSetFunds.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetFunds.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetFunds.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetFunds.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetFunds.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetFunds.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetFunds.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new custom content set with required fields from the default content sets. Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The &#x60;/screener/content-sets&#x60; and &#x60;/screener/fields&#x60; endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContentSetRequest">Request object for create content-set endpoint.</param>
        /// <returns>CreateContentSetResponse</returns>
        public CreateContentSetResponse CreateContentSet(CreateContentSetRequest createContentSetRequest)
        {
            var localVarResponse = CreateContentSetWithHttpInfo(createContentSetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom content set with required fields from the default content sets. Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The &#x60;/screener/content-sets&#x60; and &#x60;/screener/fields&#x60; endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContentSetRequest">Request object for create content-set endpoint.</param>
        /// <returns>ApiResponse of CreateContentSetResponse</returns>
        public ApiResponse<CreateContentSetResponse> CreateContentSetWithHttpInfo(CreateContentSetRequest createContentSetRequest)
        {
            // verify the required parameter 'createContentSetRequest' is set
            if (createContentSetRequest == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'createContentSetRequest' when calling ScreeningOperationsApi->CreateContentSet");
            }

            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createContentSetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateContentSetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CreateContentSetResponse>("/factset-funds/v1/screener/content-sets/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContentSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom content set with required fields from the default content sets. Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The &#x60;/screener/content-sets&#x60; and &#x60;/screener/fields&#x60; endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContentSetRequest">Request object for create content-set endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateContentSetResponse</returns>
        public async System.Threading.Tasks.Task<CreateContentSetResponse>CreateContentSetAsync(CreateContentSetRequest createContentSetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateContentSetWithHttpInfoAsync(createContentSetRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom content set with required fields from the default content sets. Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The &#x60;/screener/content-sets&#x60; and &#x60;/screener/fields&#x60; endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContentSetRequest">Request object for create content-set endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateContentSetResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CreateContentSetResponse>> CreateContentSetWithHttpInfoAsync(CreateContentSetRequest createContentSetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createContentSetRequest' is set
            if (createContentSetRequest == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'createContentSetRequest' when calling ScreeningOperationsApi->CreateContentSet");
            }


            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createContentSetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateContentSetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateContentSetResponse>("/factset-funds/v1/screener/content-sets/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContentSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a custom content set. Delete a custom content set by providing the content set name.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the content set to be deleted.</param>
        /// <returns>void</returns>
        public void DeleteContentSet(string name)
        {
            DeleteContentSetWithHttpInfo(name);
        }

        /// <summary>
        /// Delete a custom content set. Delete a custom content set by providing the content set name.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the content set to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContentSetWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'name' when calling ScreeningOperationsApi->DeleteContentSet");
            }

            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.FactSetFunds.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteContentSetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/factset-funds/v1/screener/content-sets/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContentSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a custom content set. Delete a custom content set by providing the content set name.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the content set to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContentSetAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteContentSetWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a custom content set. Delete a custom content set by providing the content set name.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the content set to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContentSetWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'name' when calling ScreeningOperationsApi->DeleteContentSet");
            }


            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.FactSetFunds.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteContentSetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/factset-funds/v1/screener/content-sets/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContentSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the content sets that are permissioned for the user. Gets the content sets that are permissioned for the user. for example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ContentSetsResponse</returns>
        public ContentSetsResponse GetContentSets()
        {
            var localVarResponse = GetContentSetsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content sets that are permissioned for the user. Gets the content sets that are permissioned for the user. for example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ContentSetsResponse</returns>
        public ApiResponse<ContentSetsResponse> GetContentSetsWithHttpInfo()
        {
            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContentSetsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ContentSetsResponse>("/factset-funds/v1/screener/content-sets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContentSets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the content sets that are permissioned for the user. Gets the content sets that are permissioned for the user. for example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentSetsResponse</returns>
        public async System.Threading.Tasks.Task<ContentSetsResponse>GetContentSetsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContentSetsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content sets that are permissioned for the user. Gets the content sets that are permissioned for the user. for example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentSetsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ContentSetsResponse>> GetContentSetsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContentSetsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentSetsResponse>("/factset-funds/v1/screener/content-sets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContentSets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the number of records for a given field spread across all possible values. Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinctCountRequest">Request object for &#x60;distinct-count&#x60;.</param>
        /// <returns>DistinctCountResponse</returns>
        public DistinctCountResponse GetDistinctCount(DistinctCountRequest distinctCountRequest)
        {
            var localVarResponse = GetDistinctCountWithHttpInfo(distinctCountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the number of records for a given field spread across all possible values. Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinctCountRequest">Request object for &#x60;distinct-count&#x60;.</param>
        /// <returns>ApiResponse of DistinctCountResponse</returns>
        public ApiResponse<DistinctCountResponse> GetDistinctCountWithHttpInfo(DistinctCountRequest distinctCountRequest)
        {
            // verify the required parameter 'distinctCountRequest' is set
            if (distinctCountRequest == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'distinctCountRequest' when calling ScreeningOperationsApi->GetDistinctCount");
            }

            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = distinctCountRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetDistinctCountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            DistinctCountResponse>("/factset-funds/v1/screener/distinct-count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistinctCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the number of records for a given field spread across all possible values. Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinctCountRequest">Request object for &#x60;distinct-count&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DistinctCountResponse</returns>
        public async System.Threading.Tasks.Task<DistinctCountResponse>GetDistinctCountAsync(DistinctCountRequest distinctCountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetDistinctCountWithHttpInfoAsync(distinctCountRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the number of records for a given field spread across all possible values. Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinctCountRequest">Request object for &#x60;distinct-count&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DistinctCountResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DistinctCountResponse>> GetDistinctCountWithHttpInfoAsync(DistinctCountRequest distinctCountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'distinctCountRequest' is set
            if (distinctCountRequest == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'distinctCountRequest' when calling ScreeningOperationsApi->GetDistinctCount");
            }


            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = distinctCountRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetDistinctCountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DistinctCountResponse>("/factset-funds/v1/screener/distinct-count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistinctCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of fields available for given content set. Gets the list of fields available for a given content set (or combination of content sets). For example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc.  Both default and custom content sets are supported. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentSets">The content sets from which the fields are requested. For example: &#x60;Factset Fundamentals&#x60;,  &#x60;Factset Funds&#x60;, etc. </param>
        /// <returns>FieldsResponse</returns>
        public FieldsResponse GetFields(List<string> contentSets)
        {
            var localVarResponse = GetFieldsWithHttpInfo(contentSets);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of fields available for given content set. Gets the list of fields available for a given content set (or combination of content sets). For example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc.  Both default and custom content sets are supported. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentSets">The content sets from which the fields are requested. For example: &#x60;Factset Fundamentals&#x60;,  &#x60;Factset Funds&#x60;, etc. </param>
        /// <returns>ApiResponse of FieldsResponse</returns>
        public ApiResponse<FieldsResponse> GetFieldsWithHttpInfo(List<string> contentSets)
        {
            // verify the required parameter 'contentSets' is set
            if (contentSets == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'contentSets' when calling ScreeningOperationsApi->GetFields");
            }

            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFunds.Client.ClientUtils.ParameterToMultiMap("multi", "contentSets", contentSets));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FieldsResponse>("/factset-funds/v1/screener/fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the list of fields available for given content set. Gets the list of fields available for a given content set (or combination of content sets). For example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc.  Both default and custom content sets are supported. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentSets">The content sets from which the fields are requested. For example: &#x60;Factset Fundamentals&#x60;,  &#x60;Factset Funds&#x60;, etc. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FieldsResponse</returns>
        public async System.Threading.Tasks.Task<FieldsResponse>GetFieldsAsync(List<string> contentSets, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFieldsWithHttpInfoAsync(contentSets, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of fields available for given content set. Gets the list of fields available for a given content set (or combination of content sets). For example: &#x60;Factset Fundamentals&#x60;, &#x60;Factset Funds&#x60;, etc.  Both default and custom content sets are supported. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentSets">The content sets from which the fields are requested. For example: &#x60;Factset Fundamentals&#x60;,  &#x60;Factset Funds&#x60;, etc. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FieldsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FieldsResponse>> GetFieldsWithHttpInfoAsync(List<string> contentSets, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentSets' is set
            if (contentSets == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'contentSets' when calling ScreeningOperationsApi->GetFields");
            }


            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFunds.Client.ClientUtils.ParameterToMultiMap("multi", "contentSets", contentSets));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FieldsResponse>("/factset-funds/v1/screener/fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all the records that match the given criteria. Returns the records that match the given criteria. The request object for &#x60;Search&#x60; allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses &#x60;displayName&#x60;. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest">Request object for &#x60;Search&#x60;.</param>
        /// <returns>SearchResponse</returns>
        public SearchResponse GetScreenerData(SearchRequest searchRequest)
        {
            var localVarResponse = GetScreenerDataWithHttpInfo(searchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the records that match the given criteria. Returns the records that match the given criteria. The request object for &#x60;Search&#x60; allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses &#x60;displayName&#x60;. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest">Request object for &#x60;Search&#x60;.</param>
        /// <returns>ApiResponse of SearchResponse</returns>
        public ApiResponse<SearchResponse> GetScreenerDataWithHttpInfo(SearchRequest searchRequest)
        {
            // verify the required parameter 'searchRequest' is set
            if (searchRequest == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'searchRequest' when calling ScreeningOperationsApi->GetScreenerData");
            }

            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = searchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetScreenerDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SearchResponse>("/factset-funds/v1/screener/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScreenerData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns all the records that match the given criteria. Returns the records that match the given criteria. The request object for &#x60;Search&#x60; allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses &#x60;displayName&#x60;. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest">Request object for &#x60;Search&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        public async System.Threading.Tasks.Task<SearchResponse>GetScreenerDataAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetScreenerDataWithHttpInfoAsync(searchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the records that match the given criteria. Returns the records that match the given criteria. The request object for &#x60;Search&#x60; allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses &#x60;displayName&#x60;. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest">Request object for &#x60;Search&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SearchResponse>> GetScreenerDataWithHttpInfoAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchRequest' is set
            if (searchRequest == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'searchRequest' when calling ScreeningOperationsApi->GetScreenerData");
            }


            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = searchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetScreenerDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResponse>("/factset-funds/v1/screener/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScreenerData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the statistics and histogram data for a given field within the specified content sets. Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsRequest">Request object for &#x60;Statistics&#x60;.</param>
        /// <returns>StatisticsResponse</returns>
        public StatisticsResponse GetStatistics(StatisticsRequest statisticsRequest)
        {
            var localVarResponse = GetStatisticsWithHttpInfo(statisticsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the statistics and histogram data for a given field within the specified content sets. Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsRequest">Request object for &#x60;Statistics&#x60;.</param>
        /// <returns>ApiResponse of StatisticsResponse</returns>
        public ApiResponse<StatisticsResponse> GetStatisticsWithHttpInfo(StatisticsRequest statisticsRequest)
        {
            // verify the required parameter 'statisticsRequest' is set
            if (statisticsRequest == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'statisticsRequest' when calling ScreeningOperationsApi->GetStatistics");
            }

            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = statisticsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStatisticsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            StatisticsResponse>("/factset-funds/v1/screener/statistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the statistics and histogram data for a given field within the specified content sets. Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsRequest">Request object for &#x60;Statistics&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsResponse</returns>
        public async System.Threading.Tasks.Task<StatisticsResponse>GetStatisticsAsync(StatisticsRequest statisticsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStatisticsWithHttpInfoAsync(statisticsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the statistics and histogram data for a given field within the specified content sets. Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsRequest">Request object for &#x60;Statistics&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<StatisticsResponse>> GetStatisticsWithHttpInfoAsync(StatisticsRequest statisticsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'statisticsRequest' is set
            if (statisticsRequest == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'statisticsRequest' when calling ScreeningOperationsApi->GetStatistics");
            }


            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = statisticsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStatisticsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatisticsResponse>("/factset-funds/v1/screener/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
