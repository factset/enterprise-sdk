/*
 * FactSet Funds API
 *
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetFunds.Client;
using FactSet.SDK.FactSetFunds.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetFunds.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupHoldingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get group holdings for a specific date and group.
        /// </summary>
        /// <remarks>
        /// Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="asOfDate">As of date for historical group holdings in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period.  (optional)</param>
        /// <param name="group">Controls the group of the data returned.   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent        (optional, default to CNTRY)</param>
        /// <returns>GroupHoldingsResponse</returns>
        GroupHoldingsResponse GetGroupHoldings(List<string> ids, string asOfDate = default(string), string group = default(string));

        /// <summary>
        /// Get group holdings for a specific date and group.
        /// </summary>
        /// <remarks>
        /// Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="asOfDate">As of date for historical group holdings in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period.  (optional)</param>
        /// <param name="group">Controls the group of the data returned.   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent        (optional, default to CNTRY)</param>
        /// <returns>ApiResponse of GroupHoldingsResponse</returns>
        ApiResponse<GroupHoldingsResponse> GetGroupHoldingsWithHttpInfo(List<string> ids, string asOfDate = default(string), string group = default(string));
        /// <summary>
        /// Get group holdings for a specific date and group.
        /// </summary>
        /// <remarks>
        /// Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupHoldingsRequest">The Group Holdings request body, allowing the user to specify a list of ids, date, and group.</param>
        /// <returns>GroupHoldingsResponse</returns>
        GroupHoldingsResponse GetGroupHoldingsForList(GroupHoldingsRequest groupHoldingsRequest);

        /// <summary>
        /// Get group holdings for a specific date and group.
        /// </summary>
        /// <remarks>
        /// Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupHoldingsRequest">The Group Holdings request body, allowing the user to specify a list of ids, date, and group.</param>
        /// <returns>ApiResponse of GroupHoldingsResponse</returns>
        ApiResponse<GroupHoldingsResponse> GetGroupHoldingsForListWithHttpInfo(GroupHoldingsRequest groupHoldingsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupHoldingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get group holdings for a specific date and group.
        /// </summary>
        /// <remarks>
        /// Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="asOfDate">As of date for historical group holdings in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period.  (optional)</param>
        /// <param name="group">Controls the group of the data returned.   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent        (optional, default to CNTRY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupHoldingsResponse</returns>
        System.Threading.Tasks.Task<GroupHoldingsResponse> GetGroupHoldingsAsync(List<string> ids, string asOfDate = default(string), string group = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get group holdings for a specific date and group.
        /// </summary>
        /// <remarks>
        /// Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="asOfDate">As of date for historical group holdings in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period.  (optional)</param>
        /// <param name="group">Controls the group of the data returned.   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent        (optional, default to CNTRY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupHoldingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupHoldingsResponse>> GetGroupHoldingsWithHttpInfoAsync(List<string> ids, string asOfDate = default(string), string group = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get group holdings for a specific date and group.
        /// </summary>
        /// <remarks>
        /// Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupHoldingsRequest">The Group Holdings request body, allowing the user to specify a list of ids, date, and group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupHoldingsResponse</returns>
        System.Threading.Tasks.Task<GroupHoldingsResponse> GetGroupHoldingsForListAsync(GroupHoldingsRequest groupHoldingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get group holdings for a specific date and group.
        /// </summary>
        /// <remarks>
        /// Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupHoldingsRequest">The Group Holdings request body, allowing the user to specify a list of ids, date, and group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupHoldingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupHoldingsResponse>> GetGroupHoldingsForListWithHttpInfoAsync(GroupHoldingsRequest groupHoldingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupHoldingsApi : IGroupHoldingsApiSync, IGroupHoldingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupHoldingsApi : IGroupHoldingsApi
    {
        private FactSet.SDK.FactSetFunds.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetGroupHoldingsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(GroupHoldingsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetGroupHoldingsForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(GroupHoldingsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupHoldingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupHoldingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupHoldingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupHoldingsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetFunds.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetFunds.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetFunds.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetFunds.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetFunds.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetFunds.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupHoldingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupHoldingsApi(FactSet.SDK.FactSetFunds.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetFunds.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetFunds.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetFunds.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetFunds.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetFunds.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupHoldingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupHoldingsApi(FactSet.SDK.FactSetFunds.Client.ISynchronousClient client, FactSet.SDK.FactSetFunds.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetFunds.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetFunds.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetFunds.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetFunds.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetFunds.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetFunds.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get group holdings for a specific date and group. Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="asOfDate">As of date for historical group holdings in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period.  (optional)</param>
        /// <param name="group">Controls the group of the data returned.   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent        (optional, default to CNTRY)</param>
        /// <returns>GroupHoldingsResponse</returns>
        public GroupHoldingsResponse GetGroupHoldings(List<string> ids, string asOfDate = default(string), string group = default(string))
        {
            var localVarResponse = GetGroupHoldingsWithHttpInfo(ids, asOfDate, group);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get group holdings for a specific date and group. Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="asOfDate">As of date for historical group holdings in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period.  (optional)</param>
        /// <param name="group">Controls the group of the data returned.   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent        (optional, default to CNTRY)</param>
        /// <returns>ApiResponse of GroupHoldingsResponse</returns>
        public ApiResponse<GroupHoldingsResponse> GetGroupHoldingsWithHttpInfo(List<string> ids, string asOfDate = default(string), string group = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'ids' when calling GroupHoldingsApi->GetGroupHoldings");
            }

            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFunds.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (asOfDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFunds.Client.ClientUtils.ParameterToMultiMap("", "asOfDate", asOfDate));
            }
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFunds.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetGroupHoldingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            GroupHoldingsResponse>("/factset-funds/v1/holdings/group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupHoldings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get group holdings for a specific date and group. Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="asOfDate">As of date for historical group holdings in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period.  (optional)</param>
        /// <param name="group">Controls the group of the data returned.   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent        (optional, default to CNTRY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupHoldingsResponse</returns>
        public async System.Threading.Tasks.Task<GroupHoldingsResponse>GetGroupHoldingsAsync(List<string> ids, string asOfDate = default(string), string group = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetGroupHoldingsWithHttpInfoAsync(ids, asOfDate, group, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get group holdings for a specific date and group. Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="asOfDate">As of date for historical group holdings in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period.  (optional)</param>
        /// <param name="group">Controls the group of the data returned.   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent        (optional, default to CNTRY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupHoldingsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<GroupHoldingsResponse>> GetGroupHoldingsWithHttpInfoAsync(List<string> ids, string asOfDate = default(string), string group = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'ids' when calling GroupHoldingsApi->GetGroupHoldings");
            }


            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFunds.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (asOfDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFunds.Client.ClientUtils.ParameterToMultiMap("", "asOfDate", asOfDate));
            }
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFunds.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetGroupHoldingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupHoldingsResponse>("/factset-funds/v1/holdings/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupHoldings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get group holdings for a specific date and group. Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupHoldingsRequest">The Group Holdings request body, allowing the user to specify a list of ids, date, and group.</param>
        /// <returns>GroupHoldingsResponse</returns>
        public GroupHoldingsResponse GetGroupHoldingsForList(GroupHoldingsRequest groupHoldingsRequest)
        {
            var localVarResponse = GetGroupHoldingsForListWithHttpInfo(groupHoldingsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get group holdings for a specific date and group. Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupHoldingsRequest">The Group Holdings request body, allowing the user to specify a list of ids, date, and group.</param>
        /// <returns>ApiResponse of GroupHoldingsResponse</returns>
        public ApiResponse<GroupHoldingsResponse> GetGroupHoldingsForListWithHttpInfo(GroupHoldingsRequest groupHoldingsRequest)
        {
            // verify the required parameter 'groupHoldingsRequest' is set
            if (groupHoldingsRequest == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'groupHoldingsRequest' when calling GroupHoldingsApi->GetGroupHoldingsForList");
            }

            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = groupHoldingsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetGroupHoldingsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            GroupHoldingsResponse>("/factset-funds/v1/holdings/group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupHoldingsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get group holdings for a specific date and group. Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupHoldingsRequest">The Group Holdings request body, allowing the user to specify a list of ids, date, and group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupHoldingsResponse</returns>
        public async System.Threading.Tasks.Task<GroupHoldingsResponse>GetGroupHoldingsForListAsync(GroupHoldingsRequest groupHoldingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetGroupHoldingsForListWithHttpInfoAsync(groupHoldingsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get group holdings for a specific date and group. Retrieves the holding percentages for the group and funds specified. Available groups are:   * **ASSET** &#x3D; Asset Class   * **ASSETISTYP** &#x3D; Issue Type with Asset Class   * **CAPGRP** &#x3D; Cap Group   * **CNTRY** &#x3D; Country   * **EXCHANGE** &#x3D; Exchange   * **INDUSTRY** &#x3D; Industry   * **ISSUE_TYPE** &#x3D; Issue Type   * **REGION** &#x3D; Region   * **SECTOR** &#x3D; Sector   * **ULTPARENT** &#x3D; Ultimate Parent 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFunds.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupHoldingsRequest">The Group Holdings request body, allowing the user to specify a list of ids, date, and group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupHoldingsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<GroupHoldingsResponse>> GetGroupHoldingsForListWithHttpInfoAsync(GroupHoldingsRequest groupHoldingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupHoldingsRequest' is set
            if (groupHoldingsRequest == null)
            {
                throw new FactSet.SDK.FactSetFunds.Client.ApiException(400, "Missing required parameter 'groupHoldingsRequest' when calling GroupHoldingsApi->GetGroupHoldingsForList");
            }


            FactSet.SDK.FactSetFunds.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFunds.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFunds.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = groupHoldingsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFunds.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetGroupHoldingsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupHoldingsResponse>("/factset-funds/v1/holdings/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupHoldingsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
