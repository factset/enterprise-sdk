/*
 * Events Contribution API
 *
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.EventsContribution.Client;
using FactSet.SDK.EventsContribution.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.EventsContribution.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsContributionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Event data
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a previously inserted event with the corresponding event id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be deleted. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse DeleteEvent(string eventId);

        /// <summary>
        /// Delete Event data
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a previously inserted event with the corresponding event id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be deleted. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> DeleteEventWithHttpInfo(string eventId);
        /// <summary>
        /// Get Event Data
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves previously submitted events by event ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID for event retrieval. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <returns>GetResponse</returns>
        GetResponse GetEvent(string eventId);

        /// <summary>
        /// Get Event Data
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves previously submitted events by event ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID for event retrieval. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <returns>ApiResponse of GetResponse</returns>
        ApiResponse<GetResponse> GetEventWithHttpInfo(string eventId);
        /// <summary>
        /// Insert Event data
        /// </summary>
        /// <remarks>
        /// This endpoint inserts an event. Once the event is inserted, it will show up immediately among FactSet’s own event calendar apps, for display within FactSet’s applications.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertRequest">INSERT request body which needs to be sent with request</param>
        /// <returns>InsertResponse</returns>
        InsertResponse InsertEvent(InsertRequest insertRequest);

        /// <summary>
        /// Insert Event data
        /// </summary>
        /// <remarks>
        /// This endpoint inserts an event. Once the event is inserted, it will show up immediately among FactSet’s own event calendar apps, for display within FactSet’s applications.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertRequest">INSERT request body which needs to be sent with request</param>
        /// <returns>ApiResponse of InsertResponse</returns>
        ApiResponse<InsertResponse> InsertEventWithHttpInfo(InsertRequest insertRequest);
        /// <summary>
        /// Update Event data
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a previously inserted event. Existing event will be replaced with the event data provided in the request body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be updated. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="updateRequest">UPDATE request body which needs to be sent with request</param>
        /// <returns>UpdateResponse</returns>
        UpdateResponse UpdateEvent(string eventId, UpdateRequest updateRequest);

        /// <summary>
        /// Update Event data
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a previously inserted event. Existing event will be replaced with the event data provided in the request body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be updated. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="updateRequest">UPDATE request body which needs to be sent with request</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        ApiResponse<UpdateResponse> UpdateEventWithHttpInfo(string eventId, UpdateRequest updateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsContributionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Event data
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a previously inserted event with the corresponding event id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be deleted. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> DeleteEventAsync(string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Event data
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a previously inserted event with the corresponding event id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be deleted. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> DeleteEventWithHttpInfoAsync(string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Event Data
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves previously submitted events by event ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID for event retrieval. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetResponse</returns>
        System.Threading.Tasks.Task<GetResponse> GetEventAsync(string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Event Data
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves previously submitted events by event ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID for event retrieval. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetResponse>> GetEventWithHttpInfoAsync(string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Insert Event data
        /// </summary>
        /// <remarks>
        /// This endpoint inserts an event. Once the event is inserted, it will show up immediately among FactSet’s own event calendar apps, for display within FactSet’s applications.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertRequest">INSERT request body which needs to be sent with request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsertResponse</returns>
        System.Threading.Tasks.Task<InsertResponse> InsertEventAsync(InsertRequest insertRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Insert Event data
        /// </summary>
        /// <remarks>
        /// This endpoint inserts an event. Once the event is inserted, it will show up immediately among FactSet’s own event calendar apps, for display within FactSet’s applications.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertRequest">INSERT request body which needs to be sent with request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsertResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsertResponse>> InsertEventWithHttpInfoAsync(InsertRequest insertRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Event data
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a previously inserted event. Existing event will be replaced with the event data provided in the request body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be updated. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="updateRequest">UPDATE request body which needs to be sent with request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateResponse</returns>
        System.Threading.Tasks.Task<UpdateResponse> UpdateEventAsync(string eventId, UpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Event data
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a previously inserted event. Existing event will be replaced with the event data provided in the request body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be updated. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="updateRequest">UPDATE request body which needs to be sent with request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateResponse>> UpdateEventWithHttpInfoAsync(string eventId, UpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsContributionApi : IEventsContributionApiSync, IEventsContributionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsContributionApi : IEventsContributionApi
    {
        private FactSet.SDK.EventsContribution.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteEventResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DeleteResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetEventResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(GetResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> InsertEventResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InsertResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UpdateEventResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(UpdateResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsContributionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsContributionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsContributionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsContributionApi(string basePath)
        {
            this.Configuration = FactSet.SDK.EventsContribution.Client.Configuration.MergeConfigurations(
                FactSet.SDK.EventsContribution.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.EventsContribution.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.EventsContribution.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.EventsContribution.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.EventsContribution.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsContributionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsContributionApi(FactSet.SDK.EventsContribution.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.EventsContribution.Client.Configuration.MergeConfigurations(
                FactSet.SDK.EventsContribution.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.EventsContribution.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.EventsContribution.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.EventsContribution.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsContributionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsContributionApi(FactSet.SDK.EventsContribution.Client.ISynchronousClient client, FactSet.SDK.EventsContribution.Client.IAsynchronousClient asyncClient, FactSet.SDK.EventsContribution.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.EventsContribution.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.EventsContribution.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.EventsContribution.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.EventsContribution.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.EventsContribution.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Event data This endpoint allows you to delete a previously inserted event with the corresponding event id.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be deleted. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse DeleteEvent(string eventId)
        {
            var localVarResponse = DeleteEventWithHttpInfo(eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Event data This endpoint allows you to delete a previously inserted event with the corresponding event id.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be deleted. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public ApiResponse<DeleteResponse> DeleteEventWithHttpInfo(string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new FactSet.SDK.EventsContribution.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsContributionApi->DeleteEvent");
            }

            FactSet.SDK.EventsContribution.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsContribution.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", FactSet.SDK.EventsContribution.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsContribution.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteEventResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            DeleteResponse>("/events/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete Event data This endpoint allows you to delete a previously inserted event with the corresponding event id.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be deleted. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse>DeleteEventAsync(string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await DeleteEventWithHttpInfoAsync(eventId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Event data This endpoint allows you to delete a previously inserted event with the corresponding event id.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be deleted. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> DeleteEventWithHttpInfoAsync(string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new FactSet.SDK.EventsContribution.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsContributionApi->DeleteEvent");
            }


            FactSet.SDK.EventsContribution.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsContribution.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", FactSet.SDK.EventsContribution.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsContribution.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteEventResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteResponse>("/events/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Event Data This endpoint retrieves previously submitted events by event ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID for event retrieval. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <returns>GetResponse</returns>
        public GetResponse GetEvent(string eventId)
        {
            var localVarResponse = GetEventWithHttpInfo(eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Data This endpoint retrieves previously submitted events by event ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID for event retrieval. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <returns>ApiResponse of GetResponse</returns>
        public ApiResponse<GetResponse> GetEventWithHttpInfo(string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new FactSet.SDK.EventsContribution.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsContributionApi->GetEvent");
            }

            FactSet.SDK.EventsContribution.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsContribution.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", FactSet.SDK.EventsContribution.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsContribution.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEventResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            GetResponse>("/events/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Event Data This endpoint retrieves previously submitted events by event ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID for event retrieval. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetResponse</returns>
        public async System.Threading.Tasks.Task<GetResponse>GetEventAsync(string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEventWithHttpInfoAsync(eventId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Event Data This endpoint retrieves previously submitted events by event ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID for event retrieval. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<GetResponse>> GetEventWithHttpInfoAsync(string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new FactSet.SDK.EventsContribution.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsContributionApi->GetEvent");
            }


            FactSet.SDK.EventsContribution.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsContribution.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", FactSet.SDK.EventsContribution.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsContribution.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEventResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetResponse>("/events/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert Event data This endpoint inserts an event. Once the event is inserted, it will show up immediately among FactSet’s own event calendar apps, for display within FactSet’s applications.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertRequest">INSERT request body which needs to be sent with request</param>
        /// <returns>InsertResponse</returns>
        public InsertResponse InsertEvent(InsertRequest insertRequest)
        {
            var localVarResponse = InsertEventWithHttpInfo(insertRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert Event data This endpoint inserts an event. Once the event is inserted, it will show up immediately among FactSet’s own event calendar apps, for display within FactSet’s applications.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertRequest">INSERT request body which needs to be sent with request</param>
        /// <returns>ApiResponse of InsertResponse</returns>
        public ApiResponse<InsertResponse> InsertEventWithHttpInfo(InsertRequest insertRequest)
        {
            // verify the required parameter 'insertRequest' is set
            if (insertRequest == null)
            {
                throw new FactSet.SDK.EventsContribution.Client.ApiException(400, "Missing required parameter 'insertRequest' when calling EventsContributionApi->InsertEvent");
            }

            FactSet.SDK.EventsContribution.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsContribution.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = insertRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsContribution.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = InsertEventResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InsertResponse>("/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Insert Event data This endpoint inserts an event. Once the event is inserted, it will show up immediately among FactSet’s own event calendar apps, for display within FactSet’s applications.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertRequest">INSERT request body which needs to be sent with request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsertResponse</returns>
        public async System.Threading.Tasks.Task<InsertResponse>InsertEventAsync(InsertRequest insertRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await InsertEventWithHttpInfoAsync(insertRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert Event data This endpoint inserts an event. Once the event is inserted, it will show up immediately among FactSet’s own event calendar apps, for display within FactSet’s applications.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertRequest">INSERT request body which needs to be sent with request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsertResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InsertResponse>> InsertEventWithHttpInfoAsync(InsertRequest insertRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'insertRequest' is set
            if (insertRequest == null)
            {
                throw new FactSet.SDK.EventsContribution.Client.ApiException(400, "Missing required parameter 'insertRequest' when calling EventsContributionApi->InsertEvent");
            }


            FactSet.SDK.EventsContribution.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsContribution.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = insertRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsContribution.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = InsertEventResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InsertResponse>("/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Event data This endpoint allows you to update a previously inserted event. Existing event will be replaced with the event data provided in the request body.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be updated. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="updateRequest">UPDATE request body which needs to be sent with request</param>
        /// <returns>UpdateResponse</returns>
        public UpdateResponse UpdateEvent(string eventId, UpdateRequest updateRequest)
        {
            var localVarResponse = UpdateEventWithHttpInfo(eventId, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Event data This endpoint allows you to update a previously inserted event. Existing event will be replaced with the event data provided in the request body.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be updated. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="updateRequest">UPDATE request body which needs to be sent with request</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        public ApiResponse<UpdateResponse> UpdateEventWithHttpInfo(string eventId, UpdateRequest updateRequest)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new FactSet.SDK.EventsContribution.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsContributionApi->UpdateEvent");
            }

            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new FactSet.SDK.EventsContribution.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling EventsContributionApi->UpdateEvent");
            }

            FactSet.SDK.EventsContribution.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsContribution.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", FactSet.SDK.EventsContribution.Client.ClientUtils.ParameterToString(eventId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsContribution.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UpdateEventResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            UpdateResponse>("/events/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Update Event data This endpoint allows you to update a previously inserted event. Existing event will be replaced with the event data provided in the request body.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be updated. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="updateRequest">UPDATE request body which needs to be sent with request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateResponse</returns>
        public async System.Threading.Tasks.Task<UpdateResponse>UpdateEventAsync(string eventId, UpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await UpdateEventWithHttpInfoAsync(eventId, updateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Event data This endpoint allows you to update a previously inserted event. Existing event will be replaced with the event data provided in the request body.
        /// </summary>
        /// <exception cref="FactSet.SDK.EventsContribution.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to be updated. This ID is vendor generated and should be unique in each vendor&#39;s content set.</param>
        /// <param name="updateRequest">UPDATE request body which needs to be sent with request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<UpdateResponse>> UpdateEventWithHttpInfoAsync(string eventId, UpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new FactSet.SDK.EventsContribution.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsContributionApi->UpdateEvent");
            }

            // verify the required parameter 'updateRequest' is set
            if (updateRequest == null)
            {
                throw new FactSet.SDK.EventsContribution.Client.ApiException(400, "Missing required parameter 'updateRequest' when calling EventsContributionApi->UpdateEvent");
            }


            FactSet.SDK.EventsContribution.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.EventsContribution.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.EventsContribution.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", FactSet.SDK.EventsContribution.Client.ClientUtils.ParameterToString(eventId)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.EventsContribution.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UpdateEventResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateResponse>("/events/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
