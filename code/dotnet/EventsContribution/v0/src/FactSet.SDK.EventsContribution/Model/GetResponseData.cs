/*
 * Events Contribution API
 *
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsContribution.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsContribution.Model
{
    /// <summary>
    /// GetResponseData
    /// </summary>
    [DataContract(Name = "GetResponse_data")]
    public partial class GetResponseData : IEquatable<GetResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetResponseData" /> class.
        /// </summary>
        /// <param name="id">ID of event.</param>
        /// <param name="date">Date of event.</param>
        /// <param name="description">Description of event.</param>
        /// <param name="contactName">Contact for event.</param>
        /// <param name="contactEmail">Contact&#39;s email for event.</param>
        /// <param name="agendaUrl">URL for event.</param>
        /// <param name="additionalInfo">Additional info for the event.</param>
        /// <param name="city">City of the event.</param>
        /// <param name="state">State of the event.</param>
        /// <param name="isoCountry">Country of the event.</param>
        public GetResponseData(string id = default(string), string date = default(string), string description = default(string), string contactName = default(string), string contactEmail = default(string), string agendaUrl = default(string), string additionalInfo = default(string), string city = default(string), string state = default(string), string isoCountry = default(string))
        {
            this.Id = id;
            this.Date = date;
            this.Description = description;
            this.ContactName = contactName;
            this.ContactEmail = contactEmail;
            this.AgendaUrl = agendaUrl;
            this.AdditionalInfo = additionalInfo;
            this.City = city;
            this.State = state;
            this.IsoCountry = isoCountry;
        }

        /// <summary>
        /// ID of event
        /// </summary>
        /// <value>ID of event</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Date of event
        /// </summary>
        /// <value>Date of event</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Description of event
        /// </summary>
        /// <value>Description of event</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Contact for event
        /// </summary>
        /// <value>Contact for event</value>
        [DataMember(Name = "contactName", EmitDefaultValue = false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Contact&#39;s email for event
        /// </summary>
        /// <value>Contact&#39;s email for event</value>
        [DataMember(Name = "contactEmail", EmitDefaultValue = false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// URL for event
        /// </summary>
        /// <value>URL for event</value>
        [DataMember(Name = "agendaUrl", EmitDefaultValue = false)]
        public string AgendaUrl { get; set; }

        /// <summary>
        /// Additional info for the event
        /// </summary>
        /// <value>Additional info for the event</value>
        [DataMember(Name = "additionalInfo", EmitDefaultValue = false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// City of the event
        /// </summary>
        /// <value>City of the event</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// State of the event
        /// </summary>
        /// <value>State of the event</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Country of the event
        /// </summary>
        /// <value>Country of the event</value>
        [DataMember(Name = "isoCountry", EmitDefaultValue = false)]
        public string IsoCountry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetResponseData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  AgendaUrl: ").Append(AgendaUrl).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  IsoCountry: ").Append(IsoCountry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetResponseData);
        }

        /// <summary>
        /// Returns true if GetResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of GetResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.AgendaUrl == input.AgendaUrl ||
                    (this.AgendaUrl != null &&
                    this.AgendaUrl.Equals(input.AgendaUrl))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.IsoCountry == input.IsoCountry ||
                    (this.IsoCountry != null &&
                    this.IsoCountry.Equals(input.IsoCountry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ContactName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactName.GetHashCode();
                }
                if (this.ContactEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ContactEmail.GetHashCode();
                }
                if (this.AgendaUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AgendaUrl.GetHashCode();
                }
                if (this.AdditionalInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalInfo.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.IsoCountry != null)
                {
                    hashCode = (hashCode * 59) + this.IsoCountry.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Date (string) pattern
            Regex regexDate = new Regex(@"^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [01][0-9] \\d{4}$", RegexOptions.CultureInvariant);
            if (false == regexDate.Match(this.Date).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Date, must match a pattern of " + regexDate, new [] { "Date" });
            }

            yield break;
        }
    }

}
