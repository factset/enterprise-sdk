/*
 * Events Contribution API
 *
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsContribution.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsContribution.Model
{
    /// <summary>
    /// DeleteResponseData
    /// </summary>
    [DataContract(Name = "DeleteResponse_data")]
    public partial class DeleteResponseData : IEquatable<DeleteResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteResponseData" /> class.
        /// </summary>
        /// <param name="eventData">eventData.</param>
        /// <param name="message">message.</param>
        public DeleteResponseData(DeleteResponseDataEventData eventData = default(DeleteResponseDataEventData), DeleteResponseDataMessage message = default(DeleteResponseDataMessage))
        {
            this.EventData = eventData;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets EventData
        /// </summary>
        [DataMember(Name = "eventData", EmitDefaultValue = false)]
        public DeleteResponseDataEventData EventData { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public DeleteResponseDataMessage Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeleteResponseData {\n");
            sb.Append("  EventData: ").Append(EventData).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeleteResponseData);
        }

        /// <summary>
        /// Returns true if DeleteResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of DeleteResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeleteResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventData == input.EventData ||
                    (this.EventData != null &&
                    this.EventData.Equals(input.EventData))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventData != null)
                {
                    hashCode = (hashCode * 59) + this.EventData.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
