/*
 * Events Contribution API
 *
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsContribution.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsContribution.Model
{
    /// <summary>
    /// Event Data Update
    /// </summary>
    [DataContract(Name = "EventUpdateData")]
    public partial class EventUpdateData : IEquatable<EventUpdateData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventUpdateData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventUpdateData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventUpdateData" /> class.
        /// </summary>
        /// <param name="title">Title of the event to be displayed (required).</param>
        /// <param name="startDatetime">Start date and time of the event (required).</param>
        /// <param name="agendaUrl">The meeting agenda which can be a document file or a webpage..</param>
        /// <param name="participants">Participants of the event..</param>
        /// <param name="location">location.</param>
        /// <param name="symbols">Symbol associated with the event (required).</param>
        /// <param name="registrationInfo">registrationInfo.</param>
        public EventUpdateData(string title, DateTime startDatetime, List<SymbolData> symbols,string agendaUrl = default(string), List<ParticipantsData> participants = default(List<ParticipantsData>), LocationData location = default(LocationData), RegistrationInfoData registrationInfo = default(RegistrationInfoData))
        {
            // to ensure "title" is required (not null)
            if (title == null) {
                throw new ArgumentNullException("title is a required property for EventUpdateData and cannot be null");
            }
            this.Title = title;
            this.StartDatetime = startDatetime;
            // to ensure "symbols" is required (not null)
            if (symbols == null) {
                throw new ArgumentNullException("symbols is a required property for EventUpdateData and cannot be null");
            }
            this.Symbols = symbols;
            this.AgendaUrl = agendaUrl;
            this.Participants = participants;
            this.Location = location;
            this.RegistrationInfo = registrationInfo;
        }

        /// <summary>
        /// Title of the event to be displayed
        /// </summary>
        /// <value>Title of the event to be displayed</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Start date and time of the event
        /// </summary>
        /// <value>Start date and time of the event</value>
        [DataMember(Name = "startDatetime", IsRequired = true, EmitDefaultValue = false)]
        public DateTime StartDatetime { get; set; }

        /// <summary>
        /// The meeting agenda which can be a document file or a webpage.
        /// </summary>
        /// <value>The meeting agenda which can be a document file or a webpage.</value>
        [DataMember(Name = "agendaUrl", EmitDefaultValue = false)]
        public string AgendaUrl { get; set; }

        /// <summary>
        /// Participants of the event.
        /// </summary>
        /// <value>Participants of the event.</value>
        [DataMember(Name = "participants", EmitDefaultValue = false)]
        public List<ParticipantsData> Participants { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public LocationData Location { get; set; }

        /// <summary>
        /// Symbol associated with the event
        /// </summary>
        /// <value>Symbol associated with the event</value>
        [DataMember(Name = "symbols", IsRequired = true, EmitDefaultValue = false)]
        public List<SymbolData> Symbols { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationInfo
        /// </summary>
        [DataMember(Name = "registrationInfo", EmitDefaultValue = false)]
        public RegistrationInfoData RegistrationInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventUpdateData {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  StartDatetime: ").Append(StartDatetime).Append("\n");
            sb.Append("  AgendaUrl: ").Append(AgendaUrl).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Symbols: ").Append(Symbols).Append("\n");
            sb.Append("  RegistrationInfo: ").Append(RegistrationInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventUpdateData);
        }

        /// <summary>
        /// Returns true if EventUpdateData instances are equal
        /// </summary>
        /// <param name="input">Instance of EventUpdateData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventUpdateData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.StartDatetime == input.StartDatetime ||
                    (this.StartDatetime != null &&
                    this.StartDatetime.Equals(input.StartDatetime))
                ) && 
                (
                    this.AgendaUrl == input.AgendaUrl ||
                    (this.AgendaUrl != null &&
                    this.AgendaUrl.Equals(input.AgendaUrl))
                ) && 
                (
                    this.Participants == input.Participants ||
                    this.Participants != null &&
                    input.Participants != null &&
                    this.Participants.SequenceEqual(input.Participants)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Symbols == input.Symbols ||
                    this.Symbols != null &&
                    input.Symbols != null &&
                    this.Symbols.SequenceEqual(input.Symbols)
                ) && 
                (
                    this.RegistrationInfo == input.RegistrationInfo ||
                    (this.RegistrationInfo != null &&
                    this.RegistrationInfo.Equals(input.RegistrationInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.StartDatetime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDatetime.GetHashCode();
                }
                if (this.AgendaUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AgendaUrl.GetHashCode();
                }
                if (this.Participants != null)
                {
                    hashCode = (hashCode * 59) + this.Participants.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Symbols != null)
                {
                    hashCode = (hashCode * 59) + this.Symbols.GetHashCode();
                }
                if (this.RegistrationInfo != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 500.", new [] { "Title" });
            }

            yield break;
        }
    }

}
