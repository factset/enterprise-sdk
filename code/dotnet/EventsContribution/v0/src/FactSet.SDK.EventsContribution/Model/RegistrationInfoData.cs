/*
 * Events Contribution API
 *
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventsContribution.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventsContribution.Model
{
    /// <summary>
    /// Information regarding event registrant
    /// </summary>
    [DataContract(Name = "registrationInfoData")]
    public partial class RegistrationInfoData : IEquatable<RegistrationInfoData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationInfoData" /> class.
        /// </summary>
        /// <param name="contactEmailAddress">Contact email of event registrant.</param>
        /// <param name="contactName">Contact name of event registrant.</param>
        /// <param name="extraInfo">Extra information can be provided regarding event registration. Input must be in English and will be validated upon indication..</param>
        public RegistrationInfoData(string contactEmailAddress = default(string), string contactName = default(string), string extraInfo = default(string))
        {
            this.ContactEmailAddress = contactEmailAddress;
            this.ContactName = contactName;
            this.ExtraInfo = extraInfo;
        }

        /// <summary>
        /// Contact email of event registrant
        /// </summary>
        /// <value>Contact email of event registrant</value>
        [DataMember(Name = "contactEmailAddress", EmitDefaultValue = false)]
        public string ContactEmailAddress { get; set; }

        /// <summary>
        /// Contact name of event registrant
        /// </summary>
        /// <value>Contact name of event registrant</value>
        [DataMember(Name = "contactName", EmitDefaultValue = false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Extra information can be provided regarding event registration. Input must be in English and will be validated upon indication.
        /// </summary>
        /// <value>Extra information can be provided regarding event registration. Input must be in English and will be validated upon indication.</value>
        [DataMember(Name = "extraInfo", EmitDefaultValue = false)]
        public string ExtraInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegistrationInfoData {\n");
            sb.Append("  ContactEmailAddress: ").Append(ContactEmailAddress).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ExtraInfo: ").Append(ExtraInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegistrationInfoData);
        }

        /// <summary>
        /// Returns true if RegistrationInfoData instances are equal
        /// </summary>
        /// <param name="input">Instance of RegistrationInfoData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationInfoData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContactEmailAddress == input.ContactEmailAddress ||
                    (this.ContactEmailAddress != null &&
                    this.ContactEmailAddress.Equals(input.ContactEmailAddress))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ExtraInfo == input.ExtraInfo ||
                    (this.ExtraInfo != null &&
                    this.ExtraInfo.Equals(input.ExtraInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContactEmailAddress.GetHashCode();
                }
                if (this.ContactName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactName.GetHashCode();
                }
                if (this.ExtraInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ExtraInfo (string) maxLength
            if (this.ExtraInfo != null && this.ExtraInfo.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExtraInfo, length must be less than 500.", new [] { "ExtraInfo" });
            }

            yield break;
        }
    }

}
