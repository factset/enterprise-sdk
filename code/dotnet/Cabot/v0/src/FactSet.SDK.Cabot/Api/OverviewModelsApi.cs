/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Cabot.Client;
using FactSet.SDK.Cabot.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Cabot.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOverviewModelsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cabot main path for Construction API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Construction API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <returns>ConstructionResponseRoot</returns>
        ConstructionResponseRoot GetConstructionModelAnalytic(string accountPath, string benchmarkPath, string period);

        /// <summary>
        /// Cabot main path for Construction API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Construction API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <returns>ApiResponse of ConstructionResponseRoot</returns>
        ApiResponse<ConstructionResponseRoot> GetConstructionModelAnalyticWithHttpInfo(string accountPath, string benchmarkPath, string period);
        /// <summary>
        /// Cabot main path for Hit Rate API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Hit Rate API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <returns>HitRateResponseRoot</returns>
        HitRateResponseRoot GetHitRateModelAnalytic(string accountPath, string benchmarkPath, string period, Sectors sector, Regions region);

        /// <summary>
        /// Cabot main path for Hit Rate API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Hit Rate API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <returns>ApiResponse of HitRateResponseRoot</returns>
        ApiResponse<HitRateResponseRoot> GetHitRateModelAnalyticWithHttpInfo(string accountPath, string benchmarkPath, string period, Sectors sector, Regions region);
        /// <summary>
        /// Cabot main path for Results API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Results API.     Describes portfolio returns in comparison to its benchmark. A positive value indicates excess returns while a negative value indicates underperformance.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="currency">In which currency you want to see the data. By default the API uses USD.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <returns>ResultsResponseRoot</returns>
        ResultsResponseRoot GetResultsModelAnalytic(string accountPath, string benchmarkPath, string period, Currency? currency = default(Currency?));

        /// <summary>
        /// Cabot main path for Results API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Results API.     Describes portfolio returns in comparison to its benchmark. A positive value indicates excess returns while a negative value indicates underperformance.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="currency">In which currency you want to see the data. By default the API uses USD.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <returns>ApiResponse of ResultsResponseRoot</returns>
        ApiResponse<ResultsResponseRoot> GetResultsModelAnalyticWithHttpInfo(string accountPath, string benchmarkPath, string period, Currency? currency = default(Currency?));
        /// <summary>
        /// Cabot main path for Skills API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Skills API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="attribute">The attribute represents the different factors.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;If provided, the API response will contain both \&quot;LOW\&quot; and \&quot;HIGH\&quot; values for it.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="holdings">If set, the API will add holding-level details for all or only the selected analytic (if available for your portfolio).&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <returns>SkillsResponseRoot</returns>
        SkillsResponseRoot GetSkillsModelAnalytic(string accountPath, string benchmarkPath, string period, Attributes? attribute = default(Attributes?), Sectors? sector = default(Sectors?), Regions? region = default(Regions?), SkillsHoldings? holdings = default(SkillsHoldings?));

        /// <summary>
        /// Cabot main path for Skills API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Skills API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="attribute">The attribute represents the different factors.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;If provided, the API response will contain both \&quot;LOW\&quot; and \&quot;HIGH\&quot; values for it.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="holdings">If set, the API will add holding-level details for all or only the selected analytic (if available for your portfolio).&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <returns>ApiResponse of SkillsResponseRoot</returns>
        ApiResponse<SkillsResponseRoot> GetSkillsModelAnalyticWithHttpInfo(string accountPath, string benchmarkPath, string period, Attributes? attribute = default(Attributes?), Sectors? sector = default(Sectors?), Regions? region = default(Regions?), SkillsHoldings? holdings = default(SkillsHoldings?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOverviewModelsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cabot main path for Construction API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Construction API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConstructionResponseRoot</returns>
        System.Threading.Tasks.Task<ConstructionResponseRoot> GetConstructionModelAnalyticAsync(string accountPath, string benchmarkPath, string period, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cabot main path for Construction API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Construction API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConstructionResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConstructionResponseRoot>> GetConstructionModelAnalyticWithHttpInfoAsync(string accountPath, string benchmarkPath, string period, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cabot main path for Hit Rate API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Hit Rate API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HitRateResponseRoot</returns>
        System.Threading.Tasks.Task<HitRateResponseRoot> GetHitRateModelAnalyticAsync(string accountPath, string benchmarkPath, string period, Sectors sector, Regions region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cabot main path for Hit Rate API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Hit Rate API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HitRateResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<HitRateResponseRoot>> GetHitRateModelAnalyticWithHttpInfoAsync(string accountPath, string benchmarkPath, string period, Sectors sector, Regions region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cabot main path for Results API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Results API.     Describes portfolio returns in comparison to its benchmark. A positive value indicates excess returns while a negative value indicates underperformance.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="currency">In which currency you want to see the data. By default the API uses USD.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResultsResponseRoot</returns>
        System.Threading.Tasks.Task<ResultsResponseRoot> GetResultsModelAnalyticAsync(string accountPath, string benchmarkPath, string period, Currency? currency = default(Currency?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cabot main path for Results API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Results API.     Describes portfolio returns in comparison to its benchmark. A positive value indicates excess returns while a negative value indicates underperformance.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="currency">In which currency you want to see the data. By default the API uses USD.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResultsResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultsResponseRoot>> GetResultsModelAnalyticWithHttpInfoAsync(string accountPath, string benchmarkPath, string period, Currency? currency = default(Currency?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cabot main path for Skills API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Skills API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="attribute">The attribute represents the different factors.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;If provided, the API response will contain both \&quot;LOW\&quot; and \&quot;HIGH\&quot; values for it.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="holdings">If set, the API will add holding-level details for all or only the selected analytic (if available for your portfolio).&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SkillsResponseRoot</returns>
        System.Threading.Tasks.Task<SkillsResponseRoot> GetSkillsModelAnalyticAsync(string accountPath, string benchmarkPath, string period, Attributes? attribute = default(Attributes?), Sectors? sector = default(Sectors?), Regions? region = default(Regions?), SkillsHoldings? holdings = default(SkillsHoldings?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cabot main path for Skills API
        /// </summary>
        /// <remarks>
        /// Cabot main path for Skills API
        /// </remarks>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="attribute">The attribute represents the different factors.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;If provided, the API response will contain both \&quot;LOW\&quot; and \&quot;HIGH\&quot; values for it.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="holdings">If set, the API will add holding-level details for all or only the selected analytic (if available for your portfolio).&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SkillsResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<SkillsResponseRoot>> GetSkillsModelAnalyticWithHttpInfoAsync(string accountPath, string benchmarkPath, string period, Attributes? attribute = default(Attributes?), Sectors? sector = default(Sectors?), Regions? region = default(Regions?), SkillsHoldings? holdings = default(SkillsHoldings?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOverviewModelsApi : IOverviewModelsApiSync, IOverviewModelsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OverviewModelsApi : IOverviewModelsApi
    {
        private FactSet.SDK.Cabot.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetConstructionModelAnalyticResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ConstructionResponseRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetHitRateModelAnalyticResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(HitRateResponseRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResultsModelAnalyticResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ResultsResponseRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSkillsModelAnalyticResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SkillsResponseRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewModelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OverviewModelsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewModelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OverviewModelsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Cabot.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Cabot.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Cabot.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Cabot.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Cabot.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Cabot.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewModelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OverviewModelsApi(FactSet.SDK.Cabot.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Cabot.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Cabot.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Cabot.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Cabot.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Cabot.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewModelsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OverviewModelsApi(FactSet.SDK.Cabot.Client.ISynchronousClient client, FactSet.SDK.Cabot.Client.IAsynchronousClient asyncClient, FactSet.SDK.Cabot.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Cabot.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Cabot.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Cabot.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Cabot.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Cabot.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cabot main path for Construction API Cabot main path for Construction API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <returns>ConstructionResponseRoot</returns>
        public ConstructionResponseRoot GetConstructionModelAnalytic(string accountPath, string benchmarkPath, string period)
        {
            var localVarResponse = GetConstructionModelAnalyticWithHttpInfo(accountPath, benchmarkPath, period);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cabot main path for Construction API Cabot main path for Construction API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <returns>ApiResponse of ConstructionResponseRoot</returns>
        public ApiResponse<ConstructionResponseRoot> GetConstructionModelAnalyticWithHttpInfo(string accountPath, string benchmarkPath, string period)
        {
            // verify the required parameter 'accountPath' is set
            if (accountPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'accountPath' when calling OverviewModelsApi->GetConstructionModelAnalytic");
            }

            // verify the required parameter 'benchmarkPath' is set
            if (benchmarkPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'benchmarkPath' when calling OverviewModelsApi->GetConstructionModelAnalytic");
            }

            // verify the required parameter 'period' is set
            if (period == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'period' when calling OverviewModelsApi->GetConstructionModelAnalytic");
            }

            FactSet.SDK.Cabot.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Cabot.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "accountPath", accountPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "benchmarkPath", benchmarkPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "period", period));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Cabot.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetConstructionModelAnalyticResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ConstructionResponseRoot>("/models/construction", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConstructionModelAnalytic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Cabot main path for Construction API Cabot main path for Construction API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConstructionResponseRoot</returns>
        public async System.Threading.Tasks.Task<ConstructionResponseRoot>GetConstructionModelAnalyticAsync(string accountPath, string benchmarkPath, string period, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetConstructionModelAnalyticWithHttpInfoAsync(accountPath, benchmarkPath, period, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cabot main path for Construction API Cabot main path for Construction API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConstructionResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ConstructionResponseRoot>> GetConstructionModelAnalyticWithHttpInfoAsync(string accountPath, string benchmarkPath, string period, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountPath' is set
            if (accountPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'accountPath' when calling OverviewModelsApi->GetConstructionModelAnalytic");
            }

            // verify the required parameter 'benchmarkPath' is set
            if (benchmarkPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'benchmarkPath' when calling OverviewModelsApi->GetConstructionModelAnalytic");
            }

            // verify the required parameter 'period' is set
            if (period == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'period' when calling OverviewModelsApi->GetConstructionModelAnalytic");
            }


            FactSet.SDK.Cabot.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Cabot.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "accountPath", accountPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "benchmarkPath", benchmarkPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "period", period));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Cabot.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetConstructionModelAnalyticResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConstructionResponseRoot>("/models/construction", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConstructionModelAnalytic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cabot main path for Hit Rate API Cabot main path for Hit Rate API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <returns>HitRateResponseRoot</returns>
        public HitRateResponseRoot GetHitRateModelAnalytic(string accountPath, string benchmarkPath, string period, Sectors sector, Regions region)
        {
            var localVarResponse = GetHitRateModelAnalyticWithHttpInfo(accountPath, benchmarkPath, period, sector, region);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cabot main path for Hit Rate API Cabot main path for Hit Rate API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <returns>ApiResponse of HitRateResponseRoot</returns>
        public ApiResponse<HitRateResponseRoot> GetHitRateModelAnalyticWithHttpInfo(string accountPath, string benchmarkPath, string period, Sectors sector, Regions region)
        {
            // verify the required parameter 'accountPath' is set
            if (accountPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'accountPath' when calling OverviewModelsApi->GetHitRateModelAnalytic");
            }

            // verify the required parameter 'benchmarkPath' is set
            if (benchmarkPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'benchmarkPath' when calling OverviewModelsApi->GetHitRateModelAnalytic");
            }

            // verify the required parameter 'period' is set
            if (period == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'period' when calling OverviewModelsApi->GetHitRateModelAnalytic");
            }

            FactSet.SDK.Cabot.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Cabot.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "accountPath", accountPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "benchmarkPath", benchmarkPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "sector", sector));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "region", region));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Cabot.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetHitRateModelAnalyticResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            HitRateResponseRoot>("/models/hit-rate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHitRateModelAnalytic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Cabot main path for Hit Rate API Cabot main path for Hit Rate API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HitRateResponseRoot</returns>
        public async System.Threading.Tasks.Task<HitRateResponseRoot>GetHitRateModelAnalyticAsync(string accountPath, string benchmarkPath, string period, Sectors sector, Regions region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetHitRateModelAnalyticWithHttpInfoAsync(accountPath, benchmarkPath, period, sector, region, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cabot main path for Hit Rate API Cabot main path for Hit Rate API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HitRateResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<HitRateResponseRoot>> GetHitRateModelAnalyticWithHttpInfoAsync(string accountPath, string benchmarkPath, string period, Sectors sector, Regions region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountPath' is set
            if (accountPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'accountPath' when calling OverviewModelsApi->GetHitRateModelAnalytic");
            }

            // verify the required parameter 'benchmarkPath' is set
            if (benchmarkPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'benchmarkPath' when calling OverviewModelsApi->GetHitRateModelAnalytic");
            }

            // verify the required parameter 'period' is set
            if (period == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'period' when calling OverviewModelsApi->GetHitRateModelAnalytic");
            }


            FactSet.SDK.Cabot.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Cabot.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "accountPath", accountPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "benchmarkPath", benchmarkPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "sector", sector));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "region", region));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Cabot.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetHitRateModelAnalyticResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HitRateResponseRoot>("/models/hit-rate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHitRateModelAnalytic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cabot main path for Results API Cabot main path for Results API.     Describes portfolio returns in comparison to its benchmark. A positive value indicates excess returns while a negative value indicates underperformance.
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="currency">In which currency you want to see the data. By default the API uses USD.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <returns>ResultsResponseRoot</returns>
        public ResultsResponseRoot GetResultsModelAnalytic(string accountPath, string benchmarkPath, string period, Currency? currency = default(Currency?))
        {
            var localVarResponse = GetResultsModelAnalyticWithHttpInfo(accountPath, benchmarkPath, period, currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cabot main path for Results API Cabot main path for Results API.     Describes portfolio returns in comparison to its benchmark. A positive value indicates excess returns while a negative value indicates underperformance.
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="currency">In which currency you want to see the data. By default the API uses USD.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <returns>ApiResponse of ResultsResponseRoot</returns>
        public ApiResponse<ResultsResponseRoot> GetResultsModelAnalyticWithHttpInfo(string accountPath, string benchmarkPath, string period, Currency? currency = default(Currency?))
        {
            // verify the required parameter 'accountPath' is set
            if (accountPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'accountPath' when calling OverviewModelsApi->GetResultsModelAnalytic");
            }

            // verify the required parameter 'benchmarkPath' is set
            if (benchmarkPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'benchmarkPath' when calling OverviewModelsApi->GetResultsModelAnalytic");
            }

            // verify the required parameter 'period' is set
            if (period == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'period' when calling OverviewModelsApi->GetResultsModelAnalytic");
            }

            FactSet.SDK.Cabot.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Cabot.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "accountPath", accountPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "benchmarkPath", benchmarkPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Cabot.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResultsModelAnalyticResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ResultsResponseRoot>("/models/results", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResultsModelAnalytic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Cabot main path for Results API Cabot main path for Results API.     Describes portfolio returns in comparison to its benchmark. A positive value indicates excess returns while a negative value indicates underperformance.
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="currency">In which currency you want to see the data. By default the API uses USD.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResultsResponseRoot</returns>
        public async System.Threading.Tasks.Task<ResultsResponseRoot>GetResultsModelAnalyticAsync(string accountPath, string benchmarkPath, string period, Currency? currency = default(Currency?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResultsModelAnalyticWithHttpInfoAsync(accountPath, benchmarkPath, period, currency, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cabot main path for Results API Cabot main path for Results API.     Describes portfolio returns in comparison to its benchmark. A positive value indicates excess returns while a negative value indicates underperformance.
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="currency">In which currency you want to see the data. By default the API uses USD.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResultsResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ResultsResponseRoot>> GetResultsModelAnalyticWithHttpInfoAsync(string accountPath, string benchmarkPath, string period, Currency? currency = default(Currency?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountPath' is set
            if (accountPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'accountPath' when calling OverviewModelsApi->GetResultsModelAnalytic");
            }

            // verify the required parameter 'benchmarkPath' is set
            if (benchmarkPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'benchmarkPath' when calling OverviewModelsApi->GetResultsModelAnalytic");
            }

            // verify the required parameter 'period' is set
            if (period == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'period' when calling OverviewModelsApi->GetResultsModelAnalytic");
            }


            FactSet.SDK.Cabot.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Cabot.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "accountPath", accountPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "benchmarkPath", benchmarkPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Cabot.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResultsModelAnalyticResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResultsResponseRoot>("/models/results", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResultsModelAnalytic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cabot main path for Skills API Cabot main path for Skills API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="attribute">The attribute represents the different factors.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;If provided, the API response will contain both \&quot;LOW\&quot; and \&quot;HIGH\&quot; values for it.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="holdings">If set, the API will add holding-level details for all or only the selected analytic (if available for your portfolio).&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <returns>SkillsResponseRoot</returns>
        public SkillsResponseRoot GetSkillsModelAnalytic(string accountPath, string benchmarkPath, string period, Attributes? attribute = default(Attributes?), Sectors? sector = default(Sectors?), Regions? region = default(Regions?), SkillsHoldings? holdings = default(SkillsHoldings?))
        {
            var localVarResponse = GetSkillsModelAnalyticWithHttpInfo(accountPath, benchmarkPath, period, attribute, sector, region, holdings);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cabot main path for Skills API Cabot main path for Skills API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="attribute">The attribute represents the different factors.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;If provided, the API response will contain both \&quot;LOW\&quot; and \&quot;HIGH\&quot; values for it.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="holdings">If set, the API will add holding-level details for all or only the selected analytic (if available for your portfolio).&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <returns>ApiResponse of SkillsResponseRoot</returns>
        public ApiResponse<SkillsResponseRoot> GetSkillsModelAnalyticWithHttpInfo(string accountPath, string benchmarkPath, string period, Attributes? attribute = default(Attributes?), Sectors? sector = default(Sectors?), Regions? region = default(Regions?), SkillsHoldings? holdings = default(SkillsHoldings?))
        {
            // verify the required parameter 'accountPath' is set
            if (accountPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'accountPath' when calling OverviewModelsApi->GetSkillsModelAnalytic");
            }

            // verify the required parameter 'benchmarkPath' is set
            if (benchmarkPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'benchmarkPath' when calling OverviewModelsApi->GetSkillsModelAnalytic");
            }

            // verify the required parameter 'period' is set
            if (period == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'period' when calling OverviewModelsApi->GetSkillsModelAnalytic");
            }

            FactSet.SDK.Cabot.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Cabot.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "accountPath", accountPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "benchmarkPath", benchmarkPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            if (attribute != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "attribute", attribute));
            }
            if (sector != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "sector", sector));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (holdings != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "holdings", holdings));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Cabot.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSkillsModelAnalyticResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SkillsResponseRoot>("/models/skills", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSkillsModelAnalytic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Cabot main path for Skills API Cabot main path for Skills API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="attribute">The attribute represents the different factors.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;If provided, the API response will contain both \&quot;LOW\&quot; and \&quot;HIGH\&quot; values for it.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="holdings">If set, the API will add holding-level details for all or only the selected analytic (if available for your portfolio).&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SkillsResponseRoot</returns>
        public async System.Threading.Tasks.Task<SkillsResponseRoot>GetSkillsModelAnalyticAsync(string accountPath, string benchmarkPath, string period, Attributes? attribute = default(Attributes?), Sectors? sector = default(Sectors?), Regions? region = default(Regions?), SkillsHoldings? holdings = default(SkillsHoldings?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSkillsModelAnalyticWithHttpInfoAsync(accountPath, benchmarkPath, period, attribute, sector, region, holdings, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cabot main path for Skills API Cabot main path for Skills API
        /// </summary>
        /// <exception cref="FactSet.SDK.Cabot.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for.</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="period">For which period you want to retrieve the data.&lt;br /&gt;There are four options available as follows:&lt;br /&gt;&lt;br /&gt;1 -&gt; YYYY (Repeating One Year)&lt;br /&gt;&lt;br /&gt;2 -&gt; YYYY-YYYY (Repeating Three/Five/Ten Year)&lt;br /&gt;&lt;br /&gt;3 -&gt; 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))&lt;br /&gt;&lt;br /&gt;4 -&gt; INCEPTION_TO_DATE&lt;br /&gt;&lt;br /&gt;You can only get the data for one period per request.&lt;br /&gt;&lt;br /&gt;</param>
        /// <param name="attribute">The attribute represents the different factors.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt;If provided, the API response will contain both \&quot;LOW\&quot; and \&quot;HIGH\&quot; values for it.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="sector">Sector represents the sector based on the company&#39;s industry breakdown.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing.&lt;br /&gt;You can choose which of them (if any) you want to see analytics for.&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="holdings">If set, the API will add holding-level details for all or only the selected analytic (if available for your portfolio).&lt;br /&gt;&lt;br /&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SkillsResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SkillsResponseRoot>> GetSkillsModelAnalyticWithHttpInfoAsync(string accountPath, string benchmarkPath, string period, Attributes? attribute = default(Attributes?), Sectors? sector = default(Sectors?), Regions? region = default(Regions?), SkillsHoldings? holdings = default(SkillsHoldings?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountPath' is set
            if (accountPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'accountPath' when calling OverviewModelsApi->GetSkillsModelAnalytic");
            }

            // verify the required parameter 'benchmarkPath' is set
            if (benchmarkPath == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'benchmarkPath' when calling OverviewModelsApi->GetSkillsModelAnalytic");
            }

            // verify the required parameter 'period' is set
            if (period == null)
            {
                throw new FactSet.SDK.Cabot.Client.ApiException(400, "Missing required parameter 'period' when calling OverviewModelsApi->GetSkillsModelAnalytic");
            }


            FactSet.SDK.Cabot.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Cabot.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Cabot.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "accountPath", accountPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "benchmarkPath", benchmarkPath));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            if (attribute != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "attribute", attribute));
            }
            if (sector != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "sector", sector));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (holdings != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Cabot.Client.ClientUtils.ParameterToMultiMap("", "holdings", holdings));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Cabot.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSkillsModelAnalyticResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SkillsResponseRoot>("/models/skills", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSkillsModelAnalytic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
