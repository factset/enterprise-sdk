/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// SellTimingResponseOptions
    /// </summary>
    [DataContract(Name = "SellTimingResponseOptions")]
    public partial class SellTimingResponseOptions : IEquatable<SellTimingResponseOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SellTimingResponseOptions" /> class.
        /// </summary>
        /// <param name="highSellTimingValues">highSellTimingValues.</param>
        /// <param name="lowSellTimingValues">lowSellTimingValues.</param>
        /// <param name="sellTimingValues">sellTimingValues.</param>
        /// <param name="attribute">attribute.</param>
        public SellTimingResponseOptions(SellTimingModelAnalytics highSellTimingValues = default(SellTimingModelAnalytics), SellTimingModelAnalytics lowSellTimingValues = default(SellTimingModelAnalytics), SellTimingModelAnalytics sellTimingValues = default(SellTimingModelAnalytics), string attribute = default(string))
        {
            this.HighSellTimingValues = highSellTimingValues;
            this.LowSellTimingValues = lowSellTimingValues;
            this.SellTimingValues = sellTimingValues;
            this.Attribute = attribute;
        }

        /// <summary>
        /// Gets or Sets HighSellTimingValues
        /// </summary>
        [DataMember(Name = "highSellTimingValues", EmitDefaultValue = false)]
        public SellTimingModelAnalytics HighSellTimingValues { get; set; }

        /// <summary>
        /// Gets or Sets LowSellTimingValues
        /// </summary>
        [DataMember(Name = "lowSellTimingValues", EmitDefaultValue = false)]
        public SellTimingModelAnalytics LowSellTimingValues { get; set; }

        /// <summary>
        /// Gets or Sets SellTimingValues
        /// </summary>
        [DataMember(Name = "sellTimingValues", EmitDefaultValue = false)]
        public SellTimingModelAnalytics SellTimingValues { get; set; }

        /// <summary>
        /// Gets or Sets Attribute
        /// </summary>
        [DataMember(Name = "attribute", EmitDefaultValue = true)]
        public string Attribute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SellTimingResponseOptions {\n");
            sb.Append("  HighSellTimingValues: ").Append(HighSellTimingValues).Append("\n");
            sb.Append("  LowSellTimingValues: ").Append(LowSellTimingValues).Append("\n");
            sb.Append("  SellTimingValues: ").Append(SellTimingValues).Append("\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SellTimingResponseOptions);
        }

        /// <summary>
        /// Returns true if SellTimingResponseOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of SellTimingResponseOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellTimingResponseOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HighSellTimingValues == input.HighSellTimingValues ||
                    (this.HighSellTimingValues != null &&
                    this.HighSellTimingValues.Equals(input.HighSellTimingValues))
                ) && 
                (
                    this.LowSellTimingValues == input.LowSellTimingValues ||
                    (this.LowSellTimingValues != null &&
                    this.LowSellTimingValues.Equals(input.LowSellTimingValues))
                ) && 
                (
                    this.SellTimingValues == input.SellTimingValues ||
                    (this.SellTimingValues != null &&
                    this.SellTimingValues.Equals(input.SellTimingValues))
                ) && 
                (
                    this.Attribute == input.Attribute ||
                    (this.Attribute != null &&
                    this.Attribute.Equals(input.Attribute))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HighSellTimingValues != null)
                {
                    hashCode = (hashCode * 59) + this.HighSellTimingValues.GetHashCode();
                }
                if (this.LowSellTimingValues != null)
                {
                    hashCode = (hashCode * 59) + this.LowSellTimingValues.GetHashCode();
                }
                if (this.SellTimingValues != null)
                {
                    hashCode = (hashCode * 59) + this.SellTimingValues.GetHashCode();
                }
                if (this.Attribute != null)
                {
                    hashCode = (hashCode * 59) + this.Attribute.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
