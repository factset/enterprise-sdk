/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// This quantity expresses the difference between the portfolio weight and benchmark weight. Maximum overweight/underweight is calculated for the selected time period with positions further classified into large, medium and small sizes.
    /// </summary>
    [DataContract(Name = "ConstructionModelAnalytics_activeWeights")]
    public partial class ConstructionModelAnalyticsActiveWeights : IEquatable<ConstructionModelAnalyticsActiveWeights>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionModelAnalyticsActiveWeights" /> class.
        /// </summary>
        /// <param name="maxOver">maxOver.</param>
        /// <param name="maxUnder">The lowest observed difference between the portfolio weight and benchmark weight..</param>
        public ConstructionModelAnalyticsActiveWeights(ConstructionModelAnalyticsActiveWeightsMaxOver maxOver = default(ConstructionModelAnalyticsActiveWeightsMaxOver), decimal maxUnder = default(decimal))
        {
            this.MaxOver = maxOver;
            this.MaxUnder = maxUnder;
        }

        /// <summary>
        /// Gets or Sets MaxOver
        /// </summary>
        [DataMember(Name = "maxOver", EmitDefaultValue = false)]
        public ConstructionModelAnalyticsActiveWeightsMaxOver MaxOver { get; set; }

        /// <summary>
        /// The lowest observed difference between the portfolio weight and benchmark weight.
        /// </summary>
        /// <value>The lowest observed difference between the portfolio weight and benchmark weight.</value>
        [DataMember(Name = "maxUnder", EmitDefaultValue = false)]
        public decimal MaxUnder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConstructionModelAnalyticsActiveWeights {\n");
            sb.Append("  MaxOver: ").Append(MaxOver).Append("\n");
            sb.Append("  MaxUnder: ").Append(MaxUnder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstructionModelAnalyticsActiveWeights);
        }

        /// <summary>
        /// Returns true if ConstructionModelAnalyticsActiveWeights instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstructionModelAnalyticsActiveWeights to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstructionModelAnalyticsActiveWeights input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxOver == input.MaxOver ||
                    (this.MaxOver != null &&
                    this.MaxOver.Equals(input.MaxOver))
                ) && 
                (
                    this.MaxUnder == input.MaxUnder ||
                    this.MaxUnder.Equals(input.MaxUnder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxOver != null)
                {
                    hashCode = (hashCode * 59) + this.MaxOver.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxUnder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
