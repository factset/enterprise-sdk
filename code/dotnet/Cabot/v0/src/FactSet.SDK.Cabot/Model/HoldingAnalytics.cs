/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// HoldingAnalytics
    /// </summary>
    [DataContract(Name = "HoldingAnalytics")]
    public partial class HoldingAnalytics : IEquatable<HoldingAnalytics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingAnalytics" /> class.
        /// </summary>
        /// <param name="incrementalBenefit">Impact of the position on your portfolio..</param>
        /// <param name="name">Company name..</param>
        /// <param name="region">Company region..</param>
        /// <param name="sector">Company sector..</param>
        /// <param name="ticker">Ticker symbol..</param>
        public HoldingAnalytics(Object incrementalBenefit = default(Object), string name = default(string), string region = default(string), string sector = default(string), string ticker = default(string))
        {
            this.IncrementalBenefit = incrementalBenefit;
            this.Name = name;
            this.Region = region;
            this.Sector = sector;
            this.Ticker = ticker;
        }

        /// <summary>
        /// Impact of the position on your portfolio.
        /// </summary>
        /// <value>Impact of the position on your portfolio.</value>
        [DataMember(Name = "incrementalBenefit", EmitDefaultValue = false)]
        public Object IncrementalBenefit { get; set; }

        /// <summary>
        /// Company name.
        /// </summary>
        /// <value>Company name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Company region.
        /// </summary>
        /// <value>Company region.</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Company sector.
        /// </summary>
        /// <value>Company sector.</value>
        [DataMember(Name = "sector", EmitDefaultValue = false)]
        public string Sector { get; set; }

        /// <summary>
        /// Ticker symbol.
        /// </summary>
        /// <value>Ticker symbol.</value>
        [DataMember(Name = "ticker", EmitDefaultValue = false)]
        public string Ticker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HoldingAnalytics {\n");
            sb.Append("  IncrementalBenefit: ").Append(IncrementalBenefit).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HoldingAnalytics);
        }

        /// <summary>
        /// Returns true if HoldingAnalytics instances are equal
        /// </summary>
        /// <param name="input">Instance of HoldingAnalytics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoldingAnalytics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IncrementalBenefit == input.IncrementalBenefit ||
                    (this.IncrementalBenefit != null &&
                    this.IncrementalBenefit.Equals(input.IncrementalBenefit))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Sector == input.Sector ||
                    (this.Sector != null &&
                    this.Sector.Equals(input.Sector))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncrementalBenefit != null)
                {
                    hashCode = (hashCode * 59) + this.IncrementalBenefit.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.Sector != null)
                {
                    hashCode = (hashCode * 59) + this.Sector.GetHashCode();
                }
                if (this.Ticker != null)
                {
                    hashCode = (hashCode * 59) + this.Ticker.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
