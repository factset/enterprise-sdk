/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// AddTrimResponseOptions
    /// </summary>
    [DataContract(Name = "AddTrimResponseOptions")]
    public partial class AddTrimResponseOptions : IEquatable<AddTrimResponseOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTrimResponseOptions" /> class.
        /// </summary>
        /// <param name="addTrimValues">addTrimValues.</param>
        /// <param name="attribute">attribute.</param>
        /// <param name="highAddTrimValues">highAddTrimValues.</param>
        /// <param name="holdingsData">holdingsData.</param>
        /// <param name="lowAddTrimValues">lowAddTrimValues.</param>
        public AddTrimResponseOptions(AddTrimModelAnalytics addTrimValues = default(AddTrimModelAnalytics), string attribute = default(string), AddTrimModelAnalytics highAddTrimValues = default(AddTrimModelAnalytics), HoldingsResponseOptions holdingsData = default(HoldingsResponseOptions), AddTrimModelAnalytics lowAddTrimValues = default(AddTrimModelAnalytics))
        {
            this.AddTrimValues = addTrimValues;
            this.Attribute = attribute;
            this.HighAddTrimValues = highAddTrimValues;
            this.HoldingsData = holdingsData;
            this.LowAddTrimValues = lowAddTrimValues;
        }

        /// <summary>
        /// Gets or Sets AddTrimValues
        /// </summary>
        [DataMember(Name = "addTrimValues", EmitDefaultValue = false)]
        public AddTrimModelAnalytics AddTrimValues { get; set; }

        /// <summary>
        /// Gets or Sets Attribute
        /// </summary>
        [DataMember(Name = "attribute", EmitDefaultValue = true)]
        public string Attribute { get; set; }

        /// <summary>
        /// Gets or Sets HighAddTrimValues
        /// </summary>
        [DataMember(Name = "highAddTrimValues", EmitDefaultValue = false)]
        public AddTrimModelAnalytics HighAddTrimValues { get; set; }

        /// <summary>
        /// Gets or Sets HoldingsData
        /// </summary>
        [DataMember(Name = "holdingsData", EmitDefaultValue = false)]
        public HoldingsResponseOptions HoldingsData { get; set; }

        /// <summary>
        /// Gets or Sets LowAddTrimValues
        /// </summary>
        [DataMember(Name = "lowAddTrimValues", EmitDefaultValue = false)]
        public AddTrimModelAnalytics LowAddTrimValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddTrimResponseOptions {\n");
            sb.Append("  AddTrimValues: ").Append(AddTrimValues).Append("\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("  HighAddTrimValues: ").Append(HighAddTrimValues).Append("\n");
            sb.Append("  HoldingsData: ").Append(HoldingsData).Append("\n");
            sb.Append("  LowAddTrimValues: ").Append(LowAddTrimValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddTrimResponseOptions);
        }

        /// <summary>
        /// Returns true if AddTrimResponseOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of AddTrimResponseOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddTrimResponseOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddTrimValues == input.AddTrimValues ||
                    (this.AddTrimValues != null &&
                    this.AddTrimValues.Equals(input.AddTrimValues))
                ) && 
                (
                    this.Attribute == input.Attribute ||
                    (this.Attribute != null &&
                    this.Attribute.Equals(input.Attribute))
                ) && 
                (
                    this.HighAddTrimValues == input.HighAddTrimValues ||
                    (this.HighAddTrimValues != null &&
                    this.HighAddTrimValues.Equals(input.HighAddTrimValues))
                ) && 
                (
                    this.HoldingsData == input.HoldingsData ||
                    (this.HoldingsData != null &&
                    this.HoldingsData.Equals(input.HoldingsData))
                ) && 
                (
                    this.LowAddTrimValues == input.LowAddTrimValues ||
                    (this.LowAddTrimValues != null &&
                    this.LowAddTrimValues.Equals(input.LowAddTrimValues))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddTrimValues != null)
                {
                    hashCode = (hashCode * 59) + this.AddTrimValues.GetHashCode();
                }
                if (this.Attribute != null)
                {
                    hashCode = (hashCode * 59) + this.Attribute.GetHashCode();
                }
                if (this.HighAddTrimValues != null)
                {
                    hashCode = (hashCode * 59) + this.HighAddTrimValues.GetHashCode();
                }
                if (this.HoldingsData != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingsData.GetHashCode();
                }
                if (this.LowAddTrimValues != null)
                {
                    hashCode = (hashCode * 59) + this.LowAddTrimValues.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
