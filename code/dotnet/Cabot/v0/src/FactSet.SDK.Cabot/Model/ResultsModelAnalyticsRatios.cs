/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// ResultsModelAnalyticsRatios
    /// </summary>
    [DataContract(Name = "ResultsModelAnalytics_ratios")]
    public partial class ResultsModelAnalyticsRatios : IEquatable<ResultsModelAnalyticsRatios>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultsModelAnalyticsRatios" /> class.
        /// </summary>
        /// <param name="informationRatio">This ratio expresses the level of active return (i.e., portfolio return in excess of the benchmark) per unit of risk within the active return (i.e., standard deviation of the active returns: see tracking error). The information ratio is a common proxy for inferring manager skill in that it provides insight into the consistency of active return..</param>
        /// <param name="sharpeRatio">The Sharpe ratio is a measure of excess return, per unit of total risk. It provides insight into the price being paid (portfolio return in excess of the risk free rate) per unit of risk being taken (standard deviation of portfolio returns)..</param>
        /// <param name="treynorRatio">This metric measures excess return per unit of systematic risk. It provides insight into the price being paid (portfolio return in excess of the risk free rate) per unit of systematic risk being taken (portfolio beta)..</param>
        public ResultsModelAnalyticsRatios(decimal informationRatio = default(decimal), decimal sharpeRatio = default(decimal), decimal treynorRatio = default(decimal))
        {
            this.InformationRatio = informationRatio;
            this.SharpeRatio = sharpeRatio;
            this.TreynorRatio = treynorRatio;
        }

        /// <summary>
        /// This ratio expresses the level of active return (i.e., portfolio return in excess of the benchmark) per unit of risk within the active return (i.e., standard deviation of the active returns: see tracking error). The information ratio is a common proxy for inferring manager skill in that it provides insight into the consistency of active return.
        /// </summary>
        /// <value>This ratio expresses the level of active return (i.e., portfolio return in excess of the benchmark) per unit of risk within the active return (i.e., standard deviation of the active returns: see tracking error). The information ratio is a common proxy for inferring manager skill in that it provides insight into the consistency of active return.</value>
        [DataMember(Name = "informationRatio", EmitDefaultValue = false)]
        public decimal InformationRatio { get; set; }

        /// <summary>
        /// The Sharpe ratio is a measure of excess return, per unit of total risk. It provides insight into the price being paid (portfolio return in excess of the risk free rate) per unit of risk being taken (standard deviation of portfolio returns).
        /// </summary>
        /// <value>The Sharpe ratio is a measure of excess return, per unit of total risk. It provides insight into the price being paid (portfolio return in excess of the risk free rate) per unit of risk being taken (standard deviation of portfolio returns).</value>
        [DataMember(Name = "sharpeRatio", EmitDefaultValue = false)]
        public decimal SharpeRatio { get; set; }

        /// <summary>
        /// This metric measures excess return per unit of systematic risk. It provides insight into the price being paid (portfolio return in excess of the risk free rate) per unit of systematic risk being taken (portfolio beta).
        /// </summary>
        /// <value>This metric measures excess return per unit of systematic risk. It provides insight into the price being paid (portfolio return in excess of the risk free rate) per unit of systematic risk being taken (portfolio beta).</value>
        [DataMember(Name = "treynorRatio", EmitDefaultValue = false)]
        public decimal TreynorRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultsModelAnalyticsRatios {\n");
            sb.Append("  InformationRatio: ").Append(InformationRatio).Append("\n");
            sb.Append("  SharpeRatio: ").Append(SharpeRatio).Append("\n");
            sb.Append("  TreynorRatio: ").Append(TreynorRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultsModelAnalyticsRatios);
        }

        /// <summary>
        /// Returns true if ResultsModelAnalyticsRatios instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultsModelAnalyticsRatios to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultsModelAnalyticsRatios input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InformationRatio == input.InformationRatio ||
                    this.InformationRatio.Equals(input.InformationRatio)
                ) && 
                (
                    this.SharpeRatio == input.SharpeRatio ||
                    this.SharpeRatio.Equals(input.SharpeRatio)
                ) && 
                (
                    this.TreynorRatio == input.TreynorRatio ||
                    this.TreynorRatio.Equals(input.TreynorRatio)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InformationRatio.GetHashCode();
                hashCode = (hashCode * 59) + this.SharpeRatio.GetHashCode();
                hashCode = (hashCode * 59) + this.TreynorRatio.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
