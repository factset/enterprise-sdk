/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// ResultsModelAnalytics
    /// </summary>
    [DataContract(Name = "ResultsModelAnalytics")]
    public partial class ResultsModelAnalytics : IEquatable<ResultsModelAnalytics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultsModelAnalytics" /> class.
        /// </summary>
        /// <param name="captures">captures.</param>
        /// <param name="ratios">ratios.</param>
        /// <param name="returns">returns.</param>
        /// <param name="risk">risk.</param>
        /// <param name="statistics">statistics.</param>
        public ResultsModelAnalytics(ResultsModelAnalyticsCaptures captures = default(ResultsModelAnalyticsCaptures), ResultsModelAnalyticsRatios ratios = default(ResultsModelAnalyticsRatios), ResultsModelAnalyticsReturns returns = default(ResultsModelAnalyticsReturns), ResultsModelAnalyticsRisk risk = default(ResultsModelAnalyticsRisk), ResultsModelAnalyticsStatistics statistics = default(ResultsModelAnalyticsStatistics))
        {
            this.Captures = captures;
            this.Ratios = ratios;
            this.Returns = returns;
            this.Risk = risk;
            this.Statistics = statistics;
        }

        /// <summary>
        /// Gets or Sets Captures
        /// </summary>
        [DataMember(Name = "captures", EmitDefaultValue = false)]
        public ResultsModelAnalyticsCaptures Captures { get; set; }

        /// <summary>
        /// Gets or Sets Ratios
        /// </summary>
        [DataMember(Name = "ratios", EmitDefaultValue = false)]
        public ResultsModelAnalyticsRatios Ratios { get; set; }

        /// <summary>
        /// Gets or Sets Returns
        /// </summary>
        [DataMember(Name = "returns", EmitDefaultValue = false)]
        public ResultsModelAnalyticsReturns Returns { get; set; }

        /// <summary>
        /// Gets or Sets Risk
        /// </summary>
        [DataMember(Name = "risk", EmitDefaultValue = false)]
        public ResultsModelAnalyticsRisk Risk { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [DataMember(Name = "statistics", EmitDefaultValue = false)]
        public ResultsModelAnalyticsStatistics Statistics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultsModelAnalytics {\n");
            sb.Append("  Captures: ").Append(Captures).Append("\n");
            sb.Append("  Ratios: ").Append(Ratios).Append("\n");
            sb.Append("  Returns: ").Append(Returns).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultsModelAnalytics);
        }

        /// <summary>
        /// Returns true if ResultsModelAnalytics instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultsModelAnalytics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultsModelAnalytics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Captures == input.Captures ||
                    (this.Captures != null &&
                    this.Captures.Equals(input.Captures))
                ) && 
                (
                    this.Ratios == input.Ratios ||
                    (this.Ratios != null &&
                    this.Ratios.Equals(input.Ratios))
                ) && 
                (
                    this.Returns == input.Returns ||
                    (this.Returns != null &&
                    this.Returns.Equals(input.Returns))
                ) && 
                (
                    this.Risk == input.Risk ||
                    (this.Risk != null &&
                    this.Risk.Equals(input.Risk))
                ) && 
                (
                    this.Statistics == input.Statistics ||
                    (this.Statistics != null &&
                    this.Statistics.Equals(input.Statistics))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Captures != null)
                {
                    hashCode = (hashCode * 59) + this.Captures.GetHashCode();
                }
                if (this.Ratios != null)
                {
                    hashCode = (hashCode * 59) + this.Ratios.GetHashCode();
                }
                if (this.Returns != null)
                {
                    hashCode = (hashCode * 59) + this.Returns.GetHashCode();
                }
                if (this.Risk != null)
                {
                    hashCode = (hashCode * 59) + this.Risk.GetHashCode();
                }
                if (this.Statistics != null)
                {
                    hashCode = (hashCode * 59) + this.Statistics.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
