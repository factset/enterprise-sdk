/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// SkillsRequestBody
    /// </summary>
    [DataContract(Name = "SkillsRequestBody")]
    public partial class SkillsRequestBody : IEquatable<SkillsRequestBody>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Attribute
        /// </summary>
        [DataMember(Name = "attribute", EmitDefaultValue = false)]
        public Attributes? Attribute { get; set; }

        /// <summary>
        /// Gets or Sets Holdings
        /// </summary>
        [DataMember(Name = "holdings", EmitDefaultValue = false)]
        public SkillsHoldings? Holdings { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SkillsRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SkillsRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SkillsRequestBody" /> class.
        /// </summary>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for. (required).</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for. (required).</param>
        /// <param name="period">For which period you want to retrieve the data. (required).</param>
        /// <param name="attribute">attribute.</param>
        /// <param name="sector">Represents the sector based on the company&#39;s industry breakdown..</param>
        /// <param name="region">Region of domicile represents the region based on the company&#39;s primary listing..</param>
        /// <param name="holdings">holdings.</param>
        /// <param name="customClassifications">A map-like structure representing key-value pairs of custom classifications. This differs from the default classifications such as region and sector, for which we have different query parameters. If both are provided, the API will choose which one to use based on your portfolio..</param>
        public SkillsRequestBody(string accountPath, string benchmarkPath, string period,Attributes attribute = default(Attributes), string sector = default(string), string region = default(string), SkillsHoldings holdings = default(SkillsHoldings), Dictionary<string, string> customClassifications = default(Dictionary<string, string>))
        {
            // to ensure "accountPath" is required (not null)
            if (accountPath == null) {
                throw new ArgumentNullException("accountPath is a required property for SkillsRequestBody and cannot be null");
            }
            this.AccountPath = accountPath;
            // to ensure "benchmarkPath" is required (not null)
            if (benchmarkPath == null) {
                throw new ArgumentNullException("benchmarkPath is a required property for SkillsRequestBody and cannot be null");
            }
            this.BenchmarkPath = benchmarkPath;
            // to ensure "period" is required (not null)
            if (period == null) {
                throw new ArgumentNullException("period is a required property for SkillsRequestBody and cannot be null");
            }
            this.Period = period;
            this.Attribute = attribute;
            this.Sector = sector;
            this.Region = region;
            this.Holdings = holdings;
            this.CustomClassifications = customClassifications;
        }

        /// <summary>
        /// The account path of the portfolio you want to retrieve the data for.
        /// </summary>
        /// <value>The account path of the portfolio you want to retrieve the data for.</value>
        [DataMember(Name = "accountPath", IsRequired = true, EmitDefaultValue = false)]
        public string AccountPath { get; set; }

        /// <summary>
        /// The path of the benchmark you want to retrieve the data for.
        /// </summary>
        /// <value>The path of the benchmark you want to retrieve the data for.</value>
        [DataMember(Name = "benchmarkPath", IsRequired = true, EmitDefaultValue = false)]
        public string BenchmarkPath { get; set; }

        /// <summary>
        /// For which period you want to retrieve the data.
        /// </summary>
        /// <value>For which period you want to retrieve the data.</value>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = false)]
        public string Period { get; set; }

        /// <summary>
        /// Represents the sector based on the company&#39;s industry breakdown.
        /// </summary>
        /// <value>Represents the sector based on the company&#39;s industry breakdown.</value>
        [DataMember(Name = "sector", EmitDefaultValue = false)]
        public string Sector { get; set; }

        /// <summary>
        /// Region of domicile represents the region based on the company&#39;s primary listing.
        /// </summary>
        /// <value>Region of domicile represents the region based on the company&#39;s primary listing.</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// A map-like structure representing key-value pairs of custom classifications. This differs from the default classifications such as region and sector, for which we have different query parameters. If both are provided, the API will choose which one to use based on your portfolio.
        /// </summary>
        /// <value>A map-like structure representing key-value pairs of custom classifications. This differs from the default classifications such as region and sector, for which we have different query parameters. If both are provided, the API will choose which one to use based on your portfolio.</value>
        [DataMember(Name = "customClassifications", EmitDefaultValue = false)]
        public Dictionary<string, string> CustomClassifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SkillsRequestBody {\n");
            sb.Append("  AccountPath: ").Append(AccountPath).Append("\n");
            sb.Append("  BenchmarkPath: ").Append(BenchmarkPath).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Holdings: ").Append(Holdings).Append("\n");
            sb.Append("  CustomClassifications: ").Append(CustomClassifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SkillsRequestBody);
        }

        /// <summary>
        /// Returns true if SkillsRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SkillsRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SkillsRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountPath == input.AccountPath ||
                    (this.AccountPath != null &&
                    this.AccountPath.Equals(input.AccountPath))
                ) && 
                (
                    this.BenchmarkPath == input.BenchmarkPath ||
                    (this.BenchmarkPath != null &&
                    this.BenchmarkPath.Equals(input.BenchmarkPath))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.Attribute == input.Attribute ||
                    this.Attribute.Equals(input.Attribute)
                ) && 
                (
                    this.Sector == input.Sector ||
                    (this.Sector != null &&
                    this.Sector.Equals(input.Sector))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Holdings == input.Holdings ||
                    this.Holdings.Equals(input.Holdings)
                ) && 
                (
                    this.CustomClassifications == input.CustomClassifications ||
                    this.CustomClassifications != null &&
                    input.CustomClassifications != null &&
                    this.CustomClassifications.SequenceEqual(input.CustomClassifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountPath != null)
                {
                    hashCode = (hashCode * 59) + this.AccountPath.GetHashCode();
                }
                if (this.BenchmarkPath != null)
                {
                    hashCode = (hashCode * 59) + this.BenchmarkPath.GetHashCode();
                }
                if (this.Period != null)
                {
                    hashCode = (hashCode * 59) + this.Period.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Attribute.GetHashCode();
                if (this.Sector != null)
                {
                    hashCode = (hashCode * 59) + this.Sector.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Holdings.GetHashCode();
                if (this.CustomClassifications != null)
                {
                    hashCode = (hashCode * 59) + this.CustomClassifications.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
