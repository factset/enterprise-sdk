/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// ConstructionRequestBody
    /// </summary>
    [DataContract(Name = "ConstructionRequestBody")]
    public partial class ConstructionRequestBody : IEquatable<ConstructionRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConstructionRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionRequestBody" /> class.
        /// </summary>
        /// <param name="accountPath">The account path of the portfolio you want to retrieve the data for. (required).</param>
        /// <param name="benchmarkPath">The path of the benchmark you want to retrieve the data for. (required).</param>
        /// <param name="period">For which period you want to retrieve the data. (required).</param>
        public ConstructionRequestBody(string accountPath, string benchmarkPath, string period)
        {
            // to ensure "accountPath" is required (not null)
            if (accountPath == null) {
                throw new ArgumentNullException("accountPath is a required property for ConstructionRequestBody and cannot be null");
            }
            this.AccountPath = accountPath;
            // to ensure "benchmarkPath" is required (not null)
            if (benchmarkPath == null) {
                throw new ArgumentNullException("benchmarkPath is a required property for ConstructionRequestBody and cannot be null");
            }
            this.BenchmarkPath = benchmarkPath;
            // to ensure "period" is required (not null)
            if (period == null) {
                throw new ArgumentNullException("period is a required property for ConstructionRequestBody and cannot be null");
            }
            this.Period = period;
        }

        /// <summary>
        /// The account path of the portfolio you want to retrieve the data for.
        /// </summary>
        /// <value>The account path of the portfolio you want to retrieve the data for.</value>
        [DataMember(Name = "accountPath", IsRequired = true, EmitDefaultValue = false)]
        public string AccountPath { get; set; }

        /// <summary>
        /// The path of the benchmark you want to retrieve the data for.
        /// </summary>
        /// <value>The path of the benchmark you want to retrieve the data for.</value>
        [DataMember(Name = "benchmarkPath", IsRequired = true, EmitDefaultValue = false)]
        public string BenchmarkPath { get; set; }

        /// <summary>
        /// For which period you want to retrieve the data.
        /// </summary>
        /// <value>For which period you want to retrieve the data.</value>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = false)]
        public string Period { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConstructionRequestBody {\n");
            sb.Append("  AccountPath: ").Append(AccountPath).Append("\n");
            sb.Append("  BenchmarkPath: ").Append(BenchmarkPath).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstructionRequestBody);
        }

        /// <summary>
        /// Returns true if ConstructionRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstructionRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstructionRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountPath == input.AccountPath ||
                    (this.AccountPath != null &&
                    this.AccountPath.Equals(input.AccountPath))
                ) && 
                (
                    this.BenchmarkPath == input.BenchmarkPath ||
                    (this.BenchmarkPath != null &&
                    this.BenchmarkPath.Equals(input.BenchmarkPath))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountPath != null)
                {
                    hashCode = (hashCode * 59) + this.AccountPath.GetHashCode();
                }
                if (this.BenchmarkPath != null)
                {
                    hashCode = (hashCode * 59) + this.BenchmarkPath.GetHashCode();
                }
                if (this.Period != null)
                {
                    hashCode = (hashCode * 59) + this.Period.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
