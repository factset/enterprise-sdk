/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// RampUpResponseOptions
    /// </summary>
    [DataContract(Name = "RampUpResponseOptions")]
    public partial class RampUpResponseOptions : IEquatable<RampUpResponseOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RampUpResponseOptions" /> class.
        /// </summary>
        /// <param name="attribute">attribute.</param>
        /// <param name="highRampUpValues">highRampUpValues.</param>
        /// <param name="holdingsData">holdingsData.</param>
        /// <param name="lowRampUpValues">lowRampUpValues.</param>
        /// <param name="rampUpValues">rampUpValues.</param>
        public RampUpResponseOptions(string attribute = default(string), List<RampUpModelAnalytics> highRampUpValues = default(List<RampUpModelAnalytics>), HoldingsResponseOptions holdingsData = default(HoldingsResponseOptions), List<RampUpModelAnalytics> lowRampUpValues = default(List<RampUpModelAnalytics>), List<RampUpModelAnalytics> rampUpValues = default(List<RampUpModelAnalytics>))
        {
            this.Attribute = attribute;
            this.HighRampUpValues = highRampUpValues;
            this.HoldingsData = holdingsData;
            this.LowRampUpValues = lowRampUpValues;
            this.RampUpValues = rampUpValues;
        }

        /// <summary>
        /// Gets or Sets Attribute
        /// </summary>
        [DataMember(Name = "attribute", EmitDefaultValue = true)]
        public string Attribute { get; set; }

        /// <summary>
        /// Gets or Sets HighRampUpValues
        /// </summary>
        [DataMember(Name = "highRampUpValues", EmitDefaultValue = false)]
        public List<RampUpModelAnalytics> HighRampUpValues { get; set; }

        /// <summary>
        /// Gets or Sets HoldingsData
        /// </summary>
        [DataMember(Name = "holdingsData", EmitDefaultValue = false)]
        public HoldingsResponseOptions HoldingsData { get; set; }

        /// <summary>
        /// Gets or Sets LowRampUpValues
        /// </summary>
        [DataMember(Name = "lowRampUpValues", EmitDefaultValue = false)]
        public List<RampUpModelAnalytics> LowRampUpValues { get; set; }

        /// <summary>
        /// Gets or Sets RampUpValues
        /// </summary>
        [DataMember(Name = "rampUpValues", EmitDefaultValue = false)]
        public List<RampUpModelAnalytics> RampUpValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RampUpResponseOptions {\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("  HighRampUpValues: ").Append(HighRampUpValues).Append("\n");
            sb.Append("  HoldingsData: ").Append(HoldingsData).Append("\n");
            sb.Append("  LowRampUpValues: ").Append(LowRampUpValues).Append("\n");
            sb.Append("  RampUpValues: ").Append(RampUpValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RampUpResponseOptions);
        }

        /// <summary>
        /// Returns true if RampUpResponseOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of RampUpResponseOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RampUpResponseOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attribute == input.Attribute ||
                    (this.Attribute != null &&
                    this.Attribute.Equals(input.Attribute))
                ) && 
                (
                    this.HighRampUpValues == input.HighRampUpValues ||
                    this.HighRampUpValues != null &&
                    input.HighRampUpValues != null &&
                    this.HighRampUpValues.SequenceEqual(input.HighRampUpValues)
                ) && 
                (
                    this.HoldingsData == input.HoldingsData ||
                    (this.HoldingsData != null &&
                    this.HoldingsData.Equals(input.HoldingsData))
                ) && 
                (
                    this.LowRampUpValues == input.LowRampUpValues ||
                    this.LowRampUpValues != null &&
                    input.LowRampUpValues != null &&
                    this.LowRampUpValues.SequenceEqual(input.LowRampUpValues)
                ) && 
                (
                    this.RampUpValues == input.RampUpValues ||
                    this.RampUpValues != null &&
                    input.RampUpValues != null &&
                    this.RampUpValues.SequenceEqual(input.RampUpValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attribute != null)
                {
                    hashCode = (hashCode * 59) + this.Attribute.GetHashCode();
                }
                if (this.HighRampUpValues != null)
                {
                    hashCode = (hashCode * 59) + this.HighRampUpValues.GetHashCode();
                }
                if (this.HoldingsData != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingsData.GetHashCode();
                }
                if (this.LowRampUpValues != null)
                {
                    hashCode = (hashCode * 59) + this.LowRampUpValues.GetHashCode();
                }
                if (this.RampUpValues != null)
                {
                    hashCode = (hashCode * 59) + this.RampUpValues.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
