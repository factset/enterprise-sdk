/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// ResultsModelAnalyticsCaptures
    /// </summary>
    [DataContract(Name = "ResultsModelAnalytics_captures")]
    public partial class ResultsModelAnalyticsCaptures : IEquatable<ResultsModelAnalyticsCaptures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultsModelAnalyticsCaptures" /> class.
        /// </summary>
        /// <param name="downside">Downside capture is typically viewed as a defensive characteristic or an intuitive measure of risk management. Values of less than 100% indicate that the portfolio returns generally go down less than does the market..</param>
        /// <param name="upside">Upside capture quantifies how well the portfolio returns rise in comparison to a market up tick. A value greater than 100% indicates the portfolio captures gains at a rate disproportional to the market..</param>
        public ResultsModelAnalyticsCaptures(decimal downside = default(decimal), decimal upside = default(decimal))
        {
            this.Downside = downside;
            this.Upside = upside;
        }

        /// <summary>
        /// Downside capture is typically viewed as a defensive characteristic or an intuitive measure of risk management. Values of less than 100% indicate that the portfolio returns generally go down less than does the market.
        /// </summary>
        /// <value>Downside capture is typically viewed as a defensive characteristic or an intuitive measure of risk management. Values of less than 100% indicate that the portfolio returns generally go down less than does the market.</value>
        [DataMember(Name = "downside", EmitDefaultValue = false)]
        public decimal Downside { get; set; }

        /// <summary>
        /// Upside capture quantifies how well the portfolio returns rise in comparison to a market up tick. A value greater than 100% indicates the portfolio captures gains at a rate disproportional to the market.
        /// </summary>
        /// <value>Upside capture quantifies how well the portfolio returns rise in comparison to a market up tick. A value greater than 100% indicates the portfolio captures gains at a rate disproportional to the market.</value>
        [DataMember(Name = "upside", EmitDefaultValue = false)]
        public decimal Upside { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultsModelAnalyticsCaptures {\n");
            sb.Append("  Downside: ").Append(Downside).Append("\n");
            sb.Append("  Upside: ").Append(Upside).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultsModelAnalyticsCaptures);
        }

        /// <summary>
        /// Returns true if ResultsModelAnalyticsCaptures instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultsModelAnalyticsCaptures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultsModelAnalyticsCaptures input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Downside == input.Downside ||
                    this.Downside.Equals(input.Downside)
                ) && 
                (
                    this.Upside == input.Upside ||
                    this.Upside.Equals(input.Upside)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Downside.GetHashCode();
                hashCode = (hashCode * 59) + this.Upside.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
