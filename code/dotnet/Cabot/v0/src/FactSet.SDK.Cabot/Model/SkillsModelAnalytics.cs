/*
 * Cabot Models API
 *
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Cabot.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Cabot.Model
{
    /// <summary>
    /// SkillsModelAnalytics
    /// </summary>
    [DataContract(Name = "SkillsModelAnalytics")]
    public partial class SkillsModelAnalytics : IEquatable<SkillsModelAnalytics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SkillsModelAnalytics" /> class.
        /// </summary>
        /// <param name="buySkill">This measures effectiveness in name selection..</param>
        /// <param name="sellSkill">This quantifies the effectiveness of the sell discipline (final sells). It considers the impact from selling younger positions (i.e., too quickly, too slowly, done well) and from selling older positions (i.e., too quickly, too slowly, done well)..</param>
        /// <param name="sizingSkill">This quantifies the benefit of active sizing decisions including initial position build up and subsequent trims and adds..</param>
        public SkillsModelAnalytics(decimal buySkill = default(decimal), decimal sellSkill = default(decimal), decimal sizingSkill = default(decimal))
        {
            this.BuySkill = buySkill;
            this.SellSkill = sellSkill;
            this.SizingSkill = sizingSkill;
        }

        /// <summary>
        /// This measures effectiveness in name selection.
        /// </summary>
        /// <value>This measures effectiveness in name selection.</value>
        [DataMember(Name = "buySkill", EmitDefaultValue = false)]
        public decimal BuySkill { get; set; }

        /// <summary>
        /// This quantifies the effectiveness of the sell discipline (final sells). It considers the impact from selling younger positions (i.e., too quickly, too slowly, done well) and from selling older positions (i.e., too quickly, too slowly, done well).
        /// </summary>
        /// <value>This quantifies the effectiveness of the sell discipline (final sells). It considers the impact from selling younger positions (i.e., too quickly, too slowly, done well) and from selling older positions (i.e., too quickly, too slowly, done well).</value>
        [DataMember(Name = "sellSkill", EmitDefaultValue = false)]
        public decimal SellSkill { get; set; }

        /// <summary>
        /// This quantifies the benefit of active sizing decisions including initial position build up and subsequent trims and adds.
        /// </summary>
        /// <value>This quantifies the benefit of active sizing decisions including initial position build up and subsequent trims and adds.</value>
        [DataMember(Name = "sizingSkill", EmitDefaultValue = false)]
        public decimal SizingSkill { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SkillsModelAnalytics {\n");
            sb.Append("  BuySkill: ").Append(BuySkill).Append("\n");
            sb.Append("  SellSkill: ").Append(SellSkill).Append("\n");
            sb.Append("  SizingSkill: ").Append(SizingSkill).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SkillsModelAnalytics);
        }

        /// <summary>
        /// Returns true if SkillsModelAnalytics instances are equal
        /// </summary>
        /// <param name="input">Instance of SkillsModelAnalytics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SkillsModelAnalytics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BuySkill == input.BuySkill ||
                    this.BuySkill.Equals(input.BuySkill)
                ) && 
                (
                    this.SellSkill == input.SellSkill ||
                    this.SellSkill.Equals(input.SellSkill)
                ) && 
                (
                    this.SizingSkill == input.SizingSkill ||
                    this.SizingSkill.Equals(input.SizingSkill)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BuySkill.GetHashCode();
                hashCode = (hashCode * 59) + this.SellSkill.GetHashCode();
                hashCode = (hashCode * 59) + this.SizingSkill.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
