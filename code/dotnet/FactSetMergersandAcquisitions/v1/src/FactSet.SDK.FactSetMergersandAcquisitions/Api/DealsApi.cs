/*
 * FactSet Mergers and Acquisitions API
 *
 * The FactSet Mergers and Acquisitions API provides access to key transactions and pricing metrics on over 60,000 globally traded deals. Reference a Global Universe of Mergers and Acquisitions (M&A) transactions where the target of the deal is a Publicly traded Company. Review premiums, multiples and fundamental data to gather insights on deals and create predictive models based on different deal characteristics.    Monetary values returned by this API are converted and represented in USD.    This API is allows a limit of 10 requests per second and a maximum of 10 concurrent requests. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetMergersandAcquisitions.Client;
using FactSet.SDK.FactSetMergersandAcquisitions.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetMergersandAcquisitions.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns details for a list of companies.
        /// </summary>
        /// <remarks>
        /// Gets deals for a specified list of companies within a date range. Deals returned are any in which the requested company is involved as either the buyer, seller, or target. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <returns>DealsResponse</returns>
        DealsResponse GetDealsByCompanyList(DealsRequest dealsRequest);

        /// <summary>
        /// Returns details for a list of companies.
        /// </summary>
        /// <remarks>
        /// Gets deals for a specified list of companies within a date range. Deals returned are any in which the requested company is involved as either the buyer, seller, or target. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <returns>ApiResponse of DealsResponse</returns>
        ApiResponse<DealsResponse> GetDealsByCompanyListWithHttpInfo(DealsRequest dealsRequest);
        /// <summary>
        /// Returns details for specified deals.
        /// </summary>
        /// <remarks>
        /// Gets deal details for a specified list of FactSet deal identifiers. Monetary values returned by this API are converted and represented in USD. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsRequest">Request object for &#x60;Deal Details&#x60;.</param>
        /// <returns>DetailsResponse</returns>
        DetailsResponse GetDealsDetailsList(DetailsRequest detailsRequest);

        /// <summary>
        /// Returns details for specified deals.
        /// </summary>
        /// <remarks>
        /// Gets deal details for a specified list of FactSet deal identifiers. Monetary values returned by this API are converted and represented in USD. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsRequest">Request object for &#x60;Deal Details&#x60;.</param>
        /// <returns>ApiResponse of DetailsResponse</returns>
        ApiResponse<DetailsResponse> GetDealsDetailsListWithHttpInfo(DetailsRequest detailsRequest);
        /// <summary>
        /// Returns a list of deals in which the target is a public company.
        /// </summary>
        /// <remarks>
        /// Gets deals in which the target is a public company for a specified date range and status. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsPublicRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <returns>DealsPublicResponse</returns>
        DealsPublicResponse GetPublicTargetDealsList(DealsPublicRequest dealsPublicRequest);

        /// <summary>
        /// Returns a list of deals in which the target is a public company.
        /// </summary>
        /// <remarks>
        /// Gets deals in which the target is a public company for a specified date range and status. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsPublicRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <returns>ApiResponse of DealsPublicResponse</returns>
        ApiResponse<DealsPublicResponse> GetPublicTargetDealsListWithHttpInfo(DealsPublicRequest dealsPublicRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns details for a list of companies.
        /// </summary>
        /// <remarks>
        /// Gets deals for a specified list of companies within a date range. Deals returned are any in which the requested company is involved as either the buyer, seller, or target. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsResponse</returns>
        System.Threading.Tasks.Task<DealsResponse> GetDealsByCompanyListAsync(DealsRequest dealsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns details for a list of companies.
        /// </summary>
        /// <remarks>
        /// Gets deals for a specified list of companies within a date range. Deals returned are any in which the requested company is involved as either the buyer, seller, or target. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsResponse>> GetDealsByCompanyListWithHttpInfoAsync(DealsRequest dealsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns details for specified deals.
        /// </summary>
        /// <remarks>
        /// Gets deal details for a specified list of FactSet deal identifiers. Monetary values returned by this API are converted and represented in USD. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsRequest">Request object for &#x60;Deal Details&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DetailsResponse</returns>
        System.Threading.Tasks.Task<DetailsResponse> GetDealsDetailsListAsync(DetailsRequest detailsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns details for specified deals.
        /// </summary>
        /// <remarks>
        /// Gets deal details for a specified list of FactSet deal identifiers. Monetary values returned by this API are converted and represented in USD. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsRequest">Request object for &#x60;Deal Details&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailsResponse>> GetDealsDetailsListWithHttpInfoAsync(DetailsRequest detailsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of deals in which the target is a public company.
        /// </summary>
        /// <remarks>
        /// Gets deals in which the target is a public company for a specified date range and status. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsPublicRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsPublicResponse</returns>
        System.Threading.Tasks.Task<DealsPublicResponse> GetPublicTargetDealsListAsync(DealsPublicRequest dealsPublicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of deals in which the target is a public company.
        /// </summary>
        /// <remarks>
        /// Gets deals in which the target is a public company for a specified date range and status. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsPublicRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsPublicResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsPublicResponse>> GetPublicTargetDealsListWithHttpInfoAsync(DealsPublicRequest dealsPublicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApi : IDealsApiSync, IDealsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DealsApi : IDealsApi
    {
        private FactSet.SDK.FactSetMergersandAcquisitions.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetDealsByCompanyListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DealsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetDealsDetailsListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DetailsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPublicTargetDealsListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DealsPublicResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DealsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DealsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetMergersandAcquisitions.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetMergersandAcquisitions.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetMergersandAcquisitions.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetMergersandAcquisitions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DealsApi(FactSet.SDK.FactSetMergersandAcquisitions.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetMergersandAcquisitions.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetMergersandAcquisitions.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetMergersandAcquisitions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DealsApi(FactSet.SDK.FactSetMergersandAcquisitions.Client.ISynchronousClient client, FactSet.SDK.FactSetMergersandAcquisitions.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetMergersandAcquisitions.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetMergersandAcquisitions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetMergersandAcquisitions.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetMergersandAcquisitions.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetMergersandAcquisitions.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetMergersandAcquisitions.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns details for a list of companies. Gets deals for a specified list of companies within a date range. Deals returned are any in which the requested company is involved as either the buyer, seller, or target. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <returns>DealsResponse</returns>
        public DealsResponse GetDealsByCompanyList(DealsRequest dealsRequest)
        {
            var localVarResponse = GetDealsByCompanyListWithHttpInfo(dealsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for a list of companies. Gets deals for a specified list of companies within a date range. Deals returned are any in which the requested company is involved as either the buyer, seller, or target. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <returns>ApiResponse of DealsResponse</returns>
        public ApiResponse<DealsResponse> GetDealsByCompanyListWithHttpInfo(DealsRequest dealsRequest)
        {
            // verify the required parameter 'dealsRequest' is set
            if (dealsRequest == null)
            {
                throw new FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException(400, "Missing required parameter 'dealsRequest' when calling DealsApi->GetDealsByCompanyList");
            }

            FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetDealsByCompanyListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            DealsResponse>("/deals/by-company", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDealsByCompanyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns details for a list of companies. Gets deals for a specified list of companies within a date range. Deals returned are any in which the requested company is involved as either the buyer, seller, or target. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsResponse</returns>
        public async System.Threading.Tasks.Task<DealsResponse>GetDealsByCompanyListAsync(DealsRequest dealsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetDealsByCompanyListWithHttpInfoAsync(dealsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for a list of companies. Gets deals for a specified list of companies within a date range. Deals returned are any in which the requested company is involved as either the buyer, seller, or target. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DealsResponse>> GetDealsByCompanyListWithHttpInfoAsync(DealsRequest dealsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealsRequest' is set
            if (dealsRequest == null)
            {
                throw new FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException(400, "Missing required parameter 'dealsRequest' when calling DealsApi->GetDealsByCompanyList");
            }


            FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetDealsByCompanyListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DealsResponse>("/deals/by-company", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDealsByCompanyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details for specified deals. Gets deal details for a specified list of FactSet deal identifiers. Monetary values returned by this API are converted and represented in USD. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsRequest">Request object for &#x60;Deal Details&#x60;.</param>
        /// <returns>DetailsResponse</returns>
        public DetailsResponse GetDealsDetailsList(DetailsRequest detailsRequest)
        {
            var localVarResponse = GetDealsDetailsListWithHttpInfo(detailsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for specified deals. Gets deal details for a specified list of FactSet deal identifiers. Monetary values returned by this API are converted and represented in USD. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsRequest">Request object for &#x60;Deal Details&#x60;.</param>
        /// <returns>ApiResponse of DetailsResponse</returns>
        public ApiResponse<DetailsResponse> GetDealsDetailsListWithHttpInfo(DetailsRequest detailsRequest)
        {
            // verify the required parameter 'detailsRequest' is set
            if (detailsRequest == null)
            {
                throw new FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException(400, "Missing required parameter 'detailsRequest' when calling DealsApi->GetDealsDetailsList");
            }

            FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detailsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetDealsDetailsListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            DetailsResponse>("/deals/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDealsDetailsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns details for specified deals. Gets deal details for a specified list of FactSet deal identifiers. Monetary values returned by this API are converted and represented in USD. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsRequest">Request object for &#x60;Deal Details&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DetailsResponse</returns>
        public async System.Threading.Tasks.Task<DetailsResponse>GetDealsDetailsListAsync(DetailsRequest detailsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetDealsDetailsListWithHttpInfoAsync(detailsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for specified deals. Gets deal details for a specified list of FactSet deal identifiers. Monetary values returned by this API are converted and represented in USD. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsRequest">Request object for &#x60;Deal Details&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DetailsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DetailsResponse>> GetDealsDetailsListWithHttpInfoAsync(DetailsRequest detailsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'detailsRequest' is set
            if (detailsRequest == null)
            {
                throw new FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException(400, "Missing required parameter 'detailsRequest' when calling DealsApi->GetDealsDetailsList");
            }


            FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detailsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetDealsDetailsListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DetailsResponse>("/deals/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDealsDetailsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of deals in which the target is a public company. Gets deals in which the target is a public company for a specified date range and status. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsPublicRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <returns>DealsPublicResponse</returns>
        public DealsPublicResponse GetPublicTargetDealsList(DealsPublicRequest dealsPublicRequest)
        {
            var localVarResponse = GetPublicTargetDealsListWithHttpInfo(dealsPublicRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of deals in which the target is a public company. Gets deals in which the target is a public company for a specified date range and status. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsPublicRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <returns>ApiResponse of DealsPublicResponse</returns>
        public ApiResponse<DealsPublicResponse> GetPublicTargetDealsListWithHttpInfo(DealsPublicRequest dealsPublicRequest)
        {
            // verify the required parameter 'dealsPublicRequest' is set
            if (dealsPublicRequest == null)
            {
                throw new FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException(400, "Missing required parameter 'dealsPublicRequest' when calling DealsApi->GetPublicTargetDealsList");
            }

            FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealsPublicRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPublicTargetDealsListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            DealsPublicResponse>("/deals/public-targets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPublicTargetDealsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of deals in which the target is a public company. Gets deals in which the target is a public company for a specified date range and status. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsPublicRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsPublicResponse</returns>
        public async System.Threading.Tasks.Task<DealsPublicResponse>GetPublicTargetDealsListAsync(DealsPublicRequest dealsPublicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPublicTargetDealsListWithHttpInfoAsync(dealsPublicRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of deals in which the target is a public company. Gets deals in which the target is a public company for a specified date range and status. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes &#x60;dealId&#x60; which can be sent to the &#x60;/deals/details&#x60; endpoint for more information about the deal. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsPublicRequest">Request object for &#x60;Deals&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsPublicResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DealsPublicResponse>> GetPublicTargetDealsListWithHttpInfoAsync(DealsPublicRequest dealsPublicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealsPublicRequest' is set
            if (dealsPublicRequest == null)
            {
                throw new FactSet.SDK.FactSetMergersandAcquisitions.Client.ApiException(400, "Missing required parameter 'dealsPublicRequest' when calling DealsApi->GetPublicTargetDealsList");
            }


            FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetMergersandAcquisitions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealsPublicRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetMergersandAcquisitions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPublicTargetDealsListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DealsPublicResponse>("/deals/public-targets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPublicTargetDealsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
