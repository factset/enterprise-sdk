/*
 * FACTSET MERGERS AND ACQUISITIONS API
 *
 * The FactSet Mergers and Acquisitions API provides access to key transactions and pricing metrics on over 60,000 globally traded deals. Reference a Global Universe of Mergers and Acquisitions (M&A) transactions where the target of the deal is a Publicly traded Company. Review premiums, multiples and fundamental data to gather insights on deals and create predictive models based on different deal characteristics.    Monetary values returned by this API are converted and represented in USD.    This API is allows a limit of 10 requests per second and a maximum of 10 concurrent requests. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetMergersandAcquisitions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetMergersandAcquisitions.Model
{
    /// <summary>
    /// Details Request Body
    /// </summary>
    [DataContract(Name = "DetailsRequestBody")]
    public partial class DetailsRequestBody : IEquatable<DetailsRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DetailsRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsRequestBody" /> class.
        /// </summary>
        /// <param name="dealIds">The requested list of deal identifiers. Maximum of 100 IDs are supported.  (required).</param>
        public DetailsRequestBody(List<string> dealIds)
        {
            // to ensure "dealIds" is required (not null)
            if (dealIds == null) {
                throw new ArgumentNullException("dealIds is a required property for DetailsRequestBody and cannot be null");
            }
            this.DealIds = dealIds;
        }

        /// <summary>
        /// The requested list of deal identifiers. Maximum of 100 IDs are supported. 
        /// </summary>
        /// <value>The requested list of deal identifiers. Maximum of 100 IDs are supported. </value>
        [DataMember(Name = "dealIds", IsRequired = true, EmitDefaultValue = false)]
        public List<string> DealIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailsRequestBody {\n");
            sb.Append("  DealIds: ").Append(DealIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailsRequestBody);
        }

        /// <summary>
        /// Returns true if DetailsRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailsRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailsRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DealIds == input.DealIds ||
                    this.DealIds != null &&
                    input.DealIds != null &&
                    this.DealIds.SequenceEqual(input.DealIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DealIds != null)
                {
                    hashCode = (hashCode * 59) + this.DealIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
