/*
 * FactSet Mergers and Acquisitions API
 *
 * The FactSet Mergers and Acquisitions API provides access to key transactions and pricing metrics on over 60,000 globally traded deals. Reference a Global Universe of Mergers and Acquisitions (M&A) transactions where the target of the deal is a Publicly traded Company. Review premiums, multiples and fundamental data to gather insights on deals and create predictive models based on different deal characteristics.    Monetary values returned by this API are converted and represented in USD.    This API is allows a limit of 10 requests per second and a maximum of 10 concurrent requests. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetMergersandAcquisitions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetMergersandAcquisitions.Model
{
    /// <summary>
    /// Advisors Object
    /// </summary>
    [DataContract(Name = "Advisors")]
    public partial class Advisors : IEquatable<Advisors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Advisors" /> class.
        /// </summary>
        /// <param name="buyers">buyers.</param>
        /// <param name="sellers">sellers.</param>
        public Advisors(BuyersAdvisor buyers = default(BuyersAdvisor), SellersAdvisor sellers = default(SellersAdvisor))
        {
            this.Buyers = buyers;
            this.Sellers = sellers;
        }

        /// <summary>
        /// Gets or Sets Buyers
        /// </summary>
        [DataMember(Name = "buyers", EmitDefaultValue = false)]
        public BuyersAdvisor Buyers { get; set; }

        /// <summary>
        /// Gets or Sets Sellers
        /// </summary>
        [DataMember(Name = "sellers", EmitDefaultValue = false)]
        public SellersAdvisor Sellers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Advisors {\n");
            sb.Append("  Buyers: ").Append(Buyers).Append("\n");
            sb.Append("  Sellers: ").Append(Sellers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Advisors);
        }

        /// <summary>
        /// Returns true if Advisors instances are equal
        /// </summary>
        /// <param name="input">Instance of Advisors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Advisors input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Buyers == input.Buyers ||
                    (this.Buyers != null &&
                    this.Buyers.Equals(input.Buyers))
                ) && 
                (
                    this.Sellers == input.Sellers ||
                    (this.Sellers != null &&
                    this.Sellers.Equals(input.Sellers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Buyers != null)
                {
                    hashCode = (hashCode * 59) + this.Buyers.GetHashCode();
                }
                if (this.Sellers != null)
                {
                    hashCode = (hashCode * 59) + this.Sellers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
