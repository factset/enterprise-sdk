/*
 * FactSet Mergers and Acquisitions API
 *
 * The FactSet Mergers and Acquisitions API provides access to key transactions and pricing metrics on over 60,000 globally traded deals. Reference a Global Universe of Mergers and Acquisitions (M&A) transactions where the target of the deal is a Publicly traded Company. Review premiums, multiples and fundamental data to gather insights on deals and create predictive models based on different deal characteristics.    Monetary values returned by this API are converted and represented in USD.    This API is allows a limit of 10 requests per second and a maximum of 10 concurrent requests. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetMergersandAcquisitions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetMergersandAcquisitions.Model
{
    /// <summary>
    /// Detail
    /// </summary>
    [DataContract(Name = "Detail")]
    public partial class Detail : IEquatable<Detail>, IValidatableObject
    {
        /// <summary>
        /// Status of the deal.
        /// </summary>
        /// <value>Status of the deal.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,

            /// <summary>
            /// Enum Complete for value: Complete
            /// </summary>
            [EnumMember(Value = "Complete")]
            Complete = 2,

            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 3,

            /// <summary>
            /// Enum Rumor for value: Rumor
            /// </summary>
            [EnumMember(Value = "Rumor")]
            Rumor = 4,

            /// <summary>
            /// Enum RumorCancelled for value: Rumor Cancelled
            /// </summary>
            [EnumMember(Value = "Rumor Cancelled")]
            RumorCancelled = 5

        }


        /// <summary>
        /// Status of the deal.
        /// </summary>
        /// <value>Status of the deal.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Type of deal.
        /// </summary>
        /// <value>Type of deal.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DealTypeEnum
        {
            /// <summary>
            /// Enum AcquisitionMerger for value: Acquisition / Merger
            /// </summary>
            [EnumMember(Value = "Acquisition / Merger")]
            AcquisitionMerger = 1,

            /// <summary>
            /// Enum MajorityStake for value: Majority Stake
            /// </summary>
            [EnumMember(Value = "Majority Stake")]
            MajorityStake = 2,

            /// <summary>
            /// Enum MinorityStake for value: Minority Stake
            /// </summary>
            [EnumMember(Value = "Minority Stake")]
            MinorityStake = 3,

            /// <summary>
            /// Enum Spinoff for value: Spinoff
            /// </summary>
            [EnumMember(Value = "Spinoff")]
            Spinoff = 4

        }


        /// <summary>
        /// Type of deal.
        /// </summary>
        /// <value>Type of deal.</value>
        [DataMember(Name = "dealType", EmitDefaultValue = false)]
        public DealTypeEnum? DealType { get; set; }
        /// <summary>
        /// Defines SourceFunds
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceFundsEnum
        {
            /// <summary>
            /// Enum BankLoan for value: Bank Loan
            /// </summary>
            [EnumMember(Value = "Bank Loan")]
            BankLoan = 1,

            /// <summary>
            /// Enum BondNoteIssuance for value: Bond/Note Issuance
            /// </summary>
            [EnumMember(Value = "Bond/Note Issuance")]
            BondNoteIssuance = 2,

            /// <summary>
            /// Enum InternallyGeneratedFunds for value: Internally Generated Funds
            /// </summary>
            [EnumMember(Value = "Internally Generated Funds")]
            InternallyGeneratedFunds = 3,

            /// <summary>
            /// Enum Mezzanine for value: Mezzanine
            /// </summary>
            [EnumMember(Value = "Mezzanine")]
            Mezzanine = 4,

            /// <summary>
            /// Enum PrivateCompanyDebt for value: Private Company Debt
            /// </summary>
            [EnumMember(Value = "Private Company Debt")]
            PrivateCompanyDebt = 5,

            /// <summary>
            /// Enum PrivateEquityVentureFunding for value: Private Equity/Venture Funding
            /// </summary>
            [EnumMember(Value = "Private Equity/Venture Funding")]
            PrivateEquityVentureFunding = 6,

            /// <summary>
            /// Enum PrivateWarrantOption for value: Private Warrant Option
            /// </summary>
            [EnumMember(Value = "Private Warrant Option")]
            PrivateWarrantOption = 7,

            /// <summary>
            /// Enum SourceOfFundingNotDisclosed for value: Source of Funding Not Disclosed
            /// </summary>
            [EnumMember(Value = "Source of Funding Not Disclosed")]
            SourceOfFundingNotDisclosed = 8,

            /// <summary>
            /// Enum StockIssuancePrefComPublic for value: Stock Issuance: Pref &amp; Com (Public)
            /// </summary>
            [EnumMember(Value = "Stock Issuance: Pref & Com (Public)")]
            StockIssuancePrefComPublic = 9

        }



        /// <summary>
        /// Method by which the acquirer was to finance the cash portion of the consideration offered in transaction (e.g., cash, bank debt, issuance of notes/bonds, etc.). For example, VF Corp financed its $2.2 bil all cash offer for The Timberland Company by issuing $900 mil in term notes and funding the balance through a combination of cash on hand and commercial paper.
        /// </summary>
        /// <value>Method by which the acquirer was to finance the cash portion of the consideration offered in transaction (e.g., cash, bank debt, issuance of notes/bonds, etc.). For example, VF Corp financed its $2.2 bil all cash offer for The Timberland Company by issuing $900 mil in term notes and funding the balance through a combination of cash on hand and commercial paper.</value>
        [DataMember(Name = "sourceFunds", EmitDefaultValue = true)]
        public List<SourceFundsEnum> SourceFunds { get; set; }
        /// <summary>
        /// Transaction purpose code or description.
        /// </summary>
        /// <value>Transaction purpose code or description.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PurposeEnum
        {
            /// <summary>
            /// Enum Financial for value: Financial
            /// </summary>
            [EnumMember(Value = "Financial")]
            Financial = 1,

            /// <summary>
            /// Enum Strategic for value: Strategic
            /// </summary>
            [EnumMember(Value = "Strategic")]
            Strategic = 2

        }


        /// <summary>
        /// Transaction purpose code or description.
        /// </summary>
        /// <value>Transaction purpose code or description.</value>
        [DataMember(Name = "purpose", EmitDefaultValue = true)]
        public PurposeEnum? Purpose { get; set; }
        /// <summary>
        /// The way the target&#39;s board of directors viewed the acquirer&#39;s proposal to enter into the transaction - Friendly, Hostile, Neutral.
        /// </summary>
        /// <value>The way the target&#39;s board of directors viewed the acquirer&#39;s proposal to enter into the transaction - Friendly, Hostile, Neutral.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttitudeEnum
        {
            /// <summary>
            /// Enum Friendly for value: Friendly
            /// </summary>
            [EnumMember(Value = "Friendly")]
            Friendly = 1,

            /// <summary>
            /// Enum Hostile for value: Hostile
            /// </summary>
            [EnumMember(Value = "Hostile")]
            Hostile = 2,

            /// <summary>
            /// Enum Neutral for value: Neutral
            /// </summary>
            [EnumMember(Value = "Neutral")]
            Neutral = 3

        }


        /// <summary>
        /// The way the target&#39;s board of directors viewed the acquirer&#39;s proposal to enter into the transaction - Friendly, Hostile, Neutral.
        /// </summary>
        /// <value>The way the target&#39;s board of directors viewed the acquirer&#39;s proposal to enter into the transaction - Friendly, Hostile, Neutral.</value>
        [DataMember(Name = "attitude", EmitDefaultValue = true)]
        public AttitudeEnum? Attitude { get; set; }
        /// <summary>
        /// Defines DealCharacteristics
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DealCharacteristicsEnum
        {
            /// <summary>
            /// Enum Divestment for value: Divestment
            /// </summary>
            [EnumMember(Value = "Divestment")]
            Divestment = 1,

            /// <summary>
            /// Enum EmployeeBuyOut for value: Employee Buy-Out
            /// </summary>
            [EnumMember(Value = "Employee Buy-Out")]
            EmployeeBuyOut = 2,

            /// <summary>
            /// Enum Exit for value: Exit
            /// </summary>
            [EnumMember(Value = "Exit")]
            Exit = 3,

            /// <summary>
            /// Enum InvestorBuyIn for value: Investor Buy-In
            /// </summary>
            [EnumMember(Value = "Investor Buy-In")]
            InvestorBuyIn = 4,

            /// <summary>
            /// Enum InvestorBuyOut for value: Investor Buy-Out
            /// </summary>
            [EnumMember(Value = "Investor Buy-Out")]
            InvestorBuyOut = 5,

            /// <summary>
            /// Enum Insolvency for value: Insolvency
            /// </summary>
            [EnumMember(Value = "Insolvency")]
            Insolvency = 6,

            /// <summary>
            /// Enum ManagementBuyOut for value: Management Buy-Out
            /// </summary>
            [EnumMember(Value = "Management Buy-Out")]
            ManagementBuyOut = 7,

            /// <summary>
            /// Enum ReverseTakeover for value: Reverse Takeover
            /// </summary>
            [EnumMember(Value = "Reverse Takeover")]
            ReverseTakeover = 8,

            /// <summary>
            /// Enum SecondaryBuyOut for value: Secondary Buy-Out
            /// </summary>
            [EnumMember(Value = "Secondary Buy-Out")]
            SecondaryBuyOut = 9,

            /// <summary>
            /// Enum LeveragedBuyOut for value: Leveraged Buy-Out
            /// </summary>
            [EnumMember(Value = "Leveraged Buy-Out")]
            LeveragedBuyOut = 10,

            /// <summary>
            /// Enum GoingPrivate for value: Going Private
            /// </summary>
            [EnumMember(Value = "Going Private")]
            GoingPrivate = 11,

            /// <summary>
            /// Enum ExitPartial for value: Exit (Partial)
            /// </summary>
            [EnumMember(Value = "Exit (Partial)")]
            ExitPartial = 12,

            /// <summary>
            /// Enum ControlPremiumStudy for value: Control Premium Study
            /// </summary>
            [EnumMember(Value = "Control Premium Study")]
            ControlPremiumStudy = 13,

            /// <summary>
            /// Enum PrivateEquityGroup for value: Private Equity Group
            /// </summary>
            [EnumMember(Value = "Private Equity Group")]
            PrivateEquityGroup = 14,

            /// <summary>
            /// Enum AssetPurchase for value: Asset Purchase
            /// </summary>
            [EnumMember(Value = "Asset Purchase")]
            AssetPurchase = 15,

            /// <summary>
            /// Enum RelatedParty for value: Related Party
            /// </summary>
            [EnumMember(Value = "Related Party")]
            RelatedParty = 16,

            /// <summary>
            /// Enum TenderOffer for value: Tender Offer
            /// </summary>
            [EnumMember(Value = "Tender Offer")]
            TenderOffer = 17,

            /// <summary>
            /// Enum UnequalVoting for value: Unequal Voting
            /// </summary>
            [EnumMember(Value = "Unequal Voting")]
            UnequalVoting = 18,

            /// <summary>
            /// Enum TargetControllingShareholder for value: Target Controlling Shareholder
            /// </summary>
            [EnumMember(Value = "Target Controlling Shareholder")]
            TargetControllingShareholder = 19,

            /// <summary>
            /// Enum Auction for value: Auction
            /// </summary>
            [EnumMember(Value = "Auction")]
            Auction = 20,

            /// <summary>
            /// Enum ClubDealPEGroup for value: Club Deal - PE Group
            /// </summary>
            [EnumMember(Value = "Club Deal - PE Group")]
            ClubDealPEGroup = 21,

            /// <summary>
            /// Enum ClubDealCorpPE for value: Club Deal - Corp/PE
            /// </summary>
            [EnumMember(Value = "Club Deal - Corp/PE")]
            ClubDealCorpPE = 22,

            /// <summary>
            /// Enum VentureBackedAcquirer for value: Venture Backed Acquirer
            /// </summary>
            [EnumMember(Value = "Venture Backed Acquirer")]
            VentureBackedAcquirer = 23,

            /// <summary>
            /// Enum UnsolicitedBid for value: Unsolicited Bid
            /// </summary>
            [EnumMember(Value = "Unsolicited Bid")]
            UnsolicitedBid = 24,

            /// <summary>
            /// Enum Rumor for value: Rumor
            /// </summary>
            [EnumMember(Value = "Rumor")]
            Rumor = 25,

            /// <summary>
            /// Enum SchemeOfArrangement for value: Scheme of Arrangement
            /// </summary>
            [EnumMember(Value = "Scheme of Arrangement")]
            SchemeOfArrangement = 26,

            /// <summary>
            /// Enum GoldenShare for value: Golden Share
            /// </summary>
            [EnumMember(Value = "Golden Share")]
            GoldenShare = 27,

            /// <summary>
            /// Enum MergerOfEquals for value: Merger of Equals
            /// </summary>
            [EnumMember(Value = "Merger of Equals")]
            MergerOfEquals = 28,

            /// <summary>
            /// Enum Privatization for value: Privatization
            /// </summary>
            [EnumMember(Value = "Privatization")]
            Privatization = 29,

            /// <summary>
            /// Enum IndicativeTentativeProposal for value: Indicative / Tentative Proposal
            /// </summary>
            [EnumMember(Value = "Indicative / Tentative Proposal")]
            IndicativeTentativeProposal = 30,

            /// <summary>
            /// Enum ClubDealCorporateGroup for value: Club Deal - Corporate Group
            /// </summary>
            [EnumMember(Value = "Club Deal - Corporate Group")]
            ClubDealCorporateGroup = 31,

            /// <summary>
            /// Enum MultipleTargetDeal for value: Multiple Target Deal
            /// </summary>
            [EnumMember(Value = "Multiple Target Deal")]
            MultipleTargetDeal = 32,

            /// <summary>
            /// Enum SPAC for value: SPAC
            /// </summary>
            [EnumMember(Value = "SPAC")]
            SPAC = 33,

            /// <summary>
            /// Enum SqueezeOut for value: Squeeze Out
            /// </summary>
            [EnumMember(Value = "Squeeze Out")]
            SqueezeOut = 34,

            /// <summary>
            /// Enum SpecialCommittee for value: Special Committee
            /// </summary>
            [EnumMember(Value = "Special Committee")]
            SpecialCommittee = 35,

            /// <summary>
            /// Enum Collar for value: Collar
            /// </summary>
            [EnumMember(Value = "Collar")]
            Collar = 36,

            /// <summary>
            /// Enum ForcedRegulatoryDivestiture for value: Forced Regulatory Divestiture
            /// </summary>
            [EnumMember(Value = "Forced Regulatory Divestiture")]
            ForcedRegulatoryDivestiture = 37,

            /// <summary>
            /// Enum VentureBackedTarget for value: Venture-Backed Target
            /// </summary>
            [EnumMember(Value = "Venture-Backed Target")]
            VentureBackedTarget = 38,

            /// <summary>
            /// Enum BankBranchPurchase for value: Bank Branch Purchase
            /// </summary>
            [EnumMember(Value = "Bank Branch Purchase")]
            BankBranchPurchase = 39,

            /// <summary>
            /// Enum BidderSpecialCommittee for value: Bidder Special Committee
            /// </summary>
            [EnumMember(Value = "Bidder Special Committee")]
            BidderSpecialCommittee = 40,

            /// <summary>
            /// Enum TargetSpecialCommittee for value: Target Special Committee
            /// </summary>
            [EnumMember(Value = "Target Special Committee")]
            TargetSpecialCommittee = 41,

            /// <summary>
            /// Enum BidderControllingShareholder for value: Bidder Controlling Shareholder
            /// </summary>
            [EnumMember(Value = "Bidder Controlling Shareholder")]
            BidderControllingShareholder = 42,

            /// <summary>
            /// Enum PropertyTransaction for value: Property Transaction
            /// </summary>
            [EnumMember(Value = "Property Transaction")]
            PropertyTransaction = 43,

            /// <summary>
            /// Enum PowerPlantPurchase for value: Power Plant Purchase
            /// </summary>
            [EnumMember(Value = "Power Plant Purchase")]
            PowerPlantPurchase = 44

        }



        /// <summary>
        /// The secondary deal type(s).
        /// </summary>
        /// <value>The secondary deal type(s).</value>
        [DataMember(Name = "dealCharacteristics", EmitDefaultValue = true)]
        public List<DealCharacteristicsEnum> DealCharacteristics { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Detail" /> class.
        /// </summary>
        /// <param name="dealId">FactSet unique deal Identifier..</param>
        /// <param name="target">target.</param>
        /// <param name="buyers">Array of participants in the deal who are buyers..</param>
        /// <param name="sellers">Array of participants in the deal who are sellers..</param>
        /// <param name="status">Status of the deal..</param>
        /// <param name="rumorDate">For a transaction that initially start out as a rumor, the date on which talks of the transaction first appeared in a major financial or trade publication. For so long as the transaction remains a rumor, the Rumor Date and the Announcement Date will be the same. Once confirmed and the transaction is no longer a rumor, the Rumor Date will remain unchanged and the Announcement Date will be updated to reflect the date upon which one of the parties involved in the deal disclosed the formal offer or a definitive agreement..</param>
        /// <param name="announceDate">Date the deal was announced..</param>
        /// <param name="referenceDate">In a competing bid situation, the common date (earliest announcement date) used across all related transactions in order to determine the target&#39;s share prices, financials, premiums/multiples and all currency conversions (allowing for a common basis of comparison). For all other transactions, the Competing Bid Reference Date will be the same as the Announcement Date. For example, Peet&#39;s Coffee &amp; Tea, Inc. announced its intent to acquire Diedrich Coffee, Inc. on 2009-11-02. Green Mountain Coffee Roasters jumped this transaction, announcing its own competing bid on 2009-11-23. Green Mountain eventually won its bid, completing the acquisition on 2010-05-11. For both transactions, the Competing Bid Reference Date is 2009-11-02..</param>
        /// <param name="expectedCloseDate">Expected close date of the deal..</param>
        /// <param name="closeDate">Date the deal was closed..</param>
        /// <param name="cancelDate">Date the deal was cancelled..</param>
        /// <param name="dealType">Type of deal..</param>
        /// <param name="sourceFunds">Method by which the acquirer was to finance the cash portion of the consideration offered in transaction (e.g., cash, bank debt, issuance of notes/bonds, etc.). For example, VF Corp financed its $2.2 bil all cash offer for The Timberland Company by issuing $900 mil in term notes and funding the balance through a combination of cash on hand and commercial paper..</param>
        /// <param name="dealValue">dealValue.</param>
        /// <param name="purpose">Transaction purpose code or description..</param>
        /// <param name="evSales">Ratio: Enterprise value/sales..</param>
        /// <param name="evEBIT">Ratio: Enterprise value/EBIT..</param>
        /// <param name="evEBITDA">Ratio: Enterprise value/EBITDA..</param>
        /// <param name="bepBV">Ratio: BEP/BV..</param>
        /// <param name="sales">Sales at the time of the deal in USD..</param>
        /// <param name="ebit">EBIT at the time of the deal in USD..</param>
        /// <param name="ebitda">EBITDA at the time of the deal in USD..</param>
        /// <param name="netIncome">Net income at the time of the deal in USD..</param>
        /// <param name="cash">Cash at the time of the deal in USD..</param>
        /// <param name="intBearingDebt">Interest bearing debt at the time of the deal in USD..</param>
        /// <param name="prefStockValue">Preferred stock value at the time of the deal in USD..</param>
        /// <param name="totalAssets">Total assets at the time of the deal in USD..</param>
        /// <param name="sharesOutstanding">Shares outstanding at the time of the deal..</param>
        /// <param name="eps">Earnings per share at the time of the deal in USD..</param>
        /// <param name="bookValueShare">Book value per share at the time of the deal in USD..</param>
        /// <param name="targetPostMergerOwn">Post Merger Ownership % - Target: The pro forma percentage of ownership to be held by target shareholders in the newly merged company. This data item is designed to reflect the expected ownership of the newly merged company at the time the transaction was announced. This data item will not be populated for Going Private transactions as they are not applicable since the acquirer in a going private transaction is not publicly traded..</param>
        /// <param name="buyerPostMergerOwn">Post Merger Ownership % - Acquirer: The pro forma percentage of ownership to be held by acquirer shareholders in the newly merged company. This data item is designed to reflect the expected ownership of the newly merged company at the time the transaction was announced. This data item will not be populated for Going Private transactions as they are not applicable since the acquirer in a going private transaction is not publicly traded..</param>
        /// <param name="attitude">The way the target&#39;s board of directors viewed the acquirer&#39;s proposal to enter into the transaction - Friendly, Hostile, Neutral..</param>
        /// <param name="dealSummary">Summary of the deal..</param>
        /// <param name="dealCharacteristics">The secondary deal type(s)..</param>
        public Detail(string dealId = default(string), Target target = default(Target), List<Participant> buyers = default(List<Participant>), List<Participant> sellers = default(List<Participant>), StatusEnum? status = default(StatusEnum?), DateTime? rumorDate = default(DateTime?), DateTime? announceDate = default(DateTime?), DateTime? referenceDate = default(DateTime?), DateTime? expectedCloseDate = default(DateTime?), DateTime? closeDate = default(DateTime?), DateTime? cancelDate = default(DateTime?), DealTypeEnum? dealType = default(DealTypeEnum?), List<SourceFundsEnum> sourceFunds = default(List<SourceFundsEnum>), DealValue dealValue = default(DealValue), PurposeEnum? purpose = default(PurposeEnum?), decimal? evSales = default(decimal?), decimal? evEBIT = default(decimal?), decimal? evEBITDA = default(decimal?), decimal? bepBV = default(decimal?), decimal? sales = default(decimal?), decimal? ebit = default(decimal?), decimal? ebitda = default(decimal?), decimal? netIncome = default(decimal?), decimal? cash = default(decimal?), decimal? intBearingDebt = default(decimal?), decimal? prefStockValue = default(decimal?), decimal? totalAssets = default(decimal?), decimal? sharesOutstanding = default(decimal?), decimal? eps = default(decimal?), decimal? bookValueShare = default(decimal?), decimal? targetPostMergerOwn = default(decimal?), decimal? buyerPostMergerOwn = default(decimal?), AttitudeEnum? attitude = default(AttitudeEnum?), string dealSummary = default(string), List<DealCharacteristicsEnum> dealCharacteristics = default(List<DealCharacteristicsEnum>))
        {
            this.DealId = dealId;
            this.Target = target;
            this.Buyers = buyers;
            this.Sellers = sellers;
            this.Status = status;
            this.RumorDate = rumorDate;
            this.AnnounceDate = announceDate;
            this.ReferenceDate = referenceDate;
            this.ExpectedCloseDate = expectedCloseDate;
            this.CloseDate = closeDate;
            this.CancelDate = cancelDate;
            this.DealType = dealType;
            this.SourceFunds = sourceFunds;
            this.DealValue = dealValue;
            this.Purpose = purpose;
            this.EvSales = evSales;
            this.EvEBIT = evEBIT;
            this.EvEBITDA = evEBITDA;
            this.BepBV = bepBV;
            this.Sales = sales;
            this.Ebit = ebit;
            this.Ebitda = ebitda;
            this.NetIncome = netIncome;
            this.Cash = cash;
            this.IntBearingDebt = intBearingDebt;
            this.PrefStockValue = prefStockValue;
            this.TotalAssets = totalAssets;
            this.SharesOutstanding = sharesOutstanding;
            this.Eps = eps;
            this.BookValueShare = bookValueShare;
            this.TargetPostMergerOwn = targetPostMergerOwn;
            this.BuyerPostMergerOwn = buyerPostMergerOwn;
            this.Attitude = attitude;
            this.DealSummary = dealSummary;
            this.DealCharacteristics = dealCharacteristics;
        }

        /// <summary>
        /// FactSet unique deal Identifier.
        /// </summary>
        /// <value>FactSet unique deal Identifier.</value>
        [DataMember(Name = "dealId", EmitDefaultValue = false)]
        public string DealId { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public Target Target { get; set; }

        /// <summary>
        /// Array of participants in the deal who are buyers.
        /// </summary>
        /// <value>Array of participants in the deal who are buyers.</value>
        [DataMember(Name = "buyers", EmitDefaultValue = false)]
        public List<Participant> Buyers { get; set; }

        /// <summary>
        /// Array of participants in the deal who are sellers.
        /// </summary>
        /// <value>Array of participants in the deal who are sellers.</value>
        [DataMember(Name = "sellers", EmitDefaultValue = true)]
        public List<Participant> Sellers { get; set; }

        /// <summary>
        /// For a transaction that initially start out as a rumor, the date on which talks of the transaction first appeared in a major financial or trade publication. For so long as the transaction remains a rumor, the Rumor Date and the Announcement Date will be the same. Once confirmed and the transaction is no longer a rumor, the Rumor Date will remain unchanged and the Announcement Date will be updated to reflect the date upon which one of the parties involved in the deal disclosed the formal offer or a definitive agreement.
        /// </summary>
        /// <value>For a transaction that initially start out as a rumor, the date on which talks of the transaction first appeared in a major financial or trade publication. For so long as the transaction remains a rumor, the Rumor Date and the Announcement Date will be the same. Once confirmed and the transaction is no longer a rumor, the Rumor Date will remain unchanged and the Announcement Date will be updated to reflect the date upon which one of the parties involved in the deal disclosed the formal offer or a definitive agreement.</value>
        [DataMember(Name = "rumorDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? RumorDate { get; set; }

        /// <summary>
        /// Date the deal was announced.
        /// </summary>
        /// <value>Date the deal was announced.</value>
        [DataMember(Name = "announceDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? AnnounceDate { get; set; }

        /// <summary>
        /// In a competing bid situation, the common date (earliest announcement date) used across all related transactions in order to determine the target&#39;s share prices, financials, premiums/multiples and all currency conversions (allowing for a common basis of comparison). For all other transactions, the Competing Bid Reference Date will be the same as the Announcement Date. For example, Peet&#39;s Coffee &amp; Tea, Inc. announced its intent to acquire Diedrich Coffee, Inc. on 2009-11-02. Green Mountain Coffee Roasters jumped this transaction, announcing its own competing bid on 2009-11-23. Green Mountain eventually won its bid, completing the acquisition on 2010-05-11. For both transactions, the Competing Bid Reference Date is 2009-11-02.
        /// </summary>
        /// <value>In a competing bid situation, the common date (earliest announcement date) used across all related transactions in order to determine the target&#39;s share prices, financials, premiums/multiples and all currency conversions (allowing for a common basis of comparison). For all other transactions, the Competing Bid Reference Date will be the same as the Announcement Date. For example, Peet&#39;s Coffee &amp; Tea, Inc. announced its intent to acquire Diedrich Coffee, Inc. on 2009-11-02. Green Mountain Coffee Roasters jumped this transaction, announcing its own competing bid on 2009-11-23. Green Mountain eventually won its bid, completing the acquisition on 2010-05-11. For both transactions, the Competing Bid Reference Date is 2009-11-02.</value>
        [DataMember(Name = "referenceDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ReferenceDate { get; set; }

        /// <summary>
        /// Expected close date of the deal.
        /// </summary>
        /// <value>Expected close date of the deal.</value>
        [DataMember(Name = "expectedCloseDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ExpectedCloseDate { get; set; }

        /// <summary>
        /// Date the deal was closed.
        /// </summary>
        /// <value>Date the deal was closed.</value>
        [DataMember(Name = "closeDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? CloseDate { get; set; }

        /// <summary>
        /// Date the deal was cancelled.
        /// </summary>
        /// <value>Date the deal was cancelled.</value>
        [DataMember(Name = "cancelDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? CancelDate { get; set; }

        /// <summary>
        /// Gets or Sets DealValue
        /// </summary>
        [DataMember(Name = "dealValue", EmitDefaultValue = false)]
        public DealValue DealValue { get; set; }

        /// <summary>
        /// Ratio: Enterprise value/sales.
        /// </summary>
        /// <value>Ratio: Enterprise value/sales.</value>
        [DataMember(Name = "evSales", EmitDefaultValue = true)]
        public decimal? EvSales { get; set; }

        /// <summary>
        /// Ratio: Enterprise value/EBIT.
        /// </summary>
        /// <value>Ratio: Enterprise value/EBIT.</value>
        [DataMember(Name = "evEBIT", EmitDefaultValue = true)]
        public decimal? EvEBIT { get; set; }

        /// <summary>
        /// Ratio: Enterprise value/EBITDA.
        /// </summary>
        /// <value>Ratio: Enterprise value/EBITDA.</value>
        [DataMember(Name = "evEBITDA", EmitDefaultValue = true)]
        public decimal? EvEBITDA { get; set; }

        /// <summary>
        /// Ratio: BEP/BV.
        /// </summary>
        /// <value>Ratio: BEP/BV.</value>
        [DataMember(Name = "bepBV", EmitDefaultValue = true)]
        public decimal? BepBV { get; set; }

        /// <summary>
        /// Sales at the time of the deal in USD.
        /// </summary>
        /// <value>Sales at the time of the deal in USD.</value>
        [DataMember(Name = "sales", EmitDefaultValue = true)]
        public decimal? Sales { get; set; }

        /// <summary>
        /// EBIT at the time of the deal in USD.
        /// </summary>
        /// <value>EBIT at the time of the deal in USD.</value>
        [DataMember(Name = "ebit", EmitDefaultValue = true)]
        public decimal? Ebit { get; set; }

        /// <summary>
        /// EBITDA at the time of the deal in USD.
        /// </summary>
        /// <value>EBITDA at the time of the deal in USD.</value>
        [DataMember(Name = "ebitda", EmitDefaultValue = true)]
        public decimal? Ebitda { get; set; }

        /// <summary>
        /// Net income at the time of the deal in USD.
        /// </summary>
        /// <value>Net income at the time of the deal in USD.</value>
        [DataMember(Name = "netIncome", EmitDefaultValue = true)]
        public decimal? NetIncome { get; set; }

        /// <summary>
        /// Cash at the time of the deal in USD.
        /// </summary>
        /// <value>Cash at the time of the deal in USD.</value>
        [DataMember(Name = "cash", EmitDefaultValue = true)]
        public decimal? Cash { get; set; }

        /// <summary>
        /// Interest bearing debt at the time of the deal in USD.
        /// </summary>
        /// <value>Interest bearing debt at the time of the deal in USD.</value>
        [DataMember(Name = "intBearingDebt", EmitDefaultValue = true)]
        public decimal? IntBearingDebt { get; set; }

        /// <summary>
        /// Preferred stock value at the time of the deal in USD.
        /// </summary>
        /// <value>Preferred stock value at the time of the deal in USD.</value>
        [DataMember(Name = "prefStockValue", EmitDefaultValue = true)]
        public decimal? PrefStockValue { get; set; }

        /// <summary>
        /// Total assets at the time of the deal in USD.
        /// </summary>
        /// <value>Total assets at the time of the deal in USD.</value>
        [DataMember(Name = "totalAssets", EmitDefaultValue = true)]
        public decimal? TotalAssets { get; set; }

        /// <summary>
        /// Shares outstanding at the time of the deal.
        /// </summary>
        /// <value>Shares outstanding at the time of the deal.</value>
        [DataMember(Name = "sharesOutstanding", EmitDefaultValue = true)]
        public decimal? SharesOutstanding { get; set; }

        /// <summary>
        /// Earnings per share at the time of the deal in USD.
        /// </summary>
        /// <value>Earnings per share at the time of the deal in USD.</value>
        [DataMember(Name = "eps", EmitDefaultValue = true)]
        public decimal? Eps { get; set; }

        /// <summary>
        /// Book value per share at the time of the deal in USD.
        /// </summary>
        /// <value>Book value per share at the time of the deal in USD.</value>
        [DataMember(Name = "bookValueShare", EmitDefaultValue = true)]
        public decimal? BookValueShare { get; set; }

        /// <summary>
        /// Post Merger Ownership % - Target: The pro forma percentage of ownership to be held by target shareholders in the newly merged company. This data item is designed to reflect the expected ownership of the newly merged company at the time the transaction was announced. This data item will not be populated for Going Private transactions as they are not applicable since the acquirer in a going private transaction is not publicly traded.
        /// </summary>
        /// <value>Post Merger Ownership % - Target: The pro forma percentage of ownership to be held by target shareholders in the newly merged company. This data item is designed to reflect the expected ownership of the newly merged company at the time the transaction was announced. This data item will not be populated for Going Private transactions as they are not applicable since the acquirer in a going private transaction is not publicly traded.</value>
        [DataMember(Name = "targetPostMergerOwn", EmitDefaultValue = true)]
        public decimal? TargetPostMergerOwn { get; set; }

        /// <summary>
        /// Post Merger Ownership % - Acquirer: The pro forma percentage of ownership to be held by acquirer shareholders in the newly merged company. This data item is designed to reflect the expected ownership of the newly merged company at the time the transaction was announced. This data item will not be populated for Going Private transactions as they are not applicable since the acquirer in a going private transaction is not publicly traded.
        /// </summary>
        /// <value>Post Merger Ownership % - Acquirer: The pro forma percentage of ownership to be held by acquirer shareholders in the newly merged company. This data item is designed to reflect the expected ownership of the newly merged company at the time the transaction was announced. This data item will not be populated for Going Private transactions as they are not applicable since the acquirer in a going private transaction is not publicly traded.</value>
        [DataMember(Name = "buyerPostMergerOwn", EmitDefaultValue = true)]
        public decimal? BuyerPostMergerOwn { get; set; }

        /// <summary>
        /// Summary of the deal.
        /// </summary>
        /// <value>Summary of the deal.</value>
        [DataMember(Name = "dealSummary", EmitDefaultValue = true)]
        public string DealSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Detail {\n");
            sb.Append("  DealId: ").Append(DealId).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Buyers: ").Append(Buyers).Append("\n");
            sb.Append("  Sellers: ").Append(Sellers).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RumorDate: ").Append(RumorDate).Append("\n");
            sb.Append("  AnnounceDate: ").Append(AnnounceDate).Append("\n");
            sb.Append("  ReferenceDate: ").Append(ReferenceDate).Append("\n");
            sb.Append("  ExpectedCloseDate: ").Append(ExpectedCloseDate).Append("\n");
            sb.Append("  CloseDate: ").Append(CloseDate).Append("\n");
            sb.Append("  CancelDate: ").Append(CancelDate).Append("\n");
            sb.Append("  DealType: ").Append(DealType).Append("\n");
            sb.Append("  SourceFunds: ").Append(SourceFunds).Append("\n");
            sb.Append("  DealValue: ").Append(DealValue).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  EvSales: ").Append(EvSales).Append("\n");
            sb.Append("  EvEBIT: ").Append(EvEBIT).Append("\n");
            sb.Append("  EvEBITDA: ").Append(EvEBITDA).Append("\n");
            sb.Append("  BepBV: ").Append(BepBV).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  Ebit: ").Append(Ebit).Append("\n");
            sb.Append("  Ebitda: ").Append(Ebitda).Append("\n");
            sb.Append("  NetIncome: ").Append(NetIncome).Append("\n");
            sb.Append("  Cash: ").Append(Cash).Append("\n");
            sb.Append("  IntBearingDebt: ").Append(IntBearingDebt).Append("\n");
            sb.Append("  PrefStockValue: ").Append(PrefStockValue).Append("\n");
            sb.Append("  TotalAssets: ").Append(TotalAssets).Append("\n");
            sb.Append("  SharesOutstanding: ").Append(SharesOutstanding).Append("\n");
            sb.Append("  Eps: ").Append(Eps).Append("\n");
            sb.Append("  BookValueShare: ").Append(BookValueShare).Append("\n");
            sb.Append("  TargetPostMergerOwn: ").Append(TargetPostMergerOwn).Append("\n");
            sb.Append("  BuyerPostMergerOwn: ").Append(BuyerPostMergerOwn).Append("\n");
            sb.Append("  Attitude: ").Append(Attitude).Append("\n");
            sb.Append("  DealSummary: ").Append(DealSummary).Append("\n");
            sb.Append("  DealCharacteristics: ").Append(DealCharacteristics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Detail);
        }

        /// <summary>
        /// Returns true if Detail instances are equal
        /// </summary>
        /// <param name="input">Instance of Detail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Detail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DealId == input.DealId ||
                    (this.DealId != null &&
                    this.DealId.Equals(input.DealId))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.Buyers == input.Buyers ||
                    this.Buyers != null &&
                    input.Buyers != null &&
                    this.Buyers.SequenceEqual(input.Buyers)
                ) && 
                (
                    this.Sellers == input.Sellers ||
                    this.Sellers != null &&
                    input.Sellers != null &&
                    this.Sellers.SequenceEqual(input.Sellers)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.RumorDate == input.RumorDate ||
                    (this.RumorDate != null &&
                    this.RumorDate.Equals(input.RumorDate))
                ) && 
                (
                    this.AnnounceDate == input.AnnounceDate ||
                    (this.AnnounceDate != null &&
                    this.AnnounceDate.Equals(input.AnnounceDate))
                ) && 
                (
                    this.ReferenceDate == input.ReferenceDate ||
                    (this.ReferenceDate != null &&
                    this.ReferenceDate.Equals(input.ReferenceDate))
                ) && 
                (
                    this.ExpectedCloseDate == input.ExpectedCloseDate ||
                    (this.ExpectedCloseDate != null &&
                    this.ExpectedCloseDate.Equals(input.ExpectedCloseDate))
                ) && 
                (
                    this.CloseDate == input.CloseDate ||
                    (this.CloseDate != null &&
                    this.CloseDate.Equals(input.CloseDate))
                ) && 
                (
                    this.CancelDate == input.CancelDate ||
                    (this.CancelDate != null &&
                    this.CancelDate.Equals(input.CancelDate))
                ) && 
                (
                    this.DealType == input.DealType ||
                    this.DealType.Equals(input.DealType)
                ) && 
                (
                    this.SourceFunds == input.SourceFunds ||
                    this.SourceFunds.SequenceEqual(input.SourceFunds)
                ) && 
                (
                    this.DealValue == input.DealValue ||
                    (this.DealValue != null &&
                    this.DealValue.Equals(input.DealValue))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    this.Purpose.Equals(input.Purpose)
                ) && 
                (
                    this.EvSales == input.EvSales ||
                    (this.EvSales != null &&
                    this.EvSales.Equals(input.EvSales))
                ) && 
                (
                    this.EvEBIT == input.EvEBIT ||
                    (this.EvEBIT != null &&
                    this.EvEBIT.Equals(input.EvEBIT))
                ) && 
                (
                    this.EvEBITDA == input.EvEBITDA ||
                    (this.EvEBITDA != null &&
                    this.EvEBITDA.Equals(input.EvEBITDA))
                ) && 
                (
                    this.BepBV == input.BepBV ||
                    (this.BepBV != null &&
                    this.BepBV.Equals(input.BepBV))
                ) && 
                (
                    this.Sales == input.Sales ||
                    (this.Sales != null &&
                    this.Sales.Equals(input.Sales))
                ) && 
                (
                    this.Ebit == input.Ebit ||
                    (this.Ebit != null &&
                    this.Ebit.Equals(input.Ebit))
                ) && 
                (
                    this.Ebitda == input.Ebitda ||
                    (this.Ebitda != null &&
                    this.Ebitda.Equals(input.Ebitda))
                ) && 
                (
                    this.NetIncome == input.NetIncome ||
                    (this.NetIncome != null &&
                    this.NetIncome.Equals(input.NetIncome))
                ) && 
                (
                    this.Cash == input.Cash ||
                    (this.Cash != null &&
                    this.Cash.Equals(input.Cash))
                ) && 
                (
                    this.IntBearingDebt == input.IntBearingDebt ||
                    (this.IntBearingDebt != null &&
                    this.IntBearingDebt.Equals(input.IntBearingDebt))
                ) && 
                (
                    this.PrefStockValue == input.PrefStockValue ||
                    (this.PrefStockValue != null &&
                    this.PrefStockValue.Equals(input.PrefStockValue))
                ) && 
                (
                    this.TotalAssets == input.TotalAssets ||
                    (this.TotalAssets != null &&
                    this.TotalAssets.Equals(input.TotalAssets))
                ) && 
                (
                    this.SharesOutstanding == input.SharesOutstanding ||
                    (this.SharesOutstanding != null &&
                    this.SharesOutstanding.Equals(input.SharesOutstanding))
                ) && 
                (
                    this.Eps == input.Eps ||
                    (this.Eps != null &&
                    this.Eps.Equals(input.Eps))
                ) && 
                (
                    this.BookValueShare == input.BookValueShare ||
                    (this.BookValueShare != null &&
                    this.BookValueShare.Equals(input.BookValueShare))
                ) && 
                (
                    this.TargetPostMergerOwn == input.TargetPostMergerOwn ||
                    (this.TargetPostMergerOwn != null &&
                    this.TargetPostMergerOwn.Equals(input.TargetPostMergerOwn))
                ) && 
                (
                    this.BuyerPostMergerOwn == input.BuyerPostMergerOwn ||
                    (this.BuyerPostMergerOwn != null &&
                    this.BuyerPostMergerOwn.Equals(input.BuyerPostMergerOwn))
                ) && 
                (
                    this.Attitude == input.Attitude ||
                    this.Attitude.Equals(input.Attitude)
                ) && 
                (
                    this.DealSummary == input.DealSummary ||
                    (this.DealSummary != null &&
                    this.DealSummary.Equals(input.DealSummary))
                ) && 
                (
                    this.DealCharacteristics == input.DealCharacteristics ||
                    this.DealCharacteristics.SequenceEqual(input.DealCharacteristics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DealId != null)
                {
                    hashCode = (hashCode * 59) + this.DealId.GetHashCode();
                }
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                if (this.Buyers != null)
                {
                    hashCode = (hashCode * 59) + this.Buyers.GetHashCode();
                }
                if (this.Sellers != null)
                {
                    hashCode = (hashCode * 59) + this.Sellers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.RumorDate != null)
                {
                    hashCode = (hashCode * 59) + this.RumorDate.GetHashCode();
                }
                if (this.AnnounceDate != null)
                {
                    hashCode = (hashCode * 59) + this.AnnounceDate.GetHashCode();
                }
                if (this.ReferenceDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceDate.GetHashCode();
                }
                if (this.ExpectedCloseDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedCloseDate.GetHashCode();
                }
                if (this.CloseDate != null)
                {
                    hashCode = (hashCode * 59) + this.CloseDate.GetHashCode();
                }
                if (this.CancelDate != null)
                {
                    hashCode = (hashCode * 59) + this.CancelDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DealType.GetHashCode();
                hashCode = (hashCode * 59) + this.SourceFunds.GetHashCode();
                if (this.DealValue != null)
                {
                    hashCode = (hashCode * 59) + this.DealValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Purpose.GetHashCode();
                if (this.EvSales != null)
                {
                    hashCode = (hashCode * 59) + this.EvSales.GetHashCode();
                }
                if (this.EvEBIT != null)
                {
                    hashCode = (hashCode * 59) + this.EvEBIT.GetHashCode();
                }
                if (this.EvEBITDA != null)
                {
                    hashCode = (hashCode * 59) + this.EvEBITDA.GetHashCode();
                }
                if (this.BepBV != null)
                {
                    hashCode = (hashCode * 59) + this.BepBV.GetHashCode();
                }
                if (this.Sales != null)
                {
                    hashCode = (hashCode * 59) + this.Sales.GetHashCode();
                }
                if (this.Ebit != null)
                {
                    hashCode = (hashCode * 59) + this.Ebit.GetHashCode();
                }
                if (this.Ebitda != null)
                {
                    hashCode = (hashCode * 59) + this.Ebitda.GetHashCode();
                }
                if (this.NetIncome != null)
                {
                    hashCode = (hashCode * 59) + this.NetIncome.GetHashCode();
                }
                if (this.Cash != null)
                {
                    hashCode = (hashCode * 59) + this.Cash.GetHashCode();
                }
                if (this.IntBearingDebt != null)
                {
                    hashCode = (hashCode * 59) + this.IntBearingDebt.GetHashCode();
                }
                if (this.PrefStockValue != null)
                {
                    hashCode = (hashCode * 59) + this.PrefStockValue.GetHashCode();
                }
                if (this.TotalAssets != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAssets.GetHashCode();
                }
                if (this.SharesOutstanding != null)
                {
                    hashCode = (hashCode * 59) + this.SharesOutstanding.GetHashCode();
                }
                if (this.Eps != null)
                {
                    hashCode = (hashCode * 59) + this.Eps.GetHashCode();
                }
                if (this.BookValueShare != null)
                {
                    hashCode = (hashCode * 59) + this.BookValueShare.GetHashCode();
                }
                if (this.TargetPostMergerOwn != null)
                {
                    hashCode = (hashCode * 59) + this.TargetPostMergerOwn.GetHashCode();
                }
                if (this.BuyerPostMergerOwn != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerPostMergerOwn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Attitude.GetHashCode();
                if (this.DealSummary != null)
                {
                    hashCode = (hashCode * 59) + this.DealSummary.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DealCharacteristics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
