/*
 * FactSet Mergers and Acquisitions API
 *
 * The FactSet Mergers and Acquisitions API provides access to key transactions and pricing metrics on over 60,000 globally traded deals. Reference a Global Universe of Mergers and Acquisitions (M&A) transactions where the target of the deal is a Publicly traded Company. Review premiums, multiples and fundamental data to gather insights on deals and create predictive models based on different deal characteristics.    Monetary values returned by this API are converted and represented in USD.    This API is allows a limit of 10 requests per second and a maximum of 10 concurrent requests. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetMergersandAcquisitions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetMergersandAcquisitions.Model
{
    /// <summary>
    /// DealPublic
    /// </summary>
    [DataContract(Name = "DealPublic")]
    public partial class DealPublic : IEquatable<DealPublic>, IValidatableObject
    {
        /// <summary>
        /// Type of deal.
        /// </summary>
        /// <value>Type of deal.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DealTypeEnum
        {
            /// <summary>
            /// Enum AcquisitionMerger for value: Acquisition / Merger
            /// </summary>
            [EnumMember(Value = "Acquisition / Merger")]
            AcquisitionMerger = 1,

            /// <summary>
            /// Enum MajorityStake for value: Majority Stake
            /// </summary>
            [EnumMember(Value = "Majority Stake")]
            MajorityStake = 2,

            /// <summary>
            /// Enum MinorityStake for value: Minority Stake
            /// </summary>
            [EnumMember(Value = "Minority Stake")]
            MinorityStake = 3,

            /// <summary>
            /// Enum Spinoff for value: Spinoff
            /// </summary>
            [EnumMember(Value = "Spinoff")]
            Spinoff = 4

        }


        /// <summary>
        /// Type of deal.
        /// </summary>
        /// <value>Type of deal.</value>
        [DataMember(Name = "dealType", EmitDefaultValue = false)]
        public DealTypeEnum? DealType { get; set; }
        /// <summary>
        /// Status of the deal 
        /// </summary>
        /// <value>Status of the deal </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,

            /// <summary>
            /// Enum Complete for value: Complete
            /// </summary>
            [EnumMember(Value = "Complete")]
            Complete = 2,

            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 3,

            /// <summary>
            /// Enum Rumor for value: Rumor
            /// </summary>
            [EnumMember(Value = "Rumor")]
            Rumor = 4,

            /// <summary>
            /// Enum RumorCancelled for value: Rumor Cancelled
            /// </summary>
            [EnumMember(Value = "Rumor Cancelled")]
            RumorCancelled = 5

        }


        /// <summary>
        /// Status of the deal 
        /// </summary>
        /// <value>Status of the deal </value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DealPublic" /> class.
        /// </summary>
        /// <param name="dealId">Identifier for the deal..</param>
        /// <param name="target">target.</param>
        /// <param name="buyers">Array of participants in the deal who are buyers..</param>
        /// <param name="sellers">Array of participants in the deal who are sellers..</param>
        /// <param name="dealType">Type of deal..</param>
        /// <param name="announceDate">Date the deal was announced..</param>
        /// <param name="closeDate">Date the deal was closed..</param>
        /// <param name="transactionValue">Base Equity Value plus the value of the target’s outstanding net debt (where applicable). The target&#39;s outstanding net debt is defined as the total amount of short and long term interest-bearing debt less any cash and cash equivalents. The target&#39;s outstanding net debt will only be included in the Transaction Value calculation if a.) the acquirer is seeking to own 100% of the target, b.) the target is a non-financial company; and c.) the target&#39;s outstanding net debt is publicly disclosed (or the acquirer publicly states it is assuming a specific amount of liabilities). Otherwise, Transaction Value will be equal to the amount paid for the portion of the target acquired (Base Equity Value) and will exclude the target&#39;s outstanding net debt. Amounts returned are in USD..</param>
        /// <param name="status">Status of the deal .</param>
        public DealPublic(string dealId = default(string), Target target = default(Target), List<Participant> buyers = default(List<Participant>), List<Participant> sellers = default(List<Participant>), DealTypeEnum? dealType = default(DealTypeEnum?), DateTime announceDate = default(DateTime), DateTime? closeDate = default(DateTime?), decimal? transactionValue = default(decimal?), StatusEnum? status = default(StatusEnum?))
        {
            this.DealId = dealId;
            this.Target = target;
            this.Buyers = buyers;
            this.Sellers = sellers;
            this.DealType = dealType;
            this.AnnounceDate = announceDate;
            this.CloseDate = closeDate;
            this.TransactionValue = transactionValue;
            this.Status = status;
        }

        /// <summary>
        /// Identifier for the deal.
        /// </summary>
        /// <value>Identifier for the deal.</value>
        [DataMember(Name = "dealId", EmitDefaultValue = false)]
        public string DealId { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public Target Target { get; set; }

        /// <summary>
        /// Array of participants in the deal who are buyers.
        /// </summary>
        /// <value>Array of participants in the deal who are buyers.</value>
        [DataMember(Name = "buyers", EmitDefaultValue = false)]
        public List<Participant> Buyers { get; set; }

        /// <summary>
        /// Array of participants in the deal who are sellers.
        /// </summary>
        /// <value>Array of participants in the deal who are sellers.</value>
        [DataMember(Name = "sellers", EmitDefaultValue = true)]
        public List<Participant> Sellers { get; set; }

        /// <summary>
        /// Date the deal was announced.
        /// </summary>
        /// <value>Date the deal was announced.</value>
        [DataMember(Name = "announceDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime AnnounceDate { get; set; }

        /// <summary>
        /// Date the deal was closed.
        /// </summary>
        /// <value>Date the deal was closed.</value>
        [DataMember(Name = "closeDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? CloseDate { get; set; }

        /// <summary>
        /// Base Equity Value plus the value of the target’s outstanding net debt (where applicable). The target&#39;s outstanding net debt is defined as the total amount of short and long term interest-bearing debt less any cash and cash equivalents. The target&#39;s outstanding net debt will only be included in the Transaction Value calculation if a.) the acquirer is seeking to own 100% of the target, b.) the target is a non-financial company; and c.) the target&#39;s outstanding net debt is publicly disclosed (or the acquirer publicly states it is assuming a specific amount of liabilities). Otherwise, Transaction Value will be equal to the amount paid for the portion of the target acquired (Base Equity Value) and will exclude the target&#39;s outstanding net debt. Amounts returned are in USD.
        /// </summary>
        /// <value>Base Equity Value plus the value of the target’s outstanding net debt (where applicable). The target&#39;s outstanding net debt is defined as the total amount of short and long term interest-bearing debt less any cash and cash equivalents. The target&#39;s outstanding net debt will only be included in the Transaction Value calculation if a.) the acquirer is seeking to own 100% of the target, b.) the target is a non-financial company; and c.) the target&#39;s outstanding net debt is publicly disclosed (or the acquirer publicly states it is assuming a specific amount of liabilities). Otherwise, Transaction Value will be equal to the amount paid for the portion of the target acquired (Base Equity Value) and will exclude the target&#39;s outstanding net debt. Amounts returned are in USD.</value>
        [DataMember(Name = "transactionValue", EmitDefaultValue = true)]
        public decimal? TransactionValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DealPublic {\n");
            sb.Append("  DealId: ").Append(DealId).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Buyers: ").Append(Buyers).Append("\n");
            sb.Append("  Sellers: ").Append(Sellers).Append("\n");
            sb.Append("  DealType: ").Append(DealType).Append("\n");
            sb.Append("  AnnounceDate: ").Append(AnnounceDate).Append("\n");
            sb.Append("  CloseDate: ").Append(CloseDate).Append("\n");
            sb.Append("  TransactionValue: ").Append(TransactionValue).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DealPublic);
        }

        /// <summary>
        /// Returns true if DealPublic instances are equal
        /// </summary>
        /// <param name="input">Instance of DealPublic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DealPublic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DealId == input.DealId ||
                    (this.DealId != null &&
                    this.DealId.Equals(input.DealId))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.Buyers == input.Buyers ||
                    this.Buyers != null &&
                    input.Buyers != null &&
                    this.Buyers.SequenceEqual(input.Buyers)
                ) && 
                (
                    this.Sellers == input.Sellers ||
                    this.Sellers != null &&
                    input.Sellers != null &&
                    this.Sellers.SequenceEqual(input.Sellers)
                ) && 
                (
                    this.DealType == input.DealType ||
                    this.DealType.Equals(input.DealType)
                ) && 
                (
                    this.AnnounceDate == input.AnnounceDate ||
                    (this.AnnounceDate != null &&
                    this.AnnounceDate.Equals(input.AnnounceDate))
                ) && 
                (
                    this.CloseDate == input.CloseDate ||
                    (this.CloseDate != null &&
                    this.CloseDate.Equals(input.CloseDate))
                ) && 
                (
                    this.TransactionValue == input.TransactionValue ||
                    (this.TransactionValue != null &&
                    this.TransactionValue.Equals(input.TransactionValue))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DealId != null)
                {
                    hashCode = (hashCode * 59) + this.DealId.GetHashCode();
                }
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                if (this.Buyers != null)
                {
                    hashCode = (hashCode * 59) + this.Buyers.GetHashCode();
                }
                if (this.Sellers != null)
                {
                    hashCode = (hashCode * 59) + this.Sellers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DealType.GetHashCode();
                if (this.AnnounceDate != null)
                {
                    hashCode = (hashCode * 59) + this.AnnounceDate.GetHashCode();
                }
                if (this.CloseDate != null)
                {
                    hashCode = (hashCode * 59) + this.CloseDate.GetHashCode();
                }
                if (this.TransactionValue != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
