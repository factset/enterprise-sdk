/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Price Time Fill object
    /// </summary>
    [DataContract(Name = "PriceTimeFill")]
    public partial class PriceTimeFill : IEquatable<PriceTimeFill>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceTimeFill" /> class.
        /// </summary>
        /// <param name="time">Time.</param>
        /// <param name="lastFillTimeUtc">Last Fill Time Utc.</param>
        /// <param name="price">Price.</param>
        /// <param name="venue">Venue.</param>
        /// <param name="orderId">Order Id.</param>
        /// <param name="volume">Volume.</param>
        /// <param name="spreadCross">Spread Cross.</param>
        /// <param name="cumVwap">cumVwap.</param>
        public PriceTimeFill(long time = default(long), string lastFillTimeUtc = default(string), double price = default(double), string venue = default(string), string orderId = default(string), double volume = default(double), double spreadCross = default(double), double cumVwap = default(double))
        {
            this.Time = time;
            this.LastFillTimeUtc = lastFillTimeUtc;
            this.Price = price;
            this.Venue = venue;
            this.OrderId = orderId;
            this.Volume = volume;
            this.SpreadCross = spreadCross;
            this.CumVwap = cumVwap;
        }

        /// <summary>
        /// Time
        /// </summary>
        /// <value>Time</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public long Time { get; set; }

        /// <summary>
        /// Last Fill Time Utc
        /// </summary>
        /// <value>Last Fill Time Utc</value>
        [DataMember(Name = "lastFillTimeUtc", EmitDefaultValue = false)]
        public string LastFillTimeUtc { get; set; }

        /// <summary>
        /// Price
        /// </summary>
        /// <value>Price</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Venue
        /// </summary>
        /// <value>Venue</value>
        [DataMember(Name = "venue", EmitDefaultValue = false)]
        public string Venue { get; set; }

        /// <summary>
        /// Order Id
        /// </summary>
        /// <value>Order Id</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Volume
        /// </summary>
        /// <value>Volume</value>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public double Volume { get; set; }

        /// <summary>
        /// Spread Cross
        /// </summary>
        /// <value>Spread Cross</value>
        [DataMember(Name = "spreadCross", EmitDefaultValue = false)]
        public double SpreadCross { get; set; }

        /// <summary>
        /// cumVwap
        /// </summary>
        /// <value>cumVwap</value>
        [DataMember(Name = "cumVwap", EmitDefaultValue = false)]
        public double CumVwap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PriceTimeFill {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  LastFillTimeUtc: ").Append(LastFillTimeUtc).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  SpreadCross: ").Append(SpreadCross).Append("\n");
            sb.Append("  CumVwap: ").Append(CumVwap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceTimeFill);
        }

        /// <summary>
        /// Returns true if PriceTimeFill instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceTimeFill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceTimeFill input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.LastFillTimeUtc == input.LastFillTimeUtc ||
                    (this.LastFillTimeUtc != null &&
                    this.LastFillTimeUtc.Equals(input.LastFillTimeUtc))
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Venue == input.Venue ||
                    (this.Venue != null &&
                    this.Venue.Equals(input.Venue))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                ) && 
                (
                    this.SpreadCross == input.SpreadCross ||
                    this.SpreadCross.Equals(input.SpreadCross)
                ) && 
                (
                    this.CumVwap == input.CumVwap ||
                    this.CumVwap.Equals(input.CumVwap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Time.GetHashCode();
                if (this.LastFillTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.LastFillTimeUtc.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.Venue != null)
                {
                    hashCode = (hashCode * 59) + this.Venue.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.SpreadCross.GetHashCode();
                hashCode = (hashCode * 59) + this.CumVwap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
