/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Quote Inside-Size Response object
    /// </summary>
    [DataContract(Name = "QuoteInsideSizeResponse")]
    public partial class QuoteInsideSizeResponse : IEquatable<QuoteInsideSizeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteInsideSizeResponse" /> class.
        /// </summary>
        /// <param name="analytics">List of Quote Inside-Size records.</param>
        public QuoteInsideSizeResponse(List<QuoteInsideSize> analytics = default(List<QuoteInsideSize>))
        {
            this.Analytics = analytics;
        }

        /// <summary>
        /// List of Quote Inside-Size records
        /// </summary>
        /// <value>List of Quote Inside-Size records</value>
        [DataMember(Name = "analytics", EmitDefaultValue = false)]
        public List<QuoteInsideSize> Analytics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuoteInsideSizeResponse {\n");
            sb.Append("  Analytics: ").Append(Analytics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteInsideSizeResponse);
        }

        /// <summary>
        /// Returns true if QuoteInsideSizeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteInsideSizeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteInsideSizeResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Analytics == input.Analytics ||
                    this.Analytics != null &&
                    input.Analytics != null &&
                    this.Analytics.SequenceEqual(input.Analytics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Analytics != null)
                {
                    hashCode = (hashCode * 59) + this.Analytics.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
