/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Z-Score object
    /// </summary>
    [DataContract(Name = "ZScore")]
    public partial class ZScore : IEquatable<ZScore>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZScore" /> class.
        /// </summary>
        /// <param name="recentDate">Recent Date.</param>
        /// <param name="securityId">Security Id.</param>
        /// <param name="country">Country.</param>
        /// <param name="histAvg">HistAvg.</param>
        /// <param name="histStd">HistStd.</param>
        /// <param name="histMax">HistMax.</param>
        /// <param name="histMin">HistMin.</param>
        /// <param name="firstQuartile">FirstQuartile.</param>
        /// <param name="metric">Metric.</param>
        /// <param name="thirdQuartile">ThirdQuartile.</param>
        /// <param name="recentValue">Recent Value.</param>
        public ZScore(string recentDate = default(string), string securityId = default(string), string country = default(string), double histAvg = default(double), double histStd = default(double), double histMax = default(double), double histMin = default(double), double firstQuartile = default(double), string metric = default(string), double thirdQuartile = default(double), double recentValue = default(double))
        {
            this.RecentDate = recentDate;
            this.SecurityId = securityId;
            this.Country = country;
            this.HistAvg = histAvg;
            this.HistStd = histStd;
            this.HistMax = histMax;
            this.HistMin = histMin;
            this.FirstQuartile = firstQuartile;
            this.Metric = metric;
            this.ThirdQuartile = thirdQuartile;
            this.RecentValue = recentValue;
        }

        /// <summary>
        /// Recent Date
        /// </summary>
        /// <value>Recent Date</value>
        [DataMember(Name = "recentDate", EmitDefaultValue = false)]
        public string RecentDate { get; set; }

        /// <summary>
        /// Security Id
        /// </summary>
        /// <value>Security Id</value>
        [DataMember(Name = "securityId", EmitDefaultValue = false)]
        public string SecurityId { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        /// <value>Country</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// HistAvg
        /// </summary>
        /// <value>HistAvg</value>
        [DataMember(Name = "histAvg", EmitDefaultValue = false)]
        public double HistAvg { get; set; }

        /// <summary>
        /// HistStd
        /// </summary>
        /// <value>HistStd</value>
        [DataMember(Name = "histStd", EmitDefaultValue = false)]
        public double HistStd { get; set; }

        /// <summary>
        /// HistMax
        /// </summary>
        /// <value>HistMax</value>
        [DataMember(Name = "histMax", EmitDefaultValue = false)]
        public double HistMax { get; set; }

        /// <summary>
        /// HistMin
        /// </summary>
        /// <value>HistMin</value>
        [DataMember(Name = "histMin", EmitDefaultValue = false)]
        public double HistMin { get; set; }

        /// <summary>
        /// FirstQuartile
        /// </summary>
        /// <value>FirstQuartile</value>
        [DataMember(Name = "firstQuartile", EmitDefaultValue = false)]
        public double FirstQuartile { get; set; }

        /// <summary>
        /// Metric
        /// </summary>
        /// <value>Metric</value>
        [DataMember(Name = "metric", EmitDefaultValue = false)]
        public string Metric { get; set; }

        /// <summary>
        /// ThirdQuartile
        /// </summary>
        /// <value>ThirdQuartile</value>
        [DataMember(Name = "thirdQuartile", EmitDefaultValue = false)]
        public double ThirdQuartile { get; set; }

        /// <summary>
        /// Recent Value
        /// </summary>
        /// <value>Recent Value</value>
        [DataMember(Name = "recentValue", EmitDefaultValue = false)]
        public double RecentValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZScore {\n");
            sb.Append("  RecentDate: ").Append(RecentDate).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  HistAvg: ").Append(HistAvg).Append("\n");
            sb.Append("  HistStd: ").Append(HistStd).Append("\n");
            sb.Append("  HistMax: ").Append(HistMax).Append("\n");
            sb.Append("  HistMin: ").Append(HistMin).Append("\n");
            sb.Append("  FirstQuartile: ").Append(FirstQuartile).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  ThirdQuartile: ").Append(ThirdQuartile).Append("\n");
            sb.Append("  RecentValue: ").Append(RecentValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZScore);
        }

        /// <summary>
        /// Returns true if ZScore instances are equal
        /// </summary>
        /// <param name="input">Instance of ZScore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZScore input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RecentDate == input.RecentDate ||
                    (this.RecentDate != null &&
                    this.RecentDate.Equals(input.RecentDate))
                ) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.HistAvg == input.HistAvg ||
                    this.HistAvg.Equals(input.HistAvg)
                ) && 
                (
                    this.HistStd == input.HistStd ||
                    this.HistStd.Equals(input.HistStd)
                ) && 
                (
                    this.HistMax == input.HistMax ||
                    this.HistMax.Equals(input.HistMax)
                ) && 
                (
                    this.HistMin == input.HistMin ||
                    this.HistMin.Equals(input.HistMin)
                ) && 
                (
                    this.FirstQuartile == input.FirstQuartile ||
                    this.FirstQuartile.Equals(input.FirstQuartile)
                ) && 
                (
                    this.Metric == input.Metric ||
                    (this.Metric != null &&
                    this.Metric.Equals(input.Metric))
                ) && 
                (
                    this.ThirdQuartile == input.ThirdQuartile ||
                    this.ThirdQuartile.Equals(input.ThirdQuartile)
                ) && 
                (
                    this.RecentValue == input.RecentValue ||
                    this.RecentValue.Equals(input.RecentValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecentDate != null)
                {
                    hashCode = (hashCode * 59) + this.RecentDate.GetHashCode();
                }
                if (this.SecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityId.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HistAvg.GetHashCode();
                hashCode = (hashCode * 59) + this.HistStd.GetHashCode();
                hashCode = (hashCode * 59) + this.HistMax.GetHashCode();
                hashCode = (hashCode * 59) + this.HistMin.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstQuartile.GetHashCode();
                if (this.Metric != null)
                {
                    hashCode = (hashCode * 59) + this.Metric.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ThirdQuartile.GetHashCode();
                hashCode = (hashCode * 59) + this.RecentValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
