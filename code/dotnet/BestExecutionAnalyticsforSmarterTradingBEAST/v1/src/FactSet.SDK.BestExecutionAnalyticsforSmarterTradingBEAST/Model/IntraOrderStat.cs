/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Intra Order Stat data
    /// </summary>
    [DataContract(Name = "IntraOrderStat")]
    public partial class IntraOrderStat : IEquatable<IntraOrderStat>, IValidatableObject
    {
        /// <summary>
        /// Metric
        /// </summary>
        /// <value>Metric</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MetricEnum
        {
            /// <summary>
            /// Enum Spread for value: spread
            /// </summary>
            [EnumMember(Value = "spread")]
            Spread = 1,

            /// <summary>
            /// Enum Size for value: size
            /// </summary>
            [EnumMember(Value = "size")]
            Size = 2,

            /// <summary>
            /// Enum BidSize for value: bidSize
            /// </summary>
            [EnumMember(Value = "bidSize")]
            BidSize = 3,

            /// <summary>
            /// Enum AskSize for value: askSize
            /// </summary>
            [EnumMember(Value = "askSize")]
            AskSize = 4

        }


        /// <summary>
        /// Metric
        /// </summary>
        /// <value>Metric</value>
        [DataMember(Name = "metric", EmitDefaultValue = false)]
        public MetricEnum? Metric { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IntraOrderStat" /> class.
        /// </summary>
        /// <param name="metric">Metric.</param>
        /// <param name="histAvg">histAvg.</param>
        /// <param name="histStd">histStd.</param>
        /// <param name="histMax">histMax.</param>
        /// <param name="histMin">histMin.</param>
        /// <param name="histMedian">histMedian.</param>
        /// <param name="firstQuartile">firstQuartile.</param>
        /// <param name="thirdQuartile">thirdQuartile.</param>
        /// <param name="recentValue">recentValue.</param>
        /// <param name="recentDate">Recent Date.</param>
        public IntraOrderStat(MetricEnum? metric = default(MetricEnum?), double histAvg = default(double), double histStd = default(double), double histMax = default(double), double histMin = default(double), double histMedian = default(double), double firstQuartile = default(double), double thirdQuartile = default(double), double recentValue = default(double), string recentDate = default(string))
        {
            this.Metric = metric;
            this.HistAvg = histAvg;
            this.HistStd = histStd;
            this.HistMax = histMax;
            this.HistMin = histMin;
            this.HistMedian = histMedian;
            this.FirstQuartile = firstQuartile;
            this.ThirdQuartile = thirdQuartile;
            this.RecentValue = recentValue;
            this.RecentDate = recentDate;
        }

        /// <summary>
        /// histAvg
        /// </summary>
        /// <value>histAvg</value>
        [DataMember(Name = "histAvg", EmitDefaultValue = false)]
        public double HistAvg { get; set; }

        /// <summary>
        /// histStd
        /// </summary>
        /// <value>histStd</value>
        [DataMember(Name = "histStd", EmitDefaultValue = false)]
        public double HistStd { get; set; }

        /// <summary>
        /// histMax
        /// </summary>
        /// <value>histMax</value>
        [DataMember(Name = "histMax", EmitDefaultValue = false)]
        public double HistMax { get; set; }

        /// <summary>
        /// histMin
        /// </summary>
        /// <value>histMin</value>
        [DataMember(Name = "histMin", EmitDefaultValue = false)]
        public double HistMin { get; set; }

        /// <summary>
        /// histMedian
        /// </summary>
        /// <value>histMedian</value>
        [DataMember(Name = "histMedian", EmitDefaultValue = false)]
        public double HistMedian { get; set; }

        /// <summary>
        /// firstQuartile
        /// </summary>
        /// <value>firstQuartile</value>
        [DataMember(Name = "firstQuartile", EmitDefaultValue = false)]
        public double FirstQuartile { get; set; }

        /// <summary>
        /// thirdQuartile
        /// </summary>
        /// <value>thirdQuartile</value>
        [DataMember(Name = "thirdQuartile", EmitDefaultValue = false)]
        public double ThirdQuartile { get; set; }

        /// <summary>
        /// recentValue
        /// </summary>
        /// <value>recentValue</value>
        [DataMember(Name = "recentValue", EmitDefaultValue = false)]
        public double RecentValue { get; set; }

        /// <summary>
        /// Recent Date
        /// </summary>
        /// <value>Recent Date</value>
        [DataMember(Name = "recentDate", EmitDefaultValue = false)]
        public string RecentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntraOrderStat {\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  HistAvg: ").Append(HistAvg).Append("\n");
            sb.Append("  HistStd: ").Append(HistStd).Append("\n");
            sb.Append("  HistMax: ").Append(HistMax).Append("\n");
            sb.Append("  HistMin: ").Append(HistMin).Append("\n");
            sb.Append("  HistMedian: ").Append(HistMedian).Append("\n");
            sb.Append("  FirstQuartile: ").Append(FirstQuartile).Append("\n");
            sb.Append("  ThirdQuartile: ").Append(ThirdQuartile).Append("\n");
            sb.Append("  RecentValue: ").Append(RecentValue).Append("\n");
            sb.Append("  RecentDate: ").Append(RecentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntraOrderStat);
        }

        /// <summary>
        /// Returns true if IntraOrderStat instances are equal
        /// </summary>
        /// <param name="input">Instance of IntraOrderStat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntraOrderStat input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Metric == input.Metric ||
                    this.Metric.Equals(input.Metric)
                ) && 
                (
                    this.HistAvg == input.HistAvg ||
                    this.HistAvg.Equals(input.HistAvg)
                ) && 
                (
                    this.HistStd == input.HistStd ||
                    this.HistStd.Equals(input.HistStd)
                ) && 
                (
                    this.HistMax == input.HistMax ||
                    this.HistMax.Equals(input.HistMax)
                ) && 
                (
                    this.HistMin == input.HistMin ||
                    this.HistMin.Equals(input.HistMin)
                ) && 
                (
                    this.HistMedian == input.HistMedian ||
                    this.HistMedian.Equals(input.HistMedian)
                ) && 
                (
                    this.FirstQuartile == input.FirstQuartile ||
                    this.FirstQuartile.Equals(input.FirstQuartile)
                ) && 
                (
                    this.ThirdQuartile == input.ThirdQuartile ||
                    this.ThirdQuartile.Equals(input.ThirdQuartile)
                ) && 
                (
                    this.RecentValue == input.RecentValue ||
                    this.RecentValue.Equals(input.RecentValue)
                ) && 
                (
                    this.RecentDate == input.RecentDate ||
                    (this.RecentDate != null &&
                    this.RecentDate.Equals(input.RecentDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Metric.GetHashCode();
                hashCode = (hashCode * 59) + this.HistAvg.GetHashCode();
                hashCode = (hashCode * 59) + this.HistStd.GetHashCode();
                hashCode = (hashCode * 59) + this.HistMax.GetHashCode();
                hashCode = (hashCode * 59) + this.HistMin.GetHashCode();
                hashCode = (hashCode * 59) + this.HistMedian.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstQuartile.GetHashCode();
                hashCode = (hashCode * 59) + this.ThirdQuartile.GetHashCode();
                hashCode = (hashCode * 59) + this.RecentValue.GetHashCode();
                if (this.RecentDate != null)
                {
                    hashCode = (hashCode * 59) + this.RecentDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
