/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Index ETF object
    /// </summary>
    [DataContract(Name = "IndexETF")]
    public partial class IndexETF : IEquatable<IndexETF>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexETF" /> class.
        /// </summary>
        /// <param name="priceChange">Price Change.</param>
        /// <param name="time">Time.</param>
        /// <param name="price">Price.</param>
        /// <param name="etfIndexName">ETF Index Name.</param>
        public IndexETF(double priceChange = default(double), long time = default(long), double price = default(double), string etfIndexName = default(string))
        {
            this.PriceChange = priceChange;
            this.Time = time;
            this.Price = price;
            this.EtfIndexName = etfIndexName;
        }

        /// <summary>
        /// Price Change
        /// </summary>
        /// <value>Price Change</value>
        [DataMember(Name = "priceChange", EmitDefaultValue = false)]
        public double PriceChange { get; set; }

        /// <summary>
        /// Time
        /// </summary>
        /// <value>Time</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public long Time { get; set; }

        /// <summary>
        /// Price
        /// </summary>
        /// <value>Price</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// ETF Index Name
        /// </summary>
        /// <value>ETF Index Name</value>
        [DataMember(Name = "etfIndexName", EmitDefaultValue = false)]
        public string EtfIndexName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndexETF {\n");
            sb.Append("  PriceChange: ").Append(PriceChange).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  EtfIndexName: ").Append(EtfIndexName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IndexETF);
        }

        /// <summary>
        /// Returns true if IndexETF instances are equal
        /// </summary>
        /// <param name="input">Instance of IndexETF to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndexETF input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PriceChange == input.PriceChange ||
                    this.PriceChange.Equals(input.PriceChange)
                ) && 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.EtfIndexName == input.EtfIndexName ||
                    (this.EtfIndexName != null &&
                    this.EtfIndexName.Equals(input.EtfIndexName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PriceChange.GetHashCode();
                hashCode = (hashCode * 59) + this.Time.GetHashCode();
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.EtfIndexName != null)
                {
                    hashCode = (hashCode * 59) + this.EtfIndexName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
