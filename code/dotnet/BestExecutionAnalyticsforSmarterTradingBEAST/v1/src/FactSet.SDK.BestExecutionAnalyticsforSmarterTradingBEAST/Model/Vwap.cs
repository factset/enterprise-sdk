/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// The VWAP Data object
    /// </summary>
    [DataContract(Name = "Vwap")]
    public partial class Vwap : IEquatable<Vwap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vwap" /> class.
        /// </summary>
        /// <param name="securityId">Security Id.</param>
        /// <param name="country">The two character ISO country code.</param>
        /// <param name="dateId">Date Id.</param>
        /// <param name="timeMs">Time ms.</param>
        /// <param name="vwap">vwap.</param>
        public Vwap(string securityId = default(string), string country = default(string), string dateId = default(string), long timeMs = default(long), double vwap = default(double))
        {
            this.SecurityId = securityId;
            this.Country = country;
            this.DateId = dateId;
            this.TimeMs = timeMs;
            this._Vwap = vwap;
        }

        /// <summary>
        /// Security Id
        /// </summary>
        /// <value>Security Id</value>
        [DataMember(Name = "securityId", EmitDefaultValue = false)]
        public string SecurityId { get; set; }

        /// <summary>
        /// The two character ISO country code
        /// </summary>
        /// <value>The two character ISO country code</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Date Id
        /// </summary>
        /// <value>Date Id</value>
        [DataMember(Name = "dateId", EmitDefaultValue = false)]
        public string DateId { get; set; }

        /// <summary>
        /// Time ms
        /// </summary>
        /// <value>Time ms</value>
        [DataMember(Name = "timeMs", EmitDefaultValue = false)]
        public long TimeMs { get; set; }

        /// <summary>
        /// vwap
        /// </summary>
        /// <value>vwap</value>
        [DataMember(Name = "vwap", EmitDefaultValue = false)]
        public double _Vwap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Vwap {\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DateId: ").Append(DateId).Append("\n");
            sb.Append("  TimeMs: ").Append(TimeMs).Append("\n");
            sb.Append("  _Vwap: ").Append(_Vwap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Vwap);
        }

        /// <summary>
        /// Returns true if Vwap instances are equal
        /// </summary>
        /// <param name="input">Instance of Vwap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vwap input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.DateId == input.DateId ||
                    (this.DateId != null &&
                    this.DateId.Equals(input.DateId))
                ) && 
                (
                    this.TimeMs == input.TimeMs ||
                    this.TimeMs.Equals(input.TimeMs)
                ) && 
                (
                    this._Vwap == input._Vwap ||
                    this._Vwap.Equals(input._Vwap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityId.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.DateId != null)
                {
                    hashCode = (hashCode * 59) + this.DateId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TimeMs.GetHashCode();
                hashCode = (hashCode * 59) + this._Vwap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
