/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Field Values response object
    /// </summary>
    [DataContract(Name = "FieldValuesResponse")]
    public partial class FieldValuesResponse : IEquatable<FieldValuesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldValuesResponse" /> class.
        /// </summary>
        /// <param name="symbol">Symbol field values.</param>
        /// <param name="country">Country field values.</param>
        /// <param name="trader">Trader field values.</param>
        /// <param name="strategy">Strategy field values.</param>
        /// <param name="broker">Broker field values.</param>
        public FieldValuesResponse(List<string> symbol = default(List<string>), List<string> country = default(List<string>), List<string> trader = default(List<string>), List<string> strategy = default(List<string>), List<string> broker = default(List<string>))
        {
            this.Symbol = symbol;
            this.Country = country;
            this.Trader = trader;
            this.Strategy = strategy;
            this.Broker = broker;
        }

        /// <summary>
        /// Symbol field values
        /// </summary>
        /// <value>Symbol field values</value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public List<string> Symbol { get; set; }

        /// <summary>
        /// Country field values
        /// </summary>
        /// <value>Country field values</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public List<string> Country { get; set; }

        /// <summary>
        /// Trader field values
        /// </summary>
        /// <value>Trader field values</value>
        [DataMember(Name = "trader", EmitDefaultValue = false)]
        public List<string> Trader { get; set; }

        /// <summary>
        /// Strategy field values
        /// </summary>
        /// <value>Strategy field values</value>
        [DataMember(Name = "strategy", EmitDefaultValue = false)]
        public List<string> Strategy { get; set; }

        /// <summary>
        /// Broker field values
        /// </summary>
        /// <value>Broker field values</value>
        [DataMember(Name = "broker", EmitDefaultValue = false)]
        public List<string> Broker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldValuesResponse {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Trader: ").Append(Trader).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Broker: ").Append(Broker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldValuesResponse);
        }

        /// <summary>
        /// Returns true if FieldValuesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldValuesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldValuesResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Symbol == input.Symbol ||
                    this.Symbol != null &&
                    input.Symbol != null &&
                    this.Symbol.SequenceEqual(input.Symbol)
                ) && 
                (
                    this.Country == input.Country ||
                    this.Country != null &&
                    input.Country != null &&
                    this.Country.SequenceEqual(input.Country)
                ) && 
                (
                    this.Trader == input.Trader ||
                    this.Trader != null &&
                    input.Trader != null &&
                    this.Trader.SequenceEqual(input.Trader)
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    this.Strategy != null &&
                    input.Strategy != null &&
                    this.Strategy.SequenceEqual(input.Strategy)
                ) && 
                (
                    this.Broker == input.Broker ||
                    this.Broker != null &&
                    input.Broker != null &&
                    this.Broker.SequenceEqual(input.Broker)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Trader != null)
                {
                    hashCode = (hashCode * 59) + this.Trader.GetHashCode();
                }
                if (this.Strategy != null)
                {
                    hashCode = (hashCode * 59) + this.Strategy.GetHashCode();
                }
                if (this.Broker != null)
                {
                    hashCode = (hashCode * 59) + this.Broker.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
