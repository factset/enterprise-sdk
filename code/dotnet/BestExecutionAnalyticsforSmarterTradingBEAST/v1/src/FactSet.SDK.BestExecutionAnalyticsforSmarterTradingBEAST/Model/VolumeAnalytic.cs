/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Volume Analytic object
    /// </summary>
    [DataContract(Name = "VolumeAnalytic")]
    public partial class VolumeAnalytic : IEquatable<VolumeAnalytic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumeAnalytic" /> class.
        /// </summary>
        /// <param name="dateId">Date Id.</param>
        /// <param name="bidSideVolume">Bid Side Volume.</param>
        /// <param name="askSideVolume">Ask Side Volume.</param>
        /// <param name="blockVolume">Block Volume.</param>
        public VolumeAnalytic(string dateId = default(string), double bidSideVolume = default(double), double askSideVolume = default(double), double blockVolume = default(double))
        {
            this.DateId = dateId;
            this.BidSideVolume = bidSideVolume;
            this.AskSideVolume = askSideVolume;
            this.BlockVolume = blockVolume;
        }

        /// <summary>
        /// Date Id
        /// </summary>
        /// <value>Date Id</value>
        [DataMember(Name = "dateId", EmitDefaultValue = false)]
        public string DateId { get; set; }

        /// <summary>
        /// Bid Side Volume
        /// </summary>
        /// <value>Bid Side Volume</value>
        [DataMember(Name = "bidSideVolume", EmitDefaultValue = false)]
        public double BidSideVolume { get; set; }

        /// <summary>
        /// Ask Side Volume
        /// </summary>
        /// <value>Ask Side Volume</value>
        [DataMember(Name = "askSideVolume", EmitDefaultValue = false)]
        public double AskSideVolume { get; set; }

        /// <summary>
        /// Block Volume
        /// </summary>
        /// <value>Block Volume</value>
        [DataMember(Name = "blockVolume", EmitDefaultValue = false)]
        public double BlockVolume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VolumeAnalytic {\n");
            sb.Append("  DateId: ").Append(DateId).Append("\n");
            sb.Append("  BidSideVolume: ").Append(BidSideVolume).Append("\n");
            sb.Append("  AskSideVolume: ").Append(AskSideVolume).Append("\n");
            sb.Append("  BlockVolume: ").Append(BlockVolume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VolumeAnalytic);
        }

        /// <summary>
        /// Returns true if VolumeAnalytic instances are equal
        /// </summary>
        /// <param name="input">Instance of VolumeAnalytic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeAnalytic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateId == input.DateId ||
                    (this.DateId != null &&
                    this.DateId.Equals(input.DateId))
                ) && 
                (
                    this.BidSideVolume == input.BidSideVolume ||
                    this.BidSideVolume.Equals(input.BidSideVolume)
                ) && 
                (
                    this.AskSideVolume == input.AskSideVolume ||
                    this.AskSideVolume.Equals(input.AskSideVolume)
                ) && 
                (
                    this.BlockVolume == input.BlockVolume ||
                    this.BlockVolume.Equals(input.BlockVolume)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateId != null)
                {
                    hashCode = (hashCode * 59) + this.DateId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BidSideVolume.GetHashCode();
                hashCode = (hashCode * 59) + this.AskSideVolume.GetHashCode();
                hashCode = (hashCode * 59) + this.BlockVolume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
