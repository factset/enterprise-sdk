/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Order object
    /// </summary>
    [DataContract(Name = "Order")]
    public partial class Order : IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Order type
        /// </summary>
        /// <value>Order type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageTypeEnum
        {
            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 1,

            /// <summary>
            /// Enum Parent for value: parent
            /// </summary>
            [EnumMember(Value = "parent")]
            Parent = 2,

            /// <summary>
            /// Enum Child for value: child
            /// </summary>
            [EnumMember(Value = "child")]
            Child = 3

        }


        /// <summary>
        /// Order type
        /// </summary>
        /// <value>Order type</value>
        [DataMember(Name = "messageType", EmitDefaultValue = false)]
        public MessageTypeEnum? MessageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the Order.</param>
        /// <param name="basketId">Order Basket Id.</param>
        /// <param name="parentId">Order Parent Id.</param>
        /// <param name="grandParentId">Order Grand Parent Id.</param>
        /// <param name="orderId">Order Id.</param>
        /// <param name="masterOrderId">Master Order Id.</param>
        /// <param name="compositeId">Composite Id.</param>
        /// <param name="symbol">Order Symbol.</param>
        /// <param name="isin">Order ISIN.</param>
        /// <param name="securityId">Order Security Id.</param>
        /// <param name="companyName">Company Name.</param>
        /// <param name="side">Side of the order.</param>
        /// <param name="synthetic">Order Synthetic flag.</param>
        /// <param name="orderVolume">Order Volume.</param>
        /// <param name="volume">Volume.</param>
        /// <param name="price">Order Price.</param>
        /// <param name="limitPrice">Order Limit Price.</param>
        /// <param name="currency">Order Currency.</param>
        /// <param name="openPrice">Order Open Price.</param>
        /// <param name="closePrice">Order Close Price.</param>
        /// <param name="refValue">Order Ref Value.</param>
        /// <param name="vwapFfClose">Order VWAP FfClose.</param>
        /// <param name="vwapOpenClose">Order VWAP OpenClose.</param>
        /// <param name="firstFillMid">Order firstFillMid.</param>
        /// <param name="firstFillMidPerfBps">Order firstFillMidPerfBps.</param>
        /// <param name="openPerfBps">Order openPerfBps.</param>
        /// <param name="lastFillMid">Order lastFillMid.</param>
        /// <param name="lastFillMidPerfBps">Order lastFillMidPerfBps.</param>
        /// <param name="reversion5MinMidPrice">Order reversion5MinMidPrice.</param>
        /// <param name="reversion5MinMidBps">Order reversion5MinMidBps.</param>
        /// <param name="reversion10MinMidPrice">Order reversion10MinMidPrice.</param>
        /// <param name="reversion10MinMidBps">Order reversion10MinMidBps.</param>
        /// <param name="reversion15MinMidPrice">Order reversion15MinMidPrice.</param>
        /// <param name="reversion15MinMidBps">Order reversion15MinMidBps.</param>
        /// <param name="reversion60MinMidPrice">Order reversion60MinMidPrice.</param>
        /// <param name="reversion60MinMidBps">Order reversion60MinMidBps.</param>
        /// <param name="intraOrderVolatility">Order intraOrderVolatility.</param>
        /// <param name="vwapFfLf">Order vwapFfLf.</param>
        /// <param name="vwapFfLfPerfBps">Order vwapFfLfPerfBps.</param>
        /// <param name="closePerfBps">Order closePerfBps.</param>
        /// <param name="durationBinMin">Order Duration Bin Min.</param>
        /// <param name="durationBinSec">Order Duration Bin Sec.</param>
        /// <param name="participationRatePct">Order Participation Rate Percentage.</param>
        /// <param name="spreadCross">Order spreadCross.</param>
        /// <param name="duration">Order duration.</param>
        /// <param name="pwp20Price">Order pwp20Price.</param>
        /// <param name="pwp20Volume">Order pwp20Volume.</param>
        /// <param name="pwp20PerfBps">Order pwp20PerfBps.</param>
        /// <param name="pwp10Price">Order pwp10Price.</param>
        /// <param name="pwp10Volume">Order pwp10Volume.</param>
        /// <param name="pwp10PerfBps">Order pwp10PerfBps.</param>
        /// <param name="pwp05Price">Order pwp05Price.</param>
        /// <param name="pwp05Volume">Order pwp05Volume.</param>
        /// <param name="pwp05PerfBps">Order pwp05PerfBps.</param>
        /// <param name="pwp01Price">Order pwp01Price.</param>
        /// <param name="pwp01Volume">Order pwp01Volume.</param>
        /// <param name="pwp01PerfBps">Order pwp01PerfBps.</param>
        /// <param name="pwp02Price">Order pwp02Price.</param>
        /// <param name="pwp02Volume">Order pwp02Volume.</param>
        /// <param name="pwp02PerfBps">Order pwp02PerfBps.</param>
        /// <param name="pwp03Price">Order pwp03Price.</param>
        /// <param name="pwp03Volume">Order pwp03Volume.</param>
        /// <param name="pwp03PerfBps">Order pwp03PerfBps.</param>
        /// <param name="pwp50Price">Order pwp50Price.</param>
        /// <param name="pwp50Volume">Order pwp50Volume.</param>
        /// <param name="pwp50PerfBps">Order pwp50PerfBps.</param>
        /// <param name="pwp100Price">Order pwp100Price.</param>
        /// <param name="pwp100Volume">Order pwp100Volume.</param>
        /// <param name="pwp100PerfBps">Order pwp100PerfBps.</param>
        /// <param name="marketAdjustment">Market Adjustment.</param>
        /// <param name="intraOrderVolatilityBps">intraOrderVolatilityBps.</param>
        /// <param name="refCurrency">Order Reference Currency.</param>
        /// <param name="vwapFfLfVolume">vwapFfLfVolume.</param>
        /// <param name="limitVwapFfLfVolume">limitVwapFfLfVolume.</param>
        /// <param name="limitVwapFfLf">limitVwapFfLf.</param>
        /// <param name="limitVwapFfLfPerfBps">limitVwapFfLfPerfBps.</param>
        /// <param name="limitParticipationRatePct">limitParticipationRatePct.</param>
        /// <param name="marketSpreadCross">marketSpreadCross.</param>
        /// <param name="limitPwp20Price">limitPwp20Price.</param>
        /// <param name="limitPwp20Volume">limitPwp20Volume.</param>
        /// <param name="limitPwp20PerfBps">limitPwp20PerfBps.</param>
        /// <param name="limitPwp10Price">limitPwp10Price.</param>
        /// <param name="limitPwp10Volume">limitPwp10Volume.</param>
        /// <param name="limitPwp10PerfBps">limitPwp10PerfBps.</param>
        /// <param name="limitPwp05Price">limitPwp05Price.</param>
        /// <param name="limitPwp05Volume">limitPwp05Volume.</param>
        /// <param name="limitPwp05PerfBps">limitPwp05PerfBps.</param>
        /// <param name="limitPwp01Price">limitPwp01Price.</param>
        /// <param name="limitPwp01Volume">limitPwp01Volume.</param>
        /// <param name="limitPwp01PerfBps">limitPwp01PerfBps.</param>
        /// <param name="limitPwp02Price">limitPwp02Price.</param>
        /// <param name="limitPwp02Volume">limitPwp02Volume.</param>
        /// <param name="limitPwp02PerfBps">limitPwp02PerfBps.</param>
        /// <param name="limitPwp03Price">limitPwp03Price.</param>
        /// <param name="limitPwp03Volume">limitPwp03Volume.</param>
        /// <param name="limitPwp03PerfBps">limitPwp03PerfBps.</param>
        /// <param name="limitPwp50Price">limitPwp50Price.</param>
        /// <param name="limitPwp50Volume">limitPwp50Volume.</param>
        /// <param name="limitPwp50PerfBps">limitPwp50PerfBps.</param>
        /// <param name="limitPwp100Price">limitPwp100Price.</param>
        /// <param name="limitPwp100Volume">limitPwp100Volume.</param>
        /// <param name="limitPwp100PerfBps">limitPwp100PerfBps.</param>
        /// <param name="fxRate">Order FX Rate.</param>
        /// <param name="twas">Order twas.</param>
        /// <param name="twasAskSize">Order twasAskSize.</param>
        /// <param name="twasBidSize">Order twasBidSize.</param>
        /// <param name="timeZoneName">The timezone abbreviation as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.</param>
        /// <param name="timeZone">The timezone identifier as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region.</param>
        /// <param name="country">The two character ISO country code.</param>
        /// <param name="dateId">Order Date.</param>
        /// <param name="parentCreationTimeUtc">Order Parent Creation Time.</param>
        /// <param name="orderEntryTimeUtc">Order Entry Time UTC.</param>
        /// <param name="firstFillTime">Order First Fill Time.</param>
        /// <param name="firstFillTimeUtc">Order First Fill Time UTC.</param>
        /// <param name="lastFillTime">Order Last Fill Time.</param>
        /// <param name="lastFillTimeUtc">Order Last Fill Time UTC.</param>
        /// <param name="fillTimeUtc">Order Fill Time UTC.</param>
        /// <param name="strategy">Order Strategy.</param>
        /// <param name="venue">Order Venue.</param>
        /// <param name="broker">Order Broker.</param>
        /// <param name="algo">Order Algo.</param>
        /// <param name="trader">Order Trader.</param>
        /// <param name="note">Order Note.</param>
        /// <param name="status">Order Status.</param>
        /// <param name="errorCodes">Order Error Codes.</param>
        /// <param name="processedTime">Order Processed Time.</param>
        /// <param name="clientId">Order Client Id.</param>
        /// <param name="destination">Order Destination.</param>
        /// <param name="destinationType">Order Destination Type.</param>
        /// <param name="orderType">Order Type.</param>
        /// <param name="messageType">Order type.</param>
        /// <param name="relatedOrderId">Related Order Ids.</param>
        /// <param name="children">Child Orders.</param>
        /// <param name="multiDayBenchmarks">multiDayBenchmarks.</param>
        public Order(long id = default(long), string basketId = default(string), string parentId = default(string), string grandParentId = default(string), string orderId = default(string), string masterOrderId = default(string), string compositeId = default(string), string symbol = default(string), string isin = default(string), string securityId = default(string), string companyName = default(string), string side = default(string), bool synthetic = default(bool), double orderVolume = default(double), double volume = default(double), double price = default(double), double limitPrice = default(double), string currency = default(string), double openPrice = default(double), double closePrice = default(double), double refValue = default(double), double vwapFfClose = default(double), double vwapOpenClose = default(double), double firstFillMid = default(double), double firstFillMidPerfBps = default(double), double openPerfBps = default(double), double lastFillMid = default(double), double lastFillMidPerfBps = default(double), double reversion5MinMidPrice = default(double), double reversion5MinMidBps = default(double), double reversion10MinMidPrice = default(double), double reversion10MinMidBps = default(double), double reversion15MinMidPrice = default(double), double reversion15MinMidBps = default(double), double reversion60MinMidPrice = default(double), double reversion60MinMidBps = default(double), double intraOrderVolatility = default(double), double vwapFfLf = default(double), double vwapFfLfPerfBps = default(double), double closePerfBps = default(double), double durationBinMin = default(double), double durationBinSec = default(double), double participationRatePct = default(double), double spreadCross = default(double), double duration = default(double), double pwp20Price = default(double), double pwp20Volume = default(double), double pwp20PerfBps = default(double), double pwp10Price = default(double), double pwp10Volume = default(double), double pwp10PerfBps = default(double), double pwp05Price = default(double), double pwp05Volume = default(double), double pwp05PerfBps = default(double), double pwp01Price = default(double), double pwp01Volume = default(double), double pwp01PerfBps = default(double), double pwp02Price = default(double), double pwp02Volume = default(double), double pwp02PerfBps = default(double), double pwp03Price = default(double), double pwp03Volume = default(double), double pwp03PerfBps = default(double), double pwp50Price = default(double), double pwp50Volume = default(double), double pwp50PerfBps = default(double), double pwp100Price = default(double), double pwp100Volume = default(double), double pwp100PerfBps = default(double), double marketAdjustment = default(double), double intraOrderVolatilityBps = default(double), string refCurrency = default(string), double vwapFfLfVolume = default(double), double limitVwapFfLfVolume = default(double), double limitVwapFfLf = default(double), double limitVwapFfLfPerfBps = default(double), double limitParticipationRatePct = default(double), double marketSpreadCross = default(double), double limitPwp20Price = default(double), double limitPwp20Volume = default(double), double limitPwp20PerfBps = default(double), double limitPwp10Price = default(double), double limitPwp10Volume = default(double), double limitPwp10PerfBps = default(double), double limitPwp05Price = default(double), double limitPwp05Volume = default(double), double limitPwp05PerfBps = default(double), double limitPwp01Price = default(double), double limitPwp01Volume = default(double), double limitPwp01PerfBps = default(double), double limitPwp02Price = default(double), double limitPwp02Volume = default(double), double limitPwp02PerfBps = default(double), double limitPwp03Price = default(double), double limitPwp03Volume = default(double), double limitPwp03PerfBps = default(double), double limitPwp50Price = default(double), double limitPwp50Volume = default(double), double limitPwp50PerfBps = default(double), double limitPwp100Price = default(double), double limitPwp100Volume = default(double), double limitPwp100PerfBps = default(double), double fxRate = default(double), double twas = default(double), double twasAskSize = default(double), double twasBidSize = default(double), string timeZoneName = default(string), string timeZone = default(string), string region = default(string), string country = default(string), string dateId = default(string), string parentCreationTimeUtc = default(string), string orderEntryTimeUtc = default(string), string firstFillTime = default(string), string firstFillTimeUtc = default(string), string lastFillTime = default(string), string lastFillTimeUtc = default(string), string fillTimeUtc = default(string), string strategy = default(string), string venue = default(string), string broker = default(string), string algo = default(string), string trader = default(string), string note = default(string), string status = default(string), string errorCodes = default(string), string processedTime = default(string), string clientId = default(string), string destination = default(string), string destinationType = default(string), string orderType = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), List<string> relatedOrderId = default(List<string>), List<Order> children = default(List<Order>), MultiDayBenchmarks multiDayBenchmarks = default(MultiDayBenchmarks))
        {
            this.Id = id;
            this.BasketId = basketId;
            this.ParentId = parentId;
            this.GrandParentId = grandParentId;
            this.OrderId = orderId;
            this.MasterOrderId = masterOrderId;
            this.CompositeId = compositeId;
            this.Symbol = symbol;
            this.Isin = isin;
            this.SecurityId = securityId;
            this.CompanyName = companyName;
            this.Side = side;
            this.Synthetic = synthetic;
            this.OrderVolume = orderVolume;
            this.Volume = volume;
            this.Price = price;
            this.LimitPrice = limitPrice;
            this.Currency = currency;
            this.OpenPrice = openPrice;
            this.ClosePrice = closePrice;
            this.RefValue = refValue;
            this.VwapFfClose = vwapFfClose;
            this.VwapOpenClose = vwapOpenClose;
            this.FirstFillMid = firstFillMid;
            this.FirstFillMidPerfBps = firstFillMidPerfBps;
            this.OpenPerfBps = openPerfBps;
            this.LastFillMid = lastFillMid;
            this.LastFillMidPerfBps = lastFillMidPerfBps;
            this.Reversion5MinMidPrice = reversion5MinMidPrice;
            this.Reversion5MinMidBps = reversion5MinMidBps;
            this.Reversion10MinMidPrice = reversion10MinMidPrice;
            this.Reversion10MinMidBps = reversion10MinMidBps;
            this.Reversion15MinMidPrice = reversion15MinMidPrice;
            this.Reversion15MinMidBps = reversion15MinMidBps;
            this.Reversion60MinMidPrice = reversion60MinMidPrice;
            this.Reversion60MinMidBps = reversion60MinMidBps;
            this.IntraOrderVolatility = intraOrderVolatility;
            this.VwapFfLf = vwapFfLf;
            this.VwapFfLfPerfBps = vwapFfLfPerfBps;
            this.ClosePerfBps = closePerfBps;
            this.DurationBinMin = durationBinMin;
            this.DurationBinSec = durationBinSec;
            this.ParticipationRatePct = participationRatePct;
            this.SpreadCross = spreadCross;
            this.Duration = duration;
            this.Pwp20Price = pwp20Price;
            this.Pwp20Volume = pwp20Volume;
            this.Pwp20PerfBps = pwp20PerfBps;
            this.Pwp10Price = pwp10Price;
            this.Pwp10Volume = pwp10Volume;
            this.Pwp10PerfBps = pwp10PerfBps;
            this.Pwp05Price = pwp05Price;
            this.Pwp05Volume = pwp05Volume;
            this.Pwp05PerfBps = pwp05PerfBps;
            this.Pwp01Price = pwp01Price;
            this.Pwp01Volume = pwp01Volume;
            this.Pwp01PerfBps = pwp01PerfBps;
            this.Pwp02Price = pwp02Price;
            this.Pwp02Volume = pwp02Volume;
            this.Pwp02PerfBps = pwp02PerfBps;
            this.Pwp03Price = pwp03Price;
            this.Pwp03Volume = pwp03Volume;
            this.Pwp03PerfBps = pwp03PerfBps;
            this.Pwp50Price = pwp50Price;
            this.Pwp50Volume = pwp50Volume;
            this.Pwp50PerfBps = pwp50PerfBps;
            this.Pwp100Price = pwp100Price;
            this.Pwp100Volume = pwp100Volume;
            this.Pwp100PerfBps = pwp100PerfBps;
            this.MarketAdjustment = marketAdjustment;
            this.IntraOrderVolatilityBps = intraOrderVolatilityBps;
            this.RefCurrency = refCurrency;
            this.VwapFfLfVolume = vwapFfLfVolume;
            this.LimitVwapFfLfVolume = limitVwapFfLfVolume;
            this.LimitVwapFfLf = limitVwapFfLf;
            this.LimitVwapFfLfPerfBps = limitVwapFfLfPerfBps;
            this.LimitParticipationRatePct = limitParticipationRatePct;
            this.MarketSpreadCross = marketSpreadCross;
            this.LimitPwp20Price = limitPwp20Price;
            this.LimitPwp20Volume = limitPwp20Volume;
            this.LimitPwp20PerfBps = limitPwp20PerfBps;
            this.LimitPwp10Price = limitPwp10Price;
            this.LimitPwp10Volume = limitPwp10Volume;
            this.LimitPwp10PerfBps = limitPwp10PerfBps;
            this.LimitPwp05Price = limitPwp05Price;
            this.LimitPwp05Volume = limitPwp05Volume;
            this.LimitPwp05PerfBps = limitPwp05PerfBps;
            this.LimitPwp01Price = limitPwp01Price;
            this.LimitPwp01Volume = limitPwp01Volume;
            this.LimitPwp01PerfBps = limitPwp01PerfBps;
            this.LimitPwp02Price = limitPwp02Price;
            this.LimitPwp02Volume = limitPwp02Volume;
            this.LimitPwp02PerfBps = limitPwp02PerfBps;
            this.LimitPwp03Price = limitPwp03Price;
            this.LimitPwp03Volume = limitPwp03Volume;
            this.LimitPwp03PerfBps = limitPwp03PerfBps;
            this.LimitPwp50Price = limitPwp50Price;
            this.LimitPwp50Volume = limitPwp50Volume;
            this.LimitPwp50PerfBps = limitPwp50PerfBps;
            this.LimitPwp100Price = limitPwp100Price;
            this.LimitPwp100Volume = limitPwp100Volume;
            this.LimitPwp100PerfBps = limitPwp100PerfBps;
            this.FxRate = fxRate;
            this.Twas = twas;
            this.TwasAskSize = twasAskSize;
            this.TwasBidSize = twasBidSize;
            this.TimeZoneName = timeZoneName;
            this.TimeZone = timeZone;
            this.Region = region;
            this.Country = country;
            this.DateId = dateId;
            this.ParentCreationTimeUtc = parentCreationTimeUtc;
            this.OrderEntryTimeUtc = orderEntryTimeUtc;
            this.FirstFillTime = firstFillTime;
            this.FirstFillTimeUtc = firstFillTimeUtc;
            this.LastFillTime = lastFillTime;
            this.LastFillTimeUtc = lastFillTimeUtc;
            this.FillTimeUtc = fillTimeUtc;
            this.Strategy = strategy;
            this.Venue = venue;
            this.Broker = broker;
            this.Algo = algo;
            this.Trader = trader;
            this.Note = note;
            this.Status = status;
            this.ErrorCodes = errorCodes;
            this.ProcessedTime = processedTime;
            this.ClientId = clientId;
            this.Destination = destination;
            this.DestinationType = destinationType;
            this.OrderType = orderType;
            this.MessageType = messageType;
            this.RelatedOrderId = relatedOrderId;
            this.Children = children;
            this.MultiDayBenchmarks = multiDayBenchmarks;
        }

        /// <summary>
        /// Unique identifier for the Order
        /// </summary>
        /// <value>Unique identifier for the Order</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Order Basket Id
        /// </summary>
        /// <value>Order Basket Id</value>
        [DataMember(Name = "basketId", EmitDefaultValue = false)]
        public string BasketId { get; set; }

        /// <summary>
        /// Order Parent Id
        /// </summary>
        /// <value>Order Parent Id</value>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Order Grand Parent Id
        /// </summary>
        /// <value>Order Grand Parent Id</value>
        [DataMember(Name = "grandParentId", EmitDefaultValue = false)]
        public string GrandParentId { get; set; }

        /// <summary>
        /// Order Id
        /// </summary>
        /// <value>Order Id</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Master Order Id
        /// </summary>
        /// <value>Master Order Id</value>
        [DataMember(Name = "masterOrderId", EmitDefaultValue = false)]
        public string MasterOrderId { get; set; }

        /// <summary>
        /// Composite Id
        /// </summary>
        /// <value>Composite Id</value>
        [DataMember(Name = "compositeId", EmitDefaultValue = false)]
        public string CompositeId { get; set; }

        /// <summary>
        /// Order Symbol
        /// </summary>
        /// <value>Order Symbol</value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Order ISIN
        /// </summary>
        /// <value>Order ISIN</value>
        [DataMember(Name = "isin", EmitDefaultValue = false)]
        public string Isin { get; set; }

        /// <summary>
        /// Order Security Id
        /// </summary>
        /// <value>Order Security Id</value>
        [DataMember(Name = "securityId", EmitDefaultValue = false)]
        public string SecurityId { get; set; }

        /// <summary>
        /// Company Name
        /// </summary>
        /// <value>Company Name</value>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Side of the order
        /// </summary>
        /// <value>Side of the order</value>
        [DataMember(Name = "side", EmitDefaultValue = false)]
        public string Side { get; set; }

        /// <summary>
        /// Order Synthetic flag
        /// </summary>
        /// <value>Order Synthetic flag</value>
        [DataMember(Name = "synthetic", EmitDefaultValue = true)]
        public bool Synthetic { get; set; }

        /// <summary>
        /// Order Volume
        /// </summary>
        /// <value>Order Volume</value>
        [DataMember(Name = "orderVolume", EmitDefaultValue = false)]
        public double OrderVolume { get; set; }

        /// <summary>
        /// Volume
        /// </summary>
        /// <value>Volume</value>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public double Volume { get; set; }

        /// <summary>
        /// Order Price
        /// </summary>
        /// <value>Order Price</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Order Limit Price
        /// </summary>
        /// <value>Order Limit Price</value>
        [DataMember(Name = "limitPrice", EmitDefaultValue = false)]
        public double LimitPrice { get; set; }

        /// <summary>
        /// Order Currency
        /// </summary>
        /// <value>Order Currency</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Order Open Price
        /// </summary>
        /// <value>Order Open Price</value>
        [DataMember(Name = "openPrice", EmitDefaultValue = false)]
        public double OpenPrice { get; set; }

        /// <summary>
        /// Order Close Price
        /// </summary>
        /// <value>Order Close Price</value>
        [DataMember(Name = "closePrice", EmitDefaultValue = false)]
        public double ClosePrice { get; set; }

        /// <summary>
        /// Order Ref Value
        /// </summary>
        /// <value>Order Ref Value</value>
        [DataMember(Name = "refValue", EmitDefaultValue = false)]
        public double RefValue { get; set; }

        /// <summary>
        /// Order VWAP FfClose
        /// </summary>
        /// <value>Order VWAP FfClose</value>
        [DataMember(Name = "vwapFfClose", EmitDefaultValue = false)]
        public double VwapFfClose { get; set; }

        /// <summary>
        /// Order VWAP OpenClose
        /// </summary>
        /// <value>Order VWAP OpenClose</value>
        [DataMember(Name = "vwapOpenClose", EmitDefaultValue = false)]
        public double VwapOpenClose { get; set; }

        /// <summary>
        /// Order firstFillMid
        /// </summary>
        /// <value>Order firstFillMid</value>
        [DataMember(Name = "firstFillMid", EmitDefaultValue = false)]
        public double FirstFillMid { get; set; }

        /// <summary>
        /// Order firstFillMidPerfBps
        /// </summary>
        /// <value>Order firstFillMidPerfBps</value>
        [DataMember(Name = "firstFillMidPerfBps", EmitDefaultValue = false)]
        public double FirstFillMidPerfBps { get; set; }

        /// <summary>
        /// Order openPerfBps
        /// </summary>
        /// <value>Order openPerfBps</value>
        [DataMember(Name = "openPerfBps", EmitDefaultValue = false)]
        public double OpenPerfBps { get; set; }

        /// <summary>
        /// Order lastFillMid
        /// </summary>
        /// <value>Order lastFillMid</value>
        [DataMember(Name = "lastFillMid", EmitDefaultValue = false)]
        public double LastFillMid { get; set; }

        /// <summary>
        /// Order lastFillMidPerfBps
        /// </summary>
        /// <value>Order lastFillMidPerfBps</value>
        [DataMember(Name = "lastFillMidPerfBps", EmitDefaultValue = false)]
        public double LastFillMidPerfBps { get; set; }

        /// <summary>
        /// Order reversion5MinMidPrice
        /// </summary>
        /// <value>Order reversion5MinMidPrice</value>
        [DataMember(Name = "reversion5MinMidPrice", EmitDefaultValue = false)]
        public double Reversion5MinMidPrice { get; set; }

        /// <summary>
        /// Order reversion5MinMidBps
        /// </summary>
        /// <value>Order reversion5MinMidBps</value>
        [DataMember(Name = "reversion5MinMidBps", EmitDefaultValue = false)]
        public double Reversion5MinMidBps { get; set; }

        /// <summary>
        /// Order reversion10MinMidPrice
        /// </summary>
        /// <value>Order reversion10MinMidPrice</value>
        [DataMember(Name = "reversion10MinMidPrice", EmitDefaultValue = false)]
        public double Reversion10MinMidPrice { get; set; }

        /// <summary>
        /// Order reversion10MinMidBps
        /// </summary>
        /// <value>Order reversion10MinMidBps</value>
        [DataMember(Name = "reversion10MinMidBps", EmitDefaultValue = false)]
        public double Reversion10MinMidBps { get; set; }

        /// <summary>
        /// Order reversion15MinMidPrice
        /// </summary>
        /// <value>Order reversion15MinMidPrice</value>
        [DataMember(Name = "reversion15MinMidPrice", EmitDefaultValue = false)]
        public double Reversion15MinMidPrice { get; set; }

        /// <summary>
        /// Order reversion15MinMidBps
        /// </summary>
        /// <value>Order reversion15MinMidBps</value>
        [DataMember(Name = "reversion15MinMidBps", EmitDefaultValue = false)]
        public double Reversion15MinMidBps { get; set; }

        /// <summary>
        /// Order reversion60MinMidPrice
        /// </summary>
        /// <value>Order reversion60MinMidPrice</value>
        [DataMember(Name = "reversion60MinMidPrice", EmitDefaultValue = false)]
        public double Reversion60MinMidPrice { get; set; }

        /// <summary>
        /// Order reversion60MinMidBps
        /// </summary>
        /// <value>Order reversion60MinMidBps</value>
        [DataMember(Name = "reversion60MinMidBps", EmitDefaultValue = false)]
        public double Reversion60MinMidBps { get; set; }

        /// <summary>
        /// Order intraOrderVolatility
        /// </summary>
        /// <value>Order intraOrderVolatility</value>
        [DataMember(Name = "intraOrderVolatility", EmitDefaultValue = false)]
        public double IntraOrderVolatility { get; set; }

        /// <summary>
        /// Order vwapFfLf
        /// </summary>
        /// <value>Order vwapFfLf</value>
        [DataMember(Name = "vwapFfLf", EmitDefaultValue = false)]
        public double VwapFfLf { get; set; }

        /// <summary>
        /// Order vwapFfLfPerfBps
        /// </summary>
        /// <value>Order vwapFfLfPerfBps</value>
        [DataMember(Name = "vwapFfLfPerfBps", EmitDefaultValue = false)]
        public double VwapFfLfPerfBps { get; set; }

        /// <summary>
        /// Order closePerfBps
        /// </summary>
        /// <value>Order closePerfBps</value>
        [DataMember(Name = "closePerfBps", EmitDefaultValue = false)]
        public double ClosePerfBps { get; set; }

        /// <summary>
        /// Order Duration Bin Min
        /// </summary>
        /// <value>Order Duration Bin Min</value>
        [DataMember(Name = "durationBinMin", EmitDefaultValue = false)]
        public double DurationBinMin { get; set; }

        /// <summary>
        /// Order Duration Bin Sec
        /// </summary>
        /// <value>Order Duration Bin Sec</value>
        [DataMember(Name = "durationBinSec", EmitDefaultValue = false)]
        public double DurationBinSec { get; set; }

        /// <summary>
        /// Order Participation Rate Percentage
        /// </summary>
        /// <value>Order Participation Rate Percentage</value>
        [DataMember(Name = "participationRatePct", EmitDefaultValue = false)]
        public double ParticipationRatePct { get; set; }

        /// <summary>
        /// Order spreadCross
        /// </summary>
        /// <value>Order spreadCross</value>
        [DataMember(Name = "spreadCross", EmitDefaultValue = false)]
        public double SpreadCross { get; set; }

        /// <summary>
        /// Order duration
        /// </summary>
        /// <value>Order duration</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public double Duration { get; set; }

        /// <summary>
        /// Order pwp20Price
        /// </summary>
        /// <value>Order pwp20Price</value>
        [DataMember(Name = "pwp20Price", EmitDefaultValue = false)]
        public double Pwp20Price { get; set; }

        /// <summary>
        /// Order pwp20Volume
        /// </summary>
        /// <value>Order pwp20Volume</value>
        [DataMember(Name = "pwp20Volume", EmitDefaultValue = false)]
        public double Pwp20Volume { get; set; }

        /// <summary>
        /// Order pwp20PerfBps
        /// </summary>
        /// <value>Order pwp20PerfBps</value>
        [DataMember(Name = "pwp20PerfBps", EmitDefaultValue = false)]
        public double Pwp20PerfBps { get; set; }

        /// <summary>
        /// Order pwp10Price
        /// </summary>
        /// <value>Order pwp10Price</value>
        [DataMember(Name = "pwp10Price", EmitDefaultValue = false)]
        public double Pwp10Price { get; set; }

        /// <summary>
        /// Order pwp10Volume
        /// </summary>
        /// <value>Order pwp10Volume</value>
        [DataMember(Name = "pwp10Volume", EmitDefaultValue = false)]
        public double Pwp10Volume { get; set; }

        /// <summary>
        /// Order pwp10PerfBps
        /// </summary>
        /// <value>Order pwp10PerfBps</value>
        [DataMember(Name = "pwp10PerfBps", EmitDefaultValue = false)]
        public double Pwp10PerfBps { get; set; }

        /// <summary>
        /// Order pwp05Price
        /// </summary>
        /// <value>Order pwp05Price</value>
        [DataMember(Name = "pwp05Price", EmitDefaultValue = false)]
        public double Pwp05Price { get; set; }

        /// <summary>
        /// Order pwp05Volume
        /// </summary>
        /// <value>Order pwp05Volume</value>
        [DataMember(Name = "pwp05Volume", EmitDefaultValue = false)]
        public double Pwp05Volume { get; set; }

        /// <summary>
        /// Order pwp05PerfBps
        /// </summary>
        /// <value>Order pwp05PerfBps</value>
        [DataMember(Name = "pwp05PerfBps", EmitDefaultValue = false)]
        public double Pwp05PerfBps { get; set; }

        /// <summary>
        /// Order pwp01Price
        /// </summary>
        /// <value>Order pwp01Price</value>
        [DataMember(Name = "pwp01Price", EmitDefaultValue = false)]
        public double Pwp01Price { get; set; }

        /// <summary>
        /// Order pwp01Volume
        /// </summary>
        /// <value>Order pwp01Volume</value>
        [DataMember(Name = "pwp01Volume", EmitDefaultValue = false)]
        public double Pwp01Volume { get; set; }

        /// <summary>
        /// Order pwp01PerfBps
        /// </summary>
        /// <value>Order pwp01PerfBps</value>
        [DataMember(Name = "pwp01PerfBps", EmitDefaultValue = false)]
        public double Pwp01PerfBps { get; set; }

        /// <summary>
        /// Order pwp02Price
        /// </summary>
        /// <value>Order pwp02Price</value>
        [DataMember(Name = "pwp02Price", EmitDefaultValue = false)]
        public double Pwp02Price { get; set; }

        /// <summary>
        /// Order pwp02Volume
        /// </summary>
        /// <value>Order pwp02Volume</value>
        [DataMember(Name = "pwp02Volume", EmitDefaultValue = false)]
        public double Pwp02Volume { get; set; }

        /// <summary>
        /// Order pwp02PerfBps
        /// </summary>
        /// <value>Order pwp02PerfBps</value>
        [DataMember(Name = "pwp02PerfBps", EmitDefaultValue = false)]
        public double Pwp02PerfBps { get; set; }

        /// <summary>
        /// Order pwp03Price
        /// </summary>
        /// <value>Order pwp03Price</value>
        [DataMember(Name = "pwp03Price", EmitDefaultValue = false)]
        public double Pwp03Price { get; set; }

        /// <summary>
        /// Order pwp03Volume
        /// </summary>
        /// <value>Order pwp03Volume</value>
        [DataMember(Name = "pwp03Volume", EmitDefaultValue = false)]
        public double Pwp03Volume { get; set; }

        /// <summary>
        /// Order pwp03PerfBps
        /// </summary>
        /// <value>Order pwp03PerfBps</value>
        [DataMember(Name = "pwp03PerfBps", EmitDefaultValue = false)]
        public double Pwp03PerfBps { get; set; }

        /// <summary>
        /// Order pwp50Price
        /// </summary>
        /// <value>Order pwp50Price</value>
        [DataMember(Name = "pwp50Price", EmitDefaultValue = false)]
        public double Pwp50Price { get; set; }

        /// <summary>
        /// Order pwp50Volume
        /// </summary>
        /// <value>Order pwp50Volume</value>
        [DataMember(Name = "pwp50Volume", EmitDefaultValue = false)]
        public double Pwp50Volume { get; set; }

        /// <summary>
        /// Order pwp50PerfBps
        /// </summary>
        /// <value>Order pwp50PerfBps</value>
        [DataMember(Name = "pwp50PerfBps", EmitDefaultValue = false)]
        public double Pwp50PerfBps { get; set; }

        /// <summary>
        /// Order pwp100Price
        /// </summary>
        /// <value>Order pwp100Price</value>
        [DataMember(Name = "pwp100Price", EmitDefaultValue = false)]
        public double Pwp100Price { get; set; }

        /// <summary>
        /// Order pwp100Volume
        /// </summary>
        /// <value>Order pwp100Volume</value>
        [DataMember(Name = "pwp100Volume", EmitDefaultValue = false)]
        public double Pwp100Volume { get; set; }

        /// <summary>
        /// Order pwp100PerfBps
        /// </summary>
        /// <value>Order pwp100PerfBps</value>
        [DataMember(Name = "pwp100PerfBps", EmitDefaultValue = false)]
        public double Pwp100PerfBps { get; set; }

        /// <summary>
        /// Market Adjustment
        /// </summary>
        /// <value>Market Adjustment</value>
        [DataMember(Name = "marketAdjustment", EmitDefaultValue = false)]
        public double MarketAdjustment { get; set; }

        /// <summary>
        /// intraOrderVolatilityBps
        /// </summary>
        /// <value>intraOrderVolatilityBps</value>
        [DataMember(Name = "intraOrderVolatilityBps", EmitDefaultValue = false)]
        public double IntraOrderVolatilityBps { get; set; }

        /// <summary>
        /// Order Reference Currency
        /// </summary>
        /// <value>Order Reference Currency</value>
        [DataMember(Name = "refCurrency", EmitDefaultValue = false)]
        public string RefCurrency { get; set; }

        /// <summary>
        /// vwapFfLfVolume
        /// </summary>
        /// <value>vwapFfLfVolume</value>
        [DataMember(Name = "vwapFfLfVolume", EmitDefaultValue = false)]
        public double VwapFfLfVolume { get; set; }

        /// <summary>
        /// limitVwapFfLfVolume
        /// </summary>
        /// <value>limitVwapFfLfVolume</value>
        [DataMember(Name = "limitVwapFfLfVolume", EmitDefaultValue = false)]
        public double LimitVwapFfLfVolume { get; set; }

        /// <summary>
        /// limitVwapFfLf
        /// </summary>
        /// <value>limitVwapFfLf</value>
        [DataMember(Name = "limitVwapFfLf", EmitDefaultValue = false)]
        public double LimitVwapFfLf { get; set; }

        /// <summary>
        /// limitVwapFfLfPerfBps
        /// </summary>
        /// <value>limitVwapFfLfPerfBps</value>
        [DataMember(Name = "limitVwapFfLfPerfBps", EmitDefaultValue = false)]
        public double LimitVwapFfLfPerfBps { get; set; }

        /// <summary>
        /// limitParticipationRatePct
        /// </summary>
        /// <value>limitParticipationRatePct</value>
        [DataMember(Name = "limitParticipationRatePct", EmitDefaultValue = false)]
        public double LimitParticipationRatePct { get; set; }

        /// <summary>
        /// marketSpreadCross
        /// </summary>
        /// <value>marketSpreadCross</value>
        [DataMember(Name = "marketSpreadCross", EmitDefaultValue = false)]
        public double MarketSpreadCross { get; set; }

        /// <summary>
        /// limitPwp20Price
        /// </summary>
        /// <value>limitPwp20Price</value>
        [DataMember(Name = "limitPwp20Price", EmitDefaultValue = false)]
        public double LimitPwp20Price { get; set; }

        /// <summary>
        /// limitPwp20Volume
        /// </summary>
        /// <value>limitPwp20Volume</value>
        [DataMember(Name = "limitPwp20Volume", EmitDefaultValue = false)]
        public double LimitPwp20Volume { get; set; }

        /// <summary>
        /// limitPwp20PerfBps
        /// </summary>
        /// <value>limitPwp20PerfBps</value>
        [DataMember(Name = "limitPwp20PerfBps", EmitDefaultValue = false)]
        public double LimitPwp20PerfBps { get; set; }

        /// <summary>
        /// limitPwp10Price
        /// </summary>
        /// <value>limitPwp10Price</value>
        [DataMember(Name = "limitPwp10Price", EmitDefaultValue = false)]
        public double LimitPwp10Price { get; set; }

        /// <summary>
        /// limitPwp10Volume
        /// </summary>
        /// <value>limitPwp10Volume</value>
        [DataMember(Name = "limitPwp10Volume", EmitDefaultValue = false)]
        public double LimitPwp10Volume { get; set; }

        /// <summary>
        /// limitPwp10PerfBps
        /// </summary>
        /// <value>limitPwp10PerfBps</value>
        [DataMember(Name = "limitPwp10PerfBps", EmitDefaultValue = false)]
        public double LimitPwp10PerfBps { get; set; }

        /// <summary>
        /// limitPwp05Price
        /// </summary>
        /// <value>limitPwp05Price</value>
        [DataMember(Name = "limitPwp05Price", EmitDefaultValue = false)]
        public double LimitPwp05Price { get; set; }

        /// <summary>
        /// limitPwp05Volume
        /// </summary>
        /// <value>limitPwp05Volume</value>
        [DataMember(Name = "limitPwp05Volume", EmitDefaultValue = false)]
        public double LimitPwp05Volume { get; set; }

        /// <summary>
        /// limitPwp05PerfBps
        /// </summary>
        /// <value>limitPwp05PerfBps</value>
        [DataMember(Name = "limitPwp05PerfBps", EmitDefaultValue = false)]
        public double LimitPwp05PerfBps { get; set; }

        /// <summary>
        /// limitPwp01Price
        /// </summary>
        /// <value>limitPwp01Price</value>
        [DataMember(Name = "limitPwp01Price", EmitDefaultValue = false)]
        public double LimitPwp01Price { get; set; }

        /// <summary>
        /// limitPwp01Volume
        /// </summary>
        /// <value>limitPwp01Volume</value>
        [DataMember(Name = "limitPwp01Volume", EmitDefaultValue = false)]
        public double LimitPwp01Volume { get; set; }

        /// <summary>
        /// limitPwp01PerfBps
        /// </summary>
        /// <value>limitPwp01PerfBps</value>
        [DataMember(Name = "limitPwp01PerfBps", EmitDefaultValue = false)]
        public double LimitPwp01PerfBps { get; set; }

        /// <summary>
        /// limitPwp02Price
        /// </summary>
        /// <value>limitPwp02Price</value>
        [DataMember(Name = "limitPwp02Price", EmitDefaultValue = false)]
        public double LimitPwp02Price { get; set; }

        /// <summary>
        /// limitPwp02Volume
        /// </summary>
        /// <value>limitPwp02Volume</value>
        [DataMember(Name = "limitPwp02Volume", EmitDefaultValue = false)]
        public double LimitPwp02Volume { get; set; }

        /// <summary>
        /// limitPwp02PerfBps
        /// </summary>
        /// <value>limitPwp02PerfBps</value>
        [DataMember(Name = "limitPwp02PerfBps", EmitDefaultValue = false)]
        public double LimitPwp02PerfBps { get; set; }

        /// <summary>
        /// limitPwp03Price
        /// </summary>
        /// <value>limitPwp03Price</value>
        [DataMember(Name = "limitPwp03Price", EmitDefaultValue = false)]
        public double LimitPwp03Price { get; set; }

        /// <summary>
        /// limitPwp03Volume
        /// </summary>
        /// <value>limitPwp03Volume</value>
        [DataMember(Name = "limitPwp03Volume", EmitDefaultValue = false)]
        public double LimitPwp03Volume { get; set; }

        /// <summary>
        /// limitPwp03PerfBps
        /// </summary>
        /// <value>limitPwp03PerfBps</value>
        [DataMember(Name = "limitPwp03PerfBps", EmitDefaultValue = false)]
        public double LimitPwp03PerfBps { get; set; }

        /// <summary>
        /// limitPwp50Price
        /// </summary>
        /// <value>limitPwp50Price</value>
        [DataMember(Name = "limitPwp50Price", EmitDefaultValue = false)]
        public double LimitPwp50Price { get; set; }

        /// <summary>
        /// limitPwp50Volume
        /// </summary>
        /// <value>limitPwp50Volume</value>
        [DataMember(Name = "limitPwp50Volume", EmitDefaultValue = false)]
        public double LimitPwp50Volume { get; set; }

        /// <summary>
        /// limitPwp50PerfBps
        /// </summary>
        /// <value>limitPwp50PerfBps</value>
        [DataMember(Name = "limitPwp50PerfBps", EmitDefaultValue = false)]
        public double LimitPwp50PerfBps { get; set; }

        /// <summary>
        /// limitPwp100Price
        /// </summary>
        /// <value>limitPwp100Price</value>
        [DataMember(Name = "limitPwp100Price", EmitDefaultValue = false)]
        public double LimitPwp100Price { get; set; }

        /// <summary>
        /// limitPwp100Volume
        /// </summary>
        /// <value>limitPwp100Volume</value>
        [DataMember(Name = "limitPwp100Volume", EmitDefaultValue = false)]
        public double LimitPwp100Volume { get; set; }

        /// <summary>
        /// limitPwp100PerfBps
        /// </summary>
        /// <value>limitPwp100PerfBps</value>
        [DataMember(Name = "limitPwp100PerfBps", EmitDefaultValue = false)]
        public double LimitPwp100PerfBps { get; set; }

        /// <summary>
        /// Order FX Rate
        /// </summary>
        /// <value>Order FX Rate</value>
        [DataMember(Name = "fxRate", EmitDefaultValue = false)]
        public double FxRate { get; set; }

        /// <summary>
        /// Order twas
        /// </summary>
        /// <value>Order twas</value>
        [DataMember(Name = "twas", EmitDefaultValue = false)]
        public double Twas { get; set; }

        /// <summary>
        /// Order twasAskSize
        /// </summary>
        /// <value>Order twasAskSize</value>
        [DataMember(Name = "twasAskSize", EmitDefaultValue = false)]
        public double TwasAskSize { get; set; }

        /// <summary>
        /// Order twasBidSize
        /// </summary>
        /// <value>Order twasBidSize</value>
        [DataMember(Name = "twasBidSize", EmitDefaultValue = false)]
        public double TwasBidSize { get; set; }

        /// <summary>
        /// The timezone abbreviation as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
        /// </summary>
        /// <value>The timezone abbreviation as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</value>
        [DataMember(Name = "timeZoneName", EmitDefaultValue = false)]
        public string TimeZoneName { get; set; }

        /// <summary>
        /// The timezone identifier as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
        /// </summary>
        /// <value>The timezone identifier as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</value>
        [DataMember(Name = "timeZone", EmitDefaultValue = false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// The two character ISO country code of the trading region. EMEA is used for the European trading region
        /// </summary>
        /// <value>The two character ISO country code of the trading region. EMEA is used for the European trading region</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// The two character ISO country code
        /// </summary>
        /// <value>The two character ISO country code</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Order Date
        /// </summary>
        /// <value>Order Date</value>
        [DataMember(Name = "dateId", EmitDefaultValue = false)]
        public string DateId { get; set; }

        /// <summary>
        /// Order Parent Creation Time
        /// </summary>
        /// <value>Order Parent Creation Time</value>
        [DataMember(Name = "parentCreationTimeUtc", EmitDefaultValue = false)]
        public string ParentCreationTimeUtc { get; set; }

        /// <summary>
        /// Order Entry Time UTC
        /// </summary>
        /// <value>Order Entry Time UTC</value>
        [DataMember(Name = "orderEntryTimeUtc", EmitDefaultValue = false)]
        public string OrderEntryTimeUtc { get; set; }

        /// <summary>
        /// Order First Fill Time
        /// </summary>
        /// <value>Order First Fill Time</value>
        [DataMember(Name = "firstFillTime", EmitDefaultValue = false)]
        public string FirstFillTime { get; set; }

        /// <summary>
        /// Order First Fill Time UTC
        /// </summary>
        /// <value>Order First Fill Time UTC</value>
        [DataMember(Name = "firstFillTimeUtc", EmitDefaultValue = false)]
        public string FirstFillTimeUtc { get; set; }

        /// <summary>
        /// Order Last Fill Time
        /// </summary>
        /// <value>Order Last Fill Time</value>
        [DataMember(Name = "lastFillTime", EmitDefaultValue = false)]
        public string LastFillTime { get; set; }

        /// <summary>
        /// Order Last Fill Time UTC
        /// </summary>
        /// <value>Order Last Fill Time UTC</value>
        [DataMember(Name = "lastFillTimeUtc", EmitDefaultValue = false)]
        public string LastFillTimeUtc { get; set; }

        /// <summary>
        /// Order Fill Time UTC
        /// </summary>
        /// <value>Order Fill Time UTC</value>
        [DataMember(Name = "fillTimeUtc", EmitDefaultValue = false)]
        public string FillTimeUtc { get; set; }

        /// <summary>
        /// Order Strategy
        /// </summary>
        /// <value>Order Strategy</value>
        [DataMember(Name = "strategy", EmitDefaultValue = false)]
        public string Strategy { get; set; }

        /// <summary>
        /// Order Venue
        /// </summary>
        /// <value>Order Venue</value>
        [DataMember(Name = "venue", EmitDefaultValue = false)]
        public string Venue { get; set; }

        /// <summary>
        /// Order Broker
        /// </summary>
        /// <value>Order Broker</value>
        [DataMember(Name = "broker", EmitDefaultValue = false)]
        public string Broker { get; set; }

        /// <summary>
        /// Order Algo
        /// </summary>
        /// <value>Order Algo</value>
        [DataMember(Name = "algo", EmitDefaultValue = false)]
        public string Algo { get; set; }

        /// <summary>
        /// Order Trader
        /// </summary>
        /// <value>Order Trader</value>
        [DataMember(Name = "trader", EmitDefaultValue = false)]
        public string Trader { get; set; }

        /// <summary>
        /// Order Note
        /// </summary>
        /// <value>Order Note</value>
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// Order Status
        /// </summary>
        /// <value>Order Status</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Order Error Codes
        /// </summary>
        /// <value>Order Error Codes</value>
        [DataMember(Name = "errorCodes", EmitDefaultValue = false)]
        public string ErrorCodes { get; set; }

        /// <summary>
        /// Order Processed Time
        /// </summary>
        /// <value>Order Processed Time</value>
        [DataMember(Name = "processedTime", EmitDefaultValue = false)]
        public string ProcessedTime { get; set; }

        /// <summary>
        /// Order Client Id
        /// </summary>
        /// <value>Order Client Id</value>
        [DataMember(Name = "clientId", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Order Destination
        /// </summary>
        /// <value>Order Destination</value>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public string Destination { get; set; }

        /// <summary>
        /// Order Destination Type
        /// </summary>
        /// <value>Order Destination Type</value>
        [DataMember(Name = "destinationType", EmitDefaultValue = false)]
        public string DestinationType { get; set; }

        /// <summary>
        /// Order Type
        /// </summary>
        /// <value>Order Type</value>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Related Order Ids
        /// </summary>
        /// <value>Related Order Ids</value>
        [DataMember(Name = "relatedOrderId", EmitDefaultValue = false)]
        public List<string> RelatedOrderId { get; set; }

        /// <summary>
        /// Child Orders
        /// </summary>
        /// <value>Child Orders</value>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public List<Order> Children { get; set; }

        /// <summary>
        /// Gets or Sets MultiDayBenchmarks
        /// </summary>
        [DataMember(Name = "multiDayBenchmarks", EmitDefaultValue = false)]
        public MultiDayBenchmarks MultiDayBenchmarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BasketId: ").Append(BasketId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  GrandParentId: ").Append(GrandParentId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  MasterOrderId: ").Append(MasterOrderId).Append("\n");
            sb.Append("  CompositeId: ").Append(CompositeId).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Synthetic: ").Append(Synthetic).Append("\n");
            sb.Append("  OrderVolume: ").Append(OrderVolume).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  OpenPrice: ").Append(OpenPrice).Append("\n");
            sb.Append("  ClosePrice: ").Append(ClosePrice).Append("\n");
            sb.Append("  RefValue: ").Append(RefValue).Append("\n");
            sb.Append("  VwapFfClose: ").Append(VwapFfClose).Append("\n");
            sb.Append("  VwapOpenClose: ").Append(VwapOpenClose).Append("\n");
            sb.Append("  FirstFillMid: ").Append(FirstFillMid).Append("\n");
            sb.Append("  FirstFillMidPerfBps: ").Append(FirstFillMidPerfBps).Append("\n");
            sb.Append("  OpenPerfBps: ").Append(OpenPerfBps).Append("\n");
            sb.Append("  LastFillMid: ").Append(LastFillMid).Append("\n");
            sb.Append("  LastFillMidPerfBps: ").Append(LastFillMidPerfBps).Append("\n");
            sb.Append("  Reversion5MinMidPrice: ").Append(Reversion5MinMidPrice).Append("\n");
            sb.Append("  Reversion5MinMidBps: ").Append(Reversion5MinMidBps).Append("\n");
            sb.Append("  Reversion10MinMidPrice: ").Append(Reversion10MinMidPrice).Append("\n");
            sb.Append("  Reversion10MinMidBps: ").Append(Reversion10MinMidBps).Append("\n");
            sb.Append("  Reversion15MinMidPrice: ").Append(Reversion15MinMidPrice).Append("\n");
            sb.Append("  Reversion15MinMidBps: ").Append(Reversion15MinMidBps).Append("\n");
            sb.Append("  Reversion60MinMidPrice: ").Append(Reversion60MinMidPrice).Append("\n");
            sb.Append("  Reversion60MinMidBps: ").Append(Reversion60MinMidBps).Append("\n");
            sb.Append("  IntraOrderVolatility: ").Append(IntraOrderVolatility).Append("\n");
            sb.Append("  VwapFfLf: ").Append(VwapFfLf).Append("\n");
            sb.Append("  VwapFfLfPerfBps: ").Append(VwapFfLfPerfBps).Append("\n");
            sb.Append("  ClosePerfBps: ").Append(ClosePerfBps).Append("\n");
            sb.Append("  DurationBinMin: ").Append(DurationBinMin).Append("\n");
            sb.Append("  DurationBinSec: ").Append(DurationBinSec).Append("\n");
            sb.Append("  ParticipationRatePct: ").Append(ParticipationRatePct).Append("\n");
            sb.Append("  SpreadCross: ").Append(SpreadCross).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Pwp20Price: ").Append(Pwp20Price).Append("\n");
            sb.Append("  Pwp20Volume: ").Append(Pwp20Volume).Append("\n");
            sb.Append("  Pwp20PerfBps: ").Append(Pwp20PerfBps).Append("\n");
            sb.Append("  Pwp10Price: ").Append(Pwp10Price).Append("\n");
            sb.Append("  Pwp10Volume: ").Append(Pwp10Volume).Append("\n");
            sb.Append("  Pwp10PerfBps: ").Append(Pwp10PerfBps).Append("\n");
            sb.Append("  Pwp05Price: ").Append(Pwp05Price).Append("\n");
            sb.Append("  Pwp05Volume: ").Append(Pwp05Volume).Append("\n");
            sb.Append("  Pwp05PerfBps: ").Append(Pwp05PerfBps).Append("\n");
            sb.Append("  Pwp01Price: ").Append(Pwp01Price).Append("\n");
            sb.Append("  Pwp01Volume: ").Append(Pwp01Volume).Append("\n");
            sb.Append("  Pwp01PerfBps: ").Append(Pwp01PerfBps).Append("\n");
            sb.Append("  Pwp02Price: ").Append(Pwp02Price).Append("\n");
            sb.Append("  Pwp02Volume: ").Append(Pwp02Volume).Append("\n");
            sb.Append("  Pwp02PerfBps: ").Append(Pwp02PerfBps).Append("\n");
            sb.Append("  Pwp03Price: ").Append(Pwp03Price).Append("\n");
            sb.Append("  Pwp03Volume: ").Append(Pwp03Volume).Append("\n");
            sb.Append("  Pwp03PerfBps: ").Append(Pwp03PerfBps).Append("\n");
            sb.Append("  Pwp50Price: ").Append(Pwp50Price).Append("\n");
            sb.Append("  Pwp50Volume: ").Append(Pwp50Volume).Append("\n");
            sb.Append("  Pwp50PerfBps: ").Append(Pwp50PerfBps).Append("\n");
            sb.Append("  Pwp100Price: ").Append(Pwp100Price).Append("\n");
            sb.Append("  Pwp100Volume: ").Append(Pwp100Volume).Append("\n");
            sb.Append("  Pwp100PerfBps: ").Append(Pwp100PerfBps).Append("\n");
            sb.Append("  MarketAdjustment: ").Append(MarketAdjustment).Append("\n");
            sb.Append("  IntraOrderVolatilityBps: ").Append(IntraOrderVolatilityBps).Append("\n");
            sb.Append("  RefCurrency: ").Append(RefCurrency).Append("\n");
            sb.Append("  VwapFfLfVolume: ").Append(VwapFfLfVolume).Append("\n");
            sb.Append("  LimitVwapFfLfVolume: ").Append(LimitVwapFfLfVolume).Append("\n");
            sb.Append("  LimitVwapFfLf: ").Append(LimitVwapFfLf).Append("\n");
            sb.Append("  LimitVwapFfLfPerfBps: ").Append(LimitVwapFfLfPerfBps).Append("\n");
            sb.Append("  LimitParticipationRatePct: ").Append(LimitParticipationRatePct).Append("\n");
            sb.Append("  MarketSpreadCross: ").Append(MarketSpreadCross).Append("\n");
            sb.Append("  LimitPwp20Price: ").Append(LimitPwp20Price).Append("\n");
            sb.Append("  LimitPwp20Volume: ").Append(LimitPwp20Volume).Append("\n");
            sb.Append("  LimitPwp20PerfBps: ").Append(LimitPwp20PerfBps).Append("\n");
            sb.Append("  LimitPwp10Price: ").Append(LimitPwp10Price).Append("\n");
            sb.Append("  LimitPwp10Volume: ").Append(LimitPwp10Volume).Append("\n");
            sb.Append("  LimitPwp10PerfBps: ").Append(LimitPwp10PerfBps).Append("\n");
            sb.Append("  LimitPwp05Price: ").Append(LimitPwp05Price).Append("\n");
            sb.Append("  LimitPwp05Volume: ").Append(LimitPwp05Volume).Append("\n");
            sb.Append("  LimitPwp05PerfBps: ").Append(LimitPwp05PerfBps).Append("\n");
            sb.Append("  LimitPwp01Price: ").Append(LimitPwp01Price).Append("\n");
            sb.Append("  LimitPwp01Volume: ").Append(LimitPwp01Volume).Append("\n");
            sb.Append("  LimitPwp01PerfBps: ").Append(LimitPwp01PerfBps).Append("\n");
            sb.Append("  LimitPwp02Price: ").Append(LimitPwp02Price).Append("\n");
            sb.Append("  LimitPwp02Volume: ").Append(LimitPwp02Volume).Append("\n");
            sb.Append("  LimitPwp02PerfBps: ").Append(LimitPwp02PerfBps).Append("\n");
            sb.Append("  LimitPwp03Price: ").Append(LimitPwp03Price).Append("\n");
            sb.Append("  LimitPwp03Volume: ").Append(LimitPwp03Volume).Append("\n");
            sb.Append("  LimitPwp03PerfBps: ").Append(LimitPwp03PerfBps).Append("\n");
            sb.Append("  LimitPwp50Price: ").Append(LimitPwp50Price).Append("\n");
            sb.Append("  LimitPwp50Volume: ").Append(LimitPwp50Volume).Append("\n");
            sb.Append("  LimitPwp50PerfBps: ").Append(LimitPwp50PerfBps).Append("\n");
            sb.Append("  LimitPwp100Price: ").Append(LimitPwp100Price).Append("\n");
            sb.Append("  LimitPwp100Volume: ").Append(LimitPwp100Volume).Append("\n");
            sb.Append("  LimitPwp100PerfBps: ").Append(LimitPwp100PerfBps).Append("\n");
            sb.Append("  FxRate: ").Append(FxRate).Append("\n");
            sb.Append("  Twas: ").Append(Twas).Append("\n");
            sb.Append("  TwasAskSize: ").Append(TwasAskSize).Append("\n");
            sb.Append("  TwasBidSize: ").Append(TwasBidSize).Append("\n");
            sb.Append("  TimeZoneName: ").Append(TimeZoneName).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DateId: ").Append(DateId).Append("\n");
            sb.Append("  ParentCreationTimeUtc: ").Append(ParentCreationTimeUtc).Append("\n");
            sb.Append("  OrderEntryTimeUtc: ").Append(OrderEntryTimeUtc).Append("\n");
            sb.Append("  FirstFillTime: ").Append(FirstFillTime).Append("\n");
            sb.Append("  FirstFillTimeUtc: ").Append(FirstFillTimeUtc).Append("\n");
            sb.Append("  LastFillTime: ").Append(LastFillTime).Append("\n");
            sb.Append("  LastFillTimeUtc: ").Append(LastFillTimeUtc).Append("\n");
            sb.Append("  FillTimeUtc: ").Append(FillTimeUtc).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  Broker: ").Append(Broker).Append("\n");
            sb.Append("  Algo: ").Append(Algo).Append("\n");
            sb.Append("  Trader: ").Append(Trader).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ErrorCodes: ").Append(ErrorCodes).Append("\n");
            sb.Append("  ProcessedTime: ").Append(ProcessedTime).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  RelatedOrderId: ").Append(RelatedOrderId).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  MultiDayBenchmarks: ").Append(MultiDayBenchmarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.BasketId == input.BasketId ||
                    (this.BasketId != null &&
                    this.BasketId.Equals(input.BasketId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.GrandParentId == input.GrandParentId ||
                    (this.GrandParentId != null &&
                    this.GrandParentId.Equals(input.GrandParentId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.MasterOrderId == input.MasterOrderId ||
                    (this.MasterOrderId != null &&
                    this.MasterOrderId.Equals(input.MasterOrderId))
                ) && 
                (
                    this.CompositeId == input.CompositeId ||
                    (this.CompositeId != null &&
                    this.CompositeId.Equals(input.CompositeId))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Synthetic == input.Synthetic ||
                    this.Synthetic.Equals(input.Synthetic)
                ) && 
                (
                    this.OrderVolume == input.OrderVolume ||
                    this.OrderVolume.Equals(input.OrderVolume)
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.LimitPrice == input.LimitPrice ||
                    this.LimitPrice.Equals(input.LimitPrice)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.OpenPrice == input.OpenPrice ||
                    this.OpenPrice.Equals(input.OpenPrice)
                ) && 
                (
                    this.ClosePrice == input.ClosePrice ||
                    this.ClosePrice.Equals(input.ClosePrice)
                ) && 
                (
                    this.RefValue == input.RefValue ||
                    this.RefValue.Equals(input.RefValue)
                ) && 
                (
                    this.VwapFfClose == input.VwapFfClose ||
                    this.VwapFfClose.Equals(input.VwapFfClose)
                ) && 
                (
                    this.VwapOpenClose == input.VwapOpenClose ||
                    this.VwapOpenClose.Equals(input.VwapOpenClose)
                ) && 
                (
                    this.FirstFillMid == input.FirstFillMid ||
                    this.FirstFillMid.Equals(input.FirstFillMid)
                ) && 
                (
                    this.FirstFillMidPerfBps == input.FirstFillMidPerfBps ||
                    this.FirstFillMidPerfBps.Equals(input.FirstFillMidPerfBps)
                ) && 
                (
                    this.OpenPerfBps == input.OpenPerfBps ||
                    this.OpenPerfBps.Equals(input.OpenPerfBps)
                ) && 
                (
                    this.LastFillMid == input.LastFillMid ||
                    this.LastFillMid.Equals(input.LastFillMid)
                ) && 
                (
                    this.LastFillMidPerfBps == input.LastFillMidPerfBps ||
                    this.LastFillMidPerfBps.Equals(input.LastFillMidPerfBps)
                ) && 
                (
                    this.Reversion5MinMidPrice == input.Reversion5MinMidPrice ||
                    this.Reversion5MinMidPrice.Equals(input.Reversion5MinMidPrice)
                ) && 
                (
                    this.Reversion5MinMidBps == input.Reversion5MinMidBps ||
                    this.Reversion5MinMidBps.Equals(input.Reversion5MinMidBps)
                ) && 
                (
                    this.Reversion10MinMidPrice == input.Reversion10MinMidPrice ||
                    this.Reversion10MinMidPrice.Equals(input.Reversion10MinMidPrice)
                ) && 
                (
                    this.Reversion10MinMidBps == input.Reversion10MinMidBps ||
                    this.Reversion10MinMidBps.Equals(input.Reversion10MinMidBps)
                ) && 
                (
                    this.Reversion15MinMidPrice == input.Reversion15MinMidPrice ||
                    this.Reversion15MinMidPrice.Equals(input.Reversion15MinMidPrice)
                ) && 
                (
                    this.Reversion15MinMidBps == input.Reversion15MinMidBps ||
                    this.Reversion15MinMidBps.Equals(input.Reversion15MinMidBps)
                ) && 
                (
                    this.Reversion60MinMidPrice == input.Reversion60MinMidPrice ||
                    this.Reversion60MinMidPrice.Equals(input.Reversion60MinMidPrice)
                ) && 
                (
                    this.Reversion60MinMidBps == input.Reversion60MinMidBps ||
                    this.Reversion60MinMidBps.Equals(input.Reversion60MinMidBps)
                ) && 
                (
                    this.IntraOrderVolatility == input.IntraOrderVolatility ||
                    this.IntraOrderVolatility.Equals(input.IntraOrderVolatility)
                ) && 
                (
                    this.VwapFfLf == input.VwapFfLf ||
                    this.VwapFfLf.Equals(input.VwapFfLf)
                ) && 
                (
                    this.VwapFfLfPerfBps == input.VwapFfLfPerfBps ||
                    this.VwapFfLfPerfBps.Equals(input.VwapFfLfPerfBps)
                ) && 
                (
                    this.ClosePerfBps == input.ClosePerfBps ||
                    this.ClosePerfBps.Equals(input.ClosePerfBps)
                ) && 
                (
                    this.DurationBinMin == input.DurationBinMin ||
                    this.DurationBinMin.Equals(input.DurationBinMin)
                ) && 
                (
                    this.DurationBinSec == input.DurationBinSec ||
                    this.DurationBinSec.Equals(input.DurationBinSec)
                ) && 
                (
                    this.ParticipationRatePct == input.ParticipationRatePct ||
                    this.ParticipationRatePct.Equals(input.ParticipationRatePct)
                ) && 
                (
                    this.SpreadCross == input.SpreadCross ||
                    this.SpreadCross.Equals(input.SpreadCross)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.Pwp20Price == input.Pwp20Price ||
                    this.Pwp20Price.Equals(input.Pwp20Price)
                ) && 
                (
                    this.Pwp20Volume == input.Pwp20Volume ||
                    this.Pwp20Volume.Equals(input.Pwp20Volume)
                ) && 
                (
                    this.Pwp20PerfBps == input.Pwp20PerfBps ||
                    this.Pwp20PerfBps.Equals(input.Pwp20PerfBps)
                ) && 
                (
                    this.Pwp10Price == input.Pwp10Price ||
                    this.Pwp10Price.Equals(input.Pwp10Price)
                ) && 
                (
                    this.Pwp10Volume == input.Pwp10Volume ||
                    this.Pwp10Volume.Equals(input.Pwp10Volume)
                ) && 
                (
                    this.Pwp10PerfBps == input.Pwp10PerfBps ||
                    this.Pwp10PerfBps.Equals(input.Pwp10PerfBps)
                ) && 
                (
                    this.Pwp05Price == input.Pwp05Price ||
                    this.Pwp05Price.Equals(input.Pwp05Price)
                ) && 
                (
                    this.Pwp05Volume == input.Pwp05Volume ||
                    this.Pwp05Volume.Equals(input.Pwp05Volume)
                ) && 
                (
                    this.Pwp05PerfBps == input.Pwp05PerfBps ||
                    this.Pwp05PerfBps.Equals(input.Pwp05PerfBps)
                ) && 
                (
                    this.Pwp01Price == input.Pwp01Price ||
                    this.Pwp01Price.Equals(input.Pwp01Price)
                ) && 
                (
                    this.Pwp01Volume == input.Pwp01Volume ||
                    this.Pwp01Volume.Equals(input.Pwp01Volume)
                ) && 
                (
                    this.Pwp01PerfBps == input.Pwp01PerfBps ||
                    this.Pwp01PerfBps.Equals(input.Pwp01PerfBps)
                ) && 
                (
                    this.Pwp02Price == input.Pwp02Price ||
                    this.Pwp02Price.Equals(input.Pwp02Price)
                ) && 
                (
                    this.Pwp02Volume == input.Pwp02Volume ||
                    this.Pwp02Volume.Equals(input.Pwp02Volume)
                ) && 
                (
                    this.Pwp02PerfBps == input.Pwp02PerfBps ||
                    this.Pwp02PerfBps.Equals(input.Pwp02PerfBps)
                ) && 
                (
                    this.Pwp03Price == input.Pwp03Price ||
                    this.Pwp03Price.Equals(input.Pwp03Price)
                ) && 
                (
                    this.Pwp03Volume == input.Pwp03Volume ||
                    this.Pwp03Volume.Equals(input.Pwp03Volume)
                ) && 
                (
                    this.Pwp03PerfBps == input.Pwp03PerfBps ||
                    this.Pwp03PerfBps.Equals(input.Pwp03PerfBps)
                ) && 
                (
                    this.Pwp50Price == input.Pwp50Price ||
                    this.Pwp50Price.Equals(input.Pwp50Price)
                ) && 
                (
                    this.Pwp50Volume == input.Pwp50Volume ||
                    this.Pwp50Volume.Equals(input.Pwp50Volume)
                ) && 
                (
                    this.Pwp50PerfBps == input.Pwp50PerfBps ||
                    this.Pwp50PerfBps.Equals(input.Pwp50PerfBps)
                ) && 
                (
                    this.Pwp100Price == input.Pwp100Price ||
                    this.Pwp100Price.Equals(input.Pwp100Price)
                ) && 
                (
                    this.Pwp100Volume == input.Pwp100Volume ||
                    this.Pwp100Volume.Equals(input.Pwp100Volume)
                ) && 
                (
                    this.Pwp100PerfBps == input.Pwp100PerfBps ||
                    this.Pwp100PerfBps.Equals(input.Pwp100PerfBps)
                ) && 
                (
                    this.MarketAdjustment == input.MarketAdjustment ||
                    this.MarketAdjustment.Equals(input.MarketAdjustment)
                ) && 
                (
                    this.IntraOrderVolatilityBps == input.IntraOrderVolatilityBps ||
                    this.IntraOrderVolatilityBps.Equals(input.IntraOrderVolatilityBps)
                ) && 
                (
                    this.RefCurrency == input.RefCurrency ||
                    (this.RefCurrency != null &&
                    this.RefCurrency.Equals(input.RefCurrency))
                ) && 
                (
                    this.VwapFfLfVolume == input.VwapFfLfVolume ||
                    this.VwapFfLfVolume.Equals(input.VwapFfLfVolume)
                ) && 
                (
                    this.LimitVwapFfLfVolume == input.LimitVwapFfLfVolume ||
                    this.LimitVwapFfLfVolume.Equals(input.LimitVwapFfLfVolume)
                ) && 
                (
                    this.LimitVwapFfLf == input.LimitVwapFfLf ||
                    this.LimitVwapFfLf.Equals(input.LimitVwapFfLf)
                ) && 
                (
                    this.LimitVwapFfLfPerfBps == input.LimitVwapFfLfPerfBps ||
                    this.LimitVwapFfLfPerfBps.Equals(input.LimitVwapFfLfPerfBps)
                ) && 
                (
                    this.LimitParticipationRatePct == input.LimitParticipationRatePct ||
                    this.LimitParticipationRatePct.Equals(input.LimitParticipationRatePct)
                ) && 
                (
                    this.MarketSpreadCross == input.MarketSpreadCross ||
                    this.MarketSpreadCross.Equals(input.MarketSpreadCross)
                ) && 
                (
                    this.LimitPwp20Price == input.LimitPwp20Price ||
                    this.LimitPwp20Price.Equals(input.LimitPwp20Price)
                ) && 
                (
                    this.LimitPwp20Volume == input.LimitPwp20Volume ||
                    this.LimitPwp20Volume.Equals(input.LimitPwp20Volume)
                ) && 
                (
                    this.LimitPwp20PerfBps == input.LimitPwp20PerfBps ||
                    this.LimitPwp20PerfBps.Equals(input.LimitPwp20PerfBps)
                ) && 
                (
                    this.LimitPwp10Price == input.LimitPwp10Price ||
                    this.LimitPwp10Price.Equals(input.LimitPwp10Price)
                ) && 
                (
                    this.LimitPwp10Volume == input.LimitPwp10Volume ||
                    this.LimitPwp10Volume.Equals(input.LimitPwp10Volume)
                ) && 
                (
                    this.LimitPwp10PerfBps == input.LimitPwp10PerfBps ||
                    this.LimitPwp10PerfBps.Equals(input.LimitPwp10PerfBps)
                ) && 
                (
                    this.LimitPwp05Price == input.LimitPwp05Price ||
                    this.LimitPwp05Price.Equals(input.LimitPwp05Price)
                ) && 
                (
                    this.LimitPwp05Volume == input.LimitPwp05Volume ||
                    this.LimitPwp05Volume.Equals(input.LimitPwp05Volume)
                ) && 
                (
                    this.LimitPwp05PerfBps == input.LimitPwp05PerfBps ||
                    this.LimitPwp05PerfBps.Equals(input.LimitPwp05PerfBps)
                ) && 
                (
                    this.LimitPwp01Price == input.LimitPwp01Price ||
                    this.LimitPwp01Price.Equals(input.LimitPwp01Price)
                ) && 
                (
                    this.LimitPwp01Volume == input.LimitPwp01Volume ||
                    this.LimitPwp01Volume.Equals(input.LimitPwp01Volume)
                ) && 
                (
                    this.LimitPwp01PerfBps == input.LimitPwp01PerfBps ||
                    this.LimitPwp01PerfBps.Equals(input.LimitPwp01PerfBps)
                ) && 
                (
                    this.LimitPwp02Price == input.LimitPwp02Price ||
                    this.LimitPwp02Price.Equals(input.LimitPwp02Price)
                ) && 
                (
                    this.LimitPwp02Volume == input.LimitPwp02Volume ||
                    this.LimitPwp02Volume.Equals(input.LimitPwp02Volume)
                ) && 
                (
                    this.LimitPwp02PerfBps == input.LimitPwp02PerfBps ||
                    this.LimitPwp02PerfBps.Equals(input.LimitPwp02PerfBps)
                ) && 
                (
                    this.LimitPwp03Price == input.LimitPwp03Price ||
                    this.LimitPwp03Price.Equals(input.LimitPwp03Price)
                ) && 
                (
                    this.LimitPwp03Volume == input.LimitPwp03Volume ||
                    this.LimitPwp03Volume.Equals(input.LimitPwp03Volume)
                ) && 
                (
                    this.LimitPwp03PerfBps == input.LimitPwp03PerfBps ||
                    this.LimitPwp03PerfBps.Equals(input.LimitPwp03PerfBps)
                ) && 
                (
                    this.LimitPwp50Price == input.LimitPwp50Price ||
                    this.LimitPwp50Price.Equals(input.LimitPwp50Price)
                ) && 
                (
                    this.LimitPwp50Volume == input.LimitPwp50Volume ||
                    this.LimitPwp50Volume.Equals(input.LimitPwp50Volume)
                ) && 
                (
                    this.LimitPwp50PerfBps == input.LimitPwp50PerfBps ||
                    this.LimitPwp50PerfBps.Equals(input.LimitPwp50PerfBps)
                ) && 
                (
                    this.LimitPwp100Price == input.LimitPwp100Price ||
                    this.LimitPwp100Price.Equals(input.LimitPwp100Price)
                ) && 
                (
                    this.LimitPwp100Volume == input.LimitPwp100Volume ||
                    this.LimitPwp100Volume.Equals(input.LimitPwp100Volume)
                ) && 
                (
                    this.LimitPwp100PerfBps == input.LimitPwp100PerfBps ||
                    this.LimitPwp100PerfBps.Equals(input.LimitPwp100PerfBps)
                ) && 
                (
                    this.FxRate == input.FxRate ||
                    this.FxRate.Equals(input.FxRate)
                ) && 
                (
                    this.Twas == input.Twas ||
                    this.Twas.Equals(input.Twas)
                ) && 
                (
                    this.TwasAskSize == input.TwasAskSize ||
                    this.TwasAskSize.Equals(input.TwasAskSize)
                ) && 
                (
                    this.TwasBidSize == input.TwasBidSize ||
                    this.TwasBidSize.Equals(input.TwasBidSize)
                ) && 
                (
                    this.TimeZoneName == input.TimeZoneName ||
                    (this.TimeZoneName != null &&
                    this.TimeZoneName.Equals(input.TimeZoneName))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.DateId == input.DateId ||
                    (this.DateId != null &&
                    this.DateId.Equals(input.DateId))
                ) && 
                (
                    this.ParentCreationTimeUtc == input.ParentCreationTimeUtc ||
                    (this.ParentCreationTimeUtc != null &&
                    this.ParentCreationTimeUtc.Equals(input.ParentCreationTimeUtc))
                ) && 
                (
                    this.OrderEntryTimeUtc == input.OrderEntryTimeUtc ||
                    (this.OrderEntryTimeUtc != null &&
                    this.OrderEntryTimeUtc.Equals(input.OrderEntryTimeUtc))
                ) && 
                (
                    this.FirstFillTime == input.FirstFillTime ||
                    (this.FirstFillTime != null &&
                    this.FirstFillTime.Equals(input.FirstFillTime))
                ) && 
                (
                    this.FirstFillTimeUtc == input.FirstFillTimeUtc ||
                    (this.FirstFillTimeUtc != null &&
                    this.FirstFillTimeUtc.Equals(input.FirstFillTimeUtc))
                ) && 
                (
                    this.LastFillTime == input.LastFillTime ||
                    (this.LastFillTime != null &&
                    this.LastFillTime.Equals(input.LastFillTime))
                ) && 
                (
                    this.LastFillTimeUtc == input.LastFillTimeUtc ||
                    (this.LastFillTimeUtc != null &&
                    this.LastFillTimeUtc.Equals(input.LastFillTimeUtc))
                ) && 
                (
                    this.FillTimeUtc == input.FillTimeUtc ||
                    (this.FillTimeUtc != null &&
                    this.FillTimeUtc.Equals(input.FillTimeUtc))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.Venue == input.Venue ||
                    (this.Venue != null &&
                    this.Venue.Equals(input.Venue))
                ) && 
                (
                    this.Broker == input.Broker ||
                    (this.Broker != null &&
                    this.Broker.Equals(input.Broker))
                ) && 
                (
                    this.Algo == input.Algo ||
                    (this.Algo != null &&
                    this.Algo.Equals(input.Algo))
                ) && 
                (
                    this.Trader == input.Trader ||
                    (this.Trader != null &&
                    this.Trader.Equals(input.Trader))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ErrorCodes == input.ErrorCodes ||
                    (this.ErrorCodes != null &&
                    this.ErrorCodes.Equals(input.ErrorCodes))
                ) && 
                (
                    this.ProcessedTime == input.ProcessedTime ||
                    (this.ProcessedTime != null &&
                    this.ProcessedTime.Equals(input.ProcessedTime))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.DestinationType == input.DestinationType ||
                    (this.DestinationType != null &&
                    this.DestinationType.Equals(input.DestinationType))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    this.MessageType.Equals(input.MessageType)
                ) && 
                (
                    this.RelatedOrderId == input.RelatedOrderId ||
                    this.RelatedOrderId != null &&
                    input.RelatedOrderId != null &&
                    this.RelatedOrderId.SequenceEqual(input.RelatedOrderId)
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.MultiDayBenchmarks == input.MultiDayBenchmarks ||
                    (this.MultiDayBenchmarks != null &&
                    this.MultiDayBenchmarks.Equals(input.MultiDayBenchmarks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.BasketId != null)
                {
                    hashCode = (hashCode * 59) + this.BasketId.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.GrandParentId != null)
                {
                    hashCode = (hashCode * 59) + this.GrandParentId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.MasterOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.MasterOrderId.GetHashCode();
                }
                if (this.CompositeId != null)
                {
                    hashCode = (hashCode * 59) + this.CompositeId.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.SecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityId.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.Side != null)
                {
                    hashCode = (hashCode * 59) + this.Side.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Synthetic.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderVolume.GetHashCode();
                hashCode = (hashCode * 59) + this.Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPrice.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OpenPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.ClosePrice.GetHashCode();
                hashCode = (hashCode * 59) + this.RefValue.GetHashCode();
                hashCode = (hashCode * 59) + this.VwapFfClose.GetHashCode();
                hashCode = (hashCode * 59) + this.VwapOpenClose.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstFillMid.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstFillMidPerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.OpenPerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.LastFillMid.GetHashCode();
                hashCode = (hashCode * 59) + this.LastFillMidPerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion5MinMidPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion5MinMidBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion10MinMidPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion10MinMidBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion15MinMidPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion15MinMidBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion60MinMidPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion60MinMidBps.GetHashCode();
                hashCode = (hashCode * 59) + this.IntraOrderVolatility.GetHashCode();
                hashCode = (hashCode * 59) + this.VwapFfLf.GetHashCode();
                hashCode = (hashCode * 59) + this.VwapFfLfPerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.ClosePerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.DurationBinMin.GetHashCode();
                hashCode = (hashCode * 59) + this.DurationBinSec.GetHashCode();
                hashCode = (hashCode * 59) + this.ParticipationRatePct.GetHashCode();
                hashCode = (hashCode * 59) + this.SpreadCross.GetHashCode();
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp20Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp20Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp20PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp10Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp10Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp10PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp05Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp05Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp05PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp01Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp01Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp01PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp02Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp02Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp02PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp03Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp03Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp03PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp50Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp50Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp50PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp100Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp100Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp100PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.MarketAdjustment.GetHashCode();
                hashCode = (hashCode * 59) + this.IntraOrderVolatilityBps.GetHashCode();
                if (this.RefCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.RefCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VwapFfLfVolume.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitVwapFfLfVolume.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitVwapFfLf.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitVwapFfLfPerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitParticipationRatePct.GetHashCode();
                hashCode = (hashCode * 59) + this.MarketSpreadCross.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp20Price.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp20Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp20PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp10Price.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp10Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp10PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp05Price.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp05Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp05PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp01Price.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp01Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp01PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp02Price.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp02Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp02PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp03Price.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp03Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp03PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp50Price.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp50Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp50PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp100Price.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp100Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPwp100PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.FxRate.GetHashCode();
                hashCode = (hashCode * 59) + this.Twas.GetHashCode();
                hashCode = (hashCode * 59) + this.TwasAskSize.GetHashCode();
                hashCode = (hashCode * 59) + this.TwasBidSize.GetHashCode();
                if (this.TimeZoneName != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZoneName.GetHashCode();
                }
                if (this.TimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZone.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.DateId != null)
                {
                    hashCode = (hashCode * 59) + this.DateId.GetHashCode();
                }
                if (this.ParentCreationTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ParentCreationTimeUtc.GetHashCode();
                }
                if (this.OrderEntryTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.OrderEntryTimeUtc.GetHashCode();
                }
                if (this.FirstFillTime != null)
                {
                    hashCode = (hashCode * 59) + this.FirstFillTime.GetHashCode();
                }
                if (this.FirstFillTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.FirstFillTimeUtc.GetHashCode();
                }
                if (this.LastFillTime != null)
                {
                    hashCode = (hashCode * 59) + this.LastFillTime.GetHashCode();
                }
                if (this.LastFillTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.LastFillTimeUtc.GetHashCode();
                }
                if (this.FillTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.FillTimeUtc.GetHashCode();
                }
                if (this.Strategy != null)
                {
                    hashCode = (hashCode * 59) + this.Strategy.GetHashCode();
                }
                if (this.Venue != null)
                {
                    hashCode = (hashCode * 59) + this.Venue.GetHashCode();
                }
                if (this.Broker != null)
                {
                    hashCode = (hashCode * 59) + this.Broker.GetHashCode();
                }
                if (this.Algo != null)
                {
                    hashCode = (hashCode * 59) + this.Algo.GetHashCode();
                }
                if (this.Trader != null)
                {
                    hashCode = (hashCode * 59) + this.Trader.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.ErrorCodes != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorCodes.GetHashCode();
                }
                if (this.ProcessedTime != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessedTime.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                if (this.DestinationType != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationType.GetHashCode();
                }
                if (this.OrderType != null)
                {
                    hashCode = (hashCode * 59) + this.OrderType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                if (this.RelatedOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedOrderId.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                if (this.MultiDayBenchmarks != null)
                {
                    hashCode = (hashCode * 59) + this.MultiDayBenchmarks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
