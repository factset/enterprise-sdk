/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client;
using FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IZScoreApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Quote Z-Scores
        /// </summary>
        /// <remarks>
        /// Get quote z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <returns>ZScoreResponseRoot</returns>
        ZScoreResponseRoot GetZScoreQuotes(string startDate, string endDate, string securityId, string region);

        /// <summary>
        /// Get Quote Z-Scores
        /// </summary>
        /// <remarks>
        /// Get quote z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <returns>ApiResponse of ZScoreResponseRoot</returns>
        ApiResponse<ZScoreResponseRoot> GetZScoreQuotesWithHttpInfo(string startDate, string endDate, string securityId, string region);
        /// <summary>
        /// Get Trade Z-Scores
        /// </summary>
        /// <remarks>
        /// Get trade z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <returns>ZScoreResponseRoot</returns>
        ZScoreResponseRoot GetZScoreTrades(string startDate, string endDate, string securityId, string region);

        /// <summary>
        /// Get Trade Z-Scores
        /// </summary>
        /// <remarks>
        /// Get trade z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <returns>ApiResponse of ZScoreResponseRoot</returns>
        ApiResponse<ZScoreResponseRoot> GetZScoreTradesWithHttpInfo(string startDate, string endDate, string securityId, string region);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IZScoreApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Quote Z-Scores
        /// </summary>
        /// <remarks>
        /// Get quote z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ZScoreResponseRoot</returns>
        System.Threading.Tasks.Task<ZScoreResponseRoot> GetZScoreQuotesAsync(string startDate, string endDate, string securityId, string region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Quote Z-Scores
        /// </summary>
        /// <remarks>
        /// Get quote z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ZScoreResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<ZScoreResponseRoot>> GetZScoreQuotesWithHttpInfoAsync(string startDate, string endDate, string securityId, string region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Trade Z-Scores
        /// </summary>
        /// <remarks>
        /// Get trade z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ZScoreResponseRoot</returns>
        System.Threading.Tasks.Task<ZScoreResponseRoot> GetZScoreTradesAsync(string startDate, string endDate, string securityId, string region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Trade Z-Scores
        /// </summary>
        /// <remarks>
        /// Get trade z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ZScoreResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<ZScoreResponseRoot>> GetZScoreTradesWithHttpInfoAsync(string startDate, string endDate, string securityId, string region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IZScoreApi : IZScoreApiSync, IZScoreApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ZScoreApi : IZScoreApi
    {
        private FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetZScoreQuotesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ZScoreResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetZScoreTradesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ZScoreResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ZScoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ZScoreApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZScoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ZScoreApi(string basePath)
        {
            this.Configuration = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZScoreApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ZScoreApi(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZScoreApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ZScoreApi(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ISynchronousClient client, FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IAsynchronousClient asyncClient, FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Quote Z-Scores Get quote z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <returns>ZScoreResponseRoot</returns>
        public ZScoreResponseRoot GetZScoreQuotes(string startDate, string endDate, string securityId, string region)
        {
            var localVarResponse = GetZScoreQuotesWithHttpInfo(startDate, endDate, securityId, region);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Quote Z-Scores Get quote z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <returns>ApiResponse of ZScoreResponseRoot</returns>
        public ApiResponse<ZScoreResponseRoot> GetZScoreQuotesWithHttpInfo(string startDate, string endDate, string securityId, string region)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'startDate' when calling ZScoreApi->GetZScoreQuotes");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'endDate' when calling ZScoreApi->GetZScoreQuotes");
            }

            // verify the required parameter 'securityId' is set
            if (securityId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'securityId' when calling ZScoreApi->GetZScoreQuotes");
            }

            // verify the required parameter 'region' is set
            if (region == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'region' when calling ZScoreApi->GetZScoreQuotes");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "securityId", securityId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "region", region));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetZScoreQuotesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ZScoreResponseRoot>("/la/zscore/quotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetZScoreQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Quote Z-Scores Get quote z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ZScoreResponseRoot</returns>
        public async System.Threading.Tasks.Task<ZScoreResponseRoot>GetZScoreQuotesAsync(string startDate, string endDate, string securityId, string region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetZScoreQuotesWithHttpInfoAsync(startDate, endDate, securityId, region, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Quote Z-Scores Get quote z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ZScoreResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ZScoreResponseRoot>> GetZScoreQuotesWithHttpInfoAsync(string startDate, string endDate, string securityId, string region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'startDate' when calling ZScoreApi->GetZScoreQuotes");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'endDate' when calling ZScoreApi->GetZScoreQuotes");
            }

            // verify the required parameter 'securityId' is set
            if (securityId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'securityId' when calling ZScoreApi->GetZScoreQuotes");
            }

            // verify the required parameter 'region' is set
            if (region == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'region' when calling ZScoreApi->GetZScoreQuotes");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "securityId", securityId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "region", region));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetZScoreQuotesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ZScoreResponseRoot>("/la/zscore/quotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetZScoreQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Trade Z-Scores Get trade z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <returns>ZScoreResponseRoot</returns>
        public ZScoreResponseRoot GetZScoreTrades(string startDate, string endDate, string securityId, string region)
        {
            var localVarResponse = GetZScoreTradesWithHttpInfo(startDate, endDate, securityId, region);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trade Z-Scores Get trade z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <returns>ApiResponse of ZScoreResponseRoot</returns>
        public ApiResponse<ZScoreResponseRoot> GetZScoreTradesWithHttpInfo(string startDate, string endDate, string securityId, string region)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'startDate' when calling ZScoreApi->GetZScoreTrades");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'endDate' when calling ZScoreApi->GetZScoreTrades");
            }

            // verify the required parameter 'securityId' is set
            if (securityId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'securityId' when calling ZScoreApi->GetZScoreTrades");
            }

            // verify the required parameter 'region' is set
            if (region == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'region' when calling ZScoreApi->GetZScoreTrades");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "securityId", securityId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "region", region));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetZScoreTradesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ZScoreResponseRoot>("/la/zscore/trades", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetZScoreTrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Trade Z-Scores Get trade z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ZScoreResponseRoot</returns>
        public async System.Threading.Tasks.Task<ZScoreResponseRoot>GetZScoreTradesAsync(string startDate, string endDate, string securityId, string region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetZScoreTradesWithHttpInfoAsync(startDate, endDate, securityId, region, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trade Z-Scores Get trade z-scores for a specific date range, security and region. Z-Scores compare the value of the liquidity analytics for the  latest day in the specified date range with the mean and standard deviation from the historical period defined by the date range.
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Search start date in the format YYYY-MM-DD</param>
        /// <param name="endDate">Search end date in the format YYYY-MM-DD</param>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ZScoreResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ZScoreResponseRoot>> GetZScoreTradesWithHttpInfoAsync(string startDate, string endDate, string securityId, string region, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'startDate' when calling ZScoreApi->GetZScoreTrades");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'endDate' when calling ZScoreApi->GetZScoreTrades");
            }

            // verify the required parameter 'securityId' is set
            if (securityId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'securityId' when calling ZScoreApi->GetZScoreTrades");
            }

            // verify the required parameter 'region' is set
            if (region == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'region' when calling ZScoreApi->GetZScoreTrades");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "securityId", securityId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "region", region));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetZScoreTradesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ZScoreResponseRoot>("/la/zscore/trades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetZScoreTrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
