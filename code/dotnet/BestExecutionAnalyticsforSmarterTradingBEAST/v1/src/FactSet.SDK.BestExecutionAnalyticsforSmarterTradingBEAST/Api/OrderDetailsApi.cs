/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client;
using FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderDetailsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Order Fill Count
        /// </summary>
        /// <remarks>
        /// Get specified order fill count
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>OrderFillCountResponseRoot</returns>
        OrderFillCountResponseRoot GetOrderFillCount(string orderId, string date);

        /// <summary>
        /// Get Order Fill Count
        /// </summary>
        /// <remarks>
        /// Get specified order fill count
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of OrderFillCountResponseRoot</returns>
        ApiResponse<OrderFillCountResponseRoot> GetOrderFillCountWithHttpInfo(string orderId, string date);
        /// <summary>
        /// Get Index ETF data
        /// </summary>
        /// <remarks>
        /// Get Index ETF data
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>IndexETFResponseRoot</returns>
        IndexETFResponseRoot GetOrderIndexETF(string orderId, string date);

        /// <summary>
        /// Get Index ETF data
        /// </summary>
        /// <remarks>
        /// Get Index ETF data
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of IndexETFResponseRoot</returns>
        ApiResponse<IndexETFResponseRoot> GetOrderIndexETFWithHttpInfo(string orderId, string date);
        /// <summary>
        /// Get Order Information
        /// </summary>
        /// <remarks>
        /// Get specified order information
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>OrderInfoResponseRoot</returns>
        OrderInfoResponseRoot GetOrderInfo(string orderId, string date);

        /// <summary>
        /// Get Order Information
        /// </summary>
        /// <remarks>
        /// Get specified order information
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of OrderInfoResponseRoot</returns>
        ApiResponse<OrderInfoResponseRoot> GetOrderInfoWithHttpInfo(string orderId, string date);
        /// <summary>
        /// Get Intra Order Stats
        /// </summary>
        /// <remarks>
        /// Get Intra Order Stats
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>IntraOrderStatResponseRoot</returns>
        IntraOrderStatResponseRoot GetOrderIntraStats(string orderId, string date);

        /// <summary>
        /// Get Intra Order Stats
        /// </summary>
        /// <remarks>
        /// Get Intra Order Stats
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of IntraOrderStatResponseRoot</returns>
        ApiResponse<IntraOrderStatResponseRoot> GetOrderIntraStatsWithHttpInfo(string orderId, string date);
        /// <summary>
        /// Get Order Investment Timings
        /// </summary>
        /// <remarks>
        /// Get Order Investment Timings
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>InvestmentTimingResponseRoot</returns>
        InvestmentTimingResponseRoot GetOrderInvestmentTiming(string orderId, string date);

        /// <summary>
        /// Get Order Investment Timings
        /// </summary>
        /// <remarks>
        /// Get Order Investment Timings
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of InvestmentTimingResponseRoot</returns>
        ApiResponse<InvestmentTimingResponseRoot> GetOrderInvestmentTimingWithHttpInfo(string orderId, string date);
        /// <summary>
        /// Get Price Time Fills
        /// </summary>
        /// <remarks>
        /// Get Price Time Fills
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>PriceTimeFillResponseRoot</returns>
        PriceTimeFillResponseRoot GetOrderPriceTimeFills(string orderId, string date);

        /// <summary>
        /// Get Price Time Fills
        /// </summary>
        /// <remarks>
        /// Get Price Time Fills
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of PriceTimeFillResponseRoot</returns>
        ApiResponse<PriceTimeFillResponseRoot> GetOrderPriceTimeFillsWithHttpInfo(string orderId, string date);
        /// <summary>
        /// Get Price Time Quotes
        /// </summary>
        /// <remarks>
        /// Get Price Time Quotes
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>PriceTimeQuoteResponseRoot</returns>
        PriceTimeQuoteResponseRoot GetOrderPriceTimeQuotes(string orderId, string date);

        /// <summary>
        /// Get Price Time Quotes
        /// </summary>
        /// <remarks>
        /// Get Price Time Quotes
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of PriceTimeQuoteResponseRoot</returns>
        ApiResponse<PriceTimeQuoteResponseRoot> GetOrderPriceTimeQuotesWithHttpInfo(string orderId, string date);
        /// <summary>
        /// Get Price Time Trades
        /// </summary>
        /// <remarks>
        /// Get Price Time Trades
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>PriceTimeTradeResponseRoot</returns>
        PriceTimeTradeResponseRoot GetOrderPriceTimeTrades(string orderId, string date);

        /// <summary>
        /// Get Price Time Trades
        /// </summary>
        /// <remarks>
        /// Get Price Time Trades
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of PriceTimeTradeResponseRoot</returns>
        ApiResponse<PriceTimeTradeResponseRoot> GetOrderPriceTimeTradesWithHttpInfo(string orderId, string date);
        /// <summary>
        /// Get Order Volume Prices
        /// </summary>
        /// <remarks>
        /// Get Order Volume Prices
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>VolumePriceResponseRoot</returns>
        VolumePriceResponseRoot GetOrderVolumePrice(string orderId, string date);

        /// <summary>
        /// Get Order Volume Prices
        /// </summary>
        /// <remarks>
        /// Get Order Volume Prices
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of VolumePriceResponseRoot</returns>
        ApiResponse<VolumePriceResponseRoot> GetOrderVolumePriceWithHttpInfo(string orderId, string date);
        /// <summary>
        /// Get Order Volume Times
        /// </summary>
        /// <remarks>
        /// Get Order Volume Times
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>VolumeTimeResponseRoot</returns>
        VolumeTimeResponseRoot GetOrderVolumeTime(string orderId, string date);

        /// <summary>
        /// Get Order Volume Times
        /// </summary>
        /// <remarks>
        /// Get Order Volume Times
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of VolumeTimeResponseRoot</returns>
        ApiResponse<VolumeTimeResponseRoot> GetOrderVolumeTimeWithHttpInfo(string orderId, string date);
        /// <summary>
        /// Get Order Volume Venues
        /// </summary>
        /// <remarks>
        /// Get Order Volume Venues
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>VolumeVenueResponseRoot</returns>
        VolumeVenueResponseRoot GetOrderVolumeVenue(string orderId, string date);

        /// <summary>
        /// Get Order Volume Venues
        /// </summary>
        /// <remarks>
        /// Get Order Volume Venues
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of VolumeVenueResponseRoot</returns>
        ApiResponse<VolumeVenueResponseRoot> GetOrderVolumeVenueWithHttpInfo(string orderId, string date);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderDetailsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Order Fill Count
        /// </summary>
        /// <remarks>
        /// Get specified order fill count
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFillCountResponseRoot</returns>
        System.Threading.Tasks.Task<OrderFillCountResponseRoot> GetOrderFillCountAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Fill Count
        /// </summary>
        /// <remarks>
        /// Get specified order fill count
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFillCountResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFillCountResponseRoot>> GetOrderFillCountWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Index ETF data
        /// </summary>
        /// <remarks>
        /// Get Index ETF data
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndexETFResponseRoot</returns>
        System.Threading.Tasks.Task<IndexETFResponseRoot> GetOrderIndexETFAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Index ETF data
        /// </summary>
        /// <remarks>
        /// Get Index ETF data
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndexETFResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndexETFResponseRoot>> GetOrderIndexETFWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Order Information
        /// </summary>
        /// <remarks>
        /// Get specified order information
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderInfoResponseRoot</returns>
        System.Threading.Tasks.Task<OrderInfoResponseRoot> GetOrderInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Information
        /// </summary>
        /// <remarks>
        /// Get specified order information
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderInfoResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderInfoResponseRoot>> GetOrderInfoWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Intra Order Stats
        /// </summary>
        /// <remarks>
        /// Get Intra Order Stats
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntraOrderStatResponseRoot</returns>
        System.Threading.Tasks.Task<IntraOrderStatResponseRoot> GetOrderIntraStatsAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Intra Order Stats
        /// </summary>
        /// <remarks>
        /// Get Intra Order Stats
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntraOrderStatResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntraOrderStatResponseRoot>> GetOrderIntraStatsWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Order Investment Timings
        /// </summary>
        /// <remarks>
        /// Get Order Investment Timings
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvestmentTimingResponseRoot</returns>
        System.Threading.Tasks.Task<InvestmentTimingResponseRoot> GetOrderInvestmentTimingAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Investment Timings
        /// </summary>
        /// <remarks>
        /// Get Order Investment Timings
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvestmentTimingResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvestmentTimingResponseRoot>> GetOrderInvestmentTimingWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Price Time Fills
        /// </summary>
        /// <remarks>
        /// Get Price Time Fills
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceTimeFillResponseRoot</returns>
        System.Threading.Tasks.Task<PriceTimeFillResponseRoot> GetOrderPriceTimeFillsAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Price Time Fills
        /// </summary>
        /// <remarks>
        /// Get Price Time Fills
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceTimeFillResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<PriceTimeFillResponseRoot>> GetOrderPriceTimeFillsWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Price Time Quotes
        /// </summary>
        /// <remarks>
        /// Get Price Time Quotes
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceTimeQuoteResponseRoot</returns>
        System.Threading.Tasks.Task<PriceTimeQuoteResponseRoot> GetOrderPriceTimeQuotesAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Price Time Quotes
        /// </summary>
        /// <remarks>
        /// Get Price Time Quotes
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceTimeQuoteResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<PriceTimeQuoteResponseRoot>> GetOrderPriceTimeQuotesWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Price Time Trades
        /// </summary>
        /// <remarks>
        /// Get Price Time Trades
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceTimeTradeResponseRoot</returns>
        System.Threading.Tasks.Task<PriceTimeTradeResponseRoot> GetOrderPriceTimeTradesAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Price Time Trades
        /// </summary>
        /// <remarks>
        /// Get Price Time Trades
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceTimeTradeResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<PriceTimeTradeResponseRoot>> GetOrderPriceTimeTradesWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Order Volume Prices
        /// </summary>
        /// <remarks>
        /// Get Order Volume Prices
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VolumePriceResponseRoot</returns>
        System.Threading.Tasks.Task<VolumePriceResponseRoot> GetOrderVolumePriceAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Volume Prices
        /// </summary>
        /// <remarks>
        /// Get Order Volume Prices
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VolumePriceResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<VolumePriceResponseRoot>> GetOrderVolumePriceWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Order Volume Times
        /// </summary>
        /// <remarks>
        /// Get Order Volume Times
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VolumeTimeResponseRoot</returns>
        System.Threading.Tasks.Task<VolumeTimeResponseRoot> GetOrderVolumeTimeAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Volume Times
        /// </summary>
        /// <remarks>
        /// Get Order Volume Times
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VolumeTimeResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<VolumeTimeResponseRoot>> GetOrderVolumeTimeWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Order Volume Venues
        /// </summary>
        /// <remarks>
        /// Get Order Volume Venues
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VolumeVenueResponseRoot</returns>
        System.Threading.Tasks.Task<VolumeVenueResponseRoot> GetOrderVolumeVenueAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Volume Venues
        /// </summary>
        /// <remarks>
        /// Get Order Volume Venues
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VolumeVenueResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<VolumeVenueResponseRoot>> GetOrderVolumeVenueWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderDetailsApi : IOrderDetailsApiSync, IOrderDetailsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderDetailsApi : IOrderDetailsApi
    {
        private FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderFillCountResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(OrderFillCountResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderIndexETFResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(IndexETFResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderInfoResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(OrderInfoResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderIntraStatsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(IntraOrderStatResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderInvestmentTimingResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InvestmentTimingResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderPriceTimeFillsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PriceTimeFillResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderPriceTimeQuotesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PriceTimeQuoteResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderPriceTimeTradesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PriceTimeTradeResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderVolumePriceResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(VolumePriceResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderVolumeTimeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(VolumeTimeResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOrderVolumeVenueResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(VolumeVenueResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderDetailsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderDetailsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderDetailsApi(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetailsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrderDetailsApi(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ISynchronousClient client, FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IAsynchronousClient asyncClient, FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Order Fill Count Get specified order fill count
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>OrderFillCountResponseRoot</returns>
        public OrderFillCountResponseRoot GetOrderFillCount(string orderId, string date)
        {
            var localVarResponse = GetOrderFillCountWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Fill Count Get specified order fill count
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of OrderFillCountResponseRoot</returns>
        public ApiResponse<OrderFillCountResponseRoot> GetOrderFillCountWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderFillCount");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderFillCount");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderFillCountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            OrderFillCountResponseRoot>("/tca/order/fill-count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderFillCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Order Fill Count Get specified order fill count
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFillCountResponseRoot</returns>
        public async System.Threading.Tasks.Task<OrderFillCountResponseRoot>GetOrderFillCountAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderFillCountWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Fill Count Get specified order fill count
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFillCountResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<OrderFillCountResponseRoot>> GetOrderFillCountWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderFillCount");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderFillCount");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderFillCountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderFillCountResponseRoot>("/tca/order/fill-count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderFillCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Index ETF data Get Index ETF data
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>IndexETFResponseRoot</returns>
        public IndexETFResponseRoot GetOrderIndexETF(string orderId, string date)
        {
            var localVarResponse = GetOrderIndexETFWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Index ETF data Get Index ETF data
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of IndexETFResponseRoot</returns>
        public ApiResponse<IndexETFResponseRoot> GetOrderIndexETFWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderIndexETF");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderIndexETF");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderIndexETFResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            IndexETFResponseRoot>("/tca/order/index-etf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderIndexETF", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Index ETF data Get Index ETF data
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndexETFResponseRoot</returns>
        public async System.Threading.Tasks.Task<IndexETFResponseRoot>GetOrderIndexETFAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderIndexETFWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Index ETF data Get Index ETF data
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndexETFResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<IndexETFResponseRoot>> GetOrderIndexETFWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderIndexETF");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderIndexETF");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderIndexETFResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IndexETFResponseRoot>("/tca/order/index-etf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderIndexETF", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Information Get specified order information
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>OrderInfoResponseRoot</returns>
        public OrderInfoResponseRoot GetOrderInfo(string orderId, string date)
        {
            var localVarResponse = GetOrderInfoWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Information Get specified order information
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of OrderInfoResponseRoot</returns>
        public ApiResponse<OrderInfoResponseRoot> GetOrderInfoWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderInfo");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderInfo");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderInfoResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            OrderInfoResponseRoot>("/tca/order/order-info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Order Information Get specified order information
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderInfoResponseRoot</returns>
        public async System.Threading.Tasks.Task<OrderInfoResponseRoot>GetOrderInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderInfoWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Information Get specified order information
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderInfoResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<OrderInfoResponseRoot>> GetOrderInfoWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderInfo");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderInfo");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderInfoResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderInfoResponseRoot>("/tca/order/order-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Intra Order Stats Get Intra Order Stats
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>IntraOrderStatResponseRoot</returns>
        public IntraOrderStatResponseRoot GetOrderIntraStats(string orderId, string date)
        {
            var localVarResponse = GetOrderIntraStatsWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Intra Order Stats Get Intra Order Stats
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of IntraOrderStatResponseRoot</returns>
        public ApiResponse<IntraOrderStatResponseRoot> GetOrderIntraStatsWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderIntraStats");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderIntraStats");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderIntraStatsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            IntraOrderStatResponseRoot>("/tca/order/intra-order-stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderIntraStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Intra Order Stats Get Intra Order Stats
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntraOrderStatResponseRoot</returns>
        public async System.Threading.Tasks.Task<IntraOrderStatResponseRoot>GetOrderIntraStatsAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderIntraStatsWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Intra Order Stats Get Intra Order Stats
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntraOrderStatResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<IntraOrderStatResponseRoot>> GetOrderIntraStatsWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderIntraStats");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderIntraStats");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderIntraStatsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IntraOrderStatResponseRoot>("/tca/order/intra-order-stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderIntraStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Investment Timings Get Order Investment Timings
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>InvestmentTimingResponseRoot</returns>
        public InvestmentTimingResponseRoot GetOrderInvestmentTiming(string orderId, string date)
        {
            var localVarResponse = GetOrderInvestmentTimingWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Investment Timings Get Order Investment Timings
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of InvestmentTimingResponseRoot</returns>
        public ApiResponse<InvestmentTimingResponseRoot> GetOrderInvestmentTimingWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderInvestmentTiming");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderInvestmentTiming");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderInvestmentTimingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InvestmentTimingResponseRoot>("/tca/order/investment-timing", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderInvestmentTiming", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Order Investment Timings Get Order Investment Timings
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvestmentTimingResponseRoot</returns>
        public async System.Threading.Tasks.Task<InvestmentTimingResponseRoot>GetOrderInvestmentTimingAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderInvestmentTimingWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Investment Timings Get Order Investment Timings
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvestmentTimingResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InvestmentTimingResponseRoot>> GetOrderInvestmentTimingWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderInvestmentTiming");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderInvestmentTiming");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderInvestmentTimingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InvestmentTimingResponseRoot>("/tca/order/investment-timing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderInvestmentTiming", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Price Time Fills Get Price Time Fills
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>PriceTimeFillResponseRoot</returns>
        public PriceTimeFillResponseRoot GetOrderPriceTimeFills(string orderId, string date)
        {
            var localVarResponse = GetOrderPriceTimeFillsWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Price Time Fills Get Price Time Fills
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of PriceTimeFillResponseRoot</returns>
        public ApiResponse<PriceTimeFillResponseRoot> GetOrderPriceTimeFillsWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderPriceTimeFills");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderPriceTimeFills");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderPriceTimeFillsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            PriceTimeFillResponseRoot>("/tca/order/price-time-fills", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderPriceTimeFills", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Price Time Fills Get Price Time Fills
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceTimeFillResponseRoot</returns>
        public async System.Threading.Tasks.Task<PriceTimeFillResponseRoot>GetOrderPriceTimeFillsAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderPriceTimeFillsWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Price Time Fills Get Price Time Fills
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceTimeFillResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PriceTimeFillResponseRoot>> GetOrderPriceTimeFillsWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderPriceTimeFills");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderPriceTimeFills");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderPriceTimeFillsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PriceTimeFillResponseRoot>("/tca/order/price-time-fills", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderPriceTimeFills", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Price Time Quotes Get Price Time Quotes
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>PriceTimeQuoteResponseRoot</returns>
        public PriceTimeQuoteResponseRoot GetOrderPriceTimeQuotes(string orderId, string date)
        {
            var localVarResponse = GetOrderPriceTimeQuotesWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Price Time Quotes Get Price Time Quotes
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of PriceTimeQuoteResponseRoot</returns>
        public ApiResponse<PriceTimeQuoteResponseRoot> GetOrderPriceTimeQuotesWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderPriceTimeQuotes");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderPriceTimeQuotes");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderPriceTimeQuotesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            PriceTimeQuoteResponseRoot>("/tca/order/price-time-quotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderPriceTimeQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Price Time Quotes Get Price Time Quotes
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceTimeQuoteResponseRoot</returns>
        public async System.Threading.Tasks.Task<PriceTimeQuoteResponseRoot>GetOrderPriceTimeQuotesAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderPriceTimeQuotesWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Price Time Quotes Get Price Time Quotes
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceTimeQuoteResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PriceTimeQuoteResponseRoot>> GetOrderPriceTimeQuotesWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderPriceTimeQuotes");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderPriceTimeQuotes");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderPriceTimeQuotesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PriceTimeQuoteResponseRoot>("/tca/order/price-time-quotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderPriceTimeQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Price Time Trades Get Price Time Trades
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>PriceTimeTradeResponseRoot</returns>
        public PriceTimeTradeResponseRoot GetOrderPriceTimeTrades(string orderId, string date)
        {
            var localVarResponse = GetOrderPriceTimeTradesWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Price Time Trades Get Price Time Trades
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of PriceTimeTradeResponseRoot</returns>
        public ApiResponse<PriceTimeTradeResponseRoot> GetOrderPriceTimeTradesWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderPriceTimeTrades");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderPriceTimeTrades");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderPriceTimeTradesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            PriceTimeTradeResponseRoot>("/tca/order/price-time-trades", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderPriceTimeTrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Price Time Trades Get Price Time Trades
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceTimeTradeResponseRoot</returns>
        public async System.Threading.Tasks.Task<PriceTimeTradeResponseRoot>GetOrderPriceTimeTradesAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderPriceTimeTradesWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Price Time Trades Get Price Time Trades
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceTimeTradeResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PriceTimeTradeResponseRoot>> GetOrderPriceTimeTradesWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderPriceTimeTrades");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderPriceTimeTrades");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderPriceTimeTradesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PriceTimeTradeResponseRoot>("/tca/order/price-time-trades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderPriceTimeTrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Volume Prices Get Order Volume Prices
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>VolumePriceResponseRoot</returns>
        public VolumePriceResponseRoot GetOrderVolumePrice(string orderId, string date)
        {
            var localVarResponse = GetOrderVolumePriceWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Volume Prices Get Order Volume Prices
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of VolumePriceResponseRoot</returns>
        public ApiResponse<VolumePriceResponseRoot> GetOrderVolumePriceWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderVolumePrice");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderVolumePrice");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderVolumePriceResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            VolumePriceResponseRoot>("/tca/order/volume-price", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderVolumePrice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Order Volume Prices Get Order Volume Prices
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VolumePriceResponseRoot</returns>
        public async System.Threading.Tasks.Task<VolumePriceResponseRoot>GetOrderVolumePriceAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderVolumePriceWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Volume Prices Get Order Volume Prices
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VolumePriceResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<VolumePriceResponseRoot>> GetOrderVolumePriceWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderVolumePrice");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderVolumePrice");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderVolumePriceResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VolumePriceResponseRoot>("/tca/order/volume-price", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderVolumePrice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Volume Times Get Order Volume Times
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>VolumeTimeResponseRoot</returns>
        public VolumeTimeResponseRoot GetOrderVolumeTime(string orderId, string date)
        {
            var localVarResponse = GetOrderVolumeTimeWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Volume Times Get Order Volume Times
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of VolumeTimeResponseRoot</returns>
        public ApiResponse<VolumeTimeResponseRoot> GetOrderVolumeTimeWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderVolumeTime");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderVolumeTime");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderVolumeTimeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            VolumeTimeResponseRoot>("/tca/order/volume-time", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderVolumeTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Order Volume Times Get Order Volume Times
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VolumeTimeResponseRoot</returns>
        public async System.Threading.Tasks.Task<VolumeTimeResponseRoot>GetOrderVolumeTimeAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderVolumeTimeWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Volume Times Get Order Volume Times
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VolumeTimeResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<VolumeTimeResponseRoot>> GetOrderVolumeTimeWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderVolumeTime");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderVolumeTime");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderVolumeTimeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VolumeTimeResponseRoot>("/tca/order/volume-time", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderVolumeTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Volume Venues Get Order Volume Venues
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>VolumeVenueResponseRoot</returns>
        public VolumeVenueResponseRoot GetOrderVolumeVenue(string orderId, string date)
        {
            var localVarResponse = GetOrderVolumeVenueWithHttpInfo(orderId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Volume Venues Get Order Volume Venues
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <returns>ApiResponse of VolumeVenueResponseRoot</returns>
        public ApiResponse<VolumeVenueResponseRoot> GetOrderVolumeVenueWithHttpInfo(string orderId, string date)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderVolumeVenue");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderVolumeVenue");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOrderVolumeVenueResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            VolumeVenueResponseRoot>("/tca/order/volume-venue", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderVolumeVenue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Order Volume Venues Get Order Volume Venues
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VolumeVenueResponseRoot</returns>
        public async System.Threading.Tasks.Task<VolumeVenueResponseRoot>GetOrderVolumeVenueAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOrderVolumeVenueWithHttpInfoAsync(orderId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Volume Venues Get Order Volume Venues
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The Order Id</param>
        /// <param name="date">The Order Date in the format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VolumeVenueResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<VolumeVenueResponseRoot>> GetOrderVolumeVenueWithHttpInfoAsync(string orderId, string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderDetailsApi->GetOrderVolumeVenue");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'date' when calling OrderDetailsApi->GetOrderVolumeVenue");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOrderVolumeVenueResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VolumeVenueResponseRoot>("/tca/order/volume-venue", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderVolumeVenue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
