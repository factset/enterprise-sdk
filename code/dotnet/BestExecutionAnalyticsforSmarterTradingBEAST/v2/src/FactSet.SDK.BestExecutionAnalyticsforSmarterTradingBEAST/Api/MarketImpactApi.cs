/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client;
using FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketImpactApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Cost Impact
        /// </summary>
        /// <remarks>
        /// Get Cost Impact
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="currency">The ISO 4217 currency code</param>
        /// <param name="orderVolume">Order Volume</param>
        /// <param name="strategy">Specify the strategy, choices are: Optimal, VWAP, TWAP, Custom (optional)</param>
        /// <param name="date">Date in the format YYYY-MM-DD (optional)</param>
        /// <param name="isin">International securities identification number (optional)</param>
        /// <param name="startTime">Start Time in the format HH:MM:SS (optional)</param>
        /// <param name="endTime">End Time in the format HH:MM:SS (optional)</param>
        /// <param name="frontLoadHalfLife">Front Load Half Life (optional)</param>
        /// <param name="rearLoadHalfLife">Rear Load Half Life (optional)</param>
        /// <param name="rearRatio">Rear Ratio (optional)</param>
        /// <param name="riskAversion">Risk Aversion (optional)</param>
        /// <param name="applyMomentum">Flag to apply stock momentum. Specify true to include momentum (optional)</param>
        /// <param name="side">Indicate whether a buyer or seller. Only applies when applyMomentum is true. Example: Buy or Sell. (optional)</param>
        /// <returns>CostImpactResponseRoot</returns>
        CostImpactResponseRoot GetCostImpact(string securityId, string region, string currency, float orderVolume, string strategy = default(string), string date = default(string), string isin = default(string), string startTime = default(string), string endTime = default(string), float? frontLoadHalfLife = default(float?), float? rearLoadHalfLife = default(float?), float? rearRatio = default(float?), float? riskAversion = default(float?), bool? applyMomentum = default(bool?), string side = default(string));

        /// <summary>
        /// Get Cost Impact
        /// </summary>
        /// <remarks>
        /// Get Cost Impact
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="currency">The ISO 4217 currency code</param>
        /// <param name="orderVolume">Order Volume</param>
        /// <param name="strategy">Specify the strategy, choices are: Optimal, VWAP, TWAP, Custom (optional)</param>
        /// <param name="date">Date in the format YYYY-MM-DD (optional)</param>
        /// <param name="isin">International securities identification number (optional)</param>
        /// <param name="startTime">Start Time in the format HH:MM:SS (optional)</param>
        /// <param name="endTime">End Time in the format HH:MM:SS (optional)</param>
        /// <param name="frontLoadHalfLife">Front Load Half Life (optional)</param>
        /// <param name="rearLoadHalfLife">Rear Load Half Life (optional)</param>
        /// <param name="rearRatio">Rear Ratio (optional)</param>
        /// <param name="riskAversion">Risk Aversion (optional)</param>
        /// <param name="applyMomentum">Flag to apply stock momentum. Specify true to include momentum (optional)</param>
        /// <param name="side">Indicate whether a buyer or seller. Only applies when applyMomentum is true. Example: Buy or Sell. (optional)</param>
        /// <returns>ApiResponse of CostImpactResponseRoot</returns>
        ApiResponse<CostImpactResponseRoot> GetCostImpactWithHttpInfo(string securityId, string region, string currency, float orderVolume, string strategy = default(string), string date = default(string), string isin = default(string), string startTime = default(string), string endTime = default(string), float? frontLoadHalfLife = default(float?), float? rearLoadHalfLife = default(float?), float? rearRatio = default(float?), float? riskAversion = default(float?), bool? applyMomentum = default(bool?), string side = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketImpactApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Cost Impact
        /// </summary>
        /// <remarks>
        /// Get Cost Impact
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="currency">The ISO 4217 currency code</param>
        /// <param name="orderVolume">Order Volume</param>
        /// <param name="strategy">Specify the strategy, choices are: Optimal, VWAP, TWAP, Custom (optional)</param>
        /// <param name="date">Date in the format YYYY-MM-DD (optional)</param>
        /// <param name="isin">International securities identification number (optional)</param>
        /// <param name="startTime">Start Time in the format HH:MM:SS (optional)</param>
        /// <param name="endTime">End Time in the format HH:MM:SS (optional)</param>
        /// <param name="frontLoadHalfLife">Front Load Half Life (optional)</param>
        /// <param name="rearLoadHalfLife">Rear Load Half Life (optional)</param>
        /// <param name="rearRatio">Rear Ratio (optional)</param>
        /// <param name="riskAversion">Risk Aversion (optional)</param>
        /// <param name="applyMomentum">Flag to apply stock momentum. Specify true to include momentum (optional)</param>
        /// <param name="side">Indicate whether a buyer or seller. Only applies when applyMomentum is true. Example: Buy or Sell. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CostImpactResponseRoot</returns>
        System.Threading.Tasks.Task<CostImpactResponseRoot> GetCostImpactAsync(string securityId, string region, string currency, float orderVolume, string strategy = default(string), string date = default(string), string isin = default(string), string startTime = default(string), string endTime = default(string), float? frontLoadHalfLife = default(float?), float? rearLoadHalfLife = default(float?), float? rearRatio = default(float?), float? riskAversion = default(float?), bool? applyMomentum = default(bool?), string side = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Cost Impact
        /// </summary>
        /// <remarks>
        /// Get Cost Impact
        /// </remarks>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="currency">The ISO 4217 currency code</param>
        /// <param name="orderVolume">Order Volume</param>
        /// <param name="strategy">Specify the strategy, choices are: Optimal, VWAP, TWAP, Custom (optional)</param>
        /// <param name="date">Date in the format YYYY-MM-DD (optional)</param>
        /// <param name="isin">International securities identification number (optional)</param>
        /// <param name="startTime">Start Time in the format HH:MM:SS (optional)</param>
        /// <param name="endTime">End Time in the format HH:MM:SS (optional)</param>
        /// <param name="frontLoadHalfLife">Front Load Half Life (optional)</param>
        /// <param name="rearLoadHalfLife">Rear Load Half Life (optional)</param>
        /// <param name="rearRatio">Rear Ratio (optional)</param>
        /// <param name="riskAversion">Risk Aversion (optional)</param>
        /// <param name="applyMomentum">Flag to apply stock momentum. Specify true to include momentum (optional)</param>
        /// <param name="side">Indicate whether a buyer or seller. Only applies when applyMomentum is true. Example: Buy or Sell. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CostImpactResponseRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<CostImpactResponseRoot>> GetCostImpactWithHttpInfoAsync(string securityId, string region, string currency, float orderVolume, string strategy = default(string), string date = default(string), string isin = default(string), string startTime = default(string), string endTime = default(string), float? frontLoadHalfLife = default(float?), float? rearLoadHalfLife = default(float?), float? rearRatio = default(float?), float? riskAversion = default(float?), bool? applyMomentum = default(bool?), string side = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketImpactApi : IMarketImpactApiSync, IMarketImpactApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketImpactApi : IMarketImpactApi
    {
        private FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCostImpactResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CostImpactResponseRoot) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketImpactApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketImpactApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketImpactApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketImpactApi(string basePath)
        {
            this.Configuration = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketImpactApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketImpactApi(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketImpactApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MarketImpactApi(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ISynchronousClient client, FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IAsynchronousClient asyncClient, FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Cost Impact Get Cost Impact
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="currency">The ISO 4217 currency code</param>
        /// <param name="orderVolume">Order Volume</param>
        /// <param name="strategy">Specify the strategy, choices are: Optimal, VWAP, TWAP, Custom (optional)</param>
        /// <param name="date">Date in the format YYYY-MM-DD (optional)</param>
        /// <param name="isin">International securities identification number (optional)</param>
        /// <param name="startTime">Start Time in the format HH:MM:SS (optional)</param>
        /// <param name="endTime">End Time in the format HH:MM:SS (optional)</param>
        /// <param name="frontLoadHalfLife">Front Load Half Life (optional)</param>
        /// <param name="rearLoadHalfLife">Rear Load Half Life (optional)</param>
        /// <param name="rearRatio">Rear Ratio (optional)</param>
        /// <param name="riskAversion">Risk Aversion (optional)</param>
        /// <param name="applyMomentum">Flag to apply stock momentum. Specify true to include momentum (optional)</param>
        /// <param name="side">Indicate whether a buyer or seller. Only applies when applyMomentum is true. Example: Buy or Sell. (optional)</param>
        /// <returns>CostImpactResponseRoot</returns>
        public CostImpactResponseRoot GetCostImpact(string securityId, string region, string currency, float orderVolume, string strategy = default(string), string date = default(string), string isin = default(string), string startTime = default(string), string endTime = default(string), float? frontLoadHalfLife = default(float?), float? rearLoadHalfLife = default(float?), float? rearRatio = default(float?), float? riskAversion = default(float?), bool? applyMomentum = default(bool?), string side = default(string))
        {
            var localVarResponse = GetCostImpactWithHttpInfo(securityId, region, currency, orderVolume, strategy, date, isin, startTime, endTime, frontLoadHalfLife, rearLoadHalfLife, rearRatio, riskAversion, applyMomentum, side);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cost Impact Get Cost Impact
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="currency">The ISO 4217 currency code</param>
        /// <param name="orderVolume">Order Volume</param>
        /// <param name="strategy">Specify the strategy, choices are: Optimal, VWAP, TWAP, Custom (optional)</param>
        /// <param name="date">Date in the format YYYY-MM-DD (optional)</param>
        /// <param name="isin">International securities identification number (optional)</param>
        /// <param name="startTime">Start Time in the format HH:MM:SS (optional)</param>
        /// <param name="endTime">End Time in the format HH:MM:SS (optional)</param>
        /// <param name="frontLoadHalfLife">Front Load Half Life (optional)</param>
        /// <param name="rearLoadHalfLife">Rear Load Half Life (optional)</param>
        /// <param name="rearRatio">Rear Ratio (optional)</param>
        /// <param name="riskAversion">Risk Aversion (optional)</param>
        /// <param name="applyMomentum">Flag to apply stock momentum. Specify true to include momentum (optional)</param>
        /// <param name="side">Indicate whether a buyer or seller. Only applies when applyMomentum is true. Example: Buy or Sell. (optional)</param>
        /// <returns>ApiResponse of CostImpactResponseRoot</returns>
        public ApiResponse<CostImpactResponseRoot> GetCostImpactWithHttpInfo(string securityId, string region, string currency, float orderVolume, string strategy = default(string), string date = default(string), string isin = default(string), string startTime = default(string), string endTime = default(string), float? frontLoadHalfLife = default(float?), float? rearLoadHalfLife = default(float?), float? rearRatio = default(float?), float? riskAversion = default(float?), bool? applyMomentum = default(bool?), string side = default(string))
        {
            // verify the required parameter 'securityId' is set
            if (securityId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'securityId' when calling MarketImpactApi->GetCostImpact");
            }

            // verify the required parameter 'region' is set
            if (region == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'region' when calling MarketImpactApi->GetCostImpact");
            }

            // verify the required parameter 'currency' is set
            if (currency == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'currency' when calling MarketImpactApi->GetCostImpact");
            }

            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "securityId", securityId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderVolume", orderVolume));
            if (strategy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "strategy", strategy));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (isin != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "isin", isin));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (frontLoadHalfLife != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "frontLoadHalfLife", frontLoadHalfLife));
            }
            if (rearLoadHalfLife != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "rearLoadHalfLife", rearLoadHalfLife));
            }
            if (rearRatio != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "rearRatio", rearRatio));
            }
            if (riskAversion != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "riskAversion", riskAversion));
            }
            if (applyMomentum != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "applyMomentum", applyMomentum));
            }
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "side", side));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCostImpactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CostImpactResponseRoot>("/tca/market-impact/cost-impact", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCostImpact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Cost Impact Get Cost Impact
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="currency">The ISO 4217 currency code</param>
        /// <param name="orderVolume">Order Volume</param>
        /// <param name="strategy">Specify the strategy, choices are: Optimal, VWAP, TWAP, Custom (optional)</param>
        /// <param name="date">Date in the format YYYY-MM-DD (optional)</param>
        /// <param name="isin">International securities identification number (optional)</param>
        /// <param name="startTime">Start Time in the format HH:MM:SS (optional)</param>
        /// <param name="endTime">End Time in the format HH:MM:SS (optional)</param>
        /// <param name="frontLoadHalfLife">Front Load Half Life (optional)</param>
        /// <param name="rearLoadHalfLife">Rear Load Half Life (optional)</param>
        /// <param name="rearRatio">Rear Ratio (optional)</param>
        /// <param name="riskAversion">Risk Aversion (optional)</param>
        /// <param name="applyMomentum">Flag to apply stock momentum. Specify true to include momentum (optional)</param>
        /// <param name="side">Indicate whether a buyer or seller. Only applies when applyMomentum is true. Example: Buy or Sell. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CostImpactResponseRoot</returns>
        public async System.Threading.Tasks.Task<CostImpactResponseRoot>GetCostImpactAsync(string securityId, string region, string currency, float orderVolume, string strategy = default(string), string date = default(string), string isin = default(string), string startTime = default(string), string endTime = default(string), float? frontLoadHalfLife = default(float?), float? rearLoadHalfLife = default(float?), float? rearRatio = default(float?), float? riskAversion = default(float?), bool? applyMomentum = default(bool?), string side = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCostImpactWithHttpInfoAsync(securityId, region, currency, orderVolume, strategy, date, isin, startTime, endTime, frontLoadHalfLife, rearLoadHalfLife, rearRatio, riskAversion, applyMomentum, side, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cost Impact Get Cost Impact
        /// </summary>
        /// <exception cref="FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">ISIN for European securities, otherwise TICKER</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region</param>
        /// <param name="currency">The ISO 4217 currency code</param>
        /// <param name="orderVolume">Order Volume</param>
        /// <param name="strategy">Specify the strategy, choices are: Optimal, VWAP, TWAP, Custom (optional)</param>
        /// <param name="date">Date in the format YYYY-MM-DD (optional)</param>
        /// <param name="isin">International securities identification number (optional)</param>
        /// <param name="startTime">Start Time in the format HH:MM:SS (optional)</param>
        /// <param name="endTime">End Time in the format HH:MM:SS (optional)</param>
        /// <param name="frontLoadHalfLife">Front Load Half Life (optional)</param>
        /// <param name="rearLoadHalfLife">Rear Load Half Life (optional)</param>
        /// <param name="rearRatio">Rear Ratio (optional)</param>
        /// <param name="riskAversion">Risk Aversion (optional)</param>
        /// <param name="applyMomentum">Flag to apply stock momentum. Specify true to include momentum (optional)</param>
        /// <param name="side">Indicate whether a buyer or seller. Only applies when applyMomentum is true. Example: Buy or Sell. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CostImpactResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CostImpactResponseRoot>> GetCostImpactWithHttpInfoAsync(string securityId, string region, string currency, float orderVolume, string strategy = default(string), string date = default(string), string isin = default(string), string startTime = default(string), string endTime = default(string), float? frontLoadHalfLife = default(float?), float? rearLoadHalfLife = default(float?), float? rearRatio = default(float?), float? riskAversion = default(float?), bool? applyMomentum = default(bool?), string side = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'securityId' is set
            if (securityId == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'securityId' when calling MarketImpactApi->GetCostImpact");
            }

            // verify the required parameter 'region' is set
            if (region == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'region' when calling MarketImpactApi->GetCostImpact");
            }

            // verify the required parameter 'currency' is set
            if (currency == null)
            {
                throw new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ApiException(400, "Missing required parameter 'currency' when calling MarketImpactApi->GetCostImpact");
            }


            FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "securityId", securityId));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "orderVolume", orderVolume));
            if (strategy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "strategy", strategy));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (isin != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "isin", isin));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (frontLoadHalfLife != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "frontLoadHalfLife", frontLoadHalfLife));
            }
            if (rearLoadHalfLife != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "rearLoadHalfLife", rearLoadHalfLife));
            }
            if (rearRatio != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "rearRatio", rearRatio));
            }
            if (riskAversion != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "riskAversion", riskAversion));
            }
            if (applyMomentum != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "applyMomentum", applyMomentum));
            }
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.ParameterToMultiMap("", "side", side));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCostImpactResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CostImpactResponseRoot>("/tca/market-impact/cost-impact", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCostImpact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
