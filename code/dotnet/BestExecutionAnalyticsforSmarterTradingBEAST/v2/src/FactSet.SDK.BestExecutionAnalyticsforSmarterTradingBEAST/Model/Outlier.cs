/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// The Outlier object
    /// </summary>
    [DataContract(Name = "Outlier")]
    public partial class Outlier : IEquatable<Outlier>, IValidatableObject
    {
        /// <summary>
        /// Order type
        /// </summary>
        /// <value>Order type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageTypeEnum
        {
            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 1,

            /// <summary>
            /// Enum Parent for value: parent
            /// </summary>
            [EnumMember(Value = "parent")]
            Parent = 2,

            /// <summary>
            /// Enum Child for value: child
            /// </summary>
            [EnumMember(Value = "child")]
            Child = 3

        }


        /// <summary>
        /// Order type
        /// </summary>
        /// <value>Order type</value>
        [DataMember(Name = "messageType", EmitDefaultValue = false)]
        public MessageTypeEnum? MessageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Outlier" /> class.
        /// </summary>
        /// <param name="securityId">Security Id.</param>
        /// <param name="orderId">Order Id.</param>
        /// <param name="compositeId">Composite Id.</param>
        /// <param name="messageType">Order type.</param>
        /// <param name="metric">Metric.</param>
        /// <param name="side">Side.</param>
        /// <param name="volume">Volume.</param>
        /// <param name="price">Price.</param>
        /// <param name="value">Value.</param>
        /// <param name="refValue">Ref Value.</param>
        /// <param name="dateId">Date.</param>
        /// <param name="broker">Broker.</param>
        /// <param name="trader">Trader.</param>
        /// <param name="currency">Currency.</param>
        /// <param name="country">The two character ISO country code.</param>
        /// <param name="isin">Isin.</param>
        /// <param name="winsorized">Winsorized.</param>
        /// <param name="outlier">Outlier flag.</param>
        /// <param name="duration">Duration.</param>
        /// <param name="timeZone">The timezone identifier as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.</param>
        /// <param name="timeZoneName">The timezone abbreviation as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.</param>
        /// <param name="symbol">Symbol.</param>
        /// <param name="region">The two character ISO country code of the trading region. EMEA is used for the European trading region.</param>
        public Outlier(string securityId = default(string), string orderId = default(string), string compositeId = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), double metric = default(double), string side = default(string), double volume = default(double), double price = default(double), double value = default(double), double refValue = default(double), string dateId = default(string), string broker = default(string), string trader = default(string), string currency = default(string), string country = default(string), string isin = default(string), double winsorized = default(double), bool outlier = default(bool), long duration = default(long), string timeZone = default(string), string timeZoneName = default(string), string symbol = default(string), string region = default(string))
        {
            this.SecurityId = securityId;
            this.OrderId = orderId;
            this.CompositeId = compositeId;
            this.MessageType = messageType;
            this.Metric = metric;
            this.Side = side;
            this.Volume = volume;
            this.Price = price;
            this.Value = value;
            this.RefValue = refValue;
            this.DateId = dateId;
            this.Broker = broker;
            this.Trader = trader;
            this.Currency = currency;
            this.Country = country;
            this.Isin = isin;
            this.Winsorized = winsorized;
            this._Outlier = outlier;
            this.Duration = duration;
            this.TimeZone = timeZone;
            this.TimeZoneName = timeZoneName;
            this.Symbol = symbol;
            this.Region = region;
        }

        /// <summary>
        /// Security Id
        /// </summary>
        /// <value>Security Id</value>
        [DataMember(Name = "securityId", EmitDefaultValue = false)]
        public string SecurityId { get; set; }

        /// <summary>
        /// Order Id
        /// </summary>
        /// <value>Order Id</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Composite Id
        /// </summary>
        /// <value>Composite Id</value>
        [DataMember(Name = "compositeId", EmitDefaultValue = false)]
        public string CompositeId { get; set; }

        /// <summary>
        /// Metric
        /// </summary>
        /// <value>Metric</value>
        [DataMember(Name = "metric", EmitDefaultValue = false)]
        public double Metric { get; set; }

        /// <summary>
        /// Side
        /// </summary>
        /// <value>Side</value>
        [DataMember(Name = "side", EmitDefaultValue = false)]
        public string Side { get; set; }

        /// <summary>
        /// Volume
        /// </summary>
        /// <value>Volume</value>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public double Volume { get; set; }

        /// <summary>
        /// Price
        /// </summary>
        /// <value>Price</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        /// <value>Value</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public double Value { get; set; }

        /// <summary>
        /// Ref Value
        /// </summary>
        /// <value>Ref Value</value>
        [DataMember(Name = "refValue", EmitDefaultValue = false)]
        public double RefValue { get; set; }

        /// <summary>
        /// Date
        /// </summary>
        /// <value>Date</value>
        [DataMember(Name = "dateId", EmitDefaultValue = false)]
        public string DateId { get; set; }

        /// <summary>
        /// Broker
        /// </summary>
        /// <value>Broker</value>
        [DataMember(Name = "broker", EmitDefaultValue = false)]
        public string Broker { get; set; }

        /// <summary>
        /// Trader
        /// </summary>
        /// <value>Trader</value>
        [DataMember(Name = "trader", EmitDefaultValue = false)]
        public string Trader { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// The two character ISO country code
        /// </summary>
        /// <value>The two character ISO country code</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Isin
        /// </summary>
        /// <value>Isin</value>
        [DataMember(Name = "isin", EmitDefaultValue = false)]
        public string Isin { get; set; }

        /// <summary>
        /// Winsorized
        /// </summary>
        /// <value>Winsorized</value>
        [DataMember(Name = "winsorized", EmitDefaultValue = false)]
        public double Winsorized { get; set; }

        /// <summary>
        /// Outlier flag
        /// </summary>
        /// <value>Outlier flag</value>
        [DataMember(Name = "outlier", EmitDefaultValue = true)]
        public bool _Outlier { get; set; }

        /// <summary>
        /// Duration
        /// </summary>
        /// <value>Duration</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public long Duration { get; set; }

        /// <summary>
        /// The timezone identifier as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
        /// </summary>
        /// <value>The timezone identifier as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</value>
        [DataMember(Name = "timeZone", EmitDefaultValue = false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// The timezone abbreviation as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
        /// </summary>
        /// <value>The timezone abbreviation as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</value>
        [DataMember(Name = "timeZoneName", EmitDefaultValue = false)]
        public string TimeZoneName { get; set; }

        /// <summary>
        /// Symbol
        /// </summary>
        /// <value>Symbol</value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// The two character ISO country code of the trading region. EMEA is used for the European trading region
        /// </summary>
        /// <value>The two character ISO country code of the trading region. EMEA is used for the European trading region</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Outlier {\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  CompositeId: ").Append(CompositeId).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  RefValue: ").Append(RefValue).Append("\n");
            sb.Append("  DateId: ").Append(DateId).Append("\n");
            sb.Append("  Broker: ").Append(Broker).Append("\n");
            sb.Append("  Trader: ").Append(Trader).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Winsorized: ").Append(Winsorized).Append("\n");
            sb.Append("  _Outlier: ").Append(_Outlier).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  TimeZoneName: ").Append(TimeZoneName).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Outlier);
        }

        /// <summary>
        /// Returns true if Outlier instances are equal
        /// </summary>
        /// <param name="input">Instance of Outlier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Outlier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.CompositeId == input.CompositeId ||
                    (this.CompositeId != null &&
                    this.CompositeId.Equals(input.CompositeId))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    this.MessageType.Equals(input.MessageType)
                ) && 
                (
                    this.Metric == input.Metric ||
                    this.Metric.Equals(input.Metric)
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.RefValue == input.RefValue ||
                    this.RefValue.Equals(input.RefValue)
                ) && 
                (
                    this.DateId == input.DateId ||
                    (this.DateId != null &&
                    this.DateId.Equals(input.DateId))
                ) && 
                (
                    this.Broker == input.Broker ||
                    (this.Broker != null &&
                    this.Broker.Equals(input.Broker))
                ) && 
                (
                    this.Trader == input.Trader ||
                    (this.Trader != null &&
                    this.Trader.Equals(input.Trader))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Winsorized == input.Winsorized ||
                    this.Winsorized.Equals(input.Winsorized)
                ) && 
                (
                    this._Outlier == input._Outlier ||
                    this._Outlier.Equals(input._Outlier)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.TimeZoneName == input.TimeZoneName ||
                    (this.TimeZoneName != null &&
                    this.TimeZoneName.Equals(input.TimeZoneName))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.CompositeId != null)
                {
                    hashCode = (hashCode * 59) + this.CompositeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                hashCode = (hashCode * 59) + this.Metric.GetHashCode();
                if (this.Side != null)
                {
                    hashCode = (hashCode * 59) + this.Side.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.RefValue.GetHashCode();
                if (this.DateId != null)
                {
                    hashCode = (hashCode * 59) + this.DateId.GetHashCode();
                }
                if (this.Broker != null)
                {
                    hashCode = (hashCode * 59) + this.Broker.GetHashCode();
                }
                if (this.Trader != null)
                {
                    hashCode = (hashCode * 59) + this.Trader.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Winsorized.GetHashCode();
                hashCode = (hashCode * 59) + this._Outlier.GetHashCode();
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                if (this.TimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZone.GetHashCode();
                }
                if (this.TimeZoneName != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZoneName.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
