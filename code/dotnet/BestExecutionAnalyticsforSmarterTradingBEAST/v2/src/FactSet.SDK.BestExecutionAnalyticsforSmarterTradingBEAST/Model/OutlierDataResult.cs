/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// The Outlier Data Result object
    /// </summary>
    [DataContract(Name = "OutlierDataResult")]
    public partial class OutlierDataResult : IEquatable<OutlierDataResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutlierDataResult" /> class.
        /// </summary>
        /// <param name="bin">Result Bin.</param>
        /// <param name="count">Result Count.</param>
        public OutlierDataResult(int bin = default(int), int count = default(int))
        {
            this.Bin = bin;
            this.Count = count;
        }

        /// <summary>
        /// Result Bin
        /// </summary>
        /// <value>Result Bin</value>
        [DataMember(Name = "bin", EmitDefaultValue = false)]
        public int Bin { get; set; }

        /// <summary>
        /// Result Count
        /// </summary>
        /// <value>Result Count</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutlierDataResult {\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutlierDataResult);
        }

        /// <summary>
        /// Returns true if OutlierDataResult instances are equal
        /// </summary>
        /// <param name="input">Instance of OutlierDataResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutlierDataResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Bin == input.Bin ||
                    this.Bin.Equals(input.Bin)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Bin.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
