/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// The Output Strategy Bin Data object
    /// </summary>
    [DataContract(Name = "OutputStrategyBinData")]
    public partial class OutputStrategyBinData : IEquatable<OutputStrategyBinData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputStrategyBinData" /> class.
        /// </summary>
        /// <param name="binTime">The time in UTC of the start of the bin. Each bin has a duration of 5 minutes.</param>
        /// <param name="securityId">Security Id.</param>
        /// <param name="country">The two character ISO country code.</param>
        /// <param name="currency">Currency.</param>
        /// <param name="dateId">Date Id.</param>
        /// <param name="totalCost">Total Cost.</param>
        /// <param name="spreadCost">Spread Cost.</param>
        /// <param name="liquidityCost">Liquidity Cost.</param>
        /// <param name="confidenceInterval">Confidence Interval.</param>
        /// <param name="signalCost">Signal Cost.</param>
        /// <param name="cappedPrice">Capped Price.</param>
        /// <param name="reversionPrice">Reversion Price.</param>
        /// <param name="stockPrice">Stock Price.</param>
        /// <param name="arrivalMid">Arrival Mid.</param>
        /// <param name="strategyVolume">Strategy Volume.</param>
        /// <param name="partRate">Part Rate.</param>
        public OutputStrategyBinData(string binTime = default(string), string securityId = default(string), string country = default(string), string currency = default(string), string dateId = default(string), double totalCost = default(double), double spreadCost = default(double), double liquidityCost = default(double), double confidenceInterval = default(double), double signalCost = default(double), double cappedPrice = default(double), double reversionPrice = default(double), double stockPrice = default(double), double arrivalMid = default(double), double strategyVolume = default(double), double partRate = default(double))
        {
            this.BinTime = binTime;
            this.SecurityId = securityId;
            this.Country = country;
            this.Currency = currency;
            this.DateId = dateId;
            this.TotalCost = totalCost;
            this.SpreadCost = spreadCost;
            this.LiquidityCost = liquidityCost;
            this.ConfidenceInterval = confidenceInterval;
            this.SignalCost = signalCost;
            this.CappedPrice = cappedPrice;
            this.ReversionPrice = reversionPrice;
            this.StockPrice = stockPrice;
            this.ArrivalMid = arrivalMid;
            this.StrategyVolume = strategyVolume;
            this.PartRate = partRate;
        }

        /// <summary>
        /// The time in UTC of the start of the bin. Each bin has a duration of 5 minutes
        /// </summary>
        /// <value>The time in UTC of the start of the bin. Each bin has a duration of 5 minutes</value>
        [DataMember(Name = "binTime", EmitDefaultValue = false)]
        public string BinTime { get; set; }

        /// <summary>
        /// Security Id
        /// </summary>
        /// <value>Security Id</value>
        [DataMember(Name = "securityId", EmitDefaultValue = false)]
        public string SecurityId { get; set; }

        /// <summary>
        /// The two character ISO country code
        /// </summary>
        /// <value>The two character ISO country code</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Date Id
        /// </summary>
        /// <value>Date Id</value>
        [DataMember(Name = "dateId", EmitDefaultValue = false)]
        public string DateId { get; set; }

        /// <summary>
        /// Total Cost
        /// </summary>
        /// <value>Total Cost</value>
        [DataMember(Name = "totalCost", EmitDefaultValue = false)]
        public double TotalCost { get; set; }

        /// <summary>
        /// Spread Cost
        /// </summary>
        /// <value>Spread Cost</value>
        [DataMember(Name = "spreadCost", EmitDefaultValue = false)]
        public double SpreadCost { get; set; }

        /// <summary>
        /// Liquidity Cost
        /// </summary>
        /// <value>Liquidity Cost</value>
        [DataMember(Name = "liquidityCost", EmitDefaultValue = false)]
        public double LiquidityCost { get; set; }

        /// <summary>
        /// Confidence Interval
        /// </summary>
        /// <value>Confidence Interval</value>
        [DataMember(Name = "confidenceInterval", EmitDefaultValue = false)]
        public double ConfidenceInterval { get; set; }

        /// <summary>
        /// Signal Cost
        /// </summary>
        /// <value>Signal Cost</value>
        [DataMember(Name = "signalCost", EmitDefaultValue = false)]
        public double SignalCost { get; set; }

        /// <summary>
        /// Capped Price
        /// </summary>
        /// <value>Capped Price</value>
        [DataMember(Name = "cappedPrice", EmitDefaultValue = false)]
        public double CappedPrice { get; set; }

        /// <summary>
        /// Reversion Price
        /// </summary>
        /// <value>Reversion Price</value>
        [DataMember(Name = "reversionPrice", EmitDefaultValue = false)]
        public double ReversionPrice { get; set; }

        /// <summary>
        /// Stock Price
        /// </summary>
        /// <value>Stock Price</value>
        [DataMember(Name = "stockPrice", EmitDefaultValue = false)]
        public double StockPrice { get; set; }

        /// <summary>
        /// Arrival Mid
        /// </summary>
        /// <value>Arrival Mid</value>
        [DataMember(Name = "arrivalMid", EmitDefaultValue = false)]
        public double ArrivalMid { get; set; }

        /// <summary>
        /// Strategy Volume
        /// </summary>
        /// <value>Strategy Volume</value>
        [DataMember(Name = "strategyVolume", EmitDefaultValue = false)]
        public double StrategyVolume { get; set; }

        /// <summary>
        /// Part Rate
        /// </summary>
        /// <value>Part Rate</value>
        [DataMember(Name = "partRate", EmitDefaultValue = false)]
        public double PartRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutputStrategyBinData {\n");
            sb.Append("  BinTime: ").Append(BinTime).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DateId: ").Append(DateId).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  SpreadCost: ").Append(SpreadCost).Append("\n");
            sb.Append("  LiquidityCost: ").Append(LiquidityCost).Append("\n");
            sb.Append("  ConfidenceInterval: ").Append(ConfidenceInterval).Append("\n");
            sb.Append("  SignalCost: ").Append(SignalCost).Append("\n");
            sb.Append("  CappedPrice: ").Append(CappedPrice).Append("\n");
            sb.Append("  ReversionPrice: ").Append(ReversionPrice).Append("\n");
            sb.Append("  StockPrice: ").Append(StockPrice).Append("\n");
            sb.Append("  ArrivalMid: ").Append(ArrivalMid).Append("\n");
            sb.Append("  StrategyVolume: ").Append(StrategyVolume).Append("\n");
            sb.Append("  PartRate: ").Append(PartRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutputStrategyBinData);
        }

        /// <summary>
        /// Returns true if OutputStrategyBinData instances are equal
        /// </summary>
        /// <param name="input">Instance of OutputStrategyBinData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutputStrategyBinData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BinTime == input.BinTime ||
                    (this.BinTime != null &&
                    this.BinTime.Equals(input.BinTime))
                ) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.DateId == input.DateId ||
                    (this.DateId != null &&
                    this.DateId.Equals(input.DateId))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    this.TotalCost.Equals(input.TotalCost)
                ) && 
                (
                    this.SpreadCost == input.SpreadCost ||
                    this.SpreadCost.Equals(input.SpreadCost)
                ) && 
                (
                    this.LiquidityCost == input.LiquidityCost ||
                    this.LiquidityCost.Equals(input.LiquidityCost)
                ) && 
                (
                    this.ConfidenceInterval == input.ConfidenceInterval ||
                    this.ConfidenceInterval.Equals(input.ConfidenceInterval)
                ) && 
                (
                    this.SignalCost == input.SignalCost ||
                    this.SignalCost.Equals(input.SignalCost)
                ) && 
                (
                    this.CappedPrice == input.CappedPrice ||
                    this.CappedPrice.Equals(input.CappedPrice)
                ) && 
                (
                    this.ReversionPrice == input.ReversionPrice ||
                    this.ReversionPrice.Equals(input.ReversionPrice)
                ) && 
                (
                    this.StockPrice == input.StockPrice ||
                    this.StockPrice.Equals(input.StockPrice)
                ) && 
                (
                    this.ArrivalMid == input.ArrivalMid ||
                    this.ArrivalMid.Equals(input.ArrivalMid)
                ) && 
                (
                    this.StrategyVolume == input.StrategyVolume ||
                    this.StrategyVolume.Equals(input.StrategyVolume)
                ) && 
                (
                    this.PartRate == input.PartRate ||
                    this.PartRate.Equals(input.PartRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BinTime != null)
                {
                    hashCode = (hashCode * 59) + this.BinTime.GetHashCode();
                }
                if (this.SecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityId.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.DateId != null)
                {
                    hashCode = (hashCode * 59) + this.DateId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalCost.GetHashCode();
                hashCode = (hashCode * 59) + this.SpreadCost.GetHashCode();
                hashCode = (hashCode * 59) + this.LiquidityCost.GetHashCode();
                hashCode = (hashCode * 59) + this.ConfidenceInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.SignalCost.GetHashCode();
                hashCode = (hashCode * 59) + this.CappedPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.ReversionPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.StockPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.ArrivalMid.GetHashCode();
                hashCode = (hashCode * 59) + this.StrategyVolume.GetHashCode();
                hashCode = (hashCode * 59) + this.PartRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
