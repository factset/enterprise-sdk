/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Volume Price Bin data
    /// </summary>
    [DataContract(Name = "VolumePriceBin")]
    public partial class VolumePriceBin : IEquatable<VolumePriceBin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumePriceBin" /> class.
        /// </summary>
        /// <param name="bin">Bin.</param>
        /// <param name="minPrice">Min Price.</param>
        /// <param name="maxPrice">Max Price.</param>
        /// <param name="binPrice">Bin Price.</param>
        /// <param name="tradesVolumePct">Trades Volume Pct.</param>
        /// <param name="fillVolumePct">Fill Volume Pct.</param>
        /// <param name="tradeVolume">Trade Volume.</param>
        /// <param name="fillVolume">Fill Volume.</param>
        public VolumePriceBin(int bin = default(int), double minPrice = default(double), double maxPrice = default(double), double binPrice = default(double), double tradesVolumePct = default(double), double fillVolumePct = default(double), double tradeVolume = default(double), double fillVolume = default(double))
        {
            this.Bin = bin;
            this.MinPrice = minPrice;
            this.MaxPrice = maxPrice;
            this.BinPrice = binPrice;
            this.TradesVolumePct = tradesVolumePct;
            this.FillVolumePct = fillVolumePct;
            this.TradeVolume = tradeVolume;
            this.FillVolume = fillVolume;
        }

        /// <summary>
        /// Bin
        /// </summary>
        /// <value>Bin</value>
        [DataMember(Name = "bin", EmitDefaultValue = false)]
        public int Bin { get; set; }

        /// <summary>
        /// Min Price
        /// </summary>
        /// <value>Min Price</value>
        [DataMember(Name = "minPrice", EmitDefaultValue = false)]
        public double MinPrice { get; set; }

        /// <summary>
        /// Max Price
        /// </summary>
        /// <value>Max Price</value>
        [DataMember(Name = "maxPrice", EmitDefaultValue = false)]
        public double MaxPrice { get; set; }

        /// <summary>
        /// Bin Price
        /// </summary>
        /// <value>Bin Price</value>
        [DataMember(Name = "binPrice", EmitDefaultValue = false)]
        public double BinPrice { get; set; }

        /// <summary>
        /// Trades Volume Pct
        /// </summary>
        /// <value>Trades Volume Pct</value>
        [DataMember(Name = "tradesVolumePct", EmitDefaultValue = false)]
        public double TradesVolumePct { get; set; }

        /// <summary>
        /// Fill Volume Pct
        /// </summary>
        /// <value>Fill Volume Pct</value>
        [DataMember(Name = "fillVolumePct", EmitDefaultValue = false)]
        public double FillVolumePct { get; set; }

        /// <summary>
        /// Trade Volume
        /// </summary>
        /// <value>Trade Volume</value>
        [DataMember(Name = "tradeVolume", EmitDefaultValue = false)]
        public double TradeVolume { get; set; }

        /// <summary>
        /// Fill Volume
        /// </summary>
        /// <value>Fill Volume</value>
        [DataMember(Name = "fillVolume", EmitDefaultValue = false)]
        public double FillVolume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VolumePriceBin {\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  MinPrice: ").Append(MinPrice).Append("\n");
            sb.Append("  MaxPrice: ").Append(MaxPrice).Append("\n");
            sb.Append("  BinPrice: ").Append(BinPrice).Append("\n");
            sb.Append("  TradesVolumePct: ").Append(TradesVolumePct).Append("\n");
            sb.Append("  FillVolumePct: ").Append(FillVolumePct).Append("\n");
            sb.Append("  TradeVolume: ").Append(TradeVolume).Append("\n");
            sb.Append("  FillVolume: ").Append(FillVolume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VolumePriceBin);
        }

        /// <summary>
        /// Returns true if VolumePriceBin instances are equal
        /// </summary>
        /// <param name="input">Instance of VolumePriceBin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumePriceBin input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Bin == input.Bin ||
                    this.Bin.Equals(input.Bin)
                ) && 
                (
                    this.MinPrice == input.MinPrice ||
                    this.MinPrice.Equals(input.MinPrice)
                ) && 
                (
                    this.MaxPrice == input.MaxPrice ||
                    this.MaxPrice.Equals(input.MaxPrice)
                ) && 
                (
                    this.BinPrice == input.BinPrice ||
                    this.BinPrice.Equals(input.BinPrice)
                ) && 
                (
                    this.TradesVolumePct == input.TradesVolumePct ||
                    this.TradesVolumePct.Equals(input.TradesVolumePct)
                ) && 
                (
                    this.FillVolumePct == input.FillVolumePct ||
                    this.FillVolumePct.Equals(input.FillVolumePct)
                ) && 
                (
                    this.TradeVolume == input.TradeVolume ||
                    this.TradeVolume.Equals(input.TradeVolume)
                ) && 
                (
                    this.FillVolume == input.FillVolume ||
                    this.FillVolume.Equals(input.FillVolume)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Bin.GetHashCode();
                hashCode = (hashCode * 59) + this.MinPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.BinPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TradesVolumePct.GetHashCode();
                hashCode = (hashCode * 59) + this.FillVolumePct.GetHashCode();
                hashCode = (hashCode * 59) + this.TradeVolume.GetHashCode();
                hashCode = (hashCode * 59) + this.FillVolume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
