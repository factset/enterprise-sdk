/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Volume Venue data
    /// </summary>
    [DataContract(Name = "VolumeVenue")]
    public partial class VolumeVenue : IEquatable<VolumeVenue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumeVenue" /> class.
        /// </summary>
        /// <param name="venue">Venue.</param>
        /// <param name="orderVolume">Order Volume.</param>
        /// <param name="fillsVolumePct">Fills Volume Percentage.</param>
        /// <param name="marketVolume">Market Volume.</param>
        /// <param name="tradesVolumePct">Trades Volume Percentage.</param>
        public VolumeVenue(string venue = default(string), double orderVolume = default(double), double fillsVolumePct = default(double), double marketVolume = default(double), double tradesVolumePct = default(double))
        {
            this.Venue = venue;
            this.OrderVolume = orderVolume;
            this.FillsVolumePct = fillsVolumePct;
            this.MarketVolume = marketVolume;
            this.TradesVolumePct = tradesVolumePct;
        }

        /// <summary>
        /// Venue
        /// </summary>
        /// <value>Venue</value>
        [DataMember(Name = "venue", EmitDefaultValue = false)]
        public string Venue { get; set; }

        /// <summary>
        /// Order Volume
        /// </summary>
        /// <value>Order Volume</value>
        [DataMember(Name = "orderVolume", EmitDefaultValue = false)]
        public double OrderVolume { get; set; }

        /// <summary>
        /// Fills Volume Percentage
        /// </summary>
        /// <value>Fills Volume Percentage</value>
        [DataMember(Name = "fillsVolumePct", EmitDefaultValue = false)]
        public double FillsVolumePct { get; set; }

        /// <summary>
        /// Market Volume
        /// </summary>
        /// <value>Market Volume</value>
        [DataMember(Name = "marketVolume", EmitDefaultValue = false)]
        public double MarketVolume { get; set; }

        /// <summary>
        /// Trades Volume Percentage
        /// </summary>
        /// <value>Trades Volume Percentage</value>
        [DataMember(Name = "tradesVolumePct", EmitDefaultValue = false)]
        public double TradesVolumePct { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VolumeVenue {\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  OrderVolume: ").Append(OrderVolume).Append("\n");
            sb.Append("  FillsVolumePct: ").Append(FillsVolumePct).Append("\n");
            sb.Append("  MarketVolume: ").Append(MarketVolume).Append("\n");
            sb.Append("  TradesVolumePct: ").Append(TradesVolumePct).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VolumeVenue);
        }

        /// <summary>
        /// Returns true if VolumeVenue instances are equal
        /// </summary>
        /// <param name="input">Instance of VolumeVenue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeVenue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Venue == input.Venue ||
                    (this.Venue != null &&
                    this.Venue.Equals(input.Venue))
                ) && 
                (
                    this.OrderVolume == input.OrderVolume ||
                    this.OrderVolume.Equals(input.OrderVolume)
                ) && 
                (
                    this.FillsVolumePct == input.FillsVolumePct ||
                    this.FillsVolumePct.Equals(input.FillsVolumePct)
                ) && 
                (
                    this.MarketVolume == input.MarketVolume ||
                    this.MarketVolume.Equals(input.MarketVolume)
                ) && 
                (
                    this.TradesVolumePct == input.TradesVolumePct ||
                    this.TradesVolumePct.Equals(input.TradesVolumePct)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Venue != null)
                {
                    hashCode = (hashCode * 59) + this.Venue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderVolume.GetHashCode();
                hashCode = (hashCode * 59) + this.FillsVolumePct.GetHashCode();
                hashCode = (hashCode * 59) + this.MarketVolume.GetHashCode();
                hashCode = (hashCode * 59) + this.TradesVolumePct.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
