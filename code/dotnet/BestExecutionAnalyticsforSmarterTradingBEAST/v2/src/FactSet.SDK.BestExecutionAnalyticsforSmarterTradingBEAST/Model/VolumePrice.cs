/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Volume Price data
    /// </summary>
    [DataContract(Name = "VolumePrice")]
    public partial class VolumePrice : IEquatable<VolumePrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumePrice" /> class.
        /// </summary>
        /// <param name="metrics">metrics.</param>
        /// <param name="bins">Bin data.</param>
        public VolumePrice(VolumePriceMetrics metrics = default(VolumePriceMetrics), List<VolumePriceBin> bins = default(List<VolumePriceBin>))
        {
            this.Metrics = metrics;
            this.Bins = bins;
        }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public VolumePriceMetrics Metrics { get; set; }

        /// <summary>
        /// Bin data
        /// </summary>
        /// <value>Bin data</value>
        [DataMember(Name = "bins", EmitDefaultValue = false)]
        public List<VolumePriceBin> Bins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VolumePrice {\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Bins: ").Append(Bins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VolumePrice);
        }

        /// <summary>
        /// Returns true if VolumePrice instances are equal
        /// </summary>
        /// <param name="input">Instance of VolumePrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumePrice input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Metrics == input.Metrics ||
                    (this.Metrics != null &&
                    this.Metrics.Equals(input.Metrics))
                ) && 
                (
                    this.Bins == input.Bins ||
                    this.Bins != null &&
                    input.Bins != null &&
                    this.Bins.SequenceEqual(input.Bins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Metrics != null)
                {
                    hashCode = (hashCode * 59) + this.Metrics.GetHashCode();
                }
                if (this.Bins != null)
                {
                    hashCode = (hashCode * 59) + this.Bins.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
