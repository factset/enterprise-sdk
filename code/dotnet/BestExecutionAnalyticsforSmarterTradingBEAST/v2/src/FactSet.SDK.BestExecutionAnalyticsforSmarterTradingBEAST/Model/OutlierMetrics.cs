/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// The Outlier Metrics object
    /// </summary>
    [DataContract(Name = "OutlierMetrics")]
    public partial class OutlierMetrics : IEquatable<OutlierMetrics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutlierMetrics" /> class.
        /// </summary>
        /// <param name="max">Max Value.</param>
        /// <param name="min">Min Value.</param>
        /// <param name="stdDev">Standard Deviation.</param>
        /// <param name="avg">Average.</param>
        /// <param name="median">Median.</param>
        /// <param name="binWidth">Bin Width.</param>
        /// <param name="skew">Skew.</param>
        /// <param name="laplaceScale">Laplace Scale.</param>
        /// <param name="minMetric">Min Metric.</param>
        /// <param name="maxMetric">Max Metric.</param>
        /// <param name="binMax">Bin Max.</param>
        /// <param name="binMin">Bin Min.</param>
        public OutlierMetrics(double max = default(double), double min = default(double), double stdDev = default(double), double avg = default(double), double median = default(double), double binWidth = default(double), double skew = default(double), double laplaceScale = default(double), double minMetric = default(double), double maxMetric = default(double), int binMax = default(int), int binMin = default(int))
        {
            this.Max = max;
            this.Min = min;
            this.StdDev = stdDev;
            this.Avg = avg;
            this.Median = median;
            this.BinWidth = binWidth;
            this.Skew = skew;
            this.LaplaceScale = laplaceScale;
            this.MinMetric = minMetric;
            this.MaxMetric = maxMetric;
            this.BinMax = binMax;
            this.BinMin = binMin;
        }

        /// <summary>
        /// Max Value
        /// </summary>
        /// <value>Max Value</value>
        [DataMember(Name = "max", EmitDefaultValue = false)]
        public double Max { get; set; }

        /// <summary>
        /// Min Value
        /// </summary>
        /// <value>Min Value</value>
        [DataMember(Name = "min", EmitDefaultValue = false)]
        public double Min { get; set; }

        /// <summary>
        /// Standard Deviation
        /// </summary>
        /// <value>Standard Deviation</value>
        [DataMember(Name = "stdDev", EmitDefaultValue = false)]
        public double StdDev { get; set; }

        /// <summary>
        /// Average
        /// </summary>
        /// <value>Average</value>
        [DataMember(Name = "avg", EmitDefaultValue = false)]
        public double Avg { get; set; }

        /// <summary>
        /// Median
        /// </summary>
        /// <value>Median</value>
        [DataMember(Name = "median", EmitDefaultValue = false)]
        public double Median { get; set; }

        /// <summary>
        /// Bin Width
        /// </summary>
        /// <value>Bin Width</value>
        [DataMember(Name = "binWidth", EmitDefaultValue = false)]
        public double BinWidth { get; set; }

        /// <summary>
        /// Skew
        /// </summary>
        /// <value>Skew</value>
        [DataMember(Name = "skew", EmitDefaultValue = false)]
        public double Skew { get; set; }

        /// <summary>
        /// Laplace Scale
        /// </summary>
        /// <value>Laplace Scale</value>
        [DataMember(Name = "laplaceScale", EmitDefaultValue = false)]
        public double LaplaceScale { get; set; }

        /// <summary>
        /// Min Metric
        /// </summary>
        /// <value>Min Metric</value>
        [DataMember(Name = "minMetric", EmitDefaultValue = false)]
        public double MinMetric { get; set; }

        /// <summary>
        /// Max Metric
        /// </summary>
        /// <value>Max Metric</value>
        [DataMember(Name = "maxMetric", EmitDefaultValue = false)]
        public double MaxMetric { get; set; }

        /// <summary>
        /// Bin Max
        /// </summary>
        /// <value>Bin Max</value>
        [DataMember(Name = "binMax", EmitDefaultValue = false)]
        public int BinMax { get; set; }

        /// <summary>
        /// Bin Min
        /// </summary>
        /// <value>Bin Min</value>
        [DataMember(Name = "binMin", EmitDefaultValue = false)]
        public int BinMin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutlierMetrics {\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  StdDev: ").Append(StdDev).Append("\n");
            sb.Append("  Avg: ").Append(Avg).Append("\n");
            sb.Append("  Median: ").Append(Median).Append("\n");
            sb.Append("  BinWidth: ").Append(BinWidth).Append("\n");
            sb.Append("  Skew: ").Append(Skew).Append("\n");
            sb.Append("  LaplaceScale: ").Append(LaplaceScale).Append("\n");
            sb.Append("  MinMetric: ").Append(MinMetric).Append("\n");
            sb.Append("  MaxMetric: ").Append(MaxMetric).Append("\n");
            sb.Append("  BinMax: ").Append(BinMax).Append("\n");
            sb.Append("  BinMin: ").Append(BinMin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutlierMetrics);
        }

        /// <summary>
        /// Returns true if OutlierMetrics instances are equal
        /// </summary>
        /// <param name="input">Instance of OutlierMetrics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutlierMetrics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Max == input.Max ||
                    this.Max.Equals(input.Max)
                ) && 
                (
                    this.Min == input.Min ||
                    this.Min.Equals(input.Min)
                ) && 
                (
                    this.StdDev == input.StdDev ||
                    this.StdDev.Equals(input.StdDev)
                ) && 
                (
                    this.Avg == input.Avg ||
                    this.Avg.Equals(input.Avg)
                ) && 
                (
                    this.Median == input.Median ||
                    this.Median.Equals(input.Median)
                ) && 
                (
                    this.BinWidth == input.BinWidth ||
                    this.BinWidth.Equals(input.BinWidth)
                ) && 
                (
                    this.Skew == input.Skew ||
                    this.Skew.Equals(input.Skew)
                ) && 
                (
                    this.LaplaceScale == input.LaplaceScale ||
                    this.LaplaceScale.Equals(input.LaplaceScale)
                ) && 
                (
                    this.MinMetric == input.MinMetric ||
                    this.MinMetric.Equals(input.MinMetric)
                ) && 
                (
                    this.MaxMetric == input.MaxMetric ||
                    this.MaxMetric.Equals(input.MaxMetric)
                ) && 
                (
                    this.BinMax == input.BinMax ||
                    this.BinMax.Equals(input.BinMax)
                ) && 
                (
                    this.BinMin == input.BinMin ||
                    this.BinMin.Equals(input.BinMin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Max.GetHashCode();
                hashCode = (hashCode * 59) + this.Min.GetHashCode();
                hashCode = (hashCode * 59) + this.StdDev.GetHashCode();
                hashCode = (hashCode * 59) + this.Avg.GetHashCode();
                hashCode = (hashCode * 59) + this.Median.GetHashCode();
                hashCode = (hashCode * 59) + this.BinWidth.GetHashCode();
                hashCode = (hashCode * 59) + this.Skew.GetHashCode();
                hashCode = (hashCode * 59) + this.LaplaceScale.GetHashCode();
                hashCode = (hashCode * 59) + this.MinMetric.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxMetric.GetHashCode();
                hashCode = (hashCode * 59) + this.BinMax.GetHashCode();
                hashCode = (hashCode * 59) + this.BinMin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
