/*
 * Best Execution Analytics for Smarter Trading (BEAST) API
 *
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BestExecutionAnalyticsforSmarterTradingBEAST.Model
{
    /// <summary>
    /// Report record object
    /// </summary>
    [DataContract(Name = "ReportRecord")]
    public partial class ReportRecord : IEquatable<ReportRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportRecord" /> class.
        /// </summary>
        /// <param name="dateId">Date Id.</param>
        /// <param name="firstFillMidPerfBps">firstFillMidPerfBps.</param>
        /// <param name="tPlus5ClosePerfBps">tPlus5ClosePerfBps.</param>
        /// <param name="reversion60MinMidBps">reversion60MinMidBps.</param>
        /// <param name="pwp10PerfBps">pwp10PerfBps.</param>
        /// <param name="pwp01PerfBps">pwp01PerfBps.</param>
        /// <param name="tMinus1ClosePerfBps">tMinus1ClosePerfBps.</param>
        /// <param name="pwp05PerfBps">pwp05PerfBps.</param>
        /// <param name="pwp03PerfBps">pwp03PerfBps.</param>
        /// <param name="pwp02PerfBps">pwp02PerfBps.</param>
        /// <param name="volume">volume.</param>
        /// <param name="tPlus1ClosePerfBps">tPlus1ClosePerfBps.</param>
        /// <param name="pwp50PerfBps">pwp50PerfBps.</param>
        /// <param name="pwp20PerfBps">pwp20PerfBps.</param>
        /// <param name="refValue">refValue.</param>
        /// <param name="reversion10MinMidBps">reversion10MinMidBps.</param>
        /// <param name="reversion15MinMidBps">reversion15MinMidBps.</param>
        /// <param name="country">The two character ISO country code.</param>
        /// <param name="region">The two character ISO country code. EMEA is used for the European trading region.</param>
        /// <param name="openPerfBps">openPerfBps.</param>
        /// <param name="pmCode">Pm Code.</param>
        /// <param name="vwapFfLfPerfBps">vwapFfLfPerfBps.</param>
        /// <param name="tMinus3ClosePerfBps">tMinus3ClosePerfBps.</param>
        /// <param name="reversion5MinMidBps">reversion5MinMidBps.</param>
        /// <param name="tMinus5ClosePerfBps">tMinus5ClosePerfBps.</param>
        /// <param name="tPlus3ClosePerfBps">tPlus3ClosePerfBps.</param>
        /// <param name="lastFillMidPerfBps">lastFillMidPerfBps.</param>
        /// <param name="pwp100PerfBps">pwp100PerfBps.</param>
        /// <param name="closePerfBps">closePerfBps.</param>
        /// <param name="orders">Order count.</param>
        /// <param name="side">Side.</param>
        /// <param name="idm">idm.</param>
        public ReportRecord(string dateId = default(string), double firstFillMidPerfBps = default(double), double tPlus5ClosePerfBps = default(double), double reversion60MinMidBps = default(double), double pwp10PerfBps = default(double), double pwp01PerfBps = default(double), double tMinus1ClosePerfBps = default(double), double pwp05PerfBps = default(double), double pwp03PerfBps = default(double), double pwp02PerfBps = default(double), double volume = default(double), double tPlus1ClosePerfBps = default(double), double pwp50PerfBps = default(double), double pwp20PerfBps = default(double), double refValue = default(double), double reversion10MinMidBps = default(double), double reversion15MinMidBps = default(double), string country = default(string), string region = default(string), double openPerfBps = default(double), string pmCode = default(string), double vwapFfLfPerfBps = default(double), double tMinus3ClosePerfBps = default(double), double reversion5MinMidBps = default(double), double tMinus5ClosePerfBps = default(double), double tPlus3ClosePerfBps = default(double), double lastFillMidPerfBps = default(double), double pwp100PerfBps = default(double), double closePerfBps = default(double), int orders = default(int), string side = default(string), string idm = default(string))
        {
            this.DateId = dateId;
            this.FirstFillMidPerfBps = firstFillMidPerfBps;
            this.TPlus5ClosePerfBps = tPlus5ClosePerfBps;
            this.Reversion60MinMidBps = reversion60MinMidBps;
            this.Pwp10PerfBps = pwp10PerfBps;
            this.Pwp01PerfBps = pwp01PerfBps;
            this.TMinus1ClosePerfBps = tMinus1ClosePerfBps;
            this.Pwp05PerfBps = pwp05PerfBps;
            this.Pwp03PerfBps = pwp03PerfBps;
            this.Pwp02PerfBps = pwp02PerfBps;
            this.Volume = volume;
            this.TPlus1ClosePerfBps = tPlus1ClosePerfBps;
            this.Pwp50PerfBps = pwp50PerfBps;
            this.Pwp20PerfBps = pwp20PerfBps;
            this.RefValue = refValue;
            this.Reversion10MinMidBps = reversion10MinMidBps;
            this.Reversion15MinMidBps = reversion15MinMidBps;
            this.Country = country;
            this.Region = region;
            this.OpenPerfBps = openPerfBps;
            this.PmCode = pmCode;
            this.VwapFfLfPerfBps = vwapFfLfPerfBps;
            this.TMinus3ClosePerfBps = tMinus3ClosePerfBps;
            this.Reversion5MinMidBps = reversion5MinMidBps;
            this.TMinus5ClosePerfBps = tMinus5ClosePerfBps;
            this.TPlus3ClosePerfBps = tPlus3ClosePerfBps;
            this.LastFillMidPerfBps = lastFillMidPerfBps;
            this.Pwp100PerfBps = pwp100PerfBps;
            this.ClosePerfBps = closePerfBps;
            this.Orders = orders;
            this.Side = side;
            this.Idm = idm;
        }

        /// <summary>
        /// Date Id
        /// </summary>
        /// <value>Date Id</value>
        [DataMember(Name = "dateId", EmitDefaultValue = false)]
        public string DateId { get; set; }

        /// <summary>
        /// firstFillMidPerfBps
        /// </summary>
        /// <value>firstFillMidPerfBps</value>
        [DataMember(Name = "firstFillMidPerfBps", EmitDefaultValue = false)]
        public double FirstFillMidPerfBps { get; set; }

        /// <summary>
        /// tPlus5ClosePerfBps
        /// </summary>
        /// <value>tPlus5ClosePerfBps</value>
        [DataMember(Name = "tPlus5ClosePerfBps", EmitDefaultValue = false)]
        public double TPlus5ClosePerfBps { get; set; }

        /// <summary>
        /// reversion60MinMidBps
        /// </summary>
        /// <value>reversion60MinMidBps</value>
        [DataMember(Name = "reversion60MinMidBps", EmitDefaultValue = false)]
        public double Reversion60MinMidBps { get; set; }

        /// <summary>
        /// pwp10PerfBps
        /// </summary>
        /// <value>pwp10PerfBps</value>
        [DataMember(Name = "pwp10PerfBps", EmitDefaultValue = false)]
        public double Pwp10PerfBps { get; set; }

        /// <summary>
        /// pwp01PerfBps
        /// </summary>
        /// <value>pwp01PerfBps</value>
        [DataMember(Name = "pwp01PerfBps", EmitDefaultValue = false)]
        public double Pwp01PerfBps { get; set; }

        /// <summary>
        /// tMinus1ClosePerfBps
        /// </summary>
        /// <value>tMinus1ClosePerfBps</value>
        [DataMember(Name = "tMinus1ClosePerfBps", EmitDefaultValue = false)]
        public double TMinus1ClosePerfBps { get; set; }

        /// <summary>
        /// pwp05PerfBps
        /// </summary>
        /// <value>pwp05PerfBps</value>
        [DataMember(Name = "pwp05PerfBps", EmitDefaultValue = false)]
        public double Pwp05PerfBps { get; set; }

        /// <summary>
        /// pwp03PerfBps
        /// </summary>
        /// <value>pwp03PerfBps</value>
        [DataMember(Name = "pwp03PerfBps", EmitDefaultValue = false)]
        public double Pwp03PerfBps { get; set; }

        /// <summary>
        /// pwp02PerfBps
        /// </summary>
        /// <value>pwp02PerfBps</value>
        [DataMember(Name = "pwp02PerfBps", EmitDefaultValue = false)]
        public double Pwp02PerfBps { get; set; }

        /// <summary>
        /// volume
        /// </summary>
        /// <value>volume</value>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public double Volume { get; set; }

        /// <summary>
        /// tPlus1ClosePerfBps
        /// </summary>
        /// <value>tPlus1ClosePerfBps</value>
        [DataMember(Name = "tPlus1ClosePerfBps", EmitDefaultValue = false)]
        public double TPlus1ClosePerfBps { get; set; }

        /// <summary>
        /// pwp50PerfBps
        /// </summary>
        /// <value>pwp50PerfBps</value>
        [DataMember(Name = "pwp50PerfBps", EmitDefaultValue = false)]
        public double Pwp50PerfBps { get; set; }

        /// <summary>
        /// pwp20PerfBps
        /// </summary>
        /// <value>pwp20PerfBps</value>
        [DataMember(Name = "pwp20PerfBps", EmitDefaultValue = false)]
        public double Pwp20PerfBps { get; set; }

        /// <summary>
        /// refValue
        /// </summary>
        /// <value>refValue</value>
        [DataMember(Name = "refValue", EmitDefaultValue = false)]
        public double RefValue { get; set; }

        /// <summary>
        /// reversion10MinMidBps
        /// </summary>
        /// <value>reversion10MinMidBps</value>
        [DataMember(Name = "reversion10MinMidBps", EmitDefaultValue = false)]
        public double Reversion10MinMidBps { get; set; }

        /// <summary>
        /// reversion15MinMidBps
        /// </summary>
        /// <value>reversion15MinMidBps</value>
        [DataMember(Name = "reversion15MinMidBps", EmitDefaultValue = false)]
        public double Reversion15MinMidBps { get; set; }

        /// <summary>
        /// The two character ISO country code
        /// </summary>
        /// <value>The two character ISO country code</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// The two character ISO country code. EMEA is used for the European trading region
        /// </summary>
        /// <value>The two character ISO country code. EMEA is used for the European trading region</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// openPerfBps
        /// </summary>
        /// <value>openPerfBps</value>
        [DataMember(Name = "openPerfBps", EmitDefaultValue = false)]
        public double OpenPerfBps { get; set; }

        /// <summary>
        /// Pm Code
        /// </summary>
        /// <value>Pm Code</value>
        [DataMember(Name = "pmCode", EmitDefaultValue = false)]
        public string PmCode { get; set; }

        /// <summary>
        /// vwapFfLfPerfBps
        /// </summary>
        /// <value>vwapFfLfPerfBps</value>
        [DataMember(Name = "vwapFfLfPerfBps", EmitDefaultValue = false)]
        public double VwapFfLfPerfBps { get; set; }

        /// <summary>
        /// tMinus3ClosePerfBps
        /// </summary>
        /// <value>tMinus3ClosePerfBps</value>
        [DataMember(Name = "tMinus3ClosePerfBps", EmitDefaultValue = false)]
        public double TMinus3ClosePerfBps { get; set; }

        /// <summary>
        /// reversion5MinMidBps
        /// </summary>
        /// <value>reversion5MinMidBps</value>
        [DataMember(Name = "reversion5MinMidBps", EmitDefaultValue = false)]
        public double Reversion5MinMidBps { get; set; }

        /// <summary>
        /// tMinus5ClosePerfBps
        /// </summary>
        /// <value>tMinus5ClosePerfBps</value>
        [DataMember(Name = "tMinus5ClosePerfBps", EmitDefaultValue = false)]
        public double TMinus5ClosePerfBps { get; set; }

        /// <summary>
        /// tPlus3ClosePerfBps
        /// </summary>
        /// <value>tPlus3ClosePerfBps</value>
        [DataMember(Name = "tPlus3ClosePerfBps", EmitDefaultValue = false)]
        public double TPlus3ClosePerfBps { get; set; }

        /// <summary>
        /// lastFillMidPerfBps
        /// </summary>
        /// <value>lastFillMidPerfBps</value>
        [DataMember(Name = "lastFillMidPerfBps", EmitDefaultValue = false)]
        public double LastFillMidPerfBps { get; set; }

        /// <summary>
        /// pwp100PerfBps
        /// </summary>
        /// <value>pwp100PerfBps</value>
        [DataMember(Name = "pwp100PerfBps", EmitDefaultValue = false)]
        public double Pwp100PerfBps { get; set; }

        /// <summary>
        /// closePerfBps
        /// </summary>
        /// <value>closePerfBps</value>
        [DataMember(Name = "closePerfBps", EmitDefaultValue = false)]
        public double ClosePerfBps { get; set; }

        /// <summary>
        /// Order count
        /// </summary>
        /// <value>Order count</value>
        [DataMember(Name = "orders", EmitDefaultValue = false)]
        public int Orders { get; set; }

        /// <summary>
        /// Side
        /// </summary>
        /// <value>Side</value>
        [DataMember(Name = "side", EmitDefaultValue = false)]
        public string Side { get; set; }

        /// <summary>
        /// idm
        /// </summary>
        /// <value>idm</value>
        [DataMember(Name = "idm", EmitDefaultValue = false)]
        public string Idm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportRecord {\n");
            sb.Append("  DateId: ").Append(DateId).Append("\n");
            sb.Append("  FirstFillMidPerfBps: ").Append(FirstFillMidPerfBps).Append("\n");
            sb.Append("  TPlus5ClosePerfBps: ").Append(TPlus5ClosePerfBps).Append("\n");
            sb.Append("  Reversion60MinMidBps: ").Append(Reversion60MinMidBps).Append("\n");
            sb.Append("  Pwp10PerfBps: ").Append(Pwp10PerfBps).Append("\n");
            sb.Append("  Pwp01PerfBps: ").Append(Pwp01PerfBps).Append("\n");
            sb.Append("  TMinus1ClosePerfBps: ").Append(TMinus1ClosePerfBps).Append("\n");
            sb.Append("  Pwp05PerfBps: ").Append(Pwp05PerfBps).Append("\n");
            sb.Append("  Pwp03PerfBps: ").Append(Pwp03PerfBps).Append("\n");
            sb.Append("  Pwp02PerfBps: ").Append(Pwp02PerfBps).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  TPlus1ClosePerfBps: ").Append(TPlus1ClosePerfBps).Append("\n");
            sb.Append("  Pwp50PerfBps: ").Append(Pwp50PerfBps).Append("\n");
            sb.Append("  Pwp20PerfBps: ").Append(Pwp20PerfBps).Append("\n");
            sb.Append("  RefValue: ").Append(RefValue).Append("\n");
            sb.Append("  Reversion10MinMidBps: ").Append(Reversion10MinMidBps).Append("\n");
            sb.Append("  Reversion15MinMidBps: ").Append(Reversion15MinMidBps).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  OpenPerfBps: ").Append(OpenPerfBps).Append("\n");
            sb.Append("  PmCode: ").Append(PmCode).Append("\n");
            sb.Append("  VwapFfLfPerfBps: ").Append(VwapFfLfPerfBps).Append("\n");
            sb.Append("  TMinus3ClosePerfBps: ").Append(TMinus3ClosePerfBps).Append("\n");
            sb.Append("  Reversion5MinMidBps: ").Append(Reversion5MinMidBps).Append("\n");
            sb.Append("  TMinus5ClosePerfBps: ").Append(TMinus5ClosePerfBps).Append("\n");
            sb.Append("  TPlus3ClosePerfBps: ").Append(TPlus3ClosePerfBps).Append("\n");
            sb.Append("  LastFillMidPerfBps: ").Append(LastFillMidPerfBps).Append("\n");
            sb.Append("  Pwp100PerfBps: ").Append(Pwp100PerfBps).Append("\n");
            sb.Append("  ClosePerfBps: ").Append(ClosePerfBps).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Idm: ").Append(Idm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportRecord);
        }

        /// <summary>
        /// Returns true if ReportRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateId == input.DateId ||
                    (this.DateId != null &&
                    this.DateId.Equals(input.DateId))
                ) && 
                (
                    this.FirstFillMidPerfBps == input.FirstFillMidPerfBps ||
                    this.FirstFillMidPerfBps.Equals(input.FirstFillMidPerfBps)
                ) && 
                (
                    this.TPlus5ClosePerfBps == input.TPlus5ClosePerfBps ||
                    this.TPlus5ClosePerfBps.Equals(input.TPlus5ClosePerfBps)
                ) && 
                (
                    this.Reversion60MinMidBps == input.Reversion60MinMidBps ||
                    this.Reversion60MinMidBps.Equals(input.Reversion60MinMidBps)
                ) && 
                (
                    this.Pwp10PerfBps == input.Pwp10PerfBps ||
                    this.Pwp10PerfBps.Equals(input.Pwp10PerfBps)
                ) && 
                (
                    this.Pwp01PerfBps == input.Pwp01PerfBps ||
                    this.Pwp01PerfBps.Equals(input.Pwp01PerfBps)
                ) && 
                (
                    this.TMinus1ClosePerfBps == input.TMinus1ClosePerfBps ||
                    this.TMinus1ClosePerfBps.Equals(input.TMinus1ClosePerfBps)
                ) && 
                (
                    this.Pwp05PerfBps == input.Pwp05PerfBps ||
                    this.Pwp05PerfBps.Equals(input.Pwp05PerfBps)
                ) && 
                (
                    this.Pwp03PerfBps == input.Pwp03PerfBps ||
                    this.Pwp03PerfBps.Equals(input.Pwp03PerfBps)
                ) && 
                (
                    this.Pwp02PerfBps == input.Pwp02PerfBps ||
                    this.Pwp02PerfBps.Equals(input.Pwp02PerfBps)
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                ) && 
                (
                    this.TPlus1ClosePerfBps == input.TPlus1ClosePerfBps ||
                    this.TPlus1ClosePerfBps.Equals(input.TPlus1ClosePerfBps)
                ) && 
                (
                    this.Pwp50PerfBps == input.Pwp50PerfBps ||
                    this.Pwp50PerfBps.Equals(input.Pwp50PerfBps)
                ) && 
                (
                    this.Pwp20PerfBps == input.Pwp20PerfBps ||
                    this.Pwp20PerfBps.Equals(input.Pwp20PerfBps)
                ) && 
                (
                    this.RefValue == input.RefValue ||
                    this.RefValue.Equals(input.RefValue)
                ) && 
                (
                    this.Reversion10MinMidBps == input.Reversion10MinMidBps ||
                    this.Reversion10MinMidBps.Equals(input.Reversion10MinMidBps)
                ) && 
                (
                    this.Reversion15MinMidBps == input.Reversion15MinMidBps ||
                    this.Reversion15MinMidBps.Equals(input.Reversion15MinMidBps)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.OpenPerfBps == input.OpenPerfBps ||
                    this.OpenPerfBps.Equals(input.OpenPerfBps)
                ) && 
                (
                    this.PmCode == input.PmCode ||
                    (this.PmCode != null &&
                    this.PmCode.Equals(input.PmCode))
                ) && 
                (
                    this.VwapFfLfPerfBps == input.VwapFfLfPerfBps ||
                    this.VwapFfLfPerfBps.Equals(input.VwapFfLfPerfBps)
                ) && 
                (
                    this.TMinus3ClosePerfBps == input.TMinus3ClosePerfBps ||
                    this.TMinus3ClosePerfBps.Equals(input.TMinus3ClosePerfBps)
                ) && 
                (
                    this.Reversion5MinMidBps == input.Reversion5MinMidBps ||
                    this.Reversion5MinMidBps.Equals(input.Reversion5MinMidBps)
                ) && 
                (
                    this.TMinus5ClosePerfBps == input.TMinus5ClosePerfBps ||
                    this.TMinus5ClosePerfBps.Equals(input.TMinus5ClosePerfBps)
                ) && 
                (
                    this.TPlus3ClosePerfBps == input.TPlus3ClosePerfBps ||
                    this.TPlus3ClosePerfBps.Equals(input.TPlus3ClosePerfBps)
                ) && 
                (
                    this.LastFillMidPerfBps == input.LastFillMidPerfBps ||
                    this.LastFillMidPerfBps.Equals(input.LastFillMidPerfBps)
                ) && 
                (
                    this.Pwp100PerfBps == input.Pwp100PerfBps ||
                    this.Pwp100PerfBps.Equals(input.Pwp100PerfBps)
                ) && 
                (
                    this.ClosePerfBps == input.ClosePerfBps ||
                    this.ClosePerfBps.Equals(input.ClosePerfBps)
                ) && 
                (
                    this.Orders == input.Orders ||
                    this.Orders.Equals(input.Orders)
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Idm == input.Idm ||
                    (this.Idm != null &&
                    this.Idm.Equals(input.Idm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateId != null)
                {
                    hashCode = (hashCode * 59) + this.DateId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FirstFillMidPerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.TPlus5ClosePerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion60MinMidBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp10PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp01PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.TMinus1ClosePerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp05PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp03PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp02PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Volume.GetHashCode();
                hashCode = (hashCode * 59) + this.TPlus1ClosePerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp50PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp20PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.RefValue.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion10MinMidBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion15MinMidBps.GetHashCode();
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OpenPerfBps.GetHashCode();
                if (this.PmCode != null)
                {
                    hashCode = (hashCode * 59) + this.PmCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VwapFfLfPerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.TMinus3ClosePerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Reversion5MinMidBps.GetHashCode();
                hashCode = (hashCode * 59) + this.TMinus5ClosePerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.TPlus3ClosePerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.LastFillMidPerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Pwp100PerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.ClosePerfBps.GetHashCode();
                hashCode = (hashCode * 59) + this.Orders.GetHashCode();
                if (this.Side != null)
                {
                    hashCode = (hashCode * 59) + this.Side.GetHashCode();
                }
                if (this.Idm != null)
                {
                    hashCode = (hashCode * 59) + this.Idm.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
