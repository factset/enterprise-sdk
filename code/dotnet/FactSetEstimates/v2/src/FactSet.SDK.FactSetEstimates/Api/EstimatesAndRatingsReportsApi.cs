/*
 * FactSet Estimates
 *
 * With global coverage since 1999, the FactSet Estimates API provides you with comprehensive estimates and statistics on a wide variety of financial statement items as well as industry-specific metrics. The universe is comprised of over 19,000 active companies across 90+ countries with the following types of data included:   - **Consensus** - **Detail** - **Ratings** - **Surprise** - **Segments** - **Actuals** - **New Estimates and Ratings Reports Endpoints**  For clients seeking  curated and relevant financial data, the FactSet Estimates API now includes Estimates and Ratings Reports endpoints. These powerful endpoints are designed for easy integration and consumption, delivering a wide array of financial metrics, estimates, and critical statistics in a highly accessible format suitable for both mobile and web applications.   Whether you are an analyst, investor, or financial professional, the Estimates and Ratings Reports endpoints offer detailed and actionable financial insights that can support thorough analyses and strategic decision-making processes.   The Estimates and Ratings Reports endpoints are especially valuable for B2B2C  applications, empowering financial services firms, investment companies, and corporate finance teams to:   - **Elevate Client Engagement:** Enrich user experiences in client-facing applications with comprehensive and up-to-date financial metrics.  - **Build Custom Reporting Tools:** Create tailored dashboards and analytics tools that provide deep insights and foster better financial understanding.  By adopting the FactSet Estimates API with its enriched Estimates and Ratings Reports endpoints, businesses can streamline their financial data integration process, improve operational efficiency, and deliver superior financial insights to their clients and end-users.     <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>  **Download API Specification**        To programmatically download the FactSet Estimates API Specification file in .yaml format, utilize the link below. You must be authorized for this API to extract the specification. This specification can then be used for Codegen to create your own SDKs. You can also access it by selecting the \"Download Spec\" button beside the version information.      [https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml](https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml) 
 *
 * The version of the OpenAPI document: 2.6.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetEstimates.Client;
using FactSet.SDK.FactSetEstimates.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetEstimates.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEstimatesAndRatingsReportsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves the historical monthly view of analyst ratings for a given identifier.
        /// </summary>
        /// <remarks>
        /// Returns historical monthly view of analyst ratings for given identifier upto a period of 12 months. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent IDs. </param>
        /// <returns>AnalystRatingResponse</returns>
        AnalystRatingResponse GetAnalystRatings(string id);

        /// <summary>
        /// Retrieves the historical monthly view of analyst ratings for a given identifier.
        /// </summary>
        /// <remarks>
        /// Returns historical monthly view of analyst ratings for given identifier upto a period of 12 months. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent IDs. </param>
        /// <returns>ApiResponse of AnalystRatingResponse</returns>
        ApiResponse<AnalystRatingResponse> GetAnalystRatingsWithHttpInfo(string id);
        /// <summary>
        /// Returns a list of valid estimate types.
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of valid estimate types that can be used in the /company-reports/forecast and /company-reports/surprise-history end points. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EstimateTypesResponse</returns>
        EstimateTypesResponse GetEstimateTypes();

        /// <summary>
        /// Returns a list of valid estimate types.
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of valid estimate types that can be used in the /company-reports/forecast and /company-reports/surprise-history end points. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EstimateTypesResponse</returns>
        ApiResponse<EstimateTypesResponse> GetEstimateTypesWithHttpInfo();
        /// <summary>
        /// Returns forecasted estimates.
        /// </summary>
        /// <remarks>
        /// This endpoint returns up to 4 years of forecasted consensus estimates made by analysts for various financial metrics such as EPS, Sales, and more.  **Note :**   Due to variations in methodology, with the workstation using intra-day prices and our API using the previous day&#39;s closing prices, there may be some minor differences in the values of FactSet Estimates Valuation Items. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <returns>EstimateResponse</returns>
        EstimateResponse GetEstimates(string id, string estimateType, string periodicity = default(string));

        /// <summary>
        /// Returns forecasted estimates.
        /// </summary>
        /// <remarks>
        /// This endpoint returns up to 4 years of forecasted consensus estimates made by analysts for various financial metrics such as EPS, Sales, and more.  **Note :**   Due to variations in methodology, with the workstation using intra-day prices and our API using the previous day&#39;s closing prices, there may be some minor differences in the values of FactSet Estimates Valuation Items. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <returns>ApiResponse of EstimateResponse</returns>
        ApiResponse<EstimateResponse> GetEstimatesWithHttpInfo(string id, string estimateType, string periodicity = default(string));
        /// <summary>
        /// Surprise History
        /// </summary>
        /// <remarks>
        /// Returns surprise history for the given security
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. (optional, default to 50)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (optional, default to 0)</param>
        /// <returns>SurpriseHistoryResponse</returns>
        SurpriseHistoryResponse GetSurpriseHistory(string id, string estimateType, string periodicity = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Surprise History
        /// </summary>
        /// <remarks>
        /// Returns surprise history for the given security
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. (optional, default to 50)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (optional, default to 0)</param>
        /// <returns>ApiResponse of SurpriseHistoryResponse</returns>
        ApiResponse<SurpriseHistoryResponse> GetSurpriseHistoryWithHttpInfo(string id, string estimateType, string periodicity = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEstimatesAndRatingsReportsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves the historical monthly view of analyst ratings for a given identifier.
        /// </summary>
        /// <remarks>
        /// Returns historical monthly view of analyst ratings for given identifier upto a period of 12 months. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent IDs. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalystRatingResponse</returns>
        System.Threading.Tasks.Task<AnalystRatingResponse> GetAnalystRatingsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the historical monthly view of analyst ratings for a given identifier.
        /// </summary>
        /// <remarks>
        /// Returns historical monthly view of analyst ratings for given identifier upto a period of 12 months. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent IDs. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalystRatingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalystRatingResponse>> GetAnalystRatingsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of valid estimate types.
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of valid estimate types that can be used in the /company-reports/forecast and /company-reports/surprise-history end points. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EstimateTypesResponse</returns>
        System.Threading.Tasks.Task<EstimateTypesResponse> GetEstimateTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of valid estimate types.
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of valid estimate types that can be used in the /company-reports/forecast and /company-reports/surprise-history end points. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EstimateTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EstimateTypesResponse>> GetEstimateTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns forecasted estimates.
        /// </summary>
        /// <remarks>
        /// This endpoint returns up to 4 years of forecasted consensus estimates made by analysts for various financial metrics such as EPS, Sales, and more.  **Note :**   Due to variations in methodology, with the workstation using intra-day prices and our API using the previous day&#39;s closing prices, there may be some minor differences in the values of FactSet Estimates Valuation Items. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EstimateResponse</returns>
        System.Threading.Tasks.Task<EstimateResponse> GetEstimatesAsync(string id, string estimateType, string periodicity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns forecasted estimates.
        /// </summary>
        /// <remarks>
        /// This endpoint returns up to 4 years of forecasted consensus estimates made by analysts for various financial metrics such as EPS, Sales, and more.  **Note :**   Due to variations in methodology, with the workstation using intra-day prices and our API using the previous day&#39;s closing prices, there may be some minor differences in the values of FactSet Estimates Valuation Items. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EstimateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EstimateResponse>> GetEstimatesWithHttpInfoAsync(string id, string estimateType, string periodicity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Surprise History
        /// </summary>
        /// <remarks>
        /// Returns surprise history for the given security
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. (optional, default to 50)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurpriseHistoryResponse</returns>
        System.Threading.Tasks.Task<SurpriseHistoryResponse> GetSurpriseHistoryAsync(string id, string estimateType, string periodicity = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Surprise History
        /// </summary>
        /// <remarks>
        /// Returns surprise history for the given security
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. (optional, default to 50)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurpriseHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurpriseHistoryResponse>> GetSurpriseHistoryWithHttpInfoAsync(string id, string estimateType, string periodicity = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEstimatesAndRatingsReportsApi : IEstimatesAndRatingsReportsApiSync, IEstimatesAndRatingsReportsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EstimatesAndRatingsReportsApi : IEstimatesAndRatingsReportsApi
    {
        private FactSet.SDK.FactSetEstimates.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetAnalystRatingsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(AnalystRatingResponse) },
            { (HttpStatusCode)400, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)401, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)403, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)404, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)415, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)500, typeof(CompanyReportsErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetEstimateTypesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EstimateTypesResponse) },
            { (HttpStatusCode)400, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)401, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)403, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)404, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)415, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)500, typeof(CompanyReportsErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetEstimatesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EstimateResponse) },
            { (HttpStatusCode)400, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)401, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)403, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)404, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)415, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)500, typeof(CompanyReportsErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSurpriseHistoryResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SurpriseHistoryResponse) },
            { (HttpStatusCode)400, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)401, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)403, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)404, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)415, typeof(CompanyReportsErrorResponse) },
            { (HttpStatusCode)500, typeof(CompanyReportsErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="EstimatesAndRatingsReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EstimatesAndRatingsReportsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EstimatesAndRatingsReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EstimatesAndRatingsReportsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetEstimates.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetEstimates.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetEstimates.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetEstimates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetEstimates.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetEstimates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EstimatesAndRatingsReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EstimatesAndRatingsReportsApi(FactSet.SDK.FactSetEstimates.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetEstimates.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetEstimates.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetEstimates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetEstimates.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetEstimates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EstimatesAndRatingsReportsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EstimatesAndRatingsReportsApi(FactSet.SDK.FactSetEstimates.Client.ISynchronousClient client, FactSet.SDK.FactSetEstimates.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetEstimates.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetEstimates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetEstimates.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetEstimates.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetEstimates.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetEstimates.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves the historical monthly view of analyst ratings for a given identifier. Returns historical monthly view of analyst ratings for given identifier upto a period of 12 months. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent IDs. </param>
        /// <returns>AnalystRatingResponse</returns>
        public AnalystRatingResponse GetAnalystRatings(string id)
        {
            var localVarResponse = GetAnalystRatingsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the historical monthly view of analyst ratings for a given identifier. Returns historical monthly view of analyst ratings for given identifier upto a period of 12 months. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent IDs. </param>
        /// <returns>ApiResponse of AnalystRatingResponse</returns>
        public ApiResponse<AnalystRatingResponse> GetAnalystRatingsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetEstimates.Client.ApiException(400, "Missing required parameter 'id' when calling EstimatesAndRatingsReportsApi->GetAnalystRatings");
            }

            FactSet.SDK.FactSetEstimates.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEstimates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEstimates.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAnalystRatingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            AnalystRatingResponse>("/factset-estimates/v2/company-reports/analyst-ratings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalystRatings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the historical monthly view of analyst ratings for a given identifier. Returns historical monthly view of analyst ratings for given identifier upto a period of 12 months. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent IDs. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalystRatingResponse</returns>
        public async System.Threading.Tasks.Task<AnalystRatingResponse>GetAnalystRatingsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAnalystRatingsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the historical monthly view of analyst ratings for a given identifier. Returns historical monthly view of analyst ratings for given identifier upto a period of 12 months. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent IDs. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalystRatingResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<AnalystRatingResponse>> GetAnalystRatingsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetEstimates.Client.ApiException(400, "Missing required parameter 'id' when calling EstimatesAndRatingsReportsApi->GetAnalystRatings");
            }


            FactSet.SDK.FactSetEstimates.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEstimates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEstimates.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAnalystRatingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnalystRatingResponse>("/factset-estimates/v2/company-reports/analyst-ratings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalystRatings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of valid estimate types. This endpoint retrieves a list of valid estimate types that can be used in the /company-reports/forecast and /company-reports/surprise-history end points. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EstimateTypesResponse</returns>
        public EstimateTypesResponse GetEstimateTypes()
        {
            var localVarResponse = GetEstimateTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of valid estimate types. This endpoint retrieves a list of valid estimate types that can be used in the /company-reports/forecast and /company-reports/surprise-history end points. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EstimateTypesResponse</returns>
        public ApiResponse<EstimateTypesResponse> GetEstimateTypesWithHttpInfo()
        {
            FactSet.SDK.FactSetEstimates.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEstimates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEstimates.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEstimateTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EstimateTypesResponse>("/factset-estimates/v2/company-reports/estimate-types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEstimateTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of valid estimate types. This endpoint retrieves a list of valid estimate types that can be used in the /company-reports/forecast and /company-reports/surprise-history end points. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EstimateTypesResponse</returns>
        public async System.Threading.Tasks.Task<EstimateTypesResponse>GetEstimateTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEstimateTypesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of valid estimate types. This endpoint retrieves a list of valid estimate types that can be used in the /company-reports/forecast and /company-reports/surprise-history end points. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EstimateTypesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EstimateTypesResponse>> GetEstimateTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetEstimates.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEstimates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEstimates.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEstimateTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EstimateTypesResponse>("/factset-estimates/v2/company-reports/estimate-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEstimateTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns forecasted estimates. This endpoint returns up to 4 years of forecasted consensus estimates made by analysts for various financial metrics such as EPS, Sales, and more.  **Note :**   Due to variations in methodology, with the workstation using intra-day prices and our API using the previous day&#39;s closing prices, there may be some minor differences in the values of FactSet Estimates Valuation Items. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <returns>EstimateResponse</returns>
        public EstimateResponse GetEstimates(string id, string estimateType, string periodicity = default(string))
        {
            var localVarResponse = GetEstimatesWithHttpInfo(id, estimateType, periodicity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns forecasted estimates. This endpoint returns up to 4 years of forecasted consensus estimates made by analysts for various financial metrics such as EPS, Sales, and more.  **Note :**   Due to variations in methodology, with the workstation using intra-day prices and our API using the previous day&#39;s closing prices, there may be some minor differences in the values of FactSet Estimates Valuation Items. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <returns>ApiResponse of EstimateResponse</returns>
        public ApiResponse<EstimateResponse> GetEstimatesWithHttpInfo(string id, string estimateType, string periodicity = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetEstimates.Client.ApiException(400, "Missing required parameter 'id' when calling EstimatesAndRatingsReportsApi->GetEstimates");
            }

            // verify the required parameter 'estimateType' is set
            if (estimateType == null)
            {
                throw new FactSet.SDK.FactSetEstimates.Client.ApiException(400, "Missing required parameter 'estimateType' when calling EstimatesAndRatingsReportsApi->GetEstimates");
            }

            FactSet.SDK.FactSetEstimates.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEstimates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "estimateType", estimateType));
            if (periodicity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "periodicity", periodicity));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEstimates.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEstimatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EstimateResponse>("/factset-estimates/v2/company-reports/forecast", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEstimates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns forecasted estimates. This endpoint returns up to 4 years of forecasted consensus estimates made by analysts for various financial metrics such as EPS, Sales, and more.  **Note :**   Due to variations in methodology, with the workstation using intra-day prices and our API using the previous day&#39;s closing prices, there may be some minor differences in the values of FactSet Estimates Valuation Items. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EstimateResponse</returns>
        public async System.Threading.Tasks.Task<EstimateResponse>GetEstimatesAsync(string id, string estimateType, string periodicity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEstimatesWithHttpInfoAsync(id, estimateType, periodicity, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns forecasted estimates. This endpoint returns up to 4 years of forecasted consensus estimates made by analysts for various financial metrics such as EPS, Sales, and more.  **Note :**   Due to variations in methodology, with the workstation using intra-day prices and our API using the previous day&#39;s closing prices, there may be some minor differences in the values of FactSet Estimates Valuation Items. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EstimateResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EstimateResponse>> GetEstimatesWithHttpInfoAsync(string id, string estimateType, string periodicity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetEstimates.Client.ApiException(400, "Missing required parameter 'id' when calling EstimatesAndRatingsReportsApi->GetEstimates");
            }

            // verify the required parameter 'estimateType' is set
            if (estimateType == null)
            {
                throw new FactSet.SDK.FactSetEstimates.Client.ApiException(400, "Missing required parameter 'estimateType' when calling EstimatesAndRatingsReportsApi->GetEstimates");
            }


            FactSet.SDK.FactSetEstimates.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEstimates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "estimateType", estimateType));
            if (periodicity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "periodicity", periodicity));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEstimates.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEstimatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EstimateResponse>("/factset-estimates/v2/company-reports/forecast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEstimates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Surprise History Returns surprise history for the given security
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. (optional, default to 50)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (optional, default to 0)</param>
        /// <returns>SurpriseHistoryResponse</returns>
        public SurpriseHistoryResponse GetSurpriseHistory(string id, string estimateType, string periodicity = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetSurpriseHistoryWithHttpInfo(id, estimateType, periodicity, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Surprise History Returns surprise history for the given security
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. (optional, default to 50)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (optional, default to 0)</param>
        /// <returns>ApiResponse of SurpriseHistoryResponse</returns>
        public ApiResponse<SurpriseHistoryResponse> GetSurpriseHistoryWithHttpInfo(string id, string estimateType, string periodicity = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetEstimates.Client.ApiException(400, "Missing required parameter 'id' when calling EstimatesAndRatingsReportsApi->GetSurpriseHistory");
            }

            // verify the required parameter 'estimateType' is set
            if (estimateType == null)
            {
                throw new FactSet.SDK.FactSetEstimates.Client.ApiException(400, "Missing required parameter 'estimateType' when calling EstimatesAndRatingsReportsApi->GetSurpriseHistory");
            }

            FactSet.SDK.FactSetEstimates.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEstimates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "estimateType", estimateType));
            if (periodicity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "periodicity", periodicity));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEstimates.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSurpriseHistoryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SurpriseHistoryResponse>("/factset-estimates/v2/company-reports/surprise-history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSurpriseHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Surprise History Returns surprise history for the given security
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. (optional, default to 50)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurpriseHistoryResponse</returns>
        public async System.Threading.Tasks.Task<SurpriseHistoryResponse>GetSurpriseHistoryAsync(string id, string estimateType, string periodicity = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSurpriseHistoryWithHttpInfoAsync(id, estimateType, periodicity, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Surprise History Returns surprise history for the given security
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetEstimates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.</param>
        /// <param name="estimateType">The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.</param>
        /// <param name="periodicity">The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (optional, default to ANN)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. (optional, default to 50)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurpriseHistoryResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SurpriseHistoryResponse>> GetSurpriseHistoryWithHttpInfoAsync(string id, string estimateType, string periodicity = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetEstimates.Client.ApiException(400, "Missing required parameter 'id' when calling EstimatesAndRatingsReportsApi->GetSurpriseHistory");
            }

            // verify the required parameter 'estimateType' is set
            if (estimateType == null)
            {
                throw new FactSet.SDK.FactSetEstimates.Client.ApiException(400, "Missing required parameter 'estimateType' when calling EstimatesAndRatingsReportsApi->GetSurpriseHistory");
            }


            FactSet.SDK.FactSetEstimates.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetEstimates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetEstimates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "estimateType", estimateType));
            if (periodicity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "periodicity", periodicity));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetEstimates.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetEstimates.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSurpriseHistoryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SurpriseHistoryResponse>("/factset-estimates/v2/company-reports/surprise-history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSurpriseHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
