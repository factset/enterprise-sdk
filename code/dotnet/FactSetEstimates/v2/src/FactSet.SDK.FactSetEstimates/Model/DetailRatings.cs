/*
 * FactSet Estimates
 *
 * With global coverage since 1999, the FactSet Estimates API provides you with comprehensive estimates and statistics on a wide variety of financial statement items as well as industry-specific metrics. The universe is comprised of over 19,000 active companies across 90+ countries with the following types of data included:   - **Consensus** - **Detail** - **Ratings** - **Surprise** - **Segments** - **Actuals** - **New Estimates and Ratings Reports Endpoints**  For clients seeking  curated and relevant financial data, the FactSet Estimates API now includes Estimates and Ratings Reports endpoints. These powerful endpoints are designed for easy integration and consumption, delivering a wide array of financial metrics, estimates, and critical statistics in a highly accessible format suitable for both mobile and web applications.   Whether you are an analyst, investor, or financial professional, the Estimates and Ratings Reports endpoints offer detailed and actionable financial insights that can support thorough analyses and strategic decision-making processes.   The Estimates and Ratings Reports endpoints are especially valuable for B2B2C  applications, empowering financial services firms, investment companies, and corporate finance teams to:   - **Elevate Client Engagement:** Enrich user experiences in client-facing applications with comprehensive and up-to-date financial metrics.  - **Build Custom Reporting Tools:** Create tailored dashboards and analytics tools that provide deep insights and foster better financial understanding.  By adopting the FactSet Estimates API with its enriched Estimates and Ratings Reports endpoints, businesses can streamline their financial data integration process, improve operational efficiency, and deliver superior financial insights to their clients and end-users.     <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>  **Download API Specification**        To programmatically download the FactSet Estimates API Specification file in .yaml format, utilize the link below. You must be authorized for this API to extract the specification. This specification can then be used for Codegen to create your own SDKs. You can also access it by selecting the \"Download Spec\" button beside the version information.      [https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml](https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml) 
 *
 * The version of the OpenAPI document: 2.6.2
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetEstimates.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetEstimates.Model
{
    /// <summary>
    /// DetailRatings
    /// </summary>
    [DataContract(Name = "detailRatings")]
    public partial class DetailRatings : IEquatable<DetailRatings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailRatings" /> class.
        /// </summary>
        /// <param name="fsymId">fsymId.</param>
        /// <param name="estimateDate">Date of estimate expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598).</param>
        /// <param name="analystId">The FactSet Entity Identifier for the analyst making the estimate..</param>
        /// <param name="analystName">The name of the analyst making the estimate..</param>
        /// <param name="brokerId">The FactSet Entity Identifier for the broker making the estimate..</param>
        /// <param name="brokerName">The name of the broker making the estimate..</param>
        /// <param name="ratingsNoteText">A textual representation of the analysts rating. Broker recommendations are divided into five main broad categories- **Buy, overWeight, Hold, underWeight, and Sell**.&lt;p&gt;Additional recommendations may be displayed for the below reasons -  * Without- A rating \&quot;Without\&quot; is displayed when a broker provides estimates but does not provide a rating. * Dropping- When a broker stops covering an equity, the recommendation will show \&quot;Dropping.\&quot; * Not Available- A broker may be \&quot;Not Available\&quot; due to outstanding circumstances with that particular security. Ratings are not displayed until a new rating is provided. * Most/Least- \&quot;Most\&quot; or \&quot;Least\&quot; favorable rating is displayed for top or bottom rating available for a particular security. .</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="inputDateTime">Date and time when the data is available at the source..</param>
        /// <param name="lastModifiedDate">The date at which a broker provided an estimate that is a revision..</param>
        public DetailRatings(string fsymId = default(string), DateTime? estimateDate = default(DateTime?), string analystId = default(string), string analystName = default(string), string brokerId = default(string), string brokerName = default(string), string ratingsNoteText = default(string), string requestId = default(string), string inputDateTime = default(string), DateTime? lastModifiedDate = default(DateTime?))
        {
            this.FsymId = fsymId;
            this.EstimateDate = estimateDate;
            this.AnalystId = analystId;
            this.AnalystName = analystName;
            this.BrokerId = brokerId;
            this.BrokerName = brokerName;
            this.RatingsNoteText = ratingsNoteText;
            this.RequestId = requestId;
            this.InputDateTime = inputDateTime;
            this.LastModifiedDate = lastModifiedDate;
        }

        /// <summary>
        /// Gets or Sets FsymId
        /// </summary>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Date of estimate expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)
        /// </summary>
        /// <value>Date of estimate expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)</value>
        [DataMember(Name = "estimateDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? EstimateDate { get; set; }

        /// <summary>
        /// The FactSet Entity Identifier for the analyst making the estimate.
        /// </summary>
        /// <value>The FactSet Entity Identifier for the analyst making the estimate.</value>
        [DataMember(Name = "analystId", EmitDefaultValue = true)]
        public string AnalystId { get; set; }

        /// <summary>
        /// The name of the analyst making the estimate.
        /// </summary>
        /// <value>The name of the analyst making the estimate.</value>
        [DataMember(Name = "analystName", EmitDefaultValue = true)]
        public string AnalystName { get; set; }

        /// <summary>
        /// The FactSet Entity Identifier for the broker making the estimate.
        /// </summary>
        /// <value>The FactSet Entity Identifier for the broker making the estimate.</value>
        [DataMember(Name = "brokerId", EmitDefaultValue = true)]
        public string BrokerId { get; set; }

        /// <summary>
        /// The name of the broker making the estimate.
        /// </summary>
        /// <value>The name of the broker making the estimate.</value>
        [DataMember(Name = "brokerName", EmitDefaultValue = true)]
        public string BrokerName { get; set; }

        /// <summary>
        /// A textual representation of the analysts rating. Broker recommendations are divided into five main broad categories- **Buy, overWeight, Hold, underWeight, and Sell**.&lt;p&gt;Additional recommendations may be displayed for the below reasons -  * Without- A rating \&quot;Without\&quot; is displayed when a broker provides estimates but does not provide a rating. * Dropping- When a broker stops covering an equity, the recommendation will show \&quot;Dropping.\&quot; * Not Available- A broker may be \&quot;Not Available\&quot; due to outstanding circumstances with that particular security. Ratings are not displayed until a new rating is provided. * Most/Least- \&quot;Most\&quot; or \&quot;Least\&quot; favorable rating is displayed for top or bottom rating available for a particular security. 
        /// </summary>
        /// <value>A textual representation of the analysts rating. Broker recommendations are divided into five main broad categories- **Buy, overWeight, Hold, underWeight, and Sell**.&lt;p&gt;Additional recommendations may be displayed for the below reasons -  * Without- A rating \&quot;Without\&quot; is displayed when a broker provides estimates but does not provide a rating. * Dropping- When a broker stops covering an equity, the recommendation will show \&quot;Dropping.\&quot; * Not Available- A broker may be \&quot;Not Available\&quot; due to outstanding circumstances with that particular security. Ratings are not displayed until a new rating is provided. * Most/Least- \&quot;Most\&quot; or \&quot;Least\&quot; favorable rating is displayed for top or bottom rating available for a particular security. </value>
        [DataMember(Name = "ratingsNoteText", EmitDefaultValue = true)]
        public string RatingsNoteText { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Date and time when the data is available at the source.
        /// </summary>
        /// <value>Date and time when the data is available at the source.</value>
        [DataMember(Name = "inputDateTime", EmitDefaultValue = true)]
        public string InputDateTime { get; set; }

        /// <summary>
        /// The date at which a broker provided an estimate that is a revision.
        /// </summary>
        /// <value>The date at which a broker provided an estimate that is a revision.</value>
        [DataMember(Name = "lastModifiedDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? LastModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailRatings {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  EstimateDate: ").Append(EstimateDate).Append("\n");
            sb.Append("  AnalystId: ").Append(AnalystId).Append("\n");
            sb.Append("  AnalystName: ").Append(AnalystName).Append("\n");
            sb.Append("  BrokerId: ").Append(BrokerId).Append("\n");
            sb.Append("  BrokerName: ").Append(BrokerName).Append("\n");
            sb.Append("  RatingsNoteText: ").Append(RatingsNoteText).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  InputDateTime: ").Append(InputDateTime).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailRatings);
        }

        /// <summary>
        /// Returns true if DetailRatings instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailRatings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailRatings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.EstimateDate == input.EstimateDate ||
                    (this.EstimateDate != null &&
                    this.EstimateDate.Equals(input.EstimateDate))
                ) && 
                (
                    this.AnalystId == input.AnalystId ||
                    (this.AnalystId != null &&
                    this.AnalystId.Equals(input.AnalystId))
                ) && 
                (
                    this.AnalystName == input.AnalystName ||
                    (this.AnalystName != null &&
                    this.AnalystName.Equals(input.AnalystName))
                ) && 
                (
                    this.BrokerId == input.BrokerId ||
                    (this.BrokerId != null &&
                    this.BrokerId.Equals(input.BrokerId))
                ) && 
                (
                    this.BrokerName == input.BrokerName ||
                    (this.BrokerName != null &&
                    this.BrokerName.Equals(input.BrokerName))
                ) && 
                (
                    this.RatingsNoteText == input.RatingsNoteText ||
                    (this.RatingsNoteText != null &&
                    this.RatingsNoteText.Equals(input.RatingsNoteText))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.InputDateTime == input.InputDateTime ||
                    (this.InputDateTime != null &&
                    this.InputDateTime.Equals(input.InputDateTime))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.EstimateDate != null)
                {
                    hashCode = (hashCode * 59) + this.EstimateDate.GetHashCode();
                }
                if (this.AnalystId != null)
                {
                    hashCode = (hashCode * 59) + this.AnalystId.GetHashCode();
                }
                if (this.AnalystName != null)
                {
                    hashCode = (hashCode * 59) + this.AnalystName.GetHashCode();
                }
                if (this.BrokerId != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerId.GetHashCode();
                }
                if (this.BrokerName != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerName.GetHashCode();
                }
                if (this.RatingsNoteText != null)
                {
                    hashCode = (hashCode * 59) + this.RatingsNoteText.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.InputDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.InputDateTime.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
