/*
 * FactSet Estimates
 *
 * With global coverage since 1999, the FactSet Estimates API provides you with comprehensive estimates and statistics on a wide variety of financial statement items as well as industry-specific metrics. The universe is comprised of over 19,000 active companies across 90+ countries with the following types of data included:   - **Consensus** - **Detail** - **Ratings** - **Surprise** - **Segments** - **Actuals** - **New Estimates and Ratings Reports Endpoints**  For clients seeking  curated and relevant financial data, the FactSet Estimates API now includes Estimates and Ratings Reports endpoints. These powerful endpoints are designed for easy integration and consumption, delivering a wide array of financial metrics, estimates, and critical statistics in a highly accessible format suitable for both mobile and web applications.   Whether you are an analyst, investor, or financial professional, the Estimates and Ratings Reports endpoints offer detailed and actionable financial insights that can support thorough analyses and strategic decision-making processes.   The Estimates and Ratings Reports endpoints are especially valuable for B2B2C  applications, empowering financial services firms, investment companies, and corporate finance teams to:   - **Elevate Client Engagement:** Enrich user experiences in client-facing applications with comprehensive and up-to-date financial metrics.  - **Build Custom Reporting Tools:** Create tailored dashboards and analytics tools that provide deep insights and foster better financial understanding.  By adopting the FactSet Estimates API with its enriched Estimates and Ratings Reports endpoints, businesses can streamline their financial data integration process, improve operational efficiency, and deliver superior financial insights to their clients and end-users.     <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>  **Download API Specification**        To programmatically download the FactSet Estimates API Specification file in .yaml format, utilize the link below. You must be authorized for this API to extract the specification. This specification can then be used for Codegen to create your own SDKs. You can also access it by selecting the \"Download Spec\" button beside the version information.      [https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml](https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml) 
 *
 * The version of the OpenAPI document: 2.6.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetEstimates.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetEstimates.Model
{
    /// <summary>
    /// Estimate
    /// </summary>
    [DataContract(Name = "Estimate")]
    public partial class Estimate : IEquatable<Estimate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Estimate" /> class.
        /// </summary>
        /// <param name="endDate">Fiscal period end date for which the consensus estimate is being forecasted..</param>
        /// <param name="currency">Currency used for calculations, majority currency in which the analysts are contributing their estimates. For a list of supported ISO currency codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="high">The highest estimate provided by the analysts for the specified period..</param>
        /// <param name="low">The lowest estimate provided by the analysts for the specified period..</param>
        /// <param name="up">Number of estimates revised upwards..</param>
        /// <param name="down">Number of estimates revised downwards..</param>
        /// <param name="analystCount">The number of analysts who provided estimates for the given period..</param>
        /// <param name="mean">The average of all estimates provided by the analysts for the specified period..</param>
        /// <param name="median">The median of all estimates provided by the analysts for the specified period..</param>
        /// <param name="standardDeviation">Measure of the dispersion of estimates around the consensus value..</param>
        public Estimate(DateTime? endDate = default(DateTime?), string currency = default(string), double? high = default(double?), double? low = default(double?), int? up = default(int?), int? down = default(int?), int? analystCount = default(int?), double? mean = default(double?), double? median = default(double?), double? standardDeviation = default(double?))
        {
            this.EndDate = endDate;
            this.Currency = currency;
            this.High = high;
            this.Low = low;
            this.Up = up;
            this.Down = down;
            this.AnalystCount = analystCount;
            this.Mean = mean;
            this.Median = median;
            this.StandardDeviation = standardDeviation;
        }

        /// <summary>
        /// Fiscal period end date for which the consensus estimate is being forecasted.
        /// </summary>
        /// <value>Fiscal period end date for which the consensus estimate is being forecasted.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Currency used for calculations, majority currency in which the analysts are contributing their estimates. For a list of supported ISO currency codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency used for calculations, majority currency in which the analysts are contributing their estimates. For a list of supported ISO currency codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The highest estimate provided by the analysts for the specified period.
        /// </summary>
        /// <value>The highest estimate provided by the analysts for the specified period.</value>
        [DataMember(Name = "high", EmitDefaultValue = true)]
        public double? High { get; set; }

        /// <summary>
        /// The lowest estimate provided by the analysts for the specified period.
        /// </summary>
        /// <value>The lowest estimate provided by the analysts for the specified period.</value>
        [DataMember(Name = "low", EmitDefaultValue = true)]
        public double? Low { get; set; }

        /// <summary>
        /// Number of estimates revised upwards.
        /// </summary>
        /// <value>Number of estimates revised upwards.</value>
        [DataMember(Name = "up", EmitDefaultValue = true)]
        public int? Up { get; set; }

        /// <summary>
        /// Number of estimates revised downwards.
        /// </summary>
        /// <value>Number of estimates revised downwards.</value>
        [DataMember(Name = "down", EmitDefaultValue = true)]
        public int? Down { get; set; }

        /// <summary>
        /// The number of analysts who provided estimates for the given period.
        /// </summary>
        /// <value>The number of analysts who provided estimates for the given period.</value>
        [DataMember(Name = "analystCount", EmitDefaultValue = true)]
        public int? AnalystCount { get; set; }

        /// <summary>
        /// The average of all estimates provided by the analysts for the specified period.
        /// </summary>
        /// <value>The average of all estimates provided by the analysts for the specified period.</value>
        [DataMember(Name = "mean", EmitDefaultValue = true)]
        public double? Mean { get; set; }

        /// <summary>
        /// The median of all estimates provided by the analysts for the specified period.
        /// </summary>
        /// <value>The median of all estimates provided by the analysts for the specified period.</value>
        [DataMember(Name = "median", EmitDefaultValue = true)]
        public double? Median { get; set; }

        /// <summary>
        /// Measure of the dispersion of estimates around the consensus value.
        /// </summary>
        /// <value>Measure of the dispersion of estimates around the consensus value.</value>
        [DataMember(Name = "standardDeviation", EmitDefaultValue = true)]
        public double? StandardDeviation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Estimate {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Up: ").Append(Up).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("  AnalystCount: ").Append(AnalystCount).Append("\n");
            sb.Append("  Mean: ").Append(Mean).Append("\n");
            sb.Append("  Median: ").Append(Median).Append("\n");
            sb.Append("  StandardDeviation: ").Append(StandardDeviation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Estimate);
        }

        /// <summary>
        /// Returns true if Estimate instances are equal
        /// </summary>
        /// <param name="input">Instance of Estimate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Estimate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.Up == input.Up ||
                    (this.Up != null &&
                    this.Up.Equals(input.Up))
                ) && 
                (
                    this.Down == input.Down ||
                    (this.Down != null &&
                    this.Down.Equals(input.Down))
                ) && 
                (
                    this.AnalystCount == input.AnalystCount ||
                    (this.AnalystCount != null &&
                    this.AnalystCount.Equals(input.AnalystCount))
                ) && 
                (
                    this.Mean == input.Mean ||
                    (this.Mean != null &&
                    this.Mean.Equals(input.Mean))
                ) && 
                (
                    this.Median == input.Median ||
                    (this.Median != null &&
                    this.Median.Equals(input.Median))
                ) && 
                (
                    this.StandardDeviation == input.StandardDeviation ||
                    (this.StandardDeviation != null &&
                    this.StandardDeviation.Equals(input.StandardDeviation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.High != null)
                {
                    hashCode = (hashCode * 59) + this.High.GetHashCode();
                }
                if (this.Low != null)
                {
                    hashCode = (hashCode * 59) + this.Low.GetHashCode();
                }
                if (this.Up != null)
                {
                    hashCode = (hashCode * 59) + this.Up.GetHashCode();
                }
                if (this.Down != null)
                {
                    hashCode = (hashCode * 59) + this.Down.GetHashCode();
                }
                if (this.AnalystCount != null)
                {
                    hashCode = (hashCode * 59) + this.AnalystCount.GetHashCode();
                }
                if (this.Mean != null)
                {
                    hashCode = (hashCode * 59) + this.Mean.GetHashCode();
                }
                if (this.Median != null)
                {
                    hashCode = (hashCode * 59) + this.Median.GetHashCode();
                }
                if (this.StandardDeviation != null)
                {
                    hashCode = (hashCode * 59) + this.StandardDeviation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
