/*
 * FactSet Estimates
 *
 * With global coverage since 1999, the FactSet Estimates API provides you with comprehensive estimates and statistics on a wide variety of financial statement items as well as industry-specific metrics. The universe is comprised of over 19,000 active companies across 90+ countries with the following types of data included:   - **Consensus** - **Detail** - **Ratings** - **Surprise** - **Segments** - **Actuals** - **New Estimates and Ratings Reports Endpoints**  For clients seeking  curated and relevant financial data, the FactSet Estimates API now includes Estimates and Ratings Reports endpoints. These powerful endpoints are designed for easy integration and consumption, delivering a wide array of financial metrics, estimates, and critical statistics in a highly accessible format suitable for both mobile and web applications.   Whether you are an analyst, investor, or financial professional, the Estimates and Ratings Reports endpoints offer detailed and actionable financial insights that can support thorough analyses and strategic decision-making processes.   The Estimates and Ratings Reports endpoints are especially valuable for B2B2C  applications, empowering financial services firms, investment companies, and corporate finance teams to:   - **Elevate Client Engagement:** Enrich user experiences in client-facing applications with comprehensive and up-to-date financial metrics.  - **Build Custom Reporting Tools:** Create tailored dashboards and analytics tools that provide deep insights and foster better financial understanding.  By adopting the FactSet Estimates API with its enriched Estimates and Ratings Reports endpoints, businesses can streamline their financial data integration process, improve operational efficiency, and deliver superior financial insights to their clients and end-users.     <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>  **Download API Specification**        To programmatically download the FactSet Estimates API Specification file in .yaml format, utilize the link below. You must be authorized for this API to extract the specification. This specification can then be used for Codegen to create your own SDKs. You can also access it by selecting the \"Download Spec\" button beside the version information.      [https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml](https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml) 
 *
 * The version of the OpenAPI document: 2.6.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetEstimates.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetEstimates.Model
{
    /// <summary>
    /// SegmentActuals
    /// </summary>
    [DataContract(Name = "segmentActuals")]
    public partial class SegmentActuals : IEquatable<SegmentActuals>, IValidatableObject
    {
        /// <summary>
        /// The type of actual returned. The following is returned:   * **Company Actual**. This is collected directly from a company’s press release for the corresponding past period.    * **European Actual**. This is also collected directly from a company&#39;s press release before January 2017 for European countries. However, **Company Actual ** is used from 2017 onwards to fetch actual irrespective of country or listing.   * **Broker Actual**. A broker actual is a median consensus that can be updated up to 100 days post the fiscal period’s report date. Broker actuals are a post-event only consensus if a report date is collected from an earnings release, unless no brokers have contributed to the post-event consensus yet, in which case the broker actual will be a pre-event consensus.  The broker actual is a pre and post event consensus if the report date is a calculation  For more details on the actual types, visit [Online Assistant Page #13379](https://my.apps.factset.com/oa/pages/13379).    
        /// </summary>
        /// <value>The type of actual returned. The following is returned:   * **Company Actual**. This is collected directly from a company’s press release for the corresponding past period.    * **European Actual**. This is also collected directly from a company&#39;s press release before January 2017 for European countries. However, **Company Actual ** is used from 2017 onwards to fetch actual irrespective of country or listing.   * **Broker Actual**. A broker actual is a median consensus that can be updated up to 100 days post the fiscal period’s report date. Broker actuals are a post-event only consensus if a report date is collected from an earnings release, unless no brokers have contributed to the post-event consensus yet, in which case the broker actual will be a pre-event consensus.  The broker actual is a pre and post event consensus if the report date is a calculation  For more details on the actual types, visit [Online Assistant Page #13379](https://my.apps.factset.com/oa/pages/13379).    </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SegmentActualTypeEnum
        {
            /// <summary>
            /// Enum Company for value: company
            /// </summary>
            [EnumMember(Value = "company")]
            Company = 1,

            /// <summary>
            /// Enum European for value: european
            /// </summary>
            [EnumMember(Value = "european")]
            European = 2,

            /// <summary>
            /// Enum Broker for value: broker
            /// </summary>
            [EnumMember(Value = "broker")]
            Broker = 3

        }


        /// <summary>
        /// The type of actual returned. The following is returned:   * **Company Actual**. This is collected directly from a company’s press release for the corresponding past period.    * **European Actual**. This is also collected directly from a company&#39;s press release before January 2017 for European countries. However, **Company Actual ** is used from 2017 onwards to fetch actual irrespective of country or listing.   * **Broker Actual**. A broker actual is a median consensus that can be updated up to 100 days post the fiscal period’s report date. Broker actuals are a post-event only consensus if a report date is collected from an earnings release, unless no brokers have contributed to the post-event consensus yet, in which case the broker actual will be a pre-event consensus.  The broker actual is a pre and post event consensus if the report date is a calculation  For more details on the actual types, visit [Online Assistant Page #13379](https://my.apps.factset.com/oa/pages/13379).    
        /// </summary>
        /// <value>The type of actual returned. The following is returned:   * **Company Actual**. This is collected directly from a company’s press release for the corresponding past period.    * **European Actual**. This is also collected directly from a company&#39;s press release before January 2017 for European countries. However, **Company Actual ** is used from 2017 onwards to fetch actual irrespective of country or listing.   * **Broker Actual**. A broker actual is a median consensus that can be updated up to 100 days post the fiscal period’s report date. Broker actuals are a post-event only consensus if a report date is collected from an earnings release, unless no brokers have contributed to the post-event consensus yet, in which case the broker actual will be a pre-event consensus.  The broker actual is a pre and post event consensus if the report date is a calculation  For more details on the actual types, visit [Online Assistant Page #13379](https://my.apps.factset.com/oa/pages/13379).    </value>
        [DataMember(Name = "segmentActualType", EmitDefaultValue = true)]
        public SegmentActualTypeEnum? SegmentActualType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentActuals" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="fsymId">FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="metric">Company&#39;s Financial statement &#39;metric&#39; that is estimated. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034)..</param>
        /// <param name="periodicity">The reporting interval for the estimate. This is derived from Estimate Date and is translated to the Period List &#x3D; ANN, QTR, SEMI, LTMA, or NMTA..</param>
        /// <param name="fiscalYear">Company&#39;s &#39;fiscal year&#39; for the estimate record.</param>
        /// <param name="fiscalPeriod">Company&#39;s &#39;fiscal period&#39; for the estimate record.  &#39;Periodicity&#39; defines context for period..</param>
        /// <param name="fiscalEndDate">Company&#39;s &#39;fiscal year&#39; for the estimate record. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598).</param>
        /// <param name="segmentType">Type of segment requested.   * **BUS** &#x3D; Business / Product Segment   * **GEO** &#x3D; Geographic Segment .</param>
        /// <param name="segmentLabel">Displays the specific label of the segment..</param>
        /// <param name="segmentLevel">Returns the level of the segment item as either P &#x3D; Parent or S &#x3D; Subordinate.</param>
        /// <param name="segmentActualValue">Actual value of the specified segment for the requested metric..</param>
        /// <param name="segmentActualType">The type of actual returned. The following is returned:   * **Company Actual**. This is collected directly from a company’s press release for the corresponding past period.    * **European Actual**. This is also collected directly from a company&#39;s press release before January 2017 for European countries. However, **Company Actual ** is used from 2017 onwards to fetch actual irrespective of country or listing.   * **Broker Actual**. A broker actual is a median consensus that can be updated up to 100 days post the fiscal period’s report date. Broker actuals are a post-event only consensus if a report date is collected from an earnings release, unless no brokers have contributed to the post-event consensus yet, in which case the broker actual will be a pre-event consensus.  The broker actual is a pre and post event consensus if the report date is a calculation  For more details on the actual types, visit [Online Assistant Page #13379](https://my.apps.factset.com/oa/pages/13379).    .</param>
        /// <param name="reportDate">Date at which Actual has been reported and/or fiscal period has rolled..</param>
        /// <param name="currency">Currency code for adjusting the data. Use &#39;ESTIMATE&#39; as input value for the values in Estimate Currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="estimateCurrency">Estimate currency of the requested Security.</param>
        public SegmentActuals(string requestId = default(string), string fsymId = default(string), string metric = default(string), string periodicity = default(string), int? fiscalYear = default(int?), int? fiscalPeriod = default(int?), DateTime? fiscalEndDate = default(DateTime?), string segmentType = default(string), string segmentLabel = default(string), string segmentLevel = default(string), decimal? segmentActualValue = default(decimal?), SegmentActualTypeEnum? segmentActualType = default(SegmentActualTypeEnum?), DateTime? reportDate = default(DateTime?), string currency = default(string), string estimateCurrency = default(string))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Metric = metric;
            this.Periodicity = periodicity;
            this.FiscalYear = fiscalYear;
            this.FiscalPeriod = fiscalPeriod;
            this.FiscalEndDate = fiscalEndDate;
            this.SegmentType = segmentType;
            this.SegmentLabel = segmentLabel;
            this.SegmentLevel = segmentLevel;
            this.SegmentActualValue = segmentActualValue;
            this.SegmentActualType = segmentActualType;
            this.ReportDate = reportDate;
            this.Currency = currency;
            this.EstimateCurrency = estimateCurrency;
        }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Company&#39;s Financial statement &#39;metric&#39; that is estimated. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034).
        /// </summary>
        /// <value>Company&#39;s Financial statement &#39;metric&#39; that is estimated. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034).</value>
        [DataMember(Name = "metric", EmitDefaultValue = true)]
        public string Metric { get; set; }

        /// <summary>
        /// The reporting interval for the estimate. This is derived from Estimate Date and is translated to the Period List &#x3D; ANN, QTR, SEMI, LTMA, or NMTA.
        /// </summary>
        /// <value>The reporting interval for the estimate. This is derived from Estimate Date and is translated to the Period List &#x3D; ANN, QTR, SEMI, LTMA, or NMTA.</value>
        [DataMember(Name = "periodicity", EmitDefaultValue = true)]
        public string Periodicity { get; set; }

        /// <summary>
        /// Company&#39;s &#39;fiscal year&#39; for the estimate record
        /// </summary>
        /// <value>Company&#39;s &#39;fiscal year&#39; for the estimate record</value>
        [DataMember(Name = "fiscalYear", EmitDefaultValue = true)]
        public int? FiscalYear { get; set; }

        /// <summary>
        /// Company&#39;s &#39;fiscal period&#39; for the estimate record.  &#39;Periodicity&#39; defines context for period.
        /// </summary>
        /// <value>Company&#39;s &#39;fiscal period&#39; for the estimate record.  &#39;Periodicity&#39; defines context for period.</value>
        [DataMember(Name = "fiscalPeriod", EmitDefaultValue = true)]
        public int? FiscalPeriod { get; set; }

        /// <summary>
        /// Company&#39;s &#39;fiscal year&#39; for the estimate record. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)
        /// </summary>
        /// <value>Company&#39;s &#39;fiscal year&#39; for the estimate record. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)</value>
        [DataMember(Name = "fiscalEndDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? FiscalEndDate { get; set; }

        /// <summary>
        /// Type of segment requested.   * **BUS** &#x3D; Business / Product Segment   * **GEO** &#x3D; Geographic Segment 
        /// </summary>
        /// <value>Type of segment requested.   * **BUS** &#x3D; Business / Product Segment   * **GEO** &#x3D; Geographic Segment </value>
        [DataMember(Name = "segmentType", EmitDefaultValue = true)]
        public string SegmentType { get; set; }

        /// <summary>
        /// Displays the specific label of the segment.
        /// </summary>
        /// <value>Displays the specific label of the segment.</value>
        [DataMember(Name = "segmentLabel", EmitDefaultValue = true)]
        public string SegmentLabel { get; set; }

        /// <summary>
        /// Returns the level of the segment item as either P &#x3D; Parent or S &#x3D; Subordinate
        /// </summary>
        /// <value>Returns the level of the segment item as either P &#x3D; Parent or S &#x3D; Subordinate</value>
        [DataMember(Name = "segmentLevel", EmitDefaultValue = true)]
        public string SegmentLevel { get; set; }

        /// <summary>
        /// Actual value of the specified segment for the requested metric.
        /// </summary>
        /// <value>Actual value of the specified segment for the requested metric.</value>
        [DataMember(Name = "segmentActualValue", EmitDefaultValue = true)]
        public decimal? SegmentActualValue { get; set; }

        /// <summary>
        /// Date at which Actual has been reported and/or fiscal period has rolled.
        /// </summary>
        /// <value>Date at which Actual has been reported and/or fiscal period has rolled.</value>
        [DataMember(Name = "reportDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ReportDate { get; set; }

        /// <summary>
        /// Currency code for adjusting the data. Use &#39;ESTIMATE&#39; as input value for the values in Estimate Currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency code for adjusting the data. Use &#39;ESTIMATE&#39; as input value for the values in Estimate Currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Estimate currency of the requested Security
        /// </summary>
        /// <value>Estimate currency of the requested Security</value>
        [DataMember(Name = "estimateCurrency", EmitDefaultValue = true)]
        public string EstimateCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SegmentActuals {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  Periodicity: ").Append(Periodicity).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  FiscalPeriod: ").Append(FiscalPeriod).Append("\n");
            sb.Append("  FiscalEndDate: ").Append(FiscalEndDate).Append("\n");
            sb.Append("  SegmentType: ").Append(SegmentType).Append("\n");
            sb.Append("  SegmentLabel: ").Append(SegmentLabel).Append("\n");
            sb.Append("  SegmentLevel: ").Append(SegmentLevel).Append("\n");
            sb.Append("  SegmentActualValue: ").Append(SegmentActualValue).Append("\n");
            sb.Append("  SegmentActualType: ").Append(SegmentActualType).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  EstimateCurrency: ").Append(EstimateCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SegmentActuals);
        }

        /// <summary>
        /// Returns true if SegmentActuals instances are equal
        /// </summary>
        /// <param name="input">Instance of SegmentActuals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SegmentActuals input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Metric == input.Metric ||
                    (this.Metric != null &&
                    this.Metric.Equals(input.Metric))
                ) && 
                (
                    this.Periodicity == input.Periodicity ||
                    (this.Periodicity != null &&
                    this.Periodicity.Equals(input.Periodicity))
                ) && 
                (
                    this.FiscalYear == input.FiscalYear ||
                    (this.FiscalYear != null &&
                    this.FiscalYear.Equals(input.FiscalYear))
                ) && 
                (
                    this.FiscalPeriod == input.FiscalPeriod ||
                    (this.FiscalPeriod != null &&
                    this.FiscalPeriod.Equals(input.FiscalPeriod))
                ) && 
                (
                    this.FiscalEndDate == input.FiscalEndDate ||
                    (this.FiscalEndDate != null &&
                    this.FiscalEndDate.Equals(input.FiscalEndDate))
                ) && 
                (
                    this.SegmentType == input.SegmentType ||
                    (this.SegmentType != null &&
                    this.SegmentType.Equals(input.SegmentType))
                ) && 
                (
                    this.SegmentLabel == input.SegmentLabel ||
                    (this.SegmentLabel != null &&
                    this.SegmentLabel.Equals(input.SegmentLabel))
                ) && 
                (
                    this.SegmentLevel == input.SegmentLevel ||
                    (this.SegmentLevel != null &&
                    this.SegmentLevel.Equals(input.SegmentLevel))
                ) && 
                (
                    this.SegmentActualValue == input.SegmentActualValue ||
                    (this.SegmentActualValue != null &&
                    this.SegmentActualValue.Equals(input.SegmentActualValue))
                ) && 
                (
                    this.SegmentActualType == input.SegmentActualType ||
                    this.SegmentActualType.Equals(input.SegmentActualType)
                ) && 
                (
                    this.ReportDate == input.ReportDate ||
                    (this.ReportDate != null &&
                    this.ReportDate.Equals(input.ReportDate))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.EstimateCurrency == input.EstimateCurrency ||
                    (this.EstimateCurrency != null &&
                    this.EstimateCurrency.Equals(input.EstimateCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Metric != null)
                {
                    hashCode = (hashCode * 59) + this.Metric.GetHashCode();
                }
                if (this.Periodicity != null)
                {
                    hashCode = (hashCode * 59) + this.Periodicity.GetHashCode();
                }
                if (this.FiscalYear != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalYear.GetHashCode();
                }
                if (this.FiscalPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalPeriod.GetHashCode();
                }
                if (this.FiscalEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalEndDate.GetHashCode();
                }
                if (this.SegmentType != null)
                {
                    hashCode = (hashCode * 59) + this.SegmentType.GetHashCode();
                }
                if (this.SegmentLabel != null)
                {
                    hashCode = (hashCode * 59) + this.SegmentLabel.GetHashCode();
                }
                if (this.SegmentLevel != null)
                {
                    hashCode = (hashCode * 59) + this.SegmentLevel.GetHashCode();
                }
                if (this.SegmentActualValue != null)
                {
                    hashCode = (hashCode * 59) + this.SegmentActualValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SegmentActualType.GetHashCode();
                if (this.ReportDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReportDate.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.EstimateCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.EstimateCurrency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
