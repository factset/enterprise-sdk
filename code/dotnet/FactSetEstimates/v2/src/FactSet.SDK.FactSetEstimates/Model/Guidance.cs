/*
 * FactSet Estimates
 *
 * With global coverage since 1999, the FactSet Estimates API provides you with comprehensive estimates and statistics on a wide variety of financial statement items as well as industry-specific metrics. The universe is comprised of over 19,000 active companies across 90+ countries with the following types of data included:   - **Consensus** - **Detail** - **Ratings** - **Surprise** - **Segments** - **Actuals** - **Guidance** - **New Estimates and Ratings Reports Endpoints**  For clients seeking  curated and relevant financial data, the FactSet Estimates API now includes Estimates and Ratings Reports endpoints. These powerful endpoints are designed for easy integration and consumption, delivering a wide array of financial metrics, estimates, and critical statistics in a highly accessible format suitable for both mobile and web applications.   Whether you are an analyst, investor, or financial professional, the Estimates and Ratings Reports endpoints offer detailed and actionable financial insights that can support thorough analyses and strategic decision-making processes.   The Estimates and Ratings Reports endpoints are especially valuable for B2B2C  applications, empowering financial services firms, investment companies, and corporate finance teams to:   - **Elevate Client Engagement:** Enrich user experiences in client-facing applications with comprehensive and up-to-date financial metrics.  - **Build Custom Reporting Tools:** Create tailored dashboards and analytics tools that provide deep insights and foster better financial understanding.  By adopting the FactSet Estimates API with its enriched Estimates and Ratings Reports endpoints, businesses can streamline their financial data integration process, improve operational efficiency, and deliver superior financial insights to their clients and end-users.     <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>  **Download API Specification**        To programmatically download the FactSet Estimates API Specification file in .yaml format, utilize the link below. You must be authorized for this API to extract the specification. This specification can then be used for Codegen to create your own SDKs. You can also access it by selecting the \"Download Spec\" button beside the version information.      [https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml](https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml) 
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetEstimates.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetEstimates.Model
{
    /// <summary>
    /// Guidance
    /// </summary>
    [DataContract(Name = "guidance")]
    public partial class Guidance : IEquatable<Guidance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Guidance" /> class.
        /// </summary>
        /// <param name="requestId">Guidance identifier to be used as &#x60;guidance&#x60; input in the endpoint..</param>
        /// <param name="fsymId">FactSet regional security identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="metric">Company&#39;s Financial statement &#39;metric&#39; that is estimated. Use the factset-estimates/v#/metrics endpoint for a complete list. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034).</param>
        /// <param name="currency">Currency code for adjusting the data. Use &#39;ESTIMATE&#39; as input value for the values in Estimate Currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="estimateCurrency">Estimate currency of the requested Security.</param>
        /// <param name="periodicity">The reporting interval for the estimate. This is derived from Estimate Date and is translated to the Period List &#x3D; ANN, QTR, SEMI, LTMA, or NMTA..</param>
        /// <param name="consensusDate">The perspective date representing the current consensus among analysts as of today, visit [Online Assistant Page.</param>
        /// <param name="fiscalYear">Company&#39;s &#39;fiscal year&#39; for the estimate record. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598).</param>
        /// <param name="fiscalEndDate">Company&#39;s &#39;fiscal end date&#39; for the estimate record expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598).</param>
        /// <param name="relativePeriod">&#39;Fiscal period&#39; based on relationship to &#39;estimate date&#39;. This is not applicable for fixed-consensus endpoint. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598).</param>
        /// <param name="fiscalPeriod">Company&#39;s &#39;fiscal period&#39; for the estimate record.  &#39;Periodicity&#39; defines context for period..</param>
        /// <param name="guidanceDate">Date guidance was issued expressed in YYYY-MM-DD format..</param>
        /// <param name="guidanceMidpoint"> Represents the central value in a range of projected financial guidance..</param>
        /// <param name="guidanceLow">Represents the lower end of the projected financial guidance range..</param>
        /// <param name="guidanceHigh">Represents the upper end of the projected financial guidance range..</param>
        /// <param name="guidanceRange">Represents the span between the lowest and highest values in the projected financial guidance..</param>
        /// <param name="prevMidpoint">This refers to the average or central point of the financial guidance range given in a prior period..</param>
        /// <param name="prevLow">Refers to the lowest value or estimate in a financial guidance range provided in a previous period..</param>
        /// <param name="prevHigh">Refers to the highest value or estimate in a financial guidance range provided in a previous period..</param>
        /// <param name="meanBefore">This is the consensus value the day before the guidance was issued. If guidance was previously issued for the period in question, this consensus will only include estimates that have been updated since the previous update..</param>
        /// <param name="meanSurpriseAmt"> This is the difference between the before value and the guidance..</param>
        /// <param name="meanSurpriseAmtPercent">This represents the percentage difference between the before value and the guidance actual..</param>
        public Guidance(string requestId = default(string), string fsymId = default(string), string metric = default(string), string currency = default(string), string estimateCurrency = default(string), string periodicity = default(string), DateTime? consensusDate = default(DateTime?), int? fiscalYear = default(int?), DateTime? fiscalEndDate = default(DateTime?), int? relativePeriod = default(int?), int? fiscalPeriod = default(int?), DateTime? guidanceDate = default(DateTime?), double? guidanceMidpoint = default(double?), double? guidanceLow = default(double?), double? guidanceHigh = default(double?), string guidanceRange = default(string), double? prevMidpoint = default(double?), double prevLow = default(double), double? prevHigh = default(double?), double? meanBefore = default(double?), double? meanSurpriseAmt = default(double?), double? meanSurpriseAmtPercent = default(double?))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Metric = metric;
            this.Currency = currency;
            this.EstimateCurrency = estimateCurrency;
            this.Periodicity = periodicity;
            this.ConsensusDate = consensusDate;
            this.FiscalYear = fiscalYear;
            this.FiscalEndDate = fiscalEndDate;
            this.RelativePeriod = relativePeriod;
            this.FiscalPeriod = fiscalPeriod;
            this.GuidanceDate = guidanceDate;
            this.GuidanceMidpoint = guidanceMidpoint;
            this.GuidanceLow = guidanceLow;
            this.GuidanceHigh = guidanceHigh;
            this.GuidanceRange = guidanceRange;
            this.PrevMidpoint = prevMidpoint;
            this.PrevLow = prevLow;
            this.PrevHigh = prevHigh;
            this.MeanBefore = meanBefore;
            this.MeanSurpriseAmt = meanSurpriseAmt;
            this.MeanSurpriseAmtPercent = meanSurpriseAmtPercent;
        }

        /// <summary>
        /// Guidance identifier to be used as &#x60;guidance&#x60; input in the endpoint.
        /// </summary>
        /// <value>Guidance identifier to be used as &#x60;guidance&#x60; input in the endpoint.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet regional security identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>FactSet regional security identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Company&#39;s Financial statement &#39;metric&#39; that is estimated. Use the factset-estimates/v#/metrics endpoint for a complete list. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034)
        /// </summary>
        /// <value>Company&#39;s Financial statement &#39;metric&#39; that is estimated. Use the factset-estimates/v#/metrics endpoint for a complete list. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034)</value>
        [DataMember(Name = "metric", EmitDefaultValue = true)]
        public string Metric { get; set; }

        /// <summary>
        /// Currency code for adjusting the data. Use &#39;ESTIMATE&#39; as input value for the values in Estimate Currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency code for adjusting the data. Use &#39;ESTIMATE&#39; as input value for the values in Estimate Currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Estimate currency of the requested Security
        /// </summary>
        /// <value>Estimate currency of the requested Security</value>
        [DataMember(Name = "estimateCurrency", EmitDefaultValue = true)]
        public string EstimateCurrency { get; set; }

        /// <summary>
        /// The reporting interval for the estimate. This is derived from Estimate Date and is translated to the Period List &#x3D; ANN, QTR, SEMI, LTMA, or NMTA.
        /// </summary>
        /// <value>The reporting interval for the estimate. This is derived from Estimate Date and is translated to the Period List &#x3D; ANN, QTR, SEMI, LTMA, or NMTA.</value>
        [DataMember(Name = "periodicity", EmitDefaultValue = true)]
        public string Periodicity { get; set; }

        /// <summary>
        /// The perspective date representing the current consensus among analysts as of today, visit [Online Assistant Page
        /// </summary>
        /// <value>The perspective date representing the current consensus among analysts as of today, visit [Online Assistant Page</value>
        [DataMember(Name = "consensusDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ConsensusDate { get; set; }

        /// <summary>
        /// Company&#39;s &#39;fiscal year&#39; for the estimate record. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)
        /// </summary>
        /// <value>Company&#39;s &#39;fiscal year&#39; for the estimate record. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)</value>
        [DataMember(Name = "fiscalYear", EmitDefaultValue = true)]
        public int? FiscalYear { get; set; }

        /// <summary>
        /// Company&#39;s &#39;fiscal end date&#39; for the estimate record expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)
        /// </summary>
        /// <value>Company&#39;s &#39;fiscal end date&#39; for the estimate record expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)</value>
        [DataMember(Name = "fiscalEndDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? FiscalEndDate { get; set; }

        /// <summary>
        /// &#39;Fiscal period&#39; based on relationship to &#39;estimate date&#39;. This is not applicable for fixed-consensus endpoint. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)
        /// </summary>
        /// <value>&#39;Fiscal period&#39; based on relationship to &#39;estimate date&#39;. This is not applicable for fixed-consensus endpoint. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)</value>
        [DataMember(Name = "relativePeriod", EmitDefaultValue = true)]
        public int? RelativePeriod { get; set; }

        /// <summary>
        /// Company&#39;s &#39;fiscal period&#39; for the estimate record.  &#39;Periodicity&#39; defines context for period.
        /// </summary>
        /// <value>Company&#39;s &#39;fiscal period&#39; for the estimate record.  &#39;Periodicity&#39; defines context for period.</value>
        [DataMember(Name = "fiscalPeriod", EmitDefaultValue = true)]
        public int? FiscalPeriod { get; set; }

        /// <summary>
        /// Date guidance was issued expressed in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date guidance was issued expressed in YYYY-MM-DD format.</value>
        [DataMember(Name = "guidanceDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? GuidanceDate { get; set; }

        /// <summary>
        ///  Represents the central value in a range of projected financial guidance.
        /// </summary>
        /// <value> Represents the central value in a range of projected financial guidance.</value>
        [DataMember(Name = "guidanceMidpoint", EmitDefaultValue = true)]
        public double? GuidanceMidpoint { get; set; }

        /// <summary>
        /// Represents the lower end of the projected financial guidance range.
        /// </summary>
        /// <value>Represents the lower end of the projected financial guidance range.</value>
        [DataMember(Name = "guidanceLow", EmitDefaultValue = true)]
        public double? GuidanceLow { get; set; }

        /// <summary>
        /// Represents the upper end of the projected financial guidance range.
        /// </summary>
        /// <value>Represents the upper end of the projected financial guidance range.</value>
        [DataMember(Name = "guidanceHigh", EmitDefaultValue = true)]
        public double? GuidanceHigh { get; set; }

        /// <summary>
        /// Represents the span between the lowest and highest values in the projected financial guidance.
        /// </summary>
        /// <value>Represents the span between the lowest and highest values in the projected financial guidance.</value>
        [DataMember(Name = "guidanceRange", EmitDefaultValue = true)]
        public string GuidanceRange { get; set; }

        /// <summary>
        /// This refers to the average or central point of the financial guidance range given in a prior period.
        /// </summary>
        /// <value>This refers to the average or central point of the financial guidance range given in a prior period.</value>
        [DataMember(Name = "prevMidpoint", EmitDefaultValue = true)]
        public double? PrevMidpoint { get; set; }

        /// <summary>
        /// Refers to the lowest value or estimate in a financial guidance range provided in a previous period.
        /// </summary>
        /// <value>Refers to the lowest value or estimate in a financial guidance range provided in a previous period.</value>
        [DataMember(Name = "prevLow", EmitDefaultValue = false)]
        public double PrevLow { get; set; }

        /// <summary>
        /// Refers to the highest value or estimate in a financial guidance range provided in a previous period.
        /// </summary>
        /// <value>Refers to the highest value or estimate in a financial guidance range provided in a previous period.</value>
        [DataMember(Name = "prevHigh", EmitDefaultValue = true)]
        public double? PrevHigh { get; set; }

        /// <summary>
        /// This is the consensus value the day before the guidance was issued. If guidance was previously issued for the period in question, this consensus will only include estimates that have been updated since the previous update.
        /// </summary>
        /// <value>This is the consensus value the day before the guidance was issued. If guidance was previously issued for the period in question, this consensus will only include estimates that have been updated since the previous update.</value>
        [DataMember(Name = "meanBefore", EmitDefaultValue = true)]
        public double? MeanBefore { get; set; }

        /// <summary>
        ///  This is the difference between the before value and the guidance.
        /// </summary>
        /// <value> This is the difference between the before value and the guidance.</value>
        [DataMember(Name = "meanSurpriseAmt", EmitDefaultValue = true)]
        public double? MeanSurpriseAmt { get; set; }

        /// <summary>
        /// This represents the percentage difference between the before value and the guidance actual.
        /// </summary>
        /// <value>This represents the percentage difference between the before value and the guidance actual.</value>
        [DataMember(Name = "meanSurpriseAmtPercent", EmitDefaultValue = true)]
        public double? MeanSurpriseAmtPercent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Guidance {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  EstimateCurrency: ").Append(EstimateCurrency).Append("\n");
            sb.Append("  Periodicity: ").Append(Periodicity).Append("\n");
            sb.Append("  ConsensusDate: ").Append(ConsensusDate).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  FiscalEndDate: ").Append(FiscalEndDate).Append("\n");
            sb.Append("  RelativePeriod: ").Append(RelativePeriod).Append("\n");
            sb.Append("  FiscalPeriod: ").Append(FiscalPeriod).Append("\n");
            sb.Append("  GuidanceDate: ").Append(GuidanceDate).Append("\n");
            sb.Append("  GuidanceMidpoint: ").Append(GuidanceMidpoint).Append("\n");
            sb.Append("  GuidanceLow: ").Append(GuidanceLow).Append("\n");
            sb.Append("  GuidanceHigh: ").Append(GuidanceHigh).Append("\n");
            sb.Append("  GuidanceRange: ").Append(GuidanceRange).Append("\n");
            sb.Append("  PrevMidpoint: ").Append(PrevMidpoint).Append("\n");
            sb.Append("  PrevLow: ").Append(PrevLow).Append("\n");
            sb.Append("  PrevHigh: ").Append(PrevHigh).Append("\n");
            sb.Append("  MeanBefore: ").Append(MeanBefore).Append("\n");
            sb.Append("  MeanSurpriseAmt: ").Append(MeanSurpriseAmt).Append("\n");
            sb.Append("  MeanSurpriseAmtPercent: ").Append(MeanSurpriseAmtPercent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Guidance);
        }

        /// <summary>
        /// Returns true if Guidance instances are equal
        /// </summary>
        /// <param name="input">Instance of Guidance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Guidance input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Metric == input.Metric ||
                    (this.Metric != null &&
                    this.Metric.Equals(input.Metric))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.EstimateCurrency == input.EstimateCurrency ||
                    (this.EstimateCurrency != null &&
                    this.EstimateCurrency.Equals(input.EstimateCurrency))
                ) && 
                (
                    this.Periodicity == input.Periodicity ||
                    (this.Periodicity != null &&
                    this.Periodicity.Equals(input.Periodicity))
                ) && 
                (
                    this.ConsensusDate == input.ConsensusDate ||
                    (this.ConsensusDate != null &&
                    this.ConsensusDate.Equals(input.ConsensusDate))
                ) && 
                (
                    this.FiscalYear == input.FiscalYear ||
                    (this.FiscalYear != null &&
                    this.FiscalYear.Equals(input.FiscalYear))
                ) && 
                (
                    this.FiscalEndDate == input.FiscalEndDate ||
                    (this.FiscalEndDate != null &&
                    this.FiscalEndDate.Equals(input.FiscalEndDate))
                ) && 
                (
                    this.RelativePeriod == input.RelativePeriod ||
                    (this.RelativePeriod != null &&
                    this.RelativePeriod.Equals(input.RelativePeriod))
                ) && 
                (
                    this.FiscalPeriod == input.FiscalPeriod ||
                    (this.FiscalPeriod != null &&
                    this.FiscalPeriod.Equals(input.FiscalPeriod))
                ) && 
                (
                    this.GuidanceDate == input.GuidanceDate ||
                    (this.GuidanceDate != null &&
                    this.GuidanceDate.Equals(input.GuidanceDate))
                ) && 
                (
                    this.GuidanceMidpoint == input.GuidanceMidpoint ||
                    (this.GuidanceMidpoint != null &&
                    this.GuidanceMidpoint.Equals(input.GuidanceMidpoint))
                ) && 
                (
                    this.GuidanceLow == input.GuidanceLow ||
                    (this.GuidanceLow != null &&
                    this.GuidanceLow.Equals(input.GuidanceLow))
                ) && 
                (
                    this.GuidanceHigh == input.GuidanceHigh ||
                    (this.GuidanceHigh != null &&
                    this.GuidanceHigh.Equals(input.GuidanceHigh))
                ) && 
                (
                    this.GuidanceRange == input.GuidanceRange ||
                    (this.GuidanceRange != null &&
                    this.GuidanceRange.Equals(input.GuidanceRange))
                ) && 
                (
                    this.PrevMidpoint == input.PrevMidpoint ||
                    (this.PrevMidpoint != null &&
                    this.PrevMidpoint.Equals(input.PrevMidpoint))
                ) && 
                (
                    this.PrevLow == input.PrevLow ||
                    this.PrevLow.Equals(input.PrevLow)
                ) && 
                (
                    this.PrevHigh == input.PrevHigh ||
                    (this.PrevHigh != null &&
                    this.PrevHigh.Equals(input.PrevHigh))
                ) && 
                (
                    this.MeanBefore == input.MeanBefore ||
                    (this.MeanBefore != null &&
                    this.MeanBefore.Equals(input.MeanBefore))
                ) && 
                (
                    this.MeanSurpriseAmt == input.MeanSurpriseAmt ||
                    (this.MeanSurpriseAmt != null &&
                    this.MeanSurpriseAmt.Equals(input.MeanSurpriseAmt))
                ) && 
                (
                    this.MeanSurpriseAmtPercent == input.MeanSurpriseAmtPercent ||
                    (this.MeanSurpriseAmtPercent != null &&
                    this.MeanSurpriseAmtPercent.Equals(input.MeanSurpriseAmtPercent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Metric != null)
                {
                    hashCode = (hashCode * 59) + this.Metric.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.EstimateCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.EstimateCurrency.GetHashCode();
                }
                if (this.Periodicity != null)
                {
                    hashCode = (hashCode * 59) + this.Periodicity.GetHashCode();
                }
                if (this.ConsensusDate != null)
                {
                    hashCode = (hashCode * 59) + this.ConsensusDate.GetHashCode();
                }
                if (this.FiscalYear != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalYear.GetHashCode();
                }
                if (this.FiscalEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalEndDate.GetHashCode();
                }
                if (this.RelativePeriod != null)
                {
                    hashCode = (hashCode * 59) + this.RelativePeriod.GetHashCode();
                }
                if (this.FiscalPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalPeriod.GetHashCode();
                }
                if (this.GuidanceDate != null)
                {
                    hashCode = (hashCode * 59) + this.GuidanceDate.GetHashCode();
                }
                if (this.GuidanceMidpoint != null)
                {
                    hashCode = (hashCode * 59) + this.GuidanceMidpoint.GetHashCode();
                }
                if (this.GuidanceLow != null)
                {
                    hashCode = (hashCode * 59) + this.GuidanceLow.GetHashCode();
                }
                if (this.GuidanceHigh != null)
                {
                    hashCode = (hashCode * 59) + this.GuidanceHigh.GetHashCode();
                }
                if (this.GuidanceRange != null)
                {
                    hashCode = (hashCode * 59) + this.GuidanceRange.GetHashCode();
                }
                if (this.PrevMidpoint != null)
                {
                    hashCode = (hashCode * 59) + this.PrevMidpoint.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PrevLow.GetHashCode();
                if (this.PrevHigh != null)
                {
                    hashCode = (hashCode * 59) + this.PrevHigh.GetHashCode();
                }
                if (this.MeanBefore != null)
                {
                    hashCode = (hashCode * 59) + this.MeanBefore.GetHashCode();
                }
                if (this.MeanSurpriseAmt != null)
                {
                    hashCode = (hashCode * 59) + this.MeanSurpriseAmt.GetHashCode();
                }
                if (this.MeanSurpriseAmtPercent != null)
                {
                    hashCode = (hashCode * 59) + this.MeanSurpriseAmtPercent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
