/*
 * Securitized Derivatives API For Digital Portals
 *
 * Search for securitized derivative instruments, using a criteria-based screener. The API provides also fundamental data, notation-based key figures, list of barrier types, and details regarding the underlyings, their respective barriers and related cash flows, coupon lists and derived basic interest rate information.  The screener is based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifier types used as parameters must be valid and application must have permissions for them.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * life cycle: important dates in and features of the life cycle of the securitized derivatives instruments * filter by issuer, country of registration of the securitized derivatives * underlying and related barriers, including level and distance, and resulting cash flows * coupon data: where applicable, occurrence and frequency of coupon payments, current interest rate range * performance and volatility * product-specific ask-based key figures (not all key figures are available for all product types):     * bonus yield, sideways yield, maximum yield based on the ask price     * agio, discount     * spread     * break even, outperformance point, parity     * delta, weekly theta, vega, implied volatility     * leverage, omega     * intrinsic value, time value         Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term *level* is used instead of *price*, e.g. underlying level instead of underlying price. The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for equity and fixed income instruments: See the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals) and the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) for details.  
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Notation-based key figures of the securitized derivative.
    /// </summary>
    [DataContract(Name = "inline_response_200_3_data")]
    public partial class InlineResponse2003Data : IEquatable<InlineResponse2003Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2003Data" /> class.
        /// </summary>
        /// <param name="idNotation">MDG identifier of the listing..</param>
        /// <param name="sourceIdentifier">Identifier used in the request..</param>
        /// <param name="prices">prices.</param>
        /// <param name="underlyings">Details of the underlyings..</param>
        /// <param name="currency">currency.</param>
        /// <param name="performanceIssue">performanceIssue.</param>
        /// <param name="bonusYield">bonusYield.</param>
        /// <param name="sidewaysYield">sidewaysYield.</param>
        /// <param name="maximumYield">maximumYield.</param>
        /// <param name="agio">agio.</param>
        /// <param name="discount">discount.</param>
        /// <param name="breakEven">breakEven.</param>
        /// <param name="spread">spread.</param>
        /// <param name="delta">delta.</param>
        /// <param name="thetaOneWeek">thetaOneWeek.</param>
        /// <param name="vega">vega.</param>
        /// <param name="leverage">Ask-based leverage. It represents the ratio of the underlying level to the ask price of the securitized derivative, adjusted for the cover ratio and the currency cross rate. This key figure is calculated only for leveraged derivatives (e.g. warrants, knock-out certificates)..</param>
        /// <param name="omega">Ask-based omega. It represents unadjusted delta (see attribute &#x60;delta.unadjusted&#x60;) multiplied with the leverage (see attribute &#x60;leverage&#x60;), both calculated based on the ask price of the derivative. Omega indicates the elasticity of the securitized derivative&#39;s price regarding the underlying level. This key figure is calculated for plain vanilla warrants only..</param>
        /// <param name="impliedVolatility">Ask-based implied volatility. It represents the volatility of the underlying that justifies the ask price of the derivative, when used as a parameter in the derivative&#39;s pricing model (such as Black-Scholes). Its value is a result of the pricing process, thus it represents the annual volatility of the underlying expected by the market participants until maturity of the derivative. This key figure is calculated for plain vanilla warrants only..</param>
        /// <param name="intrinsicValue">Intrinsic value. It represents the difference between the underlying level and the strike of the securitized derivative, adjusted for the cover ratio and the currency cross rate. If the difference is negative, the intrinsic value is given as 0. The intrinsic value represents the theoretical profit from an immediate exercise of the derivative. This key figure is calculated for plain vanilla warrants only..</param>
        /// <param name="timeValue">Ask-based time value. It represents the difference between the ask price of the securitized derivative and its intrinsic value (see attribute &#x60;intrinsicValue&#x60;). This key figure is calculated for plain vanilla warrants only..</param>
        /// <param name="outperformancePoint">Ask-based outperformance point. It represents the underlying level from which the underlying starts to outperform the securitized derivative, thus the investor would be better off investing directly in the underlying. It is calculated only for securitized derivatives with a limited payout (e.g. capped products). This key figure is not calculated for securitized derivatives with multiple underlyings. For the value unit, see attribute &#x60;underlyings.valueUnit&#x60;..</param>
        /// <param name="parity">Parity. It represents the difference between the underlying level and the strike of the derivative, adjusted for the cover ratio and the currency cross rate. Negative values are possible. It is the gain or loss that would result from the immediate exercise of an already present warrant and a simultaneously executed compensation transaction on the spot markets. This key figure is calculated for plain vanilla warrants only..</param>
        public InlineResponse2003Data(string idNotation = default(string), string sourceIdentifier = default(string), InlineResponse2003DataPrices prices = default(InlineResponse2003DataPrices), List<GetSecuritizedDerivativeKeyFiguresNotationGetDataUnderlyingsItems> underlyings = default(List<GetSecuritizedDerivativeKeyFiguresNotationGetDataUnderlyingsItems>), InlineResponse2003DataCurrency currency = default(InlineResponse2003DataCurrency), InlineResponse2003DataPerformanceIssue performanceIssue = default(InlineResponse2003DataPerformanceIssue), InlineResponse2003DataBonusYield bonusYield = default(InlineResponse2003DataBonusYield), InlineResponse2003DataSidewaysYield sidewaysYield = default(InlineResponse2003DataSidewaysYield), InlineResponse2003DataMaximumYield maximumYield = default(InlineResponse2003DataMaximumYield), InlineResponse2003DataAgio agio = default(InlineResponse2003DataAgio), InlineResponse2003DataDiscount discount = default(InlineResponse2003DataDiscount), InlineResponse2003DataBreakEven breakEven = default(InlineResponse2003DataBreakEven), InlineResponse2003DataSpread spread = default(InlineResponse2003DataSpread), InlineResponse2003DataDelta delta = default(InlineResponse2003DataDelta), InlineResponse2003DataThetaOneWeek thetaOneWeek = default(InlineResponse2003DataThetaOneWeek), InlineResponse2003DataVega vega = default(InlineResponse2003DataVega), decimal? leverage = default(decimal?), decimal? omega = default(decimal?), decimal? impliedVolatility = default(decimal?), decimal? intrinsicValue = default(decimal?), decimal? timeValue = default(decimal?), decimal? outperformancePoint = default(decimal?), decimal? parity = default(decimal?))
        {
            this.IdNotation = idNotation;
            this.SourceIdentifier = sourceIdentifier;
            this.Prices = prices;
            this.Underlyings = underlyings;
            this.Currency = currency;
            this.PerformanceIssue = performanceIssue;
            this.BonusYield = bonusYield;
            this.SidewaysYield = sidewaysYield;
            this.MaximumYield = maximumYield;
            this.Agio = agio;
            this.Discount = discount;
            this.BreakEven = breakEven;
            this.Spread = spread;
            this.Delta = delta;
            this.ThetaOneWeek = thetaOneWeek;
            this.Vega = vega;
            this.Leverage = leverage;
            this.Omega = omega;
            this.ImpliedVolatility = impliedVolatility;
            this.IntrinsicValue = intrinsicValue;
            this.TimeValue = timeValue;
            this.OutperformancePoint = outperformancePoint;
            this.Parity = parity;
        }

        /// <summary>
        /// MDG identifier of the listing.
        /// </summary>
        /// <value>MDG identifier of the listing.</value>
        [DataMember(Name = "idNotation", EmitDefaultValue = true)]
        public string IdNotation { get; set; }

        /// <summary>
        /// Identifier used in the request.
        /// </summary>
        /// <value>Identifier used in the request.</value>
        [DataMember(Name = "sourceIdentifier", EmitDefaultValue = true)]
        public string SourceIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Prices
        /// </summary>
        [DataMember(Name = "prices", EmitDefaultValue = false)]
        public InlineResponse2003DataPrices Prices { get; set; }

        /// <summary>
        /// Details of the underlyings.
        /// </summary>
        /// <value>Details of the underlyings.</value>
        [DataMember(Name = "underlyings", EmitDefaultValue = false)]
        public List<GetSecuritizedDerivativeKeyFiguresNotationGetDataUnderlyingsItems> Underlyings { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public InlineResponse2003DataCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets PerformanceIssue
        /// </summary>
        [DataMember(Name = "performanceIssue", EmitDefaultValue = false)]
        public InlineResponse2003DataPerformanceIssue PerformanceIssue { get; set; }

        /// <summary>
        /// Gets or Sets BonusYield
        /// </summary>
        [DataMember(Name = "bonusYield", EmitDefaultValue = false)]
        public InlineResponse2003DataBonusYield BonusYield { get; set; }

        /// <summary>
        /// Gets or Sets SidewaysYield
        /// </summary>
        [DataMember(Name = "sidewaysYield", EmitDefaultValue = false)]
        public InlineResponse2003DataSidewaysYield SidewaysYield { get; set; }

        /// <summary>
        /// Gets or Sets MaximumYield
        /// </summary>
        [DataMember(Name = "maximumYield", EmitDefaultValue = false)]
        public InlineResponse2003DataMaximumYield MaximumYield { get; set; }

        /// <summary>
        /// Gets or Sets Agio
        /// </summary>
        [DataMember(Name = "agio", EmitDefaultValue = false)]
        public InlineResponse2003DataAgio Agio { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name = "discount", EmitDefaultValue = false)]
        public InlineResponse2003DataDiscount Discount { get; set; }

        /// <summary>
        /// Gets or Sets BreakEven
        /// </summary>
        [DataMember(Name = "breakEven", EmitDefaultValue = false)]
        public InlineResponse2003DataBreakEven BreakEven { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name = "spread", EmitDefaultValue = false)]
        public InlineResponse2003DataSpread Spread { get; set; }

        /// <summary>
        /// Gets or Sets Delta
        /// </summary>
        [DataMember(Name = "delta", EmitDefaultValue = false)]
        public InlineResponse2003DataDelta Delta { get; set; }

        /// <summary>
        /// Gets or Sets ThetaOneWeek
        /// </summary>
        [DataMember(Name = "thetaOneWeek", EmitDefaultValue = false)]
        public InlineResponse2003DataThetaOneWeek ThetaOneWeek { get; set; }

        /// <summary>
        /// Gets or Sets Vega
        /// </summary>
        [DataMember(Name = "vega", EmitDefaultValue = false)]
        public InlineResponse2003DataVega Vega { get; set; }

        /// <summary>
        /// Ask-based leverage. It represents the ratio of the underlying level to the ask price of the securitized derivative, adjusted for the cover ratio and the currency cross rate. This key figure is calculated only for leveraged derivatives (e.g. warrants, knock-out certificates).
        /// </summary>
        /// <value>Ask-based leverage. It represents the ratio of the underlying level to the ask price of the securitized derivative, adjusted for the cover ratio and the currency cross rate. This key figure is calculated only for leveraged derivatives (e.g. warrants, knock-out certificates).</value>
        [DataMember(Name = "leverage", EmitDefaultValue = true)]
        public decimal? Leverage { get; set; }

        /// <summary>
        /// Ask-based omega. It represents unadjusted delta (see attribute &#x60;delta.unadjusted&#x60;) multiplied with the leverage (see attribute &#x60;leverage&#x60;), both calculated based on the ask price of the derivative. Omega indicates the elasticity of the securitized derivative&#39;s price regarding the underlying level. This key figure is calculated for plain vanilla warrants only.
        /// </summary>
        /// <value>Ask-based omega. It represents unadjusted delta (see attribute &#x60;delta.unadjusted&#x60;) multiplied with the leverage (see attribute &#x60;leverage&#x60;), both calculated based on the ask price of the derivative. Omega indicates the elasticity of the securitized derivative&#39;s price regarding the underlying level. This key figure is calculated for plain vanilla warrants only.</value>
        [DataMember(Name = "omega", EmitDefaultValue = true)]
        public decimal? Omega { get; set; }

        /// <summary>
        /// Ask-based implied volatility. It represents the volatility of the underlying that justifies the ask price of the derivative, when used as a parameter in the derivative&#39;s pricing model (such as Black-Scholes). Its value is a result of the pricing process, thus it represents the annual volatility of the underlying expected by the market participants until maturity of the derivative. This key figure is calculated for plain vanilla warrants only.
        /// </summary>
        /// <value>Ask-based implied volatility. It represents the volatility of the underlying that justifies the ask price of the derivative, when used as a parameter in the derivative&#39;s pricing model (such as Black-Scholes). Its value is a result of the pricing process, thus it represents the annual volatility of the underlying expected by the market participants until maturity of the derivative. This key figure is calculated for plain vanilla warrants only.</value>
        [DataMember(Name = "impliedVolatility", EmitDefaultValue = true)]
        public decimal? ImpliedVolatility { get; set; }

        /// <summary>
        /// Intrinsic value. It represents the difference between the underlying level and the strike of the securitized derivative, adjusted for the cover ratio and the currency cross rate. If the difference is negative, the intrinsic value is given as 0. The intrinsic value represents the theoretical profit from an immediate exercise of the derivative. This key figure is calculated for plain vanilla warrants only.
        /// </summary>
        /// <value>Intrinsic value. It represents the difference between the underlying level and the strike of the securitized derivative, adjusted for the cover ratio and the currency cross rate. If the difference is negative, the intrinsic value is given as 0. The intrinsic value represents the theoretical profit from an immediate exercise of the derivative. This key figure is calculated for plain vanilla warrants only.</value>
        [DataMember(Name = "intrinsicValue", EmitDefaultValue = true)]
        public decimal? IntrinsicValue { get; set; }

        /// <summary>
        /// Ask-based time value. It represents the difference between the ask price of the securitized derivative and its intrinsic value (see attribute &#x60;intrinsicValue&#x60;). This key figure is calculated for plain vanilla warrants only.
        /// </summary>
        /// <value>Ask-based time value. It represents the difference between the ask price of the securitized derivative and its intrinsic value (see attribute &#x60;intrinsicValue&#x60;). This key figure is calculated for plain vanilla warrants only.</value>
        [DataMember(Name = "timeValue", EmitDefaultValue = true)]
        public decimal? TimeValue { get; set; }

        /// <summary>
        /// Ask-based outperformance point. It represents the underlying level from which the underlying starts to outperform the securitized derivative, thus the investor would be better off investing directly in the underlying. It is calculated only for securitized derivatives with a limited payout (e.g. capped products). This key figure is not calculated for securitized derivatives with multiple underlyings. For the value unit, see attribute &#x60;underlyings.valueUnit&#x60;.
        /// </summary>
        /// <value>Ask-based outperformance point. It represents the underlying level from which the underlying starts to outperform the securitized derivative, thus the investor would be better off investing directly in the underlying. It is calculated only for securitized derivatives with a limited payout (e.g. capped products). This key figure is not calculated for securitized derivatives with multiple underlyings. For the value unit, see attribute &#x60;underlyings.valueUnit&#x60;.</value>
        [DataMember(Name = "outperformancePoint", EmitDefaultValue = true)]
        public decimal? OutperformancePoint { get; set; }

        /// <summary>
        /// Parity. It represents the difference between the underlying level and the strike of the derivative, adjusted for the cover ratio and the currency cross rate. Negative values are possible. It is the gain or loss that would result from the immediate exercise of an already present warrant and a simultaneously executed compensation transaction on the spot markets. This key figure is calculated for plain vanilla warrants only.
        /// </summary>
        /// <value>Parity. It represents the difference between the underlying level and the strike of the derivative, adjusted for the cover ratio and the currency cross rate. Negative values are possible. It is the gain or loss that would result from the immediate exercise of an already present warrant and a simultaneously executed compensation transaction on the spot markets. This key figure is calculated for plain vanilla warrants only.</value>
        [DataMember(Name = "parity", EmitDefaultValue = true)]
        public decimal? Parity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2003Data {\n");
            sb.Append("  IdNotation: ").Append(IdNotation).Append("\n");
            sb.Append("  SourceIdentifier: ").Append(SourceIdentifier).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  Underlyings: ").Append(Underlyings).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  PerformanceIssue: ").Append(PerformanceIssue).Append("\n");
            sb.Append("  BonusYield: ").Append(BonusYield).Append("\n");
            sb.Append("  SidewaysYield: ").Append(SidewaysYield).Append("\n");
            sb.Append("  MaximumYield: ").Append(MaximumYield).Append("\n");
            sb.Append("  Agio: ").Append(Agio).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  BreakEven: ").Append(BreakEven).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  Delta: ").Append(Delta).Append("\n");
            sb.Append("  ThetaOneWeek: ").Append(ThetaOneWeek).Append("\n");
            sb.Append("  Vega: ").Append(Vega).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  Omega: ").Append(Omega).Append("\n");
            sb.Append("  ImpliedVolatility: ").Append(ImpliedVolatility).Append("\n");
            sb.Append("  IntrinsicValue: ").Append(IntrinsicValue).Append("\n");
            sb.Append("  TimeValue: ").Append(TimeValue).Append("\n");
            sb.Append("  OutperformancePoint: ").Append(OutperformancePoint).Append("\n");
            sb.Append("  Parity: ").Append(Parity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2003Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2003Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2003Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2003Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IdNotation == input.IdNotation ||
                    (this.IdNotation != null &&
                    this.IdNotation.Equals(input.IdNotation))
                ) && 
                (
                    this.SourceIdentifier == input.SourceIdentifier ||
                    (this.SourceIdentifier != null &&
                    this.SourceIdentifier.Equals(input.SourceIdentifier))
                ) && 
                (
                    this.Prices == input.Prices ||
                    (this.Prices != null &&
                    this.Prices.Equals(input.Prices))
                ) && 
                (
                    this.Underlyings == input.Underlyings ||
                    this.Underlyings != null &&
                    input.Underlyings != null &&
                    this.Underlyings.SequenceEqual(input.Underlyings)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.PerformanceIssue == input.PerformanceIssue ||
                    (this.PerformanceIssue != null &&
                    this.PerformanceIssue.Equals(input.PerformanceIssue))
                ) && 
                (
                    this.BonusYield == input.BonusYield ||
                    (this.BonusYield != null &&
                    this.BonusYield.Equals(input.BonusYield))
                ) && 
                (
                    this.SidewaysYield == input.SidewaysYield ||
                    (this.SidewaysYield != null &&
                    this.SidewaysYield.Equals(input.SidewaysYield))
                ) && 
                (
                    this.MaximumYield == input.MaximumYield ||
                    (this.MaximumYield != null &&
                    this.MaximumYield.Equals(input.MaximumYield))
                ) && 
                (
                    this.Agio == input.Agio ||
                    (this.Agio != null &&
                    this.Agio.Equals(input.Agio))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.BreakEven == input.BreakEven ||
                    (this.BreakEven != null &&
                    this.BreakEven.Equals(input.BreakEven))
                ) && 
                (
                    this.Spread == input.Spread ||
                    (this.Spread != null &&
                    this.Spread.Equals(input.Spread))
                ) && 
                (
                    this.Delta == input.Delta ||
                    (this.Delta != null &&
                    this.Delta.Equals(input.Delta))
                ) && 
                (
                    this.ThetaOneWeek == input.ThetaOneWeek ||
                    (this.ThetaOneWeek != null &&
                    this.ThetaOneWeek.Equals(input.ThetaOneWeek))
                ) && 
                (
                    this.Vega == input.Vega ||
                    (this.Vega != null &&
                    this.Vega.Equals(input.Vega))
                ) && 
                (
                    this.Leverage == input.Leverage ||
                    (this.Leverage != null &&
                    this.Leverage.Equals(input.Leverage))
                ) && 
                (
                    this.Omega == input.Omega ||
                    (this.Omega != null &&
                    this.Omega.Equals(input.Omega))
                ) && 
                (
                    this.ImpliedVolatility == input.ImpliedVolatility ||
                    (this.ImpliedVolatility != null &&
                    this.ImpliedVolatility.Equals(input.ImpliedVolatility))
                ) && 
                (
                    this.IntrinsicValue == input.IntrinsicValue ||
                    (this.IntrinsicValue != null &&
                    this.IntrinsicValue.Equals(input.IntrinsicValue))
                ) && 
                (
                    this.TimeValue == input.TimeValue ||
                    (this.TimeValue != null &&
                    this.TimeValue.Equals(input.TimeValue))
                ) && 
                (
                    this.OutperformancePoint == input.OutperformancePoint ||
                    (this.OutperformancePoint != null &&
                    this.OutperformancePoint.Equals(input.OutperformancePoint))
                ) && 
                (
                    this.Parity == input.Parity ||
                    (this.Parity != null &&
                    this.Parity.Equals(input.Parity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdNotation != null)
                {
                    hashCode = (hashCode * 59) + this.IdNotation.GetHashCode();
                }
                if (this.SourceIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.SourceIdentifier.GetHashCode();
                }
                if (this.Prices != null)
                {
                    hashCode = (hashCode * 59) + this.Prices.GetHashCode();
                }
                if (this.Underlyings != null)
                {
                    hashCode = (hashCode * 59) + this.Underlyings.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.PerformanceIssue != null)
                {
                    hashCode = (hashCode * 59) + this.PerformanceIssue.GetHashCode();
                }
                if (this.BonusYield != null)
                {
                    hashCode = (hashCode * 59) + this.BonusYield.GetHashCode();
                }
                if (this.SidewaysYield != null)
                {
                    hashCode = (hashCode * 59) + this.SidewaysYield.GetHashCode();
                }
                if (this.MaximumYield != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumYield.GetHashCode();
                }
                if (this.Agio != null)
                {
                    hashCode = (hashCode * 59) + this.Agio.GetHashCode();
                }
                if (this.Discount != null)
                {
                    hashCode = (hashCode * 59) + this.Discount.GetHashCode();
                }
                if (this.BreakEven != null)
                {
                    hashCode = (hashCode * 59) + this.BreakEven.GetHashCode();
                }
                if (this.Spread != null)
                {
                    hashCode = (hashCode * 59) + this.Spread.GetHashCode();
                }
                if (this.Delta != null)
                {
                    hashCode = (hashCode * 59) + this.Delta.GetHashCode();
                }
                if (this.ThetaOneWeek != null)
                {
                    hashCode = (hashCode * 59) + this.ThetaOneWeek.GetHashCode();
                }
                if (this.Vega != null)
                {
                    hashCode = (hashCode * 59) + this.Vega.GetHashCode();
                }
                if (this.Leverage != null)
                {
                    hashCode = (hashCode * 59) + this.Leverage.GetHashCode();
                }
                if (this.Omega != null)
                {
                    hashCode = (hashCode * 59) + this.Omega.GetHashCode();
                }
                if (this.ImpliedVolatility != null)
                {
                    hashCode = (hashCode * 59) + this.ImpliedVolatility.GetHashCode();
                }
                if (this.IntrinsicValue != null)
                {
                    hashCode = (hashCode * 59) + this.IntrinsicValue.GetHashCode();
                }
                if (this.TimeValue != null)
                {
                    hashCode = (hashCode * 59) + this.TimeValue.GetHashCode();
                }
                if (this.OutperformancePoint != null)
                {
                    hashCode = (hashCode * 59) + this.OutperformancePoint.GetHashCode();
                }
                if (this.Parity != null)
                {
                    hashCode = (hashCode * 59) + this.Parity.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
