/*
 * Securitized Derivatives API For Digital Portals
 *
 * Search for securitized derivative instruments, using a criteria-based screener. The API provides also fundamental data, notation-based key figures, list of barrier types, and details regarding the underlyings, their respective barriers and related cash flows, coupon lists and derived basic interest rate information.  The screener is based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifier types used as parameters must be valid and application must have permissions for them.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * life cycle: important dates in and features of the life cycle of the securitized derivatives instruments * filter by issuer, country of registration of the securitized derivatives * underlying and related barriers, including level and distance, and resulting cash flows * coupon data: where applicable, occurrence and frequency of coupon payments, current interest rate range * performance and volatility * product-specific ask-based key figures (not all key figures are available for all product types):     * bonus yield, sideways yield, maximum yield based on the ask price     * agio, discount     * spread     * break even, outperformance point, parity     * delta, weekly theta, vega, implied volatility     * leverage, omega     * intrinsic value, time value         Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term *level* is used instead of *price*, e.g. underlying level instead of underlying price. The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for equity and fixed income instruments: See the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals) and the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) for details.  
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Possible values and value ranges of the parameters.
    /// </summary>
    [DataContract(Name = "inline_response_200_5_data")]
    public partial class InlineResponse2005Data : IEquatable<InlineResponse2005Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2005Data" /> class.
        /// </summary>
        /// <param name="totalCount">Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges..</param>
        /// <param name="categorization">categorization.</param>
        /// <param name="market">List of market identifiers..</param>
        /// <param name="lifeCycle">lifeCycle.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="exercise">exercise.</param>
        /// <param name="settlement">Values related to the settlement. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out..</param>
        /// <param name="collateralized">Indicates whether securitized derivatives with and without protection against an issuer default are among the results. An example for such a collateralization is the COSI flag provided by SIX Swiss Exchange..</param>
        /// <param name="quanto">Indicates whether quanto and non-quanto securitized derivatives are among the results. Quanto means that the risk of exchange rate fluctuations between the value unit of the underlying and the value unit of the cash flows is hedged..</param>
        /// <param name="capitalProtection">capitalProtection.</param>
        /// <param name="underlying">underlying.</param>
        /// <param name="strike">strike.</param>
        /// <param name="bonusLevel">bonusLevel.</param>
        /// <param name="cap">cap.</param>
        /// <param name="knockOut">knockOut.</param>
        /// <param name="knockIn">knockIn.</param>
        /// <param name="lockOut">lockOut.</param>
        /// <param name="lockIn">lockIn.</param>
        /// <param name="capitalGuarantee">capitalGuarantee.</param>
        /// <param name="couponTriggerLevel">couponTriggerLevel.</param>
        /// <param name="rangeKnockOut">rangeKnockOut.</param>
        /// <param name="participation">Values of the participation direction of factor certificates at the level movement of its effective underlying..</param>
        /// <param name="constantLeverage">Values of the constant leverage of factor certificates..</param>
        /// <param name="nominalCurrency">Values of the main currency of the nominal and of the coupon payments. See endpoint &#x60;/basic/value-unit/currency/main/list&#x60; for possible values..</param>
        /// <param name="currentInterestRate">currentInterestRate.</param>
        /// <param name="keyFigures">keyFigures.</param>
        /// <param name="performance">performance.</param>
        /// <param name="volatility">volatility.</param>
        public InlineResponse2005Data(decimal? totalCount = default(decimal?), InlineResponse2005DataCategorization categorization = default(InlineResponse2005DataCategorization), List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataMarketItems> market = default(List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataMarketItems>), InlineResponse2005DataLifeCycle lifeCycle = default(InlineResponse2005DataLifeCycle), InlineResponse2005DataIssuer issuer = default(InlineResponse2005DataIssuer), InlineResponse2005DataExercise exercise = default(InlineResponse2005DataExercise), List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataSettlementItems> settlement = default(List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataSettlementItems>), List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataCollateralizedItems> collateralized = default(List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataCollateralizedItems>), List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataQuantoItems> quanto = default(List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataQuantoItems>), InlineResponse2005DataCapitalProtection capitalProtection = default(InlineResponse2005DataCapitalProtection), InlineResponse2005DataUnderlying underlying = default(InlineResponse2005DataUnderlying), InlineResponse2005DataStrike strike = default(InlineResponse2005DataStrike), InlineResponse2005DataBonusLevel bonusLevel = default(InlineResponse2005DataBonusLevel), InlineResponse2005DataCap cap = default(InlineResponse2005DataCap), InlineResponse2005DataKnockOut knockOut = default(InlineResponse2005DataKnockOut), InlineResponse2005DataKnockIn knockIn = default(InlineResponse2005DataKnockIn), InlineResponse2005DataLockOut lockOut = default(InlineResponse2005DataLockOut), InlineResponse2005DataLockIn lockIn = default(InlineResponse2005DataLockIn), InlineResponse2005DataCapitalGuarantee capitalGuarantee = default(InlineResponse2005DataCapitalGuarantee), InlineResponse2005DataCouponTriggerLevel couponTriggerLevel = default(InlineResponse2005DataCouponTriggerLevel), InlineResponse2005DataRangeKnockOut rangeKnockOut = default(InlineResponse2005DataRangeKnockOut), List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataParticipationItems> participation = default(List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataParticipationItems>), List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataConstantLeverageItems> constantLeverage = default(List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataConstantLeverageItems>), List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataNominalCurrencyItems> nominalCurrency = default(List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataNominalCurrencyItems>), InlineResponse2005DataCurrentInterestRate currentInterestRate = default(InlineResponse2005DataCurrentInterestRate), InlineResponse2005DataKeyFigures keyFigures = default(InlineResponse2005DataKeyFigures), InlineResponse2005DataPerformance performance = default(InlineResponse2005DataPerformance), InlineResponse2005DataVolatility volatility = default(InlineResponse2005DataVolatility))
        {
            this.TotalCount = totalCount;
            this.Categorization = categorization;
            this.Market = market;
            this.LifeCycle = lifeCycle;
            this.Issuer = issuer;
            this.Exercise = exercise;
            this.Settlement = settlement;
            this.Collateralized = collateralized;
            this.Quanto = quanto;
            this.CapitalProtection = capitalProtection;
            this.Underlying = underlying;
            this.Strike = strike;
            this.BonusLevel = bonusLevel;
            this.Cap = cap;
            this.KnockOut = knockOut;
            this.KnockIn = knockIn;
            this.LockOut = lockOut;
            this.LockIn = lockIn;
            this.CapitalGuarantee = capitalGuarantee;
            this.CouponTriggerLevel = couponTriggerLevel;
            this.RangeKnockOut = rangeKnockOut;
            this.Participation = participation;
            this.ConstantLeverage = constantLeverage;
            this.NominalCurrency = nominalCurrency;
            this.CurrentInterestRate = currentInterestRate;
            this.KeyFigures = keyFigures;
            this.Performance = performance;
            this.Volatility = volatility;
        }

        /// <summary>
        /// Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges.
        /// </summary>
        /// <value>Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges.</value>
        [DataMember(Name = "totalCount", EmitDefaultValue = true)]
        public decimal? TotalCount { get; set; }

        /// <summary>
        /// Gets or Sets Categorization
        /// </summary>
        [DataMember(Name = "categorization", EmitDefaultValue = false)]
        public InlineResponse2005DataCategorization Categorization { get; set; }

        /// <summary>
        /// List of market identifiers.
        /// </summary>
        /// <value>List of market identifiers.</value>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataMarketItems> Market { get; set; }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name = "lifeCycle", EmitDefaultValue = false)]
        public InlineResponse2005DataLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public InlineResponse2005DataIssuer Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Exercise
        /// </summary>
        [DataMember(Name = "exercise", EmitDefaultValue = false)]
        public InlineResponse2005DataExercise Exercise { get; set; }

        /// <summary>
        /// Values related to the settlement. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out.
        /// </summary>
        /// <value>Values related to the settlement. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out.</value>
        [DataMember(Name = "settlement", EmitDefaultValue = false)]
        public List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataSettlementItems> Settlement { get; set; }

        /// <summary>
        /// Indicates whether securitized derivatives with and without protection against an issuer default are among the results. An example for such a collateralization is the COSI flag provided by SIX Swiss Exchange.
        /// </summary>
        /// <value>Indicates whether securitized derivatives with and without protection against an issuer default are among the results. An example for such a collateralization is the COSI flag provided by SIX Swiss Exchange.</value>
        [DataMember(Name = "collateralized", EmitDefaultValue = false)]
        public List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataCollateralizedItems> Collateralized { get; set; }

        /// <summary>
        /// Indicates whether quanto and non-quanto securitized derivatives are among the results. Quanto means that the risk of exchange rate fluctuations between the value unit of the underlying and the value unit of the cash flows is hedged.
        /// </summary>
        /// <value>Indicates whether quanto and non-quanto securitized derivatives are among the results. Quanto means that the risk of exchange rate fluctuations between the value unit of the underlying and the value unit of the cash flows is hedged.</value>
        [DataMember(Name = "quanto", EmitDefaultValue = false)]
        public List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataQuantoItems> Quanto { get; set; }

        /// <summary>
        /// Gets or Sets CapitalProtection
        /// </summary>
        [DataMember(Name = "capitalProtection", EmitDefaultValue = false)]
        public InlineResponse2005DataCapitalProtection CapitalProtection { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name = "underlying", EmitDefaultValue = false)]
        public InlineResponse2005DataUnderlying Underlying { get; set; }

        /// <summary>
        /// Gets or Sets Strike
        /// </summary>
        [DataMember(Name = "strike", EmitDefaultValue = false)]
        public InlineResponse2005DataStrike Strike { get; set; }

        /// <summary>
        /// Gets or Sets BonusLevel
        /// </summary>
        [DataMember(Name = "bonusLevel", EmitDefaultValue = false)]
        public InlineResponse2005DataBonusLevel BonusLevel { get; set; }

        /// <summary>
        /// Gets or Sets Cap
        /// </summary>
        [DataMember(Name = "cap", EmitDefaultValue = false)]
        public InlineResponse2005DataCap Cap { get; set; }

        /// <summary>
        /// Gets or Sets KnockOut
        /// </summary>
        [DataMember(Name = "knockOut", EmitDefaultValue = false)]
        public InlineResponse2005DataKnockOut KnockOut { get; set; }

        /// <summary>
        /// Gets or Sets KnockIn
        /// </summary>
        [DataMember(Name = "knockIn", EmitDefaultValue = false)]
        public InlineResponse2005DataKnockIn KnockIn { get; set; }

        /// <summary>
        /// Gets or Sets LockOut
        /// </summary>
        [DataMember(Name = "lockOut", EmitDefaultValue = false)]
        public InlineResponse2005DataLockOut LockOut { get; set; }

        /// <summary>
        /// Gets or Sets LockIn
        /// </summary>
        [DataMember(Name = "lockIn", EmitDefaultValue = false)]
        public InlineResponse2005DataLockIn LockIn { get; set; }

        /// <summary>
        /// Gets or Sets CapitalGuarantee
        /// </summary>
        [DataMember(Name = "capitalGuarantee", EmitDefaultValue = false)]
        public InlineResponse2005DataCapitalGuarantee CapitalGuarantee { get; set; }

        /// <summary>
        /// Gets or Sets CouponTriggerLevel
        /// </summary>
        [DataMember(Name = "couponTriggerLevel", EmitDefaultValue = false)]
        public InlineResponse2005DataCouponTriggerLevel CouponTriggerLevel { get; set; }

        /// <summary>
        /// Gets or Sets RangeKnockOut
        /// </summary>
        [DataMember(Name = "rangeKnockOut", EmitDefaultValue = false)]
        public InlineResponse2005DataRangeKnockOut RangeKnockOut { get; set; }

        /// <summary>
        /// Values of the participation direction of factor certificates at the level movement of its effective underlying.
        /// </summary>
        /// <value>Values of the participation direction of factor certificates at the level movement of its effective underlying.</value>
        [DataMember(Name = "participation", EmitDefaultValue = false)]
        public List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataParticipationItems> Participation { get; set; }

        /// <summary>
        /// Values of the constant leverage of factor certificates.
        /// </summary>
        /// <value>Values of the constant leverage of factor certificates.</value>
        [DataMember(Name = "constantLeverage", EmitDefaultValue = false)]
        public List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataConstantLeverageItems> ConstantLeverage { get; set; }

        /// <summary>
        /// Values of the main currency of the nominal and of the coupon payments. See endpoint &#x60;/basic/value-unit/currency/main/list&#x60; for possible values.
        /// </summary>
        /// <value>Values of the main currency of the nominal and of the coupon payments. See endpoint &#x60;/basic/value-unit/currency/main/list&#x60; for possible values.</value>
        [DataMember(Name = "nominalCurrency", EmitDefaultValue = false)]
        public List<PostSecuritizedDerivativeNotationScreenerValueRangesGetDataNominalCurrencyItems> NominalCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CurrentInterestRate
        /// </summary>
        [DataMember(Name = "currentInterestRate", EmitDefaultValue = false)]
        public InlineResponse2005DataCurrentInterestRate CurrentInterestRate { get; set; }

        /// <summary>
        /// Gets or Sets KeyFigures
        /// </summary>
        [DataMember(Name = "keyFigures", EmitDefaultValue = false)]
        public InlineResponse2005DataKeyFigures KeyFigures { get; set; }

        /// <summary>
        /// Gets or Sets Performance
        /// </summary>
        [DataMember(Name = "performance", EmitDefaultValue = false)]
        public InlineResponse2005DataPerformance Performance { get; set; }

        /// <summary>
        /// Gets or Sets Volatility
        /// </summary>
        [DataMember(Name = "volatility", EmitDefaultValue = false)]
        public InlineResponse2005DataVolatility Volatility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2005Data {\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  Categorization: ").Append(Categorization).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Exercise: ").Append(Exercise).Append("\n");
            sb.Append("  Settlement: ").Append(Settlement).Append("\n");
            sb.Append("  Collateralized: ").Append(Collateralized).Append("\n");
            sb.Append("  Quanto: ").Append(Quanto).Append("\n");
            sb.Append("  CapitalProtection: ").Append(CapitalProtection).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  Strike: ").Append(Strike).Append("\n");
            sb.Append("  BonusLevel: ").Append(BonusLevel).Append("\n");
            sb.Append("  Cap: ").Append(Cap).Append("\n");
            sb.Append("  KnockOut: ").Append(KnockOut).Append("\n");
            sb.Append("  KnockIn: ").Append(KnockIn).Append("\n");
            sb.Append("  LockOut: ").Append(LockOut).Append("\n");
            sb.Append("  LockIn: ").Append(LockIn).Append("\n");
            sb.Append("  CapitalGuarantee: ").Append(CapitalGuarantee).Append("\n");
            sb.Append("  CouponTriggerLevel: ").Append(CouponTriggerLevel).Append("\n");
            sb.Append("  RangeKnockOut: ").Append(RangeKnockOut).Append("\n");
            sb.Append("  Participation: ").Append(Participation).Append("\n");
            sb.Append("  ConstantLeverage: ").Append(ConstantLeverage).Append("\n");
            sb.Append("  NominalCurrency: ").Append(NominalCurrency).Append("\n");
            sb.Append("  CurrentInterestRate: ").Append(CurrentInterestRate).Append("\n");
            sb.Append("  KeyFigures: ").Append(KeyFigures).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("  Volatility: ").Append(Volatility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2005Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2005Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2005Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2005Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                ) && 
                (
                    this.Categorization == input.Categorization ||
                    (this.Categorization != null &&
                    this.Categorization.Equals(input.Categorization))
                ) && 
                (
                    this.Market == input.Market ||
                    this.Market != null &&
                    input.Market != null &&
                    this.Market.SequenceEqual(input.Market)
                ) && 
                (
                    this.LifeCycle == input.LifeCycle ||
                    (this.LifeCycle != null &&
                    this.LifeCycle.Equals(input.LifeCycle))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Exercise == input.Exercise ||
                    (this.Exercise != null &&
                    this.Exercise.Equals(input.Exercise))
                ) && 
                (
                    this.Settlement == input.Settlement ||
                    this.Settlement != null &&
                    input.Settlement != null &&
                    this.Settlement.SequenceEqual(input.Settlement)
                ) && 
                (
                    this.Collateralized == input.Collateralized ||
                    this.Collateralized != null &&
                    input.Collateralized != null &&
                    this.Collateralized.SequenceEqual(input.Collateralized)
                ) && 
                (
                    this.Quanto == input.Quanto ||
                    this.Quanto != null &&
                    input.Quanto != null &&
                    this.Quanto.SequenceEqual(input.Quanto)
                ) && 
                (
                    this.CapitalProtection == input.CapitalProtection ||
                    (this.CapitalProtection != null &&
                    this.CapitalProtection.Equals(input.CapitalProtection))
                ) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.Strike == input.Strike ||
                    (this.Strike != null &&
                    this.Strike.Equals(input.Strike))
                ) && 
                (
                    this.BonusLevel == input.BonusLevel ||
                    (this.BonusLevel != null &&
                    this.BonusLevel.Equals(input.BonusLevel))
                ) && 
                (
                    this.Cap == input.Cap ||
                    (this.Cap != null &&
                    this.Cap.Equals(input.Cap))
                ) && 
                (
                    this.KnockOut == input.KnockOut ||
                    (this.KnockOut != null &&
                    this.KnockOut.Equals(input.KnockOut))
                ) && 
                (
                    this.KnockIn == input.KnockIn ||
                    (this.KnockIn != null &&
                    this.KnockIn.Equals(input.KnockIn))
                ) && 
                (
                    this.LockOut == input.LockOut ||
                    (this.LockOut != null &&
                    this.LockOut.Equals(input.LockOut))
                ) && 
                (
                    this.LockIn == input.LockIn ||
                    (this.LockIn != null &&
                    this.LockIn.Equals(input.LockIn))
                ) && 
                (
                    this.CapitalGuarantee == input.CapitalGuarantee ||
                    (this.CapitalGuarantee != null &&
                    this.CapitalGuarantee.Equals(input.CapitalGuarantee))
                ) && 
                (
                    this.CouponTriggerLevel == input.CouponTriggerLevel ||
                    (this.CouponTriggerLevel != null &&
                    this.CouponTriggerLevel.Equals(input.CouponTriggerLevel))
                ) && 
                (
                    this.RangeKnockOut == input.RangeKnockOut ||
                    (this.RangeKnockOut != null &&
                    this.RangeKnockOut.Equals(input.RangeKnockOut))
                ) && 
                (
                    this.Participation == input.Participation ||
                    this.Participation != null &&
                    input.Participation != null &&
                    this.Participation.SequenceEqual(input.Participation)
                ) && 
                (
                    this.ConstantLeverage == input.ConstantLeverage ||
                    this.ConstantLeverage != null &&
                    input.ConstantLeverage != null &&
                    this.ConstantLeverage.SequenceEqual(input.ConstantLeverage)
                ) && 
                (
                    this.NominalCurrency == input.NominalCurrency ||
                    this.NominalCurrency != null &&
                    input.NominalCurrency != null &&
                    this.NominalCurrency.SequenceEqual(input.NominalCurrency)
                ) && 
                (
                    this.CurrentInterestRate == input.CurrentInterestRate ||
                    (this.CurrentInterestRate != null &&
                    this.CurrentInterestRate.Equals(input.CurrentInterestRate))
                ) && 
                (
                    this.KeyFigures == input.KeyFigures ||
                    (this.KeyFigures != null &&
                    this.KeyFigures.Equals(input.KeyFigures))
                ) && 
                (
                    this.Performance == input.Performance ||
                    (this.Performance != null &&
                    this.Performance.Equals(input.Performance))
                ) && 
                (
                    this.Volatility == input.Volatility ||
                    (this.Volatility != null &&
                    this.Volatility.Equals(input.Volatility))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalCount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalCount.GetHashCode();
                }
                if (this.Categorization != null)
                {
                    hashCode = (hashCode * 59) + this.Categorization.GetHashCode();
                }
                if (this.Market != null)
                {
                    hashCode = (hashCode * 59) + this.Market.GetHashCode();
                }
                if (this.LifeCycle != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycle.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.Exercise != null)
                {
                    hashCode = (hashCode * 59) + this.Exercise.GetHashCode();
                }
                if (this.Settlement != null)
                {
                    hashCode = (hashCode * 59) + this.Settlement.GetHashCode();
                }
                if (this.Collateralized != null)
                {
                    hashCode = (hashCode * 59) + this.Collateralized.GetHashCode();
                }
                if (this.Quanto != null)
                {
                    hashCode = (hashCode * 59) + this.Quanto.GetHashCode();
                }
                if (this.CapitalProtection != null)
                {
                    hashCode = (hashCode * 59) + this.CapitalProtection.GetHashCode();
                }
                if (this.Underlying != null)
                {
                    hashCode = (hashCode * 59) + this.Underlying.GetHashCode();
                }
                if (this.Strike != null)
                {
                    hashCode = (hashCode * 59) + this.Strike.GetHashCode();
                }
                if (this.BonusLevel != null)
                {
                    hashCode = (hashCode * 59) + this.BonusLevel.GetHashCode();
                }
                if (this.Cap != null)
                {
                    hashCode = (hashCode * 59) + this.Cap.GetHashCode();
                }
                if (this.KnockOut != null)
                {
                    hashCode = (hashCode * 59) + this.KnockOut.GetHashCode();
                }
                if (this.KnockIn != null)
                {
                    hashCode = (hashCode * 59) + this.KnockIn.GetHashCode();
                }
                if (this.LockOut != null)
                {
                    hashCode = (hashCode * 59) + this.LockOut.GetHashCode();
                }
                if (this.LockIn != null)
                {
                    hashCode = (hashCode * 59) + this.LockIn.GetHashCode();
                }
                if (this.CapitalGuarantee != null)
                {
                    hashCode = (hashCode * 59) + this.CapitalGuarantee.GetHashCode();
                }
                if (this.CouponTriggerLevel != null)
                {
                    hashCode = (hashCode * 59) + this.CouponTriggerLevel.GetHashCode();
                }
                if (this.RangeKnockOut != null)
                {
                    hashCode = (hashCode * 59) + this.RangeKnockOut.GetHashCode();
                }
                if (this.Participation != null)
                {
                    hashCode = (hashCode * 59) + this.Participation.GetHashCode();
                }
                if (this.ConstantLeverage != null)
                {
                    hashCode = (hashCode * 59) + this.ConstantLeverage.GetHashCode();
                }
                if (this.NominalCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.NominalCurrency.GetHashCode();
                }
                if (this.CurrentInterestRate != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentInterestRate.GetHashCode();
                }
                if (this.KeyFigures != null)
                {
                    hashCode = (hashCode * 59) + this.KeyFigures.GetHashCode();
                }
                if (this.Performance != null)
                {
                    hashCode = (hashCode * 59) + this.Performance.GetHashCode();
                }
                if (this.Volatility != null)
                {
                    hashCode = (hashCode * 59) + this.Volatility.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
