/*
 * Securitized Derivatives API For Digital Portals
 *
 * Search for securitized derivative instruments, using a criteria-based screener. The API provides also fundamental data, notation-based key figures, list of barrier types, and details regarding the underlyings, their respective barriers and related cash flows, coupon lists and derived basic interest rate information.  The screener is based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifier types used as parameters must be valid and application must have permissions for them.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * life cycle: important dates in and features of the life cycle of the securitized derivatives instruments * filter by issuer, country of registration of the securitized derivatives * underlying and related barriers, including level and distance, and resulting cash flows * coupon data: where applicable, occurrence and frequency of coupon payments, current interest rate range * performance and volatility * product-specific ask-based key figures (not all key figures are available for all product types):     * bonus yield, sideways yield, maximum yield based on the ask price     * agio, discount     * spread     * break even, outperformance point, parity     * delta, weekly theta, vega, implied volatility     * leverage, omega     * intrinsic value, time value         Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term *level* is used instead of *price*, e.g. underlying level instead of underlying price. The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for equity and fixed income instruments: See the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals) and the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) for details.  
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Instrument data of the notation.
    /// </summary>
    [DataContract(Name = "PostSecuritizedDerivativeNotationScreenerSearchDataItems_instrument")]
    public partial class PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrument : IEquatable<PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrument>, IValidatableObject
    {
        /// <summary>
        /// Settlement of the securitized derivative. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out. | Value | Description | | - -- | - -- | | cash | Transfer of a cash amount. | | physical | Physical delivery of the underlying asset. | | either | Cash or physical, at the discretion of the issuer. |  
        /// </summary>
        /// <value>Settlement of the securitized derivative. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out. | Value | Description | | - -- | - -- | | cash | Transfer of a cash amount. | | physical | Physical delivery of the underlying asset. | | either | Cash or physical, at the discretion of the issuer. |  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SettlementEnum
        {
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 1,

            /// <summary>
            /// Enum Physical for value: physical
            /// </summary>
            [EnumMember(Value = "physical")]
            Physical = 2,

            /// <summary>
            /// Enum Either for value: either
            /// </summary>
            [EnumMember(Value = "either")]
            Either = 3

        }


        /// <summary>
        /// Settlement of the securitized derivative. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out. | Value | Description | | - -- | - -- | | cash | Transfer of a cash amount. | | physical | Physical delivery of the underlying asset. | | either | Cash or physical, at the discretion of the issuer. |  
        /// </summary>
        /// <value>Settlement of the securitized derivative. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out. | Value | Description | | - -- | - -- | | cash | Transfer of a cash amount. | | physical | Physical delivery of the underlying asset. | | either | Cash or physical, at the discretion of the issuer. |  </value>
        [DataMember(Name = "settlement", EmitDefaultValue = true)]
        public SettlementEnum? Settlement { get; set; }
        /// <summary>
        /// Participation direction of a factor certificate at the level movement of its effective underlying. | Value | Description | | - -- | - -- | | long | The factor certificate participates positively with rising levels of its effective underlying. | | short | The factor certificate participates negatively with rising levels of its effective underlying. |  
        /// </summary>
        /// <value>Participation direction of a factor certificate at the level movement of its effective underlying. | Value | Description | | - -- | - -- | | long | The factor certificate participates positively with rising levels of its effective underlying. | | short | The factor certificate participates negatively with rising levels of its effective underlying. |  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParticipationEnum
        {
            /// <summary>
            /// Enum Long for value: long
            /// </summary>
            [EnumMember(Value = "long")]
            Long = 1,

            /// <summary>
            /// Enum Short for value: short
            /// </summary>
            [EnumMember(Value = "short")]
            Short = 2

        }


        /// <summary>
        /// Participation direction of a factor certificate at the level movement of its effective underlying. | Value | Description | | - -- | - -- | | long | The factor certificate participates positively with rising levels of its effective underlying. | | short | The factor certificate participates negatively with rising levels of its effective underlying. |  
        /// </summary>
        /// <value>Participation direction of a factor certificate at the level movement of its effective underlying. | Value | Description | | - -- | - -- | | long | The factor certificate participates positively with rising levels of its effective underlying. | | short | The factor certificate participates negatively with rising levels of its effective underlying. |  </value>
        [DataMember(Name = "participation", EmitDefaultValue = true)]
        public ParticipationEnum? Participation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrument" /> class.
        /// </summary>
        /// <param name="id">Identifier of the instrument..</param>
        /// <param name="name">Name of the instrument..</param>
        /// <param name="shortName">Short name of the instrument..</param>
        /// <param name="isin">The International Securities Identification Number (ISIN) of the instrument.The ISIN is a 12-character code of digits and upper-case letters that uniquely identifiesan instrument..</param>
        /// <param name="nsin">nsin.</param>
        /// <param name="fsym">fsym.</param>
        /// <param name="categorization">categorization.</param>
        /// <param name="lifeCycle">lifeCycle.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="exercise">exercise.</param>
        /// <param name="settlement">Settlement of the securitized derivative. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out. | Value | Description | | - -- | - -- | | cash | Transfer of a cash amount. | | physical | Physical delivery of the underlying asset. | | either | Cash or physical, at the discretion of the issuer. |  .</param>
        /// <param name="collateralized">If &#x60;true&#x60;, this instrument is protected against an issuer default by collateral (e.g. COSI collateralization by SIX Swiss Exchange)..</param>
        /// <param name="quanto">If &#x60;true&#x60;, the risk of exchange rate fluctuations between the value unit of the underlying and the value unit of the cash flows is hedged..</param>
        /// <param name="capitalProtection">Proportion of the nominal amount protected against loss..</param>
        /// <param name="underlying">underlying.</param>
        /// <param name="strike">strike.</param>
        /// <param name="bonusLevel">bonusLevel.</param>
        /// <param name="cap">cap.</param>
        /// <param name="knockOut">knockOut.</param>
        /// <param name="knockIn">knockIn.</param>
        /// <param name="lockOut">lockOut.</param>
        /// <param name="lockIn">lockIn.</param>
        /// <param name="capitalGuarantee">capitalGuarantee.</param>
        /// <param name="couponTriggerLevel">couponTriggerLevel.</param>
        /// <param name="rangeKnockOut">rangeKnockOut.</param>
        /// <param name="participation">Participation direction of a factor certificate at the level movement of its effective underlying. | Value | Description | | - -- | - -- | | long | The factor certificate participates positively with rising levels of its effective underlying. | | short | The factor certificate participates negatively with rising levels of its effective underlying. |  .</param>
        /// <param name="constantLeverage">Constant leverage of a factor certificate..</param>
        /// <param name="nominalCurrency">nominalCurrency.</param>
        /// <param name="currentInterestRate">currentInterestRate.</param>
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrument(string id = default(string), string name = default(string), string shortName = default(string), string isin = default(string), InlineResponse200DataNsin nsin = default(InlineResponse200DataNsin), GetSecuritizedDerivativeUnderlyingListDataUnderlyingsItemsNotationInstrumentFsym fsym = default(GetSecuritizedDerivativeUnderlyingListDataUnderlyingsItemsNotationInstrumentFsym), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCategorization categorization = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCategorization), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentLifeCycle lifeCycle = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentLifeCycle), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentIssuer issuer = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentIssuer), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentExercise exercise = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentExercise), SettlementEnum? settlement = default(SettlementEnum?), bool? collateralized = default(bool?), bool? quanto = default(bool?), decimal? capitalProtection = default(decimal?), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentUnderlying underlying = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentUnderlying), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentStrike strike = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentStrike), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentBonusLevel bonusLevel = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentBonusLevel), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCap cap = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCap), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentKnockOut knockOut = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentKnockOut), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentKnockIn knockIn = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentKnockIn), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentLockOut lockOut = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentLockOut), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentLockIn lockIn = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentLockIn), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCapitalGuarantee capitalGuarantee = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCapitalGuarantee), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCouponTriggerLevel couponTriggerLevel = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCouponTriggerLevel), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentRangeKnockOut rangeKnockOut = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentRangeKnockOut), ParticipationEnum? participation = default(ParticipationEnum?), decimal? constantLeverage = default(decimal?), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentNominalCurrency nominalCurrency = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentNominalCurrency), PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCurrentInterestRate currentInterestRate = default(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCurrentInterestRate))
        {
            this.Id = id;
            this.Name = name;
            this.ShortName = shortName;
            this.Isin = isin;
            this.Nsin = nsin;
            this.Fsym = fsym;
            this.Categorization = categorization;
            this.LifeCycle = lifeCycle;
            this.Issuer = issuer;
            this.Exercise = exercise;
            this.Settlement = settlement;
            this.Collateralized = collateralized;
            this.Quanto = quanto;
            this.CapitalProtection = capitalProtection;
            this.Underlying = underlying;
            this.Strike = strike;
            this.BonusLevel = bonusLevel;
            this.Cap = cap;
            this.KnockOut = knockOut;
            this.KnockIn = knockIn;
            this.LockOut = lockOut;
            this.LockIn = lockIn;
            this.CapitalGuarantee = capitalGuarantee;
            this.CouponTriggerLevel = couponTriggerLevel;
            this.RangeKnockOut = rangeKnockOut;
            this.Participation = participation;
            this.ConstantLeverage = constantLeverage;
            this.NominalCurrency = nominalCurrency;
            this.CurrentInterestRate = currentInterestRate;
        }

        /// <summary>
        /// Identifier of the instrument.
        /// </summary>
        /// <value>Identifier of the instrument.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the instrument.
        /// </summary>
        /// <value>Name of the instrument.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Short name of the instrument.
        /// </summary>
        /// <value>Short name of the instrument.</value>
        [DataMember(Name = "shortName", EmitDefaultValue = true)]
        public string ShortName { get; set; }

        /// <summary>
        /// The International Securities Identification Number (ISIN) of the instrument.The ISIN is a 12-character code of digits and upper-case letters that uniquely identifiesan instrument.
        /// </summary>
        /// <value>The International Securities Identification Number (ISIN) of the instrument.The ISIN is a 12-character code of digits and upper-case letters that uniquely identifiesan instrument.</value>
        [DataMember(Name = "isin", EmitDefaultValue = true)]
        public string Isin { get; set; }

        /// <summary>
        /// Gets or Sets Nsin
        /// </summary>
        [DataMember(Name = "nsin", EmitDefaultValue = false)]
        public InlineResponse200DataNsin Nsin { get; set; }

        /// <summary>
        /// Gets or Sets Fsym
        /// </summary>
        [DataMember(Name = "fsym", EmitDefaultValue = false)]
        public GetSecuritizedDerivativeUnderlyingListDataUnderlyingsItemsNotationInstrumentFsym Fsym { get; set; }

        /// <summary>
        /// Gets or Sets Categorization
        /// </summary>
        [DataMember(Name = "categorization", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCategorization Categorization { get; set; }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name = "lifeCycle", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentIssuer Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Exercise
        /// </summary>
        [DataMember(Name = "exercise", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentExercise Exercise { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, this instrument is protected against an issuer default by collateral (e.g. COSI collateralization by SIX Swiss Exchange).
        /// </summary>
        /// <value>If &#x60;true&#x60;, this instrument is protected against an issuer default by collateral (e.g. COSI collateralization by SIX Swiss Exchange).</value>
        [DataMember(Name = "collateralized", EmitDefaultValue = true)]
        public bool? Collateralized { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, the risk of exchange rate fluctuations between the value unit of the underlying and the value unit of the cash flows is hedged.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the risk of exchange rate fluctuations between the value unit of the underlying and the value unit of the cash flows is hedged.</value>
        [DataMember(Name = "quanto", EmitDefaultValue = true)]
        public bool? Quanto { get; set; }

        /// <summary>
        /// Proportion of the nominal amount protected against loss.
        /// </summary>
        /// <value>Proportion of the nominal amount protected against loss.</value>
        [DataMember(Name = "capitalProtection", EmitDefaultValue = true)]
        public decimal? CapitalProtection { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name = "underlying", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentUnderlying Underlying { get; set; }

        /// <summary>
        /// Gets or Sets Strike
        /// </summary>
        [DataMember(Name = "strike", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentStrike Strike { get; set; }

        /// <summary>
        /// Gets or Sets BonusLevel
        /// </summary>
        [DataMember(Name = "bonusLevel", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentBonusLevel BonusLevel { get; set; }

        /// <summary>
        /// Gets or Sets Cap
        /// </summary>
        [DataMember(Name = "cap", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCap Cap { get; set; }

        /// <summary>
        /// Gets or Sets KnockOut
        /// </summary>
        [DataMember(Name = "knockOut", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentKnockOut KnockOut { get; set; }

        /// <summary>
        /// Gets or Sets KnockIn
        /// </summary>
        [DataMember(Name = "knockIn", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentKnockIn KnockIn { get; set; }

        /// <summary>
        /// Gets or Sets LockOut
        /// </summary>
        [DataMember(Name = "lockOut", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentLockOut LockOut { get; set; }

        /// <summary>
        /// Gets or Sets LockIn
        /// </summary>
        [DataMember(Name = "lockIn", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentLockIn LockIn { get; set; }

        /// <summary>
        /// Gets or Sets CapitalGuarantee
        /// </summary>
        [DataMember(Name = "capitalGuarantee", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCapitalGuarantee CapitalGuarantee { get; set; }

        /// <summary>
        /// Gets or Sets CouponTriggerLevel
        /// </summary>
        [DataMember(Name = "couponTriggerLevel", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCouponTriggerLevel CouponTriggerLevel { get; set; }

        /// <summary>
        /// Gets or Sets RangeKnockOut
        /// </summary>
        [DataMember(Name = "rangeKnockOut", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentRangeKnockOut RangeKnockOut { get; set; }

        /// <summary>
        /// Constant leverage of a factor certificate.
        /// </summary>
        /// <value>Constant leverage of a factor certificate.</value>
        [DataMember(Name = "constantLeverage", EmitDefaultValue = true)]
        public decimal? ConstantLeverage { get; set; }

        /// <summary>
        /// Gets or Sets NominalCurrency
        /// </summary>
        [DataMember(Name = "nominalCurrency", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentNominalCurrency NominalCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CurrentInterestRate
        /// </summary>
        [DataMember(Name = "currentInterestRate", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrumentCurrentInterestRate CurrentInterestRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Nsin: ").Append(Nsin).Append("\n");
            sb.Append("  Fsym: ").Append(Fsym).Append("\n");
            sb.Append("  Categorization: ").Append(Categorization).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Exercise: ").Append(Exercise).Append("\n");
            sb.Append("  Settlement: ").Append(Settlement).Append("\n");
            sb.Append("  Collateralized: ").Append(Collateralized).Append("\n");
            sb.Append("  Quanto: ").Append(Quanto).Append("\n");
            sb.Append("  CapitalProtection: ").Append(CapitalProtection).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  Strike: ").Append(Strike).Append("\n");
            sb.Append("  BonusLevel: ").Append(BonusLevel).Append("\n");
            sb.Append("  Cap: ").Append(Cap).Append("\n");
            sb.Append("  KnockOut: ").Append(KnockOut).Append("\n");
            sb.Append("  KnockIn: ").Append(KnockIn).Append("\n");
            sb.Append("  LockOut: ").Append(LockOut).Append("\n");
            sb.Append("  LockIn: ").Append(LockIn).Append("\n");
            sb.Append("  CapitalGuarantee: ").Append(CapitalGuarantee).Append("\n");
            sb.Append("  CouponTriggerLevel: ").Append(CouponTriggerLevel).Append("\n");
            sb.Append("  RangeKnockOut: ").Append(RangeKnockOut).Append("\n");
            sb.Append("  Participation: ").Append(Participation).Append("\n");
            sb.Append("  ConstantLeverage: ").Append(ConstantLeverage).Append("\n");
            sb.Append("  NominalCurrency: ").Append(NominalCurrency).Append("\n");
            sb.Append("  CurrentInterestRate: ").Append(CurrentInterestRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrument);
        }

        /// <summary>
        /// Returns true if PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrument instances are equal
        /// </summary>
        /// <param name="input">Instance of PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostSecuritizedDerivativeNotationScreenerSearchDataItemsInstrument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Nsin == input.Nsin ||
                    (this.Nsin != null &&
                    this.Nsin.Equals(input.Nsin))
                ) && 
                (
                    this.Fsym == input.Fsym ||
                    (this.Fsym != null &&
                    this.Fsym.Equals(input.Fsym))
                ) && 
                (
                    this.Categorization == input.Categorization ||
                    (this.Categorization != null &&
                    this.Categorization.Equals(input.Categorization))
                ) && 
                (
                    this.LifeCycle == input.LifeCycle ||
                    (this.LifeCycle != null &&
                    this.LifeCycle.Equals(input.LifeCycle))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Exercise == input.Exercise ||
                    (this.Exercise != null &&
                    this.Exercise.Equals(input.Exercise))
                ) && 
                (
                    this.Settlement == input.Settlement ||
                    this.Settlement.Equals(input.Settlement)
                ) && 
                (
                    this.Collateralized == input.Collateralized ||
                    (this.Collateralized != null &&
                    this.Collateralized.Equals(input.Collateralized))
                ) && 
                (
                    this.Quanto == input.Quanto ||
                    (this.Quanto != null &&
                    this.Quanto.Equals(input.Quanto))
                ) && 
                (
                    this.CapitalProtection == input.CapitalProtection ||
                    (this.CapitalProtection != null &&
                    this.CapitalProtection.Equals(input.CapitalProtection))
                ) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.Strike == input.Strike ||
                    (this.Strike != null &&
                    this.Strike.Equals(input.Strike))
                ) && 
                (
                    this.BonusLevel == input.BonusLevel ||
                    (this.BonusLevel != null &&
                    this.BonusLevel.Equals(input.BonusLevel))
                ) && 
                (
                    this.Cap == input.Cap ||
                    (this.Cap != null &&
                    this.Cap.Equals(input.Cap))
                ) && 
                (
                    this.KnockOut == input.KnockOut ||
                    (this.KnockOut != null &&
                    this.KnockOut.Equals(input.KnockOut))
                ) && 
                (
                    this.KnockIn == input.KnockIn ||
                    (this.KnockIn != null &&
                    this.KnockIn.Equals(input.KnockIn))
                ) && 
                (
                    this.LockOut == input.LockOut ||
                    (this.LockOut != null &&
                    this.LockOut.Equals(input.LockOut))
                ) && 
                (
                    this.LockIn == input.LockIn ||
                    (this.LockIn != null &&
                    this.LockIn.Equals(input.LockIn))
                ) && 
                (
                    this.CapitalGuarantee == input.CapitalGuarantee ||
                    (this.CapitalGuarantee != null &&
                    this.CapitalGuarantee.Equals(input.CapitalGuarantee))
                ) && 
                (
                    this.CouponTriggerLevel == input.CouponTriggerLevel ||
                    (this.CouponTriggerLevel != null &&
                    this.CouponTriggerLevel.Equals(input.CouponTriggerLevel))
                ) && 
                (
                    this.RangeKnockOut == input.RangeKnockOut ||
                    (this.RangeKnockOut != null &&
                    this.RangeKnockOut.Equals(input.RangeKnockOut))
                ) && 
                (
                    this.Participation == input.Participation ||
                    this.Participation.Equals(input.Participation)
                ) && 
                (
                    this.ConstantLeverage == input.ConstantLeverage ||
                    (this.ConstantLeverage != null &&
                    this.ConstantLeverage.Equals(input.ConstantLeverage))
                ) && 
                (
                    this.NominalCurrency == input.NominalCurrency ||
                    (this.NominalCurrency != null &&
                    this.NominalCurrency.Equals(input.NominalCurrency))
                ) && 
                (
                    this.CurrentInterestRate == input.CurrentInterestRate ||
                    (this.CurrentInterestRate != null &&
                    this.CurrentInterestRate.Equals(input.CurrentInterestRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.Nsin != null)
                {
                    hashCode = (hashCode * 59) + this.Nsin.GetHashCode();
                }
                if (this.Fsym != null)
                {
                    hashCode = (hashCode * 59) + this.Fsym.GetHashCode();
                }
                if (this.Categorization != null)
                {
                    hashCode = (hashCode * 59) + this.Categorization.GetHashCode();
                }
                if (this.LifeCycle != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycle.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.Exercise != null)
                {
                    hashCode = (hashCode * 59) + this.Exercise.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Settlement.GetHashCode();
                if (this.Collateralized != null)
                {
                    hashCode = (hashCode * 59) + this.Collateralized.GetHashCode();
                }
                if (this.Quanto != null)
                {
                    hashCode = (hashCode * 59) + this.Quanto.GetHashCode();
                }
                if (this.CapitalProtection != null)
                {
                    hashCode = (hashCode * 59) + this.CapitalProtection.GetHashCode();
                }
                if (this.Underlying != null)
                {
                    hashCode = (hashCode * 59) + this.Underlying.GetHashCode();
                }
                if (this.Strike != null)
                {
                    hashCode = (hashCode * 59) + this.Strike.GetHashCode();
                }
                if (this.BonusLevel != null)
                {
                    hashCode = (hashCode * 59) + this.BonusLevel.GetHashCode();
                }
                if (this.Cap != null)
                {
                    hashCode = (hashCode * 59) + this.Cap.GetHashCode();
                }
                if (this.KnockOut != null)
                {
                    hashCode = (hashCode * 59) + this.KnockOut.GetHashCode();
                }
                if (this.KnockIn != null)
                {
                    hashCode = (hashCode * 59) + this.KnockIn.GetHashCode();
                }
                if (this.LockOut != null)
                {
                    hashCode = (hashCode * 59) + this.LockOut.GetHashCode();
                }
                if (this.LockIn != null)
                {
                    hashCode = (hashCode * 59) + this.LockIn.GetHashCode();
                }
                if (this.CapitalGuarantee != null)
                {
                    hashCode = (hashCode * 59) + this.CapitalGuarantee.GetHashCode();
                }
                if (this.CouponTriggerLevel != null)
                {
                    hashCode = (hashCode * 59) + this.CouponTriggerLevel.GetHashCode();
                }
                if (this.RangeKnockOut != null)
                {
                    hashCode = (hashCode * 59) + this.RangeKnockOut.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Participation.GetHashCode();
                if (this.ConstantLeverage != null)
                {
                    hashCode = (hashCode * 59) + this.ConstantLeverage.GetHashCode();
                }
                if (this.NominalCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.NominalCurrency.GetHashCode();
                }
                if (this.CurrentInterestRate != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentInterestRate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
