/*
 * Securitized Derivatives API For Digital Portals
 *
 * Search for securitized derivative instruments, using a criteria-based screener. The API provides also fundamental data, notation-based key figures, list of barrier types, and details regarding the underlyings, their respective barriers and related cash flows, coupon lists and derived basic interest rate information.  The screener is based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifier types used as parameters must be valid and application must have permissions for them.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * life cycle: important dates in and features of the life cycle of the securitized derivatives instruments * filter by issuer, country of registration of the securitized derivatives * underlying and related barriers, including level and distance, and resulting cash flows * coupon data: where applicable, occurrence and frequency of coupon payments, current interest rate range * performance and volatility * product-specific ask-based key figures (not all key figures are available for all product types):     * bonus yield, sideways yield, maximum yield based on the ask price     * agio, discount     * spread     * break even, outperformance point, parity     * delta, weekly theta, vega, implied volatility     * leverage, omega     * intrinsic value, time value         Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term *level* is used instead of *price*, e.g. underlying level instead of underlying price. The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for equity and fixed income instruments: See the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals) and the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) for details.  
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// A list of objects. For semantical context see the description of the parent array.
    /// </summary>
    [DataContract(Name = "PostSecuritizedDerivativeNotationRankingIntradayListDataItems")]
    public partial class PostSecuritizedDerivativeNotationRankingIntradayListDataItems : IEquatable<PostSecuritizedDerivativeNotationRankingIntradayListDataItems>, IValidatableObject
    {
        /// <summary>
        /// Quality of the trade-related attributes, see attributes &#x60;trade&#x60; and &#x60;accumulated&#x60;. | Value | Description | | - -- | - -- | | RLT | Real-time: intraday prices with minimal technical processing delays. | | DLY | Delayed: intraday prices with an exchange-imposed delay of usually 15 to 30 minutes. |  
        /// </summary>
        /// <value>Quality of the trade-related attributes, see attributes &#x60;trade&#x60; and &#x60;accumulated&#x60;. | Value | Description | | - -- | - -- | | RLT | Real-time: intraday prices with minimal technical processing delays. | | DLY | Delayed: intraday prices with an exchange-imposed delay of usually 15 to 30 minutes. |  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualityEnum
        {
            /// <summary>
            /// Enum RLT for value: RLT
            /// </summary>
            [EnumMember(Value = "RLT")]
            RLT = 1,

            /// <summary>
            /// Enum DLY for value: DLY
            /// </summary>
            [EnumMember(Value = "DLY")]
            DLY = 2

        }


        /// <summary>
        /// Quality of the trade-related attributes, see attributes &#x60;trade&#x60; and &#x60;accumulated&#x60;. | Value | Description | | - -- | - -- | | RLT | Real-time: intraday prices with minimal technical processing delays. | | DLY | Delayed: intraday prices with an exchange-imposed delay of usually 15 to 30 minutes. |  
        /// </summary>
        /// <value>Quality of the trade-related attributes, see attributes &#x60;trade&#x60; and &#x60;accumulated&#x60;. | Value | Description | | - -- | - -- | | RLT | Real-time: intraday prices with minimal technical processing delays. | | DLY | Delayed: intraday prices with an exchange-imposed delay of usually 15 to 30 minutes. |  </value>
        [DataMember(Name = "quality", EmitDefaultValue = true)]
        public QualityEnum? Quality { get; set; }
        /// <summary>
        /// Participation direction of a factor certificate at the level movement of its effective underlying. | Value | Description | | - -- | - -- | | long | The factor certificate participates positively with rising levels of its effective underlying. | | short | The factor certificate participates negatively with rising levels of its effective underlying. |  
        /// </summary>
        /// <value>Participation direction of a factor certificate at the level movement of its effective underlying. | Value | Description | | - -- | - -- | | long | The factor certificate participates positively with rising levels of its effective underlying. | | short | The factor certificate participates negatively with rising levels of its effective underlying. |  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParticipationEnum
        {
            /// <summary>
            /// Enum Long for value: long
            /// </summary>
            [EnumMember(Value = "long")]
            Long = 1,

            /// <summary>
            /// Enum Short for value: short
            /// </summary>
            [EnumMember(Value = "short")]
            Short = 2

        }


        /// <summary>
        /// Participation direction of a factor certificate at the level movement of its effective underlying. | Value | Description | | - -- | - -- | | long | The factor certificate participates positively with rising levels of its effective underlying. | | short | The factor certificate participates negatively with rising levels of its effective underlying. |  
        /// </summary>
        /// <value>Participation direction of a factor certificate at the level movement of its effective underlying. | Value | Description | | - -- | - -- | | long | The factor certificate participates positively with rising levels of its effective underlying. | | short | The factor certificate participates negatively with rising levels of its effective underlying. |  </value>
        [DataMember(Name = "participation", EmitDefaultValue = true)]
        public ParticipationEnum? Participation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostSecuritizedDerivativeNotationRankingIntradayListDataItems" /> class.
        /// </summary>
        /// <param name="id">Identifier of a notation..</param>
        /// <param name="symbol">The symbol of the notation. It is a market-specific code to identify the notation. Which characters can be part of a symbol depends on the market. If a market does not define a proprietary symbol, but uses a different identifier (for example, the ISIN or the WKN) to identify instruments, no symbol will be set for the notations of that market..</param>
        /// <param name="fsym">fsym.</param>
        /// <param name="market">market.</param>
        /// <param name="valueUnit">valueUnit.</param>
        /// <param name="trade">trade.</param>
        /// <param name="quality">Quality of the trade-related attributes, see attributes &#x60;trade&#x60; and &#x60;accumulated&#x60;. | Value | Description | | - -- | - -- | | RLT | Real-time: intraday prices with minimal technical processing delays. | | DLY | Delayed: intraday prices with an exchange-imposed delay of usually 15 to 30 minutes. |  .</param>
        /// <param name="accumulated">accumulated.</param>
        /// <param name="instrument">instrument.</param>
        /// <param name="categorization">categorization.</param>
        /// <param name="lifeCycle">lifeCycle.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="exercise">exercise.</param>
        /// <param name="participation">Participation direction of a factor certificate at the level movement of its effective underlying. | Value | Description | | - -- | - -- | | long | The factor certificate participates positively with rising levels of its effective underlying. | | short | The factor certificate participates negatively with rising levels of its effective underlying. |  .</param>
        /// <param name="underlying">underlying.</param>
        /// <param name="knockedOut">Indicates whether the securitized derivative is knocked-out (&#x60;true&#x60;) or not (&#x60;false&#x60;). Particularly relevant for knock-out certificates..</param>
        /// <param name="knockedIn">Indicates whether the securitized derivative is knocked-in (&#x60;true&#x60;) or not (&#x60;false&#x60;). Particularly relevant for bonus certificates but also for securitized derivatives that might have additional protection such as reverse convertible bonds, discount certificates, and capital-protection certificates..</param>
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItems(string id = default(string), string symbol = default(string), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsFsym fsym = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsFsym), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsMarket market = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsMarket), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsValueUnit valueUnit = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsValueUnit), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsTrade trade = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsTrade), QualityEnum? quality = default(QualityEnum?), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsAccumulated accumulated = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsAccumulated), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsInstrument instrument = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsInstrument), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsCategorization categorization = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsCategorization), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsLifeCycle lifeCycle = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsLifeCycle), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsIssuer issuer = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsIssuer), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsExercise exercise = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsExercise), ParticipationEnum? participation = default(ParticipationEnum?), PostSecuritizedDerivativeNotationRankingIntradayListDataItemsUnderlying underlying = default(PostSecuritizedDerivativeNotationRankingIntradayListDataItemsUnderlying), bool? knockedOut = default(bool?), bool? knockedIn = default(bool?))
        {
            this.Id = id;
            this.Symbol = symbol;
            this.Fsym = fsym;
            this.Market = market;
            this.ValueUnit = valueUnit;
            this.Trade = trade;
            this.Quality = quality;
            this.Accumulated = accumulated;
            this.Instrument = instrument;
            this.Categorization = categorization;
            this.LifeCycle = lifeCycle;
            this.Issuer = issuer;
            this.Exercise = exercise;
            this.Participation = participation;
            this.Underlying = underlying;
            this.KnockedOut = knockedOut;
            this.KnockedIn = knockedIn;
        }

        /// <summary>
        /// Identifier of a notation.
        /// </summary>
        /// <value>Identifier of a notation.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The symbol of the notation. It is a market-specific code to identify the notation. Which characters can be part of a symbol depends on the market. If a market does not define a proprietary symbol, but uses a different identifier (for example, the ISIN or the WKN) to identify instruments, no symbol will be set for the notations of that market.
        /// </summary>
        /// <value>The symbol of the notation. It is a market-specific code to identify the notation. Which characters can be part of a symbol depends on the market. If a market does not define a proprietary symbol, but uses a different identifier (for example, the ISIN or the WKN) to identify instruments, no symbol will be set for the notations of that market.</value>
        [DataMember(Name = "symbol", EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Fsym
        /// </summary>
        [DataMember(Name = "fsym", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsFsym Fsym { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsMarket Market { get; set; }

        /// <summary>
        /// Gets or Sets ValueUnit
        /// </summary>
        [DataMember(Name = "valueUnit", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsValueUnit ValueUnit { get; set; }

        /// <summary>
        /// Gets or Sets Trade
        /// </summary>
        [DataMember(Name = "trade", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsTrade Trade { get; set; }

        /// <summary>
        /// Gets or Sets Accumulated
        /// </summary>
        [DataMember(Name = "accumulated", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsAccumulated Accumulated { get; set; }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name = "instrument", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsInstrument Instrument { get; set; }

        /// <summary>
        /// Gets or Sets Categorization
        /// </summary>
        [DataMember(Name = "categorization", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsCategorization Categorization { get; set; }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name = "lifeCycle", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsIssuer Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Exercise
        /// </summary>
        [DataMember(Name = "exercise", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsExercise Exercise { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name = "underlying", EmitDefaultValue = false)]
        public PostSecuritizedDerivativeNotationRankingIntradayListDataItemsUnderlying Underlying { get; set; }

        /// <summary>
        /// Indicates whether the securitized derivative is knocked-out (&#x60;true&#x60;) or not (&#x60;false&#x60;). Particularly relevant for knock-out certificates.
        /// </summary>
        /// <value>Indicates whether the securitized derivative is knocked-out (&#x60;true&#x60;) or not (&#x60;false&#x60;). Particularly relevant for knock-out certificates.</value>
        [DataMember(Name = "knockedOut", EmitDefaultValue = true)]
        public bool? KnockedOut { get; set; }

        /// <summary>
        /// Indicates whether the securitized derivative is knocked-in (&#x60;true&#x60;) or not (&#x60;false&#x60;). Particularly relevant for bonus certificates but also for securitized derivatives that might have additional protection such as reverse convertible bonds, discount certificates, and capital-protection certificates.
        /// </summary>
        /// <value>Indicates whether the securitized derivative is knocked-in (&#x60;true&#x60;) or not (&#x60;false&#x60;). Particularly relevant for bonus certificates but also for securitized derivatives that might have additional protection such as reverse convertible bonds, discount certificates, and capital-protection certificates.</value>
        [DataMember(Name = "knockedIn", EmitDefaultValue = true)]
        public bool? KnockedIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostSecuritizedDerivativeNotationRankingIntradayListDataItems {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Fsym: ").Append(Fsym).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  ValueUnit: ").Append(ValueUnit).Append("\n");
            sb.Append("  Trade: ").Append(Trade).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Accumulated: ").Append(Accumulated).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  Categorization: ").Append(Categorization).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Exercise: ").Append(Exercise).Append("\n");
            sb.Append("  Participation: ").Append(Participation).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  KnockedOut: ").Append(KnockedOut).Append("\n");
            sb.Append("  KnockedIn: ").Append(KnockedIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostSecuritizedDerivativeNotationRankingIntradayListDataItems);
        }

        /// <summary>
        /// Returns true if PostSecuritizedDerivativeNotationRankingIntradayListDataItems instances are equal
        /// </summary>
        /// <param name="input">Instance of PostSecuritizedDerivativeNotationRankingIntradayListDataItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostSecuritizedDerivativeNotationRankingIntradayListDataItems input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Fsym == input.Fsym ||
                    (this.Fsym != null &&
                    this.Fsym.Equals(input.Fsym))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.ValueUnit == input.ValueUnit ||
                    (this.ValueUnit != null &&
                    this.ValueUnit.Equals(input.ValueUnit))
                ) && 
                (
                    this.Trade == input.Trade ||
                    (this.Trade != null &&
                    this.Trade.Equals(input.Trade))
                ) && 
                (
                    this.Quality == input.Quality ||
                    this.Quality.Equals(input.Quality)
                ) && 
                (
                    this.Accumulated == input.Accumulated ||
                    (this.Accumulated != null &&
                    this.Accumulated.Equals(input.Accumulated))
                ) && 
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                ) && 
                (
                    this.Categorization == input.Categorization ||
                    (this.Categorization != null &&
                    this.Categorization.Equals(input.Categorization))
                ) && 
                (
                    this.LifeCycle == input.LifeCycle ||
                    (this.LifeCycle != null &&
                    this.LifeCycle.Equals(input.LifeCycle))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Exercise == input.Exercise ||
                    (this.Exercise != null &&
                    this.Exercise.Equals(input.Exercise))
                ) && 
                (
                    this.Participation == input.Participation ||
                    this.Participation.Equals(input.Participation)
                ) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.KnockedOut == input.KnockedOut ||
                    (this.KnockedOut != null &&
                    this.KnockedOut.Equals(input.KnockedOut))
                ) && 
                (
                    this.KnockedIn == input.KnockedIn ||
                    (this.KnockedIn != null &&
                    this.KnockedIn.Equals(input.KnockedIn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Fsym != null)
                {
                    hashCode = (hashCode * 59) + this.Fsym.GetHashCode();
                }
                if (this.Market != null)
                {
                    hashCode = (hashCode * 59) + this.Market.GetHashCode();
                }
                if (this.ValueUnit != null)
                {
                    hashCode = (hashCode * 59) + this.ValueUnit.GetHashCode();
                }
                if (this.Trade != null)
                {
                    hashCode = (hashCode * 59) + this.Trade.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quality.GetHashCode();
                if (this.Accumulated != null)
                {
                    hashCode = (hashCode * 59) + this.Accumulated.GetHashCode();
                }
                if (this.Instrument != null)
                {
                    hashCode = (hashCode * 59) + this.Instrument.GetHashCode();
                }
                if (this.Categorization != null)
                {
                    hashCode = (hashCode * 59) + this.Categorization.GetHashCode();
                }
                if (this.LifeCycle != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycle.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.Exercise != null)
                {
                    hashCode = (hashCode * 59) + this.Exercise.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Participation.GetHashCode();
                if (this.Underlying != null)
                {
                    hashCode = (hashCode * 59) + this.Underlying.GetHashCode();
                }
                if (this.KnockedOut != null)
                {
                    hashCode = (hashCode * 59) + this.KnockedOut.GetHashCode();
                }
                if (this.KnockedIn != null)
                {
                    hashCode = (hashCode * 59) + this.KnockedIn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
