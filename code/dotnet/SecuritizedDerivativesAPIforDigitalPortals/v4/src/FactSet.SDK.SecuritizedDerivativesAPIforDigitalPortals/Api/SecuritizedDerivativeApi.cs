/*
 * Securitized Derivatives API For Digital Portals
 *
 * Search for securitized derivative instruments, using a criteria-based screener. The API provides also fundamental data, notation-based key figures, list of barrier types, and details regarding the underlyings, their respective barriers and related cash flows, coupon lists and derived basic interest rate information.  The screener is based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifier types used as parameters must be valid and application must have permissions for them.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * life cycle: important dates in and features of the life cycle of the securitized derivatives instruments * filter by issuer, country of registration of the securitized derivatives * underlying and related barriers, including level and distance, and resulting cash flows * coupon data: where applicable, occurrence and frequency of coupon payments, current interest rate range * performance and volatility * product-specific ask-based key figures (not all key figures are available for all product types):     * bonus yield, sideways yield, maximum yield based on the ask price     * agio, discount     * spread     * break even, outperformance point, parity     * delta, weekly theta, vega, implied volatility     * leverage, omega     * intrinsic value, time value         Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term *level* is used instead of *price*, e.g. underlying level instead of underlying price. The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for equity and fixed income instruments: See the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals) and the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) for details.  
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client;
using FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecuritizedDerivativeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List of barrier types.
        /// </summary>
        /// <remarks>
        /// List of barrier types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetSecuritizedDerivativeBarrierTypeList(List<string> attributes = default(List<string>));

        /// <summary>
        /// List of barrier types.
        /// </summary>
        /// <remarks>
        /// List of barrier types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetSecuritizedDerivativeBarrierTypeListWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Fundamental data for a single securitized derivative.
        /// </summary>
        /// <remarks>
        /// Fundamental data for a single securitized derivative. Dates are interpreted in the timezone of the issuer.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetSecuritizedDerivativeGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Fundamental data for a single securitized derivative.
        /// </summary>
        /// <remarks>
        /// Fundamental data for a single securitized derivative. Dates are interpreted in the timezone of the issuer.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetSecuritizedDerivativeGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// Notation-based key figures of a securitized derivative.
        /// </summary>
        /// <remarks>
        /// Notation-based key figures of a securitized derivative. Not all key figures are applicable and/or calculated for all types of securitized derivatives. Following, some frequently used references:   Cover ratio - see attribute &#x60;underlyings.coverRatio&#x60; in endpoint &#x60;/securitized-derivative/underlying/list&#x60;.  Various barrier types (e.g. strike, knock in) - see endpoint &#x60;/securitized-derivative/barrier/type/list&#x60;.  Exercise right - see attribute &#x60;exercise.right&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Issue price - see attribute &#x60;issue.price&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Ask price - see attribute &#x60;prices.ask&#x60;.  Bid price - see attribute &#x60;prices.bid&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetSecuritizedDerivativeKeyFiguresNotationGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Notation-based key figures of a securitized derivative.
        /// </summary>
        /// <remarks>
        /// Notation-based key figures of a securitized derivative. Not all key figures are applicable and/or calculated for all types of securitized derivatives. Following, some frequently used references:   Cover ratio - see attribute &#x60;underlyings.coverRatio&#x60; in endpoint &#x60;/securitized-derivative/underlying/list&#x60;.  Various barrier types (e.g. strike, knock in) - see endpoint &#x60;/securitized-derivative/barrier/type/list&#x60;.  Exercise right - see attribute &#x60;exercise.right&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Issue price - see attribute &#x60;issue.price&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Ask price - see attribute &#x60;prices.ask&#x60;.  Bid price - see attribute &#x60;prices.bid&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetSecuritizedDerivativeKeyFiguresNotationGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of underlyings with barrier and cash flow information.
        /// </summary>
        /// <remarks>
        /// Provides details regarding the underlyings, their respective barriers and related cash flows (if any) of a securitized derivative. A unique combination of a cash flow and related barrier modalities, such as observation and level, is called a condition. In case of a securitized derivative with multiple underlyings, a condition comprises the respective barriers of all underlyings participating in that condition. Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetSecuritizedDerivativeUnderlyingList(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// List of underlyings with barrier and cash flow information.
        /// </summary>
        /// <remarks>
        /// Provides details regarding the underlyings, their respective barriers and related cash flows (if any) of a securitized derivative. A unique combination of a cash flow and related barrier modalities, such as observation and level, is called a condition. In case of a securitized derivative with multiple underlyings, a condition comprises the respective barriers of all underlyings participating in that condition. Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetSecuritizedDerivativeUnderlyingListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// Search for issuers of securitized derivatives.
        /// </summary>
        /// <remarks>
        /// Search for issuers of securitized derivatives, including issuer groups, which do not represent actual juristic persons, but are defined by FactSet to facilitate searching. FactSet does not consolidate the data provided by different suppliers, therefore the result may contain more than one identifier for a given issuer. The response is limited to 100 results.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeIssuerSearchRequest">Request Body</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 PostSecuritizedDerivativeIssuerSearch(PostSecuritizedDerivativeIssuerSearchRequest postSecuritizedDerivativeIssuerSearchRequest);

        /// <summary>
        /// Search for issuers of securitized derivatives.
        /// </summary>
        /// <remarks>
        /// Search for issuers of securitized derivatives, including issuer groups, which do not represent actual juristic persons, but are defined by FactSet to facilitate searching. FactSet does not consolidate the data provided by different suppliers, therefore the result may contain more than one identifier for a given issuer. The response is limited to 100 results.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeIssuerSearchRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> PostSecuritizedDerivativeIssuerSearchWithHttpInfo(PostSecuritizedDerivativeIssuerSearchRequest postSecuritizedDerivativeIssuerSearchRequest);
        /// <summary>
        /// Ranking of securitized derivatives&#39; notations using intraday figures.
        /// </summary>
        /// <remarks>
        /// Ranking of securitized derivatives&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, the selection of the notation depends on the sort attribute: - absolute and relative performance (see the response attributes &#x60;trade.performance.absolute&#x60; and &#x60;trade.performance.relative&#x60;) - the notation with the most recent trade price is used - number trades, trading value and trading volume (see the response attributes &#x60;accumulated.numberTrades&#x60;, &#x60;accumulated.tradingVolume&#x60; and &#x60;accumulated.tradingValue&#x60;) - the notation with highest (lowest) value is used  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameters &#x60;valueUnit&#x60; and/or &#x60;currency&#x60; have not been specified.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationRankingIntradayListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 PostSecuritizedDerivativeNotationRankingIntradayList(PostSecuritizedDerivativeNotationRankingIntradayListRequest postSecuritizedDerivativeNotationRankingIntradayListRequest = default(PostSecuritizedDerivativeNotationRankingIntradayListRequest));

        /// <summary>
        /// Ranking of securitized derivatives&#39; notations using intraday figures.
        /// </summary>
        /// <remarks>
        /// Ranking of securitized derivatives&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, the selection of the notation depends on the sort attribute: - absolute and relative performance (see the response attributes &#x60;trade.performance.absolute&#x60; and &#x60;trade.performance.relative&#x60;) - the notation with the most recent trade price is used - number trades, trading value and trading volume (see the response attributes &#x60;accumulated.numberTrades&#x60;, &#x60;accumulated.tradingVolume&#x60; and &#x60;accumulated.tradingValue&#x60;) - the notation with highest (lowest) value is used  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameters &#x60;valueUnit&#x60; and/or &#x60;currency&#x60; have not been specified.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationRankingIntradayListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> PostSecuritizedDerivativeNotationRankingIntradayListWithHttpInfo(PostSecuritizedDerivativeNotationRankingIntradayListRequest postSecuritizedDerivativeNotationRankingIntradayListRequest = default(PostSecuritizedDerivativeNotationRankingIntradayListRequest));
        /// <summary>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifiers used as parameters must be valid and entitled.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.   The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerSearchRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 PostSecuritizedDerivativeNotationScreenerSearch(PostSecuritizedDerivativeNotationScreenerSearchRequest postSecuritizedDerivativeNotationScreenerSearchRequest = default(PostSecuritizedDerivativeNotationScreenerSearchRequest));

        /// <summary>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifiers used as parameters must be valid and entitled.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.   The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerSearchRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> PostSecuritizedDerivativeNotationScreenerSearchWithHttpInfo(PostSecuritizedDerivativeNotationScreenerSearchRequest postSecuritizedDerivativeNotationScreenerSearchRequest = default(PostSecuritizedDerivativeNotationScreenerSearchRequest));
        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivative/notation/screener/search&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivatives/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/securitized-derivatives/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support possible values and value ranges for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are considered.   The possible values and value ranges can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerValueRangesGetRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 PostSecuritizedDerivativeNotationScreenerValueRangesGet(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest postSecuritizedDerivativeNotationScreenerValueRangesGetRequest = default(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest));

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivative/notation/screener/search&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivatives/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/securitized-derivatives/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support possible values and value ranges for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are considered.   The possible values and value ranges can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerValueRangesGetRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> PostSecuritizedDerivativeNotationScreenerValueRangesGetWithHttpInfo(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest postSecuritizedDerivativeNotationScreenerValueRangesGetRequest = default(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecuritizedDerivativeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List of barrier types.
        /// </summary>
        /// <remarks>
        /// List of barrier types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetSecuritizedDerivativeBarrierTypeListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of barrier types.
        /// </summary>
        /// <remarks>
        /// List of barrier types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetSecuritizedDerivativeBarrierTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fundamental data for a single securitized derivative.
        /// </summary>
        /// <remarks>
        /// Fundamental data for a single securitized derivative. Dates are interpreted in the timezone of the issuer.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetSecuritizedDerivativeGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fundamental data for a single securitized derivative.
        /// </summary>
        /// <remarks>
        /// Fundamental data for a single securitized derivative. Dates are interpreted in the timezone of the issuer.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetSecuritizedDerivativeGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Notation-based key figures of a securitized derivative.
        /// </summary>
        /// <remarks>
        /// Notation-based key figures of a securitized derivative. Not all key figures are applicable and/or calculated for all types of securitized derivatives. Following, some frequently used references:   Cover ratio - see attribute &#x60;underlyings.coverRatio&#x60; in endpoint &#x60;/securitized-derivative/underlying/list&#x60;.  Various barrier types (e.g. strike, knock in) - see endpoint &#x60;/securitized-derivative/barrier/type/list&#x60;.  Exercise right - see attribute &#x60;exercise.right&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Issue price - see attribute &#x60;issue.price&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Ask price - see attribute &#x60;prices.ask&#x60;.  Bid price - see attribute &#x60;prices.bid&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetSecuritizedDerivativeKeyFiguresNotationGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Notation-based key figures of a securitized derivative.
        /// </summary>
        /// <remarks>
        /// Notation-based key figures of a securitized derivative. Not all key figures are applicable and/or calculated for all types of securitized derivatives. Following, some frequently used references:   Cover ratio - see attribute &#x60;underlyings.coverRatio&#x60; in endpoint &#x60;/securitized-derivative/underlying/list&#x60;.  Various barrier types (e.g. strike, knock in) - see endpoint &#x60;/securitized-derivative/barrier/type/list&#x60;.  Exercise right - see attribute &#x60;exercise.right&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Issue price - see attribute &#x60;issue.price&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Ask price - see attribute &#x60;prices.ask&#x60;.  Bid price - see attribute &#x60;prices.bid&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetSecuritizedDerivativeKeyFiguresNotationGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of underlyings with barrier and cash flow information.
        /// </summary>
        /// <remarks>
        /// Provides details regarding the underlyings, their respective barriers and related cash flows (if any) of a securitized derivative. A unique combination of a cash flow and related barrier modalities, such as observation and level, is called a condition. In case of a securitized derivative with multiple underlyings, a condition comprises the respective barriers of all underlyings participating in that condition. Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetSecuritizedDerivativeUnderlyingListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of underlyings with barrier and cash flow information.
        /// </summary>
        /// <remarks>
        /// Provides details regarding the underlyings, their respective barriers and related cash flows (if any) of a securitized derivative. A unique combination of a cash flow and related barrier modalities, such as observation and level, is called a condition. In case of a securitized derivative with multiple underlyings, a condition comprises the respective barriers of all underlyings participating in that condition. Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetSecuritizedDerivativeUnderlyingListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for issuers of securitized derivatives.
        /// </summary>
        /// <remarks>
        /// Search for issuers of securitized derivatives, including issuer groups, which do not represent actual juristic persons, but are defined by FactSet to facilitate searching. FactSet does not consolidate the data provided by different suppliers, therefore the result may contain more than one identifier for a given issuer. The response is limited to 100 results.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeIssuerSearchRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> PostSecuritizedDerivativeIssuerSearchAsync(PostSecuritizedDerivativeIssuerSearchRequest postSecuritizedDerivativeIssuerSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for issuers of securitized derivatives.
        /// </summary>
        /// <remarks>
        /// Search for issuers of securitized derivatives, including issuer groups, which do not represent actual juristic persons, but are defined by FactSet to facilitate searching. FactSet does not consolidate the data provided by different suppliers, therefore the result may contain more than one identifier for a given issuer. The response is limited to 100 results.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeIssuerSearchRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PostSecuritizedDerivativeIssuerSearchWithHttpInfoAsync(PostSecuritizedDerivativeIssuerSearchRequest postSecuritizedDerivativeIssuerSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ranking of securitized derivatives&#39; notations using intraday figures.
        /// </summary>
        /// <remarks>
        /// Ranking of securitized derivatives&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, the selection of the notation depends on the sort attribute: - absolute and relative performance (see the response attributes &#x60;trade.performance.absolute&#x60; and &#x60;trade.performance.relative&#x60;) - the notation with the most recent trade price is used - number trades, trading value and trading volume (see the response attributes &#x60;accumulated.numberTrades&#x60;, &#x60;accumulated.tradingVolume&#x60; and &#x60;accumulated.tradingValue&#x60;) - the notation with highest (lowest) value is used  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameters &#x60;valueUnit&#x60; and/or &#x60;currency&#x60; have not been specified.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationRankingIntradayListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> PostSecuritizedDerivativeNotationRankingIntradayListAsync(PostSecuritizedDerivativeNotationRankingIntradayListRequest postSecuritizedDerivativeNotationRankingIntradayListRequest = default(PostSecuritizedDerivativeNotationRankingIntradayListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ranking of securitized derivatives&#39; notations using intraday figures.
        /// </summary>
        /// <remarks>
        /// Ranking of securitized derivatives&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, the selection of the notation depends on the sort attribute: - absolute and relative performance (see the response attributes &#x60;trade.performance.absolute&#x60; and &#x60;trade.performance.relative&#x60;) - the notation with the most recent trade price is used - number trades, trading value and trading volume (see the response attributes &#x60;accumulated.numberTrades&#x60;, &#x60;accumulated.tradingVolume&#x60; and &#x60;accumulated.tradingValue&#x60;) - the notation with highest (lowest) value is used  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameters &#x60;valueUnit&#x60; and/or &#x60;currency&#x60; have not been specified.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationRankingIntradayListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> PostSecuritizedDerivativeNotationRankingIntradayListWithHttpInfoAsync(PostSecuritizedDerivativeNotationRankingIntradayListRequest postSecuritizedDerivativeNotationRankingIntradayListRequest = default(PostSecuritizedDerivativeNotationRankingIntradayListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifiers used as parameters must be valid and entitled.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.   The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerSearchRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> PostSecuritizedDerivativeNotationScreenerSearchAsync(PostSecuritizedDerivativeNotationScreenerSearchRequest postSecuritizedDerivativeNotationScreenerSearchRequest = default(PostSecuritizedDerivativeNotationScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifiers used as parameters must be valid and entitled.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.   The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerSearchRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> PostSecuritizedDerivativeNotationScreenerSearchWithHttpInfoAsync(PostSecuritizedDerivativeNotationScreenerSearchRequest postSecuritizedDerivativeNotationScreenerSearchRequest = default(PostSecuritizedDerivativeNotationScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivative/notation/screener/search&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivatives/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/securitized-derivatives/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support possible values and value ranges for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are considered.   The possible values and value ranges can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerValueRangesGetRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> PostSecuritizedDerivativeNotationScreenerValueRangesGetAsync(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest postSecuritizedDerivativeNotationScreenerValueRangesGetRequest = default(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivative/notation/screener/search&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivatives/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/securitized-derivatives/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support possible values and value ranges for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are considered.   The possible values and value ranges can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerValueRangesGetRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> PostSecuritizedDerivativeNotationScreenerValueRangesGetWithHttpInfoAsync(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest postSecuritizedDerivativeNotationScreenerValueRangesGetRequest = default(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecuritizedDerivativeApi : ISecuritizedDerivativeApiSync, ISecuritizedDerivativeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecuritizedDerivativeApi : ISecuritizedDerivativeApi
    {
        private FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetSecuritizedDerivativeBarrierTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2001) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSecuritizedDerivativeGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSecuritizedDerivativeKeyFiguresNotationGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSecuritizedDerivativeUnderlyingListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2007) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostSecuritizedDerivativeIssuerSearchResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostSecuritizedDerivativeNotationRankingIntradayListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2004) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostSecuritizedDerivativeNotationScreenerSearchResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2006) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostSecuritizedDerivativeNotationScreenerValueRangesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2005) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecuritizedDerivativeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecuritizedDerivativeApi(string basePath)
        {
            this.Configuration = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecuritizedDerivativeApi(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SecuritizedDerivativeApi(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ISynchronousClient client, FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.IAsynchronousClient asyncClient, FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List of barrier types. List of barrier types.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetSecuritizedDerivativeBarrierTypeList(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetSecuritizedDerivativeBarrierTypeListWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of barrier types. List of barrier types.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> GetSecuritizedDerivativeBarrierTypeListWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSecuritizedDerivativeBarrierTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2001>("/securitized-derivative/barrier/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecuritizedDerivativeBarrierTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of barrier types. List of barrier types.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001>GetSecuritizedDerivativeBarrierTypeListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSecuritizedDerivativeBarrierTypeListWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of barrier types. List of barrier types.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetSecuritizedDerivativeBarrierTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSecuritizedDerivativeBarrierTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/securitized-derivative/barrier/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecuritizedDerivativeBarrierTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fundamental data for a single securitized derivative. Fundamental data for a single securitized derivative. Dates are interpreted in the timezone of the issuer.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetSecuritizedDerivativeGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetSecuritizedDerivativeGetWithHttpInfo(identifier, identifierType, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fundamental data for a single securitized derivative. Fundamental data for a single securitized derivative. Dates are interpreted in the timezone of the issuer.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> GetSecuritizedDerivativeGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeGet");
            }

            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSecuritizedDerivativeGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse200>("/securitized-derivative/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecuritizedDerivativeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Fundamental data for a single securitized derivative. Fundamental data for a single securitized derivative. Dates are interpreted in the timezone of the issuer.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>GetSecuritizedDerivativeGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSecuritizedDerivativeGetWithHttpInfoAsync(identifier, identifierType, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fundamental data for a single securitized derivative. Fundamental data for a single securitized derivative. Dates are interpreted in the timezone of the issuer.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetSecuritizedDerivativeGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeGet");
            }


            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSecuritizedDerivativeGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/securitized-derivative/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecuritizedDerivativeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notation-based key figures of a securitized derivative. Notation-based key figures of a securitized derivative. Not all key figures are applicable and/or calculated for all types of securitized derivatives. Following, some frequently used references:   Cover ratio - see attribute &#x60;underlyings.coverRatio&#x60; in endpoint &#x60;/securitized-derivative/underlying/list&#x60;.  Various barrier types (e.g. strike, knock in) - see endpoint &#x60;/securitized-derivative/barrier/type/list&#x60;.  Exercise right - see attribute &#x60;exercise.right&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Issue price - see attribute &#x60;issue.price&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Ask price - see attribute &#x60;prices.ask&#x60;.  Bid price - see attribute &#x60;prices.bid&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetSecuritizedDerivativeKeyFiguresNotationGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetSecuritizedDerivativeKeyFiguresNotationGetWithHttpInfo(identifier, identifierType, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notation-based key figures of a securitized derivative. Notation-based key figures of a securitized derivative. Not all key figures are applicable and/or calculated for all types of securitized derivatives. Following, some frequently used references:   Cover ratio - see attribute &#x60;underlyings.coverRatio&#x60; in endpoint &#x60;/securitized-derivative/underlying/list&#x60;.  Various barrier types (e.g. strike, knock in) - see endpoint &#x60;/securitized-derivative/barrier/type/list&#x60;.  Exercise right - see attribute &#x60;exercise.right&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Issue price - see attribute &#x60;issue.price&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Ask price - see attribute &#x60;prices.ask&#x60;.  Bid price - see attribute &#x60;prices.bid&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GetSecuritizedDerivativeKeyFiguresNotationGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeKeyFiguresNotationGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeKeyFiguresNotationGet");
            }

            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSecuritizedDerivativeKeyFiguresNotationGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2003>("/securitized-derivative/key-figures/notation/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecuritizedDerivativeKeyFiguresNotationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Notation-based key figures of a securitized derivative. Notation-based key figures of a securitized derivative. Not all key figures are applicable and/or calculated for all types of securitized derivatives. Following, some frequently used references:   Cover ratio - see attribute &#x60;underlyings.coverRatio&#x60; in endpoint &#x60;/securitized-derivative/underlying/list&#x60;.  Various barrier types (e.g. strike, knock in) - see endpoint &#x60;/securitized-derivative/barrier/type/list&#x60;.  Exercise right - see attribute &#x60;exercise.right&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Issue price - see attribute &#x60;issue.price&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Ask price - see attribute &#x60;prices.ask&#x60;.  Bid price - see attribute &#x60;prices.bid&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>GetSecuritizedDerivativeKeyFiguresNotationGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSecuritizedDerivativeKeyFiguresNotationGetWithHttpInfoAsync(identifier, identifierType, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notation-based key figures of a securitized derivative. Notation-based key figures of a securitized derivative. Not all key figures are applicable and/or calculated for all types of securitized derivatives. Following, some frequently used references:   Cover ratio - see attribute &#x60;underlyings.coverRatio&#x60; in endpoint &#x60;/securitized-derivative/underlying/list&#x60;.  Various barrier types (e.g. strike, knock in) - see endpoint &#x60;/securitized-derivative/barrier/type/list&#x60;.  Exercise right - see attribute &#x60;exercise.right&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Issue price - see attribute &#x60;issue.price&#x60; in endpoint &#x60;/securitized-derivative/get&#x60;.  Ask price - see attribute &#x60;prices.ask&#x60;.  Bid price - see attribute &#x60;prices.bid&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetSecuritizedDerivativeKeyFiguresNotationGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeKeyFiguresNotationGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeKeyFiguresNotationGet");
            }


            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSecuritizedDerivativeKeyFiguresNotationGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/securitized-derivative/key-figures/notation/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecuritizedDerivativeKeyFiguresNotationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of underlyings with barrier and cash flow information. Provides details regarding the underlyings, their respective barriers and related cash flows (if any) of a securitized derivative. A unique combination of a cash flow and related barrier modalities, such as observation and level, is called a condition. In case of a securitized derivative with multiple underlyings, a condition comprises the respective barriers of all underlyings participating in that condition. Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetSecuritizedDerivativeUnderlyingList(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetSecuritizedDerivativeUnderlyingListWithHttpInfo(identifier, identifierType, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of underlyings with barrier and cash flow information. Provides details regarding the underlyings, their respective barriers and related cash flows (if any) of a securitized derivative. A unique combination of a cash flow and related barrier modalities, such as observation and level, is called a condition. In case of a securitized derivative with multiple underlyings, a condition comprises the respective barriers of all underlyings participating in that condition. Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse<InlineResponse2007> GetSecuritizedDerivativeUnderlyingListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeUnderlyingList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeUnderlyingList");
            }

            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSecuritizedDerivativeUnderlyingListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2007>("/securitized-derivative/underlying/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecuritizedDerivativeUnderlyingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of underlyings with barrier and cash flow information. Provides details regarding the underlyings, their respective barriers and related cash flows (if any) of a securitized derivative. A unique combination of a cash flow and related barrier modalities, such as observation and level, is called a condition. In case of a securitized derivative with multiple underlyings, a condition comprises the respective barriers of all underlyings participating in that condition. Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007>GetSecuritizedDerivativeUnderlyingListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSecuritizedDerivativeUnderlyingListWithHttpInfoAsync(identifier, identifierType, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of underlyings with barrier and cash flow information. Provides details regarding the underlyings, their respective barriers and related cash flows (if any) of a securitized derivative. A unique combination of a cash flow and related barrier modalities, such as observation and level, is called a condition. In case of a securitized derivative with multiple underlyings, a condition comprises the respective barriers of all underlyings participating in that condition. Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetSecuritizedDerivativeUnderlyingListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeUnderlyingList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling SecuritizedDerivativeApi->GetSecuritizedDerivativeUnderlyingList");
            }


            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSecuritizedDerivativeUnderlyingListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/securitized-derivative/underlying/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecuritizedDerivativeUnderlyingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for issuers of securitized derivatives. Search for issuers of securitized derivatives, including issuer groups, which do not represent actual juristic persons, but are defined by FactSet to facilitate searching. FactSet does not consolidate the data provided by different suppliers, therefore the result may contain more than one identifier for a given issuer. The response is limited to 100 results.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeIssuerSearchRequest">Request Body</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 PostSecuritizedDerivativeIssuerSearch(PostSecuritizedDerivativeIssuerSearchRequest postSecuritizedDerivativeIssuerSearchRequest)
        {
            var localVarResponse = PostSecuritizedDerivativeIssuerSearchWithHttpInfo(postSecuritizedDerivativeIssuerSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for issuers of securitized derivatives. Search for issuers of securitized derivatives, including issuer groups, which do not represent actual juristic persons, but are defined by FactSet to facilitate searching. FactSet does not consolidate the data provided by different suppliers, therefore the result may contain more than one identifier for a given issuer. The response is limited to 100 results.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeIssuerSearchRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> PostSecuritizedDerivativeIssuerSearchWithHttpInfo(PostSecuritizedDerivativeIssuerSearchRequest postSecuritizedDerivativeIssuerSearchRequest)
        {
            // verify the required parameter 'postSecuritizedDerivativeIssuerSearchRequest' is set
            if (postSecuritizedDerivativeIssuerSearchRequest == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'postSecuritizedDerivativeIssuerSearchRequest' when calling SecuritizedDerivativeApi->PostSecuritizedDerivativeIssuerSearch");
            }

            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSecuritizedDerivativeIssuerSearchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostSecuritizedDerivativeIssuerSearchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2002>("/securitized-derivative/issuer/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecuritizedDerivativeIssuerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Search for issuers of securitized derivatives. Search for issuers of securitized derivatives, including issuer groups, which do not represent actual juristic persons, but are defined by FactSet to facilitate searching. FactSet does not consolidate the data provided by different suppliers, therefore the result may contain more than one identifier for a given issuer. The response is limited to 100 results.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeIssuerSearchRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>PostSecuritizedDerivativeIssuerSearchAsync(PostSecuritizedDerivativeIssuerSearchRequest postSecuritizedDerivativeIssuerSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostSecuritizedDerivativeIssuerSearchWithHttpInfoAsync(postSecuritizedDerivativeIssuerSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for issuers of securitized derivatives. Search for issuers of securitized derivatives, including issuer groups, which do not represent actual juristic persons, but are defined by FactSet to facilitate searching. FactSet does not consolidate the data provided by different suppliers, therefore the result may contain more than one identifier for a given issuer. The response is limited to 100 results.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeIssuerSearchRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PostSecuritizedDerivativeIssuerSearchWithHttpInfoAsync(PostSecuritizedDerivativeIssuerSearchRequest postSecuritizedDerivativeIssuerSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postSecuritizedDerivativeIssuerSearchRequest' is set
            if (postSecuritizedDerivativeIssuerSearchRequest == null)
            {
                throw new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'postSecuritizedDerivativeIssuerSearchRequest' when calling SecuritizedDerivativeApi->PostSecuritizedDerivativeIssuerSearch");
            }


            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSecuritizedDerivativeIssuerSearchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostSecuritizedDerivativeIssuerSearchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2002>("/securitized-derivative/issuer/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecuritizedDerivativeIssuerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ranking of securitized derivatives&#39; notations using intraday figures. Ranking of securitized derivatives&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, the selection of the notation depends on the sort attribute: - absolute and relative performance (see the response attributes &#x60;trade.performance.absolute&#x60; and &#x60;trade.performance.relative&#x60;) - the notation with the most recent trade price is used - number trades, trading value and trading volume (see the response attributes &#x60;accumulated.numberTrades&#x60;, &#x60;accumulated.tradingVolume&#x60; and &#x60;accumulated.tradingValue&#x60;) - the notation with highest (lowest) value is used  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameters &#x60;valueUnit&#x60; and/or &#x60;currency&#x60; have not been specified.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationRankingIntradayListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 PostSecuritizedDerivativeNotationRankingIntradayList(PostSecuritizedDerivativeNotationRankingIntradayListRequest postSecuritizedDerivativeNotationRankingIntradayListRequest = default(PostSecuritizedDerivativeNotationRankingIntradayListRequest))
        {
            var localVarResponse = PostSecuritizedDerivativeNotationRankingIntradayListWithHttpInfo(postSecuritizedDerivativeNotationRankingIntradayListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ranking of securitized derivatives&#39; notations using intraday figures. Ranking of securitized derivatives&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, the selection of the notation depends on the sort attribute: - absolute and relative performance (see the response attributes &#x60;trade.performance.absolute&#x60; and &#x60;trade.performance.relative&#x60;) - the notation with the most recent trade price is used - number trades, trading value and trading volume (see the response attributes &#x60;accumulated.numberTrades&#x60;, &#x60;accumulated.tradingVolume&#x60; and &#x60;accumulated.tradingValue&#x60;) - the notation with highest (lowest) value is used  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameters &#x60;valueUnit&#x60; and/or &#x60;currency&#x60; have not been specified.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationRankingIntradayListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> PostSecuritizedDerivativeNotationRankingIntradayListWithHttpInfo(PostSecuritizedDerivativeNotationRankingIntradayListRequest postSecuritizedDerivativeNotationRankingIntradayListRequest = default(PostSecuritizedDerivativeNotationRankingIntradayListRequest))
        {
            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSecuritizedDerivativeNotationRankingIntradayListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostSecuritizedDerivativeNotationRankingIntradayListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2004>("/securitized-derivative/notation/ranking/intraday/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecuritizedDerivativeNotationRankingIntradayList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Ranking of securitized derivatives&#39; notations using intraday figures. Ranking of securitized derivatives&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, the selection of the notation depends on the sort attribute: - absolute and relative performance (see the response attributes &#x60;trade.performance.absolute&#x60; and &#x60;trade.performance.relative&#x60;) - the notation with the most recent trade price is used - number trades, trading value and trading volume (see the response attributes &#x60;accumulated.numberTrades&#x60;, &#x60;accumulated.tradingVolume&#x60; and &#x60;accumulated.tradingValue&#x60;) - the notation with highest (lowest) value is used  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameters &#x60;valueUnit&#x60; and/or &#x60;currency&#x60; have not been specified.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationRankingIntradayListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004>PostSecuritizedDerivativeNotationRankingIntradayListAsync(PostSecuritizedDerivativeNotationRankingIntradayListRequest postSecuritizedDerivativeNotationRankingIntradayListRequest = default(PostSecuritizedDerivativeNotationRankingIntradayListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostSecuritizedDerivativeNotationRankingIntradayListWithHttpInfoAsync(postSecuritizedDerivativeNotationRankingIntradayListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ranking of securitized derivatives&#39; notations using intraday figures. Ranking of securitized derivatives&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, the selection of the notation depends on the sort attribute: - absolute and relative performance (see the response attributes &#x60;trade.performance.absolute&#x60; and &#x60;trade.performance.relative&#x60;) - the notation with the most recent trade price is used - number trades, trading value and trading volume (see the response attributes &#x60;accumulated.numberTrades&#x60;, &#x60;accumulated.tradingVolume&#x60; and &#x60;accumulated.tradingValue&#x60;) - the notation with highest (lowest) value is used  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameters &#x60;valueUnit&#x60; and/or &#x60;currency&#x60; have not been specified.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationRankingIntradayListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> PostSecuritizedDerivativeNotationRankingIntradayListWithHttpInfoAsync(PostSecuritizedDerivativeNotationRankingIntradayListRequest postSecuritizedDerivativeNotationRankingIntradayListRequest = default(PostSecuritizedDerivativeNotationRankingIntradayListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSecuritizedDerivativeNotationRankingIntradayListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostSecuritizedDerivativeNotationRankingIntradayListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2004>("/securitized-derivative/notation/ranking/intraday/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecuritizedDerivativeNotationRankingIntradayList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifiers used as parameters must be valid and entitled.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.   The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerSearchRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 PostSecuritizedDerivativeNotationScreenerSearch(PostSecuritizedDerivativeNotationScreenerSearchRequest postSecuritizedDerivativeNotationScreenerSearchRequest = default(PostSecuritizedDerivativeNotationScreenerSearchRequest))
        {
            var localVarResponse = PostSecuritizedDerivativeNotationScreenerSearchWithHttpInfo(postSecuritizedDerivativeNotationScreenerSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifiers used as parameters must be valid and entitled.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.   The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerSearchRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> PostSecuritizedDerivativeNotationScreenerSearchWithHttpInfo(PostSecuritizedDerivativeNotationScreenerSearchRequest postSecuritizedDerivativeNotationScreenerSearchRequest = default(PostSecuritizedDerivativeNotationScreenerSearchRequest))
        {
            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSecuritizedDerivativeNotationScreenerSearchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostSecuritizedDerivativeNotationScreenerSearchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2006>("/securitized-derivative/notation/screener/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecuritizedDerivativeNotationScreenerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifiers used as parameters must be valid and entitled.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.   The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerSearchRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006>PostSecuritizedDerivativeNotationScreenerSearchAsync(PostSecuritizedDerivativeNotationScreenerSearchRequest postSecuritizedDerivativeNotationScreenerSearchRequest = default(PostSecuritizedDerivativeNotationScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostSecuritizedDerivativeNotationScreenerSearchWithHttpInfoAsync(postSecuritizedDerivativeNotationScreenerSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. Screener for securitized derivatives&#39;s notations based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifiers used as parameters must be valid and entitled.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.   The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerSearchRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> PostSecuritizedDerivativeNotationScreenerSearchWithHttpInfoAsync(PostSecuritizedDerivativeNotationScreenerSearchRequest postSecuritizedDerivativeNotationScreenerSearchRequest = default(PostSecuritizedDerivativeNotationScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSecuritizedDerivativeNotationScreenerSearchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostSecuritizedDerivativeNotationScreenerSearchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2006>("/securitized-derivative/notation/screener/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecuritizedDerivativeNotationScreenerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivative/notation/screener/search&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivatives/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/securitized-derivatives/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support possible values and value ranges for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are considered.   The possible values and value ranges can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerValueRangesGetRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 PostSecuritizedDerivativeNotationScreenerValueRangesGet(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest postSecuritizedDerivativeNotationScreenerValueRangesGetRequest = default(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest))
        {
            var localVarResponse = PostSecuritizedDerivativeNotationScreenerValueRangesGetWithHttpInfo(postSecuritizedDerivativeNotationScreenerValueRangesGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivative/notation/screener/search&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivatives/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/securitized-derivatives/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support possible values and value ranges for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are considered.   The possible values and value ranges can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerValueRangesGetRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> PostSecuritizedDerivativeNotationScreenerValueRangesGetWithHttpInfo(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest postSecuritizedDerivativeNotationScreenerValueRangesGetRequest = default(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest))
        {
            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSecuritizedDerivativeNotationScreenerValueRangesGetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostSecuritizedDerivativeNotationScreenerValueRangesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2005>("/securitized-derivative/notation/screener/value-ranges/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecuritizedDerivativeNotationScreenerValueRangesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivative/notation/screener/search&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivatives/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/securitized-derivatives/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support possible values and value ranges for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are considered.   The possible values and value ranges can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerValueRangesGetRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005>PostSecuritizedDerivativeNotationScreenerValueRangesGetAsync(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest postSecuritizedDerivativeNotationScreenerValueRangesGetRequest = default(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostSecuritizedDerivativeNotationScreenerValueRangesGetWithHttpInfoAsync(postSecuritizedDerivativeNotationScreenerValueRangesGetRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivative/notation/screener/search&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/securitized-derivatives/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/securitized-derivatives/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.   Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term \&quot;level\&quot; is used instead of \&quot;price\&quot;, e.g. underlying level instead of underlying price.   The endpoint does not support possible values and value ranges for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are considered.   The possible values and value ranges can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSecuritizedDerivativeNotationScreenerValueRangesGetRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> PostSecuritizedDerivativeNotationScreenerValueRangesGetWithHttpInfoAsync(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest postSecuritizedDerivativeNotationScreenerValueRangesGetRequest = default(PostSecuritizedDerivativeNotationScreenerValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postSecuritizedDerivativeNotationScreenerValueRangesGetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostSecuritizedDerivativeNotationScreenerValueRangesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2005>("/securitized-derivative/notation/screener/value-ranges/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecuritizedDerivativeNotationScreenerValueRangesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
