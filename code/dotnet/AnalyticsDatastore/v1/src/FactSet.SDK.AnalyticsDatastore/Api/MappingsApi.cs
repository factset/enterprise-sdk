/*
 * Analytics Datastore API
 *
 * Allow clients to fetch precalculated Analytics through predeterministic URLs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.AnalyticsDatastore.Client;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.AnalyticsDatastore.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMappingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Redirects to the underlying Insight/Vault data in a Stach format.
        /// </summary>
        /// <remarks>
        /// The inclusion of a configId in the path indicates this is for Insight/Vault mappings only, as PA/SPAR mappings do not support the concept of configuration id.    Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="configId">The Vault configuration ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>void</returns>
        void GetInsightMapping(string document, string assetName, string reportId, string tileId, string accountId, string configId, DateTime date);

        /// <summary>
        /// Redirects to the underlying Insight/Vault data in a Stach format.
        /// </summary>
        /// <remarks>
        /// The inclusion of a configId in the path indicates this is for Insight/Vault mappings only, as PA/SPAR mappings do not support the concept of configuration id.    Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="configId">The Vault configuration ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetInsightMappingWithHttpInfo(string document, string assetName, string reportId, string tileId, string accountId, string configId, DateTime date);
        /// <summary>
        /// Redirects to the raw PPT/PDF output created by the Publisher service.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher document containing the report</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>void</returns>
        void GetPdfPptMapping(string document, string accountId, DateTime date);

        /// <summary>
        /// Redirects to the raw PPT/PDF output created by the Publisher service.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher document containing the report</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPdfPptMappingWithHttpInfo(string document, string accountId, DateTime date);
        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>void</returns>
        void GetStachMapping(string document, string assetName, string reportId, string tileId, string accountId, DateTime date);

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetStachMappingWithHttpInfo(string document, string assetName, string reportId, string tileId, string accountId, DateTime date);
        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format, with no as of date specified.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <returns>void</returns>
        void GetStachMappingNoDate(string document, string assetName, string reportId, string tileId, string accountId);

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format, with no as of date specified.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetStachMappingNoDateWithHttpInfo(string document, string assetName, string reportId, string tileId, string accountId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMappingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Redirects to the underlying Insight/Vault data in a Stach format.
        /// </summary>
        /// <remarks>
        /// The inclusion of a configId in the path indicates this is for Insight/Vault mappings only, as PA/SPAR mappings do not support the concept of configuration id.    Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="configId">The Vault configuration ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetInsightMappingAsync(string document, string assetName, string reportId, string tileId, string accountId, string configId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redirects to the underlying Insight/Vault data in a Stach format.
        /// </summary>
        /// <remarks>
        /// The inclusion of a configId in the path indicates this is for Insight/Vault mappings only, as PA/SPAR mappings do not support the concept of configuration id.    Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="configId">The Vault configuration ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetInsightMappingWithHttpInfoAsync(string document, string assetName, string reportId, string tileId, string accountId, string configId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Redirects to the raw PPT/PDF output created by the Publisher service.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher document containing the report</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPdfPptMappingAsync(string document, string accountId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redirects to the raw PPT/PDF output created by the Publisher service.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher document containing the report</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPdfPptMappingWithHttpInfoAsync(string document, string accountId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetStachMappingAsync(string document, string assetName, string reportId, string tileId, string accountId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStachMappingWithHttpInfoAsync(string document, string assetName, string reportId, string tileId, string accountId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format, with no as of date specified.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetStachMappingNoDateAsync(string document, string assetName, string reportId, string tileId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format, with no as of date specified.
        /// </summary>
        /// <remarks>
        /// Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStachMappingNoDateWithHttpInfoAsync(string document, string assetName, string reportId, string tileId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMappingsApi : IMappingsApiSync, IMappingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MappingsApi : IMappingsApi
    {
        private FactSet.SDK.AnalyticsDatastore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetInsightMappingResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPdfPptMappingResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetStachMappingResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetStachMappingNoDateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MappingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MappingsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.AnalyticsDatastore.Client.Configuration.MergeConfigurations(
                FactSet.SDK.AnalyticsDatastore.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.AnalyticsDatastore.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.AnalyticsDatastore.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.AnalyticsDatastore.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.AnalyticsDatastore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MappingsApi(FactSet.SDK.AnalyticsDatastore.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.AnalyticsDatastore.Client.Configuration.MergeConfigurations(
                FactSet.SDK.AnalyticsDatastore.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.AnalyticsDatastore.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.AnalyticsDatastore.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.AnalyticsDatastore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MappingsApi(FactSet.SDK.AnalyticsDatastore.Client.ISynchronousClient client, FactSet.SDK.AnalyticsDatastore.Client.IAsynchronousClient asyncClient, FactSet.SDK.AnalyticsDatastore.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.AnalyticsDatastore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.AnalyticsDatastore.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.AnalyticsDatastore.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.AnalyticsDatastore.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.AnalyticsDatastore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Redirects to the underlying Insight/Vault data in a Stach format. The inclusion of a configId in the path indicates this is for Insight/Vault mappings only, as PA/SPAR mappings do not support the concept of configuration id.    Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="configId">The Vault configuration ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>void</returns>
        public void GetInsightMapping(string document, string assetName, string reportId, string tileId, string accountId, string configId, DateTime date)
        {
            GetInsightMappingWithHttpInfo(document, assetName, reportId, tileId, accountId, configId, date);
        }

        /// <summary>
        /// Redirects to the underlying Insight/Vault data in a Stach format. The inclusion of a configId in the path indicates this is for Insight/Vault mappings only, as PA/SPAR mappings do not support the concept of configuration id.    Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="configId">The Vault configuration ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetInsightMappingWithHttpInfo(string document, string assetName, string reportId, string tileId, string accountId, string configId, DateTime date)
        {
            // verify the required parameter 'document' is set
            if (document == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'document' when calling MappingsApi->GetInsightMapping");
            }

            // verify the required parameter 'assetName' is set
            if (assetName == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'assetName' when calling MappingsApi->GetInsightMapping");
            }

            // verify the required parameter 'reportId' is set
            if (reportId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'reportId' when calling MappingsApi->GetInsightMapping");
            }

            // verify the required parameter 'tileId' is set
            if (tileId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'tileId' when calling MappingsApi->GetInsightMapping");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'accountId' when calling MappingsApi->GetInsightMapping");
            }

            // verify the required parameter 'configId' is set
            if (configId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'configId' when calling MappingsApi->GetInsightMapping");
            }

            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("document", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetName", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(assetName)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tileId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(tileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(configId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(new DateOnlyParameter(date))); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInsightMappingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/analytics/pub-datastore/swivel/v1/{document}/{assetName}/{reportId}/{tileId}/{accountId}/{configId}/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInsightMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Redirects to the underlying Insight/Vault data in a Stach format. The inclusion of a configId in the path indicates this is for Insight/Vault mappings only, as PA/SPAR mappings do not support the concept of configuration id.    Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="configId">The Vault configuration ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetInsightMappingAsync(string document, string assetName, string reportId, string tileId, string accountId, string configId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetInsightMappingWithHttpInfoAsync(document, assetName, reportId, tileId, accountId, configId, date, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Redirects to the underlying Insight/Vault data in a Stach format. The inclusion of a configId in the path indicates this is for Insight/Vault mappings only, as PA/SPAR mappings do not support the concept of configuration id.    Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="configId">The Vault configuration ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetInsightMappingWithHttpInfoAsync(string document, string assetName, string reportId, string tileId, string accountId, string configId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'document' is set
            if (document == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'document' when calling MappingsApi->GetInsightMapping");
            }

            // verify the required parameter 'assetName' is set
            if (assetName == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'assetName' when calling MappingsApi->GetInsightMapping");
            }

            // verify the required parameter 'reportId' is set
            if (reportId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'reportId' when calling MappingsApi->GetInsightMapping");
            }

            // verify the required parameter 'tileId' is set
            if (tileId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'tileId' when calling MappingsApi->GetInsightMapping");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'accountId' when calling MappingsApi->GetInsightMapping");
            }

            // verify the required parameter 'configId' is set
            if (configId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'configId' when calling MappingsApi->GetInsightMapping");
            }


            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("document", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetName", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(assetName)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tileId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(tileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(configId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(new DateOnlyParameter(date))); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInsightMappingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/analytics/pub-datastore/swivel/v1/{document}/{assetName}/{reportId}/{tileId}/{accountId}/{configId}/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInsightMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redirects to the raw PPT/PDF output created by the Publisher service. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher document containing the report</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>void</returns>
        public void GetPdfPptMapping(string document, string accountId, DateTime date)
        {
            GetPdfPptMappingWithHttpInfo(document, accountId, date);
        }

        /// <summary>
        /// Redirects to the raw PPT/PDF output created by the Publisher service. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher document containing the report</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPdfPptMappingWithHttpInfo(string document, string accountId, DateTime date)
        {
            // verify the required parameter 'document' is set
            if (document == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'document' when calling MappingsApi->GetPdfPptMapping");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'accountId' when calling MappingsApi->GetPdfPptMapping");
            }

            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("document", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(new DateOnlyParameter(date))); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPdfPptMappingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/analytics/pub-datastore/swivel/v1/{document}/{accountId}/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPdfPptMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Redirects to the raw PPT/PDF output created by the Publisher service. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher document containing the report</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPdfPptMappingAsync(string document, string accountId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetPdfPptMappingWithHttpInfoAsync(document, accountId, date, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Redirects to the raw PPT/PDF output created by the Publisher service. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher document containing the report</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPdfPptMappingWithHttpInfoAsync(string document, string accountId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'document' is set
            if (document == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'document' when calling MappingsApi->GetPdfPptMapping");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'accountId' when calling MappingsApi->GetPdfPptMapping");
            }


            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("document", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(new DateOnlyParameter(date))); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPdfPptMappingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/analytics/pub-datastore/swivel/v1/{document}/{accountId}/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPdfPptMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>void</returns>
        public void GetStachMapping(string document, string assetName, string reportId, string tileId, string accountId, DateTime date)
        {
            GetStachMappingWithHttpInfo(document, assetName, reportId, tileId, accountId, date);
        }

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetStachMappingWithHttpInfo(string document, string assetName, string reportId, string tileId, string accountId, DateTime date)
        {
            // verify the required parameter 'document' is set
            if (document == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'document' when calling MappingsApi->GetStachMapping");
            }

            // verify the required parameter 'assetName' is set
            if (assetName == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'assetName' when calling MappingsApi->GetStachMapping");
            }

            // verify the required parameter 'reportId' is set
            if (reportId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'reportId' when calling MappingsApi->GetStachMapping");
            }

            // verify the required parameter 'tileId' is set
            if (tileId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'tileId' when calling MappingsApi->GetStachMapping");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'accountId' when calling MappingsApi->GetStachMapping");
            }

            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("document", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetName", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(assetName)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tileId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(tileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(new DateOnlyParameter(date))); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStachMappingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/analytics/pub-datastore/swivel/v1/{document}/{assetName}/{reportId}/{tileId}/{accountId}/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStachMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetStachMappingAsync(string document, string assetName, string reportId, string tileId, string accountId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetStachMappingWithHttpInfoAsync(document, assetName, reportId, tileId, accountId, date, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="date">The as of date for the report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStachMappingWithHttpInfoAsync(string document, string assetName, string reportId, string tileId, string accountId, DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'document' is set
            if (document == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'document' when calling MappingsApi->GetStachMapping");
            }

            // verify the required parameter 'assetName' is set
            if (assetName == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'assetName' when calling MappingsApi->GetStachMapping");
            }

            // verify the required parameter 'reportId' is set
            if (reportId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'reportId' when calling MappingsApi->GetStachMapping");
            }

            // verify the required parameter 'tileId' is set
            if (tileId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'tileId' when calling MappingsApi->GetStachMapping");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'accountId' when calling MappingsApi->GetStachMapping");
            }


            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("document", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetName", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(assetName)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tileId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(tileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(new DateOnlyParameter(date))); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStachMappingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/analytics/pub-datastore/swivel/v1/{document}/{assetName}/{reportId}/{tileId}/{accountId}/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStachMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format, with no as of date specified. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <returns>void</returns>
        public void GetStachMappingNoDate(string document, string assetName, string reportId, string tileId, string accountId)
        {
            GetStachMappingNoDateWithHttpInfo(document, assetName, reportId, tileId, accountId);
        }

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format, with no as of date specified. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetStachMappingNoDateWithHttpInfo(string document, string assetName, string reportId, string tileId, string accountId)
        {
            // verify the required parameter 'document' is set
            if (document == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'document' when calling MappingsApi->GetStachMappingNoDate");
            }

            // verify the required parameter 'assetName' is set
            if (assetName == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'assetName' when calling MappingsApi->GetStachMappingNoDate");
            }

            // verify the required parameter 'reportId' is set
            if (reportId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'reportId' when calling MappingsApi->GetStachMappingNoDate");
            }

            // verify the required parameter 'tileId' is set
            if (tileId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'tileId' when calling MappingsApi->GetStachMappingNoDate");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'accountId' when calling MappingsApi->GetStachMappingNoDate");
            }

            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("document", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetName", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(assetName)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tileId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(tileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStachMappingNoDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/analytics/pub-datastore/swivel/v1/{document}/{assetName}/{reportId}/{tileId}/{accountId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStachMappingNoDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format, with no as of date specified. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetStachMappingNoDateAsync(string document, string assetName, string reportId, string tileId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetStachMappingNoDateWithHttpInfoAsync(document, assetName, reportId, tileId, accountId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Redirects to the underlying PA/SPAR data represented in a Stach format, with no as of date specified. Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using &#39;Try it out&#39;, so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="document">The Publisher or Analytics Datafeed document containing the report</param>
        /// <param name="assetName">The PA/SPAR asset name and extension</param>
        /// <param name="reportId">The PA/SPAR report ID</param>
        /// <param name="tileId">The PA/SPAR tile ID</param>
        /// <param name="accountId">The account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStachMappingNoDateWithHttpInfoAsync(string document, string assetName, string reportId, string tileId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'document' is set
            if (document == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'document' when calling MappingsApi->GetStachMappingNoDate");
            }

            // verify the required parameter 'assetName' is set
            if (assetName == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'assetName' when calling MappingsApi->GetStachMappingNoDate");
            }

            // verify the required parameter 'reportId' is set
            if (reportId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'reportId' when calling MappingsApi->GetStachMappingNoDate");
            }

            // verify the required parameter 'tileId' is set
            if (tileId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'tileId' when calling MappingsApi->GetStachMappingNoDate");
            }

            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'accountId' when calling MappingsApi->GetStachMappingNoDate");
            }


            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("document", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(document)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetName", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(assetName)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tileId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(tileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("accountId", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStachMappingNoDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/analytics/pub-datastore/swivel/v1/{document}/{assetName}/{reportId}/{tileId}/{accountId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStachMappingNoDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
