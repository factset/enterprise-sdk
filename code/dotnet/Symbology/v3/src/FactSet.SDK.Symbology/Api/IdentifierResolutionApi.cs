/*
 * FactSet Symbology API
 *
 * The FactSet Symbology API provides symbol resolution services, allowing clients to translate market identifiers into various symbology types such as, FactSet Permanent Identifiers, CUSIP, ISIN, SEDOL, Tickers, and LEIs. <p>Factset's Symbology API sits at the center of its hub-and-spoke data model, enabling you to quickly harmonize the expanding catalog of Content APIs.</p><p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Symbology.Client;
using FactSet.SDK.Symbology.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Symbology.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentifierResolutionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the specified output identifiers for the given input identifier.
        /// </summary>
        /// <remarks>
        /// The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange, a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region, geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity ) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierResolutionRequest">Request Body for Identifier Resolution.</param>
        /// <returns>IdentifierResolutionResponse</returns>
        IdentifierResolutionResponse BatchIdentifierResolution(IdentifierResolutionRequest identifierResolutionRequest);

        /// <summary>
        /// Returns the specified output identifiers for the given input identifier.
        /// </summary>
        /// <remarks>
        /// The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange, a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region, geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity ) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierResolutionRequest">Request Body for Identifier Resolution.</param>
        /// <returns>ApiResponse of IdentifierResolutionResponse</returns>
        ApiResponse<IdentifierResolutionResponse> BatchIdentifierResolutionWithHttpInfo(IdentifierResolutionRequest identifierResolutionRequest);
        /// <summary>
        /// Returns the specified output identifiers for the specified input identifier.
        /// </summary>
        /// <remarks>
        /// The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange is a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region is the geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested security or entity identifiers. All requested identifiers must be of the same type. This request value is sent back in the response as, &#x60;requestId&#39;. &lt;p&gt;***ids limit** &#x3D;  100 per request*&lt;/p&gt;   *&lt;p&gt;NOTE:  GET Method URL request lines are also limited to a total   length of 8192 bytes (8KB). In cases where the service allows for thousands   of ids, which may lead to exceeding this request line limit of 8KB, its   advised for any requests with large request lines to be requested through   the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="inputSymbolType">The type of symbol being inputted. Only one type of symbol is accepted with each request. </param>
        /// <param name="outputSymbolTypes">The type of symbols being outputted. Multiple types of symbols can be outputted with each request. The user must be authorized for the requested identifier type.</param>
        /// <returns>IdentifierResolutionResponse</returns>
        IdentifierResolutionResponse IdentifierResolution(List<string> ids, string inputSymbolType, List<string> outputSymbolTypes);

        /// <summary>
        /// Returns the specified output identifiers for the specified input identifier.
        /// </summary>
        /// <remarks>
        /// The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange is a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region is the geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested security or entity identifiers. All requested identifiers must be of the same type. This request value is sent back in the response as, &#x60;requestId&#39;. &lt;p&gt;***ids limit** &#x3D;  100 per request*&lt;/p&gt;   *&lt;p&gt;NOTE:  GET Method URL request lines are also limited to a total   length of 8192 bytes (8KB). In cases where the service allows for thousands   of ids, which may lead to exceeding this request line limit of 8KB, its   advised for any requests with large request lines to be requested through   the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="inputSymbolType">The type of symbol being inputted. Only one type of symbol is accepted with each request. </param>
        /// <param name="outputSymbolTypes">The type of symbols being outputted. Multiple types of symbols can be outputted with each request. The user must be authorized for the requested identifier type.</param>
        /// <returns>ApiResponse of IdentifierResolutionResponse</returns>
        ApiResponse<IdentifierResolutionResponse> IdentifierResolutionWithHttpInfo(List<string> ids, string inputSymbolType, List<string> outputSymbolTypes);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentifierResolutionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the specified output identifiers for the given input identifier.
        /// </summary>
        /// <remarks>
        /// The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange, a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region, geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity ) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierResolutionRequest">Request Body for Identifier Resolution.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentifierResolutionResponse</returns>
        System.Threading.Tasks.Task<IdentifierResolutionResponse> BatchIdentifierResolutionAsync(IdentifierResolutionRequest identifierResolutionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the specified output identifiers for the given input identifier.
        /// </summary>
        /// <remarks>
        /// The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange, a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region, geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity ) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierResolutionRequest">Request Body for Identifier Resolution.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentifierResolutionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentifierResolutionResponse>> BatchIdentifierResolutionWithHttpInfoAsync(IdentifierResolutionRequest identifierResolutionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the specified output identifiers for the specified input identifier.
        /// </summary>
        /// <remarks>
        /// The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange is a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region is the geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested security or entity identifiers. All requested identifiers must be of the same type. This request value is sent back in the response as, &#x60;requestId&#39;. &lt;p&gt;***ids limit** &#x3D;  100 per request*&lt;/p&gt;   *&lt;p&gt;NOTE:  GET Method URL request lines are also limited to a total   length of 8192 bytes (8KB). In cases where the service allows for thousands   of ids, which may lead to exceeding this request line limit of 8KB, its   advised for any requests with large request lines to be requested through   the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="inputSymbolType">The type of symbol being inputted. Only one type of symbol is accepted with each request. </param>
        /// <param name="outputSymbolTypes">The type of symbols being outputted. Multiple types of symbols can be outputted with each request. The user must be authorized for the requested identifier type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentifierResolutionResponse</returns>
        System.Threading.Tasks.Task<IdentifierResolutionResponse> IdentifierResolutionAsync(List<string> ids, string inputSymbolType, List<string> outputSymbolTypes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the specified output identifiers for the specified input identifier.
        /// </summary>
        /// <remarks>
        /// The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange is a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region is the geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested security or entity identifiers. All requested identifiers must be of the same type. This request value is sent back in the response as, &#x60;requestId&#39;. &lt;p&gt;***ids limit** &#x3D;  100 per request*&lt;/p&gt;   *&lt;p&gt;NOTE:  GET Method URL request lines are also limited to a total   length of 8192 bytes (8KB). In cases where the service allows for thousands   of ids, which may lead to exceeding this request line limit of 8KB, its   advised for any requests with large request lines to be requested through   the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="inputSymbolType">The type of symbol being inputted. Only one type of symbol is accepted with each request. </param>
        /// <param name="outputSymbolTypes">The type of symbols being outputted. Multiple types of symbols can be outputted with each request. The user must be authorized for the requested identifier type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentifierResolutionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentifierResolutionResponse>> IdentifierResolutionWithHttpInfoAsync(List<string> ids, string inputSymbolType, List<string> outputSymbolTypes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentifierResolutionApi : IIdentifierResolutionApiSync, IIdentifierResolutionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdentifierResolutionApi : IIdentifierResolutionApi
    {
        private FactSet.SDK.Symbology.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> BatchIdentifierResolutionResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(IdentifierResolutionResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> IdentifierResolutionResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(IdentifierResolutionResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifierResolutionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentifierResolutionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifierResolutionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentifierResolutionApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Symbology.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Symbology.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Symbology.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Symbology.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Symbology.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Symbology.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifierResolutionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdentifierResolutionApi(FactSet.SDK.Symbology.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Symbology.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Symbology.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Symbology.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Symbology.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Symbology.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifierResolutionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IdentifierResolutionApi(FactSet.SDK.Symbology.Client.ISynchronousClient client, FactSet.SDK.Symbology.Client.IAsynchronousClient asyncClient, FactSet.SDK.Symbology.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Symbology.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Symbology.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Symbology.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Symbology.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Symbology.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the specified output identifiers for the given input identifier. The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange, a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region, geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity ) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierResolutionRequest">Request Body for Identifier Resolution.</param>
        /// <returns>IdentifierResolutionResponse</returns>
        public IdentifierResolutionResponse BatchIdentifierResolution(IdentifierResolutionRequest identifierResolutionRequest)
        {
            var localVarResponse = BatchIdentifierResolutionWithHttpInfo(identifierResolutionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the specified output identifiers for the given input identifier. The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange, a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region, geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity ) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierResolutionRequest">Request Body for Identifier Resolution.</param>
        /// <returns>ApiResponse of IdentifierResolutionResponse</returns>
        public ApiResponse<IdentifierResolutionResponse> BatchIdentifierResolutionWithHttpInfo(IdentifierResolutionRequest identifierResolutionRequest)
        {
            // verify the required parameter 'identifierResolutionRequest' is set
            if (identifierResolutionRequest == null)
            {
                throw new FactSet.SDK.Symbology.Client.ApiException(400, "Missing required parameter 'identifierResolutionRequest' when calling IdentifierResolutionApi->BatchIdentifierResolution");
            }

            FactSet.SDK.Symbology.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Symbology.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Symbology.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Symbology.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identifierResolutionRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Symbology.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = BatchIdentifierResolutionResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            IdentifierResolutionResponse>("/symbology/v3/identifier-resolution", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchIdentifierResolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the specified output identifiers for the given input identifier. The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange, a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region, geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity ) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierResolutionRequest">Request Body for Identifier Resolution.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentifierResolutionResponse</returns>
        public async System.Threading.Tasks.Task<IdentifierResolutionResponse>BatchIdentifierResolutionAsync(IdentifierResolutionRequest identifierResolutionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await BatchIdentifierResolutionWithHttpInfoAsync(identifierResolutionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the specified output identifiers for the given input identifier. The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange, a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region, geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity ) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierResolutionRequest">Request Body for Identifier Resolution.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentifierResolutionResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<IdentifierResolutionResponse>> BatchIdentifierResolutionWithHttpInfoAsync(IdentifierResolutionRequest identifierResolutionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifierResolutionRequest' is set
            if (identifierResolutionRequest == null)
            {
                throw new FactSet.SDK.Symbology.Client.ApiException(400, "Missing required parameter 'identifierResolutionRequest' when calling IdentifierResolutionApi->BatchIdentifierResolution");
            }


            FactSet.SDK.Symbology.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Symbology.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Symbology.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Symbology.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identifierResolutionRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Symbology.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = BatchIdentifierResolutionResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentifierResolutionResponse>("/symbology/v3/identifier-resolution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchIdentifierResolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the specified output identifiers for the specified input identifier. The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange is a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region is the geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested security or entity identifiers. All requested identifiers must be of the same type. This request value is sent back in the response as, &#x60;requestId&#39;. &lt;p&gt;***ids limit** &#x3D;  100 per request*&lt;/p&gt;   *&lt;p&gt;NOTE:  GET Method URL request lines are also limited to a total   length of 8192 bytes (8KB). In cases where the service allows for thousands   of ids, which may lead to exceeding this request line limit of 8KB, its   advised for any requests with large request lines to be requested through   the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="inputSymbolType">The type of symbol being inputted. Only one type of symbol is accepted with each request. </param>
        /// <param name="outputSymbolTypes">The type of symbols being outputted. Multiple types of symbols can be outputted with each request. The user must be authorized for the requested identifier type.</param>
        /// <returns>IdentifierResolutionResponse</returns>
        public IdentifierResolutionResponse IdentifierResolution(List<string> ids, string inputSymbolType, List<string> outputSymbolTypes)
        {
            var localVarResponse = IdentifierResolutionWithHttpInfo(ids, inputSymbolType, outputSymbolTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the specified output identifiers for the specified input identifier. The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange is a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region is the geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested security or entity identifiers. All requested identifiers must be of the same type. This request value is sent back in the response as, &#x60;requestId&#39;. &lt;p&gt;***ids limit** &#x3D;  100 per request*&lt;/p&gt;   *&lt;p&gt;NOTE:  GET Method URL request lines are also limited to a total   length of 8192 bytes (8KB). In cases where the service allows for thousands   of ids, which may lead to exceeding this request line limit of 8KB, its   advised for any requests with large request lines to be requested through   the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="inputSymbolType">The type of symbol being inputted. Only one type of symbol is accepted with each request. </param>
        /// <param name="outputSymbolTypes">The type of symbols being outputted. Multiple types of symbols can be outputted with each request. The user must be authorized for the requested identifier type.</param>
        /// <returns>ApiResponse of IdentifierResolutionResponse</returns>
        public ApiResponse<IdentifierResolutionResponse> IdentifierResolutionWithHttpInfo(List<string> ids, string inputSymbolType, List<string> outputSymbolTypes)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.Symbology.Client.ApiException(400, "Missing required parameter 'ids' when calling IdentifierResolutionApi->IdentifierResolution");
            }

            // verify the required parameter 'inputSymbolType' is set
            if (inputSymbolType == null)
            {
                throw new FactSet.SDK.Symbology.Client.ApiException(400, "Missing required parameter 'inputSymbolType' when calling IdentifierResolutionApi->IdentifierResolution");
            }

            // verify the required parameter 'outputSymbolTypes' is set
            if (outputSymbolTypes == null)
            {
                throw new FactSet.SDK.Symbology.Client.ApiException(400, "Missing required parameter 'outputSymbolTypes' when calling IdentifierResolutionApi->IdentifierResolution");
            }

            FactSet.SDK.Symbology.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Symbology.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Symbology.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Symbology.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Symbology.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Symbology.Client.ClientUtils.ParameterToMultiMap("", "inputSymbolType", inputSymbolType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Symbology.Client.ClientUtils.ParameterToMultiMap("csv", "outputSymbolTypes", outputSymbolTypes));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Symbology.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = IdentifierResolutionResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            IdentifierResolutionResponse>("/symbology/v3/identifier-resolution", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentifierResolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the specified output identifiers for the specified input identifier. The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange is a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region is the geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested security or entity identifiers. All requested identifiers must be of the same type. This request value is sent back in the response as, &#x60;requestId&#39;. &lt;p&gt;***ids limit** &#x3D;  100 per request*&lt;/p&gt;   *&lt;p&gt;NOTE:  GET Method URL request lines are also limited to a total   length of 8192 bytes (8KB). In cases where the service allows for thousands   of ids, which may lead to exceeding this request line limit of 8KB, its   advised for any requests with large request lines to be requested through   the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="inputSymbolType">The type of symbol being inputted. Only one type of symbol is accepted with each request. </param>
        /// <param name="outputSymbolTypes">The type of symbols being outputted. Multiple types of symbols can be outputted with each request. The user must be authorized for the requested identifier type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentifierResolutionResponse</returns>
        public async System.Threading.Tasks.Task<IdentifierResolutionResponse>IdentifierResolutionAsync(List<string> ids, string inputSymbolType, List<string> outputSymbolTypes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await IdentifierResolutionWithHttpInfoAsync(ids, inputSymbolType, outputSymbolTypes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the specified output identifiers for the specified input identifier. The Identifier Resolution endpoint provides flexibility for requesting and receiving both third-party and FactSet Permanent identifiers. Users can both input and output most of the listed identifiers, with exceptions noted below.  All input and output symbols must be declared, and users have the ability to resolve one input symbol to many different output symbols in one request.  * **BIC*** - Bank Identification Code (e.g. ABXXHKH1) * **CIK** - Edgar Central Index Keys (e.g. 0000100331) * **CRD** - Central Registration Depository (e.g. 149722) * **EIN** - Employer Identification Number (e.g. 953540776) * **FITCH*** - Fitch Ratings Identifier (e.g. 47504) * **LEI** - Legal Entity Identifier (e.g. 549300A6K7JX8EX2QZ33) * **MD*** - Moody&#39;s Ratings Identifier (e.g. 0823736553) * **SPR*** - S&amp;P Ratings Identifier (e.g. 301939) * **VALOREN** - Valoren (\&quot;Valor\&quot;) Identification (e.g. 685558) (Input only) * **WKN*** - German Securities Identification (\&quot;Wertpapierkennnummer\&quot;) (e.g. A0MU9T) * **UKCH** - UK Company House Identifier (e.g.CE012494) * **RSSD** - Federal Reserve RSSD Identifier (1139297) * **SEDOL*** * **CUSIP*** * **fsymEntityId** - FactSet entity Id * **fsymSecurityId** - FactSet security level permanent identifier * **fsymRegionalId** - FactSet regional level permanent identifier * **fsymListingId** - FactSet listing level permanent identifier * **ISIN*** * **tickerExchange** - Ticker Exchange is a marketplace where stocks, bonds, commodities, and derivatives are bought and sold. (e.g. GOOGL-NAS) * **tickerRegion** - Ticker Region is the geographical region or market segment where a particular stock or security is listed and traded. (e.g. GOOGL-US) * **bloombergFigi** - Bloomberg Listing/Regional/Security Identifier (output symbols: bloombergFigiListing, bloombergFigiRegional &amp; bloombergFigiSecurity) (e.g. BBG009S39JY5) * **bloombergTicker** - Bloomberg Listing and Regional Ticker Identifier (output symbols: bloombergRegionalTicker &amp; bloombergListingTicker) (e.g. GOOGL UW) * **GVKEY** - CompuStat Entity Identifier (e.g. 063172)(Input only) * **GVKEY &amp; IID** - CompuStat Security Identifier (e.g.063172001) (Input only) * **JCN** - Japan Corporate Number (e.g. 9011101021173) * **LoanX** - Markit Bank Loan Security Identifier (e.g. LX130668) (Input only) * **MarkitRed** - Markit Entity Identifier (e.g. 3D337C) (Input only)  **These symbol types require additional subscriptions. If you would like to gain access to these symbol types, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Symbology.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested security or entity identifiers. All requested identifiers must be of the same type. This request value is sent back in the response as, &#x60;requestId&#39;. &lt;p&gt;***ids limit** &#x3D;  100 per request*&lt;/p&gt;   *&lt;p&gt;NOTE:  GET Method URL request lines are also limited to a total   length of 8192 bytes (8KB). In cases where the service allows for thousands   of ids, which may lead to exceeding this request line limit of 8KB, its   advised for any requests with large request lines to be requested through   the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="inputSymbolType">The type of symbol being inputted. Only one type of symbol is accepted with each request. </param>
        /// <param name="outputSymbolTypes">The type of symbols being outputted. Multiple types of symbols can be outputted with each request. The user must be authorized for the requested identifier type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentifierResolutionResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<IdentifierResolutionResponse>> IdentifierResolutionWithHttpInfoAsync(List<string> ids, string inputSymbolType, List<string> outputSymbolTypes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.Symbology.Client.ApiException(400, "Missing required parameter 'ids' when calling IdentifierResolutionApi->IdentifierResolution");
            }

            // verify the required parameter 'inputSymbolType' is set
            if (inputSymbolType == null)
            {
                throw new FactSet.SDK.Symbology.Client.ApiException(400, "Missing required parameter 'inputSymbolType' when calling IdentifierResolutionApi->IdentifierResolution");
            }

            // verify the required parameter 'outputSymbolTypes' is set
            if (outputSymbolTypes == null)
            {
                throw new FactSet.SDK.Symbology.Client.ApiException(400, "Missing required parameter 'outputSymbolTypes' when calling IdentifierResolutionApi->IdentifierResolution");
            }


            FactSet.SDK.Symbology.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Symbology.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Symbology.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Symbology.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Symbology.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Symbology.Client.ClientUtils.ParameterToMultiMap("", "inputSymbolType", inputSymbolType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Symbology.Client.ClientUtils.ParameterToMultiMap("csv", "outputSymbolTypes", outputSymbolTypes));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Symbology.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = IdentifierResolutionResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IdentifierResolutionResponse>("/symbology/v3/identifier-resolution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentifierResolution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
