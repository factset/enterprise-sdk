/*
 * FactSet Symbology API
 *
 * The FactSet Symbology API provides symbol resolution services, allowing clients to translate market identifiers into various symbology types such as, FactSet Permanent Identifiers, CUSIP, ISIN, SEDOL, Tickers, and LEIs. <p>Factset's Symbology API sits at the center of its hub-and-spoke data model, enabling you to quickly harmonize the expanding catalog of Content APIs.</p><p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Symbology.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Symbology.Model
{
    /// <summary>
    /// Historical Identifier Resolution data object.
    /// </summary>
    [DataContract(Name = "identifierResolutionHistorical")]
    public partial class IdentifierResolutionHistorical : IEquatable<IdentifierResolutionHistorical>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifierResolutionHistorical" /> class.
        /// </summary>
        /// <param name="requestId">Identifier inputted in the request..</param>
        /// <param name="inputSymbolType">The type of identifier inputted in the request.</param>
        /// <param name="name">Name of the requested identifier.</param>
        /// <param name="frefListingExchange">The 3 digit fref exchange code for the primary exchange of the security.</param>
        /// <param name="currency">The 3 digit ISO code for the currency.</param>
        /// <param name="outputType">Type of identifier outputted..</param>
        /// <param name="value">Requested identifier..</param>
        /// <param name="startDate">Start Date in YYYY-MM-DD format..</param>
        /// <param name="endDate">End Date in YYYY-MM-DD format..</param>
        public IdentifierResolutionHistorical(string requestId = default(string), string inputSymbolType = default(string), string name = default(string), string frefListingExchange = default(string), string currency = default(string), string outputType = default(string), string value = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            this.RequestId = requestId;
            this.InputSymbolType = inputSymbolType;
            this.Name = name;
            this.FrefListingExchange = frefListingExchange;
            this.Currency = currency;
            this.OutputType = outputType;
            this.Value = value;
            this.StartDate = startDate;
            this.EndDate = endDate;
        }

        /// <summary>
        /// Identifier inputted in the request.
        /// </summary>
        /// <value>Identifier inputted in the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// The type of identifier inputted in the request
        /// </summary>
        /// <value>The type of identifier inputted in the request</value>
        [DataMember(Name = "inputSymbolType", EmitDefaultValue = false)]
        public string InputSymbolType { get; set; }

        /// <summary>
        /// Name of the requested identifier
        /// </summary>
        /// <value>Name of the requested identifier</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The 3 digit fref exchange code for the primary exchange of the security
        /// </summary>
        /// <value>The 3 digit fref exchange code for the primary exchange of the security</value>
        [DataMember(Name = "frefListingExchange", EmitDefaultValue = true)]
        public string FrefListingExchange { get; set; }

        /// <summary>
        /// The 3 digit ISO code for the currency
        /// </summary>
        /// <value>The 3 digit ISO code for the currency</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Type of identifier outputted.
        /// </summary>
        /// <value>Type of identifier outputted.</value>
        [DataMember(Name = "outputType", EmitDefaultValue = true)]
        public string OutputType { get; set; }

        /// <summary>
        /// Requested identifier.
        /// </summary>
        /// <value>Requested identifier.</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Start Date in YYYY-MM-DD format.
        /// </summary>
        /// <value>Start Date in YYYY-MM-DD format.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// End Date in YYYY-MM-DD format.
        /// </summary>
        /// <value>End Date in YYYY-MM-DD format.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentifierResolutionHistorical {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  InputSymbolType: ").Append(InputSymbolType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FrefListingExchange: ").Append(FrefListingExchange).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  OutputType: ").Append(OutputType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentifierResolutionHistorical);
        }

        /// <summary>
        /// Returns true if IdentifierResolutionHistorical instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentifierResolutionHistorical to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentifierResolutionHistorical input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.InputSymbolType == input.InputSymbolType ||
                    (this.InputSymbolType != null &&
                    this.InputSymbolType.Equals(input.InputSymbolType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FrefListingExchange == input.FrefListingExchange ||
                    (this.FrefListingExchange != null &&
                    this.FrefListingExchange.Equals(input.FrefListingExchange))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.OutputType == input.OutputType ||
                    (this.OutputType != null &&
                    this.OutputType.Equals(input.OutputType))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.InputSymbolType != null)
                {
                    hashCode = (hashCode * 59) + this.InputSymbolType.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FrefListingExchange != null)
                {
                    hashCode = (hashCode * 59) + this.FrefListingExchange.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.OutputType != null)
                {
                    hashCode = (hashCode * 59) + this.OutputType.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
