/*
 * BookBuilder
 *
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.BookBuilder.Client;
using FactSet.SDK.BookBuilder.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.BookBuilder.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBooksFetchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves book in PDF format
        /// </summary>
        /// <remarks>
        /// This endpoint uses the BookId returned from any of the request above. Returns the URL to load the book for the book ID requested. The URL will be in JSON format, the final book will be in PDF format. &lt;br&gt;&lt;br&gt; NOTE - - The execution of this endpoint requires an extra step within the developer portal due to authentication limitations. When using the actual API, a successful response for this endpoint will be the PDF book rather than the URL to the PDF. &lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;i&gt;The actual endpoint is &lt;/b&gt;&lt;font color&#x3D;blue&gt;https://api.factset.com/book-builder-api/v1/download-api-book/{book_id}&lt;/font&gt;&lt;/i&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookId">A string representing the unique ID for a specific book. This ID must be provided in the URL path.</param>
        /// <returns>BooksFetchApi.DownloadBookResponseWrapper</returns>
        BooksFetchApi.DownloadBookResponseWrapper DownloadBook(string bookId);

        /// <summary>
        /// Retrieves book in PDF format
        /// </summary>
        /// <remarks>
        /// This endpoint uses the BookId returned from any of the request above. Returns the URL to load the book for the book ID requested. The URL will be in JSON format, the final book will be in PDF format. &lt;br&gt;&lt;br&gt; NOTE - - The execution of this endpoint requires an extra step within the developer portal due to authentication limitations. When using the actual API, a successful response for this endpoint will be the PDF book rather than the URL to the PDF. &lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;i&gt;The actual endpoint is &lt;/b&gt;&lt;font color&#x3D;blue&gt;https://api.factset.com/book-builder-api/v1/download-api-book/{book_id}&lt;/font&gt;&lt;/i&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookId">A string representing the unique ID for a specific book. This ID must be provided in the URL path.</param>
        /// <returns>ApiResponse of BooksFetchApi.DownloadBookResponseWrapper</returns>
        ApiResponse<BooksFetchApi.DownloadBookResponseWrapper> DownloadBookWithHttpInfo(string bookId);
        /// <summary>
        /// Check out the books that are in the book library
        /// </summary>
        /// <remarks>
        /// Retrieves the list of books that were previously created and are available in the client&#39;s book library
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<BookInfo></returns>
        List<BookInfo> GetBookList();

        /// <summary>
        /// Check out the books that are in the book library
        /// </summary>
        /// <remarks>
        /// Retrieves the list of books that were previously created and are available in the client&#39;s book library
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<BookInfo></returns>
        ApiResponse<List<BookInfo>> GetBookListWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBooksFetchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves book in PDF format
        /// </summary>
        /// <remarks>
        /// This endpoint uses the BookId returned from any of the request above. Returns the URL to load the book for the book ID requested. The URL will be in JSON format, the final book will be in PDF format. &lt;br&gt;&lt;br&gt; NOTE - - The execution of this endpoint requires an extra step within the developer portal due to authentication limitations. When using the actual API, a successful response for this endpoint will be the PDF book rather than the URL to the PDF. &lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;i&gt;The actual endpoint is &lt;/b&gt;&lt;font color&#x3D;blue&gt;https://api.factset.com/book-builder-api/v1/download-api-book/{book_id}&lt;/font&gt;&lt;/i&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookId">A string representing the unique ID for a specific book. This ID must be provided in the URL path.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnableBookDownload</returns>
        System.Threading.Tasks.Task<BooksFetchApi.DownloadBookResponseWrapper> DownloadBookAsync(string bookId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves book in PDF format
        /// </summary>
        /// <remarks>
        /// This endpoint uses the BookId returned from any of the request above. Returns the URL to load the book for the book ID requested. The URL will be in JSON format, the final book will be in PDF format. &lt;br&gt;&lt;br&gt; NOTE - - The execution of this endpoint requires an extra step within the developer portal due to authentication limitations. When using the actual API, a successful response for this endpoint will be the PDF book rather than the URL to the PDF. &lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;i&gt;The actual endpoint is &lt;/b&gt;&lt;font color&#x3D;blue&gt;https://api.factset.com/book-builder-api/v1/download-api-book/{book_id}&lt;/font&gt;&lt;/i&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookId">A string representing the unique ID for a specific book. This ID must be provided in the URL path.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BooksFetchApi.DownloadBookResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<BooksFetchApi.DownloadBookResponseWrapper>> DownloadBookWithHttpInfoAsync(string bookId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check out the books that are in the book library
        /// </summary>
        /// <remarks>
        /// Retrieves the list of books that were previously created and are available in the client&#39;s book library
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BookInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BookInfo>> GetBookListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check out the books that are in the book library
        /// </summary>
        /// <remarks>
        /// Retrieves the list of books that were previously created and are available in the client&#39;s book library
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<BookInfo>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BookInfo>>> GetBookListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBooksFetchApi : IBooksFetchApiSync, IBooksFetchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BooksFetchApi : IBooksFetchApi
    {
        private FactSet.SDK.BookBuilder.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> DownloadBookResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EnableBookDownload) },
            { (HttpStatusCode)202, typeof(List<BookProcessingResponseItem>) },
            { (HttpStatusCode)400, typeof(InvalidDownloadBookAwsRequest) },
            { (HttpStatusCode)401, typeof(string) },
            { (HttpStatusCode)503, typeof(InvalidDownloadBookAwsRequest) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBookListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<BookInfo>) },
            { (HttpStatusCode)401, typeof(string) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        
        /// <summary>
        /// Wrapper to support GET /download-api-book-aws/{book_id} returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : EnableBookDownload<br />
        /// Successful response contains URL to load the book for the BookID requested
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : List<BookProcessingResponseItem><br />
        /// Book is processing. Please check back later.
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// DownloadBookResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     EnableBookDownload data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     List<BookProcessingResponseItem> data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class DownloadBookResponseWrapper {

            /// <summary>This constructor initializes the new DownloadBookResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public DownloadBookResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Successful response contains URL to load the book for the BookID requested
            /// </summary>
            public EnableBookDownload Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.BookBuilder.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (EnableBookDownload) Response;
                }
            }
            
            /// <summary>
            /// Book is processing. Please check back later.
            /// </summary>
            public List<BookProcessingResponseItem> Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.BookBuilder.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (List<BookProcessingResponseItem>) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksFetchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BooksFetchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksFetchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BooksFetchApi(string basePath)
        {
            this.Configuration = FactSet.SDK.BookBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BookBuilder.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.BookBuilder.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.BookBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksFetchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BooksFetchApi(FactSet.SDK.BookBuilder.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.BookBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BookBuilder.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.BookBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksFetchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BooksFetchApi(FactSet.SDK.BookBuilder.Client.ISynchronousClient client, FactSet.SDK.BookBuilder.Client.IAsynchronousClient asyncClient, FactSet.SDK.BookBuilder.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.BookBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.BookBuilder.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.BookBuilder.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.BookBuilder.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.BookBuilder.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves book in PDF format This endpoint uses the BookId returned from any of the request above. Returns the URL to load the book for the book ID requested. The URL will be in JSON format, the final book will be in PDF format. &lt;br&gt;&lt;br&gt; NOTE - - The execution of this endpoint requires an extra step within the developer portal due to authentication limitations. When using the actual API, a successful response for this endpoint will be the PDF book rather than the URL to the PDF. &lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;i&gt;The actual endpoint is &lt;/b&gt;&lt;font color&#x3D;blue&gt;https://api.factset.com/book-builder-api/v1/download-api-book/{book_id}&lt;/font&gt;&lt;/i&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookId">A string representing the unique ID for a specific book. This ID must be provided in the URL path.</param>
        /// <returns>BooksFetchApi.DownloadBookResponseWrapper</returns>
        public BooksFetchApi.DownloadBookResponseWrapper DownloadBook(string bookId)
        {
            var localVarResponse = DownloadBookWithHttpInfo(bookId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves book in PDF format This endpoint uses the BookId returned from any of the request above. Returns the URL to load the book for the book ID requested. The URL will be in JSON format, the final book will be in PDF format. &lt;br&gt;&lt;br&gt; NOTE - - The execution of this endpoint requires an extra step within the developer portal due to authentication limitations. When using the actual API, a successful response for this endpoint will be the PDF book rather than the URL to the PDF. &lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;i&gt;The actual endpoint is &lt;/b&gt;&lt;font color&#x3D;blue&gt;https://api.factset.com/book-builder-api/v1/download-api-book/{book_id}&lt;/font&gt;&lt;/i&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookId">A string representing the unique ID for a specific book. This ID must be provided in the URL path.</param>
        /// <returns>ApiResponse of EnableBookDownload</returns>
        public ApiResponse<BooksFetchApi.DownloadBookResponseWrapper> DownloadBookWithHttpInfo(string bookId)
        {
            // verify the required parameter 'bookId' is set
            if (bookId == null)
            {
                throw new FactSet.SDK.BookBuilder.Client.ApiException(400, "Missing required parameter 'bookId' when calling BooksFetchApi->DownloadBook");
            }

            FactSet.SDK.BookBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BookBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("book_id", FactSet.SDK.BookBuilder.Client.ClientUtils.ParameterToString(bookId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BookBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DownloadBookResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/download-api-book-aws/{book_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var downloadbookResponse = new DownloadBookResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<DownloadBookResponseWrapper>(localVarResponse.StatusCode, downloadbookResponse);
        }

        /// <summary>
        /// Retrieves book in PDF format This endpoint uses the BookId returned from any of the request above. Returns the URL to load the book for the book ID requested. The URL will be in JSON format, the final book will be in PDF format. &lt;br&gt;&lt;br&gt; NOTE - - The execution of this endpoint requires an extra step within the developer portal due to authentication limitations. When using the actual API, a successful response for this endpoint will be the PDF book rather than the URL to the PDF. &lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;i&gt;The actual endpoint is &lt;/b&gt;&lt;font color&#x3D;blue&gt;https://api.factset.com/book-builder-api/v1/download-api-book/{book_id}&lt;/font&gt;&lt;/i&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookId">A string representing the unique ID for a specific book. This ID must be provided in the URL path.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnableBookDownload</returns>
        public async System.Threading.Tasks.Task<BooksFetchApi.DownloadBookResponseWrapper>DownloadBookAsync(string bookId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await DownloadBookWithHttpInfoAsync(bookId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves book in PDF format This endpoint uses the BookId returned from any of the request above. Returns the URL to load the book for the book ID requested. The URL will be in JSON format, the final book will be in PDF format. &lt;br&gt;&lt;br&gt; NOTE - - The execution of this endpoint requires an extra step within the developer portal due to authentication limitations. When using the actual API, a successful response for this endpoint will be the PDF book rather than the URL to the PDF. &lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;i&gt;The actual endpoint is &lt;/b&gt;&lt;font color&#x3D;blue&gt;https://api.factset.com/book-builder-api/v1/download-api-book/{book_id}&lt;/font&gt;&lt;/i&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookId">A string representing the unique ID for a specific book. This ID must be provided in the URL path.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnableBookDownload)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BooksFetchApi.DownloadBookResponseWrapper>> DownloadBookWithHttpInfoAsync(string bookId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bookId' is set
            if (bookId == null)
            {
                throw new FactSet.SDK.BookBuilder.Client.ApiException(400, "Missing required parameter 'bookId' when calling BooksFetchApi->DownloadBook");
            }


            FactSet.SDK.BookBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BookBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("book_id", FactSet.SDK.BookBuilder.Client.ClientUtils.ParameterToString(bookId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BookBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DownloadBookResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/download-api-book-aws/{book_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var downloadbookResponse = new DownloadBookResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<DownloadBookResponseWrapper>(localVarResponse.StatusCode, downloadbookResponse);
        }

        /// <summary>
        /// Check out the books that are in the book library Retrieves the list of books that were previously created and are available in the client&#39;s book library
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<BookInfo></returns>
        public List<BookInfo> GetBookList()
        {
            var localVarResponse = GetBookListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check out the books that are in the book library Retrieves the list of books that were previously created and are available in the client&#39;s book library
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BookInfo&gt;</returns>
        public ApiResponse<List<BookInfo>> GetBookListWithHttpInfo()
        {
            FactSet.SDK.BookBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BookBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BookBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBookListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<BookInfo>>("/book-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBookList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Check out the books that are in the book library Retrieves the list of books that were previously created and are available in the client&#39;s book library
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BookInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BookInfo>>GetBookListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBookListWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check out the books that are in the book library Retrieves the list of books that were previously created and are available in the client&#39;s book library
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BookInfo&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<BookInfo>>> GetBookListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.BookBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BookBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BookBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBookListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BookInfo>>("/book-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBookList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
