/*
 * BookBuilder
 *
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.BookBuilder.Client;
using FactSet.SDK.BookBuilder.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.BookBuilder.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesCreationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Kick off request to create template with reports of your choice
        /// </summary>
        /// <remarks>
        /// This end point retrieves template name and template_id of the template you create. All the book options such as name of the template, type, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplatePostRequest"></param>
        /// <returns>EnableTemplateInfoPost</returns>
        EnableTemplateInfoPost CreateTemplate(CreateTemplatePostRequest createTemplatePostRequest);

        /// <summary>
        /// Kick off request to create template with reports of your choice
        /// </summary>
        /// <remarks>
        /// This end point retrieves template name and template_id of the template you create. All the book options such as name of the template, type, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplatePostRequest"></param>
        /// <returns>ApiResponse of EnableTemplateInfoPost</returns>
        ApiResponse<EnableTemplateInfoPost> CreateTemplateWithHttpInfo(CreateTemplatePostRequest createTemplatePostRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesCreationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Kick off request to create template with reports of your choice
        /// </summary>
        /// <remarks>
        /// This end point retrieves template name and template_id of the template you create. All the book options such as name of the template, type, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplatePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnableTemplateInfoPost</returns>
        System.Threading.Tasks.Task<EnableTemplateInfoPost> CreateTemplateAsync(CreateTemplatePostRequest createTemplatePostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Kick off request to create template with reports of your choice
        /// </summary>
        /// <remarks>
        /// This end point retrieves template name and template_id of the template you create. All the book options such as name of the template, type, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplatePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnableTemplateInfoPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnableTemplateInfoPost>> CreateTemplateWithHttpInfoAsync(CreateTemplatePostRequest createTemplatePostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesCreationApi : ITemplatesCreationApiSync, ITemplatesCreationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesCreationApi : ITemplatesCreationApi
    {
        private FactSet.SDK.BookBuilder.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateTemplateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EnableTemplateInfoPost) },
            { (HttpStatusCode)400, typeof(InvalidTemplateRequest) },
            { (HttpStatusCode)401, typeof(string) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesCreationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesCreationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesCreationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesCreationApi(string basePath)
        {
            this.Configuration = FactSet.SDK.BookBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BookBuilder.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.BookBuilder.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.BookBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesCreationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesCreationApi(FactSet.SDK.BookBuilder.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.BookBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BookBuilder.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.BookBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesCreationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplatesCreationApi(FactSet.SDK.BookBuilder.Client.ISynchronousClient client, FactSet.SDK.BookBuilder.Client.IAsynchronousClient asyncClient, FactSet.SDK.BookBuilder.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.BookBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.BookBuilder.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.BookBuilder.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.BookBuilder.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.BookBuilder.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Kick off request to create template with reports of your choice This end point retrieves template name and template_id of the template you create. All the book options such as name of the template, type, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplatePostRequest"></param>
        /// <returns>EnableTemplateInfoPost</returns>
        public EnableTemplateInfoPost CreateTemplate(CreateTemplatePostRequest createTemplatePostRequest)
        {
            var localVarResponse = CreateTemplateWithHttpInfo(createTemplatePostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kick off request to create template with reports of your choice This end point retrieves template name and template_id of the template you create. All the book options such as name of the template, type, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplatePostRequest"></param>
        /// <returns>ApiResponse of EnableTemplateInfoPost</returns>
        public ApiResponse<EnableTemplateInfoPost> CreateTemplateWithHttpInfo(CreateTemplatePostRequest createTemplatePostRequest)
        {
            // verify the required parameter 'createTemplatePostRequest' is set
            if (createTemplatePostRequest == null)
            {
                throw new FactSet.SDK.BookBuilder.Client.ApiException(400, "Missing required parameter 'createTemplatePostRequest' when calling TemplatesCreationApi->CreateTemplate");
            }

            FactSet.SDK.BookBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BookBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTemplatePostRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BookBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateTemplateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EnableTemplateInfoPost>("/create-template", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Kick off request to create template with reports of your choice This end point retrieves template name and template_id of the template you create. All the book options such as name of the template, type, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplatePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnableTemplateInfoPost</returns>
        public async System.Threading.Tasks.Task<EnableTemplateInfoPost>CreateTemplateAsync(CreateTemplatePostRequest createTemplatePostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateTemplateWithHttpInfoAsync(createTemplatePostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kick off request to create template with reports of your choice This end point retrieves template name and template_id of the template you create. All the book options such as name of the template, type, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplatePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnableTemplateInfoPost)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EnableTemplateInfoPost>> CreateTemplateWithHttpInfoAsync(CreateTemplatePostRequest createTemplatePostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTemplatePostRequest' is set
            if (createTemplatePostRequest == null)
            {
                throw new FactSet.SDK.BookBuilder.Client.ApiException(400, "Missing required parameter 'createTemplatePostRequest' when calling TemplatesCreationApi->CreateTemplate");
            }


            FactSet.SDK.BookBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BookBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTemplatePostRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BookBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateTemplateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnableTemplateInfoPost>("/create-template", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
