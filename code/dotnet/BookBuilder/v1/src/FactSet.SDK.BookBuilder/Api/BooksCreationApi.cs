/*
 * BookBuilder
 *
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.BookBuilder.Client;
using FactSet.SDK.BookBuilder.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.BookBuilder.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBooksCreationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Kicks off request to create a book with reports of your choice
        /// </summary>
        /// <remarks>
        /// This end point retrieves book name and book_id for the PDF book you create. All the book options such as name of the book, ticker, pagination options, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookPostRequest"></param>
        /// <returns>EnableBookInfo</returns>
        EnableBookInfo CreateBook(CreateBookPostRequest createBookPostRequest);

        /// <summary>
        /// Kicks off request to create a book with reports of your choice
        /// </summary>
        /// <remarks>
        /// This end point retrieves book name and book_id for the PDF book you create. All the book options such as name of the book, ticker, pagination options, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookPostRequest"></param>
        /// <returns>ApiResponse of EnableBookInfo</returns>
        ApiResponse<EnableBookInfo> CreateBookWithHttpInfo(CreateBookPostRequest createBookPostRequest);
        /// <summary>
        /// Kicks off request to create a book with template
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves book status, book name, and book ID for ticker requested in JSON format. This end-point excepts ticker and template_id as inputs. If the template_id input is not used, a book will be created with FactSet&#39;s default template.&lt;/br&gt;&lt;/br&gt;Please try out the below template ids to quickly get the FactSet curated books&lt;/br&gt;&lt;/br&gt;Company Quick Book - &lt;b&gt;g_20210415065838185&lt;/b&gt;&lt;/br&gt;Post-Earnings Call - &lt;b&gt;g_20210415070044785&lt;/b&gt; &lt;/br&gt;Public Information Book(PIB) - &lt;b&gt;g_20210415070353151&lt;/b&gt;&lt;/br&gt;&lt;/br&gt; Take a look at the example books attached under API documentation below.&lt;/br&gt;&lt;/br&gt;If you are scheduling Post Earnings Call curated book, please note that in contains Corrected Transcript that takes a little while to be available.&lt;/br&gt; &lt;/br&gt;Once a Raw Transcript is published, FactSet&#39;s editors review the call to produce a Corrected Transcript. They listen to the entire audio file again to confirm that all of the terms and numbers are correctly transcribed. FactSet aims to publish a Corrected Transcript within six times the length of the event, measured from the beginning of the event. That means for a typical one-hour call, FactSet will produce a Corrected Transcript within approximately five hours of the call&#39;s completion. Visit [OA 13208](https://my.apps.factset.com/oa/pages/13208)
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookFromTemplatePostRequest"></param>
        /// <returns>EnableBookInfoFromTemplate</returns>
        EnableBookInfoFromTemplate CreateBookFromTemplate(CreateBookFromTemplatePostRequest createBookFromTemplatePostRequest);

        /// <summary>
        /// Kicks off request to create a book with template
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves book status, book name, and book ID for ticker requested in JSON format. This end-point excepts ticker and template_id as inputs. If the template_id input is not used, a book will be created with FactSet&#39;s default template.&lt;/br&gt;&lt;/br&gt;Please try out the below template ids to quickly get the FactSet curated books&lt;/br&gt;&lt;/br&gt;Company Quick Book - &lt;b&gt;g_20210415065838185&lt;/b&gt;&lt;/br&gt;Post-Earnings Call - &lt;b&gt;g_20210415070044785&lt;/b&gt; &lt;/br&gt;Public Information Book(PIB) - &lt;b&gt;g_20210415070353151&lt;/b&gt;&lt;/br&gt;&lt;/br&gt; Take a look at the example books attached under API documentation below.&lt;/br&gt;&lt;/br&gt;If you are scheduling Post Earnings Call curated book, please note that in contains Corrected Transcript that takes a little while to be available.&lt;/br&gt; &lt;/br&gt;Once a Raw Transcript is published, FactSet&#39;s editors review the call to produce a Corrected Transcript. They listen to the entire audio file again to confirm that all of the terms and numbers are correctly transcribed. FactSet aims to publish a Corrected Transcript within six times the length of the event, measured from the beginning of the event. That means for a typical one-hour call, FactSet will produce a Corrected Transcript within approximately five hours of the call&#39;s completion. Visit [OA 13208](https://my.apps.factset.com/oa/pages/13208)
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookFromTemplatePostRequest"></param>
        /// <returns>ApiResponse of EnableBookInfoFromTemplate</returns>
        ApiResponse<EnableBookInfoFromTemplate> CreateBookFromTemplateWithHttpInfo(CreateBookFromTemplatePostRequest createBookFromTemplatePostRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBooksCreationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Kicks off request to create a book with reports of your choice
        /// </summary>
        /// <remarks>
        /// This end point retrieves book name and book_id for the PDF book you create. All the book options such as name of the book, ticker, pagination options, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnableBookInfo</returns>
        System.Threading.Tasks.Task<EnableBookInfo> CreateBookAsync(CreateBookPostRequest createBookPostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Kicks off request to create a book with reports of your choice
        /// </summary>
        /// <remarks>
        /// This end point retrieves book name and book_id for the PDF book you create. All the book options such as name of the book, ticker, pagination options, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnableBookInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnableBookInfo>> CreateBookWithHttpInfoAsync(CreateBookPostRequest createBookPostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Kicks off request to create a book with template
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves book status, book name, and book ID for ticker requested in JSON format. This end-point excepts ticker and template_id as inputs. If the template_id input is not used, a book will be created with FactSet&#39;s default template.&lt;/br&gt;&lt;/br&gt;Please try out the below template ids to quickly get the FactSet curated books&lt;/br&gt;&lt;/br&gt;Company Quick Book - &lt;b&gt;g_20210415065838185&lt;/b&gt;&lt;/br&gt;Post-Earnings Call - &lt;b&gt;g_20210415070044785&lt;/b&gt; &lt;/br&gt;Public Information Book(PIB) - &lt;b&gt;g_20210415070353151&lt;/b&gt;&lt;/br&gt;&lt;/br&gt; Take a look at the example books attached under API documentation below.&lt;/br&gt;&lt;/br&gt;If you are scheduling Post Earnings Call curated book, please note that in contains Corrected Transcript that takes a little while to be available.&lt;/br&gt; &lt;/br&gt;Once a Raw Transcript is published, FactSet&#39;s editors review the call to produce a Corrected Transcript. They listen to the entire audio file again to confirm that all of the terms and numbers are correctly transcribed. FactSet aims to publish a Corrected Transcript within six times the length of the event, measured from the beginning of the event. That means for a typical one-hour call, FactSet will produce a Corrected Transcript within approximately five hours of the call&#39;s completion. Visit [OA 13208](https://my.apps.factset.com/oa/pages/13208)
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookFromTemplatePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnableBookInfoFromTemplate</returns>
        System.Threading.Tasks.Task<EnableBookInfoFromTemplate> CreateBookFromTemplateAsync(CreateBookFromTemplatePostRequest createBookFromTemplatePostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Kicks off request to create a book with template
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves book status, book name, and book ID for ticker requested in JSON format. This end-point excepts ticker and template_id as inputs. If the template_id input is not used, a book will be created with FactSet&#39;s default template.&lt;/br&gt;&lt;/br&gt;Please try out the below template ids to quickly get the FactSet curated books&lt;/br&gt;&lt;/br&gt;Company Quick Book - &lt;b&gt;g_20210415065838185&lt;/b&gt;&lt;/br&gt;Post-Earnings Call - &lt;b&gt;g_20210415070044785&lt;/b&gt; &lt;/br&gt;Public Information Book(PIB) - &lt;b&gt;g_20210415070353151&lt;/b&gt;&lt;/br&gt;&lt;/br&gt; Take a look at the example books attached under API documentation below.&lt;/br&gt;&lt;/br&gt;If you are scheduling Post Earnings Call curated book, please note that in contains Corrected Transcript that takes a little while to be available.&lt;/br&gt; &lt;/br&gt;Once a Raw Transcript is published, FactSet&#39;s editors review the call to produce a Corrected Transcript. They listen to the entire audio file again to confirm that all of the terms and numbers are correctly transcribed. FactSet aims to publish a Corrected Transcript within six times the length of the event, measured from the beginning of the event. That means for a typical one-hour call, FactSet will produce a Corrected Transcript within approximately five hours of the call&#39;s completion. Visit [OA 13208](https://my.apps.factset.com/oa/pages/13208)
        /// </remarks>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookFromTemplatePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnableBookInfoFromTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnableBookInfoFromTemplate>> CreateBookFromTemplateWithHttpInfoAsync(CreateBookFromTemplatePostRequest createBookFromTemplatePostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBooksCreationApi : IBooksCreationApiSync, IBooksCreationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BooksCreationApi : IBooksCreationApi
    {
        private FactSet.SDK.BookBuilder.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateBookResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EnableBookInfo) },
            { (HttpStatusCode)400, typeof(InvalidCreateBookRequest) },
            { (HttpStatusCode)401, typeof(string) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> CreateBookFromTemplateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EnableBookInfoFromTemplate) },
            { (HttpStatusCode)400, typeof(InvalidCreateBookFromTemplateRequest) },
            { (HttpStatusCode)401, typeof(string) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksCreationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BooksCreationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksCreationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BooksCreationApi(string basePath)
        {
            this.Configuration = FactSet.SDK.BookBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BookBuilder.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.BookBuilder.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.BookBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksCreationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BooksCreationApi(FactSet.SDK.BookBuilder.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.BookBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.BookBuilder.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.BookBuilder.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.BookBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksCreationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BooksCreationApi(FactSet.SDK.BookBuilder.Client.ISynchronousClient client, FactSet.SDK.BookBuilder.Client.IAsynchronousClient asyncClient, FactSet.SDK.BookBuilder.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.BookBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.BookBuilder.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.BookBuilder.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.BookBuilder.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.BookBuilder.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Kicks off request to create a book with reports of your choice This end point retrieves book name and book_id for the PDF book you create. All the book options such as name of the book, ticker, pagination options, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookPostRequest"></param>
        /// <returns>EnableBookInfo</returns>
        public EnableBookInfo CreateBook(CreateBookPostRequest createBookPostRequest)
        {
            var localVarResponse = CreateBookWithHttpInfo(createBookPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kicks off request to create a book with reports of your choice This end point retrieves book name and book_id for the PDF book you create. All the book options such as name of the book, ticker, pagination options, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookPostRequest"></param>
        /// <returns>ApiResponse of EnableBookInfo</returns>
        public ApiResponse<EnableBookInfo> CreateBookWithHttpInfo(CreateBookPostRequest createBookPostRequest)
        {
            // verify the required parameter 'createBookPostRequest' is set
            if (createBookPostRequest == null)
            {
                throw new FactSet.SDK.BookBuilder.Client.ApiException(400, "Missing required parameter 'createBookPostRequest' when calling BooksCreationApi->CreateBook");
            }

            FactSet.SDK.BookBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BookBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBookPostRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BookBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateBookResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EnableBookInfo>("/create-book", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Kicks off request to create a book with reports of your choice This end point retrieves book name and book_id for the PDF book you create. All the book options such as name of the book, ticker, pagination options, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnableBookInfo</returns>
        public async System.Threading.Tasks.Task<EnableBookInfo>CreateBookAsync(CreateBookPostRequest createBookPostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateBookWithHttpInfoAsync(createBookPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kicks off request to create a book with reports of your choice This end point retrieves book name and book_id for the PDF book you create. All the book options such as name of the book, ticker, pagination options, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnableBookInfo)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EnableBookInfo>> CreateBookWithHttpInfoAsync(CreateBookPostRequest createBookPostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createBookPostRequest' is set
            if (createBookPostRequest == null)
            {
                throw new FactSet.SDK.BookBuilder.Client.ApiException(400, "Missing required parameter 'createBookPostRequest' when calling BooksCreationApi->CreateBook");
            }


            FactSet.SDK.BookBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BookBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBookPostRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BookBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateBookResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnableBookInfo>("/create-book", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Kicks off request to create a book with template This endpoint retrieves book status, book name, and book ID for ticker requested in JSON format. This end-point excepts ticker and template_id as inputs. If the template_id input is not used, a book will be created with FactSet&#39;s default template.&lt;/br&gt;&lt;/br&gt;Please try out the below template ids to quickly get the FactSet curated books&lt;/br&gt;&lt;/br&gt;Company Quick Book - &lt;b&gt;g_20210415065838185&lt;/b&gt;&lt;/br&gt;Post-Earnings Call - &lt;b&gt;g_20210415070044785&lt;/b&gt; &lt;/br&gt;Public Information Book(PIB) - &lt;b&gt;g_20210415070353151&lt;/b&gt;&lt;/br&gt;&lt;/br&gt; Take a look at the example books attached under API documentation below.&lt;/br&gt;&lt;/br&gt;If you are scheduling Post Earnings Call curated book, please note that in contains Corrected Transcript that takes a little while to be available.&lt;/br&gt; &lt;/br&gt;Once a Raw Transcript is published, FactSet&#39;s editors review the call to produce a Corrected Transcript. They listen to the entire audio file again to confirm that all of the terms and numbers are correctly transcribed. FactSet aims to publish a Corrected Transcript within six times the length of the event, measured from the beginning of the event. That means for a typical one-hour call, FactSet will produce a Corrected Transcript within approximately five hours of the call&#39;s completion. Visit [OA 13208](https://my.apps.factset.com/oa/pages/13208)
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookFromTemplatePostRequest"></param>
        /// <returns>EnableBookInfoFromTemplate</returns>
        public EnableBookInfoFromTemplate CreateBookFromTemplate(CreateBookFromTemplatePostRequest createBookFromTemplatePostRequest)
        {
            var localVarResponse = CreateBookFromTemplateWithHttpInfo(createBookFromTemplatePostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kicks off request to create a book with template This endpoint retrieves book status, book name, and book ID for ticker requested in JSON format. This end-point excepts ticker and template_id as inputs. If the template_id input is not used, a book will be created with FactSet&#39;s default template.&lt;/br&gt;&lt;/br&gt;Please try out the below template ids to quickly get the FactSet curated books&lt;/br&gt;&lt;/br&gt;Company Quick Book - &lt;b&gt;g_20210415065838185&lt;/b&gt;&lt;/br&gt;Post-Earnings Call - &lt;b&gt;g_20210415070044785&lt;/b&gt; &lt;/br&gt;Public Information Book(PIB) - &lt;b&gt;g_20210415070353151&lt;/b&gt;&lt;/br&gt;&lt;/br&gt; Take a look at the example books attached under API documentation below.&lt;/br&gt;&lt;/br&gt;If you are scheduling Post Earnings Call curated book, please note that in contains Corrected Transcript that takes a little while to be available.&lt;/br&gt; &lt;/br&gt;Once a Raw Transcript is published, FactSet&#39;s editors review the call to produce a Corrected Transcript. They listen to the entire audio file again to confirm that all of the terms and numbers are correctly transcribed. FactSet aims to publish a Corrected Transcript within six times the length of the event, measured from the beginning of the event. That means for a typical one-hour call, FactSet will produce a Corrected Transcript within approximately five hours of the call&#39;s completion. Visit [OA 13208](https://my.apps.factset.com/oa/pages/13208)
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookFromTemplatePostRequest"></param>
        /// <returns>ApiResponse of EnableBookInfoFromTemplate</returns>
        public ApiResponse<EnableBookInfoFromTemplate> CreateBookFromTemplateWithHttpInfo(CreateBookFromTemplatePostRequest createBookFromTemplatePostRequest)
        {
            // verify the required parameter 'createBookFromTemplatePostRequest' is set
            if (createBookFromTemplatePostRequest == null)
            {
                throw new FactSet.SDK.BookBuilder.Client.ApiException(400, "Missing required parameter 'createBookFromTemplatePostRequest' when calling BooksCreationApi->CreateBookFromTemplate");
            }

            FactSet.SDK.BookBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BookBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBookFromTemplatePostRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BookBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateBookFromTemplateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EnableBookInfoFromTemplate>("/create-book-from-template", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBookFromTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Kicks off request to create a book with template This endpoint retrieves book status, book name, and book ID for ticker requested in JSON format. This end-point excepts ticker and template_id as inputs. If the template_id input is not used, a book will be created with FactSet&#39;s default template.&lt;/br&gt;&lt;/br&gt;Please try out the below template ids to quickly get the FactSet curated books&lt;/br&gt;&lt;/br&gt;Company Quick Book - &lt;b&gt;g_20210415065838185&lt;/b&gt;&lt;/br&gt;Post-Earnings Call - &lt;b&gt;g_20210415070044785&lt;/b&gt; &lt;/br&gt;Public Information Book(PIB) - &lt;b&gt;g_20210415070353151&lt;/b&gt;&lt;/br&gt;&lt;/br&gt; Take a look at the example books attached under API documentation below.&lt;/br&gt;&lt;/br&gt;If you are scheduling Post Earnings Call curated book, please note that in contains Corrected Transcript that takes a little while to be available.&lt;/br&gt; &lt;/br&gt;Once a Raw Transcript is published, FactSet&#39;s editors review the call to produce a Corrected Transcript. They listen to the entire audio file again to confirm that all of the terms and numbers are correctly transcribed. FactSet aims to publish a Corrected Transcript within six times the length of the event, measured from the beginning of the event. That means for a typical one-hour call, FactSet will produce a Corrected Transcript within approximately five hours of the call&#39;s completion. Visit [OA 13208](https://my.apps.factset.com/oa/pages/13208)
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookFromTemplatePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnableBookInfoFromTemplate</returns>
        public async System.Threading.Tasks.Task<EnableBookInfoFromTemplate>CreateBookFromTemplateAsync(CreateBookFromTemplatePostRequest createBookFromTemplatePostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateBookFromTemplateWithHttpInfoAsync(createBookFromTemplatePostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kicks off request to create a book with template This endpoint retrieves book status, book name, and book ID for ticker requested in JSON format. This end-point excepts ticker and template_id as inputs. If the template_id input is not used, a book will be created with FactSet&#39;s default template.&lt;/br&gt;&lt;/br&gt;Please try out the below template ids to quickly get the FactSet curated books&lt;/br&gt;&lt;/br&gt;Company Quick Book - &lt;b&gt;g_20210415065838185&lt;/b&gt;&lt;/br&gt;Post-Earnings Call - &lt;b&gt;g_20210415070044785&lt;/b&gt; &lt;/br&gt;Public Information Book(PIB) - &lt;b&gt;g_20210415070353151&lt;/b&gt;&lt;/br&gt;&lt;/br&gt; Take a look at the example books attached under API documentation below.&lt;/br&gt;&lt;/br&gt;If you are scheduling Post Earnings Call curated book, please note that in contains Corrected Transcript that takes a little while to be available.&lt;/br&gt; &lt;/br&gt;Once a Raw Transcript is published, FactSet&#39;s editors review the call to produce a Corrected Transcript. They listen to the entire audio file again to confirm that all of the terms and numbers are correctly transcribed. FactSet aims to publish a Corrected Transcript within six times the length of the event, measured from the beginning of the event. That means for a typical one-hour call, FactSet will produce a Corrected Transcript within approximately five hours of the call&#39;s completion. Visit [OA 13208](https://my.apps.factset.com/oa/pages/13208)
        /// </summary>
        /// <exception cref="FactSet.SDK.BookBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBookFromTemplatePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnableBookInfoFromTemplate)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EnableBookInfoFromTemplate>> CreateBookFromTemplateWithHttpInfoAsync(CreateBookFromTemplatePostRequest createBookFromTemplatePostRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createBookFromTemplatePostRequest' is set
            if (createBookFromTemplatePostRequest == null)
            {
                throw new FactSet.SDK.BookBuilder.Client.ApiException(400, "Missing required parameter 'createBookFromTemplatePostRequest' when calling BooksCreationApi->CreateBookFromTemplate");
            }


            FactSet.SDK.BookBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.BookBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.BookBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBookFromTemplatePostRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.BookBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateBookFromTemplateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnableBookInfoFromTemplate>("/create-book-from-template", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBookFromTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
