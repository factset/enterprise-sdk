/*
 * BookBuilder
 *
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BookBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BookBuilder.Model
{
    /// <summary>
    /// Options for pagination.
    /// </summary>
    [DataContract(Name = "PaginationOptions")]
    public partial class PaginationOptions : IEquatable<PaginationOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginationOptions" /> class.
        /// </summary>
        /// <param name="cover">Include a cover page..</param>
        /// <param name="divider">Use dividers between sections..</param>
        /// <param name="toc">Include a table of contents..</param>
        /// <param name="footer">Include footers on pages..</param>
        /// <param name="timestamp">Add a timestamp to pages..</param>
        public PaginationOptions(bool cover = default(bool), bool divider = default(bool), bool toc = default(bool), bool footer = default(bool), bool timestamp = default(bool))
        {
            this.Cover = cover;
            this.Divider = divider;
            this.Toc = toc;
            this.Footer = footer;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Include a cover page.
        /// </summary>
        /// <value>Include a cover page.</value>
        [DataMember(Name = "cover", EmitDefaultValue = true)]
        public bool Cover { get; set; }

        /// <summary>
        /// Use dividers between sections.
        /// </summary>
        /// <value>Use dividers between sections.</value>
        [DataMember(Name = "divider", EmitDefaultValue = true)]
        public bool Divider { get; set; }

        /// <summary>
        /// Include a table of contents.
        /// </summary>
        /// <value>Include a table of contents.</value>
        [DataMember(Name = "toc", EmitDefaultValue = true)]
        public bool Toc { get; set; }

        /// <summary>
        /// Include footers on pages.
        /// </summary>
        /// <value>Include footers on pages.</value>
        [DataMember(Name = "footer", EmitDefaultValue = true)]
        public bool Footer { get; set; }

        /// <summary>
        /// Add a timestamp to pages.
        /// </summary>
        /// <value>Add a timestamp to pages.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public bool Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaginationOptions {\n");
            sb.Append("  Cover: ").Append(Cover).Append("\n");
            sb.Append("  Divider: ").Append(Divider).Append("\n");
            sb.Append("  Toc: ").Append(Toc).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaginationOptions);
        }

        /// <summary>
        /// Returns true if PaginationOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of PaginationOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaginationOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Cover == input.Cover ||
                    this.Cover.Equals(input.Cover)
                ) && 
                (
                    this.Divider == input.Divider ||
                    this.Divider.Equals(input.Divider)
                ) && 
                (
                    this.Toc == input.Toc ||
                    this.Toc.Equals(input.Toc)
                ) && 
                (
                    this.Footer == input.Footer ||
                    this.Footer.Equals(input.Footer)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Cover.GetHashCode();
                hashCode = (hashCode * 59) + this.Divider.GetHashCode();
                hashCode = (hashCode * 59) + this.Toc.GetHashCode();
                hashCode = (hashCode * 59) + this.Footer.GetHashCode();
                hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
