/*
 * BookBuilder
 *
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BookBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BookBuilder.Model
{
    /// <summary>
    /// ContentSection
    /// </summary>
    [DataContract(Name = "ContentSection")]
    public partial class ContentSection : IEquatable<ContentSection>, IValidatableObject
    {
        /// <summary>
        /// Section ID within the book.
        /// </summary>
        /// <value>Section ID within the book.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SectionIdEnum
        {
            /// <summary>
            /// Enum OVERVIEW for value: COMPANY_OVERVIEW
            /// </summary>
            [EnumMember(Value = "COMPANY_OVERVIEW")]
            OVERVIEW = 1,

            /// <summary>
            /// Enum GUIDEOVERVIEW for value: COMPANY_GUIDE_OVERVIEW
            /// </summary>
            [EnumMember(Value = "COMPANY_GUIDE_OVERVIEW")]
            GUIDEOVERVIEW = 2,

            /// <summary>
            /// Enum GUIDESALESEARNINGS for value: COMPANY_GUIDE_SALES_EARNINGS
            /// </summary>
            [EnumMember(Value = "COMPANY_GUIDE_SALES_EARNINGS")]
            GUIDESALESEARNINGS = 3,

            /// <summary>
            /// Enum GUIDEVALUATION for value: COMPANY_GUIDE_VALUATION
            /// </summary>
            [EnumMember(Value = "COMPANY_GUIDE_VALUATION")]
            GUIDEVALUATION = 4,

            /// <summary>
            /// Enum GUIDEPROFITABILITY for value: COMPANY_GUIDE_PROFITABILITY
            /// </summary>
            [EnumMember(Value = "COMPANY_GUIDE_PROFITABILITY")]
            GUIDEPROFITABILITY = 5,

            /// <summary>
            /// Enum GUIDESTATEMENTANALYSIS for value: COMPANY_GUIDE_STATEMENT_ANALYSIS
            /// </summary>
            [EnumMember(Value = "COMPANY_GUIDE_STATEMENT_ANALYSIS")]
            GUIDESTATEMENTANALYSIS = 6

        }


        /// <summary>
        /// Section ID within the book.
        /// </summary>
        /// <value>Section ID within the book.</value>
        [DataMember(Name = "section_id", EmitDefaultValue = false)]
        public SectionIdEnum? SectionId { get; set; }
        /// <summary>
        /// Specific report identifier.
        /// </summary>
        /// <value>Specific report identifier.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportsEnum
        {
            /// <summary>
            /// Enum COMPANYSNAPSHOT for value: COMPANY_SNAPSHOT
            /// </summary>
            [EnumMember(Value = "COMPANY_SNAPSHOT")]
            COMPANYSNAPSHOT = 1,

            /// <summary>
            /// Enum COMPANYSNAPSHOTIB for value: COMPANY_SNAPSHOT_IB
            /// </summary>
            [EnumMember(Value = "COMPANY_SNAPSHOT_IB")]
            COMPANYSNAPSHOTIB = 2,

            /// <summary>
            /// Enum COMPANYSNAPSHOTIM for value: COMPANY_SNAPSHOT_IM
            /// </summary>
            [EnumMember(Value = "COMPANY_SNAPSHOT_IM")]
            COMPANYSNAPSHOTIM = 3,

            /// <summary>
            /// Enum ENTITYSTRUCTURE for value: ENTITY_STRUCTURE
            /// </summary>
            [EnumMember(Value = "ENTITY_STRUCTURE")]
            ENTITYSTRUCTURE = 4,

            /// <summary>
            /// Enum EVENTCALENDAR for value: EVENT_CALENDAR
            /// </summary>
            [EnumMember(Value = "EVENT_CALENDAR")]
            EVENTCALENDAR = 5,

            /// <summary>
            /// Enum SUPPLYCHAIN for value: SUPPLY_CHAIN
            /// </summary>
            [EnumMember(Value = "SUPPLY_CHAIN")]
            SUPPLYCHAIN = 6,

            /// <summary>
            /// Enum CAPITALSTRUCTURE for value: CAPITAL_STRUCTURE
            /// </summary>
            [EnumMember(Value = "CAPITAL_STRUCTURE")]
            CAPITALSTRUCTURE = 7,

            /// <summary>
            /// Enum GEOREV for value: GEO_REV
            /// </summary>
            [EnumMember(Value = "GEO_REV")]
            GEOREV = 8,

            /// <summary>
            /// Enum RBICSREV for value: RBICS_REV
            /// </summary>
            [EnumMember(Value = "RBICS_REV")]
            RBICSREV = 9,

            /// <summary>
            /// Enum ESG for value: ESG
            /// </summary>
            [EnumMember(Value = "ESG")]
            ESG = 10

        }



        /// <summary>
        /// Identifiers for reports within the section.
        /// </summary>
        /// <value>Identifiers for reports within the section.</value>
        [DataMember(Name = "reports", EmitDefaultValue = false)]
        public List<ReportsEnum> Reports { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentSection" /> class.
        /// </summary>
        /// <param name="sectionId">Section ID within the book..</param>
        /// <param name="reports">Identifiers for reports within the section..</param>
        public ContentSection(SectionIdEnum? sectionId = default(SectionIdEnum?), List<ReportsEnum> reports = default(List<ReportsEnum>))
        {
            this.SectionId = sectionId;
            this.Reports = reports;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentSection {\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  Reports: ").Append(Reports).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentSection);
        }

        /// <summary>
        /// Returns true if ContentSection instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentSection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentSection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SectionId == input.SectionId ||
                    this.SectionId.Equals(input.SectionId)
                ) && 
                (
                    this.Reports == input.Reports ||
                    this.Reports.SequenceEqual(input.Reports)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SectionId.GetHashCode();
                hashCode = (hashCode * 59) + this.Reports.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
