/*
 * BookBuilder
 *
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BookBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BookBuilder.Model
{
    /// <summary>
    /// TemplateInfo
    /// </summary>
    [DataContract(Name = "TemplateInfo")]
    public partial class TemplateInfo : IEquatable<TemplateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateInfo" /> class.
        /// </summary>
        /// <param name="templateId">Template ID.</param>
        /// <param name="templateName">Template name.</param>
        /// <param name="createdOn">Date on which the template was created.</param>
        /// <param name="templateSource">Source of the template - Custom vs. Default.</param>
        /// <param name="type">Type of the template.</param>
        public TemplateInfo(string templateId = default(string), string templateName = default(string), string createdOn = default(string), string templateSource = default(string), string type = default(string))
        {
            this.TemplateId = templateId;
            this.TemplateName = templateName;
            this.CreatedOn = createdOn;
            this.TemplateSource = templateSource;
            this.Type = type;
        }

        /// <summary>
        /// Template ID
        /// </summary>
        /// <value>Template ID</value>
        [DataMember(Name = "template_id", EmitDefaultValue = false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Template name
        /// </summary>
        /// <value>Template name</value>
        [DataMember(Name = "template_name", EmitDefaultValue = false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Date on which the template was created
        /// </summary>
        /// <value>Date on which the template was created</value>
        [DataMember(Name = "created_on", EmitDefaultValue = false)]
        public string CreatedOn { get; set; }

        /// <summary>
        /// Source of the template - Custom vs. Default
        /// </summary>
        /// <value>Source of the template - Custom vs. Default</value>
        [DataMember(Name = "template_source", EmitDefaultValue = false)]
        public string TemplateSource { get; set; }

        /// <summary>
        /// Type of the template
        /// </summary>
        /// <value>Type of the template</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateInfo {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  TemplateSource: ").Append(TemplateSource).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateInfo);
        }

        /// <summary>
        /// Returns true if TemplateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.TemplateSource == input.TemplateSource ||
                    (this.TemplateSource != null &&
                    this.TemplateSource.Equals(input.TemplateSource))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                if (this.TemplateName != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateName.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.TemplateSource != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateSource.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
