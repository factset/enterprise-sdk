/*
 * BookBuilder
 *
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BookBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BookBuilder.Model
{
    /// <summary>
    /// The request body allows users to input the name of the book, ticker
    /// </summary>
    [DataContract(Name = "createBookPostRequest")]
    public partial class CreateBookPostRequest : IEquatable<CreateBookPostRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBookPostRequest" /> class.
        /// </summary>
        /// <param name="bookName">name of the book.</param>
        /// <param name="ticker">Identifier..</param>
        /// <param name="pagination">pagination.</param>
        /// <param name="content">Content sections..</param>
        public CreateBookPostRequest(string bookName = default(string), string ticker = default(string), PaginationOptions pagination = default(PaginationOptions), List<ContentSection> content = default(List<ContentSection>))
        {
            this.BookName = bookName;
            this.Ticker = ticker;
            this.Pagination = pagination;
            this.Content = content;
        }

        /// <summary>
        /// name of the book
        /// </summary>
        /// <value>name of the book</value>
        [DataMember(Name = "book_name", EmitDefaultValue = false)]
        public string BookName { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        /// <value>Identifier.</value>
        [DataMember(Name = "ticker", EmitDefaultValue = false)]
        public string Ticker { get; set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name = "pagination", EmitDefaultValue = false)]
        public PaginationOptions Pagination { get; set; }

        /// <summary>
        /// Content sections.
        /// </summary>
        /// <value>Content sections.</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public List<ContentSection> Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBookPostRequest {\n");
            sb.Append("  BookName: ").Append(BookName).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateBookPostRequest);
        }

        /// <summary>
        /// Returns true if CreateBookPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateBookPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateBookPostRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BookName == input.BookName ||
                    (this.BookName != null &&
                    this.BookName.Equals(input.BookName))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                ) && 
                (
                    this.Content == input.Content ||
                    this.Content != null &&
                    input.Content != null &&
                    this.Content.SequenceEqual(input.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BookName != null)
                {
                    hashCode = (hashCode * 59) + this.BookName.GetHashCode();
                }
                if (this.Ticker != null)
                {
                    hashCode = (hashCode * 59) + this.Ticker.GetHashCode();
                }
                if (this.Pagination != null)
                {
                    hashCode = (hashCode * 59) + this.Pagination.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
