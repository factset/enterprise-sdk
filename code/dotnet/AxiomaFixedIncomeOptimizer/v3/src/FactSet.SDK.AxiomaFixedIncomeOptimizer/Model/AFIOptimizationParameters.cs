/*
 * AFI Optimizer API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.AxiomaFixedIncomeOptimizer.Client.OpenAPIDateConverter;

namespace FactSet.SDK.AxiomaFixedIncomeOptimizer.Model
{
    /// <summary>
    /// AFIOptimizationParameters
    /// </summary>
    [DataContract(Name = "AFIOptimizationParameters")]
    public partial class AFIOptimizationParameters : IEquatable<AFIOptimizationParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AFIOptimizationParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AFIOptimizationParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AFIOptimizationParameters" /> class.
        /// </summary>
        /// <param name="strategy">strategy (required).</param>
        /// <param name="account">account.</param>
        /// <param name="optimization">optimization.</param>
        /// <param name="outputTypes">outputTypes (required).</param>
        public AFIOptimizationParameters(AFIOptimizerStrategy strategy, OptimizerOutputTypes outputTypes,OptimizerAccount account = default(OptimizerAccount), Optimization optimization = default(Optimization))
        {
            // to ensure "strategy" is required (not null)
            if (strategy == null) {
                throw new ArgumentNullException("strategy is a required property for AFIOptimizationParameters and cannot be null");
            }
            this.Strategy = strategy;
            // to ensure "outputTypes" is required (not null)
            if (outputTypes == null) {
                throw new ArgumentNullException("outputTypes is a required property for AFIOptimizationParameters and cannot be null");
            }
            this.OutputTypes = outputTypes;
            this.Account = account;
            this.Optimization = optimization;
        }

        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name = "strategy", IsRequired = true, EmitDefaultValue = false)]
        public AFIOptimizerStrategy Strategy { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public OptimizerAccount Account { get; set; }

        /// <summary>
        /// Gets or Sets Optimization
        /// </summary>
        [DataMember(Name = "optimization", EmitDefaultValue = false)]
        public Optimization Optimization { get; set; }

        /// <summary>
        /// Gets or Sets OutputTypes
        /// </summary>
        [DataMember(Name = "outputTypes", IsRequired = true, EmitDefaultValue = false)]
        public OptimizerOutputTypes OutputTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AFIOptimizationParameters {\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Optimization: ").Append(Optimization).Append("\n");
            sb.Append("  OutputTypes: ").Append(OutputTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AFIOptimizationParameters);
        }

        /// <summary>
        /// Returns true if AFIOptimizationParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of AFIOptimizationParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AFIOptimizationParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Optimization == input.Optimization ||
                    (this.Optimization != null &&
                    this.Optimization.Equals(input.Optimization))
                ) && 
                (
                    this.OutputTypes == input.OutputTypes ||
                    (this.OutputTypes != null &&
                    this.OutputTypes.Equals(input.OutputTypes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Strategy != null)
                {
                    hashCode = (hashCode * 59) + this.Strategy.GetHashCode();
                }
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.Optimization != null)
                {
                    hashCode = (hashCode * 59) + this.Optimization.GetHashCode();
                }
                if (this.OutputTypes != null)
                {
                    hashCode = (hashCode * 59) + this.OutputTypes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
