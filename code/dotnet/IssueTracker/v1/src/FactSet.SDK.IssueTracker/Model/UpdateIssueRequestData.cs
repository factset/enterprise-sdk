/*
 * Issue Tracker API
 *
 * This API is used to file issues
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IssueTracker.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IssueTracker.Model
{
    /// <summary>
    /// update request infomration for issue
    /// </summary>
    [DataContract(Name = "UpdateIssueRequest_data")]
    public partial class UpdateIssueRequestData : IEquatable<UpdateIssueRequestData>, IValidatableObject
    {
        /// <summary>
        /// Status that need to be updated
        /// </summary>
        /// <value>Status that need to be updated</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum InProgress for value: In Progress
            /// </summary>
            [EnumMember(Value = "In Progress")]
            InProgress = 1,

            /// <summary>
            /// Enum Closed for value: Closed
            /// </summary>
            [EnumMember(Value = "Closed")]
            Closed = 2,

            /// <summary>
            /// Enum Received for value: Received
            /// </summary>
            [EnumMember(Value = "Received")]
            Received = 3

        }


        /// <summary>
        /// Status that need to be updated
        /// </summary>
        /// <value>Status that need to be updated</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateIssueRequestData" /> class.
        /// </summary>
        /// <param name="subject">subject of ticket.</param>
        /// <param name="severity">severity of issue. Accepts Critical, High and Medium for severity..</param>
        /// <param name="productId">ProductId that needs to be replaced.</param>
        /// <param name="categoryId">Category that needs to be replaced.</param>
        /// <param name="status">Status that need to be updated.</param>
        /// <param name="closeContent">Comment for resolving the issue.</param>
        /// <param name="readOnly">Mark the issue read-only to stop further modifications.can be set only on closed cards and it value should be only true.</param>
        public UpdateIssueRequestData(string subject = default(string), string severity = default(string), string productId = default(string), string categoryId = default(string), StatusEnum? status = default(StatusEnum?), string closeContent = default(string), bool readOnly = default(bool))
        {
            this.Subject = subject;
            this.Severity = severity;
            this.ProductId = productId;
            this.CategoryId = categoryId;
            this.Status = status;
            this.CloseContent = closeContent;
            this.ReadOnly = readOnly;
        }

        /// <summary>
        /// subject of ticket
        /// </summary>
        /// <value>subject of ticket</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// severity of issue. Accepts Critical, High and Medium for severity.
        /// </summary>
        /// <value>severity of issue. Accepts Critical, High and Medium for severity.</value>
        [DataMember(Name = "severity", EmitDefaultValue = false)]
        public string Severity { get; set; }

        /// <summary>
        /// ProductId that needs to be replaced
        /// </summary>
        /// <value>ProductId that needs to be replaced</value>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Category that needs to be replaced
        /// </summary>
        /// <value>Category that needs to be replaced</value>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        public string CategoryId { get; set; }

        /// <summary>
        /// Comment for resolving the issue
        /// </summary>
        /// <value>Comment for resolving the issue</value>
        [DataMember(Name = "closeContent", EmitDefaultValue = false)]
        public string CloseContent { get; set; }

        /// <summary>
        /// Mark the issue read-only to stop further modifications.can be set only on closed cards and it value should be only true
        /// </summary>
        /// <value>Mark the issue read-only to stop further modifications.can be set only on closed cards and it value should be only true</value>
        [DataMember(Name = "readOnly", EmitDefaultValue = true)]
        public bool ReadOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateIssueRequestData {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CloseContent: ").Append(CloseContent).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateIssueRequestData);
        }

        /// <summary>
        /// Returns true if UpdateIssueRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateIssueRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateIssueRequestData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CloseContent == input.CloseContent ||
                    (this.CloseContent != null &&
                    this.CloseContent.Equals(input.CloseContent))
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    this.ReadOnly.Equals(input.ReadOnly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.Severity != null)
                {
                    hashCode = (hashCode * 59) + this.Severity.GetHashCode();
                }
                if (this.ProductId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                }
                if (this.CategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CloseContent != null)
                {
                    hashCode = (hashCode * 59) + this.CloseContent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReadOnly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
