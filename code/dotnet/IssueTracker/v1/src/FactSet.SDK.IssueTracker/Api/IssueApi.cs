/*
 * Issue Tracker API
 *
 * This API is used to file issues
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IssueTracker.Client;
using FactSet.SDK.IssueTracker.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IssueTracker.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssueApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the matched issue details
        /// </summary>
        /// <remarks>
        /// This endpoint allows retrieval of client information associated with a specific issue ID. When an issue contains file attachments, the Issue Tracker will return relative paths for these files. You can refer to the sample responses given in the examples and API Overview.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <returns>Issue</returns>
        Issue GetIssue(string id);

        /// <summary>
        /// Get the matched issue details
        /// </summary>
        /// <remarks>
        /// This endpoint allows retrieval of client information associated with a specific issue ID. When an issue contains file attachments, the Issue Tracker will return relative paths for these files. You can refer to the sample responses given in the examples and API Overview.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <returns>ApiResponse of Issue</returns>
        ApiResponse<Issue> GetIssueWithHttpInfo(string id);
        /// <summary>
        /// Update issue details
        /// </summary>
        /// <remarks>
        ///  Update Issue Properties Following Mentioned Constraints     Combo Updates (Must be sent together):  1. Title + Severity 2. ProductId + CategoryId  Single Field Updates: 1. Title, Severity, ProductId can be updated alone 2. Status (alone)  2.1 If setting status to \&quot;Closed\&quot;, closeContent is mandatory 3. ReadOnly (alone)  3.1 Only allowed if issue is already \&quot;Closed\&quot;  Invalid Combinations (Will be rejected):  1. Mixing Title with Status 2. Updating Status + ReadOnly together 3. Severity + ProductId 4. Status &#x3D; \&quot;Closed\&quot; without closeContent 5. Setting ReadOnly when RPD is not closed.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="updateIssueRequest"> (optional)</param>
        /// <returns>IdResponse</returns>
        IdResponse PatchIssue(string id, UpdateIssueRequest updateIssueRequest = default(UpdateIssueRequest));

        /// <summary>
        /// Update issue details
        /// </summary>
        /// <remarks>
        ///  Update Issue Properties Following Mentioned Constraints     Combo Updates (Must be sent together):  1. Title + Severity 2. ProductId + CategoryId  Single Field Updates: 1. Title, Severity, ProductId can be updated alone 2. Status (alone)  2.1 If setting status to \&quot;Closed\&quot;, closeContent is mandatory 3. ReadOnly (alone)  3.1 Only allowed if issue is already \&quot;Closed\&quot;  Invalid Combinations (Will be rejected):  1. Mixing Title with Status 2. Updating Status + ReadOnly together 3. Severity + ProductId 4. Status &#x3D; \&quot;Closed\&quot; without closeContent 5. Setting ReadOnly when RPD is not closed.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="updateIssueRequest"> (optional)</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> PatchIssueWithHttpInfo(string id, UpdateIssueRequest updateIssueRequest = default(UpdateIssueRequest));
        /// <summary>
        /// Creates a Issue Tracker issue
        /// </summary>
        /// <remarks>
        /// Creates a new issue in Issue Tracker     **Note:** connectorId, connectorDisplayId can be sent when integrations are configured on product, to sync back the updates from FactSet side. connectorDisplayId can&#39;t be set without connectorDisplayId. Reachout to factset team to check if the integrations re enabled on the product.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest"> (optional)</param>
        /// <returns>IdResponse</returns>
        IdResponse PostIssue(IssueRequest issueRequest = default(IssueRequest));

        /// <summary>
        /// Creates a Issue Tracker issue
        /// </summary>
        /// <remarks>
        /// Creates a new issue in Issue Tracker     **Note:** connectorId, connectorDisplayId can be sent when integrations are configured on product, to sync back the updates from FactSet side. connectorDisplayId can&#39;t be set without connectorDisplayId. Reachout to factset team to check if the integrations re enabled on the product.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest"> (optional)</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> PostIssueWithHttpInfo(IssueRequest issueRequest = default(IssueRequest));
        /// <summary>
        /// post comment to Issue Tracker issue
        /// </summary>
        /// <remarks>
        /// Reply to the existing matched issue
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="commentRequest"> (optional)</param>
        /// <returns>IdResponse</returns>
        IdResponse PostReply(string id, CommentRequest commentRequest = default(CommentRequest));

        /// <summary>
        /// post comment to Issue Tracker issue
        /// </summary>
        /// <remarks>
        /// Reply to the existing matched issue
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="commentRequest"> (optional)</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> PostReplyWithHttpInfo(string id, CommentRequest commentRequest = default(CommentRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssueApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the matched issue details
        /// </summary>
        /// <remarks>
        /// This endpoint allows retrieval of client information associated with a specific issue ID. When an issue contains file attachments, the Issue Tracker will return relative paths for these files. You can refer to the sample responses given in the examples and API Overview.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Issue</returns>
        System.Threading.Tasks.Task<Issue> GetIssueAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the matched issue details
        /// </summary>
        /// <remarks>
        /// This endpoint allows retrieval of client information associated with a specific issue ID. When an issue contains file attachments, the Issue Tracker will return relative paths for these files. You can refer to the sample responses given in the examples and API Overview.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Issue)</returns>
        System.Threading.Tasks.Task<ApiResponse<Issue>> GetIssueWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update issue details
        /// </summary>
        /// <remarks>
        ///  Update Issue Properties Following Mentioned Constraints     Combo Updates (Must be sent together):  1. Title + Severity 2. ProductId + CategoryId  Single Field Updates: 1. Title, Severity, ProductId can be updated alone 2. Status (alone)  2.1 If setting status to \&quot;Closed\&quot;, closeContent is mandatory 3. ReadOnly (alone)  3.1 Only allowed if issue is already \&quot;Closed\&quot;  Invalid Combinations (Will be rejected):  1. Mixing Title with Status 2. Updating Status + ReadOnly together 3. Severity + ProductId 4. Status &#x3D; \&quot;Closed\&quot; without closeContent 5. Setting ReadOnly when RPD is not closed.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="updateIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> PatchIssueAsync(string id, UpdateIssueRequest updateIssueRequest = default(UpdateIssueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update issue details
        /// </summary>
        /// <remarks>
        ///  Update Issue Properties Following Mentioned Constraints     Combo Updates (Must be sent together):  1. Title + Severity 2. ProductId + CategoryId  Single Field Updates: 1. Title, Severity, ProductId can be updated alone 2. Status (alone)  2.1 If setting status to \&quot;Closed\&quot;, closeContent is mandatory 3. ReadOnly (alone)  3.1 Only allowed if issue is already \&quot;Closed\&quot;  Invalid Combinations (Will be rejected):  1. Mixing Title with Status 2. Updating Status + ReadOnly together 3. Severity + ProductId 4. Status &#x3D; \&quot;Closed\&quot; without closeContent 5. Setting ReadOnly when RPD is not closed.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="updateIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> PatchIssueWithHttpInfoAsync(string id, UpdateIssueRequest updateIssueRequest = default(UpdateIssueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a Issue Tracker issue
        /// </summary>
        /// <remarks>
        /// Creates a new issue in Issue Tracker     **Note:** connectorId, connectorDisplayId can be sent when integrations are configured on product, to sync back the updates from FactSet side. connectorDisplayId can&#39;t be set without connectorDisplayId. Reachout to factset team to check if the integrations re enabled on the product.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> PostIssueAsync(IssueRequest issueRequest = default(IssueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a Issue Tracker issue
        /// </summary>
        /// <remarks>
        /// Creates a new issue in Issue Tracker     **Note:** connectorId, connectorDisplayId can be sent when integrations are configured on product, to sync back the updates from FactSet side. connectorDisplayId can&#39;t be set without connectorDisplayId. Reachout to factset team to check if the integrations re enabled on the product.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> PostIssueWithHttpInfoAsync(IssueRequest issueRequest = default(IssueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// post comment to Issue Tracker issue
        /// </summary>
        /// <remarks>
        /// Reply to the existing matched issue
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="commentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> PostReplyAsync(string id, CommentRequest commentRequest = default(CommentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// post comment to Issue Tracker issue
        /// </summary>
        /// <remarks>
        /// Reply to the existing matched issue
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="commentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> PostReplyWithHttpInfoAsync(string id, CommentRequest commentRequest = default(CommentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssueApi : IIssueApiSync, IIssueApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IssueApi : IIssueApi
    {
        private FactSet.SDK.IssueTracker.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetIssueResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(Issue) },
            { (HttpStatusCode)401, typeof(string) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PatchIssueResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(IdResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(string) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostIssueResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(IdResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(string) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostReplyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(IdResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(string) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssueApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssueApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IssueTracker.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IssueTracker.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IssueTracker.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IssueTracker.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IssueTracker.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IssueTracker.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IssueApi(FactSet.SDK.IssueTracker.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IssueTracker.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IssueTracker.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IssueTracker.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IssueTracker.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IssueTracker.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IssueApi(FactSet.SDK.IssueTracker.Client.ISynchronousClient client, FactSet.SDK.IssueTracker.Client.IAsynchronousClient asyncClient, FactSet.SDK.IssueTracker.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IssueTracker.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IssueTracker.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IssueTracker.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IssueTracker.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IssueTracker.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the matched issue details This endpoint allows retrieval of client information associated with a specific issue ID. When an issue contains file attachments, the Issue Tracker will return relative paths for these files. You can refer to the sample responses given in the examples and API Overview.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <returns>Issue</returns>
        public Issue GetIssue(string id)
        {
            var localVarResponse = GetIssueWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the matched issue details This endpoint allows retrieval of client information associated with a specific issue ID. When an issue contains file attachments, the Issue Tracker will return relative paths for these files. You can refer to the sample responses given in the examples and API Overview.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <returns>ApiResponse of Issue</returns>
        public ApiResponse<Issue> GetIssueWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'id' when calling IssueApi->GetIssue");
            }

            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.IssueTracker.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetIssueResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Issue>("/issues/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the matched issue details This endpoint allows retrieval of client information associated with a specific issue ID. When an issue contains file attachments, the Issue Tracker will return relative paths for these files. You can refer to the sample responses given in the examples and API Overview.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Issue</returns>
        public async System.Threading.Tasks.Task<Issue>GetIssueAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetIssueWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the matched issue details This endpoint allows retrieval of client information associated with a specific issue ID. When an issue contains file attachments, the Issue Tracker will return relative paths for these files. You can refer to the sample responses given in the examples and API Overview.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Issue)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Issue>> GetIssueWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'id' when calling IssueApi->GetIssue");
            }


            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.IssueTracker.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetIssueResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Issue>("/issues/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update issue details  Update Issue Properties Following Mentioned Constraints     Combo Updates (Must be sent together):  1. Title + Severity 2. ProductId + CategoryId  Single Field Updates: 1. Title, Severity, ProductId can be updated alone 2. Status (alone)  2.1 If setting status to \&quot;Closed\&quot;, closeContent is mandatory 3. ReadOnly (alone)  3.1 Only allowed if issue is already \&quot;Closed\&quot;  Invalid Combinations (Will be rejected):  1. Mixing Title with Status 2. Updating Status + ReadOnly together 3. Severity + ProductId 4. Status &#x3D; \&quot;Closed\&quot; without closeContent 5. Setting ReadOnly when RPD is not closed.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="updateIssueRequest"> (optional)</param>
        /// <returns>IdResponse</returns>
        public IdResponse PatchIssue(string id, UpdateIssueRequest updateIssueRequest = default(UpdateIssueRequest))
        {
            var localVarResponse = PatchIssueWithHttpInfo(id, updateIssueRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update issue details  Update Issue Properties Following Mentioned Constraints     Combo Updates (Must be sent together):  1. Title + Severity 2. ProductId + CategoryId  Single Field Updates: 1. Title, Severity, ProductId can be updated alone 2. Status (alone)  2.1 If setting status to \&quot;Closed\&quot;, closeContent is mandatory 3. ReadOnly (alone)  3.1 Only allowed if issue is already \&quot;Closed\&quot;  Invalid Combinations (Will be rejected):  1. Mixing Title with Status 2. Updating Status + ReadOnly together 3. Severity + ProductId 4. Status &#x3D; \&quot;Closed\&quot; without closeContent 5. Setting ReadOnly when RPD is not closed.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="updateIssueRequest"> (optional)</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public ApiResponse<IdResponse> PatchIssueWithHttpInfo(string id, UpdateIssueRequest updateIssueRequest = default(UpdateIssueRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'id' when calling IssueApi->PatchIssue");
            }

            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.IssueTracker.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateIssueRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PatchIssueResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<
            IdResponse>("/issues/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchIssue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Update issue details  Update Issue Properties Following Mentioned Constraints     Combo Updates (Must be sent together):  1. Title + Severity 2. ProductId + CategoryId  Single Field Updates: 1. Title, Severity, ProductId can be updated alone 2. Status (alone)  2.1 If setting status to \&quot;Closed\&quot;, closeContent is mandatory 3. ReadOnly (alone)  3.1 Only allowed if issue is already \&quot;Closed\&quot;  Invalid Combinations (Will be rejected):  1. Mixing Title with Status 2. Updating Status + ReadOnly together 3. Severity + ProductId 4. Status &#x3D; \&quot;Closed\&quot; without closeContent 5. Setting ReadOnly when RPD is not closed.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="updateIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse>PatchIssueAsync(string id, UpdateIssueRequest updateIssueRequest = default(UpdateIssueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PatchIssueWithHttpInfoAsync(id, updateIssueRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update issue details  Update Issue Properties Following Mentioned Constraints     Combo Updates (Must be sent together):  1. Title + Severity 2. ProductId + CategoryId  Single Field Updates: 1. Title, Severity, ProductId can be updated alone 2. Status (alone)  2.1 If setting status to \&quot;Closed\&quot;, closeContent is mandatory 3. ReadOnly (alone)  3.1 Only allowed if issue is already \&quot;Closed\&quot;  Invalid Combinations (Will be rejected):  1. Mixing Title with Status 2. Updating Status + ReadOnly together 3. Severity + ProductId 4. Status &#x3D; \&quot;Closed\&quot; without closeContent 5. Setting ReadOnly when RPD is not closed.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="updateIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<IdResponse>> PatchIssueWithHttpInfoAsync(string id, UpdateIssueRequest updateIssueRequest = default(UpdateIssueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'id' when calling IssueApi->PatchIssue");
            }


            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.IssueTracker.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateIssueRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PatchIssueResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<IdResponse>("/issues/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchIssue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a Issue Tracker issue Creates a new issue in Issue Tracker     **Note:** connectorId, connectorDisplayId can be sent when integrations are configured on product, to sync back the updates from FactSet side. connectorDisplayId can&#39;t be set without connectorDisplayId. Reachout to factset team to check if the integrations re enabled on the product.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest"> (optional)</param>
        /// <returns>IdResponse</returns>
        public IdResponse PostIssue(IssueRequest issueRequest = default(IssueRequest))
        {
            var localVarResponse = PostIssueWithHttpInfo(issueRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Issue Tracker issue Creates a new issue in Issue Tracker     **Note:** connectorId, connectorDisplayId can be sent when integrations are configured on product, to sync back the updates from FactSet side. connectorDisplayId can&#39;t be set without connectorDisplayId. Reachout to factset team to check if the integrations re enabled on the product.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest"> (optional)</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public ApiResponse<IdResponse> PostIssueWithHttpInfo(IssueRequest issueRequest = default(IssueRequest))
        {
            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = issueRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostIssueResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            IdResponse>("/issues", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIssue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Creates a Issue Tracker issue Creates a new issue in Issue Tracker     **Note:** connectorId, connectorDisplayId can be sent when integrations are configured on product, to sync back the updates from FactSet side. connectorDisplayId can&#39;t be set without connectorDisplayId. Reachout to factset team to check if the integrations re enabled on the product.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse>PostIssueAsync(IssueRequest issueRequest = default(IssueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostIssueWithHttpInfoAsync(issueRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Issue Tracker issue Creates a new issue in Issue Tracker     **Note:** connectorId, connectorDisplayId can be sent when integrations are configured on product, to sync back the updates from FactSet side. connectorDisplayId can&#39;t be set without connectorDisplayId. Reachout to factset team to check if the integrations re enabled on the product.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<IdResponse>> PostIssueWithHttpInfoAsync(IssueRequest issueRequest = default(IssueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = issueRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostIssueResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdResponse>("/issues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIssue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// post comment to Issue Tracker issue Reply to the existing matched issue
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="commentRequest"> (optional)</param>
        /// <returns>IdResponse</returns>
        public IdResponse PostReply(string id, CommentRequest commentRequest = default(CommentRequest))
        {
            var localVarResponse = PostReplyWithHttpInfo(id, commentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// post comment to Issue Tracker issue Reply to the existing matched issue
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="commentRequest"> (optional)</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public ApiResponse<IdResponse> PostReplyWithHttpInfo(string id, CommentRequest commentRequest = default(CommentRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'id' when calling IssueApi->PostReply");
            }

            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.IssueTracker.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = commentRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostReplyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            IdResponse>("/issues/{id}/comments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostReply", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// post comment to Issue Tracker issue Reply to the existing matched issue
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="commentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse>PostReplyAsync(string id, CommentRequest commentRequest = default(CommentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostReplyWithHttpInfoAsync(id, commentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// post comment to Issue Tracker issue Reply to the existing matched issue
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Issue Tracker issue</param>
        /// <param name="commentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<IdResponse>> PostReplyWithHttpInfoAsync(string id, CommentRequest commentRequest = default(CommentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'id' when calling IssueApi->PostReply");
            }


            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.IssueTracker.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = commentRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostReplyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdResponse>("/issues/{id}/comments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostReply", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
