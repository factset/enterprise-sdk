/*
 * Issue Tracker API
 *
 * This API is used to file issues
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IssueTracker.Client;
using FactSet.SDK.IssueTracker.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IssueTracker.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get the matched file attachment
        /// </summary>
        /// <remarks>
        /// It retreive matched file. However, File read won&#39;t work until it used in any issue tracker issue/comment.     Note: the Accept header gets ignored and the originally uploaded content-type is returned
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">identity value of file attachment</param>
        /// <param name="name">name of the file</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetFileAttachment(string id, string name);

        /// <summary>
        /// get the matched file attachment
        /// </summary>
        /// <remarks>
        /// It retreive matched file. However, File read won&#39;t work until it used in any issue tracker issue/comment.     Note: the Accept header gets ignored and the originally uploaded content-type is returned
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">identity value of file attachment</param>
        /// <param name="name">name of the file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetFileAttachmentWithHttpInfo(string id, string name);
        /// <summary>
        /// Allowed file types GET endpoint
        /// </summary>
        /// <remarks>
        /// This will provide information about file extensions allowed to attachments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FileExtension</returns>
        FileExtension GetFileExtensions();

        /// <summary>
        /// Allowed file types GET endpoint
        /// </summary>
        /// <remarks>
        /// This will provide information about file extensions allowed to attachments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FileExtension</returns>
        ApiResponse<FileExtension> GetFileExtensionsWithHttpInfo();
        /// <summary>
        /// Post file attachment to Issue Tracker Issue or comment
        /// </summary>
        /// <remarks>
        ///   This endpoint upload file attachments into Issue Tracker and it allows only single file at a time. It will throws error when tries to upload multiple files in single call.     File size should not exceed 10Mb. More info provided in examples. It allows only few type of files for attachments. Please review \&quot;attachments/file-extensions\&quot; endpoint for list allowed file types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">input file for upload</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse PostFileAttachment(System.IO.Stream file);

        /// <summary>
        /// Post file attachment to Issue Tracker Issue or comment
        /// </summary>
        /// <remarks>
        ///   This endpoint upload file attachments into Issue Tracker and it allows only single file at a time. It will throws error when tries to upload multiple files in single call.     File size should not exceed 10Mb. More info provided in examples. It allows only few type of files for attachments. Please review \&quot;attachments/file-extensions\&quot; endpoint for list allowed file types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">input file for upload</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> PostFileAttachmentWithHttpInfo(System.IO.Stream file);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// get the matched file attachment
        /// </summary>
        /// <remarks>
        /// It retreive matched file. However, File read won&#39;t work until it used in any issue tracker issue/comment.     Note: the Accept header gets ignored and the originally uploaded content-type is returned
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">identity value of file attachment</param>
        /// <param name="name">name of the file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetFileAttachmentAsync(string id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the matched file attachment
        /// </summary>
        /// <remarks>
        /// It retreive matched file. However, File read won&#39;t work until it used in any issue tracker issue/comment.     Note: the Accept header gets ignored and the originally uploaded content-type is returned
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">identity value of file attachment</param>
        /// <param name="name">name of the file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetFileAttachmentWithHttpInfoAsync(string id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allowed file types GET endpoint
        /// </summary>
        /// <remarks>
        /// This will provide information about file extensions allowed to attachments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileExtension</returns>
        System.Threading.Tasks.Task<FileExtension> GetFileExtensionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allowed file types GET endpoint
        /// </summary>
        /// <remarks>
        /// This will provide information about file extensions allowed to attachments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileExtension)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileExtension>> GetFileExtensionsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Post file attachment to Issue Tracker Issue or comment
        /// </summary>
        /// <remarks>
        ///   This endpoint upload file attachments into Issue Tracker and it allows only single file at a time. It will throws error when tries to upload multiple files in single call.     File size should not exceed 10Mb. More info provided in examples. It allows only few type of files for attachments. Please review \&quot;attachments/file-extensions\&quot; endpoint for list allowed file types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">input file for upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> PostFileAttachmentAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Post file attachment to Issue Tracker Issue or comment
        /// </summary>
        /// <remarks>
        ///   This endpoint upload file attachments into Issue Tracker and it allows only single file at a time. It will throws error when tries to upload multiple files in single call.     File size should not exceed 10Mb. More info provided in examples. It allows only few type of files for attachments. Please review \&quot;attachments/file-extensions\&quot; endpoint for list allowed file types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">input file for upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> PostFileAttachmentWithHttpInfoAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentApi : IAttachmentApiSync, IAttachmentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AttachmentApi : IAttachmentApi
    {
        private FactSet.SDK.IssueTracker.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFileAttachmentResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(System.IO.Stream) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(string) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFileExtensionsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FileExtension) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostFileAttachmentResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(AttachmentResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(string) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IssueTracker.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IssueTracker.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IssueTracker.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IssueTracker.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IssueTracker.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IssueTracker.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttachmentApi(FactSet.SDK.IssueTracker.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IssueTracker.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IssueTracker.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IssueTracker.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IssueTracker.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IssueTracker.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AttachmentApi(FactSet.SDK.IssueTracker.Client.ISynchronousClient client, FactSet.SDK.IssueTracker.Client.IAsynchronousClient asyncClient, FactSet.SDK.IssueTracker.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IssueTracker.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IssueTracker.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IssueTracker.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IssueTracker.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IssueTracker.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// get the matched file attachment It retreive matched file. However, File read won&#39;t work until it used in any issue tracker issue/comment.     Note: the Accept header gets ignored and the originally uploaded content-type is returned
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">identity value of file attachment</param>
        /// <param name="name">name of the file</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetFileAttachment(string id, string name)
        {
            var localVarResponse = GetFileAttachmentWithHttpInfo(id, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the matched file attachment It retreive matched file. However, File read won&#39;t work until it used in any issue tracker issue/comment.     Note: the Accept header gets ignored and the originally uploaded content-type is returned
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">identity value of file attachment</param>
        /// <param name="name">name of the file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetFileAttachmentWithHttpInfo(string id, string name)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->GetFileAttachment");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'name' when calling AttachmentApi->GetFileAttachment");
            }

            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/bmp",
                "image/png",
                "image/gif",
                "image/jpeg",
                "application/pdf",
                "text/csv",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "text/plain",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "text/x-r-source",
                "application/x-dosexec",
                "text/html",
                "application/xml",
                "application/sql",
                "application/vnd.ms-officetheme",
                "application/msword",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
                "application/vnd.openxmlformats-officedocument.presentationml.template",
                "application/vnd.ms-powerpoint",
                "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                "application/zip",
                "application/x-7z-compressed",
                "application/octet-stream",
                "text/tab-separated-values",
                "application/x-iwork-keynote",
                "application/vnd.ms-word.document.macroEnabled.12",
                "application/vnd.ms-word.template.macroEnabled.12",
                "application/vnd.ms-excel.sheet.macroEnabled.12",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.IssueTracker.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.IssueTracker.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFileAttachmentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            System.IO.Stream>("/attachments/{id}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// get the matched file attachment It retreive matched file. However, File read won&#39;t work until it used in any issue tracker issue/comment.     Note: the Accept header gets ignored and the originally uploaded content-type is returned
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">identity value of file attachment</param>
        /// <param name="name">name of the file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream>GetFileAttachmentAsync(string id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFileAttachmentWithHttpInfoAsync(id, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the matched file attachment It retreive matched file. However, File read won&#39;t work until it used in any issue tracker issue/comment.     Note: the Accept header gets ignored and the originally uploaded content-type is returned
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">identity value of file attachment</param>
        /// <param name="name">name of the file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetFileAttachmentWithHttpInfoAsync(string id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->GetFileAttachment");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'name' when calling AttachmentApi->GetFileAttachment");
            }


            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/bmp",
                "image/png",
                "image/gif",
                "image/jpeg",
                "application/pdf",
                "text/csv",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "text/plain",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "text/x-r-source",
                "application/x-dosexec",
                "text/html",
                "application/xml",
                "application/sql",
                "application/vnd.ms-officetheme",
                "application/msword",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
                "application/vnd.openxmlformats-officedocument.presentationml.template",
                "application/vnd.ms-powerpoint",
                "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                "application/zip",
                "application/x-7z-compressed",
                "application/octet-stream",
                "text/tab-separated-values",
                "application/x-iwork-keynote",
                "application/vnd.ms-word.document.macroEnabled.12",
                "application/vnd.ms-word.template.macroEnabled.12",
                "application/vnd.ms-excel.sheet.macroEnabled.12",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.IssueTracker.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.IssueTracker.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFileAttachmentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/attachments/{id}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allowed file types GET endpoint This will provide information about file extensions allowed to attachments.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FileExtension</returns>
        public FileExtension GetFileExtensions()
        {
            var localVarResponse = GetFileExtensionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allowed file types GET endpoint This will provide information about file extensions allowed to attachments.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FileExtension</returns>
        public ApiResponse<FileExtension> GetFileExtensionsWithHttpInfo()
        {
            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFileExtensionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FileExtension>("/attachments/file-extensions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileExtensions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Allowed file types GET endpoint This will provide information about file extensions allowed to attachments.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileExtension</returns>
        public async System.Threading.Tasks.Task<FileExtension>GetFileExtensionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFileExtensionsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allowed file types GET endpoint This will provide information about file extensions allowed to attachments.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileExtension)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FileExtension>> GetFileExtensionsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFileExtensionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileExtension>("/attachments/file-extensions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileExtensions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Post file attachment to Issue Tracker Issue or comment   This endpoint upload file attachments into Issue Tracker and it allows only single file at a time. It will throws error when tries to upload multiple files in single call.     File size should not exceed 10Mb. More info provided in examples. It allows only few type of files for attachments. Please review \&quot;attachments/file-extensions\&quot; endpoint for list allowed file types.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">input file for upload</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse PostFileAttachment(System.IO.Stream file)
        {
            var localVarResponse = PostFileAttachmentWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post file attachment to Issue Tracker Issue or comment   This endpoint upload file attachments into Issue Tracker and it allows only single file at a time. It will throws error when tries to upload multiple files in single call.     File size should not exceed 10Mb. More info provided in examples. It allows only few type of files for attachments. Please review \&quot;attachments/file-extensions\&quot; endpoint for list allowed file types.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">input file for upload</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse<AttachmentResponse> PostFileAttachmentWithHttpInfo(System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentApi->PostFileAttachment");
            }

            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostFileAttachmentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            AttachmentResponse>("/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFileAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Post file attachment to Issue Tracker Issue or comment   This endpoint upload file attachments into Issue Tracker and it allows only single file at a time. It will throws error when tries to upload multiple files in single call.     File size should not exceed 10Mb. More info provided in examples. It allows only few type of files for attachments. Please review \&quot;attachments/file-extensions\&quot; endpoint for list allowed file types.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">input file for upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse>PostFileAttachmentAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostFileAttachmentWithHttpInfoAsync(file, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post file attachment to Issue Tracker Issue or comment   This endpoint upload file attachments into Issue Tracker and it allows only single file at a time. It will throws error when tries to upload multiple files in single call.     File size should not exceed 10Mb. More info provided in examples. It allows only few type of files for attachments. Please review \&quot;attachments/file-extensions\&quot; endpoint for list allowed file types.
        /// </summary>
        /// <exception cref="FactSet.SDK.IssueTracker.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">input file for upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> PostFileAttachmentWithHttpInfoAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new FactSet.SDK.IssueTracker.Client.ApiException(400, "Missing required parameter 'file' when calling AttachmentApi->PostFileAttachment");
            }


            FactSet.SDK.IssueTracker.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IssueTracker.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IssueTracker.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IssueTracker.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostFileAttachmentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AttachmentResponse>("/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFileAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
