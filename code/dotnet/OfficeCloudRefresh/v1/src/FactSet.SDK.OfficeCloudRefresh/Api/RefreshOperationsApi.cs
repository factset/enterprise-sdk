/*
 * Office Cloud Refresh API
 *
 * Service for refreshing models with refreshable FactSet objects (e.g., =FDS codes)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.OfficeCloudRefresh.Client;
using FactSet.SDK.OfficeCloudRefresh.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.OfficeCloudRefresh.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefreshOperationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve a calculated file by resource ID.
        /// </summary>
        /// <remarks>
        /// If the requested job is complete, the calculated file will be returned.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="deleteFile">Delete the file from FactSet servers after completing the request. (optional, default to true)</param>
        /// <returns>RefreshOperationsApi.GetFileByIdResponseWrapper</returns>
        RefreshOperationsApi.GetFileByIdResponseWrapper GetFileById(Guid id, bool? deleteFile = default(bool?));

        /// <summary>
        /// Retrieve a calculated file by resource ID.
        /// </summary>
        /// <remarks>
        /// If the requested job is complete, the calculated file will be returned.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="deleteFile">Delete the file from FactSet servers after completing the request. (optional, default to true)</param>
        /// <returns>ApiResponse of RefreshOperationsApi.GetFileByIdResponseWrapper</returns>
        ApiResponse<RefreshOperationsApi.GetFileByIdResponseWrapper> GetFileByIdWithHttpInfo(Guid id, bool? deleteFile = default(bool?));
        /// <summary>
        /// Get the status of the refresh job with the given resource ID
        /// </summary>
        /// <remarks>
        /// Check the status of the given job by the resource ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <returns>JobStatus</returns>
        JobStatus GetStatusById(Guid id);

        /// <summary>
        /// Get the status of the refresh job with the given resource ID
        /// </summary>
        /// <remarks>
        /// Check the status of the given job by the resource ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <returns>ApiResponse of JobStatus</returns>
        ApiResponse<JobStatus> GetStatusByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Refresh a spreadsheet file
        /// </summary>
        /// <remarks>
        /// Start refreshing a spreadsheet file (in the Open Office XML format).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="nowHandlingEnabled">Return \\#VALUE for &#x3D;FDS codes dependent on NOW(). Default is true. For more information on volatile code handling, see Online Assistant https://my.apps.factset.com/oa/pages/16118. (optional)</param>
        /// <param name="refreshAutoFilters">Option to refresh &#x3D;FDS codes within autofilters.  Codes that are filtered out will not be refreshed, unless this option is set to true.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="resizeArrays">Option to allow automatic array-resizing, which allows you to return a time series of data without manually setting an array.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <returns>JobStatus</returns>
        JobStatus PostWorkbook(System.IO.Stream body, bool? nowHandlingEnabled = default(bool?), bool? refreshAutoFilters = default(bool?), bool? resizeArrays = default(bool?));

        /// <summary>
        /// Refresh a spreadsheet file
        /// </summary>
        /// <remarks>
        /// Start refreshing a spreadsheet file (in the Open Office XML format).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="nowHandlingEnabled">Return \\#VALUE for &#x3D;FDS codes dependent on NOW(). Default is true. For more information on volatile code handling, see Online Assistant https://my.apps.factset.com/oa/pages/16118. (optional)</param>
        /// <param name="refreshAutoFilters">Option to refresh &#x3D;FDS codes within autofilters.  Codes that are filtered out will not be refreshed, unless this option is set to true.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="resizeArrays">Option to allow automatic array-resizing, which allows you to return a time series of data without manually setting an array.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <returns>ApiResponse of JobStatus</returns>
        ApiResponse<JobStatus> PostWorkbookWithHttpInfo(System.IO.Stream body, bool? nowHandlingEnabled = default(bool?), bool? refreshAutoFilters = default(bool?), bool? resizeArrays = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefreshOperationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve a calculated file by resource ID.
        /// </summary>
        /// <remarks>
        /// If the requested job is complete, the calculated file will be returned.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="deleteFile">Delete the file from FactSet servers after completing the request. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<RefreshOperationsApi.GetFileByIdResponseWrapper> GetFileByIdAsync(Guid id, bool? deleteFile = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a calculated file by resource ID.
        /// </summary>
        /// <remarks>
        /// If the requested job is complete, the calculated file will be returned.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="deleteFile">Delete the file from FactSet servers after completing the request. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefreshOperationsApi.GetFileByIdResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefreshOperationsApi.GetFileByIdResponseWrapper>> GetFileByIdWithHttpInfoAsync(Guid id, bool? deleteFile = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the status of the refresh job with the given resource ID
        /// </summary>
        /// <remarks>
        /// Check the status of the given job by the resource ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatus</returns>
        System.Threading.Tasks.Task<JobStatus> GetStatusByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the status of the refresh job with the given resource ID
        /// </summary>
        /// <remarks>
        /// Check the status of the given job by the resource ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStatus>> GetStatusByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh a spreadsheet file
        /// </summary>
        /// <remarks>
        /// Start refreshing a spreadsheet file (in the Open Office XML format).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="nowHandlingEnabled">Return \\#VALUE for &#x3D;FDS codes dependent on NOW(). Default is true. For more information on volatile code handling, see Online Assistant https://my.apps.factset.com/oa/pages/16118. (optional)</param>
        /// <param name="refreshAutoFilters">Option to refresh &#x3D;FDS codes within autofilters.  Codes that are filtered out will not be refreshed, unless this option is set to true.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="resizeArrays">Option to allow automatic array-resizing, which allows you to return a time series of data without manually setting an array.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatus</returns>
        System.Threading.Tasks.Task<JobStatus> PostWorkbookAsync(System.IO.Stream body, bool? nowHandlingEnabled = default(bool?), bool? refreshAutoFilters = default(bool?), bool? resizeArrays = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh a spreadsheet file
        /// </summary>
        /// <remarks>
        /// Start refreshing a spreadsheet file (in the Open Office XML format).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="nowHandlingEnabled">Return \\#VALUE for &#x3D;FDS codes dependent on NOW(). Default is true. For more information on volatile code handling, see Online Assistant https://my.apps.factset.com/oa/pages/16118. (optional)</param>
        /// <param name="refreshAutoFilters">Option to refresh &#x3D;FDS codes within autofilters.  Codes that are filtered out will not be refreshed, unless this option is set to true.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="resizeArrays">Option to allow automatic array-resizing, which allows you to return a time series of data without manually setting an array.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStatus>> PostWorkbookWithHttpInfoAsync(System.IO.Stream body, bool? nowHandlingEnabled = default(bool?), bool? refreshAutoFilters = default(bool?), bool? resizeArrays = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefreshOperationsApi : IRefreshOperationsApiSync, IRefreshOperationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RefreshOperationsApi : IRefreshOperationsApi
    {
        private FactSet.SDK.OfficeCloudRefresh.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFileByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(System.IO.Stream) },
            { (HttpStatusCode)202, typeof(JobStatus) },
            { (HttpStatusCode)400, typeof(Errors) },
            { (HttpStatusCode)404, typeof(Errors) },
            { (HttpStatusCode)422, typeof(Errors) },
            { (HttpStatusCode)500, typeof(Errors) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetStatusByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(JobStatus) },
            { (HttpStatusCode)202, typeof(JobStatus) },
            { (HttpStatusCode)400, typeof(Errors) },
            { (HttpStatusCode)404, typeof(Errors) },
            { (HttpStatusCode)422, typeof(Errors) },
            { (HttpStatusCode)500, typeof(Errors) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostWorkbookResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(JobStatus) },
            { (HttpStatusCode)400, typeof(Errors) },
            { (HttpStatusCode)403, typeof(Errors) },
            { (HttpStatusCode)413, typeof(Errors) },
            { (HttpStatusCode)500, typeof(Errors) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        
        /// <summary>
        /// Wrapper to support GET /refresh/{id} returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : System.IO.Stream<br />
        /// Expected response; body will contain calculated file
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : JobStatus<br />
        /// Accepted (resource not ready yet)
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetFileByIdResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     System.IO.Stream data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     JobStatus data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetFileByIdResponseWrapper {

            /// <summary>This constructor initializes the new GetFileByIdResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetFileByIdResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Expected response; body will contain calculated file
            /// </summary>
            public System.IO.Stream Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.OfficeCloudRefresh.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (System.IO.Stream) Response;
                }
            }
            
            /// <summary>
            /// Accepted (resource not ready yet)
            /// </summary>
            public JobStatus Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.OfficeCloudRefresh.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (JobStatus) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="RefreshOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefreshOperationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefreshOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefreshOperationsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.OfficeCloudRefresh.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OfficeCloudRefresh.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.OfficeCloudRefresh.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.OfficeCloudRefresh.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OfficeCloudRefresh.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.OfficeCloudRefresh.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefreshOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RefreshOperationsApi(FactSet.SDK.OfficeCloudRefresh.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.OfficeCloudRefresh.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OfficeCloudRefresh.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.OfficeCloudRefresh.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OfficeCloudRefresh.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.OfficeCloudRefresh.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefreshOperationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RefreshOperationsApi(FactSet.SDK.OfficeCloudRefresh.Client.ISynchronousClient client, FactSet.SDK.OfficeCloudRefresh.Client.IAsynchronousClient asyncClient, FactSet.SDK.OfficeCloudRefresh.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.OfficeCloudRefresh.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.OfficeCloudRefresh.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.OfficeCloudRefresh.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.OfficeCloudRefresh.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.OfficeCloudRefresh.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve a calculated file by resource ID. If the requested job is complete, the calculated file will be returned.
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="deleteFile">Delete the file from FactSet servers after completing the request. (optional, default to true)</param>
        /// <returns>RefreshOperationsApi.GetFileByIdResponseWrapper</returns>
        public RefreshOperationsApi.GetFileByIdResponseWrapper GetFileById(Guid id, bool? deleteFile = default(bool?))
        {
            var localVarResponse = GetFileByIdWithHttpInfo(id, deleteFile);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a calculated file by resource ID. If the requested job is complete, the calculated file will be returned.
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="deleteFile">Delete the file from FactSet servers after completing the request. (optional, default to true)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<RefreshOperationsApi.GetFileByIdResponseWrapper> GetFileByIdWithHttpInfo(Guid id, bool? deleteFile = default(bool?))
        {
            FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (deleteFile != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToMultiMap("", "deleteFile", deleteFile));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFileByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/refresh/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getfilebyidResponse = new GetFileByIdResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetFileByIdResponseWrapper>(localVarResponse.StatusCode, getfilebyidResponse);
        }

        /// <summary>
        /// Retrieve a calculated file by resource ID. If the requested job is complete, the calculated file will be returned.
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="deleteFile">Delete the file from FactSet servers after completing the request. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<RefreshOperationsApi.GetFileByIdResponseWrapper>GetFileByIdAsync(Guid id, bool? deleteFile = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFileByIdWithHttpInfoAsync(id, deleteFile, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a calculated file by resource ID. If the requested job is complete, the calculated file will be returned.
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="deleteFile">Delete the file from FactSet servers after completing the request. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<RefreshOperationsApi.GetFileByIdResponseWrapper>> GetFileByIdWithHttpInfoAsync(Guid id, bool? deleteFile = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (deleteFile != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToMultiMap("", "deleteFile", deleteFile));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFileByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/refresh/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getfilebyidResponse = new GetFileByIdResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetFileByIdResponseWrapper>(localVarResponse.StatusCode, getfilebyidResponse);
        }

        /// <summary>
        /// Get the status of the refresh job with the given resource ID Check the status of the given job by the resource ID
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <returns>JobStatus</returns>
        public JobStatus GetStatusById(Guid id)
        {
            var localVarResponse = GetStatusByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of the refresh job with the given resource ID Check the status of the given job by the resource ID
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <returns>ApiResponse of JobStatus</returns>
        public ApiResponse<JobStatus> GetStatusByIdWithHttpInfo(Guid id)
        {
            FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStatusByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            JobStatus>("/refresh/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatusById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the status of the refresh job with the given resource ID Check the status of the given job by the resource ID
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatus</returns>
        public async System.Threading.Tasks.Task<JobStatus>GetStatusByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStatusByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of the refresh job with the given resource ID Check the status of the given job by the resource ID
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for the job (resource ID returned from FactSet).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatus)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<JobStatus>> GetStatusByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStatusByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JobStatus>("/refresh/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatusById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh a spreadsheet file Start refreshing a spreadsheet file (in the Open Office XML format).
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="nowHandlingEnabled">Return \\#VALUE for &#x3D;FDS codes dependent on NOW(). Default is true. For more information on volatile code handling, see Online Assistant https://my.apps.factset.com/oa/pages/16118. (optional)</param>
        /// <param name="refreshAutoFilters">Option to refresh &#x3D;FDS codes within autofilters.  Codes that are filtered out will not be refreshed, unless this option is set to true.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="resizeArrays">Option to allow automatic array-resizing, which allows you to return a time series of data without manually setting an array.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <returns>JobStatus</returns>
        public JobStatus PostWorkbook(System.IO.Stream body, bool? nowHandlingEnabled = default(bool?), bool? refreshAutoFilters = default(bool?), bool? resizeArrays = default(bool?))
        {
            var localVarResponse = PostWorkbookWithHttpInfo(body, nowHandlingEnabled, refreshAutoFilters, resizeArrays);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh a spreadsheet file Start refreshing a spreadsheet file (in the Open Office XML format).
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="nowHandlingEnabled">Return \\#VALUE for &#x3D;FDS codes dependent on NOW(). Default is true. For more information on volatile code handling, see Online Assistant https://my.apps.factset.com/oa/pages/16118. (optional)</param>
        /// <param name="refreshAutoFilters">Option to refresh &#x3D;FDS codes within autofilters.  Codes that are filtered out will not be refreshed, unless this option is set to true.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="resizeArrays">Option to allow automatic array-resizing, which allows you to return a time series of data without manually setting an array.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <returns>ApiResponse of JobStatus</returns>
        public ApiResponse<JobStatus> PostWorkbookWithHttpInfo(System.IO.Stream body, bool? nowHandlingEnabled = default(bool?), bool? refreshAutoFilters = default(bool?), bool? resizeArrays = default(bool?))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new FactSet.SDK.OfficeCloudRefresh.Client.ApiException(400, "Missing required parameter 'body' when calling RefreshOperationsApi->PostWorkbook");
            }

            FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (nowHandlingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToMultiMap("", "nowHandlingEnabled", nowHandlingEnabled));
            }
            if (refreshAutoFilters != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToMultiMap("", "refreshAutoFilters", refreshAutoFilters));
            }
            if (resizeArrays != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToMultiMap("", "resizeArrays", resizeArrays));
            }
            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostWorkbookResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            JobStatus>("/refresh/calculate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWorkbook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Refresh a spreadsheet file Start refreshing a spreadsheet file (in the Open Office XML format).
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="nowHandlingEnabled">Return \\#VALUE for &#x3D;FDS codes dependent on NOW(). Default is true. For more information on volatile code handling, see Online Assistant https://my.apps.factset.com/oa/pages/16118. (optional)</param>
        /// <param name="refreshAutoFilters">Option to refresh &#x3D;FDS codes within autofilters.  Codes that are filtered out will not be refreshed, unless this option is set to true.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="resizeArrays">Option to allow automatic array-resizing, which allows you to return a time series of data without manually setting an array.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatus</returns>
        public async System.Threading.Tasks.Task<JobStatus>PostWorkbookAsync(System.IO.Stream body, bool? nowHandlingEnabled = default(bool?), bool? refreshAutoFilters = default(bool?), bool? resizeArrays = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostWorkbookWithHttpInfoAsync(body, nowHandlingEnabled, refreshAutoFilters, resizeArrays, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh a spreadsheet file Start refreshing a spreadsheet file (in the Open Office XML format).
        /// </summary>
        /// <exception cref="FactSet.SDK.OfficeCloudRefresh.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="nowHandlingEnabled">Return \\#VALUE for &#x3D;FDS codes dependent on NOW(). Default is true. For more information on volatile code handling, see Online Assistant https://my.apps.factset.com/oa/pages/16118. (optional)</param>
        /// <param name="refreshAutoFilters">Option to refresh &#x3D;FDS codes within autofilters.  Codes that are filtered out will not be refreshed, unless this option is set to true.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="resizeArrays">Option to allow automatic array-resizing, which allows you to return a time series of data without manually setting an array.  Default is true.  For more information, see Online Assistant https://my.apps.factset.com/oa/pages/21084#fds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatus)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<JobStatus>> PostWorkbookWithHttpInfoAsync(System.IO.Stream body, bool? nowHandlingEnabled = default(bool?), bool? refreshAutoFilters = default(bool?), bool? resizeArrays = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new FactSet.SDK.OfficeCloudRefresh.Client.ApiException(400, "Missing required parameter 'body' when calling RefreshOperationsApi->PostWorkbook");
            }


            FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OfficeCloudRefresh.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (nowHandlingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToMultiMap("", "nowHandlingEnabled", nowHandlingEnabled));
            }
            if (refreshAutoFilters != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToMultiMap("", "refreshAutoFilters", refreshAutoFilters));
            }
            if (resizeArrays != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.ParameterToMultiMap("", "resizeArrays", resizeArrays));
            }
            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OfficeCloudRefresh.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostWorkbookResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobStatus>("/refresh/calculate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWorkbook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
