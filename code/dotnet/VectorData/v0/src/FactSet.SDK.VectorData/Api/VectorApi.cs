/*
 * Vector Data API
 *
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.VectorData.Client;
using FactSet.SDK.VectorData.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.VectorData.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVectorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns chunked text for the given vectorId.
        /// </summary>
        /// <remarks>
        /// Returns content and link of provided vector id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorId">Unique identifier for a document</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <returns>ChunkTextResponse</returns>
        ChunkTextResponse GetCount(List<string> vectorId, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns chunked text for the given vectorId.
        /// </summary>
        /// <remarks>
        /// Returns content and link of provided vector id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorId">Unique identifier for a document</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <returns>ApiResponse of ChunkTextResponse</returns>
        ApiResponse<ChunkTextResponse> GetCountWithHttpInfo(List<string> vectorId, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Return vector information based on the input parameters below
        /// </summary>
        /// <remarks>
        /// Returns the vector information.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorDataRequest">Input parameters for vector data. (optional)</param>
        /// <returns>VectorDataResponse</returns>
        VectorDataResponse PostVector(VectorDataRequest vectorDataRequest = default(VectorDataRequest));

        /// <summary>
        /// Return vector information based on the input parameters below
        /// </summary>
        /// <remarks>
        /// Returns the vector information.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorDataRequest">Input parameters for vector data. (optional)</param>
        /// <returns>ApiResponse of VectorDataResponse</returns>
        ApiResponse<VectorDataResponse> PostVectorWithHttpInfo(VectorDataRequest vectorDataRequest = default(VectorDataRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVectorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns chunked text for the given vectorId.
        /// </summary>
        /// <remarks>
        /// Returns content and link of provided vector id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorId">Unique identifier for a document</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChunkTextResponse</returns>
        System.Threading.Tasks.Task<ChunkTextResponse> GetCountAsync(List<string> vectorId, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns chunked text for the given vectorId.
        /// </summary>
        /// <remarks>
        /// Returns content and link of provided vector id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorId">Unique identifier for a document</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChunkTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChunkTextResponse>> GetCountWithHttpInfoAsync(List<string> vectorId, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return vector information based on the input parameters below
        /// </summary>
        /// <remarks>
        /// Returns the vector information.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorDataRequest">Input parameters for vector data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VectorDataResponse</returns>
        System.Threading.Tasks.Task<VectorDataResponse> PostVectorAsync(VectorDataRequest vectorDataRequest = default(VectorDataRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return vector information based on the input parameters below
        /// </summary>
        /// <remarks>
        /// Returns the vector information.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorDataRequest">Input parameters for vector data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VectorDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VectorDataResponse>> PostVectorWithHttpInfoAsync(VectorDataRequest vectorDataRequest = default(VectorDataRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVectorApi : IVectorApiSync, IVectorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VectorApi : IVectorApi
    {
        private FactSet.SDK.VectorData.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCountResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ChunkTextResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostVectorResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(VectorDataResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="VectorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VectorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VectorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VectorApi(string basePath)
        {
            this.Configuration = FactSet.SDK.VectorData.Client.Configuration.MergeConfigurations(
                FactSet.SDK.VectorData.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.VectorData.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.VectorData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.VectorData.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.VectorData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VectorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VectorApi(FactSet.SDK.VectorData.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.VectorData.Client.Configuration.MergeConfigurations(
                FactSet.SDK.VectorData.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.VectorData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.VectorData.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.VectorData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VectorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VectorApi(FactSet.SDK.VectorData.Client.ISynchronousClient client, FactSet.SDK.VectorData.Client.IAsynchronousClient asyncClient, FactSet.SDK.VectorData.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.VectorData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.VectorData.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.VectorData.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.VectorData.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.VectorData.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns chunked text for the given vectorId. Returns content and link of provided vector id.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorId">Unique identifier for a document</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <returns>ChunkTextResponse</returns>
        public ChunkTextResponse GetCount(List<string> vectorId, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetCountWithHttpInfo(vectorId, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns chunked text for the given vectorId. Returns content and link of provided vector id.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorId">Unique identifier for a document</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <returns>ApiResponse of ChunkTextResponse</returns>
        public ApiResponse<ChunkTextResponse> GetCountWithHttpInfo(List<string> vectorId, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'vectorId' is set
            if (vectorId == null)
            {
                throw new FactSet.SDK.VectorData.Client.ApiException(400, "Missing required parameter 'vectorId' when calling VectorApi->GetCount");
            }

            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VectorData.Client.ClientUtils.ParameterToMultiMap("multi", "vectorId", vectorId));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VectorData.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VectorData.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ChunkTextResponse>("/chunk-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns chunked text for the given vectorId. Returns content and link of provided vector id.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorId">Unique identifier for a document</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChunkTextResponse</returns>
        public async System.Threading.Tasks.Task<ChunkTextResponse>GetCountAsync(List<string> vectorId, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCountWithHttpInfoAsync(vectorId, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns chunked text for the given vectorId. Returns content and link of provided vector id.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorId">Unique identifier for a document</param>
        /// <param name="paginationLimit">Number of results to return per page. (optional, default to 25)</param>
        /// <param name="paginationOffset">Page number of the results to return.  (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChunkTextResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ChunkTextResponse>> GetCountWithHttpInfoAsync(List<string> vectorId, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vectorId' is set
            if (vectorId == null)
            {
                throw new FactSet.SDK.VectorData.Client.ApiException(400, "Missing required parameter 'vectorId' when calling VectorApi->GetCount");
            }


            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VectorData.Client.ClientUtils.ParameterToMultiMap("multi", "vectorId", vectorId));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VectorData.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VectorData.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChunkTextResponse>("/chunk-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return vector information based on the input parameters below Returns the vector information.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorDataRequest">Input parameters for vector data. (optional)</param>
        /// <returns>VectorDataResponse</returns>
        public VectorDataResponse PostVector(VectorDataRequest vectorDataRequest = default(VectorDataRequest))
        {
            var localVarResponse = PostVectorWithHttpInfo(vectorDataRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return vector information based on the input parameters below Returns the vector information.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorDataRequest">Input parameters for vector data. (optional)</param>
        /// <returns>ApiResponse of VectorDataResponse</returns>
        public ApiResponse<VectorDataResponse> PostVectorWithHttpInfo(VectorDataRequest vectorDataRequest = default(VectorDataRequest))
        {
            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = vectorDataRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostVectorResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            VectorDataResponse>("/data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Return vector information based on the input parameters below Returns the vector information.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorDataRequest">Input parameters for vector data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VectorDataResponse</returns>
        public async System.Threading.Tasks.Task<VectorDataResponse>PostVectorAsync(VectorDataRequest vectorDataRequest = default(VectorDataRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostVectorWithHttpInfoAsync(vectorDataRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return vector information based on the input parameters below Returns the vector information.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vectorDataRequest">Input parameters for vector data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VectorDataResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<VectorDataResponse>> PostVectorWithHttpInfoAsync(VectorDataRequest vectorDataRequest = default(VectorDataRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = vectorDataRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostVectorResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VectorDataResponse>("/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
