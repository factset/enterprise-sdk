/*
 * Vector Data API
 *
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.VectorData.Client;
using FactSet.SDK.VectorData.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.VectorData.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the document types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;documentTypes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DocumentTypesResponse</returns>
        DocumentTypesResponse GetDocumentTypes();

        /// <summary>
        /// Returns the document types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;documentTypes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DocumentTypesResponse</returns>
        ApiResponse<DocumentTypesResponse> GetDocumentTypesWithHttpInfo();
        /// <summary>
        /// Returns the sources.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SourceResponse</returns>
        SourceResponse GetSources();

        /// <summary>
        /// Returns the sources.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SourceResponse</returns>
        ApiResponse<SourceResponse> GetSourcesWithHttpInfo();
        /// <summary>
        /// Returns the themes.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;themes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ThemesResponse</returns>
        ThemesResponse GetThemes();

        /// <summary>
        /// Returns the themes.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;themes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ThemesResponse</returns>
        ApiResponse<ThemesResponse> GetThemesWithHttpInfo();
        /// <summary>
        /// Returns the schemas.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;schemas&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <returns>SchemasResponse</returns>
        SchemasResponse Getschemas(List<string> sources = default(List<string>));

        /// <summary>
        /// Returns the schemas.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;schemas&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <returns>ApiResponse of SchemasResponse</returns>
        ApiResponse<SchemasResponse> GetschemasWithHttpInfo(List<string> sources = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the document types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;documentTypes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentTypesResponse</returns>
        System.Threading.Tasks.Task<DocumentTypesResponse> GetDocumentTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the document types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;documentTypes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypesResponse>> GetDocumentTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the sources.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SourceResponse</returns>
        System.Threading.Tasks.Task<SourceResponse> GetSourcesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the sources.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SourceResponse>> GetSourcesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the themes.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;themes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemesResponse</returns>
        System.Threading.Tasks.Task<ThemesResponse> GetThemesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the themes.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;themes&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemesResponse>> GetThemesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the schemas.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;schemas&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemasResponse</returns>
        System.Threading.Tasks.Task<SchemasResponse> GetschemasAsync(List<string> sources = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the schemas.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;schemas&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemasResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemasResponse>> GetschemasWithHttpInfoAsync(List<string> sources = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApi : IMetaApiSync, IMetaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetaApi : IMetaApi
    {
        private FactSet.SDK.VectorData.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetDocumentTypesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DocumentTypesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSourcesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SourceResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetThemesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ThemesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetschemasResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SchemasResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetaApi(string basePath)
        {
            this.Configuration = FactSet.SDK.VectorData.Client.Configuration.MergeConfigurations(
                FactSet.SDK.VectorData.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.VectorData.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.VectorData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.VectorData.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.VectorData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetaApi(FactSet.SDK.VectorData.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.VectorData.Client.Configuration.MergeConfigurations(
                FactSet.SDK.VectorData.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.VectorData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.VectorData.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.VectorData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetaApi(FactSet.SDK.VectorData.Client.ISynchronousClient client, FactSet.SDK.VectorData.Client.IAsynchronousClient asyncClient, FactSet.SDK.VectorData.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.VectorData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.VectorData.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.VectorData.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.VectorData.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.VectorData.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the document types. Retrieves and delivers a comprehensive list of all available &#x60;documentTypes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DocumentTypesResponse</returns>
        public DocumentTypesResponse GetDocumentTypes()
        {
            var localVarResponse = GetDocumentTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the document types. Retrieves and delivers a comprehensive list of all available &#x60;documentTypes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DocumentTypesResponse</returns>
        public ApiResponse<DocumentTypesResponse> GetDocumentTypesWithHttpInfo()
        {
            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetDocumentTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            DocumentTypesResponse>("/meta/document-types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocumentTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the document types. Retrieves and delivers a comprehensive list of all available &#x60;documentTypes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentTypesResponse</returns>
        public async System.Threading.Tasks.Task<DocumentTypesResponse>GetDocumentTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetDocumentTypesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the document types. Retrieves and delivers a comprehensive list of all available &#x60;documentTypes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentTypesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypesResponse>> GetDocumentTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetDocumentTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DocumentTypesResponse>("/meta/document-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocumentTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the sources. Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SourceResponse</returns>
        public SourceResponse GetSources()
        {
            var localVarResponse = GetSourcesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the sources. Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SourceResponse</returns>
        public ApiResponse<SourceResponse> GetSourcesWithHttpInfo()
        {
            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSourcesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SourceResponse>("/meta/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the sources. Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SourceResponse</returns>
        public async System.Threading.Tasks.Task<SourceResponse>GetSourcesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSourcesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the sources. Retrieves and delivers a comprehensive list of all available &#x60;sources&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SourceResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SourceResponse>> GetSourcesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSourcesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SourceResponse>("/meta/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the themes. Retrieves and delivers a comprehensive list of all available &#x60;themes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ThemesResponse</returns>
        public ThemesResponse GetThemes()
        {
            var localVarResponse = GetThemesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the themes. Retrieves and delivers a comprehensive list of all available &#x60;themes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ThemesResponse</returns>
        public ApiResponse<ThemesResponse> GetThemesWithHttpInfo()
        {
            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetThemesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ThemesResponse>("/meta/themes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the themes. Retrieves and delivers a comprehensive list of all available &#x60;themes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemesResponse</returns>
        public async System.Threading.Tasks.Task<ThemesResponse>GetThemesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetThemesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the themes. Retrieves and delivers a comprehensive list of all available &#x60;themes&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ThemesResponse>> GetThemesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetThemesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ThemesResponse>("/meta/themes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the schemas. Retrieves and delivers a comprehensive list of all available &#x60;schemas&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <returns>SchemasResponse</returns>
        public SchemasResponse Getschemas(List<string> sources = default(List<string>))
        {
            var localVarResponse = GetschemasWithHttpInfo(sources);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the schemas. Retrieves and delivers a comprehensive list of all available &#x60;schemas&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <returns>ApiResponse of SchemasResponse</returns>
        public ApiResponse<SchemasResponse> GetschemasWithHttpInfo(List<string> sources = default(List<string>))
        {
            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sources != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VectorData.Client.ClientUtils.ParameterToMultiMap("csv", "sources", sources));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetschemasResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SchemasResponse>("/meta/schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getschemas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the schemas. Retrieves and delivers a comprehensive list of all available &#x60;schemas&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemasResponse</returns>
        public async System.Threading.Tasks.Task<SchemasResponse>GetschemasAsync(List<string> sources = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetschemasWithHttpInfoAsync(sources, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the schemas. Retrieves and delivers a comprehensive list of all available &#x60;schemas&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.VectorData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sources">Code for document source to include.  This is a comma-separated list. Use the &#x60;/meta/sources&#x60; endpoint to get the list of available sources. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemasResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SchemasResponse>> GetschemasWithHttpInfoAsync(List<string> sources = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VectorData.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VectorData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VectorData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sources != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VectorData.Client.ClientUtils.ParameterToMultiMap("csv", "sources", sources));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VectorData.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetschemasResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemasResponse>("/meta/schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Getschemas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
