/*
 * Vector Data API
 *
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VectorData.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VectorData.Model
{
    /// <summary>
    /// Elements of schemas.
    /// </summary>
    [DataContract(Name = "Schemas")]
    public partial class Schemas : IEquatable<Schemas>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Schemas" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Schemas() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Schemas" /> class.
        /// </summary>
        /// <param name="property">The name of the schema. (required).</param>
        /// <param name="type">The type of the schema. (required).</param>
        /// <param name="source">Source of the schema. (required).</param>
        public Schemas(string property, string type, string source)
        {
            // to ensure "property" is required (not null)
            if (property == null) {
                throw new ArgumentNullException("property is a required property for Schemas and cannot be null");
            }
            this.Property = property;
            // to ensure "type" is required (not null)
            if (type == null) {
                throw new ArgumentNullException("type is a required property for Schemas and cannot be null");
            }
            this.Type = type;
            // to ensure "source" is required (not null)
            if (source == null) {
                throw new ArgumentNullException("source is a required property for Schemas and cannot be null");
            }
            this.Source = source;
        }

        /// <summary>
        /// The name of the schema.
        /// </summary>
        /// <value>The name of the schema.</value>
        [DataMember(Name = "property", IsRequired = true, EmitDefaultValue = false)]
        public string Property { get; set; }

        /// <summary>
        /// The type of the schema.
        /// </summary>
        /// <value>The type of the schema.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Source of the schema.
        /// </summary>
        /// <value>Source of the schema.</value>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Schemas {\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Schemas);
        }

        /// <summary>
        /// Returns true if Schemas instances are equal
        /// </summary>
        /// <param name="input">Instance of Schemas to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Schemas input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Property != null)
                {
                    hashCode = (hashCode * 59) + this.Property.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
