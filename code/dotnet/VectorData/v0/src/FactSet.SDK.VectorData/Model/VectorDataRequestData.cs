/*
 * Vector Data API
 *
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VectorData.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VectorData.Model
{
    /// <summary>
    /// Elements of vetctor data request.
    /// </summary>
    [DataContract(Name = "VectorDataRequest_data")]
    public partial class VectorDataRequestData : IEquatable<VectorDataRequestData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VectorDataRequestData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VectorDataRequestData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VectorDataRequestData" /> class.
        /// </summary>
        /// <param name="query">Search to include the query text. (required).</param>
        /// <param name="startDate">Start Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc). (required).</param>
        /// <param name="endDate">End Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc). (required).</param>
        /// <param name="esgTheme">The search to include any esg themes of given sources..</param>
        /// <param name="searchConcept">The search to include any concept of given sources..</param>
        /// <param name="sentiment">The search to include any sentiment of given sources..</param>
        /// <param name="documentTypes">The search to include any of the document type..</param>
        /// <param name="sources">Code for document source to include. Currently EDGAR, StreetAccount and FactSet Callstreet Transcripts are available. (required).</param>
        public VectorDataRequestData(string query, DateTime startDate, DateTime endDate, HashSet<string> sources,HashSet<string> esgTheme = default(HashSet<string>), HashSet<string> searchConcept = default(HashSet<string>), HashSet<string> sentiment = default(HashSet<string>), HashSet<string> documentTypes = default(HashSet<string>))
        {
            // to ensure "query" is required (not null)
            if (query == null) {
                throw new ArgumentNullException("query is a required property for VectorDataRequestData and cannot be null");
            }
            this.Query = query;
            this.StartDate = startDate;
            this.EndDate = endDate;
            // to ensure "sources" is required (not null)
            if (sources == null) {
                throw new ArgumentNullException("sources is a required property for VectorDataRequestData and cannot be null");
            }
            this.Sources = sources;
            this.EsgTheme = esgTheme;
            this.SearchConcept = searchConcept;
            this.Sentiment = sentiment;
            this.DocumentTypes = documentTypes;
        }

        /// <summary>
        /// Search to include the query text.
        /// </summary>
        /// <value>Search to include the query text.</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Start Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).
        /// </summary>
        /// <value>Start Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// End Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).
        /// </summary>
        /// <value>End Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).</value>
        [DataMember(Name = "endDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The search to include any esg themes of given sources.
        /// </summary>
        /// <value>The search to include any esg themes of given sources.</value>
        [DataMember(Name = "esgTheme", EmitDefaultValue = false)]
        public HashSet<string> EsgTheme { get; set; }

        /// <summary>
        /// The search to include any concept of given sources.
        /// </summary>
        /// <value>The search to include any concept of given sources.</value>
        [DataMember(Name = "searchConcept", EmitDefaultValue = false)]
        public HashSet<string> SearchConcept { get; set; }

        /// <summary>
        /// The search to include any sentiment of given sources.
        /// </summary>
        /// <value>The search to include any sentiment of given sources.</value>
        [DataMember(Name = "sentiment", EmitDefaultValue = false)]
        public HashSet<string> Sentiment { get; set; }

        /// <summary>
        /// The search to include any of the document type.
        /// </summary>
        /// <value>The search to include any of the document type.</value>
        [DataMember(Name = "documentTypes", EmitDefaultValue = false)]
        public HashSet<string> DocumentTypes { get; set; }

        /// <summary>
        /// Code for document source to include. Currently EDGAR, StreetAccount and FactSet Callstreet Transcripts are available.
        /// </summary>
        /// <value>Code for document source to include. Currently EDGAR, StreetAccount and FactSet Callstreet Transcripts are available.</value>
        [DataMember(Name = "sources", IsRequired = true, EmitDefaultValue = false)]
        public HashSet<string> Sources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VectorDataRequestData {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EsgTheme: ").Append(EsgTheme).Append("\n");
            sb.Append("  SearchConcept: ").Append(SearchConcept).Append("\n");
            sb.Append("  Sentiment: ").Append(Sentiment).Append("\n");
            sb.Append("  DocumentTypes: ").Append(DocumentTypes).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VectorDataRequestData);
        }

        /// <summary>
        /// Returns true if VectorDataRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of VectorDataRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VectorDataRequestData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EsgTheme == input.EsgTheme ||
                    this.EsgTheme != null &&
                    input.EsgTheme != null &&
                    this.EsgTheme.SequenceEqual(input.EsgTheme)
                ) && 
                (
                    this.SearchConcept == input.SearchConcept ||
                    this.SearchConcept != null &&
                    input.SearchConcept != null &&
                    this.SearchConcept.SequenceEqual(input.SearchConcept)
                ) && 
                (
                    this.Sentiment == input.Sentiment ||
                    this.Sentiment != null &&
                    input.Sentiment != null &&
                    this.Sentiment.SequenceEqual(input.Sentiment)
                ) && 
                (
                    this.DocumentTypes == input.DocumentTypes ||
                    this.DocumentTypes != null &&
                    input.DocumentTypes != null &&
                    this.DocumentTypes.SequenceEqual(input.DocumentTypes)
                ) && 
                (
                    this.Sources == input.Sources ||
                    this.Sources != null &&
                    input.Sources != null &&
                    this.Sources.SequenceEqual(input.Sources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.EsgTheme != null)
                {
                    hashCode = (hashCode * 59) + this.EsgTheme.GetHashCode();
                }
                if (this.SearchConcept != null)
                {
                    hashCode = (hashCode * 59) + this.SearchConcept.GetHashCode();
                }
                if (this.Sentiment != null)
                {
                    hashCode = (hashCode * 59) + this.Sentiment.GetHashCode();
                }
                if (this.DocumentTypes != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentTypes.GetHashCode();
                }
                if (this.Sources != null)
                {
                    hashCode = (hashCode * 59) + this.Sources.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
