/*
 * Vector Data API
 *
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VectorData.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VectorData.Model
{
    /// <summary>
    /// Object defining the sorting and pagination attributes for an endpoint request.
    /// </summary>
    [DataContract(Name = "VectorDataResponse_meta")]
    public partial class VectorDataResponseMeta : IEquatable<VectorDataResponseMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VectorDataResponseMeta" /> class.
        /// </summary>
        /// <param name="numberOfResults">Number of results to return..</param>
        public VectorDataResponseMeta(int numberOfResults = default(int))
        {
            this.NumberOfResults = numberOfResults;
        }

        /// <summary>
        /// Number of results to return.
        /// </summary>
        /// <value>Number of results to return.</value>
        [DataMember(Name = "numberOfResults", EmitDefaultValue = false)]
        public int NumberOfResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VectorDataResponseMeta {\n");
            sb.Append("  NumberOfResults: ").Append(NumberOfResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VectorDataResponseMeta);
        }

        /// <summary>
        /// Returns true if VectorDataResponseMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of VectorDataResponseMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VectorDataResponseMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NumberOfResults == input.NumberOfResults ||
                    this.NumberOfResults.Equals(input.NumberOfResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NumberOfResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
