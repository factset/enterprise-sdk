/*
 * Vector Data API
 *
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VectorData.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VectorData.Model
{
    /// <summary>
    /// Contains content and link for a single vector ID.
    /// </summary>
    [DataContract(Name = "ChunkTextResult")]
    public partial class ChunkTextResult : IEquatable<ChunkTextResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChunkTextResult" /> class.
        /// </summary>
        /// <param name="content">Unique identifier for a document..</param>
        /// <param name="storyLink">A secure HTTPS link for downloading the associated document..</param>
        /// <param name="storyDate">Date associated with the story..</param>
        /// <param name="themes">Theme of the document..</param>
        /// <param name="documentType">Type of the document..</param>
        /// <param name="source">Name of the source.</param>
        /// <param name="documentID">Unique identifier for a document..</param>
        /// <param name="ids">List of related IDs..</param>
        public ChunkTextResult(string content = default(string), string storyLink = default(string), DateTime storyDate = default(DateTime), string themes = default(string), string documentType = default(string), string source = default(string), string documentID = default(string), List<string> ids = default(List<string>))
        {
            this.Content = content;
            this.StoryLink = storyLink;
            this.StoryDate = storyDate;
            this.Themes = themes;
            this.DocumentType = documentType;
            this.Source = source;
            this.DocumentID = documentID;
            this.Ids = ids;
        }

        /// <summary>
        /// Unique identifier for a document.
        /// </summary>
        /// <value>Unique identifier for a document.</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// A secure HTTPS link for downloading the associated document.
        /// </summary>
        /// <value>A secure HTTPS link for downloading the associated document.</value>
        [DataMember(Name = "storyLink", EmitDefaultValue = false)]
        public string StoryLink { get; set; }

        /// <summary>
        /// Date associated with the story.
        /// </summary>
        /// <value>Date associated with the story.</value>
        [DataMember(Name = "storyDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StoryDate { get; set; }

        /// <summary>
        /// Theme of the document.
        /// </summary>
        /// <value>Theme of the document.</value>
        [DataMember(Name = "themes", EmitDefaultValue = false)]
        public string Themes { get; set; }

        /// <summary>
        /// Type of the document.
        /// </summary>
        /// <value>Type of the document.</value>
        [DataMember(Name = "documentType", EmitDefaultValue = false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Name of the source
        /// </summary>
        /// <value>Name of the source</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Unique identifier for a document.
        /// </summary>
        /// <value>Unique identifier for a document.</value>
        [DataMember(Name = "documentID", EmitDefaultValue = false)]
        public string DocumentID { get; set; }

        /// <summary>
        /// List of related IDs.
        /// </summary>
        /// <value>List of related IDs.</value>
        [DataMember(Name = "ids", EmitDefaultValue = false)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChunkTextResult {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  StoryLink: ").Append(StoryLink).Append("\n");
            sb.Append("  StoryDate: ").Append(StoryDate).Append("\n");
            sb.Append("  Themes: ").Append(Themes).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  DocumentID: ").Append(DocumentID).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChunkTextResult);
        }

        /// <summary>
        /// Returns true if ChunkTextResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ChunkTextResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChunkTextResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.StoryLink == input.StoryLink ||
                    (this.StoryLink != null &&
                    this.StoryLink.Equals(input.StoryLink))
                ) && 
                (
                    this.StoryDate == input.StoryDate ||
                    (this.StoryDate != null &&
                    this.StoryDate.Equals(input.StoryDate))
                ) && 
                (
                    this.Themes == input.Themes ||
                    (this.Themes != null &&
                    this.Themes.Equals(input.Themes))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.DocumentID == input.DocumentID ||
                    (this.DocumentID != null &&
                    this.DocumentID.Equals(input.DocumentID))
                ) && 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.StoryLink != null)
                {
                    hashCode = (hashCode * 59) + this.StoryLink.GetHashCode();
                }
                if (this.StoryDate != null)
                {
                    hashCode = (hashCode * 59) + this.StoryDate.GetHashCode();
                }
                if (this.Themes != null)
                {
                    hashCode = (hashCode * 59) + this.Themes.GetHashCode();
                }
                if (this.DocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.DocumentID != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentID.GetHashCode();
                }
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
