/*
 * Vector Data API
 *
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VectorData.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VectorData.Model
{
    /// <summary>
    /// elements of themes.
    /// </summary>
    [DataContract(Name = "Themes")]
    public partial class Themes : IEquatable<Themes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Themes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Themes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Themes" /> class.
        /// </summary>
        /// <param name="esgTheme">theme of the source..</param>
        /// <param name="searchConcept">theme of the source..</param>
        /// <param name="sentiment">theme of the source..</param>
        /// <param name="description">theme description (required).</param>
        public Themes(string description,string esgTheme = default(string), string searchConcept = default(string), string sentiment = default(string))
        {
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for Themes and cannot be null");
            }
            this.Description = description;
            this.EsgTheme = esgTheme;
            this.SearchConcept = searchConcept;
            this.Sentiment = sentiment;
        }

        /// <summary>
        /// theme of the source.
        /// </summary>
        /// <value>theme of the source.</value>
        [DataMember(Name = "esgTheme", EmitDefaultValue = false)]
        public string EsgTheme { get; set; }

        /// <summary>
        /// theme of the source.
        /// </summary>
        /// <value>theme of the source.</value>
        [DataMember(Name = "searchConcept", EmitDefaultValue = false)]
        public string SearchConcept { get; set; }

        /// <summary>
        /// theme of the source.
        /// </summary>
        /// <value>theme of the source.</value>
        [DataMember(Name = "sentiment", EmitDefaultValue = false)]
        public string Sentiment { get; set; }

        /// <summary>
        /// theme description
        /// </summary>
        /// <value>theme description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Themes {\n");
            sb.Append("  EsgTheme: ").Append(EsgTheme).Append("\n");
            sb.Append("  SearchConcept: ").Append(SearchConcept).Append("\n");
            sb.Append("  Sentiment: ").Append(Sentiment).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Themes);
        }

        /// <summary>
        /// Returns true if Themes instances are equal
        /// </summary>
        /// <param name="input">Instance of Themes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Themes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EsgTheme == input.EsgTheme ||
                    (this.EsgTheme != null &&
                    this.EsgTheme.Equals(input.EsgTheme))
                ) && 
                (
                    this.SearchConcept == input.SearchConcept ||
                    (this.SearchConcept != null &&
                    this.SearchConcept.Equals(input.SearchConcept))
                ) && 
                (
                    this.Sentiment == input.Sentiment ||
                    (this.Sentiment != null &&
                    this.Sentiment.Equals(input.Sentiment))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EsgTheme != null)
                {
                    hashCode = (hashCode * 59) + this.EsgTheme.GetHashCode();
                }
                if (this.SearchConcept != null)
                {
                    hashCode = (hashCode * 59) + this.SearchConcept.GetHashCode();
                }
                if (this.Sentiment != null)
                {
                    hashCode = (hashCode * 59) + this.Sentiment.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
