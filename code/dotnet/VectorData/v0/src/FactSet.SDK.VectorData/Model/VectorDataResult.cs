/*
 * Vector Data API
 *
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VectorData.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VectorData.Model
{
    /// <summary>
    /// Returns vector information.
    /// </summary>
    [DataContract(Name = "VectorDataResult")]
    public partial class VectorDataResult : IEquatable<VectorDataResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VectorDataResult" /> class.
        /// </summary>
        /// <param name="vector">Chuncked emedding vector..</param>
        /// <param name="vectorId">Unique identifier for a document.</param>
        /// <param name="similarityScore">Score indicating the similarity..</param>
        /// <param name="storyDate">Date associated with the story..</param>
        /// <param name="themes">Theme of the document..</param>
        /// <param name="documentType">Type of the document..</param>
        /// <param name="source">Name of the source.</param>
        /// <param name="documentID">Unique identifier for a document..</param>
        /// <param name="property">The name of the schema..</param>
        /// <param name="type">The type of the schema..</param>
        /// <param name="ids">List of related IDs..</param>
        /// <param name="trimmed">Trimmed attribute indicates whether the vectors are trimmed or not.  - If **true**, the vectors has been trimmed.   - If **false**, the vectors are been returned. .</param>
        public VectorDataResult(List<string> vector = default(List<string>), string vectorId = default(string), decimal similarityScore = default(decimal), DateTime storyDate = default(DateTime), string themes = default(string), string documentType = default(string), string source = default(string), string documentID = default(string), string property = default(string), string type = default(string), List<string> ids = default(List<string>), bool trimmed = default(bool))
        {
            this.Vector = vector;
            this.VectorId = vectorId;
            this.SimilarityScore = similarityScore;
            this.StoryDate = storyDate;
            this.Themes = themes;
            this.DocumentType = documentType;
            this.Source = source;
            this.DocumentID = documentID;
            this.Property = property;
            this.Type = type;
            this.Ids = ids;
            this.Trimmed = trimmed;
        }

        /// <summary>
        /// Chuncked emedding vector.
        /// </summary>
        /// <value>Chuncked emedding vector.</value>
        [DataMember(Name = "vector", EmitDefaultValue = false)]
        public List<string> Vector { get; set; }

        /// <summary>
        /// Unique identifier for a document
        /// </summary>
        /// <value>Unique identifier for a document</value>
        [DataMember(Name = "vectorId", EmitDefaultValue = false)]
        public string VectorId { get; set; }

        /// <summary>
        /// Score indicating the similarity.
        /// </summary>
        /// <value>Score indicating the similarity.</value>
        [DataMember(Name = "similarityScore", EmitDefaultValue = false)]
        public decimal SimilarityScore { get; set; }

        /// <summary>
        /// Date associated with the story.
        /// </summary>
        /// <value>Date associated with the story.</value>
        [DataMember(Name = "storyDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StoryDate { get; set; }

        /// <summary>
        /// Theme of the document.
        /// </summary>
        /// <value>Theme of the document.</value>
        [DataMember(Name = "themes", EmitDefaultValue = false)]
        public string Themes { get; set; }

        /// <summary>
        /// Type of the document.
        /// </summary>
        /// <value>Type of the document.</value>
        [DataMember(Name = "documentType", EmitDefaultValue = false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Name of the source
        /// </summary>
        /// <value>Name of the source</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Unique identifier for a document.
        /// </summary>
        /// <value>Unique identifier for a document.</value>
        [DataMember(Name = "documentID", EmitDefaultValue = false)]
        public string DocumentID { get; set; }

        /// <summary>
        /// The name of the schema.
        /// </summary>
        /// <value>The name of the schema.</value>
        [DataMember(Name = "property", EmitDefaultValue = false)]
        public string Property { get; set; }

        /// <summary>
        /// The type of the schema.
        /// </summary>
        /// <value>The type of the schema.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// List of related IDs.
        /// </summary>
        /// <value>List of related IDs.</value>
        [DataMember(Name = "ids", EmitDefaultValue = false)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// Trimmed attribute indicates whether the vectors are trimmed or not.  - If **true**, the vectors has been trimmed.   - If **false**, the vectors are been returned. 
        /// </summary>
        /// <value>Trimmed attribute indicates whether the vectors are trimmed or not.  - If **true**, the vectors has been trimmed.   - If **false**, the vectors are been returned. </value>
        [DataMember(Name = "trimmed", EmitDefaultValue = true)]
        public bool Trimmed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VectorDataResult {\n");
            sb.Append("  Vector: ").Append(Vector).Append("\n");
            sb.Append("  VectorId: ").Append(VectorId).Append("\n");
            sb.Append("  SimilarityScore: ").Append(SimilarityScore).Append("\n");
            sb.Append("  StoryDate: ").Append(StoryDate).Append("\n");
            sb.Append("  Themes: ").Append(Themes).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  DocumentID: ").Append(DocumentID).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Trimmed: ").Append(Trimmed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VectorDataResult);
        }

        /// <summary>
        /// Returns true if VectorDataResult instances are equal
        /// </summary>
        /// <param name="input">Instance of VectorDataResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VectorDataResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Vector == input.Vector ||
                    this.Vector != null &&
                    input.Vector != null &&
                    this.Vector.SequenceEqual(input.Vector)
                ) && 
                (
                    this.VectorId == input.VectorId ||
                    (this.VectorId != null &&
                    this.VectorId.Equals(input.VectorId))
                ) && 
                (
                    this.SimilarityScore == input.SimilarityScore ||
                    this.SimilarityScore.Equals(input.SimilarityScore)
                ) && 
                (
                    this.StoryDate == input.StoryDate ||
                    (this.StoryDate != null &&
                    this.StoryDate.Equals(input.StoryDate))
                ) && 
                (
                    this.Themes == input.Themes ||
                    (this.Themes != null &&
                    this.Themes.Equals(input.Themes))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.DocumentID == input.DocumentID ||
                    (this.DocumentID != null &&
                    this.DocumentID.Equals(input.DocumentID))
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Trimmed == input.Trimmed ||
                    this.Trimmed.Equals(input.Trimmed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Vector != null)
                {
                    hashCode = (hashCode * 59) + this.Vector.GetHashCode();
                }
                if (this.VectorId != null)
                {
                    hashCode = (hashCode * 59) + this.VectorId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SimilarityScore.GetHashCode();
                if (this.StoryDate != null)
                {
                    hashCode = (hashCode * 59) + this.StoryDate.GetHashCode();
                }
                if (this.Themes != null)
                {
                    hashCode = (hashCode * 59) + this.Themes.GetHashCode();
                }
                if (this.DocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.DocumentID != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentID.GetHashCode();
                }
                if (this.Property != null)
                {
                    hashCode = (hashCode * 59) + this.Property.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Trimmed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
