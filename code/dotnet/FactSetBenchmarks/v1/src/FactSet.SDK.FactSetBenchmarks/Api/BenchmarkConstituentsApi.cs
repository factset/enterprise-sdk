/*
 * FactSet Benchmarks API
 *
 * FactSet Benchmarks API gives access to Index Constituents, Prices, Returns, and Ratios. For a sample list of identifiers, use the /metrics endpoint. Equity Only - Fixed Income Benchmark support coming soon. 
 *
 * The version of the OpenAPI document: 1.10.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetBenchmarks.Client;
using FactSet.SDK.FactSetBenchmarks.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetBenchmarks.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBenchmarkConstituentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers.   
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Benchmark Identifiers. Reference the helper endpoint **_/id-list** to get a sample list of  valid identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional, default to &quot;FIVEDAY&quot;)</param>
        /// <returns>BenchmarkConstituentsResponse</returns>
        BenchmarkConstituentsResponse GetBenchmarkConstituents(List<string> ids, string date = default(string), string currency = default(string), string calendar = default(string));

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers.   
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Benchmark Identifiers. Reference the helper endpoint **_/id-list** to get a sample list of  valid identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional, default to &quot;FIVEDAY&quot;)</param>
        /// <returns>ApiResponse of BenchmarkConstituentsResponse</returns>
        ApiResponse<BenchmarkConstituentsResponse> GetBenchmarkConstituentsWithHttpInfo(List<string> ids, string date = default(string), string currency = default(string), string calendar = default(string));
        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkConstituentsRequest">Requests Benchmark Constituents for the given identifier and date.</param>
        /// <returns>BenchmarkConstituentsResponse</returns>
        BenchmarkConstituentsResponse GetBenchmarkConstituentsForList(BenchmarkConstituentsRequest benchmarkConstituentsRequest);

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkConstituentsRequest">Requests Benchmark Constituents for the given identifier and date.</param>
        /// <returns>ApiResponse of BenchmarkConstituentsResponse</returns>
        ApiResponse<BenchmarkConstituentsResponse> GetBenchmarkConstituentsForListWithHttpInfo(BenchmarkConstituentsRequest benchmarkConstituentsRequest);
        /// <summary>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Fixed Income Benchmark Identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <returns>FixedIncomeBenchmarkConstituentsResponse</returns>
        FixedIncomeBenchmarkConstituentsResponse GetFIBenchmarkConstituents(List<string> ids, string date = default(string), string currency = default(string));

        /// <summary>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Fixed Income Benchmark Identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <returns>ApiResponse of FixedIncomeBenchmarkConstituentsResponse</returns>
        ApiResponse<FixedIncomeBenchmarkConstituentsResponse> GetFIBenchmarkConstituentsWithHttpInfo(List<string> ids, string date = default(string), string currency = default(string));
        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixedIncomeBenchmarkConstituentsRequest">Requests Fixed Income Benchmark Constituents for the given identifier and date.</param>
        /// <returns>FixedIncomeBenchmarkConstituentsResponse</returns>
        FixedIncomeBenchmarkConstituentsResponse GetFIBenchmarkConstituentsForList(FixedIncomeBenchmarkConstituentsRequest fixedIncomeBenchmarkConstituentsRequest);

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixedIncomeBenchmarkConstituentsRequest">Requests Fixed Income Benchmark Constituents for the given identifier and date.</param>
        /// <returns>ApiResponse of FixedIncomeBenchmarkConstituentsResponse</returns>
        ApiResponse<FixedIncomeBenchmarkConstituentsResponse> GetFIBenchmarkConstituentsForListWithHttpInfo(FixedIncomeBenchmarkConstituentsRequest fixedIncomeBenchmarkConstituentsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBenchmarkConstituentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers.   
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Benchmark Identifiers. Reference the helper endpoint **_/id-list** to get a sample list of  valid identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional, default to &quot;FIVEDAY&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BenchmarkConstituentsResponse</returns>
        System.Threading.Tasks.Task<BenchmarkConstituentsResponse> GetBenchmarkConstituentsAsync(List<string> ids, string date = default(string), string currency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers.   
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Benchmark Identifiers. Reference the helper endpoint **_/id-list** to get a sample list of  valid identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional, default to &quot;FIVEDAY&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BenchmarkConstituentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BenchmarkConstituentsResponse>> GetBenchmarkConstituentsWithHttpInfoAsync(List<string> ids, string date = default(string), string currency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkConstituentsRequest">Requests Benchmark Constituents for the given identifier and date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BenchmarkConstituentsResponse</returns>
        System.Threading.Tasks.Task<BenchmarkConstituentsResponse> GetBenchmarkConstituentsForListAsync(BenchmarkConstituentsRequest benchmarkConstituentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkConstituentsRequest">Requests Benchmark Constituents for the given identifier and date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BenchmarkConstituentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BenchmarkConstituentsResponse>> GetBenchmarkConstituentsForListWithHttpInfoAsync(BenchmarkConstituentsRequest benchmarkConstituentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Fixed Income Benchmark Identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FixedIncomeBenchmarkConstituentsResponse</returns>
        System.Threading.Tasks.Task<FixedIncomeBenchmarkConstituentsResponse> GetFIBenchmarkConstituentsAsync(List<string> ids, string date = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Fixed Income Benchmark Identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FixedIncomeBenchmarkConstituentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FixedIncomeBenchmarkConstituentsResponse>> GetFIBenchmarkConstituentsWithHttpInfoAsync(List<string> ids, string date = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixedIncomeBenchmarkConstituentsRequest">Requests Fixed Income Benchmark Constituents for the given identifier and date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FixedIncomeBenchmarkConstituentsResponse</returns>
        System.Threading.Tasks.Task<FixedIncomeBenchmarkConstituentsResponse> GetFIBenchmarkConstituentsForListAsync(FixedIncomeBenchmarkConstituentsRequest fixedIncomeBenchmarkConstituentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
        /// </summary>
        /// <remarks>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixedIncomeBenchmarkConstituentsRequest">Requests Fixed Income Benchmark Constituents for the given identifier and date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FixedIncomeBenchmarkConstituentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FixedIncomeBenchmarkConstituentsResponse>> GetFIBenchmarkConstituentsForListWithHttpInfoAsync(FixedIncomeBenchmarkConstituentsRequest fixedIncomeBenchmarkConstituentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBenchmarkConstituentsApi : IBenchmarkConstituentsApiSync, IBenchmarkConstituentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BenchmarkConstituentsApi : IBenchmarkConstituentsApi
    {
        private FactSet.SDK.FactSetBenchmarks.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetBenchmarkConstituentsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BenchmarkConstituentsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBenchmarkConstituentsForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BenchmarkConstituentsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFIBenchmarkConstituentsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FixedIncomeBenchmarkConstituentsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFIBenchmarkConstituentsForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FixedIncomeBenchmarkConstituentsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="BenchmarkConstituentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BenchmarkConstituentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BenchmarkConstituentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BenchmarkConstituentsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetBenchmarks.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetBenchmarks.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetBenchmarks.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetBenchmarks.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetBenchmarks.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetBenchmarks.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BenchmarkConstituentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BenchmarkConstituentsApi(FactSet.SDK.FactSetBenchmarks.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetBenchmarks.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetBenchmarks.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetBenchmarks.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetBenchmarks.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetBenchmarks.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BenchmarkConstituentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BenchmarkConstituentsApi(FactSet.SDK.FactSetBenchmarks.Client.ISynchronousClient client, FactSet.SDK.FactSetBenchmarks.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetBenchmarks.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetBenchmarks.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetBenchmarks.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetBenchmarks.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetBenchmarks.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetBenchmarks.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers.   
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Benchmark Identifiers. Reference the helper endpoint **_/id-list** to get a sample list of  valid identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional, default to &quot;FIVEDAY&quot;)</param>
        /// <returns>BenchmarkConstituentsResponse</returns>
        public BenchmarkConstituentsResponse GetBenchmarkConstituents(List<string> ids, string date = default(string), string currency = default(string), string calendar = default(string))
        {
            var localVarResponse = GetBenchmarkConstituentsWithHttpInfo(ids, date, currency, calendar);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers.   
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Benchmark Identifiers. Reference the helper endpoint **_/id-list** to get a sample list of  valid identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional, default to &quot;FIVEDAY&quot;)</param>
        /// <returns>ApiResponse of BenchmarkConstituentsResponse</returns>
        public ApiResponse<BenchmarkConstituentsResponse> GetBenchmarkConstituentsWithHttpInfo(List<string> ids, string date = default(string), string currency = default(string), string calendar = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetBenchmarks.Client.ApiException(400, "Missing required parameter 'ids' when calling BenchmarkConstituentsApi->GetBenchmarkConstituents");
            }

            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (calendar != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "calendar", calendar));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBenchmarkConstituentsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            BenchmarkConstituentsResponse>("/factset-benchmarks/v1/constituents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBenchmarkConstituents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers.   
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Benchmark Identifiers. Reference the helper endpoint **_/id-list** to get a sample list of  valid identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional, default to &quot;FIVEDAY&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BenchmarkConstituentsResponse</returns>
        public async System.Threading.Tasks.Task<BenchmarkConstituentsResponse>GetBenchmarkConstituentsAsync(List<string> ids, string date = default(string), string currency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBenchmarkConstituentsWithHttpInfoAsync(ids, date, currency, calendar, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers.   
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Benchmark Identifiers. Reference the helper endpoint **_/id-list** to get a sample list of  valid identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional, default to &quot;FIVEDAY&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BenchmarkConstituentsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BenchmarkConstituentsResponse>> GetBenchmarkConstituentsWithHttpInfoAsync(List<string> ids, string date = default(string), string currency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetBenchmarks.Client.ApiException(400, "Missing required parameter 'ids' when calling BenchmarkConstituentsApi->GetBenchmarkConstituents");
            }


            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (calendar != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "calendar", calendar));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBenchmarkConstituentsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BenchmarkConstituentsResponse>("/factset-benchmarks/v1/constituents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBenchmarkConstituents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkConstituentsRequest">Requests Benchmark Constituents for the given identifier and date.</param>
        /// <returns>BenchmarkConstituentsResponse</returns>
        public BenchmarkConstituentsResponse GetBenchmarkConstituentsForList(BenchmarkConstituentsRequest benchmarkConstituentsRequest)
        {
            var localVarResponse = GetBenchmarkConstituentsForListWithHttpInfo(benchmarkConstituentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkConstituentsRequest">Requests Benchmark Constituents for the given identifier and date.</param>
        /// <returns>ApiResponse of BenchmarkConstituentsResponse</returns>
        public ApiResponse<BenchmarkConstituentsResponse> GetBenchmarkConstituentsForListWithHttpInfo(BenchmarkConstituentsRequest benchmarkConstituentsRequest)
        {
            // verify the required parameter 'benchmarkConstituentsRequest' is set
            if (benchmarkConstituentsRequest == null)
            {
                throw new FactSet.SDK.FactSetBenchmarks.Client.ApiException(400, "Missing required parameter 'benchmarkConstituentsRequest' when calling BenchmarkConstituentsApi->GetBenchmarkConstituentsForList");
            }

            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = benchmarkConstituentsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBenchmarkConstituentsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            BenchmarkConstituentsResponse>("/factset-benchmarks/v1/constituents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBenchmarkConstituentsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkConstituentsRequest">Requests Benchmark Constituents for the given identifier and date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BenchmarkConstituentsResponse</returns>
        public async System.Threading.Tasks.Task<BenchmarkConstituentsResponse>GetBenchmarkConstituentsForListAsync(BenchmarkConstituentsRequest benchmarkConstituentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBenchmarkConstituentsForListWithHttpInfoAsync(benchmarkConstituentsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. Use the helper endpoint **_/id-list** for valid identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkConstituentsRequest">Requests Benchmark Constituents for the given identifier and date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BenchmarkConstituentsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BenchmarkConstituentsResponse>> GetBenchmarkConstituentsForListWithHttpInfoAsync(BenchmarkConstituentsRequest benchmarkConstituentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'benchmarkConstituentsRequest' is set
            if (benchmarkConstituentsRequest == null)
            {
                throw new FactSet.SDK.FactSetBenchmarks.Client.ApiException(400, "Missing required parameter 'benchmarkConstituentsRequest' when calling BenchmarkConstituentsApi->GetBenchmarkConstituentsForList");
            }


            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = benchmarkConstituentsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBenchmarkConstituentsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BenchmarkConstituentsResponse>("/factset-benchmarks/v1/constituents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBenchmarkConstituentsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Fixed Income Benchmark Identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <returns>FixedIncomeBenchmarkConstituentsResponse</returns>
        public FixedIncomeBenchmarkConstituentsResponse GetFIBenchmarkConstituents(List<string> ids, string date = default(string), string currency = default(string))
        {
            var localVarResponse = GetFIBenchmarkConstituentsWithHttpInfo(ids, date, currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Fixed Income Benchmark Identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <returns>ApiResponse of FixedIncomeBenchmarkConstituentsResponse</returns>
        public ApiResponse<FixedIncomeBenchmarkConstituentsResponse> GetFIBenchmarkConstituentsWithHttpInfo(List<string> ids, string date = default(string), string currency = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetBenchmarks.Client.ApiException(400, "Missing required parameter 'ids' when calling BenchmarkConstituentsApi->GetFIBenchmarkConstituents");
            }

            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFIBenchmarkConstituentsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FixedIncomeBenchmarkConstituentsResponse>("/factset-benchmarks/v1/fixed-income-constituents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFIBenchmarkConstituents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Fixed Income Benchmark Identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FixedIncomeBenchmarkConstituentsResponse</returns>
        public async System.Threading.Tasks.Task<FixedIncomeBenchmarkConstituentsResponse>GetFIBenchmarkConstituentsAsync(List<string> ids, string date = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFIBenchmarkConstituentsWithHttpInfoAsync(ids, date, currency, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Fixed Income Benchmark Identifiers. You must be authorized for the &#x60;ids&#x60; requested, otherwise you will receive an error. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holding expressed in YYYY-MM-DD format. (optional)</param>
        /// <param name="currency">Currency for response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FixedIncomeBenchmarkConstituentsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FixedIncomeBenchmarkConstituentsResponse>> GetFIBenchmarkConstituentsWithHttpInfoAsync(List<string> ids, string date = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetBenchmarks.Client.ApiException(400, "Missing required parameter 'ids' when calling BenchmarkConstituentsApi->GetFIBenchmarkConstituents");
            }


            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFIBenchmarkConstituentsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FixedIncomeBenchmarkConstituentsResponse>("/factset-benchmarks/v1/fixed-income-constituents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFIBenchmarkConstituents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixedIncomeBenchmarkConstituentsRequest">Requests Fixed Income Benchmark Constituents for the given identifier and date.</param>
        /// <returns>FixedIncomeBenchmarkConstituentsResponse</returns>
        public FixedIncomeBenchmarkConstituentsResponse GetFIBenchmarkConstituentsForList(FixedIncomeBenchmarkConstituentsRequest fixedIncomeBenchmarkConstituentsRequest)
        {
            var localVarResponse = GetFIBenchmarkConstituentsForListWithHttpInfo(fixedIncomeBenchmarkConstituentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixedIncomeBenchmarkConstituentsRequest">Requests Fixed Income Benchmark Constituents for the given identifier and date.</param>
        /// <returns>ApiResponse of FixedIncomeBenchmarkConstituentsResponse</returns>
        public ApiResponse<FixedIncomeBenchmarkConstituentsResponse> GetFIBenchmarkConstituentsForListWithHttpInfo(FixedIncomeBenchmarkConstituentsRequest fixedIncomeBenchmarkConstituentsRequest)
        {
            // verify the required parameter 'fixedIncomeBenchmarkConstituentsRequest' is set
            if (fixedIncomeBenchmarkConstituentsRequest == null)
            {
                throw new FactSet.SDK.FactSetBenchmarks.Client.ApiException(400, "Missing required parameter 'fixedIncomeBenchmarkConstituentsRequest' when calling BenchmarkConstituentsApi->GetFIBenchmarkConstituentsForList");
            }

            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = fixedIncomeBenchmarkConstituentsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFIBenchmarkConstituentsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            FixedIncomeBenchmarkConstituentsResponse>("/factset-benchmarks/v1/fixed-income-constituents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFIBenchmarkConstituentsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixedIncomeBenchmarkConstituentsRequest">Requests Fixed Income Benchmark Constituents for the given identifier and date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FixedIncomeBenchmarkConstituentsResponse</returns>
        public async System.Threading.Tasks.Task<FixedIncomeBenchmarkConstituentsResponse>GetFIBenchmarkConstituentsForListAsync(FixedIncomeBenchmarkConstituentsRequest fixedIncomeBenchmarkConstituentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFIBenchmarkConstituentsForListWithHttpInfoAsync(fixedIncomeBenchmarkConstituentsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the &#x60;ids&#x60; requested. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixedIncomeBenchmarkConstituentsRequest">Requests Fixed Income Benchmark Constituents for the given identifier and date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FixedIncomeBenchmarkConstituentsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FixedIncomeBenchmarkConstituentsResponse>> GetFIBenchmarkConstituentsForListWithHttpInfoAsync(FixedIncomeBenchmarkConstituentsRequest fixedIncomeBenchmarkConstituentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fixedIncomeBenchmarkConstituentsRequest' is set
            if (fixedIncomeBenchmarkConstituentsRequest == null)
            {
                throw new FactSet.SDK.FactSetBenchmarks.Client.ApiException(400, "Missing required parameter 'fixedIncomeBenchmarkConstituentsRequest' when calling BenchmarkConstituentsApi->GetFIBenchmarkConstituentsForList");
            }


            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = fixedIncomeBenchmarkConstituentsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFIBenchmarkConstituentsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FixedIncomeBenchmarkConstituentsResponse>("/factset-benchmarks/v1/fixed-income-constituents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFIBenchmarkConstituentsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
