/*
 * FactSet Benchmarks API
 *
 * FactSet Benchmarks API gives access to Index Constituents, Prices, Returns, and Ratios. For a sample list of identifiers, use the /metrics endpoint. Equity Only - Fixed Income Benchmark support coming soon. 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetBenchmarks.Client;
using FactSet.SDK.FactSetBenchmarks.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetBenchmarks.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHelperApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints.
        /// </summary>
        /// <remarks>
        /// Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support. *&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="familyFilter">Highest Level Filter to search by common Benchmark Families, such as S&amp;P, MSCI, or Russell. This will retrieve all related benchmark ids. For further filtering, use the response items such as the categoryDescription field. Leave blank if you wish to see a full sample list of ids. requested- * **CHINA &amp; HK INDICES** - Major Hong Kong and China Indices, such as Hang Seng Index (HSI-HKX) * **DOW JONES** - Dow Jones Global, Regions, Countries, Titans * **FACTSET MARKET INDICES** - Regional and Country Indices defined by FactSet * **FTSE** - FTSE Global, UK, Global All Cap, World, Xinhua, European, GWA, JSE, Multinationals, and Style indices * **GLOBAL INDICES** - A mix of major indices across the globe * **MSCI** - MSCI All Country, Asia Pacific, Thematic &amp; Strategy, Emerging, Developed, US * **RUSSELL** - US, Global, and Nomura * **S&amp;P** - US, ASX, Select Industry, BMI, Global, Thematic, Emerging, TSX * **STOXX** - Total Market, Europe, and Nordic * **TOPIX** - Topix Indices, such as TOPIX 500 (182301) * **MORNINGSTAR** - Global, Regional, Country, and Sector indicies  (optional)</param>
        /// <returns>BenchmarkIdListResponse</returns>
        BenchmarkIdListResponse GetBenchmarkIds(string familyFilter = default(string));

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints.
        /// </summary>
        /// <remarks>
        /// Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support. *&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="familyFilter">Highest Level Filter to search by common Benchmark Families, such as S&amp;P, MSCI, or Russell. This will retrieve all related benchmark ids. For further filtering, use the response items such as the categoryDescription field. Leave blank if you wish to see a full sample list of ids. requested- * **CHINA &amp; HK INDICES** - Major Hong Kong and China Indices, such as Hang Seng Index (HSI-HKX) * **DOW JONES** - Dow Jones Global, Regions, Countries, Titans * **FACTSET MARKET INDICES** - Regional and Country Indices defined by FactSet * **FTSE** - FTSE Global, UK, Global All Cap, World, Xinhua, European, GWA, JSE, Multinationals, and Style indices * **GLOBAL INDICES** - A mix of major indices across the globe * **MSCI** - MSCI All Country, Asia Pacific, Thematic &amp; Strategy, Emerging, Developed, US * **RUSSELL** - US, Global, and Nomura * **S&amp;P** - US, ASX, Select Industry, BMI, Global, Thematic, Emerging, TSX * **STOXX** - Total Market, Europe, and Nordic * **TOPIX** - Topix Indices, such as TOPIX 500 (182301) * **MORNINGSTAR** - Global, Regional, Country, and Sector indicies  (optional)</param>
        /// <returns>ApiResponse of BenchmarkIdListResponse</returns>
        ApiResponse<BenchmarkIdListResponse> GetBenchmarkIdsWithHttpInfo(string familyFilter = default(string));
        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints.
        /// </summary>
        /// <remarks>
        /// Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support.*&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkIdListRequest">Requests a sample list of identifiers that can be used in other Benchmarks API endpoints.</param>
        /// <returns>BenchmarkIdListResponse</returns>
        BenchmarkIdListResponse GetBenchmarkIdsForList(BenchmarkIdListRequest benchmarkIdListRequest);

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints.
        /// </summary>
        /// <remarks>
        /// Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support.*&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkIdListRequest">Requests a sample list of identifiers that can be used in other Benchmarks API endpoints.</param>
        /// <returns>ApiResponse of BenchmarkIdListResponse</returns>
        ApiResponse<BenchmarkIdListResponse> GetBenchmarkIdsForListWithHttpInfo(BenchmarkIdListRequest benchmarkIdListRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHelperApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints.
        /// </summary>
        /// <remarks>
        /// Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support. *&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="familyFilter">Highest Level Filter to search by common Benchmark Families, such as S&amp;P, MSCI, or Russell. This will retrieve all related benchmark ids. For further filtering, use the response items such as the categoryDescription field. Leave blank if you wish to see a full sample list of ids. requested- * **CHINA &amp; HK INDICES** - Major Hong Kong and China Indices, such as Hang Seng Index (HSI-HKX) * **DOW JONES** - Dow Jones Global, Regions, Countries, Titans * **FACTSET MARKET INDICES** - Regional and Country Indices defined by FactSet * **FTSE** - FTSE Global, UK, Global All Cap, World, Xinhua, European, GWA, JSE, Multinationals, and Style indices * **GLOBAL INDICES** - A mix of major indices across the globe * **MSCI** - MSCI All Country, Asia Pacific, Thematic &amp; Strategy, Emerging, Developed, US * **RUSSELL** - US, Global, and Nomura * **S&amp;P** - US, ASX, Select Industry, BMI, Global, Thematic, Emerging, TSX * **STOXX** - Total Market, Europe, and Nordic * **TOPIX** - Topix Indices, such as TOPIX 500 (182301) * **MORNINGSTAR** - Global, Regional, Country, and Sector indicies  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BenchmarkIdListResponse</returns>
        System.Threading.Tasks.Task<BenchmarkIdListResponse> GetBenchmarkIdsAsync(string familyFilter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints.
        /// </summary>
        /// <remarks>
        /// Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support. *&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="familyFilter">Highest Level Filter to search by common Benchmark Families, such as S&amp;P, MSCI, or Russell. This will retrieve all related benchmark ids. For further filtering, use the response items such as the categoryDescription field. Leave blank if you wish to see a full sample list of ids. requested- * **CHINA &amp; HK INDICES** - Major Hong Kong and China Indices, such as Hang Seng Index (HSI-HKX) * **DOW JONES** - Dow Jones Global, Regions, Countries, Titans * **FACTSET MARKET INDICES** - Regional and Country Indices defined by FactSet * **FTSE** - FTSE Global, UK, Global All Cap, World, Xinhua, European, GWA, JSE, Multinationals, and Style indices * **GLOBAL INDICES** - A mix of major indices across the globe * **MSCI** - MSCI All Country, Asia Pacific, Thematic &amp; Strategy, Emerging, Developed, US * **RUSSELL** - US, Global, and Nomura * **S&amp;P** - US, ASX, Select Industry, BMI, Global, Thematic, Emerging, TSX * **STOXX** - Total Market, Europe, and Nordic * **TOPIX** - Topix Indices, such as TOPIX 500 (182301) * **MORNINGSTAR** - Global, Regional, Country, and Sector indicies  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BenchmarkIdListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BenchmarkIdListResponse>> GetBenchmarkIdsWithHttpInfoAsync(string familyFilter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints.
        /// </summary>
        /// <remarks>
        /// Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support.*&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkIdListRequest">Requests a sample list of identifiers that can be used in other Benchmarks API endpoints.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BenchmarkIdListResponse</returns>
        System.Threading.Tasks.Task<BenchmarkIdListResponse> GetBenchmarkIdsForListAsync(BenchmarkIdListRequest benchmarkIdListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints.
        /// </summary>
        /// <remarks>
        /// Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support.*&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkIdListRequest">Requests a sample list of identifiers that can be used in other Benchmarks API endpoints.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BenchmarkIdListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BenchmarkIdListResponse>> GetBenchmarkIdsForListWithHttpInfoAsync(BenchmarkIdListRequest benchmarkIdListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHelperApi : IHelperApiSync, IHelperApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HelperApi : IHelperApi
    {
        private FactSet.SDK.FactSetBenchmarks.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetBenchmarkIdsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BenchmarkIdListResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBenchmarkIdsForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BenchmarkIdListResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="HelperApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HelperApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HelperApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HelperApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetBenchmarks.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetBenchmarks.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetBenchmarks.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetBenchmarks.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetBenchmarks.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetBenchmarks.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HelperApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HelperApi(FactSet.SDK.FactSetBenchmarks.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetBenchmarks.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetBenchmarks.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetBenchmarks.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetBenchmarks.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetBenchmarks.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HelperApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HelperApi(FactSet.SDK.FactSetBenchmarks.Client.ISynchronousClient client, FactSet.SDK.FactSetBenchmarks.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetBenchmarks.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetBenchmarks.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetBenchmarks.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetBenchmarks.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetBenchmarks.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetBenchmarks.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints. Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support. *&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="familyFilter">Highest Level Filter to search by common Benchmark Families, such as S&amp;P, MSCI, or Russell. This will retrieve all related benchmark ids. For further filtering, use the response items such as the categoryDescription field. Leave blank if you wish to see a full sample list of ids. requested- * **CHINA &amp; HK INDICES** - Major Hong Kong and China Indices, such as Hang Seng Index (HSI-HKX) * **DOW JONES** - Dow Jones Global, Regions, Countries, Titans * **FACTSET MARKET INDICES** - Regional and Country Indices defined by FactSet * **FTSE** - FTSE Global, UK, Global All Cap, World, Xinhua, European, GWA, JSE, Multinationals, and Style indices * **GLOBAL INDICES** - A mix of major indices across the globe * **MSCI** - MSCI All Country, Asia Pacific, Thematic &amp; Strategy, Emerging, Developed, US * **RUSSELL** - US, Global, and Nomura * **S&amp;P** - US, ASX, Select Industry, BMI, Global, Thematic, Emerging, TSX * **STOXX** - Total Market, Europe, and Nordic * **TOPIX** - Topix Indices, such as TOPIX 500 (182301) * **MORNINGSTAR** - Global, Regional, Country, and Sector indicies  (optional)</param>
        /// <returns>BenchmarkIdListResponse</returns>
        public BenchmarkIdListResponse GetBenchmarkIds(string familyFilter = default(string))
        {
            var localVarResponse = GetBenchmarkIdsWithHttpInfo(familyFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints. Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support. *&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="familyFilter">Highest Level Filter to search by common Benchmark Families, such as S&amp;P, MSCI, or Russell. This will retrieve all related benchmark ids. For further filtering, use the response items such as the categoryDescription field. Leave blank if you wish to see a full sample list of ids. requested- * **CHINA &amp; HK INDICES** - Major Hong Kong and China Indices, such as Hang Seng Index (HSI-HKX) * **DOW JONES** - Dow Jones Global, Regions, Countries, Titans * **FACTSET MARKET INDICES** - Regional and Country Indices defined by FactSet * **FTSE** - FTSE Global, UK, Global All Cap, World, Xinhua, European, GWA, JSE, Multinationals, and Style indices * **GLOBAL INDICES** - A mix of major indices across the globe * **MSCI** - MSCI All Country, Asia Pacific, Thematic &amp; Strategy, Emerging, Developed, US * **RUSSELL** - US, Global, and Nomura * **S&amp;P** - US, ASX, Select Industry, BMI, Global, Thematic, Emerging, TSX * **STOXX** - Total Market, Europe, and Nordic * **TOPIX** - Topix Indices, such as TOPIX 500 (182301) * **MORNINGSTAR** - Global, Regional, Country, and Sector indicies  (optional)</param>
        /// <returns>ApiResponse of BenchmarkIdListResponse</returns>
        public ApiResponse<BenchmarkIdListResponse> GetBenchmarkIdsWithHttpInfo(string familyFilter = default(string))
        {
            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (familyFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "familyFilter", familyFilter));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBenchmarkIdsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            BenchmarkIdListResponse>("/factset-benchmarks/v1/id-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBenchmarkIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints. Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support. *&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="familyFilter">Highest Level Filter to search by common Benchmark Families, such as S&amp;P, MSCI, or Russell. This will retrieve all related benchmark ids. For further filtering, use the response items such as the categoryDescription field. Leave blank if you wish to see a full sample list of ids. requested- * **CHINA &amp; HK INDICES** - Major Hong Kong and China Indices, such as Hang Seng Index (HSI-HKX) * **DOW JONES** - Dow Jones Global, Regions, Countries, Titans * **FACTSET MARKET INDICES** - Regional and Country Indices defined by FactSet * **FTSE** - FTSE Global, UK, Global All Cap, World, Xinhua, European, GWA, JSE, Multinationals, and Style indices * **GLOBAL INDICES** - A mix of major indices across the globe * **MSCI** - MSCI All Country, Asia Pacific, Thematic &amp; Strategy, Emerging, Developed, US * **RUSSELL** - US, Global, and Nomura * **S&amp;P** - US, ASX, Select Industry, BMI, Global, Thematic, Emerging, TSX * **STOXX** - Total Market, Europe, and Nordic * **TOPIX** - Topix Indices, such as TOPIX 500 (182301) * **MORNINGSTAR** - Global, Regional, Country, and Sector indicies  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BenchmarkIdListResponse</returns>
        public async System.Threading.Tasks.Task<BenchmarkIdListResponse>GetBenchmarkIdsAsync(string familyFilter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBenchmarkIdsWithHttpInfoAsync(familyFilter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints. Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support. *&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="familyFilter">Highest Level Filter to search by common Benchmark Families, such as S&amp;P, MSCI, or Russell. This will retrieve all related benchmark ids. For further filtering, use the response items such as the categoryDescription field. Leave blank if you wish to see a full sample list of ids. requested- * **CHINA &amp; HK INDICES** - Major Hong Kong and China Indices, such as Hang Seng Index (HSI-HKX) * **DOW JONES** - Dow Jones Global, Regions, Countries, Titans * **FACTSET MARKET INDICES** - Regional and Country Indices defined by FactSet * **FTSE** - FTSE Global, UK, Global All Cap, World, Xinhua, European, GWA, JSE, Multinationals, and Style indices * **GLOBAL INDICES** - A mix of major indices across the globe * **MSCI** - MSCI All Country, Asia Pacific, Thematic &amp; Strategy, Emerging, Developed, US * **RUSSELL** - US, Global, and Nomura * **S&amp;P** - US, ASX, Select Industry, BMI, Global, Thematic, Emerging, TSX * **STOXX** - Total Market, Europe, and Nordic * **TOPIX** - Topix Indices, such as TOPIX 500 (182301) * **MORNINGSTAR** - Global, Regional, Country, and Sector indicies  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BenchmarkIdListResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BenchmarkIdListResponse>> GetBenchmarkIdsWithHttpInfoAsync(string familyFilter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (familyFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.ParameterToMultiMap("", "familyFilter", familyFilter));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBenchmarkIdsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BenchmarkIdListResponse>("/factset-benchmarks/v1/id-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBenchmarkIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints. Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support.*&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkIdListRequest">Requests a sample list of identifiers that can be used in other Benchmarks API endpoints.</param>
        /// <returns>BenchmarkIdListResponse</returns>
        public BenchmarkIdListResponse GetBenchmarkIdsForList(BenchmarkIdListRequest benchmarkIdListRequest)
        {
            var localVarResponse = GetBenchmarkIdsForListWithHttpInfo(benchmarkIdListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints. Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support.*&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkIdListRequest">Requests a sample list of identifiers that can be used in other Benchmarks API endpoints.</param>
        /// <returns>ApiResponse of BenchmarkIdListResponse</returns>
        public ApiResponse<BenchmarkIdListResponse> GetBenchmarkIdsForListWithHttpInfo(BenchmarkIdListRequest benchmarkIdListRequest)
        {
            // verify the required parameter 'benchmarkIdListRequest' is set
            if (benchmarkIdListRequest == null)
            {
                throw new FactSet.SDK.FactSetBenchmarks.Client.ApiException(400, "Missing required parameter 'benchmarkIdListRequest' when calling HelperApi->GetBenchmarkIdsForList");
            }

            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = benchmarkIdListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBenchmarkIdsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            BenchmarkIdListResponse>("/factset-benchmarks/v1/id-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBenchmarkIdsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints. Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support.*&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkIdListRequest">Requests a sample list of identifiers that can be used in other Benchmarks API endpoints.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BenchmarkIdListResponse</returns>
        public async System.Threading.Tasks.Task<BenchmarkIdListResponse>GetBenchmarkIdsForListAsync(BenchmarkIdListRequest benchmarkIdListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBenchmarkIdsForListWithHttpInfoAsync(benchmarkIdListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a sample list of Benchmark Identifiers and the benchmark categorization to use in other Benchmark API endpoints. Returns a **sample** list of Benchmark Identifiers to use in other Benchmark API endpoints. This is a supporting API to be use alongside the other Benchmark API endpoints. For example, use the fsymID value returned in this response as the input to your &#x60;ids&#x60; parameter in the /constituents endpoint to return constituents for that id.&lt;p&gt; *This is not the full list of benchmark ids allowed in this service, but rather a representation of the most commonly requested. For complete assistance with ID lookup or concordance services, please reach out to FactSet Support.*&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetBenchmarks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkIdListRequest">Requests a sample list of identifiers that can be used in other Benchmarks API endpoints.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BenchmarkIdListResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BenchmarkIdListResponse>> GetBenchmarkIdsForListWithHttpInfoAsync(BenchmarkIdListRequest benchmarkIdListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'benchmarkIdListRequest' is set
            if (benchmarkIdListRequest == null)
            {
                throw new FactSet.SDK.FactSetBenchmarks.Client.ApiException(400, "Missing required parameter 'benchmarkIdListRequest' when calling HelperApi->GetBenchmarkIdsForList");
            }


            FactSet.SDK.FactSetBenchmarks.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetBenchmarks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = benchmarkIdListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetBenchmarks.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBenchmarkIdsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BenchmarkIdListResponse>("/factset-benchmarks/v1/id-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBenchmarkIdsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
