/*
 * FactSet Benchmarks API
 *
 * FactSet Benchmarks API gives access to Index Constituents, Prices, Returns, and Ratios. For a sample list of identifiers, use the /metrics endpoint. Equity Only - Fixed Income Benchmark support coming soon. 
 *
 * The version of the OpenAPI document: 1.10.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetBenchmarks.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetBenchmarks.Model
{
    /// <summary>
    /// BenchmarkIdList
    /// </summary>
    [DataContract(Name = "benchmarkIdList")]
    public partial class BenchmarkIdList : IEquatable<BenchmarkIdList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BenchmarkIdList" /> class.
        /// </summary>
        /// <param name="fsymId">Benchmark Id.</param>
        /// <param name="name">Name of the Benchmark ID.</param>
        /// <param name="familyName">Name of the Benchmarks Family.</param>
        /// <param name="market">Market grouping related to the Benchmark Family.</param>
        /// <param name="categoryDescription">Extended name or description of Benchmark Family &amp; Market.</param>
        public BenchmarkIdList(string fsymId = default(string), string name = default(string), string familyName = default(string), string market = default(string), string categoryDescription = default(string))
        {
            this.FsymId = fsymId;
            this.Name = name;
            this.FamilyName = familyName;
            this.Market = market;
            this.CategoryDescription = categoryDescription;
        }

        /// <summary>
        /// Benchmark Id
        /// </summary>
        /// <value>Benchmark Id</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Name of the Benchmark ID
        /// </summary>
        /// <value>Name of the Benchmark ID</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Name of the Benchmarks Family
        /// </summary>
        /// <value>Name of the Benchmarks Family</value>
        [DataMember(Name = "familyName", EmitDefaultValue = true)]
        public string FamilyName { get; set; }

        /// <summary>
        /// Market grouping related to the Benchmark Family
        /// </summary>
        /// <value>Market grouping related to the Benchmark Family</value>
        [DataMember(Name = "market", EmitDefaultValue = true)]
        public string Market { get; set; }

        /// <summary>
        /// Extended name or description of Benchmark Family &amp; Market
        /// </summary>
        /// <value>Extended name or description of Benchmark Family &amp; Market</value>
        [DataMember(Name = "categoryDescription", EmitDefaultValue = true)]
        public string CategoryDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BenchmarkIdList {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  CategoryDescription: ").Append(CategoryDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BenchmarkIdList);
        }

        /// <summary>
        /// Returns true if BenchmarkIdList instances are equal
        /// </summary>
        /// <param name="input">Instance of BenchmarkIdList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BenchmarkIdList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FamilyName == input.FamilyName ||
                    (this.FamilyName != null &&
                    this.FamilyName.Equals(input.FamilyName))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.CategoryDescription == input.CategoryDescription ||
                    (this.CategoryDescription != null &&
                    this.CategoryDescription.Equals(input.CategoryDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FamilyName != null)
                {
                    hashCode = (hashCode * 59) + this.FamilyName.GetHashCode();
                }
                if (this.Market != null)
                {
                    hashCode = (hashCode * 59) + this.Market.GetHashCode();
                }
                if (this.CategoryDescription != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryDescription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
