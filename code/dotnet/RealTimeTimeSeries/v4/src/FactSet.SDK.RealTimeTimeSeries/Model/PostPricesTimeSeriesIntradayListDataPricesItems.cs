/*
 * Real-Time Time Series API
 *
 * Time series data, end-of-day or intraday, tick-by-tick or subsampled. Additional vendor-specific endpoints provide a modified interface for seamless integration with the ChartIQ chart library.  This API is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * integrated into complex infrastructures such as existing frontend frameworks or authentication services.  This API has been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Real-Time Quotes API for Digital Portals](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price information. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimeTimeSeries.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimeTimeSeries.Model
{
    /// <summary>
    /// A list of objects. For semantical context see the description of the parent array.
    /// </summary>
    [DataContract(Name = "PostPricesTimeSeriesIntradayListDataPricesItems")]
    public partial class PostPricesTimeSeriesIntradayListDataPricesItems : IEquatable<PostPricesTimeSeriesIntradayListDataPricesItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPricesTimeSeriesIntradayListDataPricesItems" /> class.
        /// </summary>
        /// <param name="time">Date and time..</param>
        /// <param name="tickId">Intraday tick identifier created by a feed handler, unique within a trading day..</param>
        /// <param name="price">Price value. See attribute &#x60;valueUnit&#x60; in endpoint &#x60;/prices/get&#x60; for its unit, except for price type yield, where the &#x60;valueUnit&#x60; is always &#x60;percent&#x60; (id&#x3D;258)..</param>
        /// <param name="quoteCondition">Quote condition. Possible values depend on the values delivered by the supplier of the price information..</param>
        /// <param name="tradingVolume">Number of units (e.g. shares) traded, offered (price type ask), solicited (price type bid), or empty (price type yield)..</param>
        /// <param name="tradingValue">Monetary equivalent (cash value) of the trade. See attribute &#x60;currency&#x60; in endpoint &#x60;/prices/get&#x60; for its unit. Empty for price type yield..</param>
        public PostPricesTimeSeriesIntradayListDataPricesItems(DateTime? time = default(DateTime?), decimal? tickId = default(decimal?), decimal? price = default(decimal?), string quoteCondition = default(string), decimal? tradingVolume = default(decimal?), decimal? tradingValue = default(decimal?))
        {
            this.Time = time;
            this.TickId = tickId;
            this.Price = price;
            this.QuoteCondition = quoteCondition;
            this.TradingVolume = tradingVolume;
            this.TradingValue = tradingValue;
        }

        /// <summary>
        /// Date and time.
        /// </summary>
        /// <value>Date and time.</value>
        [DataMember(Name = "time", EmitDefaultValue = true)]
        public DateTime? Time { get; set; }

        /// <summary>
        /// Intraday tick identifier created by a feed handler, unique within a trading day.
        /// </summary>
        /// <value>Intraday tick identifier created by a feed handler, unique within a trading day.</value>
        [DataMember(Name = "tickId", EmitDefaultValue = true)]
        public decimal? TickId { get; set; }

        /// <summary>
        /// Price value. See attribute &#x60;valueUnit&#x60; in endpoint &#x60;/prices/get&#x60; for its unit, except for price type yield, where the &#x60;valueUnit&#x60; is always &#x60;percent&#x60; (id&#x3D;258).
        /// </summary>
        /// <value>Price value. See attribute &#x60;valueUnit&#x60; in endpoint &#x60;/prices/get&#x60; for its unit, except for price type yield, where the &#x60;valueUnit&#x60; is always &#x60;percent&#x60; (id&#x3D;258).</value>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public decimal? Price { get; set; }

        /// <summary>
        /// Quote condition. Possible values depend on the values delivered by the supplier of the price information.
        /// </summary>
        /// <value>Quote condition. Possible values depend on the values delivered by the supplier of the price information.</value>
        [DataMember(Name = "quoteCondition", EmitDefaultValue = true)]
        public string QuoteCondition { get; set; }

        /// <summary>
        /// Number of units (e.g. shares) traded, offered (price type ask), solicited (price type bid), or empty (price type yield).
        /// </summary>
        /// <value>Number of units (e.g. shares) traded, offered (price type ask), solicited (price type bid), or empty (price type yield).</value>
        [DataMember(Name = "tradingVolume", EmitDefaultValue = true)]
        public decimal? TradingVolume { get; set; }

        /// <summary>
        /// Monetary equivalent (cash value) of the trade. See attribute &#x60;currency&#x60; in endpoint &#x60;/prices/get&#x60; for its unit. Empty for price type yield.
        /// </summary>
        /// <value>Monetary equivalent (cash value) of the trade. See attribute &#x60;currency&#x60; in endpoint &#x60;/prices/get&#x60; for its unit. Empty for price type yield.</value>
        [DataMember(Name = "tradingValue", EmitDefaultValue = true)]
        public decimal? TradingValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostPricesTimeSeriesIntradayListDataPricesItems {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  TickId: ").Append(TickId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  QuoteCondition: ").Append(QuoteCondition).Append("\n");
            sb.Append("  TradingVolume: ").Append(TradingVolume).Append("\n");
            sb.Append("  TradingValue: ").Append(TradingValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostPricesTimeSeriesIntradayListDataPricesItems);
        }

        /// <summary>
        /// Returns true if PostPricesTimeSeriesIntradayListDataPricesItems instances are equal
        /// </summary>
        /// <param name="input">Instance of PostPricesTimeSeriesIntradayListDataPricesItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostPricesTimeSeriesIntradayListDataPricesItems input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.TickId == input.TickId ||
                    (this.TickId != null &&
                    this.TickId.Equals(input.TickId))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.QuoteCondition == input.QuoteCondition ||
                    (this.QuoteCondition != null &&
                    this.QuoteCondition.Equals(input.QuoteCondition))
                ) && 
                (
                    this.TradingVolume == input.TradingVolume ||
                    (this.TradingVolume != null &&
                    this.TradingVolume.Equals(input.TradingVolume))
                ) && 
                (
                    this.TradingValue == input.TradingValue ||
                    (this.TradingValue != null &&
                    this.TradingValue.Equals(input.TradingValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                if (this.TickId != null)
                {
                    hashCode = (hashCode * 59) + this.TickId.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.QuoteCondition != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteCondition.GetHashCode();
                }
                if (this.TradingVolume != null)
                {
                    hashCode = (hashCode * 59) + this.TradingVolume.GetHashCode();
                }
                if (this.TradingValue != null)
                {
                    hashCode = (hashCode * 59) + this.TradingValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
