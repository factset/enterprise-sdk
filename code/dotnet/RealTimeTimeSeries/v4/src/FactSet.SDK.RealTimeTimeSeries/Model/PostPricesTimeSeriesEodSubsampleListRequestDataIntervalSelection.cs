/*
 * Real-Time Time Series API
 *
 * Time series data, end-of-day or intraday, tick-by-tick or subsampled. Additional vendor-specific endpoints provide a modified interface for seamless integration with the ChartIQ chart library.  This API is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * integrated into complex infrastructures such as existing frontend frameworks or authentication services.  This API has been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Real-Time Quotes API for Digital Portals](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price information. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimeTimeSeries.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimeTimeSeries.Model
{
    /// <summary>
    /// Select the intervals from which the subsamples are to be created.
    /// </summary>
    [DataContract(Name = "PostPricesTimeSeriesEodSubsampleListRequest_data_intervalSelection")]
    public partial class PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelection : IEquatable<PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelection" /> class.
        /// </summary>
        /// <param name="intervals">Non-empty intervals of days to consider for the request. The array contains a list of at least two days in increasing order. Each pair of adjacent entries day_n and day_(n+1) specifies a half-open interval, that is a range of days d where day_n &lt;&#x3D; d &lt; day_(n+1). A subsample is computed for each interval. The valid range of intervals is between 1900-01-01 and the day after the current day..</param>
        /// <param name="samples">samples.</param>
        public PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelection(List<DateTime> intervals = default(List<DateTime>), PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples samples = default(PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples))
        {
            this.Intervals = intervals;
            this.Samples = samples;
        }

        /// <summary>
        /// Non-empty intervals of days to consider for the request. The array contains a list of at least two days in increasing order. Each pair of adjacent entries day_n and day_(n+1) specifies a half-open interval, that is a range of days d where day_n &lt;&#x3D; d &lt; day_(n+1). A subsample is computed for each interval. The valid range of intervals is between 1900-01-01 and the day after the current day.
        /// </summary>
        /// <value>Non-empty intervals of days to consider for the request. The array contains a list of at least two days in increasing order. Each pair of adjacent entries day_n and day_(n+1) specifies a half-open interval, that is a range of days d where day_n &lt;&#x3D; d &lt; day_(n+1). A subsample is computed for each interval. The valid range of intervals is between 1900-01-01 and the day after the current day.</value>
        [DataMember(Name = "intervals", EmitDefaultValue = false)]
        public List<DateTime> Intervals { get; set; }

        /// <summary>
        /// Gets or Sets Samples
        /// </summary>
        [DataMember(Name = "samples", EmitDefaultValue = false)]
        public PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples Samples { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelection {\n");
            sb.Append("  Intervals: ").Append(Intervals).Append("\n");
            sb.Append("  Samples: ").Append(Samples).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelection);
        }

        /// <summary>
        /// Returns true if PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostPricesTimeSeriesEodSubsampleListRequestDataIntervalSelection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Intervals == input.Intervals ||
                    this.Intervals != null &&
                    input.Intervals != null &&
                    this.Intervals.SequenceEqual(input.Intervals)
                ) && 
                (
                    this.Samples == input.Samples ||
                    (this.Samples != null &&
                    this.Samples.Equals(input.Samples))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Intervals != null)
                {
                    hashCode = (hashCode * 59) + this.Intervals.GetHashCode();
                }
                if (this.Samples != null)
                {
                    hashCode = (hashCode * 59) + this.Samples.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
