/*
 * Real-Time Time Series API
 *
 * Time series data, end-of-day or intraday, tick-by-tick or subsampled. Additional vendor-specific endpoints provide a modified interface for seamless integration with the ChartIQ chart library.  This API is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * integrated into complex infrastructures such as existing frontend frameworks or authentication services.  This API has been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Real-Time Quotes API for Digital Portals](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price information. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimeTimeSeries.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimeTimeSeries.Model
{
    /// <summary>
    /// A list of objects. For semantical context see the description of the parent array.
    /// </summary>
    [DataContract(Name = "PostPricesTimeSeriesEodListDataPricesItems")]
    public partial class PostPricesTimeSeriesEodListDataPricesItems : IEquatable<PostPricesTimeSeriesEodListDataPricesItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPricesTimeSeriesEodListDataPricesItems" /> class.
        /// </summary>
        /// <param name="date">Date..</param>
        /// <param name="first">First price..</param>
        /// <param name="last">Last price..</param>
        /// <param name="low">Lowest price..</param>
        /// <param name="high">Highest price..</param>
        /// <param name="tradingVolume">Number of units (e.g. shares) traded (price type trade and estimate), offered (price type ask), solicited (price type bid), or empty (price type yield)..</param>
        /// <param name="tradingValue">Monetary equivalent (cash value) of the trade. See attribute &#x60;currency&#x60; in endpoint &#x60;/prices/get&#x60; for its unit. Empty for price type yield..</param>
        public PostPricesTimeSeriesEodListDataPricesItems(DateTime? date = default(DateTime?), decimal? first = default(decimal?), decimal? last = default(decimal?), decimal? low = default(decimal?), decimal? high = default(decimal?), decimal? tradingVolume = default(decimal?), decimal? tradingValue = default(decimal?))
        {
            this.Date = date;
            this.First = first;
            this.Last = last;
            this.Low = low;
            this.High = high;
            this.TradingVolume = tradingVolume;
            this.TradingValue = tradingValue;
        }

        /// <summary>
        /// Date.
        /// </summary>
        /// <value>Date.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// First price.
        /// </summary>
        /// <value>First price.</value>
        [DataMember(Name = "first", EmitDefaultValue = true)]
        public decimal? First { get; set; }

        /// <summary>
        /// Last price.
        /// </summary>
        /// <value>Last price.</value>
        [DataMember(Name = "last", EmitDefaultValue = true)]
        public decimal? Last { get; set; }

        /// <summary>
        /// Lowest price.
        /// </summary>
        /// <value>Lowest price.</value>
        [DataMember(Name = "low", EmitDefaultValue = true)]
        public decimal? Low { get; set; }

        /// <summary>
        /// Highest price.
        /// </summary>
        /// <value>Highest price.</value>
        [DataMember(Name = "high", EmitDefaultValue = true)]
        public decimal? High { get; set; }

        /// <summary>
        /// Number of units (e.g. shares) traded (price type trade and estimate), offered (price type ask), solicited (price type bid), or empty (price type yield).
        /// </summary>
        /// <value>Number of units (e.g. shares) traded (price type trade and estimate), offered (price type ask), solicited (price type bid), or empty (price type yield).</value>
        [DataMember(Name = "tradingVolume", EmitDefaultValue = true)]
        public decimal? TradingVolume { get; set; }

        /// <summary>
        /// Monetary equivalent (cash value) of the trade. See attribute &#x60;currency&#x60; in endpoint &#x60;/prices/get&#x60; for its unit. Empty for price type yield.
        /// </summary>
        /// <value>Monetary equivalent (cash value) of the trade. See attribute &#x60;currency&#x60; in endpoint &#x60;/prices/get&#x60; for its unit. Empty for price type yield.</value>
        [DataMember(Name = "tradingValue", EmitDefaultValue = true)]
        public decimal? TradingValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostPricesTimeSeriesEodListDataPricesItems {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  TradingVolume: ").Append(TradingVolume).Append("\n");
            sb.Append("  TradingValue: ").Append(TradingValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostPricesTimeSeriesEodListDataPricesItems);
        }

        /// <summary>
        /// Returns true if PostPricesTimeSeriesEodListDataPricesItems instances are equal
        /// </summary>
        /// <param name="input">Instance of PostPricesTimeSeriesEodListDataPricesItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostPricesTimeSeriesEodListDataPricesItems input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.First == input.First ||
                    (this.First != null &&
                    this.First.Equals(input.First))
                ) && 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.TradingVolume == input.TradingVolume ||
                    (this.TradingVolume != null &&
                    this.TradingVolume.Equals(input.TradingVolume))
                ) && 
                (
                    this.TradingValue == input.TradingValue ||
                    (this.TradingValue != null &&
                    this.TradingValue.Equals(input.TradingValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.First != null)
                {
                    hashCode = (hashCode * 59) + this.First.GetHashCode();
                }
                if (this.Last != null)
                {
                    hashCode = (hashCode * 59) + this.Last.GetHashCode();
                }
                if (this.Low != null)
                {
                    hashCode = (hashCode * 59) + this.Low.GetHashCode();
                }
                if (this.High != null)
                {
                    hashCode = (hashCode * 59) + this.High.GetHashCode();
                }
                if (this.TradingVolume != null)
                {
                    hashCode = (hashCode * 59) + this.TradingVolume.GetHashCode();
                }
                if (this.TradingValue != null)
                {
                    hashCode = (hashCode * 59) + this.TradingValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
