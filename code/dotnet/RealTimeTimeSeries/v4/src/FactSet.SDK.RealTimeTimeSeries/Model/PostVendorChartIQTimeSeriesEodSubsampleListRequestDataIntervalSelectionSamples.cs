/*
 * Real-Time Time Series API
 *
 * Time series data, end-of-day or intraday, tick-by-tick or subsampled. Additional vendor-specific endpoints provide a modified interface for seamless integration with the ChartIQ chart library.  This API is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * integrated into complex infrastructures such as existing frontend frameworks or authentication services.  This API has been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Real-Time Quotes API for Digital Portals](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price information. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimeTimeSeries.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimeTimeSeries.Model
{
    /// <summary>
    /// Subsample granularity and number of samples suitable for end-of-day data.
    /// </summary>
    [DataContract(Name = "PostVendorChartIQTimeSeriesEodSubsampleListRequest_data_intervalSelection_samples")]
    public partial class PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples : IEquatable<PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples>, IValidatableObject
    {
        /// <summary>
        /// Subsample granularities suitable for end-of-day data. | Value | Description | | - -- | - -- | | 1d | Each subsample interval encompasses 1 day. | | 1w | Each subsample interval encompasses 1 week. | | 1m | Each subsample interval encompasses 1 month. | | 3m | Each subsample interval encompasses 3 month. | | 6m | Each subsample interval encompasses 6 month. | | 1y | Each subsample interval encompasses 1 year. |  
        /// </summary>
        /// <value>Subsample granularities suitable for end-of-day data. | Value | Description | | - -- | - -- | | 1d | Each subsample interval encompasses 1 day. | | 1w | Each subsample interval encompasses 1 week. | | 1m | Each subsample interval encompasses 1 month. | | 3m | Each subsample interval encompasses 3 month. | | 6m | Each subsample interval encompasses 6 month. | | 1y | Each subsample interval encompasses 1 year. |  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GranularityEnum
        {
            /// <summary>
            /// Enum _1d for value: 1d
            /// </summary>
            [EnumMember(Value = "1d")]
            _1d = 1,

            /// <summary>
            /// Enum _1w for value: 1w
            /// </summary>
            [EnumMember(Value = "1w")]
            _1w = 2,

            /// <summary>
            /// Enum _1m for value: 1m
            /// </summary>
            [EnumMember(Value = "1m")]
            _1m = 3,

            /// <summary>
            /// Enum _3m for value: 3m
            /// </summary>
            [EnumMember(Value = "3m")]
            _3m = 4,

            /// <summary>
            /// Enum _6m for value: 6m
            /// </summary>
            [EnumMember(Value = "6m")]
            _6m = 5,

            /// <summary>
            /// Enum _1y for value: 1y
            /// </summary>
            [EnumMember(Value = "1y")]
            _1y = 6

        }


        /// <summary>
        /// Subsample granularities suitable for end-of-day data. | Value | Description | | - -- | - -- | | 1d | Each subsample interval encompasses 1 day. | | 1w | Each subsample interval encompasses 1 week. | | 1m | Each subsample interval encompasses 1 month. | | 3m | Each subsample interval encompasses 3 month. | | 6m | Each subsample interval encompasses 6 month. | | 1y | Each subsample interval encompasses 1 year. |  
        /// </summary>
        /// <value>Subsample granularities suitable for end-of-day data. | Value | Description | | - -- | - -- | | 1d | Each subsample interval encompasses 1 day. | | 1w | Each subsample interval encompasses 1 week. | | 1m | Each subsample interval encompasses 1 month. | | 3m | Each subsample interval encompasses 3 month. | | 6m | Each subsample interval encompasses 6 month. | | 1y | Each subsample interval encompasses 1 year. |  </value>
        [DataMember(Name = "granularity", EmitDefaultValue = false)]
        public GranularityEnum? Granularity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples" /> class.
        /// </summary>
        /// <param name="end">Date of the end point of the subsamples (exclusive). &#x60;end&#x60; is limited to the day after the current day. (required).</param>
        /// <param name="number">Number of subsamples returned. The product of &#x60;number&#x60; and &#x60;granularity&#x60; must not extend further into the past than 1900-01-01. (required).</param>
        /// <param name="granularity">Subsample granularities suitable for end-of-day data. | Value | Description | | - -- | - -- | | 1d | Each subsample interval encompasses 1 day. | | 1w | Each subsample interval encompasses 1 week. | | 1m | Each subsample interval encompasses 1 month. | | 3m | Each subsample interval encompasses 3 month. | | 6m | Each subsample interval encompasses 6 month. | | 1y | Each subsample interval encompasses 1 year. |   (default to GranularityEnum._1w).</param>
        public PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples(DateTime end, decimal number,GranularityEnum? granularity = GranularityEnum._1w)
        {
            this.End = end;
            this.Number = number;
            this.Granularity = granularity;
        }

        /// <summary>
        /// Date of the end point of the subsamples (exclusive). &#x60;end&#x60; is limited to the day after the current day.
        /// </summary>
        /// <value>Date of the end point of the subsamples (exclusive). &#x60;end&#x60; is limited to the day after the current day.</value>
        [DataMember(Name = "end", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime End { get; set; }

        /// <summary>
        /// Number of subsamples returned. The product of &#x60;number&#x60; and &#x60;granularity&#x60; must not extend further into the past than 1900-01-01.
        /// </summary>
        /// <value>Number of subsamples returned. The product of &#x60;number&#x60; and &#x60;granularity&#x60; must not extend further into the past than 1900-01-01.</value>
        [DataMember(Name = "number", IsRequired = true, EmitDefaultValue = false)]
        public decimal Number { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples {\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples);
        }

        /// <summary>
        /// Returns true if PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples instances are equal
        /// </summary>
        /// <param name="input">Instance of PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostVendorChartIQTimeSeriesEodSubsampleListRequestDataIntervalSelectionSamples input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Granularity == input.Granularity ||
                    this.Granularity.Equals(input.Granularity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                hashCode = (hashCode * 59) + this.Granularity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Number (decimal) maximum
            if (this.Number > (decimal)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, must be a value less than or equal to 10000.", new [] { "Number" });
            }

            // Number (decimal) minimum
            if (this.Number < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, must be a value greater than or equal to 1.", new [] { "Number" });
            }

            yield break;
        }
    }

}
