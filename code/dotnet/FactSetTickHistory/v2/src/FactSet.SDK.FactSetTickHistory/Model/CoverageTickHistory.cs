/*
 * Tick History
 *
 * Tick History provides dynamic access to historical tick data for a specific security for specific dates or date range.
 *
 * The version of the OpenAPI document: 2.4.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTickHistory.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTickHistory.Model
{
    /// <summary>
    /// Returns Coverage Response of the requested ticker with unique isocode within a date range
    /// </summary>
    [DataContract(Name = "CoverageTickHistory")]
    public partial class CoverageTickHistory : IEquatable<CoverageTickHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoverageTickHistory" /> class.
        /// </summary>
        /// <param name="ticker">a unique ticker given to a company.</param>
        /// <param name="factsetExchangeCode">FactSet specific exchange code..</param>
        /// <param name="startDate">The date for (or from which) the coverage is required. .</param>
        /// <param name="latestTradeDate">This specifies the latest traded date from tick history..</param>
        /// <param name="companyName">Name of the firm.</param>
        /// <param name="isin">returns the ISIN of the requested company .</param>
        /// <param name="currency">Represents 3 digit ISO code for the currency.</param>
        /// <param name="lastExchangeCode">the last traded exhange code from tick history.</param>
        /// <param name="lastExchangeName">the last traded exchange name from tick history.</param>
        /// <param name="primaryTickerExchange">the primary ticker iso.</param>
        public CoverageTickHistory(string ticker = default(string), string factsetExchangeCode = default(string), DateTime startDate = default(DateTime), DateTime latestTradeDate = default(DateTime), string companyName = default(string), string isin = default(string), string currency = default(string), string lastExchangeCode = default(string), string lastExchangeName = default(string), string primaryTickerExchange = default(string))
        {
            this.Ticker = ticker;
            this.FactsetExchangeCode = factsetExchangeCode;
            this.StartDate = startDate;
            this.LatestTradeDate = latestTradeDate;
            this.CompanyName = companyName;
            this.Isin = isin;
            this.Currency = currency;
            this.LastExchangeCode = lastExchangeCode;
            this.LastExchangeName = lastExchangeName;
            this.PrimaryTickerExchange = primaryTickerExchange;
        }

        /// <summary>
        /// a unique ticker given to a company
        /// </summary>
        /// <value>a unique ticker given to a company</value>
        [DataMember(Name = "ticker", EmitDefaultValue = false)]
        public string Ticker { get; set; }

        /// <summary>
        /// FactSet specific exchange code.
        /// </summary>
        /// <value>FactSet specific exchange code.</value>
        [DataMember(Name = "factsetExchangeCode", EmitDefaultValue = false)]
        public string FactsetExchangeCode { get; set; }

        /// <summary>
        /// The date for (or from which) the coverage is required. 
        /// </summary>
        /// <value>The date for (or from which) the coverage is required. </value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// This specifies the latest traded date from tick history.
        /// </summary>
        /// <value>This specifies the latest traded date from tick history.</value>
        [DataMember(Name = "latestTradeDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LatestTradeDate { get; set; }

        /// <summary>
        /// Name of the firm
        /// </summary>
        /// <value>Name of the firm</value>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// returns the ISIN of the requested company 
        /// </summary>
        /// <value>returns the ISIN of the requested company </value>
        [DataMember(Name = "isin", EmitDefaultValue = false)]
        public string Isin { get; set; }

        /// <summary>
        /// Represents 3 digit ISO code for the currency
        /// </summary>
        /// <value>Represents 3 digit ISO code for the currency</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// the last traded exhange code from tick history
        /// </summary>
        /// <value>the last traded exhange code from tick history</value>
        [DataMember(Name = "lastExchangeCode", EmitDefaultValue = false)]
        public string LastExchangeCode { get; set; }

        /// <summary>
        /// the last traded exchange name from tick history
        /// </summary>
        /// <value>the last traded exchange name from tick history</value>
        [DataMember(Name = "lastExchangeName", EmitDefaultValue = false)]
        public string LastExchangeName { get; set; }

        /// <summary>
        /// the primary ticker iso
        /// </summary>
        /// <value>the primary ticker iso</value>
        [DataMember(Name = "primaryTickerExchange", EmitDefaultValue = false)]
        public string PrimaryTickerExchange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoverageTickHistory {\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  FactsetExchangeCode: ").Append(FactsetExchangeCode).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  LatestTradeDate: ").Append(LatestTradeDate).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  LastExchangeCode: ").Append(LastExchangeCode).Append("\n");
            sb.Append("  LastExchangeName: ").Append(LastExchangeName).Append("\n");
            sb.Append("  PrimaryTickerExchange: ").Append(PrimaryTickerExchange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CoverageTickHistory);
        }

        /// <summary>
        /// Returns true if CoverageTickHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of CoverageTickHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoverageTickHistory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.FactsetExchangeCode == input.FactsetExchangeCode ||
                    (this.FactsetExchangeCode != null &&
                    this.FactsetExchangeCode.Equals(input.FactsetExchangeCode))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.LatestTradeDate == input.LatestTradeDate ||
                    (this.LatestTradeDate != null &&
                    this.LatestTradeDate.Equals(input.LatestTradeDate))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.LastExchangeCode == input.LastExchangeCode ||
                    (this.LastExchangeCode != null &&
                    this.LastExchangeCode.Equals(input.LastExchangeCode))
                ) && 
                (
                    this.LastExchangeName == input.LastExchangeName ||
                    (this.LastExchangeName != null &&
                    this.LastExchangeName.Equals(input.LastExchangeName))
                ) && 
                (
                    this.PrimaryTickerExchange == input.PrimaryTickerExchange ||
                    (this.PrimaryTickerExchange != null &&
                    this.PrimaryTickerExchange.Equals(input.PrimaryTickerExchange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ticker != null)
                {
                    hashCode = (hashCode * 59) + this.Ticker.GetHashCode();
                }
                if (this.FactsetExchangeCode != null)
                {
                    hashCode = (hashCode * 59) + this.FactsetExchangeCode.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.LatestTradeDate != null)
                {
                    hashCode = (hashCode * 59) + this.LatestTradeDate.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.LastExchangeCode != null)
                {
                    hashCode = (hashCode * 59) + this.LastExchangeCode.GetHashCode();
                }
                if (this.LastExchangeName != null)
                {
                    hashCode = (hashCode * 59) + this.LastExchangeName.GetHashCode();
                }
                if (this.PrimaryTickerExchange != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryTickerExchange.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
