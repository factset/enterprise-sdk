/*
 * Tick History
 *
 * Tick History provides dynamic access to historical tick data for a specific security for specific dates or date range.
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTickHistory.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTickHistory.Model
{
    /// <summary>
    ///  Returns Tick History Response.
    /// </summary>
    [DataContract(Name = "TickData")]
    public partial class TickData : IEquatable<TickData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TickData" /> class.
        /// </summary>
        /// <param name="requestTimestamp">Timestamp of when request was made.</param>
        /// <param name="updateTimestamp">Timestamp when the file was last updated.</param>
        /// <param name="notAuthorizedTickers">Returns not Authorized Tickers.</param>
        /// <param name="invalidTickers">Returns invalid Tickers.</param>
        /// <param name="listOfFiles">Contains list of Files.</param>
        public TickData(DateTime requestTimestamp = default(DateTime), DateTime updateTimestamp = default(DateTime), List<string> notAuthorizedTickers = default(List<string>), List<string> invalidTickers = default(List<string>), List<Files> listOfFiles = default(List<Files>))
        {
            this.RequestTimestamp = requestTimestamp;
            this.UpdateTimestamp = updateTimestamp;
            this.NotAuthorizedTickers = notAuthorizedTickers;
            this.InvalidTickers = invalidTickers;
            this.ListOfFiles = listOfFiles;
        }

        /// <summary>
        /// Timestamp of when request was made
        /// </summary>
        /// <value>Timestamp of when request was made</value>
        [DataMember(Name = "requestTimestamp", EmitDefaultValue = false)]
        public DateTime RequestTimestamp { get; set; }

        /// <summary>
        /// Timestamp when the file was last updated
        /// </summary>
        /// <value>Timestamp when the file was last updated</value>
        [DataMember(Name = "updateTimestamp", EmitDefaultValue = false)]
        public DateTime UpdateTimestamp { get; set; }

        /// <summary>
        /// Returns not Authorized Tickers
        /// </summary>
        /// <value>Returns not Authorized Tickers</value>
        [DataMember(Name = "notAuthorizedTickers", EmitDefaultValue = false)]
        public List<string> NotAuthorizedTickers { get; set; }

        /// <summary>
        /// Returns invalid Tickers
        /// </summary>
        /// <value>Returns invalid Tickers</value>
        [DataMember(Name = "invalidTickers", EmitDefaultValue = false)]
        public List<string> InvalidTickers { get; set; }

        /// <summary>
        /// Contains list of Files
        /// </summary>
        /// <value>Contains list of Files</value>
        [DataMember(Name = "listOfFiles", EmitDefaultValue = false)]
        public List<Files> ListOfFiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TickData {\n");
            sb.Append("  RequestTimestamp: ").Append(RequestTimestamp).Append("\n");
            sb.Append("  UpdateTimestamp: ").Append(UpdateTimestamp).Append("\n");
            sb.Append("  NotAuthorizedTickers: ").Append(NotAuthorizedTickers).Append("\n");
            sb.Append("  InvalidTickers: ").Append(InvalidTickers).Append("\n");
            sb.Append("  ListOfFiles: ").Append(ListOfFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TickData);
        }

        /// <summary>
        /// Returns true if TickData instances are equal
        /// </summary>
        /// <param name="input">Instance of TickData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TickData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestTimestamp == input.RequestTimestamp ||
                    (this.RequestTimestamp != null &&
                    this.RequestTimestamp.Equals(input.RequestTimestamp))
                ) && 
                (
                    this.UpdateTimestamp == input.UpdateTimestamp ||
                    (this.UpdateTimestamp != null &&
                    this.UpdateTimestamp.Equals(input.UpdateTimestamp))
                ) && 
                (
                    this.NotAuthorizedTickers == input.NotAuthorizedTickers ||
                    this.NotAuthorizedTickers != null &&
                    input.NotAuthorizedTickers != null &&
                    this.NotAuthorizedTickers.SequenceEqual(input.NotAuthorizedTickers)
                ) && 
                (
                    this.InvalidTickers == input.InvalidTickers ||
                    this.InvalidTickers != null &&
                    input.InvalidTickers != null &&
                    this.InvalidTickers.SequenceEqual(input.InvalidTickers)
                ) && 
                (
                    this.ListOfFiles == input.ListOfFiles ||
                    this.ListOfFiles != null &&
                    input.ListOfFiles != null &&
                    this.ListOfFiles.SequenceEqual(input.ListOfFiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.RequestTimestamp.GetHashCode();
                }
                if (this.UpdateTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateTimestamp.GetHashCode();
                }
                if (this.NotAuthorizedTickers != null)
                {
                    hashCode = (hashCode * 59) + this.NotAuthorizedTickers.GetHashCode();
                }
                if (this.InvalidTickers != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidTickers.GetHashCode();
                }
                if (this.ListOfFiles != null)
                {
                    hashCode = (hashCode * 59) + this.ListOfFiles.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
