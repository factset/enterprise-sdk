/*
 * Tick History
 *
 * Tick History provides dynamic access to historical tick data for a specific security for specific dates or date range.
 *
 * The version of the OpenAPI document: 2.4.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetTickHistory.Client;
using FactSet.SDK.FactSetTickHistory.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetTickHistory.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILevel1ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>Level1Api.GetLevel1FileStatusResponseWrapper</returns>
        Level1Api.GetLevel1FileStatusResponseWrapper GetLevel1FileStatus(string id);

        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>ApiResponse of Level1Api.GetLevel1FileStatusResponseWrapper</returns>
        ApiResponse<Level1Api.GetLevel1FileStatusResponseWrapper> GetLevel1FileStatusWithHttpInfo(string id);
        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>Level1Api.GetMinutebarsFileStatusResponseWrapper</returns>
        Level1Api.GetMinutebarsFileStatusResponseWrapper GetMinutebarsFileStatus(string id);

        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>ApiResponse of Level1Api.GetMinutebarsFileStatusResponseWrapper</returns>
        ApiResponse<Level1Api.GetMinutebarsFileStatusResponseWrapper> GetMinutebarsFileStatusWithHttpInfo(string id);
        /// <summary>
        /// Returns the Minute bars data in files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>Level1Api.GetMinutebarsFilesResponseWrapper</returns>
        Level1Api.GetMinutebarsFilesResponseWrapper GetMinutebarsFiles(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the Minute bars data in files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>ApiResponse of Level1Api.GetMinutebarsFilesResponseWrapper</returns>
        ApiResponse<Level1Api.GetMinutebarsFilesResponseWrapper> GetMinutebarsFilesWithHttpInfo(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the tick-by-tick data in files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>Level1Api.GetTickHistoryLevel1FilesResponseWrapper</returns>
        Level1Api.GetTickHistoryLevel1FilesResponseWrapper GetTickHistoryLevel1Files(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the tick-by-tick data in files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>ApiResponse of Level1Api.GetTickHistoryLevel1FilesResponseWrapper</returns>
        ApiResponse<Level1Api.GetTickHistoryLevel1FilesResponseWrapper> GetTickHistoryLevel1FilesWithHttpInfo(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Requests the creation of Minute bars file
        /// </summary>
        /// <remarks>
        /// 1-minute bars available from 20120101 to previous day. Per request able to fetch upto 6 months of data.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minRequest"></param>
        /// <returns>SubmittedResponse</returns>
        SubmittedResponse RequestMinutebarsFiles(MinRequest minRequest);

        /// <summary>
        /// Requests the creation of Minute bars file
        /// </summary>
        /// <remarks>
        /// 1-minute bars available from 20120101 to previous day. Per request able to fetch upto 6 months of data.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minRequest"></param>
        /// <returns>ApiResponse of SubmittedResponse</returns>
        ApiResponse<SubmittedResponse> RequestMinutebarsFilesWithHttpInfo(MinRequest minRequest);
        /// <summary>
        /// Returns the coverage for the requested ticker/isin along with other response fields for Level1 data.
        /// </summary>
        /// <remarks>
        /// Returns coverage for specified tickers for Level1 Data
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">&lt;P&gt; The requested list of one or more tickers.&lt;/p&gt;   The &#x60;tickers&#x60; and &#x60;isins&#x60;  parameters provide two different ways to specify the identifiers for data retrieved. Please enter either the tickers or isins parameter.   &lt;P&gt; Maximum 10 tickers per request&lt;/p&gt;      (optional)</param>
        /// <param name="factsetExchangeCode">&lt;p&gt;This parameter is used to filter the results based on the FactSet specific regional or composite exchange code.&lt;/p&gt; **NOTE**:Does not support multiple factsetExchangeCodes (optional)</param>
        /// <param name="isins">&lt;P&gt; Specifies the ISIN of the record. &lt;/p&gt;    Please enter either the &#x60;tickers&#x60; or &#x60;isins&#x60; parameter.     &lt;P&gt; Maximum 10 ISINs per request.&lt;/p&gt;       (optional)</param>
        /// <returns>CoverageResponse</returns>
        CoverageResponse RequestTickHistoryCoverage(List<string> tickers = default(List<string>), string factsetExchangeCode = default(string), List<string> isins = default(List<string>));

        /// <summary>
        /// Returns the coverage for the requested ticker/isin along with other response fields for Level1 data.
        /// </summary>
        /// <remarks>
        /// Returns coverage for specified tickers for Level1 Data
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">&lt;P&gt; The requested list of one or more tickers.&lt;/p&gt;   The &#x60;tickers&#x60; and &#x60;isins&#x60;  parameters provide two different ways to specify the identifiers for data retrieved. Please enter either the tickers or isins parameter.   &lt;P&gt; Maximum 10 tickers per request&lt;/p&gt;      (optional)</param>
        /// <param name="factsetExchangeCode">&lt;p&gt;This parameter is used to filter the results based on the FactSet specific regional or composite exchange code.&lt;/p&gt; **NOTE**:Does not support multiple factsetExchangeCodes (optional)</param>
        /// <param name="isins">&lt;P&gt; Specifies the ISIN of the record. &lt;/p&gt;    Please enter either the &#x60;tickers&#x60; or &#x60;isins&#x60; parameter.     &lt;P&gt; Maximum 10 ISINs per request.&lt;/p&gt;       (optional)</param>
        /// <returns>ApiResponse of CoverageResponse</returns>
        ApiResponse<CoverageResponse> RequestTickHistoryCoverageWithHttpInfo(List<string> tickers = default(List<string>), string factsetExchangeCode = default(string), List<string> isins = default(List<string>));
        /// <summary>
        /// Requests the creation of tick-by-tick file
        /// </summary>
        /// <remarks>
        /// Data available from 20120101 to previous day.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leveloneRequest"></param>
        /// <returns>SubmittedResponse</returns>
        SubmittedResponse RequestTickHistoryLevel1Files(LeveloneRequest leveloneRequest);

        /// <summary>
        /// Requests the creation of tick-by-tick file
        /// </summary>
        /// <remarks>
        /// Data available from 20120101 to previous day.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leveloneRequest"></param>
        /// <returns>ApiResponse of SubmittedResponse</returns>
        ApiResponse<SubmittedResponse> RequestTickHistoryLevel1FilesWithHttpInfo(LeveloneRequest leveloneRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILevel1ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompletedResponse</returns>
        System.Threading.Tasks.Task<Level1Api.GetLevel1FileStatusResponseWrapper> GetLevel1FileStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Level1Api.GetLevel1FileStatusResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<Level1Api.GetLevel1FileStatusResponseWrapper>> GetLevel1FileStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompletedResponse</returns>
        System.Threading.Tasks.Task<Level1Api.GetMinutebarsFileStatusResponseWrapper> GetMinutebarsFileStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Level1Api.GetMinutebarsFileStatusResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<Level1Api.GetMinutebarsFileStatusResponseWrapper>> GetMinutebarsFileStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the Minute bars data in files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFilesMinuteResponse</returns>
        System.Threading.Tasks.Task<Level1Api.GetMinutebarsFilesResponseWrapper> GetMinutebarsFilesAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the Minute bars data in files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Level1Api.GetMinutebarsFilesResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<Level1Api.GetMinutebarsFilesResponseWrapper>> GetMinutebarsFilesWithHttpInfoAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the tick-by-tick data in files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFilesResponse</returns>
        System.Threading.Tasks.Task<Level1Api.GetTickHistoryLevel1FilesResponseWrapper> GetTickHistoryLevel1FilesAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the tick-by-tick data in files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Level1Api.GetTickHistoryLevel1FilesResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<Level1Api.GetTickHistoryLevel1FilesResponseWrapper>> GetTickHistoryLevel1FilesWithHttpInfoAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Requests the creation of Minute bars file
        /// </summary>
        /// <remarks>
        /// 1-minute bars available from 20120101 to previous day. Per request able to fetch upto 6 months of data.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmittedResponse</returns>
        System.Threading.Tasks.Task<SubmittedResponse> RequestMinutebarsFilesAsync(MinRequest minRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Requests the creation of Minute bars file
        /// </summary>
        /// <remarks>
        /// 1-minute bars available from 20120101 to previous day. Per request able to fetch upto 6 months of data.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmittedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmittedResponse>> RequestMinutebarsFilesWithHttpInfoAsync(MinRequest minRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the coverage for the requested ticker/isin along with other response fields for Level1 data.
        /// </summary>
        /// <remarks>
        /// Returns coverage for specified tickers for Level1 Data
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">&lt;P&gt; The requested list of one or more tickers.&lt;/p&gt;   The &#x60;tickers&#x60; and &#x60;isins&#x60;  parameters provide two different ways to specify the identifiers for data retrieved. Please enter either the tickers or isins parameter.   &lt;P&gt; Maximum 10 tickers per request&lt;/p&gt;      (optional)</param>
        /// <param name="factsetExchangeCode">&lt;p&gt;This parameter is used to filter the results based on the FactSet specific regional or composite exchange code.&lt;/p&gt; **NOTE**:Does not support multiple factsetExchangeCodes (optional)</param>
        /// <param name="isins">&lt;P&gt; Specifies the ISIN of the record. &lt;/p&gt;    Please enter either the &#x60;tickers&#x60; or &#x60;isins&#x60; parameter.     &lt;P&gt; Maximum 10 ISINs per request.&lt;/p&gt;       (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoverageResponse</returns>
        System.Threading.Tasks.Task<CoverageResponse> RequestTickHistoryCoverageAsync(List<string> tickers = default(List<string>), string factsetExchangeCode = default(string), List<string> isins = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the coverage for the requested ticker/isin along with other response fields for Level1 data.
        /// </summary>
        /// <remarks>
        /// Returns coverage for specified tickers for Level1 Data
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">&lt;P&gt; The requested list of one or more tickers.&lt;/p&gt;   The &#x60;tickers&#x60; and &#x60;isins&#x60;  parameters provide two different ways to specify the identifiers for data retrieved. Please enter either the tickers or isins parameter.   &lt;P&gt; Maximum 10 tickers per request&lt;/p&gt;      (optional)</param>
        /// <param name="factsetExchangeCode">&lt;p&gt;This parameter is used to filter the results based on the FactSet specific regional or composite exchange code.&lt;/p&gt; **NOTE**:Does not support multiple factsetExchangeCodes (optional)</param>
        /// <param name="isins">&lt;P&gt; Specifies the ISIN of the record. &lt;/p&gt;    Please enter either the &#x60;tickers&#x60; or &#x60;isins&#x60; parameter.     &lt;P&gt; Maximum 10 ISINs per request.&lt;/p&gt;       (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoverageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoverageResponse>> RequestTickHistoryCoverageWithHttpInfoAsync(List<string> tickers = default(List<string>), string factsetExchangeCode = default(string), List<string> isins = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Requests the creation of tick-by-tick file
        /// </summary>
        /// <remarks>
        /// Data available from 20120101 to previous day.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leveloneRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmittedResponse</returns>
        System.Threading.Tasks.Task<SubmittedResponse> RequestTickHistoryLevel1FilesAsync(LeveloneRequest leveloneRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Requests the creation of tick-by-tick file
        /// </summary>
        /// <remarks>
        /// Data available from 20120101 to previous day.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leveloneRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmittedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmittedResponse>> RequestTickHistoryLevel1FilesWithHttpInfoAsync(LeveloneRequest leveloneRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILevel1Api : ILevel1ApiSync, ILevel1ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Level1Api : ILevel1Api
    {
        private FactSet.SDK.FactSetTickHistory.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetLevel1FileStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(CompletedResponse) },
            { (HttpStatusCode)202, typeof(SubmittedResponse) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)404, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetMinutebarsFileStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(CompletedResponse) },
            { (HttpStatusCode)202, typeof(SubmittedResponse) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)404, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetMinutebarsFilesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(GetFilesMinuteResponse) },
            { (HttpStatusCode)202, typeof(SubmittedResponse) },
            { (HttpStatusCode)400, typeof(Status) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)404, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTickHistoryLevel1FilesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(GetFilesResponse) },
            { (HttpStatusCode)202, typeof(SubmittedResponse) },
            { (HttpStatusCode)400, typeof(Status) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)404, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> RequestMinutebarsFilesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(SubmittedResponse) },
            { (HttpStatusCode)400, typeof(Status) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)429, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> RequestTickHistoryCoverageResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CoverageResponse) },
            { (HttpStatusCode)400, typeof(Status) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)429, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> RequestTickHistoryLevel1FilesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(SubmittedResponse) },
            { (HttpStatusCode)400, typeof(Status) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)429, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        
        /// <summary>
        /// Wrapper to support GET /level1/files/status returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 201 : CompletedResponse<br />
        ///  The Request has been created and the response has been created. 
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : SubmittedResponse<br />
        /// The Request has not finished and the result has NOT been created. 
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetLevel1FileStatusResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 201:
        ///     CompletedResponse data201 = response.getResponse201();
        ///     break;
        ///   case 202:
        ///     SubmittedResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetLevel1FileStatusResponseWrapper {

            /// <summary>This constructor initializes the new GetLevel1FileStatusResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetLevel1FileStatusResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            ///  The Request has been created and the response has been created. 
            /// </summary>
            public CompletedResponse Response201
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 201)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response201 can't return a " + StatusCode + " response");
                    }
                    return (CompletedResponse) Response;
                }
            }
            
            /// <summary>
            /// The Request has not finished and the result has NOT been created. 
            /// </summary>
            public SubmittedResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (SubmittedResponse) Response;
                }
            }
            
        }


        /// <summary>
        /// Wrapper to support GET /level1/files/minute-bars/status returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 201 : CompletedResponse<br />
        ///  The Request has been created and the response has been created. 
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : SubmittedResponse<br />
        /// The Request has not finished and the result has NOT been created. 
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetMinutebarsFileStatusResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 201:
        ///     CompletedResponse data201 = response.getResponse201();
        ///     break;
        ///   case 202:
        ///     SubmittedResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetMinutebarsFileStatusResponseWrapper {

            /// <summary>This constructor initializes the new GetMinutebarsFileStatusResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetMinutebarsFileStatusResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            ///  The Request has been created and the response has been created. 
            /// </summary>
            public CompletedResponse Response201
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 201)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response201 can't return a " + StatusCode + " response");
                    }
                    return (CompletedResponse) Response;
                }
            }
            
            /// <summary>
            /// The Request has not finished and the result has NOT been created. 
            /// </summary>
            public SubmittedResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (SubmittedResponse) Response;
                }
            }
            
        }


        /// <summary>
        /// Wrapper to support GET /level1/files/minute-bars/get returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : GetFilesMinuteResponse<br />
        /// Success&lt;/p&gt; **To download the output file copy the response url in a browser**
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : SubmittedResponse<br />
        /// The Request has not finished and the result has NOT been created. 
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetMinutebarsFilesResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     GetFilesMinuteResponse data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     SubmittedResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetMinutebarsFilesResponseWrapper {

            /// <summary>This constructor initializes the new GetMinutebarsFilesResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetMinutebarsFilesResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Success&lt;/p&gt; **To download the output file copy the response url in a browser**
            /// </summary>
            public GetFilesMinuteResponse Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (GetFilesMinuteResponse) Response;
                }
            }
            
            /// <summary>
            /// The Request has not finished and the result has NOT been created. 
            /// </summary>
            public SubmittedResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (SubmittedResponse) Response;
                }
            }
            
        }


        /// <summary>
        /// Wrapper to support GET /level1/files/get returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : GetFilesResponse<br />
        /// Success&lt;/p&gt; **To download the output file copy the response url in a browser**
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : SubmittedResponse<br />
        /// The Request has not finished and the result has NOT been created. 
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetTickHistoryLevel1FilesResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     GetFilesResponse data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     SubmittedResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetTickHistoryLevel1FilesResponseWrapper {

            /// <summary>This constructor initializes the new GetTickHistoryLevel1FilesResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetTickHistoryLevel1FilesResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Success&lt;/p&gt; **To download the output file copy the response url in a browser**
            /// </summary>
            public GetFilesResponse Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (GetFilesResponse) Response;
                }
            }
            
            /// <summary>
            /// The Request has not finished and the result has NOT been created. 
            /// </summary>
            public SubmittedResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (SubmittedResponse) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="Level1Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Level1Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Level1Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Level1Api(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetTickHistory.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetTickHistory.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetTickHistory.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Level1Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Level1Api(FactSet.SDK.FactSetTickHistory.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetTickHistory.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetTickHistory.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Level1Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public Level1Api(FactSet.SDK.FactSetTickHistory.Client.ISynchronousClient client, FactSet.SDK.FactSetTickHistory.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetTickHistory.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetTickHistory.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetTickHistory.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetTickHistory.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetTickHistory.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>Level1Api.GetLevel1FileStatusResponseWrapper</returns>
        public Level1Api.GetLevel1FileStatusResponseWrapper GetLevel1FileStatus(string id)
        {
            var localVarResponse = GetLevel1FileStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>ApiResponse of CompletedResponse</returns>
        public ApiResponse<Level1Api.GetLevel1FileStatusResponseWrapper> GetLevel1FileStatusWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level1Api->GetLevel1FileStatus");
            }

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetLevel1FileStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/level1/files/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLevel1FileStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getlevel1filestatusResponse = new GetLevel1FileStatusResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetLevel1FileStatusResponseWrapper>(localVarResponse.StatusCode, getlevel1filestatusResponse);
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompletedResponse</returns>
        public async System.Threading.Tasks.Task<Level1Api.GetLevel1FileStatusResponseWrapper>GetLevel1FileStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetLevel1FileStatusWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompletedResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Level1Api.GetLevel1FileStatusResponseWrapper>> GetLevel1FileStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level1Api->GetLevel1FileStatus");
            }


            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetLevel1FileStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/level1/files/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLevel1FileStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getlevel1filestatusResponse = new GetLevel1FileStatusResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetLevel1FileStatusResponseWrapper>(localVarResponse.StatusCode, getlevel1filestatusResponse);
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>Level1Api.GetMinutebarsFileStatusResponseWrapper</returns>
        public Level1Api.GetMinutebarsFileStatusResponseWrapper GetMinutebarsFileStatus(string id)
        {
            var localVarResponse = GetMinutebarsFileStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>ApiResponse of CompletedResponse</returns>
        public ApiResponse<Level1Api.GetMinutebarsFileStatusResponseWrapper> GetMinutebarsFileStatusWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level1Api->GetMinutebarsFileStatus");
            }

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetMinutebarsFileStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/level1/files/minute-bars/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMinutebarsFileStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getminutebarsfilestatusResponse = new GetMinutebarsFileStatusResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetMinutebarsFileStatusResponseWrapper>(localVarResponse.StatusCode, getminutebarsfilestatusResponse);
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompletedResponse</returns>
        public async System.Threading.Tasks.Task<Level1Api.GetMinutebarsFileStatusResponseWrapper>GetMinutebarsFileStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetMinutebarsFileStatusWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompletedResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Level1Api.GetMinutebarsFileStatusResponseWrapper>> GetMinutebarsFileStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level1Api->GetMinutebarsFileStatus");
            }


            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetMinutebarsFileStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/level1/files/minute-bars/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMinutebarsFileStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getminutebarsfilestatusResponse = new GetMinutebarsFileStatusResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetMinutebarsFileStatusResponseWrapper>(localVarResponse.StatusCode, getminutebarsfilestatusResponse);
        }

        /// <summary>
        /// Returns the Minute bars data in files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>Level1Api.GetMinutebarsFilesResponseWrapper</returns>
        public Level1Api.GetMinutebarsFilesResponseWrapper GetMinutebarsFiles(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetMinutebarsFilesWithHttpInfo(id, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Minute bars data in files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>ApiResponse of GetFilesMinuteResponse</returns>
        public ApiResponse<Level1Api.GetMinutebarsFilesResponseWrapper> GetMinutebarsFilesWithHttpInfo(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level1Api->GetMinutebarsFiles");
            }

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetMinutebarsFilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/level1/files/minute-bars/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMinutebarsFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getminutebarsfilesResponse = new GetMinutebarsFilesResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetMinutebarsFilesResponseWrapper>(localVarResponse.StatusCode, getminutebarsfilesResponse);
        }

        /// <summary>
        /// Returns the Minute bars data in files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFilesMinuteResponse</returns>
        public async System.Threading.Tasks.Task<Level1Api.GetMinutebarsFilesResponseWrapper>GetMinutebarsFilesAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetMinutebarsFilesWithHttpInfoAsync(id, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Minute bars data in files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFilesMinuteResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Level1Api.GetMinutebarsFilesResponseWrapper>> GetMinutebarsFilesWithHttpInfoAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level1Api->GetMinutebarsFiles");
            }


            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetMinutebarsFilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/level1/files/minute-bars/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMinutebarsFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getminutebarsfilesResponse = new GetMinutebarsFilesResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetMinutebarsFilesResponseWrapper>(localVarResponse.StatusCode, getminutebarsfilesResponse);
        }

        /// <summary>
        /// Returns the tick-by-tick data in files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>Level1Api.GetTickHistoryLevel1FilesResponseWrapper</returns>
        public Level1Api.GetTickHistoryLevel1FilesResponseWrapper GetTickHistoryLevel1Files(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetTickHistoryLevel1FilesWithHttpInfo(id, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the tick-by-tick data in files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>ApiResponse of GetFilesResponse</returns>
        public ApiResponse<Level1Api.GetTickHistoryLevel1FilesResponseWrapper> GetTickHistoryLevel1FilesWithHttpInfo(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level1Api->GetTickHistoryLevel1Files");
            }

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTickHistoryLevel1FilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/level1/files/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTickHistoryLevel1Files", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var gettickhistorylevel1filesResponse = new GetTickHistoryLevel1FilesResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetTickHistoryLevel1FilesResponseWrapper>(localVarResponse.StatusCode, gettickhistorylevel1filesResponse);
        }

        /// <summary>
        /// Returns the tick-by-tick data in files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFilesResponse</returns>
        public async System.Threading.Tasks.Task<Level1Api.GetTickHistoryLevel1FilesResponseWrapper>GetTickHistoryLevel1FilesAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTickHistoryLevel1FilesWithHttpInfoAsync(id, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the tick-by-tick data in files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFilesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Level1Api.GetTickHistoryLevel1FilesResponseWrapper>> GetTickHistoryLevel1FilesWithHttpInfoAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level1Api->GetTickHistoryLevel1Files");
            }


            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTickHistoryLevel1FilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/level1/files/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTickHistoryLevel1Files", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var gettickhistorylevel1filesResponse = new GetTickHistoryLevel1FilesResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetTickHistoryLevel1FilesResponseWrapper>(localVarResponse.StatusCode, gettickhistorylevel1filesResponse);
        }

        /// <summary>
        /// Requests the creation of Minute bars file 1-minute bars available from 20120101 to previous day. Per request able to fetch upto 6 months of data.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minRequest"></param>
        /// <returns>SubmittedResponse</returns>
        public SubmittedResponse RequestMinutebarsFiles(MinRequest minRequest)
        {
            var localVarResponse = RequestMinutebarsFilesWithHttpInfo(minRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests the creation of Minute bars file 1-minute bars available from 20120101 to previous day. Per request able to fetch upto 6 months of data.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minRequest"></param>
        /// <returns>ApiResponse of SubmittedResponse</returns>
        public ApiResponse<SubmittedResponse> RequestMinutebarsFilesWithHttpInfo(MinRequest minRequest)
        {
            // verify the required parameter 'minRequest' is set
            if (minRequest == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'minRequest' when calling Level1Api->RequestMinutebarsFiles");
            }

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = minRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = RequestMinutebarsFilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SubmittedResponse>("/level1/files/minute-bars/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestMinutebarsFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Requests the creation of Minute bars file 1-minute bars available from 20120101 to previous day. Per request able to fetch upto 6 months of data.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmittedResponse</returns>
        public async System.Threading.Tasks.Task<SubmittedResponse>RequestMinutebarsFilesAsync(MinRequest minRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await RequestMinutebarsFilesWithHttpInfoAsync(minRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests the creation of Minute bars file 1-minute bars available from 20120101 to previous day. Per request able to fetch upto 6 months of data.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmittedResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SubmittedResponse>> RequestMinutebarsFilesWithHttpInfoAsync(MinRequest minRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'minRequest' is set
            if (minRequest == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'minRequest' when calling Level1Api->RequestMinutebarsFiles");
            }


            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = minRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = RequestMinutebarsFilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubmittedResponse>("/level1/files/minute-bars/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestMinutebarsFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the coverage for the requested ticker/isin along with other response fields for Level1 data. Returns coverage for specified tickers for Level1 Data
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">&lt;P&gt; The requested list of one or more tickers.&lt;/p&gt;   The &#x60;tickers&#x60; and &#x60;isins&#x60;  parameters provide two different ways to specify the identifiers for data retrieved. Please enter either the tickers or isins parameter.   &lt;P&gt; Maximum 10 tickers per request&lt;/p&gt;      (optional)</param>
        /// <param name="factsetExchangeCode">&lt;p&gt;This parameter is used to filter the results based on the FactSet specific regional or composite exchange code.&lt;/p&gt; **NOTE**:Does not support multiple factsetExchangeCodes (optional)</param>
        /// <param name="isins">&lt;P&gt; Specifies the ISIN of the record. &lt;/p&gt;    Please enter either the &#x60;tickers&#x60; or &#x60;isins&#x60; parameter.     &lt;P&gt; Maximum 10 ISINs per request.&lt;/p&gt;       (optional)</param>
        /// <returns>CoverageResponse</returns>
        public CoverageResponse RequestTickHistoryCoverage(List<string> tickers = default(List<string>), string factsetExchangeCode = default(string), List<string> isins = default(List<string>))
        {
            var localVarResponse = RequestTickHistoryCoverageWithHttpInfo(tickers, factsetExchangeCode, isins);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the coverage for the requested ticker/isin along with other response fields for Level1 data. Returns coverage for specified tickers for Level1 Data
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">&lt;P&gt; The requested list of one or more tickers.&lt;/p&gt;   The &#x60;tickers&#x60; and &#x60;isins&#x60;  parameters provide two different ways to specify the identifiers for data retrieved. Please enter either the tickers or isins parameter.   &lt;P&gt; Maximum 10 tickers per request&lt;/p&gt;      (optional)</param>
        /// <param name="factsetExchangeCode">&lt;p&gt;This parameter is used to filter the results based on the FactSet specific regional or composite exchange code.&lt;/p&gt; **NOTE**:Does not support multiple factsetExchangeCodes (optional)</param>
        /// <param name="isins">&lt;P&gt; Specifies the ISIN of the record. &lt;/p&gt;    Please enter either the &#x60;tickers&#x60; or &#x60;isins&#x60; parameter.     &lt;P&gt; Maximum 10 ISINs per request.&lt;/p&gt;       (optional)</param>
        /// <returns>ApiResponse of CoverageResponse</returns>
        public ApiResponse<CoverageResponse> RequestTickHistoryCoverageWithHttpInfo(List<string> tickers = default(List<string>), string factsetExchangeCode = default(string), List<string> isins = default(List<string>))
        {
            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tickers != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("csv", "tickers", tickers));
            }
            if (factsetExchangeCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "factsetExchangeCode", factsetExchangeCode));
            }
            if (isins != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("csv", "isins", isins));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = RequestTickHistoryCoverageResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CoverageResponse>("/level1/coverage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestTickHistoryCoverage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the coverage for the requested ticker/isin along with other response fields for Level1 data. Returns coverage for specified tickers for Level1 Data
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">&lt;P&gt; The requested list of one or more tickers.&lt;/p&gt;   The &#x60;tickers&#x60; and &#x60;isins&#x60;  parameters provide two different ways to specify the identifiers for data retrieved. Please enter either the tickers or isins parameter.   &lt;P&gt; Maximum 10 tickers per request&lt;/p&gt;      (optional)</param>
        /// <param name="factsetExchangeCode">&lt;p&gt;This parameter is used to filter the results based on the FactSet specific regional or composite exchange code.&lt;/p&gt; **NOTE**:Does not support multiple factsetExchangeCodes (optional)</param>
        /// <param name="isins">&lt;P&gt; Specifies the ISIN of the record. &lt;/p&gt;    Please enter either the &#x60;tickers&#x60; or &#x60;isins&#x60; parameter.     &lt;P&gt; Maximum 10 ISINs per request.&lt;/p&gt;       (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoverageResponse</returns>
        public async System.Threading.Tasks.Task<CoverageResponse>RequestTickHistoryCoverageAsync(List<string> tickers = default(List<string>), string factsetExchangeCode = default(string), List<string> isins = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await RequestTickHistoryCoverageWithHttpInfoAsync(tickers, factsetExchangeCode, isins, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the coverage for the requested ticker/isin along with other response fields for Level1 data. Returns coverage for specified tickers for Level1 Data
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tickers">&lt;P&gt; The requested list of one or more tickers.&lt;/p&gt;   The &#x60;tickers&#x60; and &#x60;isins&#x60;  parameters provide two different ways to specify the identifiers for data retrieved. Please enter either the tickers or isins parameter.   &lt;P&gt; Maximum 10 tickers per request&lt;/p&gt;      (optional)</param>
        /// <param name="factsetExchangeCode">&lt;p&gt;This parameter is used to filter the results based on the FactSet specific regional or composite exchange code.&lt;/p&gt; **NOTE**:Does not support multiple factsetExchangeCodes (optional)</param>
        /// <param name="isins">&lt;P&gt; Specifies the ISIN of the record. &lt;/p&gt;    Please enter either the &#x60;tickers&#x60; or &#x60;isins&#x60; parameter.     &lt;P&gt; Maximum 10 ISINs per request.&lt;/p&gt;       (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoverageResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CoverageResponse>> RequestTickHistoryCoverageWithHttpInfoAsync(List<string> tickers = default(List<string>), string factsetExchangeCode = default(string), List<string> isins = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tickers != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("csv", "tickers", tickers));
            }
            if (factsetExchangeCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "factsetExchangeCode", factsetExchangeCode));
            }
            if (isins != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("csv", "isins", isins));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = RequestTickHistoryCoverageResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CoverageResponse>("/level1/coverage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestTickHistoryCoverage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests the creation of tick-by-tick file Data available from 20120101 to previous day.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leveloneRequest"></param>
        /// <returns>SubmittedResponse</returns>
        public SubmittedResponse RequestTickHistoryLevel1Files(LeveloneRequest leveloneRequest)
        {
            var localVarResponse = RequestTickHistoryLevel1FilesWithHttpInfo(leveloneRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests the creation of tick-by-tick file Data available from 20120101 to previous day.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leveloneRequest"></param>
        /// <returns>ApiResponse of SubmittedResponse</returns>
        public ApiResponse<SubmittedResponse> RequestTickHistoryLevel1FilesWithHttpInfo(LeveloneRequest leveloneRequest)
        {
            // verify the required parameter 'leveloneRequest' is set
            if (leveloneRequest == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'leveloneRequest' when calling Level1Api->RequestTickHistoryLevel1Files");
            }

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = leveloneRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = RequestTickHistoryLevel1FilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SubmittedResponse>("/level1/files/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestTickHistoryLevel1Files", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Requests the creation of tick-by-tick file Data available from 20120101 to previous day.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leveloneRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmittedResponse</returns>
        public async System.Threading.Tasks.Task<SubmittedResponse>RequestTickHistoryLevel1FilesAsync(LeveloneRequest leveloneRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await RequestTickHistoryLevel1FilesWithHttpInfoAsync(leveloneRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests the creation of tick-by-tick file Data available from 20120101 to previous day.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leveloneRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmittedResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SubmittedResponse>> RequestTickHistoryLevel1FilesWithHttpInfoAsync(LeveloneRequest leveloneRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leveloneRequest' is set
            if (leveloneRequest == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'leveloneRequest' when calling Level1Api->RequestTickHistoryLevel1Files");
            }


            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = leveloneRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = RequestTickHistoryLevel1FilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubmittedResponse>("/level1/files/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestTickHistoryLevel1Files", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
