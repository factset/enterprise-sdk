/*
 * PA Engine API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.16.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.PAEngine.Client.OpenAPIDateConverter;

namespace FactSet.SDK.PAEngine.Model
{
    /// <summary>
    /// Metadata
    /// </summary>
    [DataContract(Name = "Metadata")]
    public partial class Metadata : IEquatable<Metadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Metadata" /> class.
        /// </summary>
        /// <param name="tileName">PA Tile name associated with the component.</param>
        /// <param name="portfolioDescription">Portfolio name used in generating commentary.</param>
        /// <param name="benchmarkDescription">Benchmark name used in generating commentary.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="frequency">Date frequency.</param>
        public Metadata(string tileName = default(string), string portfolioDescription = default(string), string benchmarkDescription = default(string), PACommentaryDate startDate = default(PACommentaryDate), PACommentaryDate endDate = default(PACommentaryDate), string frequency = default(string))
        {
            this.TileName = tileName;
            this.PortfolioDescription = portfolioDescription;
            this.BenchmarkDescription = benchmarkDescription;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Frequency = frequency;
        }

        /// <summary>
        /// PA Tile name associated with the component
        /// </summary>
        /// <value>PA Tile name associated with the component</value>
        [DataMember(Name = "tileName", EmitDefaultValue = true)]
        public string TileName { get; set; }

        /// <summary>
        /// Portfolio name used in generating commentary
        /// </summary>
        /// <value>Portfolio name used in generating commentary</value>
        [DataMember(Name = "portfolioDescription", EmitDefaultValue = true)]
        public string PortfolioDescription { get; set; }

        /// <summary>
        /// Benchmark name used in generating commentary
        /// </summary>
        /// <value>Benchmark name used in generating commentary</value>
        [DataMember(Name = "benchmarkDescription", EmitDefaultValue = true)]
        public string BenchmarkDescription { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public PACommentaryDate StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public PACommentaryDate EndDate { get; set; }

        /// <summary>
        /// Date frequency
        /// </summary>
        /// <value>Date frequency</value>
        [DataMember(Name = "frequency", EmitDefaultValue = true)]
        public string Frequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Metadata {\n");
            sb.Append("  TileName: ").Append(TileName).Append("\n");
            sb.Append("  PortfolioDescription: ").Append(PortfolioDescription).Append("\n");
            sb.Append("  BenchmarkDescription: ").Append(BenchmarkDescription).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Metadata);
        }

        /// <summary>
        /// Returns true if Metadata instances are equal
        /// </summary>
        /// <param name="input">Instance of Metadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TileName == input.TileName ||
                    (this.TileName != null &&
                    this.TileName.Equals(input.TileName))
                ) && 
                (
                    this.PortfolioDescription == input.PortfolioDescription ||
                    (this.PortfolioDescription != null &&
                    this.PortfolioDescription.Equals(input.PortfolioDescription))
                ) && 
                (
                    this.BenchmarkDescription == input.BenchmarkDescription ||
                    (this.BenchmarkDescription != null &&
                    this.BenchmarkDescription.Equals(input.BenchmarkDescription))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TileName != null)
                {
                    hashCode = (hashCode * 59) + this.TileName.GetHashCode();
                }
                if (this.PortfolioDescription != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioDescription.GetHashCode();
                }
                if (this.BenchmarkDescription != null)
                {
                    hashCode = (hashCode * 59) + this.BenchmarkDescription.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.Frequency != null)
                {
                    hashCode = (hashCode * 59) + this.Frequency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
