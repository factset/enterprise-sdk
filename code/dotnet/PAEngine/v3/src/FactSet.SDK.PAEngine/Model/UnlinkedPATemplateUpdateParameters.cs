/*
 * PA Engine API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.15.6
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.PAEngine.Client.OpenAPIDateConverter;

namespace FactSet.SDK.PAEngine.Model
{
    /// <summary>
    /// UnlinkedPATemplateUpdateParameters
    /// </summary>
    [DataContract(Name = "UnlinkedPATemplateUpdateParameters")]
    public partial class UnlinkedPATemplateUpdateParameters : IEquatable<UnlinkedPATemplateUpdateParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnlinkedPATemplateUpdateParameters" /> class.
        /// </summary>
        /// <param name="description">Template description.</param>
        /// <param name="accounts">List of accounts.</param>
        /// <param name="benchmarks">List of benchmarks.</param>
        /// <param name="columns">List of columns for the PA calculation.</param>
        /// <param name="dates">dates.</param>
        /// <param name="groups">List of groupings for the PA calculation.</param>
        /// <param name="datasources">datasources.</param>
        /// <param name="currencyisocode">Currency ISO code for calculation..</param>
        /// <param name="componentdetail">PA storage type. It can be GROUPS or GROUPSALL or TOTALS or SECURITIES..</param>
        /// <param name="content">content.</param>
        public UnlinkedPATemplateUpdateParameters(string description = default(string), List<PAIdentifier> accounts = default(List<PAIdentifier>), List<PAIdentifier> benchmarks = default(List<PAIdentifier>), List<PACalculationColumn> columns = default(List<PACalculationColumn>), PADateParameters dates = default(PADateParameters), List<PACalculationGroup> groups = default(List<PACalculationGroup>), PACalculationDataSources datasources = default(PACalculationDataSources), string currencyisocode = default(string), string componentdetail = default(string), TemplateContentTypes content = default(TemplateContentTypes))
        {
            this.Description = description;
            this.Accounts = accounts;
            this.Benchmarks = benchmarks;
            this.Columns = columns;
            this.Dates = dates;
            this.Groups = groups;
            this.Datasources = datasources;
            this.Currencyisocode = currencyisocode;
            this.Componentdetail = componentdetail;
            this.Content = content;
        }

        /// <summary>
        /// Template description
        /// </summary>
        /// <value>Template description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// List of accounts
        /// </summary>
        /// <value>List of accounts</value>
        [DataMember(Name = "accounts", EmitDefaultValue = true)]
        public List<PAIdentifier> Accounts { get; set; }

        /// <summary>
        /// List of benchmarks
        /// </summary>
        /// <value>List of benchmarks</value>
        [DataMember(Name = "benchmarks", EmitDefaultValue = true)]
        public List<PAIdentifier> Benchmarks { get; set; }

        /// <summary>
        /// List of columns for the PA calculation
        /// </summary>
        /// <value>List of columns for the PA calculation</value>
        [DataMember(Name = "columns", EmitDefaultValue = true)]
        public List<PACalculationColumn> Columns { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public PADateParameters Dates { get; set; }

        /// <summary>
        /// List of groupings for the PA calculation
        /// </summary>
        /// <value>List of groupings for the PA calculation</value>
        [DataMember(Name = "groups", EmitDefaultValue = true)]
        public List<PACalculationGroup> Groups { get; set; }

        /// <summary>
        /// Gets or Sets Datasources
        /// </summary>
        [DataMember(Name = "datasources", EmitDefaultValue = false)]
        public PACalculationDataSources Datasources { get; set; }

        /// <summary>
        /// Currency ISO code for calculation.
        /// </summary>
        /// <value>Currency ISO code for calculation.</value>
        [DataMember(Name = "currencyisocode", EmitDefaultValue = true)]
        public string Currencyisocode { get; set; }

        /// <summary>
        /// PA storage type. It can be GROUPS or GROUPSALL or TOTALS or SECURITIES.
        /// </summary>
        /// <value>PA storage type. It can be GROUPS or GROUPSALL or TOTALS or SECURITIES.</value>
        [DataMember(Name = "componentdetail", EmitDefaultValue = true)]
        public string Componentdetail { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public TemplateContentTypes Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnlinkedPATemplateUpdateParameters {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  Benchmarks: ").Append(Benchmarks).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Datasources: ").Append(Datasources).Append("\n");
            sb.Append("  Currencyisocode: ").Append(Currencyisocode).Append("\n");
            sb.Append("  Componentdetail: ").Append(Componentdetail).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnlinkedPATemplateUpdateParameters);
        }

        /// <summary>
        /// Returns true if UnlinkedPATemplateUpdateParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of UnlinkedPATemplateUpdateParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnlinkedPATemplateUpdateParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                ) && 
                (
                    this.Benchmarks == input.Benchmarks ||
                    this.Benchmarks != null &&
                    input.Benchmarks != null &&
                    this.Benchmarks.SequenceEqual(input.Benchmarks)
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    input.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.Dates == input.Dates ||
                    (this.Dates != null &&
                    this.Dates.Equals(input.Dates))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.Datasources == input.Datasources ||
                    (this.Datasources != null &&
                    this.Datasources.Equals(input.Datasources))
                ) && 
                (
                    this.Currencyisocode == input.Currencyisocode ||
                    (this.Currencyisocode != null &&
                    this.Currencyisocode.Equals(input.Currencyisocode))
                ) && 
                (
                    this.Componentdetail == input.Componentdetail ||
                    (this.Componentdetail != null &&
                    this.Componentdetail.Equals(input.Componentdetail))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Accounts != null)
                {
                    hashCode = (hashCode * 59) + this.Accounts.GetHashCode();
                }
                if (this.Benchmarks != null)
                {
                    hashCode = (hashCode * 59) + this.Benchmarks.GetHashCode();
                }
                if (this.Columns != null)
                {
                    hashCode = (hashCode * 59) + this.Columns.GetHashCode();
                }
                if (this.Dates != null)
                {
                    hashCode = (hashCode * 59) + this.Dates.GetHashCode();
                }
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                if (this.Datasources != null)
                {
                    hashCode = (hashCode * 59) + this.Datasources.GetHashCode();
                }
                if (this.Currencyisocode != null)
                {
                    hashCode = (hashCode * 59) + this.Currencyisocode.GetHashCode();
                }
                if (this.Componentdetail != null)
                {
                    hashCode = (hashCode * 59) + this.Componentdetail.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
