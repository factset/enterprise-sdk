/*
 * PA Engine API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.16.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.PAEngine.Client.OpenAPIDateConverter;

namespace FactSet.SDK.PAEngine.Model
{
    /// <summary>
    /// PACommentary
    /// </summary>
    [DataContract(Name = "PACommentary")]
    public partial class PACommentary : IEquatable<PACommentary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PACommentary" /> class.
        /// </summary>
        /// <param name="commentaryId">Generated commentary Id.</param>
        /// <param name="sections">Commentary sections.</param>
        /// <param name="disclaimer">Disclaimer.</param>
        public PACommentary(string commentaryId = default(string), List<Section> sections = default(List<Section>), string disclaimer = default(string))
        {
            this.CommentaryId = commentaryId;
            this.Sections = sections;
            this.Disclaimer = disclaimer;
        }

        /// <summary>
        /// Generated commentary Id
        /// </summary>
        /// <value>Generated commentary Id</value>
        [DataMember(Name = "commentaryId", EmitDefaultValue = true)]
        public string CommentaryId { get; set; }

        /// <summary>
        /// Commentary sections
        /// </summary>
        /// <value>Commentary sections</value>
        [DataMember(Name = "sections", EmitDefaultValue = true)]
        public List<Section> Sections { get; set; }

        /// <summary>
        /// Disclaimer
        /// </summary>
        /// <value>Disclaimer</value>
        [DataMember(Name = "disclaimer", EmitDefaultValue = true)]
        public string Disclaimer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PACommentary {\n");
            sb.Append("  CommentaryId: ").Append(CommentaryId).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  Disclaimer: ").Append(Disclaimer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PACommentary);
        }

        /// <summary>
        /// Returns true if PACommentary instances are equal
        /// </summary>
        /// <param name="input">Instance of PACommentary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PACommentary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CommentaryId == input.CommentaryId ||
                    (this.CommentaryId != null &&
                    this.CommentaryId.Equals(input.CommentaryId))
                ) && 
                (
                    this.Sections == input.Sections ||
                    this.Sections != null &&
                    input.Sections != null &&
                    this.Sections.SequenceEqual(input.Sections)
                ) && 
                (
                    this.Disclaimer == input.Disclaimer ||
                    (this.Disclaimer != null &&
                    this.Disclaimer.Equals(input.Disclaimer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommentaryId != null)
                {
                    hashCode = (hashCode * 59) + this.CommentaryId.GetHashCode();
                }
                if (this.Sections != null)
                {
                    hashCode = (hashCode * 59) + this.Sections.GetHashCode();
                }
                if (this.Disclaimer != null)
                {
                    hashCode = (hashCode * 59) + this.Disclaimer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
