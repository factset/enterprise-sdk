/*
 * FactSet Private Markets API
 *
 * FactSet Private Markets API encompasses Private Company Financials data to start. Private Company firmographics can be found in the FactSet Entity API. The future plans of this service will include additional Private Markets data, such as Private Equity/Venture Capital.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetPrivateMarkets.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetPrivateMarkets.Model
{
    /// <summary>
    /// Field
    /// </summary>
    [DataContract(Name = "field")]
    public partial class Field : IEquatable<Field>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Field" /> class.
        /// </summary>
        /// <param name="field">Data item to be used as &#x60;fields&#x60; input in &#x60;/factset-private-markets/v#/&#x60; endpoint..</param>
        /// <param name="name">Plain text name of the field..</param>
        /// <param name="category">Corresponding endpoint to input field item. For example, fields returning the category &#39;FINANCIALS&#39; should be used in the /financials endpoint. The same follows data items falling in the category for NON_PERIODIC, which would be used in the /non-periodic endpoint..</param>
        /// <param name="factor">The factor for the field (e.g. 1000 &#x3D; thousands)..</param>
        /// <param name="sdfName">The name of the data item as it appears in the Standard Data Feed (SDF). A null value represents items available only in API..</param>
        public Field(string field = default(string), string name = default(string), string category = default(string), int? factor = default(int?), string sdfName = default(string))
        {
            this._Field = field;
            this.Name = name;
            this.Category = category;
            this.Factor = factor;
            this.SdfName = sdfName;
        }

        /// <summary>
        /// Data item to be used as &#x60;fields&#x60; input in &#x60;/factset-private-markets/v#/&#x60; endpoint.
        /// </summary>
        /// <value>Data item to be used as &#x60;fields&#x60; input in &#x60;/factset-private-markets/v#/&#x60; endpoint.</value>
        [DataMember(Name = "field", EmitDefaultValue = true)]
        public string _Field { get; set; }

        /// <summary>
        /// Plain text name of the field.
        /// </summary>
        /// <value>Plain text name of the field.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Corresponding endpoint to input field item. For example, fields returning the category &#39;FINANCIALS&#39; should be used in the /financials endpoint. The same follows data items falling in the category for NON_PERIODIC, which would be used in the /non-periodic endpoint.
        /// </summary>
        /// <value>Corresponding endpoint to input field item. For example, fields returning the category &#39;FINANCIALS&#39; should be used in the /financials endpoint. The same follows data items falling in the category for NON_PERIODIC, which would be used in the /non-periodic endpoint.</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// The factor for the field (e.g. 1000 &#x3D; thousands).
        /// </summary>
        /// <value>The factor for the field (e.g. 1000 &#x3D; thousands).</value>
        [DataMember(Name = "factor", EmitDefaultValue = true)]
        public int? Factor { get; set; }

        /// <summary>
        /// The name of the data item as it appears in the Standard Data Feed (SDF). A null value represents items available only in API.
        /// </summary>
        /// <value>The name of the data item as it appears in the Standard Data Feed (SDF). A null value represents items available only in API.</value>
        [DataMember(Name = "sdfName", EmitDefaultValue = true)]
        public string SdfName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Field {\n");
            sb.Append("  _Field: ").Append(_Field).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Factor: ").Append(Factor).Append("\n");
            sb.Append("  SdfName: ").Append(SdfName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Field);
        }

        /// <summary>
        /// Returns true if Field instances are equal
        /// </summary>
        /// <param name="input">Instance of Field to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Field input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Field == input._Field ||
                    (this._Field != null &&
                    this._Field.Equals(input._Field))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Factor == input.Factor ||
                    (this.Factor != null &&
                    this.Factor.Equals(input.Factor))
                ) && 
                (
                    this.SdfName == input.SdfName ||
                    (this.SdfName != null &&
                    this.SdfName.Equals(input.SdfName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Field != null)
                {
                    hashCode = (hashCode * 59) + this._Field.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Factor != null)
                {
                    hashCode = (hashCode * 59) + this.Factor.GetHashCode();
                }
                if (this.SdfName != null)
                {
                    hashCode = (hashCode * 59) + this.SdfName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
