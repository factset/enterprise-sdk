/*
 * FactSet Private Markets API
 *
 * FactSet Private Markets API encompasses Private Company Financials data to start. Private Company firmographics can be found in the FactSet Entity API. The future plans of this service will include additional Private Markets data, such as Private Equity/Venture Capital.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetPrivateMarkets.Client;
using FactSet.SDK.FactSetPrivateMarkets.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetPrivateMarkets.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinancialsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns Private Company Financials for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns Private Company Financials Information. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Financials Fields. </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <returns>FinancialsResponse</returns>
        FinancialsResponse GetFinancials(List<string> ids, List<string> fields, string startDate, string endDate = default(string));

        /// <summary>
        /// Returns Private Company Financials for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns Private Company Financials Information. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Financials Fields. </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <returns>ApiResponse of FinancialsResponse</returns>
        ApiResponse<FinancialsResponse> GetFinancialsWithHttpInfo(List<string> ids, List<string> fields, string startDate, string endDate = default(string));
        /// <summary>
        /// Returns Private Company Financials for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns a private markets financials object for the requested ids. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialsRequest">Request Body to request a list of Private Market financials objects.</param>
        /// <returns>FinancialsResponse</returns>
        FinancialsResponse GetFinancialsForList(FinancialsRequest financialsRequest);

        /// <summary>
        /// Returns Private Company Financials for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns a private markets financials object for the requested ids. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialsRequest">Request Body to request a list of Private Market financials objects.</param>
        /// <returns>ApiResponse of FinancialsResponse</returns>
        ApiResponse<FinancialsResponse> GetFinancialsForListWithHttpInfo(FinancialsRequest financialsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinancialsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns Private Company Financials for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns Private Company Financials Information. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Financials Fields. </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinancialsResponse</returns>
        System.Threading.Tasks.Task<FinancialsResponse> GetFinancialsAsync(List<string> ids, List<string> fields, string startDate, string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns Private Company Financials for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns Private Company Financials Information. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Financials Fields. </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinancialsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinancialsResponse>> GetFinancialsWithHttpInfoAsync(List<string> ids, List<string> fields, string startDate, string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns Private Company Financials for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns a private markets financials object for the requested ids. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialsRequest">Request Body to request a list of Private Market financials objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinancialsResponse</returns>
        System.Threading.Tasks.Task<FinancialsResponse> GetFinancialsForListAsync(FinancialsRequest financialsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns Private Company Financials for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns a private markets financials object for the requested ids. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialsRequest">Request Body to request a list of Private Market financials objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinancialsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinancialsResponse>> GetFinancialsForListWithHttpInfoAsync(FinancialsRequest financialsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinancialsApi : IFinancialsApiSync, IFinancialsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FinancialsApi : IFinancialsApi
    {
        private FactSet.SDK.FactSetPrivateMarkets.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFinancialsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FinancialsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFinancialsForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FinancialsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinancialsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinancialsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetPrivateMarkets.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetPrivateMarkets.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetPrivateMarkets.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetPrivateMarkets.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetPrivateMarkets.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetPrivateMarkets.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FinancialsApi(FactSet.SDK.FactSetPrivateMarkets.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetPrivateMarkets.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetPrivateMarkets.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetPrivateMarkets.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetPrivateMarkets.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetPrivateMarkets.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FinancialsApi(FactSet.SDK.FactSetPrivateMarkets.Client.ISynchronousClient client, FactSet.SDK.FactSetPrivateMarkets.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetPrivateMarkets.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetPrivateMarkets.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetPrivateMarkets.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetPrivateMarkets.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetPrivateMarkets.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetPrivateMarkets.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns Private Company Financials for a list of ids. Returns Private Company Financials Information. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Financials Fields. </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <returns>FinancialsResponse</returns>
        public FinancialsResponse GetFinancials(List<string> ids, List<string> fields, string startDate, string endDate = default(string))
        {
            var localVarResponse = GetFinancialsWithHttpInfo(ids, fields, startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Private Company Financials for a list of ids. Returns Private Company Financials Information. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Financials Fields. </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <returns>ApiResponse of FinancialsResponse</returns>
        public ApiResponse<FinancialsResponse> GetFinancialsWithHttpInfo(List<string> ids, List<string> fields, string startDate, string endDate = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'ids' when calling FinancialsApi->GetFinancials");
            }

            // verify the required parameter 'fields' is set
            if (fields == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'fields' when calling FinancialsApi->GetFinancials");
            }

            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'startDate' when calling FinancialsApi->GetFinancials");
            }

            FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("csv", "fields", fields));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFinancialsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FinancialsResponse>("/factset-private-markets/v1/financials", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinancials", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns Private Company Financials for a list of ids. Returns Private Company Financials Information. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Financials Fields. </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinancialsResponse</returns>
        public async System.Threading.Tasks.Task<FinancialsResponse>GetFinancialsAsync(List<string> ids, List<string> fields, string startDate, string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFinancialsWithHttpInfoAsync(ids, fields, startDate, endDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Private Company Financials for a list of ids. Returns Private Company Financials Information. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Financials Fields. </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinancialsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FinancialsResponse>> GetFinancialsWithHttpInfoAsync(List<string> ids, List<string> fields, string startDate, string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'ids' when calling FinancialsApi->GetFinancials");
            }

            // verify the required parameter 'fields' is set
            if (fields == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'fields' when calling FinancialsApi->GetFinancials");
            }

            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'startDate' when calling FinancialsApi->GetFinancials");
            }


            FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("csv", "fields", fields));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFinancialsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FinancialsResponse>("/factset-private-markets/v1/financials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinancials", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns Private Company Financials for a list of ids. Returns a private markets financials object for the requested ids. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialsRequest">Request Body to request a list of Private Market financials objects.</param>
        /// <returns>FinancialsResponse</returns>
        public FinancialsResponse GetFinancialsForList(FinancialsRequest financialsRequest)
        {
            var localVarResponse = GetFinancialsForListWithHttpInfo(financialsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Private Company Financials for a list of ids. Returns a private markets financials object for the requested ids. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialsRequest">Request Body to request a list of Private Market financials objects.</param>
        /// <returns>ApiResponse of FinancialsResponse</returns>
        public ApiResponse<FinancialsResponse> GetFinancialsForListWithHttpInfo(FinancialsRequest financialsRequest)
        {
            // verify the required parameter 'financialsRequest' is set
            if (financialsRequest == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'financialsRequest' when calling FinancialsApi->GetFinancialsForList");
            }

            FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = financialsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFinancialsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            FinancialsResponse>("/factset-private-markets/v1/financials", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinancialsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns Private Company Financials for a list of ids. Returns a private markets financials object for the requested ids. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialsRequest">Request Body to request a list of Private Market financials objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinancialsResponse</returns>
        public async System.Threading.Tasks.Task<FinancialsResponse>GetFinancialsForListAsync(FinancialsRequest financialsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFinancialsForListWithHttpInfoAsync(financialsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Private Company Financials for a list of ids. Returns a private markets financials object for the requested ids. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialsRequest">Request Body to request a list of Private Market financials objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinancialsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FinancialsResponse>> GetFinancialsForListWithHttpInfoAsync(FinancialsRequest financialsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'financialsRequest' is set
            if (financialsRequest == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'financialsRequest' when calling FinancialsApi->GetFinancialsForList");
            }


            FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = financialsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFinancialsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FinancialsResponse>("/factset-private-markets/v1/financials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinancialsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
