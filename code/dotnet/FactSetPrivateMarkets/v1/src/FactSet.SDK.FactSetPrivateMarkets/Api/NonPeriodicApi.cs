/*
 * FactSet Private Markets API
 *
 * FactSet Private Markets API encompasses Private Company Financials data to start. Private Company firmographics can be found in the FactSet Entity API. The future plans of this service will include additional Private Markets data, such as Private Equity/Venture Capital.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetPrivateMarkets.Client;
using FactSet.SDK.FactSetPrivateMarkets.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetPrivateMarkets.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INonPeriodicApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns Private Company reference data for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns Private Company reference information. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Non-Periodic Fields. </param>
        /// <returns>NonPeriodicResponse</returns>
        NonPeriodicResponse GetNonPeriodic(List<string> ids, List<string> fields);

        /// <summary>
        /// Returns Private Company reference data for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns Private Company reference information. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Non-Periodic Fields. </param>
        /// <returns>ApiResponse of NonPeriodicResponse</returns>
        ApiResponse<NonPeriodicResponse> GetNonPeriodicWithHttpInfo(List<string> ids, List<string> fields);
        /// <summary>
        /// Returns Private Company reference data for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns a private markets reference object for the requested ids. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonPeriodicRequest">Request Body to request a list of Private Market non-periodic objects.</param>
        /// <returns>NonPeriodicResponse</returns>
        NonPeriodicResponse GetNonPeriodicForList(NonPeriodicRequest nonPeriodicRequest);

        /// <summary>
        /// Returns Private Company reference data for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns a private markets reference object for the requested ids. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonPeriodicRequest">Request Body to request a list of Private Market non-periodic objects.</param>
        /// <returns>ApiResponse of NonPeriodicResponse</returns>
        ApiResponse<NonPeriodicResponse> GetNonPeriodicForListWithHttpInfo(NonPeriodicRequest nonPeriodicRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INonPeriodicApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns Private Company reference data for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns Private Company reference information. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Non-Periodic Fields. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NonPeriodicResponse</returns>
        System.Threading.Tasks.Task<NonPeriodicResponse> GetNonPeriodicAsync(List<string> ids, List<string> fields, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns Private Company reference data for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns Private Company reference information. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Non-Periodic Fields. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NonPeriodicResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonPeriodicResponse>> GetNonPeriodicWithHttpInfoAsync(List<string> ids, List<string> fields, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns Private Company reference data for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns a private markets reference object for the requested ids. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonPeriodicRequest">Request Body to request a list of Private Market non-periodic objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NonPeriodicResponse</returns>
        System.Threading.Tasks.Task<NonPeriodicResponse> GetNonPeriodicForListAsync(NonPeriodicRequest nonPeriodicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns Private Company reference data for a list of ids.
        /// </summary>
        /// <remarks>
        /// Returns a private markets reference object for the requested ids. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonPeriodicRequest">Request Body to request a list of Private Market non-periodic objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NonPeriodicResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonPeriodicResponse>> GetNonPeriodicForListWithHttpInfoAsync(NonPeriodicRequest nonPeriodicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INonPeriodicApi : INonPeriodicApiSync, INonPeriodicApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NonPeriodicApi : INonPeriodicApi
    {
        private FactSet.SDK.FactSetPrivateMarkets.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetNonPeriodicResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NonPeriodicResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNonPeriodicForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NonPeriodicResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="NonPeriodicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NonPeriodicApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NonPeriodicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NonPeriodicApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetPrivateMarkets.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetPrivateMarkets.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetPrivateMarkets.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetPrivateMarkets.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetPrivateMarkets.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetPrivateMarkets.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NonPeriodicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NonPeriodicApi(FactSet.SDK.FactSetPrivateMarkets.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetPrivateMarkets.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetPrivateMarkets.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetPrivateMarkets.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetPrivateMarkets.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetPrivateMarkets.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NonPeriodicApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NonPeriodicApi(FactSet.SDK.FactSetPrivateMarkets.Client.ISynchronousClient client, FactSet.SDK.FactSetPrivateMarkets.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetPrivateMarkets.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetPrivateMarkets.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetPrivateMarkets.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetPrivateMarkets.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetPrivateMarkets.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetPrivateMarkets.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns Private Company reference data for a list of ids. Returns Private Company reference information. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Non-Periodic Fields. </param>
        /// <returns>NonPeriodicResponse</returns>
        public NonPeriodicResponse GetNonPeriodic(List<string> ids, List<string> fields)
        {
            var localVarResponse = GetNonPeriodicWithHttpInfo(ids, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Private Company reference data for a list of ids. Returns Private Company reference information. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Non-Periodic Fields. </param>
        /// <returns>ApiResponse of NonPeriodicResponse</returns>
        public ApiResponse<NonPeriodicResponse> GetNonPeriodicWithHttpInfo(List<string> ids, List<string> fields)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'ids' when calling NonPeriodicApi->GetNonPeriodic");
            }

            // verify the required parameter 'fields' is set
            if (fields == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'fields' when calling NonPeriodicApi->GetNonPeriodic");
            }

            FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("csv", "fields", fields));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNonPeriodicResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NonPeriodicResponse>("/factset-private-markets/v1/non-periodic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNonPeriodic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns Private Company reference data for a list of ids. Returns Private Company reference information. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Non-Periodic Fields. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NonPeriodicResponse</returns>
        public async System.Threading.Tasks.Task<NonPeriodicResponse>GetNonPeriodicAsync(List<string> ids, List<string> fields, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNonPeriodicWithHttpInfoAsync(ids, fields, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Private Company reference data for a list of ids. Returns Private Company reference information. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested FactSet Private Market Entity Identifier in XXXXXX-E format.&lt;p&gt;**Max Ids Limit set to 3000 in a single request**&lt;/p&gt;   *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\&quot;POST\\\&quot; method.&lt;/p&gt;* </param>
        /// <param name="fields">Private Markets Non-Periodic Fields. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NonPeriodicResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NonPeriodicResponse>> GetNonPeriodicWithHttpInfoAsync(List<string> ids, List<string> fields, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'ids' when calling NonPeriodicApi->GetNonPeriodic");
            }

            // verify the required parameter 'fields' is set
            if (fields == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'fields' when calling NonPeriodicApi->GetNonPeriodic");
            }


            FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.ParameterToMultiMap("csv", "fields", fields));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNonPeriodicResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NonPeriodicResponse>("/factset-private-markets/v1/non-periodic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNonPeriodic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns Private Company reference data for a list of ids. Returns a private markets reference object for the requested ids. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonPeriodicRequest">Request Body to request a list of Private Market non-periodic objects.</param>
        /// <returns>NonPeriodicResponse</returns>
        public NonPeriodicResponse GetNonPeriodicForList(NonPeriodicRequest nonPeriodicRequest)
        {
            var localVarResponse = GetNonPeriodicForListWithHttpInfo(nonPeriodicRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Private Company reference data for a list of ids. Returns a private markets reference object for the requested ids. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonPeriodicRequest">Request Body to request a list of Private Market non-periodic objects.</param>
        /// <returns>ApiResponse of NonPeriodicResponse</returns>
        public ApiResponse<NonPeriodicResponse> GetNonPeriodicForListWithHttpInfo(NonPeriodicRequest nonPeriodicRequest)
        {
            // verify the required parameter 'nonPeriodicRequest' is set
            if (nonPeriodicRequest == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'nonPeriodicRequest' when calling NonPeriodicApi->GetNonPeriodicForList");
            }

            FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = nonPeriodicRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNonPeriodicForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            NonPeriodicResponse>("/factset-private-markets/v1/non-periodic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNonPeriodicForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns Private Company reference data for a list of ids. Returns a private markets reference object for the requested ids. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonPeriodicRequest">Request Body to request a list of Private Market non-periodic objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NonPeriodicResponse</returns>
        public async System.Threading.Tasks.Task<NonPeriodicResponse>GetNonPeriodicForListAsync(NonPeriodicRequest nonPeriodicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNonPeriodicForListWithHttpInfoAsync(nonPeriodicRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Private Company reference data for a list of ids. Returns a private markets reference object for the requested ids. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPrivateMarkets.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonPeriodicRequest">Request Body to request a list of Private Market non-periodic objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NonPeriodicResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NonPeriodicResponse>> GetNonPeriodicForListWithHttpInfoAsync(NonPeriodicRequest nonPeriodicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'nonPeriodicRequest' is set
            if (nonPeriodicRequest == null)
            {
                throw new FactSet.SDK.FactSetPrivateMarkets.Client.ApiException(400, "Missing required parameter 'nonPeriodicRequest' when calling NonPeriodicApi->GetNonPeriodicForList");
            }


            FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPrivateMarkets.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = nonPeriodicRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPrivateMarkets.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNonPeriodicForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NonPeriodicResponse>("/factset-private-markets/v1/non-periodic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNonPeriodicForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
