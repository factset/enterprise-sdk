/*
 * FactSet Global Prices API
 *
 * The FactSet Global Prices API provides end of day market pricing content using cloud and microservices technology, encompassing both pricing as well as corporate actions and events data.</p> 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetGlobalPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetGlobalPrices.Model
{
    /// <summary>
    /// Split
    /// </summary>
    [DataContract(Name = "Split")]
    public partial class Split : IEquatable<Split>, IValidatableObject
    {
        /// <summary>
        /// Character code that denotes the type of Event.
        /// </summary>
        /// <value>Character code that denotes the type of Event.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeCodeEnum
        {
            /// <summary>
            /// Enum FSP for value: FSP
            /// </summary>
            [EnumMember(Value = "FSP")]
            FSP = 1,

            /// <summary>
            /// Enum RSP for value: RSP
            /// </summary>
            [EnumMember(Value = "RSP")]
            RSP = 2,

            /// <summary>
            /// Enum SPL for value: SPL
            /// </summary>
            [EnumMember(Value = "SPL")]
            SPL = 3

        }


        /// <summary>
        /// Character code that denotes the type of Event.
        /// </summary>
        /// <value>Character code that denotes the type of Event.</value>
        [DataMember(Name = "eventTypeCode", EmitDefaultValue = false)]
        public EventTypeCodeEnum? EventTypeCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Split" /> class.
        /// </summary>
        /// <param name="fsymId">Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="eventId">FactSet identifier that uniquely identifies the Event..</param>
        /// <param name="eventTypeCode">Character code that denotes the type of Event..</param>
        /// <param name="eventTypeDesc">Corporate Actions Event type description..</param>
        /// <param name="announcementDate">Date Event was announced in YYYY-MM-DD format..</param>
        /// <param name="recordDate">Date of Record for distribution in YYYY-MM-DD format..</param>
        /// <param name="payDate">Date of Payment for distribution in YYYY-MM-DD format..</param>
        /// <param name="effectiveDate">Effective Date or Ex-Date of distribution in YYYY-MM-DD format..</param>
        /// <param name="adjFactor">Factor for adjusting price and shares. A 2-for-1 split returns .50, the number you would multiply the stock price by to adjust for the split. .</param>
        /// <param name="adjFactorCombined">Combined adjustment factor for all distribution events on that day..</param>
        /// <param name="distOldTerm">Component of distribution ratio -  Number of shares held..</param>
        /// <param name="distNewTerm">Component of distribution ratio -  Number of shares received..</param>
        /// <param name="distInstFsymId">Parent Spin-Off for a company.</param>
        /// <param name="shortDesc">Textual description identifying the event..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        public Split(string fsymId = default(string), string eventId = default(string), EventTypeCodeEnum? eventTypeCode = default(EventTypeCodeEnum?), string eventTypeDesc = default(string), string announcementDate = default(string), string recordDate = default(string), string payDate = default(string), string effectiveDate = default(string), double adjFactor = default(double), double adjFactorCombined = default(double), double distOldTerm = default(double), double distNewTerm = default(double), string distInstFsymId = default(string), string shortDesc = default(string), string requestId = default(string))
        {
            this.FsymId = fsymId;
            this.EventId = eventId;
            this.EventTypeCode = eventTypeCode;
            this.EventTypeDesc = eventTypeDesc;
            this.AnnouncementDate = announcementDate;
            this.RecordDate = recordDate;
            this.PayDate = payDate;
            this.EffectiveDate = effectiveDate;
            this.AdjFactor = adjFactor;
            this.AdjFactorCombined = adjFactorCombined;
            this.DistOldTerm = distOldTerm;
            this.DistNewTerm = distNewTerm;
            this.DistInstFsymId = distInstFsymId;
            this.ShortDesc = shortDesc;
            this.RequestId = requestId;
        }

        /// <summary>
        /// Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = false)]
        public string FsymId { get; set; }

        /// <summary>
        /// FactSet identifier that uniquely identifies the Event.
        /// </summary>
        /// <value>FactSet identifier that uniquely identifies the Event.</value>
        [DataMember(Name = "eventId", EmitDefaultValue = false)]
        public string EventId { get; set; }

        /// <summary>
        /// Corporate Actions Event type description.
        /// </summary>
        /// <value>Corporate Actions Event type description.</value>
        [DataMember(Name = "eventTypeDesc", EmitDefaultValue = false)]
        public string EventTypeDesc { get; set; }

        /// <summary>
        /// Date Event was announced in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date Event was announced in YYYY-MM-DD format.</value>
        [DataMember(Name = "announcementDate", EmitDefaultValue = false)]
        public string AnnouncementDate { get; set; }

        /// <summary>
        /// Date of Record for distribution in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date of Record for distribution in YYYY-MM-DD format.</value>
        [DataMember(Name = "recordDate", EmitDefaultValue = false)]
        public string RecordDate { get; set; }

        /// <summary>
        /// Date of Payment for distribution in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date of Payment for distribution in YYYY-MM-DD format.</value>
        [DataMember(Name = "payDate", EmitDefaultValue = false)]
        public string PayDate { get; set; }

        /// <summary>
        /// Effective Date or Ex-Date of distribution in YYYY-MM-DD format.
        /// </summary>
        /// <value>Effective Date or Ex-Date of distribution in YYYY-MM-DD format.</value>
        [DataMember(Name = "effectiveDate", EmitDefaultValue = false)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Factor for adjusting price and shares. A 2-for-1 split returns .50, the number you would multiply the stock price by to adjust for the split. 
        /// </summary>
        /// <value>Factor for adjusting price and shares. A 2-for-1 split returns .50, the number you would multiply the stock price by to adjust for the split. </value>
        [DataMember(Name = "adjFactor", EmitDefaultValue = false)]
        public double AdjFactor { get; set; }

        /// <summary>
        /// Combined adjustment factor for all distribution events on that day.
        /// </summary>
        /// <value>Combined adjustment factor for all distribution events on that day.</value>
        [DataMember(Name = "adjFactorCombined", EmitDefaultValue = false)]
        public double AdjFactorCombined { get; set; }

        /// <summary>
        /// Component of distribution ratio -  Number of shares held.
        /// </summary>
        /// <value>Component of distribution ratio -  Number of shares held.</value>
        [DataMember(Name = "distOldTerm", EmitDefaultValue = false)]
        public double DistOldTerm { get; set; }

        /// <summary>
        /// Component of distribution ratio -  Number of shares received.
        /// </summary>
        /// <value>Component of distribution ratio -  Number of shares received.</value>
        [DataMember(Name = "distNewTerm", EmitDefaultValue = false)]
        public double DistNewTerm { get; set; }

        /// <summary>
        /// Parent Spin-Off for a company
        /// </summary>
        /// <value>Parent Spin-Off for a company</value>
        [DataMember(Name = "distInstFsymId", EmitDefaultValue = false)]
        public string DistInstFsymId { get; set; }

        /// <summary>
        /// Textual description identifying the event.
        /// </summary>
        /// <value>Textual description identifying the event.</value>
        [DataMember(Name = "shortDesc", EmitDefaultValue = false)]
        public string ShortDesc { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Split {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventTypeCode: ").Append(EventTypeCode).Append("\n");
            sb.Append("  EventTypeDesc: ").Append(EventTypeDesc).Append("\n");
            sb.Append("  AnnouncementDate: ").Append(AnnouncementDate).Append("\n");
            sb.Append("  RecordDate: ").Append(RecordDate).Append("\n");
            sb.Append("  PayDate: ").Append(PayDate).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  AdjFactor: ").Append(AdjFactor).Append("\n");
            sb.Append("  AdjFactorCombined: ").Append(AdjFactorCombined).Append("\n");
            sb.Append("  DistOldTerm: ").Append(DistOldTerm).Append("\n");
            sb.Append("  DistNewTerm: ").Append(DistNewTerm).Append("\n");
            sb.Append("  DistInstFsymId: ").Append(DistInstFsymId).Append("\n");
            sb.Append("  ShortDesc: ").Append(ShortDesc).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Split);
        }

        /// <summary>
        /// Returns true if Split instances are equal
        /// </summary>
        /// <param name="input">Instance of Split to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Split input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.EventTypeCode == input.EventTypeCode ||
                    this.EventTypeCode.Equals(input.EventTypeCode)
                ) && 
                (
                    this.EventTypeDesc == input.EventTypeDesc ||
                    (this.EventTypeDesc != null &&
                    this.EventTypeDesc.Equals(input.EventTypeDesc))
                ) && 
                (
                    this.AnnouncementDate == input.AnnouncementDate ||
                    (this.AnnouncementDate != null &&
                    this.AnnouncementDate.Equals(input.AnnouncementDate))
                ) && 
                (
                    this.RecordDate == input.RecordDate ||
                    (this.RecordDate != null &&
                    this.RecordDate.Equals(input.RecordDate))
                ) && 
                (
                    this.PayDate == input.PayDate ||
                    (this.PayDate != null &&
                    this.PayDate.Equals(input.PayDate))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.AdjFactor == input.AdjFactor ||
                    this.AdjFactor.Equals(input.AdjFactor)
                ) && 
                (
                    this.AdjFactorCombined == input.AdjFactorCombined ||
                    this.AdjFactorCombined.Equals(input.AdjFactorCombined)
                ) && 
                (
                    this.DistOldTerm == input.DistOldTerm ||
                    this.DistOldTerm.Equals(input.DistOldTerm)
                ) && 
                (
                    this.DistNewTerm == input.DistNewTerm ||
                    this.DistNewTerm.Equals(input.DistNewTerm)
                ) && 
                (
                    this.DistInstFsymId == input.DistInstFsymId ||
                    (this.DistInstFsymId != null &&
                    this.DistInstFsymId.Equals(input.DistInstFsymId))
                ) && 
                (
                    this.ShortDesc == input.ShortDesc ||
                    (this.ShortDesc != null &&
                    this.ShortDesc.Equals(input.ShortDesc))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.EventId != null)
                {
                    hashCode = (hashCode * 59) + this.EventId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EventTypeCode.GetHashCode();
                if (this.EventTypeDesc != null)
                {
                    hashCode = (hashCode * 59) + this.EventTypeDesc.GetHashCode();
                }
                if (this.AnnouncementDate != null)
                {
                    hashCode = (hashCode * 59) + this.AnnouncementDate.GetHashCode();
                }
                if (this.RecordDate != null)
                {
                    hashCode = (hashCode * 59) + this.RecordDate.GetHashCode();
                }
                if (this.PayDate != null)
                {
                    hashCode = (hashCode * 59) + this.PayDate.GetHashCode();
                }
                if (this.EffectiveDate != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AdjFactor.GetHashCode();
                hashCode = (hashCode * 59) + this.AdjFactorCombined.GetHashCode();
                hashCode = (hashCode * 59) + this.DistOldTerm.GetHashCode();
                hashCode = (hashCode * 59) + this.DistNewTerm.GetHashCode();
                if (this.DistInstFsymId != null)
                {
                    hashCode = (hashCode * 59) + this.DistInstFsymId.GetHashCode();
                }
                if (this.ShortDesc != null)
                {
                    hashCode = (hashCode * 59) + this.ShortDesc.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
