/*
 * FactSet Global Prices API
 *
 * The FactSet Global Prices API provides end of day market pricing content using cloud and microservices technology, encompassing both pricing as well as corporate actions and events data.</p> 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetGlobalPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetGlobalPrices.Model
{
    /// <summary>
    /// Dividend
    /// </summary>
    [DataContract(Name = "Dividend")]
    public partial class Dividend : IEquatable<Dividend>, IValidatableObject
    {
        /// <summary>
        /// Corporate Actions Event type code.
        /// </summary>
        /// <value>Corporate Actions Event type code.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeCodeEnum
        {
            /// <summary>
            /// Enum DVC for value: DVC
            /// </summary>
            [EnumMember(Value = "DVC")]
            DVC = 1,

            /// <summary>
            /// Enum DVCD for value: DVCD
            /// </summary>
            [EnumMember(Value = "DVCD")]
            DVCD = 2,

            /// <summary>
            /// Enum DRP for value: DRP
            /// </summary>
            [EnumMember(Value = "DRP")]
            DRP = 3

        }


        /// <summary>
        /// Corporate Actions Event type code.
        /// </summary>
        /// <value>Corporate Actions Event type code.</value>
        [DataMember(Name = "eventTypeCode", EmitDefaultValue = false)]
        public EventTypeCodeEnum? EventTypeCode { get; set; }
        /// <summary>
        /// Net/Gross Marker Code. For details describing Net vs. Gross dividends, visit [Online Assistant Page #11512](https://oa.apps.factset.com/pages/11512).
        /// </summary>
        /// <value>Net/Gross Marker Code. For details describing Net vs. Gross dividends, visit [Online Assistant Page #11512](https://oa.apps.factset.com/pages/11512).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AmtDefNetGrossIndicatorEnum
        {
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 1,

            /// <summary>
            /// Enum G for value: G
            /// </summary>
            [EnumMember(Value = "G")]
            G = 2

        }


        /// <summary>
        /// Net/Gross Marker Code. For details describing Net vs. Gross dividends, visit [Online Assistant Page #11512](https://oa.apps.factset.com/pages/11512).
        /// </summary>
        /// <value>Net/Gross Marker Code. For details describing Net vs. Gross dividends, visit [Online Assistant Page #11512](https://oa.apps.factset.com/pages/11512).</value>
        [DataMember(Name = "amtDefNetGrossIndicator", EmitDefaultValue = false)]
        public AmtDefNetGrossIndicatorEnum? AmtDefNetGrossIndicator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dividend" /> class.
        /// </summary>
        /// <param name="fsymId">Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="eventId">FactSet identifier that uniquely identifies the Event..</param>
        /// <param name="eventTypeCode">Corporate Actions Event type code..</param>
        /// <param name="eventTypeDesc">Corporate Actions Event type description..</param>
        /// <param name="divTypeCode">Dividend Type Code. For code descriptions, visit [Online Assistant Page #8764] (https://oa.apps.factset.com/pages/8764). .</param>
        /// <param name="announcementDate">Date Event was announced in YYYY-MM-DD format..</param>
        /// <param name="recordDate">Date of Record for distribution in YYYY-MM-DD format..</param>
        /// <param name="payDate">Date of Payment for distribution in YYYY-MM-DD format..</param>
        /// <param name="effectiveDate">Effective Date or Ex-Date of distribution in YYYY-MM-DD format..</param>
        /// <param name="currency">Currency ISO code. For more details, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="amtDefNetGrossIndicator">Net/Gross Marker Code. For details describing Net vs. Gross dividends, visit [Online Assistant Page #11512](https://oa.apps.factset.com/pages/11512)..</param>
        /// <param name="amtDefTradingAdj">Default Amount - Trading Currency, Split Adjusted.</param>
        /// <param name="amtDefTradingUnadj">Default Amount - Trading Currency, Unadjusted.</param>
        /// <param name="amtGrossTradingAdj">Gross Amount - Trading Currency, Split Adjusted .</param>
        /// <param name="amtGrossTradingUnadj">Gross Amount - Trading Currency, Unadjusted .</param>
        /// <param name="amtNetTradingAdj">Net Amount - Trading Currency, Split Adjusted.</param>
        /// <param name="amtNetTradingUnadj">Net Amount - Trading Currency, Unadjusted.</param>
        /// <param name="declaredCurrency">Currency code for declared dividend..</param>
        /// <param name="amtDefDecAdj">Default Amount - Declared Currency, Split Adjusted.</param>
        /// <param name="amtDefDecUnadj">Default Amount - Declared Currency, Unadjusted.</param>
        /// <param name="amtGrossDecAdj">Gross Amount - Declared Currency, Split Adjusted .</param>
        /// <param name="amtGrossDecUnadj">Gross Amount - Declared Currency, Unadjusted .</param>
        /// <param name="amtNetDecAdj">Net Amount - Declared Currency, Split Adjusted .</param>
        /// <param name="amtNetDecUnadj">Net Amount - Declared Currency, Unadjusted .</param>
        /// <param name="dividendStatus">Dividend Status Flag - 1&#x3D;Yes, 0&#x3D;No.</param>
        /// <param name="dividendActiveFlag">Dividend active Flag - 1&#x3D;Yes, 0&#x3D;No.</param>
        /// <param name="dividendsSpecFlag">Special Dividend Flag - 1&#x3D;Yes, 0&#x3D;No.</param>
        /// <param name="frankDefTradingAdj">Default Frank - Trading Currency, Split Adjusted.</param>
        /// <param name="frankDefTradingUnadj">Default Frank - Trading Currency, Unadjusted.</param>
        /// <param name="frankDefDecAdj">Default Frank - Declared Currency, Split Adjusted.</param>
        /// <param name="frankDefDecUnadj">Default Frank - Declared Currency, Unadjusted.</param>
        /// <param name="frankPct">Default Amount - Declared Currency, Unadjusted.</param>
        /// <param name="taxRate">Tax Rate for on gross dividend for net dividend..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        public Dividend(string fsymId = default(string), string eventId = default(string), EventTypeCodeEnum? eventTypeCode = default(EventTypeCodeEnum?), string eventTypeDesc = default(string), string divTypeCode = default(string), string announcementDate = default(string), string recordDate = default(string), string payDate = default(string), string effectiveDate = default(string), string currency = default(string), AmtDefNetGrossIndicatorEnum? amtDefNetGrossIndicator = default(AmtDefNetGrossIndicatorEnum?), double amtDefTradingAdj = default(double), double amtDefTradingUnadj = default(double), double amtGrossTradingAdj = default(double), double amtGrossTradingUnadj = default(double), double amtNetTradingAdj = default(double), double amtNetTradingUnadj = default(double), string declaredCurrency = default(string), double amtDefDecAdj = default(double), double amtDefDecUnadj = default(double), double amtGrossDecAdj = default(double), double amtGrossDecUnadj = default(double), double amtNetDecAdj = default(double), double amtNetDecUnadj = default(double), int dividendStatus = default(int), int dividendActiveFlag = default(int), int dividendsSpecFlag = default(int), double frankDefTradingAdj = default(double), double frankDefTradingUnadj = default(double), double frankDefDecAdj = default(double), double frankDefDecUnadj = default(double), double frankPct = default(double), double taxRate = default(double), string requestId = default(string))
        {
            this.FsymId = fsymId;
            this.EventId = eventId;
            this.EventTypeCode = eventTypeCode;
            this.EventTypeDesc = eventTypeDesc;
            this.DivTypeCode = divTypeCode;
            this.AnnouncementDate = announcementDate;
            this.RecordDate = recordDate;
            this.PayDate = payDate;
            this.EffectiveDate = effectiveDate;
            this.Currency = currency;
            this.AmtDefNetGrossIndicator = amtDefNetGrossIndicator;
            this.AmtDefTradingAdj = amtDefTradingAdj;
            this.AmtDefTradingUnadj = amtDefTradingUnadj;
            this.AmtGrossTradingAdj = amtGrossTradingAdj;
            this.AmtGrossTradingUnadj = amtGrossTradingUnadj;
            this.AmtNetTradingAdj = amtNetTradingAdj;
            this.AmtNetTradingUnadj = amtNetTradingUnadj;
            this.DeclaredCurrency = declaredCurrency;
            this.AmtDefDecAdj = amtDefDecAdj;
            this.AmtDefDecUnadj = amtDefDecUnadj;
            this.AmtGrossDecAdj = amtGrossDecAdj;
            this.AmtGrossDecUnadj = amtGrossDecUnadj;
            this.AmtNetDecAdj = amtNetDecAdj;
            this.AmtNetDecUnadj = amtNetDecUnadj;
            this.DividendStatus = dividendStatus;
            this.DividendActiveFlag = dividendActiveFlag;
            this.DividendsSpecFlag = dividendsSpecFlag;
            this.FrankDefTradingAdj = frankDefTradingAdj;
            this.FrankDefTradingUnadj = frankDefTradingUnadj;
            this.FrankDefDecAdj = frankDefDecAdj;
            this.FrankDefDecUnadj = frankDefDecUnadj;
            this.FrankPct = frankPct;
            this.TaxRate = taxRate;
            this.RequestId = requestId;
        }

        /// <summary>
        /// Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = false)]
        public string FsymId { get; set; }

        /// <summary>
        /// FactSet identifier that uniquely identifies the Event.
        /// </summary>
        /// <value>FactSet identifier that uniquely identifies the Event.</value>
        [DataMember(Name = "eventId", EmitDefaultValue = false)]
        public string EventId { get; set; }

        /// <summary>
        /// Corporate Actions Event type description.
        /// </summary>
        /// <value>Corporate Actions Event type description.</value>
        [DataMember(Name = "eventTypeDesc", EmitDefaultValue = false)]
        public string EventTypeDesc { get; set; }

        /// <summary>
        /// Dividend Type Code. For code descriptions, visit [Online Assistant Page #8764] (https://oa.apps.factset.com/pages/8764). 
        /// </summary>
        /// <value>Dividend Type Code. For code descriptions, visit [Online Assistant Page #8764] (https://oa.apps.factset.com/pages/8764). </value>
        [DataMember(Name = "divTypeCode", EmitDefaultValue = false)]
        public string DivTypeCode { get; set; }

        /// <summary>
        /// Date Event was announced in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date Event was announced in YYYY-MM-DD format.</value>
        [DataMember(Name = "announcementDate", EmitDefaultValue = false)]
        public string AnnouncementDate { get; set; }

        /// <summary>
        /// Date of Record for distribution in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date of Record for distribution in YYYY-MM-DD format.</value>
        [DataMember(Name = "recordDate", EmitDefaultValue = false)]
        public string RecordDate { get; set; }

        /// <summary>
        /// Date of Payment for distribution in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date of Payment for distribution in YYYY-MM-DD format.</value>
        [DataMember(Name = "payDate", EmitDefaultValue = false)]
        public string PayDate { get; set; }

        /// <summary>
        /// Effective Date or Ex-Date of distribution in YYYY-MM-DD format.
        /// </summary>
        /// <value>Effective Date or Ex-Date of distribution in YYYY-MM-DD format.</value>
        [DataMember(Name = "effectiveDate", EmitDefaultValue = false)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Currency ISO code. For more details, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency ISO code. For more details, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Default Amount - Trading Currency, Split Adjusted
        /// </summary>
        /// <value>Default Amount - Trading Currency, Split Adjusted</value>
        [DataMember(Name = "amtDefTradingAdj", EmitDefaultValue = false)]
        public double AmtDefTradingAdj { get; set; }

        /// <summary>
        /// Default Amount - Trading Currency, Unadjusted
        /// </summary>
        /// <value>Default Amount - Trading Currency, Unadjusted</value>
        [DataMember(Name = "amtDefTradingUnadj", EmitDefaultValue = false)]
        public double AmtDefTradingUnadj { get; set; }

        /// <summary>
        /// Gross Amount - Trading Currency, Split Adjusted 
        /// </summary>
        /// <value>Gross Amount - Trading Currency, Split Adjusted </value>
        [DataMember(Name = "amtGrossTradingAdj", EmitDefaultValue = false)]
        public double AmtGrossTradingAdj { get; set; }

        /// <summary>
        /// Gross Amount - Trading Currency, Unadjusted 
        /// </summary>
        /// <value>Gross Amount - Trading Currency, Unadjusted </value>
        [DataMember(Name = "amtGrossTradingUnadj", EmitDefaultValue = false)]
        public double AmtGrossTradingUnadj { get; set; }

        /// <summary>
        /// Net Amount - Trading Currency, Split Adjusted
        /// </summary>
        /// <value>Net Amount - Trading Currency, Split Adjusted</value>
        [DataMember(Name = "amtNetTradingAdj", EmitDefaultValue = false)]
        public double AmtNetTradingAdj { get; set; }

        /// <summary>
        /// Net Amount - Trading Currency, Unadjusted
        /// </summary>
        /// <value>Net Amount - Trading Currency, Unadjusted</value>
        [DataMember(Name = "amtNetTradingUnadj", EmitDefaultValue = false)]
        public double AmtNetTradingUnadj { get; set; }

        /// <summary>
        /// Currency code for declared dividend.
        /// </summary>
        /// <value>Currency code for declared dividend.</value>
        [DataMember(Name = "declaredCurrency", EmitDefaultValue = false)]
        public string DeclaredCurrency { get; set; }

        /// <summary>
        /// Default Amount - Declared Currency, Split Adjusted
        /// </summary>
        /// <value>Default Amount - Declared Currency, Split Adjusted</value>
        [DataMember(Name = "amtDefDecAdj", EmitDefaultValue = false)]
        public double AmtDefDecAdj { get; set; }

        /// <summary>
        /// Default Amount - Declared Currency, Unadjusted
        /// </summary>
        /// <value>Default Amount - Declared Currency, Unadjusted</value>
        [DataMember(Name = "amtDefDecUnadj", EmitDefaultValue = false)]
        public double AmtDefDecUnadj { get; set; }

        /// <summary>
        /// Gross Amount - Declared Currency, Split Adjusted 
        /// </summary>
        /// <value>Gross Amount - Declared Currency, Split Adjusted </value>
        [DataMember(Name = "amtGrossDecAdj", EmitDefaultValue = false)]
        public double AmtGrossDecAdj { get; set; }

        /// <summary>
        /// Gross Amount - Declared Currency, Unadjusted 
        /// </summary>
        /// <value>Gross Amount - Declared Currency, Unadjusted </value>
        [DataMember(Name = "amtGrossDecUnadj", EmitDefaultValue = false)]
        public double AmtGrossDecUnadj { get; set; }

        /// <summary>
        /// Net Amount - Declared Currency, Split Adjusted 
        /// </summary>
        /// <value>Net Amount - Declared Currency, Split Adjusted </value>
        [DataMember(Name = "amtNetDecAdj", EmitDefaultValue = false)]
        public double AmtNetDecAdj { get; set; }

        /// <summary>
        /// Net Amount - Declared Currency, Unadjusted 
        /// </summary>
        /// <value>Net Amount - Declared Currency, Unadjusted </value>
        [DataMember(Name = "amtNetDecUnadj", EmitDefaultValue = false)]
        public double AmtNetDecUnadj { get; set; }

        /// <summary>
        /// Dividend Status Flag - 1&#x3D;Yes, 0&#x3D;No
        /// </summary>
        /// <value>Dividend Status Flag - 1&#x3D;Yes, 0&#x3D;No</value>
        [DataMember(Name = "dividendStatus", EmitDefaultValue = false)]
        public int DividendStatus { get; set; }

        /// <summary>
        /// Dividend active Flag - 1&#x3D;Yes, 0&#x3D;No
        /// </summary>
        /// <value>Dividend active Flag - 1&#x3D;Yes, 0&#x3D;No</value>
        [DataMember(Name = "dividendActiveFlag", EmitDefaultValue = false)]
        public int DividendActiveFlag { get; set; }

        /// <summary>
        /// Special Dividend Flag - 1&#x3D;Yes, 0&#x3D;No
        /// </summary>
        /// <value>Special Dividend Flag - 1&#x3D;Yes, 0&#x3D;No</value>
        [DataMember(Name = "dividendsSpecFlag", EmitDefaultValue = false)]
        public int DividendsSpecFlag { get; set; }

        /// <summary>
        /// Default Frank - Trading Currency, Split Adjusted
        /// </summary>
        /// <value>Default Frank - Trading Currency, Split Adjusted</value>
        [DataMember(Name = "frankDefTradingAdj", EmitDefaultValue = false)]
        public double FrankDefTradingAdj { get; set; }

        /// <summary>
        /// Default Frank - Trading Currency, Unadjusted
        /// </summary>
        /// <value>Default Frank - Trading Currency, Unadjusted</value>
        [DataMember(Name = "frankDefTradingUnadj", EmitDefaultValue = false)]
        public double FrankDefTradingUnadj { get; set; }

        /// <summary>
        /// Default Frank - Declared Currency, Split Adjusted
        /// </summary>
        /// <value>Default Frank - Declared Currency, Split Adjusted</value>
        [DataMember(Name = "frankDefDecAdj", EmitDefaultValue = false)]
        public double FrankDefDecAdj { get; set; }

        /// <summary>
        /// Default Frank - Declared Currency, Unadjusted
        /// </summary>
        /// <value>Default Frank - Declared Currency, Unadjusted</value>
        [DataMember(Name = "frankDefDecUnadj", EmitDefaultValue = false)]
        public double FrankDefDecUnadj { get; set; }

        /// <summary>
        /// Default Amount - Declared Currency, Unadjusted
        /// </summary>
        /// <value>Default Amount - Declared Currency, Unadjusted</value>
        [DataMember(Name = "frankPct", EmitDefaultValue = false)]
        public double FrankPct { get; set; }

        /// <summary>
        /// Tax Rate for on gross dividend for net dividend.
        /// </summary>
        /// <value>Tax Rate for on gross dividend for net dividend.</value>
        [DataMember(Name = "taxRate", EmitDefaultValue = false)]
        public double TaxRate { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Dividend {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventTypeCode: ").Append(EventTypeCode).Append("\n");
            sb.Append("  EventTypeDesc: ").Append(EventTypeDesc).Append("\n");
            sb.Append("  DivTypeCode: ").Append(DivTypeCode).Append("\n");
            sb.Append("  AnnouncementDate: ").Append(AnnouncementDate).Append("\n");
            sb.Append("  RecordDate: ").Append(RecordDate).Append("\n");
            sb.Append("  PayDate: ").Append(PayDate).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  AmtDefNetGrossIndicator: ").Append(AmtDefNetGrossIndicator).Append("\n");
            sb.Append("  AmtDefTradingAdj: ").Append(AmtDefTradingAdj).Append("\n");
            sb.Append("  AmtDefTradingUnadj: ").Append(AmtDefTradingUnadj).Append("\n");
            sb.Append("  AmtGrossTradingAdj: ").Append(AmtGrossTradingAdj).Append("\n");
            sb.Append("  AmtGrossTradingUnadj: ").Append(AmtGrossTradingUnadj).Append("\n");
            sb.Append("  AmtNetTradingAdj: ").Append(AmtNetTradingAdj).Append("\n");
            sb.Append("  AmtNetTradingUnadj: ").Append(AmtNetTradingUnadj).Append("\n");
            sb.Append("  DeclaredCurrency: ").Append(DeclaredCurrency).Append("\n");
            sb.Append("  AmtDefDecAdj: ").Append(AmtDefDecAdj).Append("\n");
            sb.Append("  AmtDefDecUnadj: ").Append(AmtDefDecUnadj).Append("\n");
            sb.Append("  AmtGrossDecAdj: ").Append(AmtGrossDecAdj).Append("\n");
            sb.Append("  AmtGrossDecUnadj: ").Append(AmtGrossDecUnadj).Append("\n");
            sb.Append("  AmtNetDecAdj: ").Append(AmtNetDecAdj).Append("\n");
            sb.Append("  AmtNetDecUnadj: ").Append(AmtNetDecUnadj).Append("\n");
            sb.Append("  DividendStatus: ").Append(DividendStatus).Append("\n");
            sb.Append("  DividendActiveFlag: ").Append(DividendActiveFlag).Append("\n");
            sb.Append("  DividendsSpecFlag: ").Append(DividendsSpecFlag).Append("\n");
            sb.Append("  FrankDefTradingAdj: ").Append(FrankDefTradingAdj).Append("\n");
            sb.Append("  FrankDefTradingUnadj: ").Append(FrankDefTradingUnadj).Append("\n");
            sb.Append("  FrankDefDecAdj: ").Append(FrankDefDecAdj).Append("\n");
            sb.Append("  FrankDefDecUnadj: ").Append(FrankDefDecUnadj).Append("\n");
            sb.Append("  FrankPct: ").Append(FrankPct).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dividend);
        }

        /// <summary>
        /// Returns true if Dividend instances are equal
        /// </summary>
        /// <param name="input">Instance of Dividend to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dividend input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.EventTypeCode == input.EventTypeCode ||
                    this.EventTypeCode.Equals(input.EventTypeCode)
                ) && 
                (
                    this.EventTypeDesc == input.EventTypeDesc ||
                    (this.EventTypeDesc != null &&
                    this.EventTypeDesc.Equals(input.EventTypeDesc))
                ) && 
                (
                    this.DivTypeCode == input.DivTypeCode ||
                    (this.DivTypeCode != null &&
                    this.DivTypeCode.Equals(input.DivTypeCode))
                ) && 
                (
                    this.AnnouncementDate == input.AnnouncementDate ||
                    (this.AnnouncementDate != null &&
                    this.AnnouncementDate.Equals(input.AnnouncementDate))
                ) && 
                (
                    this.RecordDate == input.RecordDate ||
                    (this.RecordDate != null &&
                    this.RecordDate.Equals(input.RecordDate))
                ) && 
                (
                    this.PayDate == input.PayDate ||
                    (this.PayDate != null &&
                    this.PayDate.Equals(input.PayDate))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.AmtDefNetGrossIndicator == input.AmtDefNetGrossIndicator ||
                    this.AmtDefNetGrossIndicator.Equals(input.AmtDefNetGrossIndicator)
                ) && 
                (
                    this.AmtDefTradingAdj == input.AmtDefTradingAdj ||
                    this.AmtDefTradingAdj.Equals(input.AmtDefTradingAdj)
                ) && 
                (
                    this.AmtDefTradingUnadj == input.AmtDefTradingUnadj ||
                    this.AmtDefTradingUnadj.Equals(input.AmtDefTradingUnadj)
                ) && 
                (
                    this.AmtGrossTradingAdj == input.AmtGrossTradingAdj ||
                    this.AmtGrossTradingAdj.Equals(input.AmtGrossTradingAdj)
                ) && 
                (
                    this.AmtGrossTradingUnadj == input.AmtGrossTradingUnadj ||
                    this.AmtGrossTradingUnadj.Equals(input.AmtGrossTradingUnadj)
                ) && 
                (
                    this.AmtNetTradingAdj == input.AmtNetTradingAdj ||
                    this.AmtNetTradingAdj.Equals(input.AmtNetTradingAdj)
                ) && 
                (
                    this.AmtNetTradingUnadj == input.AmtNetTradingUnadj ||
                    this.AmtNetTradingUnadj.Equals(input.AmtNetTradingUnadj)
                ) && 
                (
                    this.DeclaredCurrency == input.DeclaredCurrency ||
                    (this.DeclaredCurrency != null &&
                    this.DeclaredCurrency.Equals(input.DeclaredCurrency))
                ) && 
                (
                    this.AmtDefDecAdj == input.AmtDefDecAdj ||
                    this.AmtDefDecAdj.Equals(input.AmtDefDecAdj)
                ) && 
                (
                    this.AmtDefDecUnadj == input.AmtDefDecUnadj ||
                    this.AmtDefDecUnadj.Equals(input.AmtDefDecUnadj)
                ) && 
                (
                    this.AmtGrossDecAdj == input.AmtGrossDecAdj ||
                    this.AmtGrossDecAdj.Equals(input.AmtGrossDecAdj)
                ) && 
                (
                    this.AmtGrossDecUnadj == input.AmtGrossDecUnadj ||
                    this.AmtGrossDecUnadj.Equals(input.AmtGrossDecUnadj)
                ) && 
                (
                    this.AmtNetDecAdj == input.AmtNetDecAdj ||
                    this.AmtNetDecAdj.Equals(input.AmtNetDecAdj)
                ) && 
                (
                    this.AmtNetDecUnadj == input.AmtNetDecUnadj ||
                    this.AmtNetDecUnadj.Equals(input.AmtNetDecUnadj)
                ) && 
                (
                    this.DividendStatus == input.DividendStatus ||
                    this.DividendStatus.Equals(input.DividendStatus)
                ) && 
                (
                    this.DividendActiveFlag == input.DividendActiveFlag ||
                    this.DividendActiveFlag.Equals(input.DividendActiveFlag)
                ) && 
                (
                    this.DividendsSpecFlag == input.DividendsSpecFlag ||
                    this.DividendsSpecFlag.Equals(input.DividendsSpecFlag)
                ) && 
                (
                    this.FrankDefTradingAdj == input.FrankDefTradingAdj ||
                    this.FrankDefTradingAdj.Equals(input.FrankDefTradingAdj)
                ) && 
                (
                    this.FrankDefTradingUnadj == input.FrankDefTradingUnadj ||
                    this.FrankDefTradingUnadj.Equals(input.FrankDefTradingUnadj)
                ) && 
                (
                    this.FrankDefDecAdj == input.FrankDefDecAdj ||
                    this.FrankDefDecAdj.Equals(input.FrankDefDecAdj)
                ) && 
                (
                    this.FrankDefDecUnadj == input.FrankDefDecUnadj ||
                    this.FrankDefDecUnadj.Equals(input.FrankDefDecUnadj)
                ) && 
                (
                    this.FrankPct == input.FrankPct ||
                    this.FrankPct.Equals(input.FrankPct)
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    this.TaxRate.Equals(input.TaxRate)
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.EventId != null)
                {
                    hashCode = (hashCode * 59) + this.EventId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EventTypeCode.GetHashCode();
                if (this.EventTypeDesc != null)
                {
                    hashCode = (hashCode * 59) + this.EventTypeDesc.GetHashCode();
                }
                if (this.DivTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.DivTypeCode.GetHashCode();
                }
                if (this.AnnouncementDate != null)
                {
                    hashCode = (hashCode * 59) + this.AnnouncementDate.GetHashCode();
                }
                if (this.RecordDate != null)
                {
                    hashCode = (hashCode * 59) + this.RecordDate.GetHashCode();
                }
                if (this.PayDate != null)
                {
                    hashCode = (hashCode * 59) + this.PayDate.GetHashCode();
                }
                if (this.EffectiveDate != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveDate.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AmtDefNetGrossIndicator.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtDefTradingAdj.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtDefTradingUnadj.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtGrossTradingAdj.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtGrossTradingUnadj.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtNetTradingAdj.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtNetTradingUnadj.GetHashCode();
                if (this.DeclaredCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.DeclaredCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AmtDefDecAdj.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtDefDecUnadj.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtGrossDecAdj.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtGrossDecUnadj.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtNetDecAdj.GetHashCode();
                hashCode = (hashCode * 59) + this.AmtNetDecUnadj.GetHashCode();
                hashCode = (hashCode * 59) + this.DividendStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.DividendActiveFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.DividendsSpecFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.FrankDefTradingAdj.GetHashCode();
                hashCode = (hashCode * 59) + this.FrankDefTradingUnadj.GetHashCode();
                hashCode = (hashCode * 59) + this.FrankDefDecAdj.GetHashCode();
                hashCode = (hashCode * 59) + this.FrankDefDecUnadj.GetHashCode();
                hashCode = (hashCode * 59) + this.FrankPct.GetHashCode();
                hashCode = (hashCode * 59) + this.TaxRate.GetHashCode();
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
