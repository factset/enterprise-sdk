/*
 * FactSet Global Prices API
 *
 * The FactSet Global Prices API provides end of day market pricing content using cloud and microservices technology, encompassing both pricing as well as corporate actions and events data.</p> 
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetGlobalPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetGlobalPrices.Model
{
    /// <summary>
    /// Market Value Response Object
    /// </summary>
    [DataContract(Name = "MarketValueResponseObject")]
    public partial class MarketValueResponseObject : IEquatable<MarketValueResponseObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketValueResponseObject" /> class.
        /// </summary>
        /// <param name="fsymId">Security-level FactSet Permanent Identifier associated with the identifier..</param>
        /// <param name="requestId">FactSet Security Permanent Identifier that was used for the request..</param>
        /// <param name="currentMarketValue">Market Value for a specified security. (Current Only).</param>
        /// <param name="date">Current Market Value Date.</param>
        public MarketValueResponseObject(string fsymId = default(string), string requestId = default(string), decimal? currentMarketValue = default(decimal?), DateTime? date = default(DateTime?))
        {
            this.FsymId = fsymId;
            this.RequestId = requestId;
            this.CurrentMarketValue = currentMarketValue;
            this.Date = date;
        }

        /// <summary>
        /// Security-level FactSet Permanent Identifier associated with the identifier.
        /// </summary>
        /// <value>Security-level FactSet Permanent Identifier associated with the identifier.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// FactSet Security Permanent Identifier that was used for the request.
        /// </summary>
        /// <value>FactSet Security Permanent Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Market Value for a specified security. (Current Only)
        /// </summary>
        /// <value>Market Value for a specified security. (Current Only)</value>
        [DataMember(Name = "currentMarketValue", EmitDefaultValue = true)]
        public decimal? CurrentMarketValue { get; set; }

        /// <summary>
        /// Current Market Value Date
        /// </summary>
        /// <value>Current Market Value Date</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketValueResponseObject {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  CurrentMarketValue: ").Append(CurrentMarketValue).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketValueResponseObject);
        }

        /// <summary>
        /// Returns true if MarketValueResponseObject instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketValueResponseObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketValueResponseObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.CurrentMarketValue == input.CurrentMarketValue ||
                    (this.CurrentMarketValue != null &&
                    this.CurrentMarketValue.Equals(input.CurrentMarketValue))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.CurrentMarketValue != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentMarketValue.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
