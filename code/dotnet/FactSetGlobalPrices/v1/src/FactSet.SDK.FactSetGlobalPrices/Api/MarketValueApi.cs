/*
 * FactSet Global Prices API
 *
 * The FactSet Global Prices API provides end of day market pricing content using cloud and microservices technology, encompassing both pricing as well as corporate actions and events data.</p> 
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetGlobalPrices.Client;
using FactSet.SDK.FactSetGlobalPrices.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetGlobalPrices.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketValueApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides the current market value for a list of specified securities.
        /// </summary>
        /// <remarks>
        /// Provides the current market value (in USD millions) for a list of specified securities.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.&lt;p&gt;***ids limit** &#x3D;  50 per both non-batch request and batch request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, it&#39;s advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request for up to 20 minutes. Upon requesting batch&#x3D;Y, the service will respond with an HTTP Status Code of 202. Once a batch request is submitted, use batch status to see if the job has been completed. Once completed, retrieve the results of the request via batch-result.  For single-day requests, the ids limit is 500 for non-batch and 2000 for batch. For multi-day requests, the limit is 50 ids for both batch and non-batch.  Limits on query string via GET method still apply. It&#39;s advised to submit large lists of ids via POST method. &lt;B&gt;Please note that the number of unique currencies present in the requested ids is limited to 50 per request.&lt;/B&gt;  (optional, default to N)</param>
        /// <returns>MarketValueApi.GetGPDMarketValResponseWrapper</returns>
        MarketValueApi.GetGPDMarketValResponseWrapper GetGPDMarketVal(List<string> ids, string batch = default(string));

        /// <summary>
        /// Provides the current market value for a list of specified securities.
        /// </summary>
        /// <remarks>
        /// Provides the current market value (in USD millions) for a list of specified securities.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.&lt;p&gt;***ids limit** &#x3D;  50 per both non-batch request and batch request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, it&#39;s advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request for up to 20 minutes. Upon requesting batch&#x3D;Y, the service will respond with an HTTP Status Code of 202. Once a batch request is submitted, use batch status to see if the job has been completed. Once completed, retrieve the results of the request via batch-result.  For single-day requests, the ids limit is 500 for non-batch and 2000 for batch. For multi-day requests, the limit is 50 ids for both batch and non-batch.  Limits on query string via GET method still apply. It&#39;s advised to submit large lists of ids via POST method. &lt;B&gt;Please note that the number of unique currencies present in the requested ids is limited to 50 per request.&lt;/B&gt;  (optional, default to N)</param>
        /// <returns>ApiResponse of MarketValueApi.GetGPDMarketValResponseWrapper</returns>
        ApiResponse<MarketValueApi.GetGPDMarketValResponseWrapper> GetGPDMarketValWithHttpInfo(List<string> ids, string batch = default(string));
        /// <summary>
        /// Requests the current market value for a list of specified securities.
        /// </summary>
        /// <remarks>
        /// Provides the current market value (in USD millions) for a list of specified securities.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketValueRequest">Request object for &#x60;Market Value&#x60;.</param>
        /// <returns>MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper</returns>
        MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper GetSecurityPricesForListMarketVal(MarketValueRequest marketValueRequest);

        /// <summary>
        /// Requests the current market value for a list of specified securities.
        /// </summary>
        /// <remarks>
        /// Provides the current market value (in USD millions) for a list of specified securities.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketValueRequest">Request object for &#x60;Market Value&#x60;.</param>
        /// <returns>ApiResponse of MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper</returns>
        ApiResponse<MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper> GetSecurityPricesForListMarketValWithHttpInfo(MarketValueRequest marketValueRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketValueApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Provides the current market value for a list of specified securities.
        /// </summary>
        /// <remarks>
        /// Provides the current market value (in USD millions) for a list of specified securities.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.&lt;p&gt;***ids limit** &#x3D;  50 per both non-batch request and batch request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, it&#39;s advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request for up to 20 minutes. Upon requesting batch&#x3D;Y, the service will respond with an HTTP Status Code of 202. Once a batch request is submitted, use batch status to see if the job has been completed. Once completed, retrieve the results of the request via batch-result.  For single-day requests, the ids limit is 500 for non-batch and 2000 for batch. For multi-day requests, the limit is 50 ids for both batch and non-batch.  Limits on query string via GET method still apply. It&#39;s advised to submit large lists of ids via POST method. &lt;B&gt;Please note that the number of unique currencies present in the requested ids is limited to 50 per request.&lt;/B&gt;  (optional, default to N)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketValueResponse</returns>
        System.Threading.Tasks.Task<MarketValueApi.GetGPDMarketValResponseWrapper> GetGPDMarketValAsync(List<string> ids, string batch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provides the current market value for a list of specified securities.
        /// </summary>
        /// <remarks>
        /// Provides the current market value (in USD millions) for a list of specified securities.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.&lt;p&gt;***ids limit** &#x3D;  50 per both non-batch request and batch request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, it&#39;s advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request for up to 20 minutes. Upon requesting batch&#x3D;Y, the service will respond with an HTTP Status Code of 202. Once a batch request is submitted, use batch status to see if the job has been completed. Once completed, retrieve the results of the request via batch-result.  For single-day requests, the ids limit is 500 for non-batch and 2000 for batch. For multi-day requests, the limit is 50 ids for both batch and non-batch.  Limits on query string via GET method still apply. It&#39;s advised to submit large lists of ids via POST method. &lt;B&gt;Please note that the number of unique currencies present in the requested ids is limited to 50 per request.&lt;/B&gt;  (optional, default to N)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketValueApi.GetGPDMarketValResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketValueApi.GetGPDMarketValResponseWrapper>> GetGPDMarketValWithHttpInfoAsync(List<string> ids, string batch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Requests the current market value for a list of specified securities.
        /// </summary>
        /// <remarks>
        /// Provides the current market value (in USD millions) for a list of specified securities.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketValueRequest">Request object for &#x60;Market Value&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketValueResponse</returns>
        System.Threading.Tasks.Task<MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper> GetSecurityPricesForListMarketValAsync(MarketValueRequest marketValueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Requests the current market value for a list of specified securities.
        /// </summary>
        /// <remarks>
        /// Provides the current market value (in USD millions) for a list of specified securities.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketValueRequest">Request object for &#x60;Market Value&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper>> GetSecurityPricesForListMarketValWithHttpInfoAsync(MarketValueRequest marketValueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketValueApi : IMarketValueApiSync, IMarketValueApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketValueApi : IMarketValueApi
    {
        private FactSet.SDK.FactSetGlobalPrices.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetGPDMarketValResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(MarketValueResponse) },
            { (HttpStatusCode)202, typeof(BatchStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSecurityPricesForListMarketValResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(MarketValueResponse) },
            { (HttpStatusCode)202, typeof(BatchStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        
        /// <summary>
        /// Wrapper to support GET /factset-global-prices/v1/market-value returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : MarketValueResponse<br />
        /// Array of Price Objects
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : BatchStatusResponse<br />
        /// Batch request has been accepted.
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetGPDMarketValResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     MarketValueResponse data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     BatchStatusResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetGPDMarketValResponseWrapper {

            /// <summary>This constructor initializes the new GetGPDMarketValResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetGPDMarketValResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Array of Price Objects
            /// </summary>
            public MarketValueResponse Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (MarketValueResponse) Response;
                }
            }
            
            /// <summary>
            /// Batch request has been accepted.
            /// </summary>
            public BatchStatusResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (BatchStatusResponse) Response;
                }
            }
            
        }


        /// <summary>
        /// Wrapper to support POST /factset-global-prices/v1/market-value returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : MarketValueResponse<br />
        /// Market Value Response
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : BatchStatusResponse<br />
        /// Batch request has been accepted.
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetSecurityPricesForListMarketValResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     MarketValueResponse data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     BatchStatusResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetSecurityPricesForListMarketValResponseWrapper {

            /// <summary>This constructor initializes the new GetSecurityPricesForListMarketValResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetSecurityPricesForListMarketValResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Market Value Response
            /// </summary>
            public MarketValueResponse Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (MarketValueResponse) Response;
                }
            }
            
            /// <summary>
            /// Batch request has been accepted.
            /// </summary>
            public BatchStatusResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (BatchStatusResponse) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketValueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketValueApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketValueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketValueApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetGlobalPrices.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetGlobalPrices.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetGlobalPrices.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetGlobalPrices.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetGlobalPrices.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetGlobalPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketValueApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketValueApi(FactSet.SDK.FactSetGlobalPrices.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetGlobalPrices.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetGlobalPrices.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetGlobalPrices.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetGlobalPrices.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetGlobalPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketValueApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MarketValueApi(FactSet.SDK.FactSetGlobalPrices.Client.ISynchronousClient client, FactSet.SDK.FactSetGlobalPrices.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetGlobalPrices.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetGlobalPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetGlobalPrices.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetGlobalPrices.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetGlobalPrices.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetGlobalPrices.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provides the current market value for a list of specified securities. Provides the current market value (in USD millions) for a list of specified securities.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.&lt;p&gt;***ids limit** &#x3D;  50 per both non-batch request and batch request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, it&#39;s advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request for up to 20 minutes. Upon requesting batch&#x3D;Y, the service will respond with an HTTP Status Code of 202. Once a batch request is submitted, use batch status to see if the job has been completed. Once completed, retrieve the results of the request via batch-result.  For single-day requests, the ids limit is 500 for non-batch and 2000 for batch. For multi-day requests, the limit is 50 ids for both batch and non-batch.  Limits on query string via GET method still apply. It&#39;s advised to submit large lists of ids via POST method. &lt;B&gt;Please note that the number of unique currencies present in the requested ids is limited to 50 per request.&lt;/B&gt;  (optional, default to N)</param>
        /// <returns>MarketValueApi.GetGPDMarketValResponseWrapper</returns>
        public MarketValueApi.GetGPDMarketValResponseWrapper GetGPDMarketVal(List<string> ids, string batch = default(string))
        {
            var localVarResponse = GetGPDMarketValWithHttpInfo(ids, batch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides the current market value for a list of specified securities. Provides the current market value (in USD millions) for a list of specified securities.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.&lt;p&gt;***ids limit** &#x3D;  50 per both non-batch request and batch request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, it&#39;s advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request for up to 20 minutes. Upon requesting batch&#x3D;Y, the service will respond with an HTTP Status Code of 202. Once a batch request is submitted, use batch status to see if the job has been completed. Once completed, retrieve the results of the request via batch-result.  For single-day requests, the ids limit is 500 for non-batch and 2000 for batch. For multi-day requests, the limit is 50 ids for both batch and non-batch.  Limits on query string via GET method still apply. It&#39;s advised to submit large lists of ids via POST method. &lt;B&gt;Please note that the number of unique currencies present in the requested ids is limited to 50 per request.&lt;/B&gt;  (optional, default to N)</param>
        /// <returns>ApiResponse of MarketValueResponse</returns>
        public ApiResponse<MarketValueApi.GetGPDMarketValResponseWrapper> GetGPDMarketValWithHttpInfo(List<string> ids, string batch = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(400, "Missing required parameter 'ids' when calling MarketValueApi->GetGPDMarketVal");
            }

            FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (batch != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "batch", batch));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetGPDMarketValResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/factset-global-prices/v1/market-value", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGPDMarketVal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getgpdmarketvalResponse = new GetGPDMarketValResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetGPDMarketValResponseWrapper>(localVarResponse.StatusCode, getgpdmarketvalResponse);
        }

        /// <summary>
        /// Provides the current market value for a list of specified securities. Provides the current market value (in USD millions) for a list of specified securities.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.&lt;p&gt;***ids limit** &#x3D;  50 per both non-batch request and batch request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, it&#39;s advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request for up to 20 minutes. Upon requesting batch&#x3D;Y, the service will respond with an HTTP Status Code of 202. Once a batch request is submitted, use batch status to see if the job has been completed. Once completed, retrieve the results of the request via batch-result.  For single-day requests, the ids limit is 500 for non-batch and 2000 for batch. For multi-day requests, the limit is 50 ids for both batch and non-batch.  Limits on query string via GET method still apply. It&#39;s advised to submit large lists of ids via POST method. &lt;B&gt;Please note that the number of unique currencies present in the requested ids is limited to 50 per request.&lt;/B&gt;  (optional, default to N)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketValueResponse</returns>
        public async System.Threading.Tasks.Task<MarketValueApi.GetGPDMarketValResponseWrapper>GetGPDMarketValAsync(List<string> ids, string batch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetGPDMarketValWithHttpInfoAsync(ids, batch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides the current market value for a list of specified securities. Provides the current market value (in USD millions) for a list of specified securities.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.&lt;p&gt;***ids limit** &#x3D;  50 per both non-batch request and batch request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, it&#39;s advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request for up to 20 minutes. Upon requesting batch&#x3D;Y, the service will respond with an HTTP Status Code of 202. Once a batch request is submitted, use batch status to see if the job has been completed. Once completed, retrieve the results of the request via batch-result.  For single-day requests, the ids limit is 500 for non-batch and 2000 for batch. For multi-day requests, the limit is 50 ids for both batch and non-batch.  Limits on query string via GET method still apply. It&#39;s advised to submit large lists of ids via POST method. &lt;B&gt;Please note that the number of unique currencies present in the requested ids is limited to 50 per request.&lt;/B&gt;  (optional, default to N)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketValueResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<MarketValueApi.GetGPDMarketValResponseWrapper>> GetGPDMarketValWithHttpInfoAsync(List<string> ids, string batch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(400, "Missing required parameter 'ids' when calling MarketValueApi->GetGPDMarketVal");
            }


            FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (batch != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "batch", batch));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetGPDMarketValResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/factset-global-prices/v1/market-value", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGPDMarketVal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getgpdmarketvalResponse = new GetGPDMarketValResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetGPDMarketValResponseWrapper>(localVarResponse.StatusCode, getgpdmarketvalResponse);
        }

        /// <summary>
        /// Requests the current market value for a list of specified securities. Provides the current market value (in USD millions) for a list of specified securities.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketValueRequest">Request object for &#x60;Market Value&#x60;.</param>
        /// <returns>MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper</returns>
        public MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper GetSecurityPricesForListMarketVal(MarketValueRequest marketValueRequest)
        {
            var localVarResponse = GetSecurityPricesForListMarketValWithHttpInfo(marketValueRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests the current market value for a list of specified securities. Provides the current market value (in USD millions) for a list of specified securities.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketValueRequest">Request object for &#x60;Market Value&#x60;.</param>
        /// <returns>ApiResponse of MarketValueResponse</returns>
        public ApiResponse<MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper> GetSecurityPricesForListMarketValWithHttpInfo(MarketValueRequest marketValueRequest)
        {
            // verify the required parameter 'marketValueRequest' is set
            if (marketValueRequest == null)
            {
                throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(400, "Missing required parameter 'marketValueRequest' when calling MarketValueApi->GetSecurityPricesForListMarketVal");
            }

            FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = marketValueRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSecurityPricesForListMarketValResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/factset-global-prices/v1/market-value", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecurityPricesForListMarketVal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getsecuritypricesforlistmarketvalResponse = new GetSecurityPricesForListMarketValResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetSecurityPricesForListMarketValResponseWrapper>(localVarResponse.StatusCode, getsecuritypricesforlistmarketvalResponse);
        }

        /// <summary>
        /// Requests the current market value for a list of specified securities. Provides the current market value (in USD millions) for a list of specified securities.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketValueRequest">Request object for &#x60;Market Value&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketValueResponse</returns>
        public async System.Threading.Tasks.Task<MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper>GetSecurityPricesForListMarketValAsync(MarketValueRequest marketValueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSecurityPricesForListMarketValWithHttpInfoAsync(marketValueRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests the current market value for a list of specified securities. Provides the current market value (in USD millions) for a list of specified securities.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketValueRequest">Request object for &#x60;Market Value&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketValueResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<MarketValueApi.GetSecurityPricesForListMarketValResponseWrapper>> GetSecurityPricesForListMarketValWithHttpInfoAsync(MarketValueRequest marketValueRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'marketValueRequest' is set
            if (marketValueRequest == null)
            {
                throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(400, "Missing required parameter 'marketValueRequest' when calling MarketValueApi->GetSecurityPricesForListMarketVal");
            }


            FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = marketValueRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSecurityPricesForListMarketValResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/factset-global-prices/v1/market-value", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecurityPricesForListMarketVal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getsecuritypricesforlistmarketvalResponse = new GetSecurityPricesForListMarketValResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetSecurityPricesForListMarketValResponseWrapper>(localVarResponse.StatusCode, getsecuritypricesforlistmarketvalResponse);
        }

    }
}
