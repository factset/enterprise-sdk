/*
 * Conversational API Powered by FactSet Mercury
 *
 * ### OVERVIEW  The FactSet Conversational API allows clients to integrate core FactSet Mercury capabilities in chatbot experiences.  The Conversational API is powered by FactSet Mercury, FactSet's Generative Artificial Intelligence (GenAI) large language model. The Conversational API provides a variety of content and capabilities, including FactSet’s Federation layer (FactSet’s core GenAI-based technology), as well as more specific content and functionality tailored for financial services workflows.  The Conversational API provides answers to hundreds of natural language search queries and allows you to easily ask questions related to companies and markets research.  Some example supported prompts:  - Nintendo's highest closing stock price over the last 3 months - Has Yelp issued any guidance? - What are the key trends impacting costs for DaVita?  **For Information on Access to and Content Available via the Conversational API**  Please see the [Conversational API Online Assistant Page](https://my.apps.factset.com/oa/pages/23209). Here you can find instructions on how to set up access to the Conversational API, and the full list of content available.  #### Conversational API Consumer Workflow  The Conversational API is an asynchronous API that utilizes status polling to inform the consumer when a query response is complete. Please see the technical OpenAPI documentation below for specific information regarding consuming the API programmatically.  At a high level, the API consumer workflow is as follows:  1) Send a natural language query to the `/query` endpoint and start the response generation process. 2) Poll the status of the response generation process using the `/status` endpoint. 3) Once the status indicates a ready response, retrieve it using the `/result` endpoint.  - If your response contains a file ID, such as for an Excel chart or a [FactSet ActiveGraph](https://my.apps.factset.com/oa/pages/20355), retrieve it using the file ID at the `/download/file` endpoint. - To provide feedback on your response and help the Conversational API better serve you content, we encourage you to use the `/feedback` endpoint.   #### Receive updates on changes to the Conversational API Subscribe to our FactSet Notify by clicking \"Subscribe to notifications\" in the upper right above the API overview. You will receive email updates when any updates occur to the API  #### FAQ & Troubleshooting Please find FAQs and troubleshooting tips in the [FAQs section](https://my.apps.factset.com/oa/pages/23440) of the Conversational API OA page  ##### Current Limitations  - \"Natural language\" in this documentation refers to modern conversational English. Support for other languages is currently unavailable. - The Conversational API is currently limited to accept 10 natural language queries per minute and 200 per hour for an individual consumer. If you anticipate your needs to be greater than these limits, please reach out to FactSet Support. 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ConversationalAPIPoweredbyFactSetMercury.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ConversationalAPIPoweredbyFactSetMercury.Model
{
    /// <summary>
    /// A single source for the current data item. Contains data excerpt, various citation information, and Document Viewer URL. If the citation is from a transcript, the information of the person who spoke the phrase is included as &#x60;speakerInfo&#x60;.
    /// </summary>
    [DataContract(Name = "Phrase")]
    public partial class Phrase : IEquatable<Phrase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Phrase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Phrase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Phrase" /> class.
        /// </summary>
        /// <param name="phraseId">The unique identifier for the citation phrase in the source document. (required).</param>
        /// <param name="content">Highlighted content of the citation source from which the response was generated. Commonly a document excerpt identified as the source of the data (required).</param>
        /// <param name="sourceURL">The URL of the source document in FactSet&#39;s Document Viewer (see [Document Viewer OA page](https://my.apps.factset.com/oa/pages/17390)). If available, the URL will directly link to the excerpted content highlighted within the document. (required).</param>
        /// <param name="sourceTitle">The title of the citation&#39;s source document. (required).</param>
        /// <param name="sourceDate">The date the citation&#39;s source document was published, represented per ISO 8601 guideline (YYYY-MM-DD). (required).</param>
        /// <param name="speakerInfo">speakerInfo.</param>
        public Phrase(Guid phraseId, string content, string sourceURL, string sourceTitle, DateTime sourceDate,SpeakerInfo speakerInfo = default(SpeakerInfo))
        {
            this.PhraseId = phraseId;
            // to ensure "content" is required (not null)
            if (content == null) {
                throw new ArgumentNullException("content is a required property for Phrase and cannot be null");
            }
            this.Content = content;
            // to ensure "sourceURL" is required (not null)
            if (sourceURL == null) {
                throw new ArgumentNullException("sourceURL is a required property for Phrase and cannot be null");
            }
            this.SourceURL = sourceURL;
            // to ensure "sourceTitle" is required (not null)
            if (sourceTitle == null) {
                throw new ArgumentNullException("sourceTitle is a required property for Phrase and cannot be null");
            }
            this.SourceTitle = sourceTitle;
            this.SourceDate = sourceDate;
            this.SpeakerInfo = speakerInfo;
        }

        /// <summary>
        /// The unique identifier for the citation phrase in the source document.
        /// </summary>
        /// <value>The unique identifier for the citation phrase in the source document.</value>
        [DataMember(Name = "phraseId", IsRequired = true, EmitDefaultValue = false)]
        public Guid PhraseId { get; set; }

        /// <summary>
        /// Highlighted content of the citation source from which the response was generated. Commonly a document excerpt identified as the source of the data
        /// </summary>
        /// <value>Highlighted content of the citation source from which the response was generated. Commonly a document excerpt identified as the source of the data</value>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// The URL of the source document in FactSet&#39;s Document Viewer (see [Document Viewer OA page](https://my.apps.factset.com/oa/pages/17390)). If available, the URL will directly link to the excerpted content highlighted within the document.
        /// </summary>
        /// <value>The URL of the source document in FactSet&#39;s Document Viewer (see [Document Viewer OA page](https://my.apps.factset.com/oa/pages/17390)). If available, the URL will directly link to the excerpted content highlighted within the document.</value>
        [DataMember(Name = "sourceURL", IsRequired = true, EmitDefaultValue = false)]
        public string SourceURL { get; set; }

        /// <summary>
        /// The title of the citation&#39;s source document.
        /// </summary>
        /// <value>The title of the citation&#39;s source document.</value>
        [DataMember(Name = "sourceTitle", IsRequired = true, EmitDefaultValue = false)]
        public string SourceTitle { get; set; }

        /// <summary>
        /// The date the citation&#39;s source document was published, represented per ISO 8601 guideline (YYYY-MM-DD).
        /// </summary>
        /// <value>The date the citation&#39;s source document was published, represented per ISO 8601 guideline (YYYY-MM-DD).</value>
        [DataMember(Name = "sourceDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime SourceDate { get; set; }

        /// <summary>
        /// Gets or Sets SpeakerInfo
        /// </summary>
        [DataMember(Name = "speakerInfo", EmitDefaultValue = true)]
        public SpeakerInfo SpeakerInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Phrase {\n");
            sb.Append("  PhraseId: ").Append(PhraseId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  SourceURL: ").Append(SourceURL).Append("\n");
            sb.Append("  SourceTitle: ").Append(SourceTitle).Append("\n");
            sb.Append("  SourceDate: ").Append(SourceDate).Append("\n");
            sb.Append("  SpeakerInfo: ").Append(SpeakerInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Phrase);
        }

        /// <summary>
        /// Returns true if Phrase instances are equal
        /// </summary>
        /// <param name="input">Instance of Phrase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Phrase input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PhraseId == input.PhraseId ||
                    (this.PhraseId != null &&
                    this.PhraseId.Equals(input.PhraseId))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.SourceURL == input.SourceURL ||
                    (this.SourceURL != null &&
                    this.SourceURL.Equals(input.SourceURL))
                ) && 
                (
                    this.SourceTitle == input.SourceTitle ||
                    (this.SourceTitle != null &&
                    this.SourceTitle.Equals(input.SourceTitle))
                ) && 
                (
                    this.SourceDate == input.SourceDate ||
                    (this.SourceDate != null &&
                    this.SourceDate.Equals(input.SourceDate))
                ) && 
                (
                    this.SpeakerInfo == input.SpeakerInfo ||
                    (this.SpeakerInfo != null &&
                    this.SpeakerInfo.Equals(input.SpeakerInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PhraseId != null)
                {
                    hashCode = (hashCode * 59) + this.PhraseId.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.SourceURL != null)
                {
                    hashCode = (hashCode * 59) + this.SourceURL.GetHashCode();
                }
                if (this.SourceTitle != null)
                {
                    hashCode = (hashCode * 59) + this.SourceTitle.GetHashCode();
                }
                if (this.SourceDate != null)
                {
                    hashCode = (hashCode * 59) + this.SourceDate.GetHashCode();
                }
                if (this.SpeakerInfo != null)
                {
                    hashCode = (hashCode * 59) + this.SpeakerInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
