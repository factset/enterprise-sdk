/*
 * FactSet GeoRev API
 *
 * FactSet Revere Geographic Revenue (\"GeoRev\") Exposure data provides a highly structured and normalized display of companies' revenues by geography. Using a four level taxonomy structure, understand the companies' Super-Region- ->Region- ->Area- ->Country revenue breakdowns. Quickly understand a company's revenue exposure in countries impacted by geopolitical, macroeconomic, and market risk. Understand the geographic footprint of a company based on sources of revenue versus country of domicile, and analyze global revenue exposures at the company, index, or portfolio level.<p> Geographic revenue has historically been difficult to analyze due to companies' non-standard and incomplete reporting. Investors relying solely on this as-reported data are limited in their ability to compare, aggregate or screen exposures across a universe or portfolio of companies. To achieve normalization, FactSet GeoRev captures data through a proprietary four-level geographic classification structure. An estimation algorithm based on GDP weighting and accounting logic is then applied to solve for any non-explicit disclosures. The result is a consistent, accurate, and flexible dataset that can take a company's revenues and break them down into any geographic country or region categories.</p><p>As markets become more integrated and companies expand operations beyond their domestic markets, GeoRev provides a new and valuable country factor to help investors discover alpha, model risk exposure, optimize portfolio weighting, and improve fund administration and reporting.</p><p>Data Frequency -  Annual; Update Frequency - Daily. 49,000+ Publically Listed Companies. All Russell 3000 and MSCI ACWI Index Consituents. U.S. Data is available from 2003, with Non-US data from 2007. For more details, visit [OA 17555](https://my.apps.factset.com/oa/pages/17555)</p><p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetGeoRev.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetGeoRev.Model
{
    /// <summary>
    /// Region
    /// </summary>
    [DataContract(Name = "region")]
    public partial class Region : IEquatable<Region>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Region" /> class.
        /// </summary>
        /// <param name="date">Ending date for the period requested expressed in YYYY-MM-DD format..</param>
        /// <param name="fsymId">FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E)..</param>
        /// <param name="regionId">Identifier representing the geographic Region..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="regionCertaintyClass">Designated classes from A (highest) to E (lowest) based on &#x60;regionCertaintyRank&#x60;, where - -&gt;  |Class|Minimum Certainty Rank|Maximum Certainty Rank| |- --|- --|- --| |A|71|80| |B|57|70| |C|42|56| |D|24|41| |E|1|23| .</param>
        /// <param name="regionCertaintyRank">Indicates the relative reliability of estimates. Ranks are based on multiple factors related to the reported information and the algorithmic estimation. Ranks range from 1 to 80, with 1 indicating the lowest certainty in the estimate, and 80 indicating a reported exposure. Certainty Rank factors include -  * Reporting standards of the country where the source annual report/filing was filed * A company&#39;s previous years&#39; country-level reporting * Reliability of country GDP data * Proportion of total report value that must be estimated .</param>
        /// <param name="regionConfidence">Returns the confidence score for the company percentage revenue for the selected geographic area. Confidence score is a measure of how confident we are that our algorithm has done a good job in estimating geographic revenue given the estimation parameters ( GDP, accounting standards, details of data that a company has disclosed,...). Confidence Factors are calculated for all estimated country values, then weighted and aggregated up the geographic tree for areas, regions, and super regions. The confidence factor should not be interpreted as the equivalent of a confidence interval from a statistical sense. The confidence factor is ordinal by nature, and its current range of 0.5000 to 1.0000. A confidence factor of 1.000 indicates that the revenue is an actual, reported, or declared value. **Please see OA page 17555 for more details **. .</param>
        /// <param name="regionName">The Region Name in proper format, describing the regionId..</param>
        /// <param name="regionPercent">Returns the company percentage revenue for the selected geographic region. Conventional geographic revenue data are difficult to interpret and compare between companies because they are not normalized. Furthermore, these non-normalized geographic revenue data do not provide any exposure estimates on countries and regions that are not explicitly disclosed by the companies. GeoRev answers these two challenges by first mapping companies&#39; revenues to a normalized geographic taxonomy, and then applying a proprietary algorithm to estimate % revenue exposure to countries and regions that are not explicitly disclosed. Estimates are accompanied by a Confidence Factor, which offers an easy way to distinguish them from actual disclosed values. Please see OA page 17555 for more details. .</param>
        /// <param name="regionRevenue">Returns the company revenue for the selected geographic region in Millions for the requested currency. Conventional geographic revenue data are difficult to interpret and compare between companies because they are not normalized. Furthermore, these non-normalized geographic revenue data do not provide any exposure estimates on countries and regions that are not explicitly disclosed by the companies. GeoRev answers these two challenges by first mapping companies&#39; revenues to a normalized geographic taxonomy, and then applying a proprietary algorithm to estimate % revenue exposure to countries and regions that are not explicitly disclosed. Estimates are accompanied by a Confidence Factor, which offers an easy way to distinguish them from actual disclosed values. Please see OA page 17555 for more details.  .</param>
        /// <param name="currency">The Currency Code representing the Revenue values in the response..</param>
        /// <param name="fiscalEndDate">The latest fully reported fiscal annual period date in YYYY-MM-DD format as of the dates requested..</param>
        /// <param name="reportDate">The Report Date for the latest fully reported fiscal year in YYYY-MM-DD format..</param>
        public Region(DateTime? date = default(DateTime?), string fsymId = default(string), string regionId = default(string), string requestId = default(string), string regionCertaintyClass = default(string), int? regionCertaintyRank = default(int?), double? regionConfidence = default(double?), string regionName = default(string), double? regionPercent = default(double?), double? regionRevenue = default(double?), string currency = default(string), DateTime? fiscalEndDate = default(DateTime?), DateTime? reportDate = default(DateTime?))
        {
            this.Date = date;
            this.FsymId = fsymId;
            this.RegionId = regionId;
            this.RequestId = requestId;
            this.RegionCertaintyClass = regionCertaintyClass;
            this.RegionCertaintyRank = regionCertaintyRank;
            this.RegionConfidence = regionConfidence;
            this.RegionName = regionName;
            this.RegionPercent = regionPercent;
            this.RegionRevenue = regionRevenue;
            this.Currency = currency;
            this.FiscalEndDate = fiscalEndDate;
            this.ReportDate = reportDate;
        }

        /// <summary>
        /// Ending date for the period requested expressed in YYYY-MM-DD format.
        /// </summary>
        /// <value>Ending date for the period requested expressed in YYYY-MM-DD format.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).
        /// </summary>
        /// <value>FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Identifier representing the geographic Region.
        /// </summary>
        /// <value>Identifier representing the geographic Region.</value>
        [DataMember(Name = "regionId", EmitDefaultValue = true)]
        public string RegionId { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Designated classes from A (highest) to E (lowest) based on &#x60;regionCertaintyRank&#x60;, where - -&gt;  |Class|Minimum Certainty Rank|Maximum Certainty Rank| |- --|- --|- --| |A|71|80| |B|57|70| |C|42|56| |D|24|41| |E|1|23| 
        /// </summary>
        /// <value>Designated classes from A (highest) to E (lowest) based on &#x60;regionCertaintyRank&#x60;, where - -&gt;  |Class|Minimum Certainty Rank|Maximum Certainty Rank| |- --|- --|- --| |A|71|80| |B|57|70| |C|42|56| |D|24|41| |E|1|23| </value>
        [DataMember(Name = "regionCertaintyClass", EmitDefaultValue = true)]
        public string RegionCertaintyClass { get; set; }

        /// <summary>
        /// Indicates the relative reliability of estimates. Ranks are based on multiple factors related to the reported information and the algorithmic estimation. Ranks range from 1 to 80, with 1 indicating the lowest certainty in the estimate, and 80 indicating a reported exposure. Certainty Rank factors include -  * Reporting standards of the country where the source annual report/filing was filed * A company&#39;s previous years&#39; country-level reporting * Reliability of country GDP data * Proportion of total report value that must be estimated 
        /// </summary>
        /// <value>Indicates the relative reliability of estimates. Ranks are based on multiple factors related to the reported information and the algorithmic estimation. Ranks range from 1 to 80, with 1 indicating the lowest certainty in the estimate, and 80 indicating a reported exposure. Certainty Rank factors include -  * Reporting standards of the country where the source annual report/filing was filed * A company&#39;s previous years&#39; country-level reporting * Reliability of country GDP data * Proportion of total report value that must be estimated </value>
        [DataMember(Name = "regionCertaintyRank", EmitDefaultValue = true)]
        public int? RegionCertaintyRank { get; set; }

        /// <summary>
        /// Returns the confidence score for the company percentage revenue for the selected geographic area. Confidence score is a measure of how confident we are that our algorithm has done a good job in estimating geographic revenue given the estimation parameters ( GDP, accounting standards, details of data that a company has disclosed,...). Confidence Factors are calculated for all estimated country values, then weighted and aggregated up the geographic tree for areas, regions, and super regions. The confidence factor should not be interpreted as the equivalent of a confidence interval from a statistical sense. The confidence factor is ordinal by nature, and its current range of 0.5000 to 1.0000. A confidence factor of 1.000 indicates that the revenue is an actual, reported, or declared value. **Please see OA page 17555 for more details **. 
        /// </summary>
        /// <value>Returns the confidence score for the company percentage revenue for the selected geographic area. Confidence score is a measure of how confident we are that our algorithm has done a good job in estimating geographic revenue given the estimation parameters ( GDP, accounting standards, details of data that a company has disclosed,...). Confidence Factors are calculated for all estimated country values, then weighted and aggregated up the geographic tree for areas, regions, and super regions. The confidence factor should not be interpreted as the equivalent of a confidence interval from a statistical sense. The confidence factor is ordinal by nature, and its current range of 0.5000 to 1.0000. A confidence factor of 1.000 indicates that the revenue is an actual, reported, or declared value. **Please see OA page 17555 for more details **. </value>
        [DataMember(Name = "regionConfidence", EmitDefaultValue = true)]
        public double? RegionConfidence { get; set; }

        /// <summary>
        /// The Region Name in proper format, describing the regionId.
        /// </summary>
        /// <value>The Region Name in proper format, describing the regionId.</value>
        [DataMember(Name = "regionName", EmitDefaultValue = true)]
        public string RegionName { get; set; }

        /// <summary>
        /// Returns the company percentage revenue for the selected geographic region. Conventional geographic revenue data are difficult to interpret and compare between companies because they are not normalized. Furthermore, these non-normalized geographic revenue data do not provide any exposure estimates on countries and regions that are not explicitly disclosed by the companies. GeoRev answers these two challenges by first mapping companies&#39; revenues to a normalized geographic taxonomy, and then applying a proprietary algorithm to estimate % revenue exposure to countries and regions that are not explicitly disclosed. Estimates are accompanied by a Confidence Factor, which offers an easy way to distinguish them from actual disclosed values. Please see OA page 17555 for more details. 
        /// </summary>
        /// <value>Returns the company percentage revenue for the selected geographic region. Conventional geographic revenue data are difficult to interpret and compare between companies because they are not normalized. Furthermore, these non-normalized geographic revenue data do not provide any exposure estimates on countries and regions that are not explicitly disclosed by the companies. GeoRev answers these two challenges by first mapping companies&#39; revenues to a normalized geographic taxonomy, and then applying a proprietary algorithm to estimate % revenue exposure to countries and regions that are not explicitly disclosed. Estimates are accompanied by a Confidence Factor, which offers an easy way to distinguish them from actual disclosed values. Please see OA page 17555 for more details. </value>
        [DataMember(Name = "regionPercent", EmitDefaultValue = true)]
        public double? RegionPercent { get; set; }

        /// <summary>
        /// Returns the company revenue for the selected geographic region in Millions for the requested currency. Conventional geographic revenue data are difficult to interpret and compare between companies because they are not normalized. Furthermore, these non-normalized geographic revenue data do not provide any exposure estimates on countries and regions that are not explicitly disclosed by the companies. GeoRev answers these two challenges by first mapping companies&#39; revenues to a normalized geographic taxonomy, and then applying a proprietary algorithm to estimate % revenue exposure to countries and regions that are not explicitly disclosed. Estimates are accompanied by a Confidence Factor, which offers an easy way to distinguish them from actual disclosed values. Please see OA page 17555 for more details.  
        /// </summary>
        /// <value>Returns the company revenue for the selected geographic region in Millions for the requested currency. Conventional geographic revenue data are difficult to interpret and compare between companies because they are not normalized. Furthermore, these non-normalized geographic revenue data do not provide any exposure estimates on countries and regions that are not explicitly disclosed by the companies. GeoRev answers these two challenges by first mapping companies&#39; revenues to a normalized geographic taxonomy, and then applying a proprietary algorithm to estimate % revenue exposure to countries and regions that are not explicitly disclosed. Estimates are accompanied by a Confidence Factor, which offers an easy way to distinguish them from actual disclosed values. Please see OA page 17555 for more details.  </value>
        [DataMember(Name = "regionRevenue", EmitDefaultValue = true)]
        public double? RegionRevenue { get; set; }

        /// <summary>
        /// The Currency Code representing the Revenue values in the response.
        /// </summary>
        /// <value>The Currency Code representing the Revenue values in the response.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The latest fully reported fiscal annual period date in YYYY-MM-DD format as of the dates requested.
        /// </summary>
        /// <value>The latest fully reported fiscal annual period date in YYYY-MM-DD format as of the dates requested.</value>
        [DataMember(Name = "fiscalEndDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? FiscalEndDate { get; set; }

        /// <summary>
        /// The Report Date for the latest fully reported fiscal year in YYYY-MM-DD format.
        /// </summary>
        /// <value>The Report Date for the latest fully reported fiscal year in YYYY-MM-DD format.</value>
        [DataMember(Name = "reportDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ReportDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Region {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  RegionCertaintyClass: ").Append(RegionCertaintyClass).Append("\n");
            sb.Append("  RegionCertaintyRank: ").Append(RegionCertaintyRank).Append("\n");
            sb.Append("  RegionConfidence: ").Append(RegionConfidence).Append("\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  RegionPercent: ").Append(RegionPercent).Append("\n");
            sb.Append("  RegionRevenue: ").Append(RegionRevenue).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  FiscalEndDate: ").Append(FiscalEndDate).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Region);
        }

        /// <summary>
        /// Returns true if Region instances are equal
        /// </summary>
        /// <param name="input">Instance of Region to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Region input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.RegionId == input.RegionId ||
                    (this.RegionId != null &&
                    this.RegionId.Equals(input.RegionId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.RegionCertaintyClass == input.RegionCertaintyClass ||
                    (this.RegionCertaintyClass != null &&
                    this.RegionCertaintyClass.Equals(input.RegionCertaintyClass))
                ) && 
                (
                    this.RegionCertaintyRank == input.RegionCertaintyRank ||
                    (this.RegionCertaintyRank != null &&
                    this.RegionCertaintyRank.Equals(input.RegionCertaintyRank))
                ) && 
                (
                    this.RegionConfidence == input.RegionConfidence ||
                    (this.RegionConfidence != null &&
                    this.RegionConfidence.Equals(input.RegionConfidence))
                ) && 
                (
                    this.RegionName == input.RegionName ||
                    (this.RegionName != null &&
                    this.RegionName.Equals(input.RegionName))
                ) && 
                (
                    this.RegionPercent == input.RegionPercent ||
                    (this.RegionPercent != null &&
                    this.RegionPercent.Equals(input.RegionPercent))
                ) && 
                (
                    this.RegionRevenue == input.RegionRevenue ||
                    (this.RegionRevenue != null &&
                    this.RegionRevenue.Equals(input.RegionRevenue))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.FiscalEndDate == input.FiscalEndDate ||
                    (this.FiscalEndDate != null &&
                    this.FiscalEndDate.Equals(input.FiscalEndDate))
                ) && 
                (
                    this.ReportDate == input.ReportDate ||
                    (this.ReportDate != null &&
                    this.ReportDate.Equals(input.ReportDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.RegionId != null)
                {
                    hashCode = (hashCode * 59) + this.RegionId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.RegionCertaintyClass != null)
                {
                    hashCode = (hashCode * 59) + this.RegionCertaintyClass.GetHashCode();
                }
                if (this.RegionCertaintyRank != null)
                {
                    hashCode = (hashCode * 59) + this.RegionCertaintyRank.GetHashCode();
                }
                if (this.RegionConfidence != null)
                {
                    hashCode = (hashCode * 59) + this.RegionConfidence.GetHashCode();
                }
                if (this.RegionName != null)
                {
                    hashCode = (hashCode * 59) + this.RegionName.GetHashCode();
                }
                if (this.RegionPercent != null)
                {
                    hashCode = (hashCode * 59) + this.RegionPercent.GetHashCode();
                }
                if (this.RegionRevenue != null)
                {
                    hashCode = (hashCode * 59) + this.RegionRevenue.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.FiscalEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalEndDate.GetHashCode();
                }
                if (this.ReportDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReportDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
