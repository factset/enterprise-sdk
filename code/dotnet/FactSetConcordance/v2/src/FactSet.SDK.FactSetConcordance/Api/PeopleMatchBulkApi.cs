/*
 * FactSet Concordance API
 *
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetConcordance.Client;
using FactSet.SDK.FactSetConcordance.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetConcordance.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleMatchBulkApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an People Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>PeopleDecisionsResponse</returns>
        PeopleDecisionsResponse GetPeopleDecisions(int taskId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an People Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>ApiResponse of PeopleDecisionsResponse</returns>
        ApiResponse<PeopleDecisionsResponse> GetPeopleDecisionsWithHttpInfo(int taskId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Create a People Concordance Task.
        /// </summary>
        /// <remarks>
        /// The \&quot;Bulk\&quot; workflow allows the user to create a People Concordance Task. Uploading of a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and creation of a task id is mandatory to start the process. [Concordance Sample People Template](https://my.apps.factset.com/oa/cms/oaAttachment/8bd62c75-8f78-48c0-a27d-9cd186c9a54a/27317)    The taskId is then used for reference in the /people-task-status and /people-decisions endpoints to receive results once the task is successful.The /people-task-status endpoint is to check the status of the Tasks as per the ids.     A universeId must be included in request. If you do not have a universe created, reference the /universe endpoint.The bulk workflow supports a two way approach for the user.   **The user can use these parameters in the following ways.**     1.Filling all the required fields including the &#x60;personNameColumn&#x60;.(do not include &#x60;firstNameColumn&#x60;,&#x60;lastNameColumn&#x60; &amp; &#x60;middleNameColumn&#x60;)     2.Filling all the required fields excluding the &#x60;personNameColumn&#x60;.(Ensure atleast the &#x60;lastNameColumn&#x60; is filled) 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="entityColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="firstNameColumn">First name of the person.**Do not include with &#x60;personNameColumn&#x60;**.   (optional)</param>
        /// <param name="lastNameColumn">Lat name of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="middleNameColumn">Middle name of the person.**Do not include within &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="personNameColumn">Header name of the column in the input file that contains the name of the person to be matched. **Do not include with &#x60;firstNameColumn&#x60; and &#x60;lastNameColumn&#x60;.**  (optional)</param>
        /// <param name="priorityColumn">Priority associated to the clientId. Used for manual mapping.  (optional)</param>
        /// <param name="salutationColumn">The salutation of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="suffixColumn">A name suffix, that follows a person&#39;s full name and provides additional information about the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <returns>PeopleTaskResponse</returns>
        PeopleTaskResponse GetPeopleTaskForList(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string entityColumn, List<string> additionalContextColumns = default(List<string>), string firstNameColumn = default(string), string lastNameColumn = default(string), string middleNameColumn = default(string), string personNameColumn = default(string), string priorityColumn = default(string), string salutationColumn = default(string), string suffixColumn = default(string));

        /// <summary>
        /// Create a People Concordance Task.
        /// </summary>
        /// <remarks>
        /// The \&quot;Bulk\&quot; workflow allows the user to create a People Concordance Task. Uploading of a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and creation of a task id is mandatory to start the process. [Concordance Sample People Template](https://my.apps.factset.com/oa/cms/oaAttachment/8bd62c75-8f78-48c0-a27d-9cd186c9a54a/27317)    The taskId is then used for reference in the /people-task-status and /people-decisions endpoints to receive results once the task is successful.The /people-task-status endpoint is to check the status of the Tasks as per the ids.     A universeId must be included in request. If you do not have a universe created, reference the /universe endpoint.The bulk workflow supports a two way approach for the user.   **The user can use these parameters in the following ways.**     1.Filling all the required fields including the &#x60;personNameColumn&#x60;.(do not include &#x60;firstNameColumn&#x60;,&#x60;lastNameColumn&#x60; &amp; &#x60;middleNameColumn&#x60;)     2.Filling all the required fields excluding the &#x60;personNameColumn&#x60;.(Ensure atleast the &#x60;lastNameColumn&#x60; is filled) 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="entityColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="firstNameColumn">First name of the person.**Do not include with &#x60;personNameColumn&#x60;**.   (optional)</param>
        /// <param name="lastNameColumn">Lat name of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="middleNameColumn">Middle name of the person.**Do not include within &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="personNameColumn">Header name of the column in the input file that contains the name of the person to be matched. **Do not include with &#x60;firstNameColumn&#x60; and &#x60;lastNameColumn&#x60;.**  (optional)</param>
        /// <param name="priorityColumn">Priority associated to the clientId. Used for manual mapping.  (optional)</param>
        /// <param name="salutationColumn">The salutation of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="suffixColumn">A name suffix, that follows a person&#39;s full name and provides additional information about the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <returns>ApiResponse of PeopleTaskResponse</returns>
        ApiResponse<PeopleTaskResponse> GetPeopleTaskForListWithHttpInfo(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string entityColumn, List<string> additionalContextColumns = default(List<string>), string firstNameColumn = default(string), string lastNameColumn = default(string), string middleNameColumn = default(string), string personNameColumn = default(string), string priorityColumn = default(string), string salutationColumn = default(string), string suffixColumn = default(string));
        /// <summary>
        /// Get the Status of the People Tasks.
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the People Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /people-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>PeopleTaskStatusResponse</returns>
        PeopleTaskStatusResponse GetPeopleTaskStatus(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>));

        /// <summary>
        /// Get the Status of the People Tasks.
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the People Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /people-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>ApiResponse of PeopleTaskStatusResponse</returns>
        ApiResponse<PeopleTaskStatusResponse> GetPeopleTaskStatusWithHttpInfo(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleMatchBulkApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an People Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleDecisionsResponse</returns>
        System.Threading.Tasks.Task<PeopleDecisionsResponse> GetPeopleDecisionsAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an People Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleDecisionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeopleDecisionsResponse>> GetPeopleDecisionsWithHttpInfoAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a People Concordance Task.
        /// </summary>
        /// <remarks>
        /// The \&quot;Bulk\&quot; workflow allows the user to create a People Concordance Task. Uploading of a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and creation of a task id is mandatory to start the process. [Concordance Sample People Template](https://my.apps.factset.com/oa/cms/oaAttachment/8bd62c75-8f78-48c0-a27d-9cd186c9a54a/27317)    The taskId is then used for reference in the /people-task-status and /people-decisions endpoints to receive results once the task is successful.The /people-task-status endpoint is to check the status of the Tasks as per the ids.     A universeId must be included in request. If you do not have a universe created, reference the /universe endpoint.The bulk workflow supports a two way approach for the user.   **The user can use these parameters in the following ways.**     1.Filling all the required fields including the &#x60;personNameColumn&#x60;.(do not include &#x60;firstNameColumn&#x60;,&#x60;lastNameColumn&#x60; &amp; &#x60;middleNameColumn&#x60;)     2.Filling all the required fields excluding the &#x60;personNameColumn&#x60;.(Ensure atleast the &#x60;lastNameColumn&#x60; is filled) 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="entityColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="firstNameColumn">First name of the person.**Do not include with &#x60;personNameColumn&#x60;**.   (optional)</param>
        /// <param name="lastNameColumn">Lat name of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="middleNameColumn">Middle name of the person.**Do not include within &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="personNameColumn">Header name of the column in the input file that contains the name of the person to be matched. **Do not include with &#x60;firstNameColumn&#x60; and &#x60;lastNameColumn&#x60;.**  (optional)</param>
        /// <param name="priorityColumn">Priority associated to the clientId. Used for manual mapping.  (optional)</param>
        /// <param name="salutationColumn">The salutation of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="suffixColumn">A name suffix, that follows a person&#39;s full name and provides additional information about the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleTaskResponse</returns>
        System.Threading.Tasks.Task<PeopleTaskResponse> GetPeopleTaskForListAsync(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string entityColumn, List<string> additionalContextColumns = default(List<string>), string firstNameColumn = default(string), string lastNameColumn = default(string), string middleNameColumn = default(string), string personNameColumn = default(string), string priorityColumn = default(string), string salutationColumn = default(string), string suffixColumn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a People Concordance Task.
        /// </summary>
        /// <remarks>
        /// The \&quot;Bulk\&quot; workflow allows the user to create a People Concordance Task. Uploading of a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and creation of a task id is mandatory to start the process. [Concordance Sample People Template](https://my.apps.factset.com/oa/cms/oaAttachment/8bd62c75-8f78-48c0-a27d-9cd186c9a54a/27317)    The taskId is then used for reference in the /people-task-status and /people-decisions endpoints to receive results once the task is successful.The /people-task-status endpoint is to check the status of the Tasks as per the ids.     A universeId must be included in request. If you do not have a universe created, reference the /universe endpoint.The bulk workflow supports a two way approach for the user.   **The user can use these parameters in the following ways.**     1.Filling all the required fields including the &#x60;personNameColumn&#x60;.(do not include &#x60;firstNameColumn&#x60;,&#x60;lastNameColumn&#x60; &amp; &#x60;middleNameColumn&#x60;)     2.Filling all the required fields excluding the &#x60;personNameColumn&#x60;.(Ensure atleast the &#x60;lastNameColumn&#x60; is filled) 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="entityColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="firstNameColumn">First name of the person.**Do not include with &#x60;personNameColumn&#x60;**.   (optional)</param>
        /// <param name="lastNameColumn">Lat name of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="middleNameColumn">Middle name of the person.**Do not include within &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="personNameColumn">Header name of the column in the input file that contains the name of the person to be matched. **Do not include with &#x60;firstNameColumn&#x60; and &#x60;lastNameColumn&#x60;.**  (optional)</param>
        /// <param name="priorityColumn">Priority associated to the clientId. Used for manual mapping.  (optional)</param>
        /// <param name="salutationColumn">The salutation of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="suffixColumn">A name suffix, that follows a person&#39;s full name and provides additional information about the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeopleTaskResponse>> GetPeopleTaskForListWithHttpInfoAsync(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string entityColumn, List<string> additionalContextColumns = default(List<string>), string firstNameColumn = default(string), string lastNameColumn = default(string), string middleNameColumn = default(string), string personNameColumn = default(string), string priorityColumn = default(string), string salutationColumn = default(string), string suffixColumn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Status of the People Tasks.
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the People Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /people-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleTaskStatusResponse</returns>
        System.Threading.Tasks.Task<PeopleTaskStatusResponse> GetPeopleTaskStatusAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Status of the People Tasks.
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the People Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /people-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleTaskStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeopleTaskStatusResponse>> GetPeopleTaskStatusWithHttpInfoAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleMatchBulkApi : IPeopleMatchBulkApiSync, IPeopleMatchBulkApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PeopleMatchBulkApi : IPeopleMatchBulkApi
    {
        private FactSet.SDK.FactSetConcordance.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetPeopleDecisionsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PeopleDecisionsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPeopleTaskForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PeopleTaskResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPeopleTaskStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PeopleTaskStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleMatchBulkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeopleMatchBulkApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleMatchBulkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeopleMatchBulkApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetConcordance.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetConcordance.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetConcordance.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleMatchBulkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PeopleMatchBulkApi(FactSet.SDK.FactSetConcordance.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetConcordance.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetConcordance.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleMatchBulkApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PeopleMatchBulkApi(FactSet.SDK.FactSetConcordance.Client.ISynchronousClient client, FactSet.SDK.FactSetConcordance.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetConcordance.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetConcordance.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an People Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>PeopleDecisionsResponse</returns>
        public PeopleDecisionsResponse GetPeopleDecisions(int taskId, int? offset = default(int?), int? limit = default(int?))
        {
            var localVarResponse = GetPeopleDecisionsWithHttpInfo(taskId, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an People Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>ApiResponse of PeopleDecisionsResponse</returns>
        public ApiResponse<PeopleDecisionsResponse> GetPeopleDecisionsWithHttpInfo(int taskId, int? offset = default(int?), int? limit = default(int?))
        {
            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPeopleDecisionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            PeopleDecisionsResponse>("/factset-concordance/v2/people-decisions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleDecisions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an People Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleDecisionsResponse</returns>
        public async System.Threading.Tasks.Task<PeopleDecisionsResponse>GetPeopleDecisionsAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPeopleDecisionsWithHttpInfoAsync(taskId, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an People Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleDecisionsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PeopleDecisionsResponse>> GetPeopleDecisionsWithHttpInfoAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPeopleDecisionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PeopleDecisionsResponse>("/factset-concordance/v2/people-decisions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleDecisions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a People Concordance Task. The \&quot;Bulk\&quot; workflow allows the user to create a People Concordance Task. Uploading of a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and creation of a task id is mandatory to start the process. [Concordance Sample People Template](https://my.apps.factset.com/oa/cms/oaAttachment/8bd62c75-8f78-48c0-a27d-9cd186c9a54a/27317)    The taskId is then used for reference in the /people-task-status and /people-decisions endpoints to receive results once the task is successful.The /people-task-status endpoint is to check the status of the Tasks as per the ids.     A universeId must be included in request. If you do not have a universe created, reference the /universe endpoint.The bulk workflow supports a two way approach for the user.   **The user can use these parameters in the following ways.**     1.Filling all the required fields including the &#x60;personNameColumn&#x60;.(do not include &#x60;firstNameColumn&#x60;,&#x60;lastNameColumn&#x60; &amp; &#x60;middleNameColumn&#x60;)     2.Filling all the required fields excluding the &#x60;personNameColumn&#x60;.(Ensure atleast the &#x60;lastNameColumn&#x60; is filled) 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="entityColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="firstNameColumn">First name of the person.**Do not include with &#x60;personNameColumn&#x60;**.   (optional)</param>
        /// <param name="lastNameColumn">Lat name of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="middleNameColumn">Middle name of the person.**Do not include within &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="personNameColumn">Header name of the column in the input file that contains the name of the person to be matched. **Do not include with &#x60;firstNameColumn&#x60; and &#x60;lastNameColumn&#x60;.**  (optional)</param>
        /// <param name="priorityColumn">Priority associated to the clientId. Used for manual mapping.  (optional)</param>
        /// <param name="salutationColumn">The salutation of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="suffixColumn">A name suffix, that follows a person&#39;s full name and provides additional information about the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <returns>PeopleTaskResponse</returns>
        public PeopleTaskResponse GetPeopleTaskForList(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string entityColumn, List<string> additionalContextColumns = default(List<string>), string firstNameColumn = default(string), string lastNameColumn = default(string), string middleNameColumn = default(string), string personNameColumn = default(string), string priorityColumn = default(string), string salutationColumn = default(string), string suffixColumn = default(string))
        {
            var localVarResponse = GetPeopleTaskForListWithHttpInfo(universeId, taskName, inputFile, clientIdColumn, entityColumn, additionalContextColumns, firstNameColumn, lastNameColumn, middleNameColumn, personNameColumn, priorityColumn, salutationColumn, suffixColumn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a People Concordance Task. The \&quot;Bulk\&quot; workflow allows the user to create a People Concordance Task. Uploading of a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and creation of a task id is mandatory to start the process. [Concordance Sample People Template](https://my.apps.factset.com/oa/cms/oaAttachment/8bd62c75-8f78-48c0-a27d-9cd186c9a54a/27317)    The taskId is then used for reference in the /people-task-status and /people-decisions endpoints to receive results once the task is successful.The /people-task-status endpoint is to check the status of the Tasks as per the ids.     A universeId must be included in request. If you do not have a universe created, reference the /universe endpoint.The bulk workflow supports a two way approach for the user.   **The user can use these parameters in the following ways.**     1.Filling all the required fields including the &#x60;personNameColumn&#x60;.(do not include &#x60;firstNameColumn&#x60;,&#x60;lastNameColumn&#x60; &amp; &#x60;middleNameColumn&#x60;)     2.Filling all the required fields excluding the &#x60;personNameColumn&#x60;.(Ensure atleast the &#x60;lastNameColumn&#x60; is filled) 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="entityColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="firstNameColumn">First name of the person.**Do not include with &#x60;personNameColumn&#x60;**.   (optional)</param>
        /// <param name="lastNameColumn">Lat name of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="middleNameColumn">Middle name of the person.**Do not include within &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="personNameColumn">Header name of the column in the input file that contains the name of the person to be matched. **Do not include with &#x60;firstNameColumn&#x60; and &#x60;lastNameColumn&#x60;.**  (optional)</param>
        /// <param name="priorityColumn">Priority associated to the clientId. Used for manual mapping.  (optional)</param>
        /// <param name="salutationColumn">The salutation of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="suffixColumn">A name suffix, that follows a person&#39;s full name and provides additional information about the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <returns>ApiResponse of PeopleTaskResponse</returns>
        public ApiResponse<PeopleTaskResponse> GetPeopleTaskForListWithHttpInfo(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string entityColumn, List<string> additionalContextColumns = default(List<string>), string firstNameColumn = default(string), string lastNameColumn = default(string), string middleNameColumn = default(string), string personNameColumn = default(string), string priorityColumn = default(string), string salutationColumn = default(string), string suffixColumn = default(string))
        {
            // verify the required parameter 'taskName' is set
            if (taskName == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'taskName' when calling PeopleMatchBulkApi->GetPeopleTaskForList");
            }

            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'inputFile' when calling PeopleMatchBulkApi->GetPeopleTaskForList");
            }

            // verify the required parameter 'clientIdColumn' is set
            if (clientIdColumn == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'clientIdColumn' when calling PeopleMatchBulkApi->GetPeopleTaskForList");
            }

            // verify the required parameter 'entityColumn' is set
            if (entityColumn == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'entityColumn' when calling PeopleMatchBulkApi->GetPeopleTaskForList");
            }

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("universeId", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(universeId)); // form parameter
            localVarRequestOptions.FormParameters.Add("taskName", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(taskName)); // form parameter
            localVarRequestOptions.FileParameters.Add("inputFile", inputFile);
            localVarRequestOptions.FormParameters.Add("clientIdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(clientIdColumn)); // form parameter
            if (additionalContextColumns != null)
            {
                localVarRequestOptions.FormParameters.Add("additionalContextColumns", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(additionalContextColumns)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("entityColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(entityColumn)); // form parameter
            if (firstNameColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("firstNameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(firstNameColumn)); // form parameter
            }
            if (lastNameColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("lastNameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(lastNameColumn)); // form parameter
            }
            if (middleNameColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("middleNameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(middleNameColumn)); // form parameter
            }
            if (personNameColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("personNameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(personNameColumn)); // form parameter
            }
            if (priorityColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("priorityColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(priorityColumn)); // form parameter
            }
            if (salutationColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("salutationColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(salutationColumn)); // form parameter
            }
            if (suffixColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("suffixColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(suffixColumn)); // form parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPeopleTaskForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            PeopleTaskResponse>("/factset-concordance/v2/people-task", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleTaskForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a People Concordance Task. The \&quot;Bulk\&quot; workflow allows the user to create a People Concordance Task. Uploading of a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and creation of a task id is mandatory to start the process. [Concordance Sample People Template](https://my.apps.factset.com/oa/cms/oaAttachment/8bd62c75-8f78-48c0-a27d-9cd186c9a54a/27317)    The taskId is then used for reference in the /people-task-status and /people-decisions endpoints to receive results once the task is successful.The /people-task-status endpoint is to check the status of the Tasks as per the ids.     A universeId must be included in request. If you do not have a universe created, reference the /universe endpoint.The bulk workflow supports a two way approach for the user.   **The user can use these parameters in the following ways.**     1.Filling all the required fields including the &#x60;personNameColumn&#x60;.(do not include &#x60;firstNameColumn&#x60;,&#x60;lastNameColumn&#x60; &amp; &#x60;middleNameColumn&#x60;)     2.Filling all the required fields excluding the &#x60;personNameColumn&#x60;.(Ensure atleast the &#x60;lastNameColumn&#x60; is filled) 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="entityColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="firstNameColumn">First name of the person.**Do not include with &#x60;personNameColumn&#x60;**.   (optional)</param>
        /// <param name="lastNameColumn">Lat name of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="middleNameColumn">Middle name of the person.**Do not include within &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="personNameColumn">Header name of the column in the input file that contains the name of the person to be matched. **Do not include with &#x60;firstNameColumn&#x60; and &#x60;lastNameColumn&#x60;.**  (optional)</param>
        /// <param name="priorityColumn">Priority associated to the clientId. Used for manual mapping.  (optional)</param>
        /// <param name="salutationColumn">The salutation of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="suffixColumn">A name suffix, that follows a person&#39;s full name and provides additional information about the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleTaskResponse</returns>
        public async System.Threading.Tasks.Task<PeopleTaskResponse>GetPeopleTaskForListAsync(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string entityColumn, List<string> additionalContextColumns = default(List<string>), string firstNameColumn = default(string), string lastNameColumn = default(string), string middleNameColumn = default(string), string personNameColumn = default(string), string priorityColumn = default(string), string salutationColumn = default(string), string suffixColumn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPeopleTaskForListWithHttpInfoAsync(universeId, taskName, inputFile, clientIdColumn, entityColumn, additionalContextColumns, firstNameColumn, lastNameColumn, middleNameColumn, personNameColumn, priorityColumn, salutationColumn, suffixColumn, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a People Concordance Task. The \&quot;Bulk\&quot; workflow allows the user to create a People Concordance Task. Uploading of a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and creation of a task id is mandatory to start the process. [Concordance Sample People Template](https://my.apps.factset.com/oa/cms/oaAttachment/8bd62c75-8f78-48c0-a27d-9cd186c9a54a/27317)    The taskId is then used for reference in the /people-task-status and /people-decisions endpoints to receive results once the task is successful.The /people-task-status endpoint is to check the status of the Tasks as per the ids.     A universeId must be included in request. If you do not have a universe created, reference the /universe endpoint.The bulk workflow supports a two way approach for the user.   **The user can use these parameters in the following ways.**     1.Filling all the required fields including the &#x60;personNameColumn&#x60;.(do not include &#x60;firstNameColumn&#x60;,&#x60;lastNameColumn&#x60; &amp; &#x60;middleNameColumn&#x60;)     2.Filling all the required fields excluding the &#x60;personNameColumn&#x60;.(Ensure atleast the &#x60;lastNameColumn&#x60; is filled) 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="entityColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="firstNameColumn">First name of the person.**Do not include with &#x60;personNameColumn&#x60;**.   (optional)</param>
        /// <param name="lastNameColumn">Lat name of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="middleNameColumn">Middle name of the person.**Do not include within &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="personNameColumn">Header name of the column in the input file that contains the name of the person to be matched. **Do not include with &#x60;firstNameColumn&#x60; and &#x60;lastNameColumn&#x60;.**  (optional)</param>
        /// <param name="priorityColumn">Priority associated to the clientId. Used for manual mapping.  (optional)</param>
        /// <param name="salutationColumn">The salutation of the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="suffixColumn">A name suffix, that follows a person&#39;s full name and provides additional information about the person.**Do not include with &#x60;personNameColumn&#x60;**.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleTaskResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PeopleTaskResponse>> GetPeopleTaskForListWithHttpInfoAsync(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string entityColumn, List<string> additionalContextColumns = default(List<string>), string firstNameColumn = default(string), string lastNameColumn = default(string), string middleNameColumn = default(string), string personNameColumn = default(string), string priorityColumn = default(string), string salutationColumn = default(string), string suffixColumn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskName' is set
            if (taskName == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'taskName' when calling PeopleMatchBulkApi->GetPeopleTaskForList");
            }

            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'inputFile' when calling PeopleMatchBulkApi->GetPeopleTaskForList");
            }

            // verify the required parameter 'clientIdColumn' is set
            if (clientIdColumn == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'clientIdColumn' when calling PeopleMatchBulkApi->GetPeopleTaskForList");
            }

            // verify the required parameter 'entityColumn' is set
            if (entityColumn == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'entityColumn' when calling PeopleMatchBulkApi->GetPeopleTaskForList");
            }


            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("universeId", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(universeId)); // form parameter
            localVarRequestOptions.FormParameters.Add("taskName", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(taskName)); // form parameter
            localVarRequestOptions.FileParameters.Add("inputFile", inputFile);
            localVarRequestOptions.FormParameters.Add("clientIdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(clientIdColumn)); // form parameter
            if (additionalContextColumns != null)
            {
                localVarRequestOptions.FormParameters.Add("additionalContextColumns", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(additionalContextColumns)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("entityColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(entityColumn)); // form parameter
            if (firstNameColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("firstNameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(firstNameColumn)); // form parameter
            }
            if (lastNameColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("lastNameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(lastNameColumn)); // form parameter
            }
            if (middleNameColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("middleNameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(middleNameColumn)); // form parameter
            }
            if (personNameColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("personNameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(personNameColumn)); // form parameter
            }
            if (priorityColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("priorityColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(priorityColumn)); // form parameter
            }
            if (salutationColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("salutationColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(salutationColumn)); // form parameter
            }
            if (suffixColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("suffixColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(suffixColumn)); // form parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPeopleTaskForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PeopleTaskResponse>("/factset-concordance/v2/people-task", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleTaskForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Status of the People Tasks. Pulls the **status** for ALL the People Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /people-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>PeopleTaskStatusResponse</returns>
        public PeopleTaskStatusResponse GetPeopleTaskStatus(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>))
        {
            var localVarResponse = GetPeopleTaskStatusWithHttpInfo(taskId, offset, limit, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Status of the People Tasks. Pulls the **status** for ALL the People Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /people-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>ApiResponse of PeopleTaskStatusResponse</returns>
        public ApiResponse<PeopleTaskStatusResponse> GetPeopleTaskStatusWithHttpInfo(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>))
        {
            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("csv", "status", status));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPeopleTaskStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            PeopleTaskStatusResponse>("/factset-concordance/v2/people-task-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleTaskStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the Status of the People Tasks. Pulls the **status** for ALL the People Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /people-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleTaskStatusResponse</returns>
        public async System.Threading.Tasks.Task<PeopleTaskStatusResponse>GetPeopleTaskStatusAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPeopleTaskStatusWithHttpInfoAsync(taskId, offset, limit, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Status of the People Tasks. Pulls the **status** for ALL the People Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /people-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /people-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleTaskStatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PeopleTaskStatusResponse>> GetPeopleTaskStatusWithHttpInfoAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("csv", "status", status));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPeopleTaskStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PeopleTaskStatusResponse>("/factset-concordance/v2/people-task-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleTaskStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
