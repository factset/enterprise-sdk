/*
 * FactSet Concordance API
 *
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetConcordance.Client;
using FactSet.SDK.FactSetConcordance.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetConcordance.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityMatchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Entity Candidates and Matches for a single name and attributes.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate entities matching the given entity name. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /entity-match to fetch up to 25 names. Otherwise, use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Entity to match.</param>
        /// <param name="country">ISO2 country code corresponding to the entity name that is used when evaluating candidates for a match. For a list of ISO2 Country codes, visit [OA 8754](https://my.apps.factset.com/oa/pages/8754). (optional)</param>
        /// <param name="state">Two-character state code corresponding to the entity name that is used when evaluating candidates for a match. Currently, only US state codes are supported. (optional)</param>
        /// <param name="url">URL corresponding to the entity name that is used when evaluating candidates for a match. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --|   |ABS|Asset-Backed||MED|Broadcast Call Sign|   |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|   |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|   |CMD|Commodity||MUT|Mutual Fd-Open End|   |COL|College/University||NPO|Non-Profit Organization|   |CUR|Currency||OPD|Operating Division|   |ESP|Emp Stk Ownership Plan||OTH|Other|   |EXT|Extinct||PEF|Pension Fund|   |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|   |FND|Foundation/Endowment||PUB|Public Company|   |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|   |FRX|ForEx||PVT|Private Company|   |GOV|Government||SOV|Sovereign Wealth Fund|   |HED|Hedge Fund||SUB|Subsidiary|   |HOL|Holding Company||TRU|Trust/Trustee|   |IDX|Index||UMB|Umbrella Fund|   |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Candidates with an entity type specified will *not* be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --| |ABS|Asset-Backed||MED|Broadcast Call Sign| |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End| |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF| |CMD|Commodity||MUT|Mutual Fd-Open End| |COL|College/University||NPO|Non-Profit Organization| |CUR|Currency||OPD|Operating Division| |ESP|Emp Stk Ownership Plan||OTH|Other| |EXT|Extinct||PEF|Pension Fund| |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property| |FND|Foundation/Endowment||PUB|Public Company| |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt| |FRX|ForEx||PVT|Private Company| |GOV|Government||SOV|Sovereign Wealth Fund| |HED|Hedge Fund||SUB|Subsidiary| |HOL|Holding Company||TRU|Trust/Trustee| |IDX|Index||UMB|Umbrella Fund| |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|   |- --|- --|- --|- --|   |AR|Arbitrage|IC|Investment Company|   |BM|Bank Investment Division|IN|Insurance Company|   |BR|Broker|MF|Mutual Fund Manager|   |CP|Corporate|ML|Master Ltd Part|   |CU|Custodial|MM|Market Maker|   |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|   |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|   |FO|Foundation/Endowment Manager|PP|Real Estate Manager|   |FS|Fund Distributor|RE|Research Firm|   |FU|Fund|SB|Subsidiary Branch|   |FY|Family Office|ST|Stock Borrowing/Lending|   |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|   |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|   |IA|Investment Adviser|   |IB|Investment Banking|  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will not be considered for the final match result. Multiple types can be entered separated by commas. |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description| |- --|- --|- --|- --| |AR|Arbitrage|IC|Investment Company| |BM|Bank Investment Division|IN|Insurance Company| |BR|Broker|MF|Mutual Fund Manager| |CP|Corporate|ML|Master Ltd Part| |CU|Custodial|MM|Market Maker| |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt| |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager| |FO|Foundation/Endowment Manager|PP|Real Estate Manager| |FS|Fund Distributor|RE|Research Firm| |FU|Fund|SB|Subsidiary Branch| |FY|Family Office|ST|Stock Borrowing/Lending| |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager| |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity| |IA|Investment Adviser| |IB|Investment Banking|  (optional)</param>
        /// <param name="includeParent">Flag to include parent entities in the list of candidates. This parameter does not influence the match result. (optional, default to false)</param>
        /// <param name="bbgFigi">Input identifiers for the Bloomberg Listing/Regional/Security ID symbol type. (optional)</param>
        /// <param name="bbgTicker">Input identifiers for the Bloomberg Listing and Regional Ticker symbol Type. (optional)</param>
        /// <param name="bic">Input identifiers for the BICCode - Bank Indentification Code symbol Type. (optional)</param>
        /// <param name="cik">Input identifiers for the CIK - Edgar Central Index Keys symbol type. (optional)</param>
        /// <param name="crd">Input identifiers for the CRD - Central Registration Depository symbol type. (optional)</param>
        /// <param name="cusip">Input identifiers for the CUSIP symbol type. (optional)</param>
        /// <param name="duns">Input identifiers for the DUNS - Dun &amp; Bradstreet Data Universal Numbering System symbol type. (optional)</param>
        /// <param name="ein">Input identifiers for the EIN - Employer Identification Number symbol type. (optional)</param>
        /// <param name="factsetId">Input identifiers for the type FactSet Identifier - FactSet -E,-S,-R, -L Permanent Identifier symbol type. (optional)</param>
        /// <param name="fitch">Input identifiers for the Fitch - Fitch Ratings symbol type. (optional)</param>
        /// <param name="gvkey">Input identifiers for the type GVKEY - Compustat Global Company Key symbol type. (optional)</param>
        /// <param name="gvkeyIid">Input identifiers for the type GVKEY+IID - Compustat Global Company Key and Issue Identifier symbol type. (optional)</param>
        /// <param name="isin">Input identifiers for the ISIN - International Securities Identification Number symbol type. (optional)</param>
        /// <param name="jcn">Input identifiers for the type JCN - Japanese Corporate Number symbol type. (optional)</param>
        /// <param name="lei">Input identifiers for the LEI - Legal Entity Identifier symbol type (optional)</param>
        /// <param name="lxid">Input identifiers for the type LXID - Markit Syndicated Loan Identifier symbol type. (optional)</param>
        /// <param name="md">Input identifiers for the Moody&#39;s Ratings Identifier type. (optional)</param>
        /// <param name="redCode">Input identifiers for the type Red Code - Markit Reference Entity Identifier symbol type. (optional)</param>
        /// <param name="rssd">Input identifiers for the RSSD - Federal Reserve RSSD symbol typ. (optional)</param>
        /// <param name="sedol">Input identifiers for the SEDOL symbol type. (optional)</param>
        /// <param name="spr">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="ticker">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="tickerExchange">Input identifiers for the TickerExchange. (optional)</param>
        /// <param name="tickerRegion">Input identifiers for the TickerRegion. (optional)</param>
        /// <param name="ukch">Input identifiers for the UKCH - UK Company House symbol type. (optional)</param>
        /// <param name="valoren">Input identifiers for the Valoren (\&quot;Valor\&quot;) symbol type. (optional)</param>
        /// <param name="wkn">Input identifiers for the WKN - German Securities symbol type. (optional)</param>
        /// <returns>EntityMatchesResponse</returns>
        EntityMatchesResponse GetEntityMatch(string name, string country = default(string), string state = default(string), string url = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), bool? includeParent = default(bool?), string bbgFigi = default(string), string bbgTicker = default(string), string bic = default(string), string cik = default(string), string crd = default(string), string cusip = default(string), string duns = default(string), string ein = default(string), string factsetId = default(string), string fitch = default(string), string gvkey = default(string), string gvkeyIid = default(string), string isin = default(string), string jcn = default(string), string lei = default(string), string lxid = default(string), string md = default(string), string redCode = default(string), string rssd = default(string), string sedol = default(string), string spr = default(string), string ticker = default(string), string tickerExchange = default(string), string tickerRegion = default(string), string ukch = default(string), string valoren = default(string), string wkn = default(string));

        /// <summary>
        /// Get Entity Candidates and Matches for a single name and attributes.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate entities matching the given entity name. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /entity-match to fetch up to 25 names. Otherwise, use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Entity to match.</param>
        /// <param name="country">ISO2 country code corresponding to the entity name that is used when evaluating candidates for a match. For a list of ISO2 Country codes, visit [OA 8754](https://my.apps.factset.com/oa/pages/8754). (optional)</param>
        /// <param name="state">Two-character state code corresponding to the entity name that is used when evaluating candidates for a match. Currently, only US state codes are supported. (optional)</param>
        /// <param name="url">URL corresponding to the entity name that is used when evaluating candidates for a match. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --|   |ABS|Asset-Backed||MED|Broadcast Call Sign|   |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|   |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|   |CMD|Commodity||MUT|Mutual Fd-Open End|   |COL|College/University||NPO|Non-Profit Organization|   |CUR|Currency||OPD|Operating Division|   |ESP|Emp Stk Ownership Plan||OTH|Other|   |EXT|Extinct||PEF|Pension Fund|   |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|   |FND|Foundation/Endowment||PUB|Public Company|   |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|   |FRX|ForEx||PVT|Private Company|   |GOV|Government||SOV|Sovereign Wealth Fund|   |HED|Hedge Fund||SUB|Subsidiary|   |HOL|Holding Company||TRU|Trust/Trustee|   |IDX|Index||UMB|Umbrella Fund|   |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Candidates with an entity type specified will *not* be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --| |ABS|Asset-Backed||MED|Broadcast Call Sign| |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End| |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF| |CMD|Commodity||MUT|Mutual Fd-Open End| |COL|College/University||NPO|Non-Profit Organization| |CUR|Currency||OPD|Operating Division| |ESP|Emp Stk Ownership Plan||OTH|Other| |EXT|Extinct||PEF|Pension Fund| |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property| |FND|Foundation/Endowment||PUB|Public Company| |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt| |FRX|ForEx||PVT|Private Company| |GOV|Government||SOV|Sovereign Wealth Fund| |HED|Hedge Fund||SUB|Subsidiary| |HOL|Holding Company||TRU|Trust/Trustee| |IDX|Index||UMB|Umbrella Fund| |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|   |- --|- --|- --|- --|   |AR|Arbitrage|IC|Investment Company|   |BM|Bank Investment Division|IN|Insurance Company|   |BR|Broker|MF|Mutual Fund Manager|   |CP|Corporate|ML|Master Ltd Part|   |CU|Custodial|MM|Market Maker|   |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|   |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|   |FO|Foundation/Endowment Manager|PP|Real Estate Manager|   |FS|Fund Distributor|RE|Research Firm|   |FU|Fund|SB|Subsidiary Branch|   |FY|Family Office|ST|Stock Borrowing/Lending|   |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|   |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|   |IA|Investment Adviser|   |IB|Investment Banking|  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will not be considered for the final match result. Multiple types can be entered separated by commas. |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description| |- --|- --|- --|- --| |AR|Arbitrage|IC|Investment Company| |BM|Bank Investment Division|IN|Insurance Company| |BR|Broker|MF|Mutual Fund Manager| |CP|Corporate|ML|Master Ltd Part| |CU|Custodial|MM|Market Maker| |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt| |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager| |FO|Foundation/Endowment Manager|PP|Real Estate Manager| |FS|Fund Distributor|RE|Research Firm| |FU|Fund|SB|Subsidiary Branch| |FY|Family Office|ST|Stock Borrowing/Lending| |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager| |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity| |IA|Investment Adviser| |IB|Investment Banking|  (optional)</param>
        /// <param name="includeParent">Flag to include parent entities in the list of candidates. This parameter does not influence the match result. (optional, default to false)</param>
        /// <param name="bbgFigi">Input identifiers for the Bloomberg Listing/Regional/Security ID symbol type. (optional)</param>
        /// <param name="bbgTicker">Input identifiers for the Bloomberg Listing and Regional Ticker symbol Type. (optional)</param>
        /// <param name="bic">Input identifiers for the BICCode - Bank Indentification Code symbol Type. (optional)</param>
        /// <param name="cik">Input identifiers for the CIK - Edgar Central Index Keys symbol type. (optional)</param>
        /// <param name="crd">Input identifiers for the CRD - Central Registration Depository symbol type. (optional)</param>
        /// <param name="cusip">Input identifiers for the CUSIP symbol type. (optional)</param>
        /// <param name="duns">Input identifiers for the DUNS - Dun &amp; Bradstreet Data Universal Numbering System symbol type. (optional)</param>
        /// <param name="ein">Input identifiers for the EIN - Employer Identification Number symbol type. (optional)</param>
        /// <param name="factsetId">Input identifiers for the type FactSet Identifier - FactSet -E,-S,-R, -L Permanent Identifier symbol type. (optional)</param>
        /// <param name="fitch">Input identifiers for the Fitch - Fitch Ratings symbol type. (optional)</param>
        /// <param name="gvkey">Input identifiers for the type GVKEY - Compustat Global Company Key symbol type. (optional)</param>
        /// <param name="gvkeyIid">Input identifiers for the type GVKEY+IID - Compustat Global Company Key and Issue Identifier symbol type. (optional)</param>
        /// <param name="isin">Input identifiers for the ISIN - International Securities Identification Number symbol type. (optional)</param>
        /// <param name="jcn">Input identifiers for the type JCN - Japanese Corporate Number symbol type. (optional)</param>
        /// <param name="lei">Input identifiers for the LEI - Legal Entity Identifier symbol type (optional)</param>
        /// <param name="lxid">Input identifiers for the type LXID - Markit Syndicated Loan Identifier symbol type. (optional)</param>
        /// <param name="md">Input identifiers for the Moody&#39;s Ratings Identifier type. (optional)</param>
        /// <param name="redCode">Input identifiers for the type Red Code - Markit Reference Entity Identifier symbol type. (optional)</param>
        /// <param name="rssd">Input identifiers for the RSSD - Federal Reserve RSSD symbol typ. (optional)</param>
        /// <param name="sedol">Input identifiers for the SEDOL symbol type. (optional)</param>
        /// <param name="spr">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="ticker">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="tickerExchange">Input identifiers for the TickerExchange. (optional)</param>
        /// <param name="tickerRegion">Input identifiers for the TickerRegion. (optional)</param>
        /// <param name="ukch">Input identifiers for the UKCH - UK Company House symbol type. (optional)</param>
        /// <param name="valoren">Input identifiers for the Valoren (\&quot;Valor\&quot;) symbol type. (optional)</param>
        /// <param name="wkn">Input identifiers for the WKN - German Securities symbol type. (optional)</param>
        /// <returns>ApiResponse of EntityMatchesResponse</returns>
        ApiResponse<EntityMatchesResponse> GetEntityMatchWithHttpInfo(string name, string country = default(string), string state = default(string), string url = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), bool? includeParent = default(bool?), string bbgFigi = default(string), string bbgTicker = default(string), string bic = default(string), string cik = default(string), string crd = default(string), string cusip = default(string), string duns = default(string), string ein = default(string), string factsetId = default(string), string fitch = default(string), string gvkey = default(string), string gvkeyIid = default(string), string isin = default(string), string jcn = default(string), string lei = default(string), string lxid = default(string), string md = default(string), string redCode = default(string), string rssd = default(string), string sedol = default(string), string spr = default(string), string ticker = default(string), string tickerExchange = default(string), string tickerRegion = default(string), string ukch = default(string), string valoren = default(string), string wkn = default(string));
        /// <summary>
        /// Get a list of Entity Candidates and Matches for a requested list of up to 25 names and attributes.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate entities matching the given entity name. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. Finds the best candidate entities matching the given company name. Additional attributes can be supplied to narrow the search.  &lt;p&gt;**Max of 25 Names inputted.** Use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; Supported types of Entities in which the names can match to include -   * Corporations, Joint Ventures, and Holding Companies   * Fund Managers and various Fund Types (Open-end, Closed End, Hedge, Soverign Wealth, Pension, Exchange Traded, and more).&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityMatchRequest">A request to match a Entity.</param>
        /// <returns>EntityMatchesResponse</returns>
        EntityMatchesResponse GetEntityMatchForList(EntityMatchRequest entityMatchRequest);

        /// <summary>
        /// Get a list of Entity Candidates and Matches for a requested list of up to 25 names and attributes.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate entities matching the given entity name. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. Finds the best candidate entities matching the given company name. Additional attributes can be supplied to narrow the search.  &lt;p&gt;**Max of 25 Names inputted.** Use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; Supported types of Entities in which the names can match to include -   * Corporations, Joint Ventures, and Holding Companies   * Fund Managers and various Fund Types (Open-end, Closed End, Hedge, Soverign Wealth, Pension, Exchange Traded, and more).&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityMatchRequest">A request to match a Entity.</param>
        /// <returns>ApiResponse of EntityMatchesResponse</returns>
        ApiResponse<EntityMatchesResponse> GetEntityMatchForListWithHttpInfo(EntityMatchRequest entityMatchRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityMatchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Entity Candidates and Matches for a single name and attributes.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate entities matching the given entity name. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /entity-match to fetch up to 25 names. Otherwise, use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Entity to match.</param>
        /// <param name="country">ISO2 country code corresponding to the entity name that is used when evaluating candidates for a match. For a list of ISO2 Country codes, visit [OA 8754](https://my.apps.factset.com/oa/pages/8754). (optional)</param>
        /// <param name="state">Two-character state code corresponding to the entity name that is used when evaluating candidates for a match. Currently, only US state codes are supported. (optional)</param>
        /// <param name="url">URL corresponding to the entity name that is used when evaluating candidates for a match. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --|   |ABS|Asset-Backed||MED|Broadcast Call Sign|   |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|   |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|   |CMD|Commodity||MUT|Mutual Fd-Open End|   |COL|College/University||NPO|Non-Profit Organization|   |CUR|Currency||OPD|Operating Division|   |ESP|Emp Stk Ownership Plan||OTH|Other|   |EXT|Extinct||PEF|Pension Fund|   |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|   |FND|Foundation/Endowment||PUB|Public Company|   |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|   |FRX|ForEx||PVT|Private Company|   |GOV|Government||SOV|Sovereign Wealth Fund|   |HED|Hedge Fund||SUB|Subsidiary|   |HOL|Holding Company||TRU|Trust/Trustee|   |IDX|Index||UMB|Umbrella Fund|   |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Candidates with an entity type specified will *not* be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --| |ABS|Asset-Backed||MED|Broadcast Call Sign| |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End| |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF| |CMD|Commodity||MUT|Mutual Fd-Open End| |COL|College/University||NPO|Non-Profit Organization| |CUR|Currency||OPD|Operating Division| |ESP|Emp Stk Ownership Plan||OTH|Other| |EXT|Extinct||PEF|Pension Fund| |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property| |FND|Foundation/Endowment||PUB|Public Company| |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt| |FRX|ForEx||PVT|Private Company| |GOV|Government||SOV|Sovereign Wealth Fund| |HED|Hedge Fund||SUB|Subsidiary| |HOL|Holding Company||TRU|Trust/Trustee| |IDX|Index||UMB|Umbrella Fund| |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|   |- --|- --|- --|- --|   |AR|Arbitrage|IC|Investment Company|   |BM|Bank Investment Division|IN|Insurance Company|   |BR|Broker|MF|Mutual Fund Manager|   |CP|Corporate|ML|Master Ltd Part|   |CU|Custodial|MM|Market Maker|   |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|   |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|   |FO|Foundation/Endowment Manager|PP|Real Estate Manager|   |FS|Fund Distributor|RE|Research Firm|   |FU|Fund|SB|Subsidiary Branch|   |FY|Family Office|ST|Stock Borrowing/Lending|   |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|   |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|   |IA|Investment Adviser|   |IB|Investment Banking|  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will not be considered for the final match result. Multiple types can be entered separated by commas. |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description| |- --|- --|- --|- --| |AR|Arbitrage|IC|Investment Company| |BM|Bank Investment Division|IN|Insurance Company| |BR|Broker|MF|Mutual Fund Manager| |CP|Corporate|ML|Master Ltd Part| |CU|Custodial|MM|Market Maker| |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt| |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager| |FO|Foundation/Endowment Manager|PP|Real Estate Manager| |FS|Fund Distributor|RE|Research Firm| |FU|Fund|SB|Subsidiary Branch| |FY|Family Office|ST|Stock Borrowing/Lending| |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager| |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity| |IA|Investment Adviser| |IB|Investment Banking|  (optional)</param>
        /// <param name="includeParent">Flag to include parent entities in the list of candidates. This parameter does not influence the match result. (optional, default to false)</param>
        /// <param name="bbgFigi">Input identifiers for the Bloomberg Listing/Regional/Security ID symbol type. (optional)</param>
        /// <param name="bbgTicker">Input identifiers for the Bloomberg Listing and Regional Ticker symbol Type. (optional)</param>
        /// <param name="bic">Input identifiers for the BICCode - Bank Indentification Code symbol Type. (optional)</param>
        /// <param name="cik">Input identifiers for the CIK - Edgar Central Index Keys symbol type. (optional)</param>
        /// <param name="crd">Input identifiers for the CRD - Central Registration Depository symbol type. (optional)</param>
        /// <param name="cusip">Input identifiers for the CUSIP symbol type. (optional)</param>
        /// <param name="duns">Input identifiers for the DUNS - Dun &amp; Bradstreet Data Universal Numbering System symbol type. (optional)</param>
        /// <param name="ein">Input identifiers for the EIN - Employer Identification Number symbol type. (optional)</param>
        /// <param name="factsetId">Input identifiers for the type FactSet Identifier - FactSet -E,-S,-R, -L Permanent Identifier symbol type. (optional)</param>
        /// <param name="fitch">Input identifiers for the Fitch - Fitch Ratings symbol type. (optional)</param>
        /// <param name="gvkey">Input identifiers for the type GVKEY - Compustat Global Company Key symbol type. (optional)</param>
        /// <param name="gvkeyIid">Input identifiers for the type GVKEY+IID - Compustat Global Company Key and Issue Identifier symbol type. (optional)</param>
        /// <param name="isin">Input identifiers for the ISIN - International Securities Identification Number symbol type. (optional)</param>
        /// <param name="jcn">Input identifiers for the type JCN - Japanese Corporate Number symbol type. (optional)</param>
        /// <param name="lei">Input identifiers for the LEI - Legal Entity Identifier symbol type (optional)</param>
        /// <param name="lxid">Input identifiers for the type LXID - Markit Syndicated Loan Identifier symbol type. (optional)</param>
        /// <param name="md">Input identifiers for the Moody&#39;s Ratings Identifier type. (optional)</param>
        /// <param name="redCode">Input identifiers for the type Red Code - Markit Reference Entity Identifier symbol type. (optional)</param>
        /// <param name="rssd">Input identifiers for the RSSD - Federal Reserve RSSD symbol typ. (optional)</param>
        /// <param name="sedol">Input identifiers for the SEDOL symbol type. (optional)</param>
        /// <param name="spr">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="ticker">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="tickerExchange">Input identifiers for the TickerExchange. (optional)</param>
        /// <param name="tickerRegion">Input identifiers for the TickerRegion. (optional)</param>
        /// <param name="ukch">Input identifiers for the UKCH - UK Company House symbol type. (optional)</param>
        /// <param name="valoren">Input identifiers for the Valoren (\&quot;Valor\&quot;) symbol type. (optional)</param>
        /// <param name="wkn">Input identifiers for the WKN - German Securities symbol type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityMatchesResponse</returns>
        System.Threading.Tasks.Task<EntityMatchesResponse> GetEntityMatchAsync(string name, string country = default(string), string state = default(string), string url = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), bool? includeParent = default(bool?), string bbgFigi = default(string), string bbgTicker = default(string), string bic = default(string), string cik = default(string), string crd = default(string), string cusip = default(string), string duns = default(string), string ein = default(string), string factsetId = default(string), string fitch = default(string), string gvkey = default(string), string gvkeyIid = default(string), string isin = default(string), string jcn = default(string), string lei = default(string), string lxid = default(string), string md = default(string), string redCode = default(string), string rssd = default(string), string sedol = default(string), string spr = default(string), string ticker = default(string), string tickerExchange = default(string), string tickerRegion = default(string), string ukch = default(string), string valoren = default(string), string wkn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Entity Candidates and Matches for a single name and attributes.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate entities matching the given entity name. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /entity-match to fetch up to 25 names. Otherwise, use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Entity to match.</param>
        /// <param name="country">ISO2 country code corresponding to the entity name that is used when evaluating candidates for a match. For a list of ISO2 Country codes, visit [OA 8754](https://my.apps.factset.com/oa/pages/8754). (optional)</param>
        /// <param name="state">Two-character state code corresponding to the entity name that is used when evaluating candidates for a match. Currently, only US state codes are supported. (optional)</param>
        /// <param name="url">URL corresponding to the entity name that is used when evaluating candidates for a match. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --|   |ABS|Asset-Backed||MED|Broadcast Call Sign|   |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|   |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|   |CMD|Commodity||MUT|Mutual Fd-Open End|   |COL|College/University||NPO|Non-Profit Organization|   |CUR|Currency||OPD|Operating Division|   |ESP|Emp Stk Ownership Plan||OTH|Other|   |EXT|Extinct||PEF|Pension Fund|   |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|   |FND|Foundation/Endowment||PUB|Public Company|   |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|   |FRX|ForEx||PVT|Private Company|   |GOV|Government||SOV|Sovereign Wealth Fund|   |HED|Hedge Fund||SUB|Subsidiary|   |HOL|Holding Company||TRU|Trust/Trustee|   |IDX|Index||UMB|Umbrella Fund|   |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Candidates with an entity type specified will *not* be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --| |ABS|Asset-Backed||MED|Broadcast Call Sign| |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End| |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF| |CMD|Commodity||MUT|Mutual Fd-Open End| |COL|College/University||NPO|Non-Profit Organization| |CUR|Currency||OPD|Operating Division| |ESP|Emp Stk Ownership Plan||OTH|Other| |EXT|Extinct||PEF|Pension Fund| |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property| |FND|Foundation/Endowment||PUB|Public Company| |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt| |FRX|ForEx||PVT|Private Company| |GOV|Government||SOV|Sovereign Wealth Fund| |HED|Hedge Fund||SUB|Subsidiary| |HOL|Holding Company||TRU|Trust/Trustee| |IDX|Index||UMB|Umbrella Fund| |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|   |- --|- --|- --|- --|   |AR|Arbitrage|IC|Investment Company|   |BM|Bank Investment Division|IN|Insurance Company|   |BR|Broker|MF|Mutual Fund Manager|   |CP|Corporate|ML|Master Ltd Part|   |CU|Custodial|MM|Market Maker|   |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|   |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|   |FO|Foundation/Endowment Manager|PP|Real Estate Manager|   |FS|Fund Distributor|RE|Research Firm|   |FU|Fund|SB|Subsidiary Branch|   |FY|Family Office|ST|Stock Borrowing/Lending|   |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|   |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|   |IA|Investment Adviser|   |IB|Investment Banking|  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will not be considered for the final match result. Multiple types can be entered separated by commas. |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description| |- --|- --|- --|- --| |AR|Arbitrage|IC|Investment Company| |BM|Bank Investment Division|IN|Insurance Company| |BR|Broker|MF|Mutual Fund Manager| |CP|Corporate|ML|Master Ltd Part| |CU|Custodial|MM|Market Maker| |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt| |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager| |FO|Foundation/Endowment Manager|PP|Real Estate Manager| |FS|Fund Distributor|RE|Research Firm| |FU|Fund|SB|Subsidiary Branch| |FY|Family Office|ST|Stock Borrowing/Lending| |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager| |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity| |IA|Investment Adviser| |IB|Investment Banking|  (optional)</param>
        /// <param name="includeParent">Flag to include parent entities in the list of candidates. This parameter does not influence the match result. (optional, default to false)</param>
        /// <param name="bbgFigi">Input identifiers for the Bloomberg Listing/Regional/Security ID symbol type. (optional)</param>
        /// <param name="bbgTicker">Input identifiers for the Bloomberg Listing and Regional Ticker symbol Type. (optional)</param>
        /// <param name="bic">Input identifiers for the BICCode - Bank Indentification Code symbol Type. (optional)</param>
        /// <param name="cik">Input identifiers for the CIK - Edgar Central Index Keys symbol type. (optional)</param>
        /// <param name="crd">Input identifiers for the CRD - Central Registration Depository symbol type. (optional)</param>
        /// <param name="cusip">Input identifiers for the CUSIP symbol type. (optional)</param>
        /// <param name="duns">Input identifiers for the DUNS - Dun &amp; Bradstreet Data Universal Numbering System symbol type. (optional)</param>
        /// <param name="ein">Input identifiers for the EIN - Employer Identification Number symbol type. (optional)</param>
        /// <param name="factsetId">Input identifiers for the type FactSet Identifier - FactSet -E,-S,-R, -L Permanent Identifier symbol type. (optional)</param>
        /// <param name="fitch">Input identifiers for the Fitch - Fitch Ratings symbol type. (optional)</param>
        /// <param name="gvkey">Input identifiers for the type GVKEY - Compustat Global Company Key symbol type. (optional)</param>
        /// <param name="gvkeyIid">Input identifiers for the type GVKEY+IID - Compustat Global Company Key and Issue Identifier symbol type. (optional)</param>
        /// <param name="isin">Input identifiers for the ISIN - International Securities Identification Number symbol type. (optional)</param>
        /// <param name="jcn">Input identifiers for the type JCN - Japanese Corporate Number symbol type. (optional)</param>
        /// <param name="lei">Input identifiers for the LEI - Legal Entity Identifier symbol type (optional)</param>
        /// <param name="lxid">Input identifiers for the type LXID - Markit Syndicated Loan Identifier symbol type. (optional)</param>
        /// <param name="md">Input identifiers for the Moody&#39;s Ratings Identifier type. (optional)</param>
        /// <param name="redCode">Input identifiers for the type Red Code - Markit Reference Entity Identifier symbol type. (optional)</param>
        /// <param name="rssd">Input identifiers for the RSSD - Federal Reserve RSSD symbol typ. (optional)</param>
        /// <param name="sedol">Input identifiers for the SEDOL symbol type. (optional)</param>
        /// <param name="spr">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="ticker">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="tickerExchange">Input identifiers for the TickerExchange. (optional)</param>
        /// <param name="tickerRegion">Input identifiers for the TickerRegion. (optional)</param>
        /// <param name="ukch">Input identifiers for the UKCH - UK Company House symbol type. (optional)</param>
        /// <param name="valoren">Input identifiers for the Valoren (\&quot;Valor\&quot;) symbol type. (optional)</param>
        /// <param name="wkn">Input identifiers for the WKN - German Securities symbol type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityMatchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityMatchesResponse>> GetEntityMatchWithHttpInfoAsync(string name, string country = default(string), string state = default(string), string url = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), bool? includeParent = default(bool?), string bbgFigi = default(string), string bbgTicker = default(string), string bic = default(string), string cik = default(string), string crd = default(string), string cusip = default(string), string duns = default(string), string ein = default(string), string factsetId = default(string), string fitch = default(string), string gvkey = default(string), string gvkeyIid = default(string), string isin = default(string), string jcn = default(string), string lei = default(string), string lxid = default(string), string md = default(string), string redCode = default(string), string rssd = default(string), string sedol = default(string), string spr = default(string), string ticker = default(string), string tickerExchange = default(string), string tickerRegion = default(string), string ukch = default(string), string valoren = default(string), string wkn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of Entity Candidates and Matches for a requested list of up to 25 names and attributes.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate entities matching the given entity name. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. Finds the best candidate entities matching the given company name. Additional attributes can be supplied to narrow the search.  &lt;p&gt;**Max of 25 Names inputted.** Use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; Supported types of Entities in which the names can match to include -   * Corporations, Joint Ventures, and Holding Companies   * Fund Managers and various Fund Types (Open-end, Closed End, Hedge, Soverign Wealth, Pension, Exchange Traded, and more).&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityMatchRequest">A request to match a Entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityMatchesResponse</returns>
        System.Threading.Tasks.Task<EntityMatchesResponse> GetEntityMatchForListAsync(EntityMatchRequest entityMatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of Entity Candidates and Matches for a requested list of up to 25 names and attributes.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate entities matching the given entity name. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. Finds the best candidate entities matching the given company name. Additional attributes can be supplied to narrow the search.  &lt;p&gt;**Max of 25 Names inputted.** Use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; Supported types of Entities in which the names can match to include -   * Corporations, Joint Ventures, and Holding Companies   * Fund Managers and various Fund Types (Open-end, Closed End, Hedge, Soverign Wealth, Pension, Exchange Traded, and more).&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityMatchRequest">A request to match a Entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityMatchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityMatchesResponse>> GetEntityMatchForListWithHttpInfoAsync(EntityMatchRequest entityMatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityMatchApi : IEntityMatchApiSync, IEntityMatchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntityMatchApi : IEntityMatchApi
    {
        private FactSet.SDK.FactSetConcordance.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetEntityMatchResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityMatchesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetEntityMatchForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityMatchesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityMatchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityMatchApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetConcordance.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetConcordance.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetConcordance.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntityMatchApi(FactSet.SDK.FactSetConcordance.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetConcordance.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetConcordance.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EntityMatchApi(FactSet.SDK.FactSetConcordance.Client.ISynchronousClient client, FactSet.SDK.FactSetConcordance.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetConcordance.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetConcordance.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Entity Candidates and Matches for a single name and attributes. Finds the best candidate entities matching the given entity name. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /entity-match to fetch up to 25 names. Otherwise, use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Entity to match.</param>
        /// <param name="country">ISO2 country code corresponding to the entity name that is used when evaluating candidates for a match. For a list of ISO2 Country codes, visit [OA 8754](https://my.apps.factset.com/oa/pages/8754). (optional)</param>
        /// <param name="state">Two-character state code corresponding to the entity name that is used when evaluating candidates for a match. Currently, only US state codes are supported. (optional)</param>
        /// <param name="url">URL corresponding to the entity name that is used when evaluating candidates for a match. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --|   |ABS|Asset-Backed||MED|Broadcast Call Sign|   |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|   |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|   |CMD|Commodity||MUT|Mutual Fd-Open End|   |COL|College/University||NPO|Non-Profit Organization|   |CUR|Currency||OPD|Operating Division|   |ESP|Emp Stk Ownership Plan||OTH|Other|   |EXT|Extinct||PEF|Pension Fund|   |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|   |FND|Foundation/Endowment||PUB|Public Company|   |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|   |FRX|ForEx||PVT|Private Company|   |GOV|Government||SOV|Sovereign Wealth Fund|   |HED|Hedge Fund||SUB|Subsidiary|   |HOL|Holding Company||TRU|Trust/Trustee|   |IDX|Index||UMB|Umbrella Fund|   |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Candidates with an entity type specified will *not* be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --| |ABS|Asset-Backed||MED|Broadcast Call Sign| |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End| |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF| |CMD|Commodity||MUT|Mutual Fd-Open End| |COL|College/University||NPO|Non-Profit Organization| |CUR|Currency||OPD|Operating Division| |ESP|Emp Stk Ownership Plan||OTH|Other| |EXT|Extinct||PEF|Pension Fund| |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property| |FND|Foundation/Endowment||PUB|Public Company| |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt| |FRX|ForEx||PVT|Private Company| |GOV|Government||SOV|Sovereign Wealth Fund| |HED|Hedge Fund||SUB|Subsidiary| |HOL|Holding Company||TRU|Trust/Trustee| |IDX|Index||UMB|Umbrella Fund| |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|   |- --|- --|- --|- --|   |AR|Arbitrage|IC|Investment Company|   |BM|Bank Investment Division|IN|Insurance Company|   |BR|Broker|MF|Mutual Fund Manager|   |CP|Corporate|ML|Master Ltd Part|   |CU|Custodial|MM|Market Maker|   |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|   |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|   |FO|Foundation/Endowment Manager|PP|Real Estate Manager|   |FS|Fund Distributor|RE|Research Firm|   |FU|Fund|SB|Subsidiary Branch|   |FY|Family Office|ST|Stock Borrowing/Lending|   |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|   |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|   |IA|Investment Adviser|   |IB|Investment Banking|  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will not be considered for the final match result. Multiple types can be entered separated by commas. |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description| |- --|- --|- --|- --| |AR|Arbitrage|IC|Investment Company| |BM|Bank Investment Division|IN|Insurance Company| |BR|Broker|MF|Mutual Fund Manager| |CP|Corporate|ML|Master Ltd Part| |CU|Custodial|MM|Market Maker| |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt| |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager| |FO|Foundation/Endowment Manager|PP|Real Estate Manager| |FS|Fund Distributor|RE|Research Firm| |FU|Fund|SB|Subsidiary Branch| |FY|Family Office|ST|Stock Borrowing/Lending| |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager| |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity| |IA|Investment Adviser| |IB|Investment Banking|  (optional)</param>
        /// <param name="includeParent">Flag to include parent entities in the list of candidates. This parameter does not influence the match result. (optional, default to false)</param>
        /// <param name="bbgFigi">Input identifiers for the Bloomberg Listing/Regional/Security ID symbol type. (optional)</param>
        /// <param name="bbgTicker">Input identifiers for the Bloomberg Listing and Regional Ticker symbol Type. (optional)</param>
        /// <param name="bic">Input identifiers for the BICCode - Bank Indentification Code symbol Type. (optional)</param>
        /// <param name="cik">Input identifiers for the CIK - Edgar Central Index Keys symbol type. (optional)</param>
        /// <param name="crd">Input identifiers for the CRD - Central Registration Depository symbol type. (optional)</param>
        /// <param name="cusip">Input identifiers for the CUSIP symbol type. (optional)</param>
        /// <param name="duns">Input identifiers for the DUNS - Dun &amp; Bradstreet Data Universal Numbering System symbol type. (optional)</param>
        /// <param name="ein">Input identifiers for the EIN - Employer Identification Number symbol type. (optional)</param>
        /// <param name="factsetId">Input identifiers for the type FactSet Identifier - FactSet -E,-S,-R, -L Permanent Identifier symbol type. (optional)</param>
        /// <param name="fitch">Input identifiers for the Fitch - Fitch Ratings symbol type. (optional)</param>
        /// <param name="gvkey">Input identifiers for the type GVKEY - Compustat Global Company Key symbol type. (optional)</param>
        /// <param name="gvkeyIid">Input identifiers for the type GVKEY+IID - Compustat Global Company Key and Issue Identifier symbol type. (optional)</param>
        /// <param name="isin">Input identifiers for the ISIN - International Securities Identification Number symbol type. (optional)</param>
        /// <param name="jcn">Input identifiers for the type JCN - Japanese Corporate Number symbol type. (optional)</param>
        /// <param name="lei">Input identifiers for the LEI - Legal Entity Identifier symbol type (optional)</param>
        /// <param name="lxid">Input identifiers for the type LXID - Markit Syndicated Loan Identifier symbol type. (optional)</param>
        /// <param name="md">Input identifiers for the Moody&#39;s Ratings Identifier type. (optional)</param>
        /// <param name="redCode">Input identifiers for the type Red Code - Markit Reference Entity Identifier symbol type. (optional)</param>
        /// <param name="rssd">Input identifiers for the RSSD - Federal Reserve RSSD symbol typ. (optional)</param>
        /// <param name="sedol">Input identifiers for the SEDOL symbol type. (optional)</param>
        /// <param name="spr">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="ticker">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="tickerExchange">Input identifiers for the TickerExchange. (optional)</param>
        /// <param name="tickerRegion">Input identifiers for the TickerRegion. (optional)</param>
        /// <param name="ukch">Input identifiers for the UKCH - UK Company House symbol type. (optional)</param>
        /// <param name="valoren">Input identifiers for the Valoren (\&quot;Valor\&quot;) symbol type. (optional)</param>
        /// <param name="wkn">Input identifiers for the WKN - German Securities symbol type. (optional)</param>
        /// <returns>EntityMatchesResponse</returns>
        public EntityMatchesResponse GetEntityMatch(string name, string country = default(string), string state = default(string), string url = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), bool? includeParent = default(bool?), string bbgFigi = default(string), string bbgTicker = default(string), string bic = default(string), string cik = default(string), string crd = default(string), string cusip = default(string), string duns = default(string), string ein = default(string), string factsetId = default(string), string fitch = default(string), string gvkey = default(string), string gvkeyIid = default(string), string isin = default(string), string jcn = default(string), string lei = default(string), string lxid = default(string), string md = default(string), string redCode = default(string), string rssd = default(string), string sedol = default(string), string spr = default(string), string ticker = default(string), string tickerExchange = default(string), string tickerRegion = default(string), string ukch = default(string), string valoren = default(string), string wkn = default(string))
        {
            var localVarResponse = GetEntityMatchWithHttpInfo(name, country, state, url, includeEntityType, excludeEntityType, includeEntitySubType, excludeEntitySubType, includeParent, bbgFigi, bbgTicker, bic, cik, crd, cusip, duns, ein, factsetId, fitch, gvkey, gvkeyIid, isin, jcn, lei, lxid, md, redCode, rssd, sedol, spr, ticker, tickerExchange, tickerRegion, ukch, valoren, wkn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Entity Candidates and Matches for a single name and attributes. Finds the best candidate entities matching the given entity name. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /entity-match to fetch up to 25 names. Otherwise, use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Entity to match.</param>
        /// <param name="country">ISO2 country code corresponding to the entity name that is used when evaluating candidates for a match. For a list of ISO2 Country codes, visit [OA 8754](https://my.apps.factset.com/oa/pages/8754). (optional)</param>
        /// <param name="state">Two-character state code corresponding to the entity name that is used when evaluating candidates for a match. Currently, only US state codes are supported. (optional)</param>
        /// <param name="url">URL corresponding to the entity name that is used when evaluating candidates for a match. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --|   |ABS|Asset-Backed||MED|Broadcast Call Sign|   |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|   |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|   |CMD|Commodity||MUT|Mutual Fd-Open End|   |COL|College/University||NPO|Non-Profit Organization|   |CUR|Currency||OPD|Operating Division|   |ESP|Emp Stk Ownership Plan||OTH|Other|   |EXT|Extinct||PEF|Pension Fund|   |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|   |FND|Foundation/Endowment||PUB|Public Company|   |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|   |FRX|ForEx||PVT|Private Company|   |GOV|Government||SOV|Sovereign Wealth Fund|   |HED|Hedge Fund||SUB|Subsidiary|   |HOL|Holding Company||TRU|Trust/Trustee|   |IDX|Index||UMB|Umbrella Fund|   |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Candidates with an entity type specified will *not* be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --| |ABS|Asset-Backed||MED|Broadcast Call Sign| |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End| |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF| |CMD|Commodity||MUT|Mutual Fd-Open End| |COL|College/University||NPO|Non-Profit Organization| |CUR|Currency||OPD|Operating Division| |ESP|Emp Stk Ownership Plan||OTH|Other| |EXT|Extinct||PEF|Pension Fund| |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property| |FND|Foundation/Endowment||PUB|Public Company| |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt| |FRX|ForEx||PVT|Private Company| |GOV|Government||SOV|Sovereign Wealth Fund| |HED|Hedge Fund||SUB|Subsidiary| |HOL|Holding Company||TRU|Trust/Trustee| |IDX|Index||UMB|Umbrella Fund| |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|   |- --|- --|- --|- --|   |AR|Arbitrage|IC|Investment Company|   |BM|Bank Investment Division|IN|Insurance Company|   |BR|Broker|MF|Mutual Fund Manager|   |CP|Corporate|ML|Master Ltd Part|   |CU|Custodial|MM|Market Maker|   |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|   |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|   |FO|Foundation/Endowment Manager|PP|Real Estate Manager|   |FS|Fund Distributor|RE|Research Firm|   |FU|Fund|SB|Subsidiary Branch|   |FY|Family Office|ST|Stock Borrowing/Lending|   |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|   |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|   |IA|Investment Adviser|   |IB|Investment Banking|  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will not be considered for the final match result. Multiple types can be entered separated by commas. |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description| |- --|- --|- --|- --| |AR|Arbitrage|IC|Investment Company| |BM|Bank Investment Division|IN|Insurance Company| |BR|Broker|MF|Mutual Fund Manager| |CP|Corporate|ML|Master Ltd Part| |CU|Custodial|MM|Market Maker| |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt| |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager| |FO|Foundation/Endowment Manager|PP|Real Estate Manager| |FS|Fund Distributor|RE|Research Firm| |FU|Fund|SB|Subsidiary Branch| |FY|Family Office|ST|Stock Borrowing/Lending| |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager| |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity| |IA|Investment Adviser| |IB|Investment Banking|  (optional)</param>
        /// <param name="includeParent">Flag to include parent entities in the list of candidates. This parameter does not influence the match result. (optional, default to false)</param>
        /// <param name="bbgFigi">Input identifiers for the Bloomberg Listing/Regional/Security ID symbol type. (optional)</param>
        /// <param name="bbgTicker">Input identifiers for the Bloomberg Listing and Regional Ticker symbol Type. (optional)</param>
        /// <param name="bic">Input identifiers for the BICCode - Bank Indentification Code symbol Type. (optional)</param>
        /// <param name="cik">Input identifiers for the CIK - Edgar Central Index Keys symbol type. (optional)</param>
        /// <param name="crd">Input identifiers for the CRD - Central Registration Depository symbol type. (optional)</param>
        /// <param name="cusip">Input identifiers for the CUSIP symbol type. (optional)</param>
        /// <param name="duns">Input identifiers for the DUNS - Dun &amp; Bradstreet Data Universal Numbering System symbol type. (optional)</param>
        /// <param name="ein">Input identifiers for the EIN - Employer Identification Number symbol type. (optional)</param>
        /// <param name="factsetId">Input identifiers for the type FactSet Identifier - FactSet -E,-S,-R, -L Permanent Identifier symbol type. (optional)</param>
        /// <param name="fitch">Input identifiers for the Fitch - Fitch Ratings symbol type. (optional)</param>
        /// <param name="gvkey">Input identifiers for the type GVKEY - Compustat Global Company Key symbol type. (optional)</param>
        /// <param name="gvkeyIid">Input identifiers for the type GVKEY+IID - Compustat Global Company Key and Issue Identifier symbol type. (optional)</param>
        /// <param name="isin">Input identifiers for the ISIN - International Securities Identification Number symbol type. (optional)</param>
        /// <param name="jcn">Input identifiers for the type JCN - Japanese Corporate Number symbol type. (optional)</param>
        /// <param name="lei">Input identifiers for the LEI - Legal Entity Identifier symbol type (optional)</param>
        /// <param name="lxid">Input identifiers for the type LXID - Markit Syndicated Loan Identifier symbol type. (optional)</param>
        /// <param name="md">Input identifiers for the Moody&#39;s Ratings Identifier type. (optional)</param>
        /// <param name="redCode">Input identifiers for the type Red Code - Markit Reference Entity Identifier symbol type. (optional)</param>
        /// <param name="rssd">Input identifiers for the RSSD - Federal Reserve RSSD symbol typ. (optional)</param>
        /// <param name="sedol">Input identifiers for the SEDOL symbol type. (optional)</param>
        /// <param name="spr">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="ticker">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="tickerExchange">Input identifiers for the TickerExchange. (optional)</param>
        /// <param name="tickerRegion">Input identifiers for the TickerRegion. (optional)</param>
        /// <param name="ukch">Input identifiers for the UKCH - UK Company House symbol type. (optional)</param>
        /// <param name="valoren">Input identifiers for the Valoren (\&quot;Valor\&quot;) symbol type. (optional)</param>
        /// <param name="wkn">Input identifiers for the WKN - German Securities symbol type. (optional)</param>
        /// <returns>ApiResponse of EntityMatchesResponse</returns>
        public ApiResponse<EntityMatchesResponse> GetEntityMatchWithHttpInfo(string name, string country = default(string), string state = default(string), string url = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), bool? includeParent = default(bool?), string bbgFigi = default(string), string bbgTicker = default(string), string bic = default(string), string cik = default(string), string crd = default(string), string cusip = default(string), string duns = default(string), string ein = default(string), string factsetId = default(string), string fitch = default(string), string gvkey = default(string), string gvkeyIid = default(string), string isin = default(string), string jcn = default(string), string lei = default(string), string lxid = default(string), string md = default(string), string redCode = default(string), string rssd = default(string), string sedol = default(string), string spr = default(string), string ticker = default(string), string tickerExchange = default(string), string tickerRegion = default(string), string ukch = default(string), string valoren = default(string), string wkn = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'name' when calling EntityMatchApi->GetEntityMatch");
            }

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (url != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            }
            if (includeEntityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("multi", "includeEntityType", includeEntityType));
            }
            if (excludeEntityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("multi", "excludeEntityType", excludeEntityType));
            }
            if (includeEntitySubType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("multi", "includeEntitySubType", includeEntitySubType));
            }
            if (excludeEntitySubType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("multi", "excludeEntitySubType", excludeEntitySubType));
            }
            if (includeParent != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "includeParent", includeParent));
            }
            if (bbgFigi != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "bbgFigi", bbgFigi));
            }
            if (bbgTicker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "bbgTicker", bbgTicker));
            }
            if (bic != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "bic", bic));
            }
            if (cik != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "cik", cik));
            }
            if (crd != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "crd", crd));
            }
            if (cusip != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "cusip", cusip));
            }
            if (duns != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "duns", duns));
            }
            if (ein != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "ein", ein));
            }
            if (factsetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "factsetId", factsetId));
            }
            if (fitch != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "fitch", fitch));
            }
            if (gvkey != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "gvkey", gvkey));
            }
            if (gvkeyIid != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "gvkeyIid", gvkeyIid));
            }
            if (isin != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "isin", isin));
            }
            if (jcn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "jcn", jcn));
            }
            if (lei != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "lei", lei));
            }
            if (lxid != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "lxid", lxid));
            }
            if (md != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "md", md));
            }
            if (redCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "redCode", redCode));
            }
            if (rssd != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "rssd", rssd));
            }
            if (sedol != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "sedol", sedol));
            }
            if (spr != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "spr", spr));
            }
            if (ticker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "ticker", ticker));
            }
            if (tickerExchange != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "tickerExchange", tickerExchange));
            }
            if (tickerRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "tickerRegion", tickerRegion));
            }
            if (ukch != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "ukch", ukch));
            }
            if (valoren != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "valoren", valoren));
            }
            if (wkn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "wkn", wkn));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEntityMatchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EntityMatchesResponse>("/factset-concordance/v2/entity-match", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Entity Candidates and Matches for a single name and attributes. Finds the best candidate entities matching the given entity name. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /entity-match to fetch up to 25 names. Otherwise, use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Entity to match.</param>
        /// <param name="country">ISO2 country code corresponding to the entity name that is used when evaluating candidates for a match. For a list of ISO2 Country codes, visit [OA 8754](https://my.apps.factset.com/oa/pages/8754). (optional)</param>
        /// <param name="state">Two-character state code corresponding to the entity name that is used when evaluating candidates for a match. Currently, only US state codes are supported. (optional)</param>
        /// <param name="url">URL corresponding to the entity name that is used when evaluating candidates for a match. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --|   |ABS|Asset-Backed||MED|Broadcast Call Sign|   |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|   |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|   |CMD|Commodity||MUT|Mutual Fd-Open End|   |COL|College/University||NPO|Non-Profit Organization|   |CUR|Currency||OPD|Operating Division|   |ESP|Emp Stk Ownership Plan||OTH|Other|   |EXT|Extinct||PEF|Pension Fund|   |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|   |FND|Foundation/Endowment||PUB|Public Company|   |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|   |FRX|ForEx||PVT|Private Company|   |GOV|Government||SOV|Sovereign Wealth Fund|   |HED|Hedge Fund||SUB|Subsidiary|   |HOL|Holding Company||TRU|Trust/Trustee|   |IDX|Index||UMB|Umbrella Fund|   |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Candidates with an entity type specified will *not* be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --| |ABS|Asset-Backed||MED|Broadcast Call Sign| |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End| |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF| |CMD|Commodity||MUT|Mutual Fd-Open End| |COL|College/University||NPO|Non-Profit Organization| |CUR|Currency||OPD|Operating Division| |ESP|Emp Stk Ownership Plan||OTH|Other| |EXT|Extinct||PEF|Pension Fund| |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property| |FND|Foundation/Endowment||PUB|Public Company| |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt| |FRX|ForEx||PVT|Private Company| |GOV|Government||SOV|Sovereign Wealth Fund| |HED|Hedge Fund||SUB|Subsidiary| |HOL|Holding Company||TRU|Trust/Trustee| |IDX|Index||UMB|Umbrella Fund| |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|   |- --|- --|- --|- --|   |AR|Arbitrage|IC|Investment Company|   |BM|Bank Investment Division|IN|Insurance Company|   |BR|Broker|MF|Mutual Fund Manager|   |CP|Corporate|ML|Master Ltd Part|   |CU|Custodial|MM|Market Maker|   |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|   |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|   |FO|Foundation/Endowment Manager|PP|Real Estate Manager|   |FS|Fund Distributor|RE|Research Firm|   |FU|Fund|SB|Subsidiary Branch|   |FY|Family Office|ST|Stock Borrowing/Lending|   |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|   |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|   |IA|Investment Adviser|   |IB|Investment Banking|  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will not be considered for the final match result. Multiple types can be entered separated by commas. |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description| |- --|- --|- --|- --| |AR|Arbitrage|IC|Investment Company| |BM|Bank Investment Division|IN|Insurance Company| |BR|Broker|MF|Mutual Fund Manager| |CP|Corporate|ML|Master Ltd Part| |CU|Custodial|MM|Market Maker| |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt| |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager| |FO|Foundation/Endowment Manager|PP|Real Estate Manager| |FS|Fund Distributor|RE|Research Firm| |FU|Fund|SB|Subsidiary Branch| |FY|Family Office|ST|Stock Borrowing/Lending| |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager| |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity| |IA|Investment Adviser| |IB|Investment Banking|  (optional)</param>
        /// <param name="includeParent">Flag to include parent entities in the list of candidates. This parameter does not influence the match result. (optional, default to false)</param>
        /// <param name="bbgFigi">Input identifiers for the Bloomberg Listing/Regional/Security ID symbol type. (optional)</param>
        /// <param name="bbgTicker">Input identifiers for the Bloomberg Listing and Regional Ticker symbol Type. (optional)</param>
        /// <param name="bic">Input identifiers for the BICCode - Bank Indentification Code symbol Type. (optional)</param>
        /// <param name="cik">Input identifiers for the CIK - Edgar Central Index Keys symbol type. (optional)</param>
        /// <param name="crd">Input identifiers for the CRD - Central Registration Depository symbol type. (optional)</param>
        /// <param name="cusip">Input identifiers for the CUSIP symbol type. (optional)</param>
        /// <param name="duns">Input identifiers for the DUNS - Dun &amp; Bradstreet Data Universal Numbering System symbol type. (optional)</param>
        /// <param name="ein">Input identifiers for the EIN - Employer Identification Number symbol type. (optional)</param>
        /// <param name="factsetId">Input identifiers for the type FactSet Identifier - FactSet -E,-S,-R, -L Permanent Identifier symbol type. (optional)</param>
        /// <param name="fitch">Input identifiers for the Fitch - Fitch Ratings symbol type. (optional)</param>
        /// <param name="gvkey">Input identifiers for the type GVKEY - Compustat Global Company Key symbol type. (optional)</param>
        /// <param name="gvkeyIid">Input identifiers for the type GVKEY+IID - Compustat Global Company Key and Issue Identifier symbol type. (optional)</param>
        /// <param name="isin">Input identifiers for the ISIN - International Securities Identification Number symbol type. (optional)</param>
        /// <param name="jcn">Input identifiers for the type JCN - Japanese Corporate Number symbol type. (optional)</param>
        /// <param name="lei">Input identifiers for the LEI - Legal Entity Identifier symbol type (optional)</param>
        /// <param name="lxid">Input identifiers for the type LXID - Markit Syndicated Loan Identifier symbol type. (optional)</param>
        /// <param name="md">Input identifiers for the Moody&#39;s Ratings Identifier type. (optional)</param>
        /// <param name="redCode">Input identifiers for the type Red Code - Markit Reference Entity Identifier symbol type. (optional)</param>
        /// <param name="rssd">Input identifiers for the RSSD - Federal Reserve RSSD symbol typ. (optional)</param>
        /// <param name="sedol">Input identifiers for the SEDOL symbol type. (optional)</param>
        /// <param name="spr">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="ticker">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="tickerExchange">Input identifiers for the TickerExchange. (optional)</param>
        /// <param name="tickerRegion">Input identifiers for the TickerRegion. (optional)</param>
        /// <param name="ukch">Input identifiers for the UKCH - UK Company House symbol type. (optional)</param>
        /// <param name="valoren">Input identifiers for the Valoren (\&quot;Valor\&quot;) symbol type. (optional)</param>
        /// <param name="wkn">Input identifiers for the WKN - German Securities symbol type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityMatchesResponse</returns>
        public async System.Threading.Tasks.Task<EntityMatchesResponse>GetEntityMatchAsync(string name, string country = default(string), string state = default(string), string url = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), bool? includeParent = default(bool?), string bbgFigi = default(string), string bbgTicker = default(string), string bic = default(string), string cik = default(string), string crd = default(string), string cusip = default(string), string duns = default(string), string ein = default(string), string factsetId = default(string), string fitch = default(string), string gvkey = default(string), string gvkeyIid = default(string), string isin = default(string), string jcn = default(string), string lei = default(string), string lxid = default(string), string md = default(string), string redCode = default(string), string rssd = default(string), string sedol = default(string), string spr = default(string), string ticker = default(string), string tickerExchange = default(string), string tickerRegion = default(string), string ukch = default(string), string valoren = default(string), string wkn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEntityMatchWithHttpInfoAsync(name, country, state, url, includeEntityType, excludeEntityType, includeEntitySubType, excludeEntitySubType, includeParent, bbgFigi, bbgTicker, bic, cik, crd, cusip, duns, ein, factsetId, fitch, gvkey, gvkeyIid, isin, jcn, lei, lxid, md, redCode, rssd, sedol, spr, ticker, tickerExchange, tickerRegion, ukch, valoren, wkn, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Entity Candidates and Matches for a single name and attributes. Finds the best candidate entities matching the given entity name. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /entity-match to fetch up to 25 names. Otherwise, use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Entity to match.</param>
        /// <param name="country">ISO2 country code corresponding to the entity name that is used when evaluating candidates for a match. For a list of ISO2 Country codes, visit [OA 8754](https://my.apps.factset.com/oa/pages/8754). (optional)</param>
        /// <param name="state">Two-character state code corresponding to the entity name that is used when evaluating candidates for a match. Currently, only US state codes are supported. (optional)</param>
        /// <param name="url">URL corresponding to the entity name that is used when evaluating candidates for a match. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --|   |ABS|Asset-Backed||MED|Broadcast Call Sign|   |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|   |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|   |CMD|Commodity||MUT|Mutual Fd-Open End|   |COL|College/University||NPO|Non-Profit Organization|   |CUR|Currency||OPD|Operating Division|   |ESP|Emp Stk Ownership Plan||OTH|Other|   |EXT|Extinct||PEF|Pension Fund|   |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|   |FND|Foundation/Endowment||PUB|Public Company|   |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|   |FRX|ForEx||PVT|Private Company|   |GOV|Government||SOV|Sovereign Wealth Fund|   |HED|Hedge Fund||SUB|Subsidiary|   |HOL|Holding Company||TRU|Trust/Trustee|   |IDX|Index||UMB|Umbrella Fund|   |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Candidates with an entity type specified will *not* be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |- --|- --|- --|- --| |ABS|Asset-Backed||MED|Broadcast Call Sign| |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End| |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF| |CMD|Commodity||MUT|Mutual Fd-Open End| |COL|College/University||NPO|Non-Profit Organization| |CUR|Currency||OPD|Operating Division| |ESP|Emp Stk Ownership Plan||OTH|Other| |EXT|Extinct||PEF|Pension Fund| |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property| |FND|Foundation/Endowment||PUB|Public Company| |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt| |FRX|ForEx||PVT|Private Company| |GOV|Government||SOV|Sovereign Wealth Fund| |HED|Hedge Fund||SUB|Subsidiary| |HOL|Holding Company||TRU|Trust/Trustee| |IDX|Index||UMB|Umbrella Fund| |VEN|Venture Capital Fund||JVT|Joint Venture|  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|   |- --|- --|- --|- --|   |AR|Arbitrage|IC|Investment Company|   |BM|Bank Investment Division|IN|Insurance Company|   |BR|Broker|MF|Mutual Fund Manager|   |CP|Corporate|ML|Master Ltd Part|   |CU|Custodial|MM|Market Maker|   |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|   |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|   |FO|Foundation/Endowment Manager|PP|Real Estate Manager|   |FS|Fund Distributor|RE|Research Firm|   |FU|Fund|SB|Subsidiary Branch|   |FY|Family Office|ST|Stock Borrowing/Lending|   |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|   |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|   |IA|Investment Adviser|   |IB|Investment Banking|  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will not be considered for the final match result. Multiple types can be entered separated by commas. |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description| |- --|- --|- --|- --| |AR|Arbitrage|IC|Investment Company| |BM|Bank Investment Division|IN|Insurance Company| |BR|Broker|MF|Mutual Fund Manager| |CP|Corporate|ML|Master Ltd Part| |CU|Custodial|MM|Market Maker| |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt| |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager| |FO|Foundation/Endowment Manager|PP|Real Estate Manager| |FS|Fund Distributor|RE|Research Firm| |FU|Fund|SB|Subsidiary Branch| |FY|Family Office|ST|Stock Borrowing/Lending| |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager| |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity| |IA|Investment Adviser| |IB|Investment Banking|  (optional)</param>
        /// <param name="includeParent">Flag to include parent entities in the list of candidates. This parameter does not influence the match result. (optional, default to false)</param>
        /// <param name="bbgFigi">Input identifiers for the Bloomberg Listing/Regional/Security ID symbol type. (optional)</param>
        /// <param name="bbgTicker">Input identifiers for the Bloomberg Listing and Regional Ticker symbol Type. (optional)</param>
        /// <param name="bic">Input identifiers for the BICCode - Bank Indentification Code symbol Type. (optional)</param>
        /// <param name="cik">Input identifiers for the CIK - Edgar Central Index Keys symbol type. (optional)</param>
        /// <param name="crd">Input identifiers for the CRD - Central Registration Depository symbol type. (optional)</param>
        /// <param name="cusip">Input identifiers for the CUSIP symbol type. (optional)</param>
        /// <param name="duns">Input identifiers for the DUNS - Dun &amp; Bradstreet Data Universal Numbering System symbol type. (optional)</param>
        /// <param name="ein">Input identifiers for the EIN - Employer Identification Number symbol type. (optional)</param>
        /// <param name="factsetId">Input identifiers for the type FactSet Identifier - FactSet -E,-S,-R, -L Permanent Identifier symbol type. (optional)</param>
        /// <param name="fitch">Input identifiers for the Fitch - Fitch Ratings symbol type. (optional)</param>
        /// <param name="gvkey">Input identifiers for the type GVKEY - Compustat Global Company Key symbol type. (optional)</param>
        /// <param name="gvkeyIid">Input identifiers for the type GVKEY+IID - Compustat Global Company Key and Issue Identifier symbol type. (optional)</param>
        /// <param name="isin">Input identifiers for the ISIN - International Securities Identification Number symbol type. (optional)</param>
        /// <param name="jcn">Input identifiers for the type JCN - Japanese Corporate Number symbol type. (optional)</param>
        /// <param name="lei">Input identifiers for the LEI - Legal Entity Identifier symbol type (optional)</param>
        /// <param name="lxid">Input identifiers for the type LXID - Markit Syndicated Loan Identifier symbol type. (optional)</param>
        /// <param name="md">Input identifiers for the Moody&#39;s Ratings Identifier type. (optional)</param>
        /// <param name="redCode">Input identifiers for the type Red Code - Markit Reference Entity Identifier symbol type. (optional)</param>
        /// <param name="rssd">Input identifiers for the RSSD - Federal Reserve RSSD symbol typ. (optional)</param>
        /// <param name="sedol">Input identifiers for the SEDOL symbol type. (optional)</param>
        /// <param name="spr">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="ticker">Input identifiers for the Price Ticker symbol type. (optional)</param>
        /// <param name="tickerExchange">Input identifiers for the TickerExchange. (optional)</param>
        /// <param name="tickerRegion">Input identifiers for the TickerRegion. (optional)</param>
        /// <param name="ukch">Input identifiers for the UKCH - UK Company House symbol type. (optional)</param>
        /// <param name="valoren">Input identifiers for the Valoren (\&quot;Valor\&quot;) symbol type. (optional)</param>
        /// <param name="wkn">Input identifiers for the WKN - German Securities symbol type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityMatchesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityMatchesResponse>> GetEntityMatchWithHttpInfoAsync(string name, string country = default(string), string state = default(string), string url = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), bool? includeParent = default(bool?), string bbgFigi = default(string), string bbgTicker = default(string), string bic = default(string), string cik = default(string), string crd = default(string), string cusip = default(string), string duns = default(string), string ein = default(string), string factsetId = default(string), string fitch = default(string), string gvkey = default(string), string gvkeyIid = default(string), string isin = default(string), string jcn = default(string), string lei = default(string), string lxid = default(string), string md = default(string), string redCode = default(string), string rssd = default(string), string sedol = default(string), string spr = default(string), string ticker = default(string), string tickerExchange = default(string), string tickerRegion = default(string), string ukch = default(string), string valoren = default(string), string wkn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'name' when calling EntityMatchApi->GetEntityMatch");
            }


            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (url != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            }
            if (includeEntityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("multi", "includeEntityType", includeEntityType));
            }
            if (excludeEntityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("multi", "excludeEntityType", excludeEntityType));
            }
            if (includeEntitySubType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("multi", "includeEntitySubType", includeEntitySubType));
            }
            if (excludeEntitySubType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("multi", "excludeEntitySubType", excludeEntitySubType));
            }
            if (includeParent != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "includeParent", includeParent));
            }
            if (bbgFigi != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "bbgFigi", bbgFigi));
            }
            if (bbgTicker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "bbgTicker", bbgTicker));
            }
            if (bic != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "bic", bic));
            }
            if (cik != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "cik", cik));
            }
            if (crd != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "crd", crd));
            }
            if (cusip != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "cusip", cusip));
            }
            if (duns != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "duns", duns));
            }
            if (ein != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "ein", ein));
            }
            if (factsetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "factsetId", factsetId));
            }
            if (fitch != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "fitch", fitch));
            }
            if (gvkey != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "gvkey", gvkey));
            }
            if (gvkeyIid != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "gvkeyIid", gvkeyIid));
            }
            if (isin != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "isin", isin));
            }
            if (jcn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "jcn", jcn));
            }
            if (lei != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "lei", lei));
            }
            if (lxid != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "lxid", lxid));
            }
            if (md != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "md", md));
            }
            if (redCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "redCode", redCode));
            }
            if (rssd != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "rssd", rssd));
            }
            if (sedol != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "sedol", sedol));
            }
            if (spr != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "spr", spr));
            }
            if (ticker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "ticker", ticker));
            }
            if (tickerExchange != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "tickerExchange", tickerExchange));
            }
            if (tickerRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "tickerRegion", tickerRegion));
            }
            if (ukch != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "ukch", ukch));
            }
            if (valoren != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "valoren", valoren));
            }
            if (wkn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "wkn", wkn));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEntityMatchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityMatchesResponse>("/factset-concordance/v2/entity-match", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of Entity Candidates and Matches for a requested list of up to 25 names and attributes. Finds the best candidate entities matching the given entity name. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. Finds the best candidate entities matching the given company name. Additional attributes can be supplied to narrow the search.  &lt;p&gt;**Max of 25 Names inputted.** Use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; Supported types of Entities in which the names can match to include -   * Corporations, Joint Ventures, and Holding Companies   * Fund Managers and various Fund Types (Open-end, Closed End, Hedge, Soverign Wealth, Pension, Exchange Traded, and more).&lt;/p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityMatchRequest">A request to match a Entity.</param>
        /// <returns>EntityMatchesResponse</returns>
        public EntityMatchesResponse GetEntityMatchForList(EntityMatchRequest entityMatchRequest)
        {
            var localVarResponse = GetEntityMatchForListWithHttpInfo(entityMatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of Entity Candidates and Matches for a requested list of up to 25 names and attributes. Finds the best candidate entities matching the given entity name. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. Finds the best candidate entities matching the given company name. Additional attributes can be supplied to narrow the search.  &lt;p&gt;**Max of 25 Names inputted.** Use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; Supported types of Entities in which the names can match to include -   * Corporations, Joint Ventures, and Holding Companies   * Fund Managers and various Fund Types (Open-end, Closed End, Hedge, Soverign Wealth, Pension, Exchange Traded, and more).&lt;/p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityMatchRequest">A request to match a Entity.</param>
        /// <returns>ApiResponse of EntityMatchesResponse</returns>
        public ApiResponse<EntityMatchesResponse> GetEntityMatchForListWithHttpInfo(EntityMatchRequest entityMatchRequest)
        {
            // verify the required parameter 'entityMatchRequest' is set
            if (entityMatchRequest == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'entityMatchRequest' when calling EntityMatchApi->GetEntityMatchForList");
            }

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = entityMatchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEntityMatchForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EntityMatchesResponse>("/factset-concordance/v2/entity-match", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityMatchForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a list of Entity Candidates and Matches for a requested list of up to 25 names and attributes. Finds the best candidate entities matching the given entity name. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. Finds the best candidate entities matching the given company name. Additional attributes can be supplied to narrow the search.  &lt;p&gt;**Max of 25 Names inputted.** Use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; Supported types of Entities in which the names can match to include -   * Corporations, Joint Ventures, and Holding Companies   * Fund Managers and various Fund Types (Open-end, Closed End, Hedge, Soverign Wealth, Pension, Exchange Traded, and more).&lt;/p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityMatchRequest">A request to match a Entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityMatchesResponse</returns>
        public async System.Threading.Tasks.Task<EntityMatchesResponse>GetEntityMatchForListAsync(EntityMatchRequest entityMatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEntityMatchForListWithHttpInfoAsync(entityMatchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of Entity Candidates and Matches for a requested list of up to 25 names and attributes. Finds the best candidate entities matching the given entity name. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. Additional attributes can be supplied to narrow the search, such as State, URL, and Entity Types. Finds the best candidate entities matching the given company name. Additional attributes can be supplied to narrow the search.  &lt;p&gt;**Max of 25 Names inputted.** Use the \&quot;Entity Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; Supported types of Entities in which the names can match to include -   * Corporations, Joint Ventures, and Holding Companies   * Fund Managers and various Fund Types (Open-end, Closed End, Hedge, Soverign Wealth, Pension, Exchange Traded, and more).&lt;/p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityMatchRequest">A request to match a Entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityMatchesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityMatchesResponse>> GetEntityMatchForListWithHttpInfoAsync(EntityMatchRequest entityMatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityMatchRequest' is set
            if (entityMatchRequest == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'entityMatchRequest' when calling EntityMatchApi->GetEntityMatchForList");
            }


            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = entityMatchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEntityMatchForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EntityMatchesResponse>("/factset-concordance/v2/entity-match", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityMatchForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
