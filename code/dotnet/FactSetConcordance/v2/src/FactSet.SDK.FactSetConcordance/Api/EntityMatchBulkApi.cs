/*
 * FactSet Concordance API
 *
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request. With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetConcordance.Client;
using FactSet.SDK.FactSetConcordance.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetConcordance.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityMatchBulkApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>EntityDecisionsResponse</returns>
        EntityDecisionsResponse GetEntityDecisions(int taskId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>ApiResponse of EntityDecisionsResponse</returns>
        ApiResponse<EntityDecisionsResponse> GetEntityDecisionsWithHttpInfo(int taskId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Input a file with names and attributes, creating a taskId.
        /// </summary>
        /// <remarks>
        /// Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. [Concordance Sample Template File](https://my.apps.factset.com/oa/cms/oaAttachment/57096850-3834-49fd-9d35-d02d72bdb142/27317). The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful.&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; &lt;p&gt; A universeId must be included in request. If you do not have a universe created, reference the &#x60;/universe&#x60; endpoint. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="priorityColumn">Header Name of the column in the inputfile that contains the priority for the client id.  (optional)</param>
        /// <param name="bbgFigiColumn">Header Name of the column in the input file for the type &#x60;Bloomberg Listing/Regional/Security ID&#x60;. (optional)</param>
        /// <param name="bbgTickerColumn">Header Name of the column in the input file for the type Bloomberg &#x60;Listing and Regional Ticker&#x60;. (optional)</param>
        /// <param name="bicColumn">Header Name of the column in the input file for the type BICCode, &#x60;bank indentification code&#x60;.  (optional)</param>
        /// <param name="cikColumn">Header Name of the column in the input file for the type CIK, &#x60;Edgar Central Index Keys&#x60; (optional)</param>
        /// <param name="crdColumn">Header Name of the column in the input file for the type CRD, &#x60;Central Registration Depository&#x60;. (optional)</param>
        /// <param name="cusipColumn">Header Name of the column in the input file for the type &#x60;CUSIP&#x60; (optional)</param>
        /// <param name="einColumn">Header Name of the column in the input file for the type EIN, &#x60;EmployerIdentificationNumber&#x60;. (optional)</param>
        /// <param name="factsetIdColumn">Header Name of the column in the input file for the type FactSet Identifier - &#x60;FactSet -E,-S,-R, -L Permanent Identifier&#x60;. (optional)</param>
        /// <param name="fitchColumn">Header Name of the column in the input file for the type FitchCreditRating, &#x60;Fitch Ratings Identifier&#x60;. (optional)</param>
        /// <param name="gvkeyColumn">Header Name of the column in the input file for the type GVKEY - &#x60;Compustat Global Company Key&#x60;. (optional)</param>
        /// <param name="gvkeyIidColumn">Header Name of the column in the input file for the type GVKEY+IID - &#x60;Compustat Global Company Key and Issue Identifier&#x60;. (optional)</param>
        /// <param name="isinColumn">Header Name of the column in the input file for the type &#x60;ISIN&#x60;. (optional)</param>
        /// <param name="jcnColumn">Header Name of the column in the input file for the type JCN - &#x60;Japanese Corporate Number&#x60;. (optional)</param>
        /// <param name="leiColumn">Header Name of the column in the input file for the type LEI, &#x60;LegalEntityIdentifier&#x60;. (optional)</param>
        /// <param name="lxidColumn">Header Name of the column in the input file for the type LXID - &#x60;Markit Syndicated Loan Identifier&#x60;. (optional)</param>
        /// <param name="mdColumn">Header Name of the column in the input file for the type MoodysIssuer, &#x60;Moody&#39;s Ratings Identifier&#x60;. (optional)</param>
        /// <param name="redCodeColumn">Header Name of the column in the input file for the type Red Code - &#x60;Markit Reference Entity Identifier&#x60;. (optional)</param>
        /// <param name="rssdColumn">Header Name of the column in the input file for the type RSSD, &#x60;FederalReserveRSSDIdentifier&#x60;. (optional)</param>
        /// <param name="sedolColumn">Header Name of the column in the input file for the type &#x60;SEDOL&#x60;. (optional)</param>
        /// <param name="sprColumn">Header Name of the column in the input file for the type S&amp;PRating, &#x60;S&amp;P Ratings Identifier&#x60;. (optional)</param>
        /// <param name="tickerColumn">Header Name of the column in the input file for the type &#x60;PriceTicker&#x60;. (optional)</param>
        /// <param name="tickerExchangeColumn">Header Name of the column in the input file for the type &#x60;TickerExchange&#x60;. (optional)</param>
        /// <param name="tickerRegionColumn">Header Name of the column in the input file for the type &#x60;TickerRegion&#x60;. (optional)</param>
        /// <param name="ukchColumn">Header Name of the column in the input file for the type &#x60;UKCompanyHouse&#x60;. (optional)</param>
        /// <param name="valorenColumn">Header Name of the column in the input file for the type VALOR, &#x60;Valoren (\\\&quot;Valor\\\&quot;) Identification&#x60;. (optional)</param>
        /// <param name="wknColumn">Header Name of the column in the input file for the type WKN, &#x60;German Securities Identification&#x60;. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="autoRemap">When &#x60;true&#x60;, automatically re-evaluates and overwrites existing mappings using updated metadata submitted in this task. Applicable when the specified universe has auto-remap set to true. **Caution: Mapping updates cannot be undone.**  (optional)</param>
        /// <returns>EntityTaskResponse</returns>
        EntityTaskResponse GetEntityTaskForList(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), string priorityColumn = default(string), string bbgFigiColumn = default(string), string bbgTickerColumn = default(string), string bicColumn = default(string), string cikColumn = default(string), string crdColumn = default(string), string cusipColumn = default(string), string einColumn = default(string), string factsetIdColumn = default(string), string fitchColumn = default(string), string gvkeyColumn = default(string), string gvkeyIidColumn = default(string), string isinColumn = default(string), string jcnColumn = default(string), string leiColumn = default(string), string lxidColumn = default(string), string mdColumn = default(string), string redCodeColumn = default(string), string rssdColumn = default(string), string sedolColumn = default(string), string sprColumn = default(string), string tickerColumn = default(string), string tickerExchangeColumn = default(string), string tickerRegionColumn = default(string), string ukchColumn = default(string), string valorenColumn = default(string), string wknColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), List<string> additionalContextColumns = default(List<string>), bool? autoRemap = default(bool?));

        /// <summary>
        /// Input a file with names and attributes, creating a taskId.
        /// </summary>
        /// <remarks>
        /// Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. [Concordance Sample Template File](https://my.apps.factset.com/oa/cms/oaAttachment/57096850-3834-49fd-9d35-d02d72bdb142/27317). The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful.&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; &lt;p&gt; A universeId must be included in request. If you do not have a universe created, reference the &#x60;/universe&#x60; endpoint. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="priorityColumn">Header Name of the column in the inputfile that contains the priority for the client id.  (optional)</param>
        /// <param name="bbgFigiColumn">Header Name of the column in the input file for the type &#x60;Bloomberg Listing/Regional/Security ID&#x60;. (optional)</param>
        /// <param name="bbgTickerColumn">Header Name of the column in the input file for the type Bloomberg &#x60;Listing and Regional Ticker&#x60;. (optional)</param>
        /// <param name="bicColumn">Header Name of the column in the input file for the type BICCode, &#x60;bank indentification code&#x60;.  (optional)</param>
        /// <param name="cikColumn">Header Name of the column in the input file for the type CIK, &#x60;Edgar Central Index Keys&#x60; (optional)</param>
        /// <param name="crdColumn">Header Name of the column in the input file for the type CRD, &#x60;Central Registration Depository&#x60;. (optional)</param>
        /// <param name="cusipColumn">Header Name of the column in the input file for the type &#x60;CUSIP&#x60; (optional)</param>
        /// <param name="einColumn">Header Name of the column in the input file for the type EIN, &#x60;EmployerIdentificationNumber&#x60;. (optional)</param>
        /// <param name="factsetIdColumn">Header Name of the column in the input file for the type FactSet Identifier - &#x60;FactSet -E,-S,-R, -L Permanent Identifier&#x60;. (optional)</param>
        /// <param name="fitchColumn">Header Name of the column in the input file for the type FitchCreditRating, &#x60;Fitch Ratings Identifier&#x60;. (optional)</param>
        /// <param name="gvkeyColumn">Header Name of the column in the input file for the type GVKEY - &#x60;Compustat Global Company Key&#x60;. (optional)</param>
        /// <param name="gvkeyIidColumn">Header Name of the column in the input file for the type GVKEY+IID - &#x60;Compustat Global Company Key and Issue Identifier&#x60;. (optional)</param>
        /// <param name="isinColumn">Header Name of the column in the input file for the type &#x60;ISIN&#x60;. (optional)</param>
        /// <param name="jcnColumn">Header Name of the column in the input file for the type JCN - &#x60;Japanese Corporate Number&#x60;. (optional)</param>
        /// <param name="leiColumn">Header Name of the column in the input file for the type LEI, &#x60;LegalEntityIdentifier&#x60;. (optional)</param>
        /// <param name="lxidColumn">Header Name of the column in the input file for the type LXID - &#x60;Markit Syndicated Loan Identifier&#x60;. (optional)</param>
        /// <param name="mdColumn">Header Name of the column in the input file for the type MoodysIssuer, &#x60;Moody&#39;s Ratings Identifier&#x60;. (optional)</param>
        /// <param name="redCodeColumn">Header Name of the column in the input file for the type Red Code - &#x60;Markit Reference Entity Identifier&#x60;. (optional)</param>
        /// <param name="rssdColumn">Header Name of the column in the input file for the type RSSD, &#x60;FederalReserveRSSDIdentifier&#x60;. (optional)</param>
        /// <param name="sedolColumn">Header Name of the column in the input file for the type &#x60;SEDOL&#x60;. (optional)</param>
        /// <param name="sprColumn">Header Name of the column in the input file for the type S&amp;PRating, &#x60;S&amp;P Ratings Identifier&#x60;. (optional)</param>
        /// <param name="tickerColumn">Header Name of the column in the input file for the type &#x60;PriceTicker&#x60;. (optional)</param>
        /// <param name="tickerExchangeColumn">Header Name of the column in the input file for the type &#x60;TickerExchange&#x60;. (optional)</param>
        /// <param name="tickerRegionColumn">Header Name of the column in the input file for the type &#x60;TickerRegion&#x60;. (optional)</param>
        /// <param name="ukchColumn">Header Name of the column in the input file for the type &#x60;UKCompanyHouse&#x60;. (optional)</param>
        /// <param name="valorenColumn">Header Name of the column in the input file for the type VALOR, &#x60;Valoren (\\\&quot;Valor\\\&quot;) Identification&#x60;. (optional)</param>
        /// <param name="wknColumn">Header Name of the column in the input file for the type WKN, &#x60;German Securities Identification&#x60;. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="autoRemap">When &#x60;true&#x60;, automatically re-evaluates and overwrites existing mappings using updated metadata submitted in this task. Applicable when the specified universe has auto-remap set to true. **Caution: Mapping updates cannot be undone.**  (optional)</param>
        /// <returns>ApiResponse of EntityTaskResponse</returns>
        ApiResponse<EntityTaskResponse> GetEntityTaskForListWithHttpInfo(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), string priorityColumn = default(string), string bbgFigiColumn = default(string), string bbgTickerColumn = default(string), string bicColumn = default(string), string cikColumn = default(string), string crdColumn = default(string), string cusipColumn = default(string), string einColumn = default(string), string factsetIdColumn = default(string), string fitchColumn = default(string), string gvkeyColumn = default(string), string gvkeyIidColumn = default(string), string isinColumn = default(string), string jcnColumn = default(string), string leiColumn = default(string), string lxidColumn = default(string), string mdColumn = default(string), string redCodeColumn = default(string), string rssdColumn = default(string), string sedolColumn = default(string), string sprColumn = default(string), string tickerColumn = default(string), string tickerExchangeColumn = default(string), string tickerRegionColumn = default(string), string ukchColumn = default(string), string valorenColumn = default(string), string wknColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), List<string> additionalContextColumns = default(List<string>), bool? autoRemap = default(bool?));
        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>EntityTaskStatusResponse</returns>
        EntityTaskStatusResponse GetEntityTaskStatus(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>));

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>ApiResponse of EntityTaskStatusResponse</returns>
        ApiResponse<EntityTaskStatusResponse> GetEntityTaskStatusWithHttpInfo(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityMatchBulkApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityDecisionsResponse</returns>
        System.Threading.Tasks.Task<EntityDecisionsResponse> GetEntityDecisionsAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityDecisionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityDecisionsResponse>> GetEntityDecisionsWithHttpInfoAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Input a file with names and attributes, creating a taskId.
        /// </summary>
        /// <remarks>
        /// Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. [Concordance Sample Template File](https://my.apps.factset.com/oa/cms/oaAttachment/57096850-3834-49fd-9d35-d02d72bdb142/27317). The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful.&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; &lt;p&gt; A universeId must be included in request. If you do not have a universe created, reference the &#x60;/universe&#x60; endpoint. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="priorityColumn">Header Name of the column in the inputfile that contains the priority for the client id.  (optional)</param>
        /// <param name="bbgFigiColumn">Header Name of the column in the input file for the type &#x60;Bloomberg Listing/Regional/Security ID&#x60;. (optional)</param>
        /// <param name="bbgTickerColumn">Header Name of the column in the input file for the type Bloomberg &#x60;Listing and Regional Ticker&#x60;. (optional)</param>
        /// <param name="bicColumn">Header Name of the column in the input file for the type BICCode, &#x60;bank indentification code&#x60;.  (optional)</param>
        /// <param name="cikColumn">Header Name of the column in the input file for the type CIK, &#x60;Edgar Central Index Keys&#x60; (optional)</param>
        /// <param name="crdColumn">Header Name of the column in the input file for the type CRD, &#x60;Central Registration Depository&#x60;. (optional)</param>
        /// <param name="cusipColumn">Header Name of the column in the input file for the type &#x60;CUSIP&#x60; (optional)</param>
        /// <param name="einColumn">Header Name of the column in the input file for the type EIN, &#x60;EmployerIdentificationNumber&#x60;. (optional)</param>
        /// <param name="factsetIdColumn">Header Name of the column in the input file for the type FactSet Identifier - &#x60;FactSet -E,-S,-R, -L Permanent Identifier&#x60;. (optional)</param>
        /// <param name="fitchColumn">Header Name of the column in the input file for the type FitchCreditRating, &#x60;Fitch Ratings Identifier&#x60;. (optional)</param>
        /// <param name="gvkeyColumn">Header Name of the column in the input file for the type GVKEY - &#x60;Compustat Global Company Key&#x60;. (optional)</param>
        /// <param name="gvkeyIidColumn">Header Name of the column in the input file for the type GVKEY+IID - &#x60;Compustat Global Company Key and Issue Identifier&#x60;. (optional)</param>
        /// <param name="isinColumn">Header Name of the column in the input file for the type &#x60;ISIN&#x60;. (optional)</param>
        /// <param name="jcnColumn">Header Name of the column in the input file for the type JCN - &#x60;Japanese Corporate Number&#x60;. (optional)</param>
        /// <param name="leiColumn">Header Name of the column in the input file for the type LEI, &#x60;LegalEntityIdentifier&#x60;. (optional)</param>
        /// <param name="lxidColumn">Header Name of the column in the input file for the type LXID - &#x60;Markit Syndicated Loan Identifier&#x60;. (optional)</param>
        /// <param name="mdColumn">Header Name of the column in the input file for the type MoodysIssuer, &#x60;Moody&#39;s Ratings Identifier&#x60;. (optional)</param>
        /// <param name="redCodeColumn">Header Name of the column in the input file for the type Red Code - &#x60;Markit Reference Entity Identifier&#x60;. (optional)</param>
        /// <param name="rssdColumn">Header Name of the column in the input file for the type RSSD, &#x60;FederalReserveRSSDIdentifier&#x60;. (optional)</param>
        /// <param name="sedolColumn">Header Name of the column in the input file for the type &#x60;SEDOL&#x60;. (optional)</param>
        /// <param name="sprColumn">Header Name of the column in the input file for the type S&amp;PRating, &#x60;S&amp;P Ratings Identifier&#x60;. (optional)</param>
        /// <param name="tickerColumn">Header Name of the column in the input file for the type &#x60;PriceTicker&#x60;. (optional)</param>
        /// <param name="tickerExchangeColumn">Header Name of the column in the input file for the type &#x60;TickerExchange&#x60;. (optional)</param>
        /// <param name="tickerRegionColumn">Header Name of the column in the input file for the type &#x60;TickerRegion&#x60;. (optional)</param>
        /// <param name="ukchColumn">Header Name of the column in the input file for the type &#x60;UKCompanyHouse&#x60;. (optional)</param>
        /// <param name="valorenColumn">Header Name of the column in the input file for the type VALOR, &#x60;Valoren (\\\&quot;Valor\\\&quot;) Identification&#x60;. (optional)</param>
        /// <param name="wknColumn">Header Name of the column in the input file for the type WKN, &#x60;German Securities Identification&#x60;. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="autoRemap">When &#x60;true&#x60;, automatically re-evaluates and overwrites existing mappings using updated metadata submitted in this task. Applicable when the specified universe has auto-remap set to true. **Caution: Mapping updates cannot be undone.**  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityTaskResponse</returns>
        System.Threading.Tasks.Task<EntityTaskResponse> GetEntityTaskForListAsync(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), string priorityColumn = default(string), string bbgFigiColumn = default(string), string bbgTickerColumn = default(string), string bicColumn = default(string), string cikColumn = default(string), string crdColumn = default(string), string cusipColumn = default(string), string einColumn = default(string), string factsetIdColumn = default(string), string fitchColumn = default(string), string gvkeyColumn = default(string), string gvkeyIidColumn = default(string), string isinColumn = default(string), string jcnColumn = default(string), string leiColumn = default(string), string lxidColumn = default(string), string mdColumn = default(string), string redCodeColumn = default(string), string rssdColumn = default(string), string sedolColumn = default(string), string sprColumn = default(string), string tickerColumn = default(string), string tickerExchangeColumn = default(string), string tickerRegionColumn = default(string), string ukchColumn = default(string), string valorenColumn = default(string), string wknColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), List<string> additionalContextColumns = default(List<string>), bool? autoRemap = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Input a file with names and attributes, creating a taskId.
        /// </summary>
        /// <remarks>
        /// Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. [Concordance Sample Template File](https://my.apps.factset.com/oa/cms/oaAttachment/57096850-3834-49fd-9d35-d02d72bdb142/27317). The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful.&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; &lt;p&gt; A universeId must be included in request. If you do not have a universe created, reference the &#x60;/universe&#x60; endpoint. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="priorityColumn">Header Name of the column in the inputfile that contains the priority for the client id.  (optional)</param>
        /// <param name="bbgFigiColumn">Header Name of the column in the input file for the type &#x60;Bloomberg Listing/Regional/Security ID&#x60;. (optional)</param>
        /// <param name="bbgTickerColumn">Header Name of the column in the input file for the type Bloomberg &#x60;Listing and Regional Ticker&#x60;. (optional)</param>
        /// <param name="bicColumn">Header Name of the column in the input file for the type BICCode, &#x60;bank indentification code&#x60;.  (optional)</param>
        /// <param name="cikColumn">Header Name of the column in the input file for the type CIK, &#x60;Edgar Central Index Keys&#x60; (optional)</param>
        /// <param name="crdColumn">Header Name of the column in the input file for the type CRD, &#x60;Central Registration Depository&#x60;. (optional)</param>
        /// <param name="cusipColumn">Header Name of the column in the input file for the type &#x60;CUSIP&#x60; (optional)</param>
        /// <param name="einColumn">Header Name of the column in the input file for the type EIN, &#x60;EmployerIdentificationNumber&#x60;. (optional)</param>
        /// <param name="factsetIdColumn">Header Name of the column in the input file for the type FactSet Identifier - &#x60;FactSet -E,-S,-R, -L Permanent Identifier&#x60;. (optional)</param>
        /// <param name="fitchColumn">Header Name of the column in the input file for the type FitchCreditRating, &#x60;Fitch Ratings Identifier&#x60;. (optional)</param>
        /// <param name="gvkeyColumn">Header Name of the column in the input file for the type GVKEY - &#x60;Compustat Global Company Key&#x60;. (optional)</param>
        /// <param name="gvkeyIidColumn">Header Name of the column in the input file for the type GVKEY+IID - &#x60;Compustat Global Company Key and Issue Identifier&#x60;. (optional)</param>
        /// <param name="isinColumn">Header Name of the column in the input file for the type &#x60;ISIN&#x60;. (optional)</param>
        /// <param name="jcnColumn">Header Name of the column in the input file for the type JCN - &#x60;Japanese Corporate Number&#x60;. (optional)</param>
        /// <param name="leiColumn">Header Name of the column in the input file for the type LEI, &#x60;LegalEntityIdentifier&#x60;. (optional)</param>
        /// <param name="lxidColumn">Header Name of the column in the input file for the type LXID - &#x60;Markit Syndicated Loan Identifier&#x60;. (optional)</param>
        /// <param name="mdColumn">Header Name of the column in the input file for the type MoodysIssuer, &#x60;Moody&#39;s Ratings Identifier&#x60;. (optional)</param>
        /// <param name="redCodeColumn">Header Name of the column in the input file for the type Red Code - &#x60;Markit Reference Entity Identifier&#x60;. (optional)</param>
        /// <param name="rssdColumn">Header Name of the column in the input file for the type RSSD, &#x60;FederalReserveRSSDIdentifier&#x60;. (optional)</param>
        /// <param name="sedolColumn">Header Name of the column in the input file for the type &#x60;SEDOL&#x60;. (optional)</param>
        /// <param name="sprColumn">Header Name of the column in the input file for the type S&amp;PRating, &#x60;S&amp;P Ratings Identifier&#x60;. (optional)</param>
        /// <param name="tickerColumn">Header Name of the column in the input file for the type &#x60;PriceTicker&#x60;. (optional)</param>
        /// <param name="tickerExchangeColumn">Header Name of the column in the input file for the type &#x60;TickerExchange&#x60;. (optional)</param>
        /// <param name="tickerRegionColumn">Header Name of the column in the input file for the type &#x60;TickerRegion&#x60;. (optional)</param>
        /// <param name="ukchColumn">Header Name of the column in the input file for the type &#x60;UKCompanyHouse&#x60;. (optional)</param>
        /// <param name="valorenColumn">Header Name of the column in the input file for the type VALOR, &#x60;Valoren (\\\&quot;Valor\\\&quot;) Identification&#x60;. (optional)</param>
        /// <param name="wknColumn">Header Name of the column in the input file for the type WKN, &#x60;German Securities Identification&#x60;. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="autoRemap">When &#x60;true&#x60;, automatically re-evaluates and overwrites existing mappings using updated metadata submitted in this task. Applicable when the specified universe has auto-remap set to true. **Caution: Mapping updates cannot be undone.**  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityTaskResponse>> GetEntityTaskForListWithHttpInfoAsync(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), string priorityColumn = default(string), string bbgFigiColumn = default(string), string bbgTickerColumn = default(string), string bicColumn = default(string), string cikColumn = default(string), string crdColumn = default(string), string cusipColumn = default(string), string einColumn = default(string), string factsetIdColumn = default(string), string fitchColumn = default(string), string gvkeyColumn = default(string), string gvkeyIidColumn = default(string), string isinColumn = default(string), string jcnColumn = default(string), string leiColumn = default(string), string lxidColumn = default(string), string mdColumn = default(string), string redCodeColumn = default(string), string rssdColumn = default(string), string sedolColumn = default(string), string sprColumn = default(string), string tickerColumn = default(string), string tickerExchangeColumn = default(string), string tickerRegionColumn = default(string), string ukchColumn = default(string), string valorenColumn = default(string), string wknColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), List<string> additionalContextColumns = default(List<string>), bool? autoRemap = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityTaskStatusResponse</returns>
        System.Threading.Tasks.Task<EntityTaskStatusResponse> GetEntityTaskStatusAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityTaskStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityTaskStatusResponse>> GetEntityTaskStatusWithHttpInfoAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityMatchBulkApi : IEntityMatchBulkApiSync, IEntityMatchBulkApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntityMatchBulkApi : IEntityMatchBulkApi
    {
        private FactSet.SDK.FactSetConcordance.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetEntityDecisionsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityDecisionsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetEntityTaskForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityTaskResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetEntityTaskStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityTaskStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchBulkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityMatchBulkApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchBulkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityMatchBulkApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetConcordance.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetConcordance.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetConcordance.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchBulkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntityMatchBulkApi(FactSet.SDK.FactSetConcordance.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetConcordance.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetConcordance.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchBulkApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EntityMatchBulkApi(FactSet.SDK.FactSetConcordance.Client.ISynchronousClient client, FactSet.SDK.FactSetConcordance.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetConcordance.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetConcordance.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>EntityDecisionsResponse</returns>
        public EntityDecisionsResponse GetEntityDecisions(int taskId, int? offset = default(int?), int? limit = default(int?))
        {
            var localVarResponse = GetEntityDecisionsWithHttpInfo(taskId, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>ApiResponse of EntityDecisionsResponse</returns>
        public ApiResponse<EntityDecisionsResponse> GetEntityDecisionsWithHttpInfo(int taskId, int? offset = default(int?), int? limit = default(int?))
        {
            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEntityDecisionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EntityDecisionsResponse>("/factset-concordance/v2/entity-decisions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityDecisions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityDecisionsResponse</returns>
        public async System.Threading.Tasks.Task<EntityDecisionsResponse>GetEntityDecisionsAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEntityDecisionsWithHttpInfoAsync(taskId, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the &#x60;universeId&#x60; specified in the input file. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityDecisionsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityDecisionsResponse>> GetEntityDecisionsWithHttpInfoAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEntityDecisionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityDecisionsResponse>("/factset-concordance/v2/entity-decisions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityDecisions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Input a file with names and attributes, creating a taskId. Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. [Concordance Sample Template File](https://my.apps.factset.com/oa/cms/oaAttachment/57096850-3834-49fd-9d35-d02d72bdb142/27317). The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful.&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; &lt;p&gt; A universeId must be included in request. If you do not have a universe created, reference the &#x60;/universe&#x60; endpoint. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="priorityColumn">Header Name of the column in the inputfile that contains the priority for the client id.  (optional)</param>
        /// <param name="bbgFigiColumn">Header Name of the column in the input file for the type &#x60;Bloomberg Listing/Regional/Security ID&#x60;. (optional)</param>
        /// <param name="bbgTickerColumn">Header Name of the column in the input file for the type Bloomberg &#x60;Listing and Regional Ticker&#x60;. (optional)</param>
        /// <param name="bicColumn">Header Name of the column in the input file for the type BICCode, &#x60;bank indentification code&#x60;.  (optional)</param>
        /// <param name="cikColumn">Header Name of the column in the input file for the type CIK, &#x60;Edgar Central Index Keys&#x60; (optional)</param>
        /// <param name="crdColumn">Header Name of the column in the input file for the type CRD, &#x60;Central Registration Depository&#x60;. (optional)</param>
        /// <param name="cusipColumn">Header Name of the column in the input file for the type &#x60;CUSIP&#x60; (optional)</param>
        /// <param name="einColumn">Header Name of the column in the input file for the type EIN, &#x60;EmployerIdentificationNumber&#x60;. (optional)</param>
        /// <param name="factsetIdColumn">Header Name of the column in the input file for the type FactSet Identifier - &#x60;FactSet -E,-S,-R, -L Permanent Identifier&#x60;. (optional)</param>
        /// <param name="fitchColumn">Header Name of the column in the input file for the type FitchCreditRating, &#x60;Fitch Ratings Identifier&#x60;. (optional)</param>
        /// <param name="gvkeyColumn">Header Name of the column in the input file for the type GVKEY - &#x60;Compustat Global Company Key&#x60;. (optional)</param>
        /// <param name="gvkeyIidColumn">Header Name of the column in the input file for the type GVKEY+IID - &#x60;Compustat Global Company Key and Issue Identifier&#x60;. (optional)</param>
        /// <param name="isinColumn">Header Name of the column in the input file for the type &#x60;ISIN&#x60;. (optional)</param>
        /// <param name="jcnColumn">Header Name of the column in the input file for the type JCN - &#x60;Japanese Corporate Number&#x60;. (optional)</param>
        /// <param name="leiColumn">Header Name of the column in the input file for the type LEI, &#x60;LegalEntityIdentifier&#x60;. (optional)</param>
        /// <param name="lxidColumn">Header Name of the column in the input file for the type LXID - &#x60;Markit Syndicated Loan Identifier&#x60;. (optional)</param>
        /// <param name="mdColumn">Header Name of the column in the input file for the type MoodysIssuer, &#x60;Moody&#39;s Ratings Identifier&#x60;. (optional)</param>
        /// <param name="redCodeColumn">Header Name of the column in the input file for the type Red Code - &#x60;Markit Reference Entity Identifier&#x60;. (optional)</param>
        /// <param name="rssdColumn">Header Name of the column in the input file for the type RSSD, &#x60;FederalReserveRSSDIdentifier&#x60;. (optional)</param>
        /// <param name="sedolColumn">Header Name of the column in the input file for the type &#x60;SEDOL&#x60;. (optional)</param>
        /// <param name="sprColumn">Header Name of the column in the input file for the type S&amp;PRating, &#x60;S&amp;P Ratings Identifier&#x60;. (optional)</param>
        /// <param name="tickerColumn">Header Name of the column in the input file for the type &#x60;PriceTicker&#x60;. (optional)</param>
        /// <param name="tickerExchangeColumn">Header Name of the column in the input file for the type &#x60;TickerExchange&#x60;. (optional)</param>
        /// <param name="tickerRegionColumn">Header Name of the column in the input file for the type &#x60;TickerRegion&#x60;. (optional)</param>
        /// <param name="ukchColumn">Header Name of the column in the input file for the type &#x60;UKCompanyHouse&#x60;. (optional)</param>
        /// <param name="valorenColumn">Header Name of the column in the input file for the type VALOR, &#x60;Valoren (\\\&quot;Valor\\\&quot;) Identification&#x60;. (optional)</param>
        /// <param name="wknColumn">Header Name of the column in the input file for the type WKN, &#x60;German Securities Identification&#x60;. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="autoRemap">When &#x60;true&#x60;, automatically re-evaluates and overwrites existing mappings using updated metadata submitted in this task. Applicable when the specified universe has auto-remap set to true. **Caution: Mapping updates cannot be undone.**  (optional)</param>
        /// <returns>EntityTaskResponse</returns>
        public EntityTaskResponse GetEntityTaskForList(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), string priorityColumn = default(string), string bbgFigiColumn = default(string), string bbgTickerColumn = default(string), string bicColumn = default(string), string cikColumn = default(string), string crdColumn = default(string), string cusipColumn = default(string), string einColumn = default(string), string factsetIdColumn = default(string), string fitchColumn = default(string), string gvkeyColumn = default(string), string gvkeyIidColumn = default(string), string isinColumn = default(string), string jcnColumn = default(string), string leiColumn = default(string), string lxidColumn = default(string), string mdColumn = default(string), string redCodeColumn = default(string), string rssdColumn = default(string), string sedolColumn = default(string), string sprColumn = default(string), string tickerColumn = default(string), string tickerExchangeColumn = default(string), string tickerRegionColumn = default(string), string ukchColumn = default(string), string valorenColumn = default(string), string wknColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), List<string> additionalContextColumns = default(List<string>), bool? autoRemap = default(bool?))
        {
            var localVarResponse = GetEntityTaskForListWithHttpInfo(universeId, taskName, inputFile, clientIdColumn, nameColumn, countryColumn, urlColumn, stateColumn, priorityColumn, bbgFigiColumn, bbgTickerColumn, bicColumn, cikColumn, crdColumn, cusipColumn, einColumn, factsetIdColumn, fitchColumn, gvkeyColumn, gvkeyIidColumn, isinColumn, jcnColumn, leiColumn, lxidColumn, mdColumn, redCodeColumn, rssdColumn, sedolColumn, sprColumn, tickerColumn, tickerExchangeColumn, tickerRegionColumn, ukchColumn, valorenColumn, wknColumn, includeEntityType, excludeEntityType, includeEntitySubType, excludeEntitySubType, additionalContextColumns, autoRemap);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Input a file with names and attributes, creating a taskId. Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. [Concordance Sample Template File](https://my.apps.factset.com/oa/cms/oaAttachment/57096850-3834-49fd-9d35-d02d72bdb142/27317). The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful.&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; &lt;p&gt; A universeId must be included in request. If you do not have a universe created, reference the &#x60;/universe&#x60; endpoint. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="priorityColumn">Header Name of the column in the inputfile that contains the priority for the client id.  (optional)</param>
        /// <param name="bbgFigiColumn">Header Name of the column in the input file for the type &#x60;Bloomberg Listing/Regional/Security ID&#x60;. (optional)</param>
        /// <param name="bbgTickerColumn">Header Name of the column in the input file for the type Bloomberg &#x60;Listing and Regional Ticker&#x60;. (optional)</param>
        /// <param name="bicColumn">Header Name of the column in the input file for the type BICCode, &#x60;bank indentification code&#x60;.  (optional)</param>
        /// <param name="cikColumn">Header Name of the column in the input file for the type CIK, &#x60;Edgar Central Index Keys&#x60; (optional)</param>
        /// <param name="crdColumn">Header Name of the column in the input file for the type CRD, &#x60;Central Registration Depository&#x60;. (optional)</param>
        /// <param name="cusipColumn">Header Name of the column in the input file for the type &#x60;CUSIP&#x60; (optional)</param>
        /// <param name="einColumn">Header Name of the column in the input file for the type EIN, &#x60;EmployerIdentificationNumber&#x60;. (optional)</param>
        /// <param name="factsetIdColumn">Header Name of the column in the input file for the type FactSet Identifier - &#x60;FactSet -E,-S,-R, -L Permanent Identifier&#x60;. (optional)</param>
        /// <param name="fitchColumn">Header Name of the column in the input file for the type FitchCreditRating, &#x60;Fitch Ratings Identifier&#x60;. (optional)</param>
        /// <param name="gvkeyColumn">Header Name of the column in the input file for the type GVKEY - &#x60;Compustat Global Company Key&#x60;. (optional)</param>
        /// <param name="gvkeyIidColumn">Header Name of the column in the input file for the type GVKEY+IID - &#x60;Compustat Global Company Key and Issue Identifier&#x60;. (optional)</param>
        /// <param name="isinColumn">Header Name of the column in the input file for the type &#x60;ISIN&#x60;. (optional)</param>
        /// <param name="jcnColumn">Header Name of the column in the input file for the type JCN - &#x60;Japanese Corporate Number&#x60;. (optional)</param>
        /// <param name="leiColumn">Header Name of the column in the input file for the type LEI, &#x60;LegalEntityIdentifier&#x60;. (optional)</param>
        /// <param name="lxidColumn">Header Name of the column in the input file for the type LXID - &#x60;Markit Syndicated Loan Identifier&#x60;. (optional)</param>
        /// <param name="mdColumn">Header Name of the column in the input file for the type MoodysIssuer, &#x60;Moody&#39;s Ratings Identifier&#x60;. (optional)</param>
        /// <param name="redCodeColumn">Header Name of the column in the input file for the type Red Code - &#x60;Markit Reference Entity Identifier&#x60;. (optional)</param>
        /// <param name="rssdColumn">Header Name of the column in the input file for the type RSSD, &#x60;FederalReserveRSSDIdentifier&#x60;. (optional)</param>
        /// <param name="sedolColumn">Header Name of the column in the input file for the type &#x60;SEDOL&#x60;. (optional)</param>
        /// <param name="sprColumn">Header Name of the column in the input file for the type S&amp;PRating, &#x60;S&amp;P Ratings Identifier&#x60;. (optional)</param>
        /// <param name="tickerColumn">Header Name of the column in the input file for the type &#x60;PriceTicker&#x60;. (optional)</param>
        /// <param name="tickerExchangeColumn">Header Name of the column in the input file for the type &#x60;TickerExchange&#x60;. (optional)</param>
        /// <param name="tickerRegionColumn">Header Name of the column in the input file for the type &#x60;TickerRegion&#x60;. (optional)</param>
        /// <param name="ukchColumn">Header Name of the column in the input file for the type &#x60;UKCompanyHouse&#x60;. (optional)</param>
        /// <param name="valorenColumn">Header Name of the column in the input file for the type VALOR, &#x60;Valoren (\\\&quot;Valor\\\&quot;) Identification&#x60;. (optional)</param>
        /// <param name="wknColumn">Header Name of the column in the input file for the type WKN, &#x60;German Securities Identification&#x60;. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="autoRemap">When &#x60;true&#x60;, automatically re-evaluates and overwrites existing mappings using updated metadata submitted in this task. Applicable when the specified universe has auto-remap set to true. **Caution: Mapping updates cannot be undone.**  (optional)</param>
        /// <returns>ApiResponse of EntityTaskResponse</returns>
        public ApiResponse<EntityTaskResponse> GetEntityTaskForListWithHttpInfo(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), string priorityColumn = default(string), string bbgFigiColumn = default(string), string bbgTickerColumn = default(string), string bicColumn = default(string), string cikColumn = default(string), string crdColumn = default(string), string cusipColumn = default(string), string einColumn = default(string), string factsetIdColumn = default(string), string fitchColumn = default(string), string gvkeyColumn = default(string), string gvkeyIidColumn = default(string), string isinColumn = default(string), string jcnColumn = default(string), string leiColumn = default(string), string lxidColumn = default(string), string mdColumn = default(string), string redCodeColumn = default(string), string rssdColumn = default(string), string sedolColumn = default(string), string sprColumn = default(string), string tickerColumn = default(string), string tickerExchangeColumn = default(string), string tickerRegionColumn = default(string), string ukchColumn = default(string), string valorenColumn = default(string), string wknColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), List<string> additionalContextColumns = default(List<string>), bool? autoRemap = default(bool?))
        {
            // verify the required parameter 'taskName' is set
            if (taskName == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'taskName' when calling EntityMatchBulkApi->GetEntityTaskForList");
            }

            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'inputFile' when calling EntityMatchBulkApi->GetEntityTaskForList");
            }

            // verify the required parameter 'clientIdColumn' is set
            if (clientIdColumn == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'clientIdColumn' when calling EntityMatchBulkApi->GetEntityTaskForList");
            }

            // verify the required parameter 'nameColumn' is set
            if (nameColumn == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'nameColumn' when calling EntityMatchBulkApi->GetEntityTaskForList");
            }

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("universeId", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(universeId)); // form parameter
            localVarRequestOptions.FormParameters.Add("taskName", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(taskName)); // form parameter
            localVarRequestOptions.FileParameters.Add("inputFile", inputFile);
            localVarRequestOptions.FormParameters.Add("clientIdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(clientIdColumn)); // form parameter
            localVarRequestOptions.FormParameters.Add("nameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(nameColumn)); // form parameter
            if (countryColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("countryColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(countryColumn)); // form parameter
            }
            if (urlColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("urlColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(urlColumn)); // form parameter
            }
            if (stateColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("stateColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(stateColumn)); // form parameter
            }
            if (priorityColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("priorityColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(priorityColumn)); // form parameter
            }
            if (bbgFigiColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("bbgFigiColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(bbgFigiColumn)); // form parameter
            }
            if (bbgTickerColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("bbgTickerColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(bbgTickerColumn)); // form parameter
            }
            if (bicColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("bicColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(bicColumn)); // form parameter
            }
            if (cikColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("cikColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(cikColumn)); // form parameter
            }
            if (crdColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("crdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(crdColumn)); // form parameter
            }
            if (cusipColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("cusipColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(cusipColumn)); // form parameter
            }
            if (einColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("einColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(einColumn)); // form parameter
            }
            if (factsetIdColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("factsetIdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(factsetIdColumn)); // form parameter
            }
            if (fitchColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("fitchColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(fitchColumn)); // form parameter
            }
            if (gvkeyColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("gvkeyColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(gvkeyColumn)); // form parameter
            }
            if (gvkeyIidColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("gvkeyIidColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(gvkeyIidColumn)); // form parameter
            }
            if (isinColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("isinColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(isinColumn)); // form parameter
            }
            if (jcnColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("jcnColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(jcnColumn)); // form parameter
            }
            if (leiColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("leiColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(leiColumn)); // form parameter
            }
            if (lxidColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("lxidColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(lxidColumn)); // form parameter
            }
            if (mdColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("mdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(mdColumn)); // form parameter
            }
            if (redCodeColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("redCodeColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(redCodeColumn)); // form parameter
            }
            if (rssdColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("rssdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(rssdColumn)); // form parameter
            }
            if (sedolColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("sedolColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(sedolColumn)); // form parameter
            }
            if (sprColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("sprColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(sprColumn)); // form parameter
            }
            if (tickerColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("tickerColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(tickerColumn)); // form parameter
            }
            if (tickerExchangeColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("tickerExchangeColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(tickerExchangeColumn)); // form parameter
            }
            if (tickerRegionColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("tickerRegionColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(tickerRegionColumn)); // form parameter
            }
            if (ukchColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("ukchColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(ukchColumn)); // form parameter
            }
            if (valorenColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("valorenColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(valorenColumn)); // form parameter
            }
            if (wknColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("wknColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(wknColumn)); // form parameter
            }
            if (includeEntityType != null)
            {
                localVarRequestOptions.FormParameters.Add("includeEntityType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(includeEntityType)); // form parameter
            }
            if (excludeEntityType != null)
            {
                localVarRequestOptions.FormParameters.Add("excludeEntityType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(excludeEntityType)); // form parameter
            }
            if (includeEntitySubType != null)
            {
                localVarRequestOptions.FormParameters.Add("includeEntitySubType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(includeEntitySubType)); // form parameter
            }
            if (excludeEntitySubType != null)
            {
                localVarRequestOptions.FormParameters.Add("excludeEntitySubType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(excludeEntitySubType)); // form parameter
            }
            if (additionalContextColumns != null)
            {
                localVarRequestOptions.FormParameters.Add("additionalContextColumns", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(additionalContextColumns)); // form parameter
            }
            if (autoRemap != null)
            {
                localVarRequestOptions.FormParameters.Add("autoRemap", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(autoRemap)); // form parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEntityTaskForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EntityTaskResponse>("/factset-concordance/v2/entity-task", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityTaskForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Input a file with names and attributes, creating a taskId. Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. [Concordance Sample Template File](https://my.apps.factset.com/oa/cms/oaAttachment/57096850-3834-49fd-9d35-d02d72bdb142/27317). The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful.&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; &lt;p&gt; A universeId must be included in request. If you do not have a universe created, reference the &#x60;/universe&#x60; endpoint. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="priorityColumn">Header Name of the column in the inputfile that contains the priority for the client id.  (optional)</param>
        /// <param name="bbgFigiColumn">Header Name of the column in the input file for the type &#x60;Bloomberg Listing/Regional/Security ID&#x60;. (optional)</param>
        /// <param name="bbgTickerColumn">Header Name of the column in the input file for the type Bloomberg &#x60;Listing and Regional Ticker&#x60;. (optional)</param>
        /// <param name="bicColumn">Header Name of the column in the input file for the type BICCode, &#x60;bank indentification code&#x60;.  (optional)</param>
        /// <param name="cikColumn">Header Name of the column in the input file for the type CIK, &#x60;Edgar Central Index Keys&#x60; (optional)</param>
        /// <param name="crdColumn">Header Name of the column in the input file for the type CRD, &#x60;Central Registration Depository&#x60;. (optional)</param>
        /// <param name="cusipColumn">Header Name of the column in the input file for the type &#x60;CUSIP&#x60; (optional)</param>
        /// <param name="einColumn">Header Name of the column in the input file for the type EIN, &#x60;EmployerIdentificationNumber&#x60;. (optional)</param>
        /// <param name="factsetIdColumn">Header Name of the column in the input file for the type FactSet Identifier - &#x60;FactSet -E,-S,-R, -L Permanent Identifier&#x60;. (optional)</param>
        /// <param name="fitchColumn">Header Name of the column in the input file for the type FitchCreditRating, &#x60;Fitch Ratings Identifier&#x60;. (optional)</param>
        /// <param name="gvkeyColumn">Header Name of the column in the input file for the type GVKEY - &#x60;Compustat Global Company Key&#x60;. (optional)</param>
        /// <param name="gvkeyIidColumn">Header Name of the column in the input file for the type GVKEY+IID - &#x60;Compustat Global Company Key and Issue Identifier&#x60;. (optional)</param>
        /// <param name="isinColumn">Header Name of the column in the input file for the type &#x60;ISIN&#x60;. (optional)</param>
        /// <param name="jcnColumn">Header Name of the column in the input file for the type JCN - &#x60;Japanese Corporate Number&#x60;. (optional)</param>
        /// <param name="leiColumn">Header Name of the column in the input file for the type LEI, &#x60;LegalEntityIdentifier&#x60;. (optional)</param>
        /// <param name="lxidColumn">Header Name of the column in the input file for the type LXID - &#x60;Markit Syndicated Loan Identifier&#x60;. (optional)</param>
        /// <param name="mdColumn">Header Name of the column in the input file for the type MoodysIssuer, &#x60;Moody&#39;s Ratings Identifier&#x60;. (optional)</param>
        /// <param name="redCodeColumn">Header Name of the column in the input file for the type Red Code - &#x60;Markit Reference Entity Identifier&#x60;. (optional)</param>
        /// <param name="rssdColumn">Header Name of the column in the input file for the type RSSD, &#x60;FederalReserveRSSDIdentifier&#x60;. (optional)</param>
        /// <param name="sedolColumn">Header Name of the column in the input file for the type &#x60;SEDOL&#x60;. (optional)</param>
        /// <param name="sprColumn">Header Name of the column in the input file for the type S&amp;PRating, &#x60;S&amp;P Ratings Identifier&#x60;. (optional)</param>
        /// <param name="tickerColumn">Header Name of the column in the input file for the type &#x60;PriceTicker&#x60;. (optional)</param>
        /// <param name="tickerExchangeColumn">Header Name of the column in the input file for the type &#x60;TickerExchange&#x60;. (optional)</param>
        /// <param name="tickerRegionColumn">Header Name of the column in the input file for the type &#x60;TickerRegion&#x60;. (optional)</param>
        /// <param name="ukchColumn">Header Name of the column in the input file for the type &#x60;UKCompanyHouse&#x60;. (optional)</param>
        /// <param name="valorenColumn">Header Name of the column in the input file for the type VALOR, &#x60;Valoren (\\\&quot;Valor\\\&quot;) Identification&#x60;. (optional)</param>
        /// <param name="wknColumn">Header Name of the column in the input file for the type WKN, &#x60;German Securities Identification&#x60;. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="autoRemap">When &#x60;true&#x60;, automatically re-evaluates and overwrites existing mappings using updated metadata submitted in this task. Applicable when the specified universe has auto-remap set to true. **Caution: Mapping updates cannot be undone.**  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityTaskResponse</returns>
        public async System.Threading.Tasks.Task<EntityTaskResponse>GetEntityTaskForListAsync(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), string priorityColumn = default(string), string bbgFigiColumn = default(string), string bbgTickerColumn = default(string), string bicColumn = default(string), string cikColumn = default(string), string crdColumn = default(string), string cusipColumn = default(string), string einColumn = default(string), string factsetIdColumn = default(string), string fitchColumn = default(string), string gvkeyColumn = default(string), string gvkeyIidColumn = default(string), string isinColumn = default(string), string jcnColumn = default(string), string leiColumn = default(string), string lxidColumn = default(string), string mdColumn = default(string), string redCodeColumn = default(string), string rssdColumn = default(string), string sedolColumn = default(string), string sprColumn = default(string), string tickerColumn = default(string), string tickerExchangeColumn = default(string), string tickerRegionColumn = default(string), string ukchColumn = default(string), string valorenColumn = default(string), string wknColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), List<string> additionalContextColumns = default(List<string>), bool? autoRemap = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEntityTaskForListWithHttpInfoAsync(universeId, taskName, inputFile, clientIdColumn, nameColumn, countryColumn, urlColumn, stateColumn, priorityColumn, bbgFigiColumn, bbgTickerColumn, bicColumn, cikColumn, crdColumn, cusipColumn, einColumn, factsetIdColumn, fitchColumn, gvkeyColumn, gvkeyIidColumn, isinColumn, jcnColumn, leiColumn, lxidColumn, mdColumn, redCodeColumn, rssdColumn, sedolColumn, sprColumn, tickerColumn, tickerExchangeColumn, tickerRegionColumn, ukchColumn, valorenColumn, wknColumn, includeEntityType, excludeEntityType, includeEntitySubType, excludeEntitySubType, additionalContextColumns, autoRemap, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Input a file with names and attributes, creating a taskId. Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. [Concordance Sample Template File](https://my.apps.factset.com/oa/cms/oaAttachment/57096850-3834-49fd-9d35-d02d72bdb142/27317). The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful.&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; &lt;p&gt; A universeId must be included in request. If you do not have a universe created, reference the &#x60;/universe&#x60; endpoint. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId">The id of the universe that entities should be mapped to. Reference the &#x60;/universe&#x60; endpoint to create a universe, or view available universes via &#x60;/universes&#x60;.</param>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="priorityColumn">Header Name of the column in the inputfile that contains the priority for the client id.  (optional)</param>
        /// <param name="bbgFigiColumn">Header Name of the column in the input file for the type &#x60;Bloomberg Listing/Regional/Security ID&#x60;. (optional)</param>
        /// <param name="bbgTickerColumn">Header Name of the column in the input file for the type Bloomberg &#x60;Listing and Regional Ticker&#x60;. (optional)</param>
        /// <param name="bicColumn">Header Name of the column in the input file for the type BICCode, &#x60;bank indentification code&#x60;.  (optional)</param>
        /// <param name="cikColumn">Header Name of the column in the input file for the type CIK, &#x60;Edgar Central Index Keys&#x60; (optional)</param>
        /// <param name="crdColumn">Header Name of the column in the input file for the type CRD, &#x60;Central Registration Depository&#x60;. (optional)</param>
        /// <param name="cusipColumn">Header Name of the column in the input file for the type &#x60;CUSIP&#x60; (optional)</param>
        /// <param name="einColumn">Header Name of the column in the input file for the type EIN, &#x60;EmployerIdentificationNumber&#x60;. (optional)</param>
        /// <param name="factsetIdColumn">Header Name of the column in the input file for the type FactSet Identifier - &#x60;FactSet -E,-S,-R, -L Permanent Identifier&#x60;. (optional)</param>
        /// <param name="fitchColumn">Header Name of the column in the input file for the type FitchCreditRating, &#x60;Fitch Ratings Identifier&#x60;. (optional)</param>
        /// <param name="gvkeyColumn">Header Name of the column in the input file for the type GVKEY - &#x60;Compustat Global Company Key&#x60;. (optional)</param>
        /// <param name="gvkeyIidColumn">Header Name of the column in the input file for the type GVKEY+IID - &#x60;Compustat Global Company Key and Issue Identifier&#x60;. (optional)</param>
        /// <param name="isinColumn">Header Name of the column in the input file for the type &#x60;ISIN&#x60;. (optional)</param>
        /// <param name="jcnColumn">Header Name of the column in the input file for the type JCN - &#x60;Japanese Corporate Number&#x60;. (optional)</param>
        /// <param name="leiColumn">Header Name of the column in the input file for the type LEI, &#x60;LegalEntityIdentifier&#x60;. (optional)</param>
        /// <param name="lxidColumn">Header Name of the column in the input file for the type LXID - &#x60;Markit Syndicated Loan Identifier&#x60;. (optional)</param>
        /// <param name="mdColumn">Header Name of the column in the input file for the type MoodysIssuer, &#x60;Moody&#39;s Ratings Identifier&#x60;. (optional)</param>
        /// <param name="redCodeColumn">Header Name of the column in the input file for the type Red Code - &#x60;Markit Reference Entity Identifier&#x60;. (optional)</param>
        /// <param name="rssdColumn">Header Name of the column in the input file for the type RSSD, &#x60;FederalReserveRSSDIdentifier&#x60;. (optional)</param>
        /// <param name="sedolColumn">Header Name of the column in the input file for the type &#x60;SEDOL&#x60;. (optional)</param>
        /// <param name="sprColumn">Header Name of the column in the input file for the type S&amp;PRating, &#x60;S&amp;P Ratings Identifier&#x60;. (optional)</param>
        /// <param name="tickerColumn">Header Name of the column in the input file for the type &#x60;PriceTicker&#x60;. (optional)</param>
        /// <param name="tickerExchangeColumn">Header Name of the column in the input file for the type &#x60;TickerExchange&#x60;. (optional)</param>
        /// <param name="tickerRegionColumn">Header Name of the column in the input file for the type &#x60;TickerRegion&#x60;. (optional)</param>
        /// <param name="ukchColumn">Header Name of the column in the input file for the type &#x60;UKCompanyHouse&#x60;. (optional)</param>
        /// <param name="valorenColumn">Header Name of the column in the input file for the type VALOR, &#x60;Valoren (\\\&quot;Valor\\\&quot;) Identification&#x60;. (optional)</param>
        /// <param name="wknColumn">Header Name of the column in the input file for the type WKN, &#x60;German Securities Identification&#x60;. (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="additionalContextColumns">Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records.  (optional)</param>
        /// <param name="autoRemap">When &#x60;true&#x60;, automatically re-evaluates and overwrites existing mappings using updated metadata submitted in this task. Applicable when the specified universe has auto-remap set to true. **Caution: Mapping updates cannot be undone.**  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityTaskResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityTaskResponse>> GetEntityTaskForListWithHttpInfoAsync(int universeId, string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), string priorityColumn = default(string), string bbgFigiColumn = default(string), string bbgTickerColumn = default(string), string bicColumn = default(string), string cikColumn = default(string), string crdColumn = default(string), string cusipColumn = default(string), string einColumn = default(string), string factsetIdColumn = default(string), string fitchColumn = default(string), string gvkeyColumn = default(string), string gvkeyIidColumn = default(string), string isinColumn = default(string), string jcnColumn = default(string), string leiColumn = default(string), string lxidColumn = default(string), string mdColumn = default(string), string redCodeColumn = default(string), string rssdColumn = default(string), string sedolColumn = default(string), string sprColumn = default(string), string tickerColumn = default(string), string tickerExchangeColumn = default(string), string tickerRegionColumn = default(string), string ukchColumn = default(string), string valorenColumn = default(string), string wknColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), List<string> additionalContextColumns = default(List<string>), bool? autoRemap = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskName' is set
            if (taskName == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'taskName' when calling EntityMatchBulkApi->GetEntityTaskForList");
            }

            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'inputFile' when calling EntityMatchBulkApi->GetEntityTaskForList");
            }

            // verify the required parameter 'clientIdColumn' is set
            if (clientIdColumn == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'clientIdColumn' when calling EntityMatchBulkApi->GetEntityTaskForList");
            }

            // verify the required parameter 'nameColumn' is set
            if (nameColumn == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'nameColumn' when calling EntityMatchBulkApi->GetEntityTaskForList");
            }


            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("universeId", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(universeId)); // form parameter
            localVarRequestOptions.FormParameters.Add("taskName", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(taskName)); // form parameter
            localVarRequestOptions.FileParameters.Add("inputFile", inputFile);
            localVarRequestOptions.FormParameters.Add("clientIdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(clientIdColumn)); // form parameter
            localVarRequestOptions.FormParameters.Add("nameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(nameColumn)); // form parameter
            if (countryColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("countryColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(countryColumn)); // form parameter
            }
            if (urlColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("urlColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(urlColumn)); // form parameter
            }
            if (stateColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("stateColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(stateColumn)); // form parameter
            }
            if (priorityColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("priorityColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(priorityColumn)); // form parameter
            }
            if (bbgFigiColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("bbgFigiColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(bbgFigiColumn)); // form parameter
            }
            if (bbgTickerColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("bbgTickerColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(bbgTickerColumn)); // form parameter
            }
            if (bicColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("bicColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(bicColumn)); // form parameter
            }
            if (cikColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("cikColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(cikColumn)); // form parameter
            }
            if (crdColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("crdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(crdColumn)); // form parameter
            }
            if (cusipColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("cusipColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(cusipColumn)); // form parameter
            }
            if (einColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("einColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(einColumn)); // form parameter
            }
            if (factsetIdColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("factsetIdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(factsetIdColumn)); // form parameter
            }
            if (fitchColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("fitchColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(fitchColumn)); // form parameter
            }
            if (gvkeyColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("gvkeyColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(gvkeyColumn)); // form parameter
            }
            if (gvkeyIidColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("gvkeyIidColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(gvkeyIidColumn)); // form parameter
            }
            if (isinColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("isinColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(isinColumn)); // form parameter
            }
            if (jcnColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("jcnColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(jcnColumn)); // form parameter
            }
            if (leiColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("leiColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(leiColumn)); // form parameter
            }
            if (lxidColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("lxidColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(lxidColumn)); // form parameter
            }
            if (mdColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("mdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(mdColumn)); // form parameter
            }
            if (redCodeColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("redCodeColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(redCodeColumn)); // form parameter
            }
            if (rssdColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("rssdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(rssdColumn)); // form parameter
            }
            if (sedolColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("sedolColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(sedolColumn)); // form parameter
            }
            if (sprColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("sprColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(sprColumn)); // form parameter
            }
            if (tickerColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("tickerColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(tickerColumn)); // form parameter
            }
            if (tickerExchangeColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("tickerExchangeColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(tickerExchangeColumn)); // form parameter
            }
            if (tickerRegionColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("tickerRegionColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(tickerRegionColumn)); // form parameter
            }
            if (ukchColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("ukchColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(ukchColumn)); // form parameter
            }
            if (valorenColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("valorenColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(valorenColumn)); // form parameter
            }
            if (wknColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("wknColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(wknColumn)); // form parameter
            }
            if (includeEntityType != null)
            {
                localVarRequestOptions.FormParameters.Add("includeEntityType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(includeEntityType)); // form parameter
            }
            if (excludeEntityType != null)
            {
                localVarRequestOptions.FormParameters.Add("excludeEntityType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(excludeEntityType)); // form parameter
            }
            if (includeEntitySubType != null)
            {
                localVarRequestOptions.FormParameters.Add("includeEntitySubType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(includeEntitySubType)); // form parameter
            }
            if (excludeEntitySubType != null)
            {
                localVarRequestOptions.FormParameters.Add("excludeEntitySubType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(excludeEntitySubType)); // form parameter
            }
            if (additionalContextColumns != null)
            {
                localVarRequestOptions.FormParameters.Add("additionalContextColumns", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(additionalContextColumns)); // form parameter
            }
            if (autoRemap != null)
            {
                localVarRequestOptions.FormParameters.Add("autoRemap", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(autoRemap)); // form parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEntityTaskForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EntityTaskResponse>("/factset-concordance/v2/entity-task", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityTaskForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>EntityTaskStatusResponse</returns>
        public EntityTaskStatusResponse GetEntityTaskStatus(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>))
        {
            var localVarResponse = GetEntityTaskStatusWithHttpInfo(taskId, offset, limit, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>ApiResponse of EntityTaskStatusResponse</returns>
        public ApiResponse<EntityTaskStatusResponse> GetEntityTaskStatusWithHttpInfo(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>))
        {
            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("csv", "status", status));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEntityTaskStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EntityTaskStatusResponse>("/factset-concordance/v2/entity-task-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityTaskStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityTaskStatusResponse</returns>
        public async System.Threading.Tasks.Task<EntityTaskStatusResponse>GetEntityTaskStatusAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEntityTaskStatusWithHttpInfoAsync(taskId, offset, limit, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityTaskStatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityTaskStatusResponse>> GetEntityTaskStatusWithHttpInfoAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("csv", "status", status));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEntityTaskStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityTaskStatusResponse>("/factset-concordance/v2/entity-task-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityTaskStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
