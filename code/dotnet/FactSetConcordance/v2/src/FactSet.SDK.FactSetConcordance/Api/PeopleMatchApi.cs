/*
 * FactSet Concordance API
 *
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetConcordance.Client;
using FactSet.SDK.FactSetConcordance.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetConcordance.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleMatchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find potential people matches given a person&#39;s name.People matches can be retrieved using person&#39;s name and other attributes like firstname, middlename and lastname.
        /// </summary>
        /// <remarks>
        /// Finds the best people candidates matching the given name. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /people-match to fetch up to 25 names. Otherwise, use the \&quot;People Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Entity the person is associated with. It is used to filter the candidates before taking a match decision. Can be entity ID or name. The supported entity types match the what is supported via the /company match.</param>
        /// <param name="personName">Name of Person to match. (optional)</param>
        /// <param name="salutation">Title in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="firstName">First name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="middleName">Middle name of person.This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="lastName">Last name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="suffix">Suffix in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <returns>PeopleMatchesResponse</returns>
        PeopleMatchesResponse GetPeopleMatch(string entity, string personName = default(string), string salutation = default(string), string firstName = default(string), string middleName = default(string), string lastName = default(string), string suffix = default(string));

        /// <summary>
        /// Find potential people matches given a person&#39;s name.People matches can be retrieved using person&#39;s name and other attributes like firstname, middlename and lastname.
        /// </summary>
        /// <remarks>
        /// Finds the best people candidates matching the given name. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /people-match to fetch up to 25 names. Otherwise, use the \&quot;People Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Entity the person is associated with. It is used to filter the candidates before taking a match decision. Can be entity ID or name. The supported entity types match the what is supported via the /company match.</param>
        /// <param name="personName">Name of Person to match. (optional)</param>
        /// <param name="salutation">Title in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="firstName">First name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="middleName">Middle name of person.This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="lastName">Last name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="suffix">Suffix in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <returns>ApiResponse of PeopleMatchesResponse</returns>
        ApiResponse<PeopleMatchesResponse> GetPeopleMatchWithHttpInfo(string entity, string personName = default(string), string salutation = default(string), string firstName = default(string), string middleName = default(string), string lastName = default(string), string suffix = default(string));
        /// <summary>
        /// Find potential people matches given a person&#39;s name.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate people matching the given people names. Additional attributes can be supplied to narrow the search. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleMatchRequest">A request to People match.</param>
        /// <returns>PeopleMatchesResponse</returns>
        PeopleMatchesResponse GetPeopleMatchForList(PeopleMatchRequest peopleMatchRequest);

        /// <summary>
        /// Find potential people matches given a person&#39;s name.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate people matching the given people names. Additional attributes can be supplied to narrow the search. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleMatchRequest">A request to People match.</param>
        /// <returns>ApiResponse of PeopleMatchesResponse</returns>
        ApiResponse<PeopleMatchesResponse> GetPeopleMatchForListWithHttpInfo(PeopleMatchRequest peopleMatchRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleMatchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Find potential people matches given a person&#39;s name.People matches can be retrieved using person&#39;s name and other attributes like firstname, middlename and lastname.
        /// </summary>
        /// <remarks>
        /// Finds the best people candidates matching the given name. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /people-match to fetch up to 25 names. Otherwise, use the \&quot;People Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Entity the person is associated with. It is used to filter the candidates before taking a match decision. Can be entity ID or name. The supported entity types match the what is supported via the /company match.</param>
        /// <param name="personName">Name of Person to match. (optional)</param>
        /// <param name="salutation">Title in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="firstName">First name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="middleName">Middle name of person.This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="lastName">Last name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="suffix">Suffix in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleMatchesResponse</returns>
        System.Threading.Tasks.Task<PeopleMatchesResponse> GetPeopleMatchAsync(string entity, string personName = default(string), string salutation = default(string), string firstName = default(string), string middleName = default(string), string lastName = default(string), string suffix = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find potential people matches given a person&#39;s name.People matches can be retrieved using person&#39;s name and other attributes like firstname, middlename and lastname.
        /// </summary>
        /// <remarks>
        /// Finds the best people candidates matching the given name. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /people-match to fetch up to 25 names. Otherwise, use the \&quot;People Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Entity the person is associated with. It is used to filter the candidates before taking a match decision. Can be entity ID or name. The supported entity types match the what is supported via the /company match.</param>
        /// <param name="personName">Name of Person to match. (optional)</param>
        /// <param name="salutation">Title in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="firstName">First name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="middleName">Middle name of person.This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="lastName">Last name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="suffix">Suffix in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleMatchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeopleMatchesResponse>> GetPeopleMatchWithHttpInfoAsync(string entity, string personName = default(string), string salutation = default(string), string firstName = default(string), string middleName = default(string), string lastName = default(string), string suffix = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find potential people matches given a person&#39;s name.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate people matching the given people names. Additional attributes can be supplied to narrow the search. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleMatchRequest">A request to People match.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleMatchesResponse</returns>
        System.Threading.Tasks.Task<PeopleMatchesResponse> GetPeopleMatchForListAsync(PeopleMatchRequest peopleMatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find potential people matches given a person&#39;s name.
        /// </summary>
        /// <remarks>
        /// Finds the best candidate people matching the given people names. Additional attributes can be supplied to narrow the search. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleMatchRequest">A request to People match.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleMatchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeopleMatchesResponse>> GetPeopleMatchForListWithHttpInfoAsync(PeopleMatchRequest peopleMatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleMatchApi : IPeopleMatchApiSync, IPeopleMatchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PeopleMatchApi : IPeopleMatchApi
    {
        private FactSet.SDK.FactSetConcordance.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetPeopleMatchResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PeopleMatchesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPeopleMatchForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PeopleMatchesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleMatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeopleMatchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleMatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeopleMatchApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetConcordance.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetConcordance.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetConcordance.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleMatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PeopleMatchApi(FactSet.SDK.FactSetConcordance.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetConcordance.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetConcordance.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleMatchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PeopleMatchApi(FactSet.SDK.FactSetConcordance.Client.ISynchronousClient client, FactSet.SDK.FactSetConcordance.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetConcordance.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetConcordance.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Find potential people matches given a person&#39;s name.People matches can be retrieved using person&#39;s name and other attributes like firstname, middlename and lastname. Finds the best people candidates matching the given name. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /people-match to fetch up to 25 names. Otherwise, use the \&quot;People Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Entity the person is associated with. It is used to filter the candidates before taking a match decision. Can be entity ID or name. The supported entity types match the what is supported via the /company match.</param>
        /// <param name="personName">Name of Person to match. (optional)</param>
        /// <param name="salutation">Title in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="firstName">First name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="middleName">Middle name of person.This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="lastName">Last name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="suffix">Suffix in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <returns>PeopleMatchesResponse</returns>
        public PeopleMatchesResponse GetPeopleMatch(string entity, string personName = default(string), string salutation = default(string), string firstName = default(string), string middleName = default(string), string lastName = default(string), string suffix = default(string))
        {
            var localVarResponse = GetPeopleMatchWithHttpInfo(entity, personName, salutation, firstName, middleName, lastName, suffix);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find potential people matches given a person&#39;s name.People matches can be retrieved using person&#39;s name and other attributes like firstname, middlename and lastname. Finds the best people candidates matching the given name. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /people-match to fetch up to 25 names. Otherwise, use the \&quot;People Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Entity the person is associated with. It is used to filter the candidates before taking a match decision. Can be entity ID or name. The supported entity types match the what is supported via the /company match.</param>
        /// <param name="personName">Name of Person to match. (optional)</param>
        /// <param name="salutation">Title in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="firstName">First name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="middleName">Middle name of person.This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="lastName">Last name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="suffix">Suffix in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <returns>ApiResponse of PeopleMatchesResponse</returns>
        public ApiResponse<PeopleMatchesResponse> GetPeopleMatchWithHttpInfo(string entity, string personName = default(string), string salutation = default(string), string firstName = default(string), string middleName = default(string), string lastName = default(string), string suffix = default(string))
        {
            // verify the required parameter 'entity' is set
            if (entity == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'entity' when calling PeopleMatchApi->GetPeopleMatch");
            }

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (personName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "personName", personName));
            }
            if (salutation != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "salutation", salutation));
            }
            if (firstName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "firstName", firstName));
            }
            if (middleName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "middleName", middleName));
            }
            if (lastName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "lastName", lastName));
            }
            if (suffix != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "suffix", suffix));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPeopleMatchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            PeopleMatchesResponse>("/factset-concordance/v2/people-match", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Find potential people matches given a person&#39;s name.People matches can be retrieved using person&#39;s name and other attributes like firstname, middlename and lastname. Finds the best people candidates matching the given name. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /people-match to fetch up to 25 names. Otherwise, use the \&quot;People Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Entity the person is associated with. It is used to filter the candidates before taking a match decision. Can be entity ID or name. The supported entity types match the what is supported via the /company match.</param>
        /// <param name="personName">Name of Person to match. (optional)</param>
        /// <param name="salutation">Title in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="firstName">First name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="middleName">Middle name of person.This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="lastName">Last name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="suffix">Suffix in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleMatchesResponse</returns>
        public async System.Threading.Tasks.Task<PeopleMatchesResponse>GetPeopleMatchAsync(string entity, string personName = default(string), string salutation = default(string), string firstName = default(string), string middleName = default(string), string lastName = default(string), string suffix = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPeopleMatchWithHttpInfoAsync(entity, personName, salutation, firstName, middleName, lastName, suffix, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find potential people matches given a person&#39;s name.People matches can be retrieved using person&#39;s name and other attributes like firstname, middlename and lastname. Finds the best people candidates matching the given name. &lt;p&gt;**Max of 1 Name permitted in a single GET request.** Use the POST method for /people-match to fetch up to 25 names. Otherwise, use the \&quot;People Match - Bulk\&quot; workflow to submit larger universes of names to be concorded via a file.&lt;/p&gt;&lt;p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Entity the person is associated with. It is used to filter the candidates before taking a match decision. Can be entity ID or name. The supported entity types match the what is supported via the /company match.</param>
        /// <param name="personName">Name of Person to match. (optional)</param>
        /// <param name="salutation">Title in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="firstName">First name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="middleName">Middle name of person.This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="lastName">Last name of person. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="suffix">Suffix in person&#39;s name. This parameter should not be provided when the person name is provided as the input. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleMatchesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PeopleMatchesResponse>> GetPeopleMatchWithHttpInfoAsync(string entity, string personName = default(string), string salutation = default(string), string firstName = default(string), string middleName = default(string), string lastName = default(string), string suffix = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entity' is set
            if (entity == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'entity' when calling PeopleMatchApi->GetPeopleMatch");
            }


            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (personName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "personName", personName));
            }
            if (salutation != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "salutation", salutation));
            }
            if (firstName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "firstName", firstName));
            }
            if (middleName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "middleName", middleName));
            }
            if (lastName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "lastName", lastName));
            }
            if (suffix != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "suffix", suffix));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPeopleMatchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PeopleMatchesResponse>("/factset-concordance/v2/people-match", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find potential people matches given a person&#39;s name. Finds the best candidate people matching the given people names. Additional attributes can be supplied to narrow the search. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleMatchRequest">A request to People match.</param>
        /// <returns>PeopleMatchesResponse</returns>
        public PeopleMatchesResponse GetPeopleMatchForList(PeopleMatchRequest peopleMatchRequest)
        {
            var localVarResponse = GetPeopleMatchForListWithHttpInfo(peopleMatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find potential people matches given a person&#39;s name. Finds the best candidate people matching the given people names. Additional attributes can be supplied to narrow the search. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleMatchRequest">A request to People match.</param>
        /// <returns>ApiResponse of PeopleMatchesResponse</returns>
        public ApiResponse<PeopleMatchesResponse> GetPeopleMatchForListWithHttpInfo(PeopleMatchRequest peopleMatchRequest)
        {
            // verify the required parameter 'peopleMatchRequest' is set
            if (peopleMatchRequest == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'peopleMatchRequest' when calling PeopleMatchApi->GetPeopleMatchForList");
            }

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = peopleMatchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPeopleMatchForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            PeopleMatchesResponse>("/factset-concordance/v2/people-match", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleMatchForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Find potential people matches given a person&#39;s name. Finds the best candidate people matching the given people names. Additional attributes can be supplied to narrow the search. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleMatchRequest">A request to People match.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleMatchesResponse</returns>
        public async System.Threading.Tasks.Task<PeopleMatchesResponse>GetPeopleMatchForListAsync(PeopleMatchRequest peopleMatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPeopleMatchForListWithHttpInfoAsync(peopleMatchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find potential people matches given a person&#39;s name. Finds the best candidate people matching the given people names. Additional attributes can be supplied to narrow the search. If a &#x60;universeId&#x60; is provided, any match for an input including a &#x60;clientId&#x60; will be saved to that universe. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleMatchRequest">A request to People match.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleMatchesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PeopleMatchesResponse>> GetPeopleMatchForListWithHttpInfoAsync(PeopleMatchRequest peopleMatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'peopleMatchRequest' is set
            if (peopleMatchRequest == null)
            {
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'peopleMatchRequest' when calling PeopleMatchApi->GetPeopleMatchForList");
            }


            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json;charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = peopleMatchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPeopleMatchForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PeopleMatchesResponse>("/factset-concordance/v2/people-match", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleMatchForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
