/*
 * FactSet Concordance API
 *
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request. With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetConcordance.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetConcordance.Model
{
    /// <summary>
    /// Entity Match object showing the decision reached for each Entity. 
    /// </summary>
    [DataContract(Name = "EntityMatch")]
    public partial class EntityMatch : IEquatable<EntityMatch>, IValidatableObject
    {
        /// <summary>
        /// Concordance status of the submitted, where -    * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)   * UNMAPPED - The requested Entity Name is unmapped by FactSet.   * INDETERMINATE - The requested Entity Name has unable to make a mapping. 
        /// </summary>
        /// <value>Concordance status of the submitted, where -    * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)   * UNMAPPED - The requested Entity Name is unmapped by FactSet.   * INDETERMINATE - The requested Entity Name has unable to make a mapping. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MapStatusEnum
        {
            /// <summary>
            /// Enum MAPPED for value: MAPPED
            /// </summary>
            [EnumMember(Value = "MAPPED")]
            MAPPED = 1,

            /// <summary>
            /// Enum UNMAPPED for value: UNMAPPED
            /// </summary>
            [EnumMember(Value = "UNMAPPED")]
            UNMAPPED = 2,

            /// <summary>
            /// Enum INDETERMINATE for value: INDETERMINATE
            /// </summary>
            [EnumMember(Value = "INDETERMINATE")]
            INDETERMINATE = 3

        }


        /// <summary>
        /// Concordance status of the submitted, where -    * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)   * UNMAPPED - The requested Entity Name is unmapped by FactSet.   * INDETERMINATE - The requested Entity Name has unable to make a mapping. 
        /// </summary>
        /// <value>Concordance status of the submitted, where -    * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)   * UNMAPPED - The requested Entity Name is unmapped by FactSet.   * INDETERMINATE - The requested Entity Name has unable to make a mapping. </value>
        [DataMember(Name = "mapStatus", EmitDefaultValue = true)]
        public MapStatusEnum? MapStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatch" /> class.
        /// </summary>
        /// <param name="taskId">Identifier denoting a specific Concordance task submitted by the user. This value will be null for /entity-match endpoint responses and is only available when using the \&quot;Bulk\&quot; workflow. .</param>
        /// <param name="universeId">The id of the universe that entities should be mapped to.</param>
        /// <param name="clientId">Unique Identifer provided by the user in the request to represent the entity Name being requested..</param>
        /// <param name="clientBbgFigi">Name of the column as provided by the user -  Bloomberg Listing/Regional/Security ID..</param>
        /// <param name="clientBbgTicker">Name of the column as provided by the user -  Bloomberg Listing and Regional Ticker..</param>
        /// <param name="clientBic">Name of the column as provided by the user - BICCode, bank indentification code.</param>
        /// <param name="clientCik">Name of the column as provided by the user -  CIK, Edgar Central Index Keys.</param>
        /// <param name="clientCountry">ISO2 country code specified in the request..</param>
        /// <param name="clientCrd">Name of the column as provided by the user -  CRD, Central Registration Depository.</param>
        /// <param name="clientCusip">Name of the column as provided by the user -  CUSIP..</param>
        /// <param name="clientEin">Name of the column as provided by the user -  EmployerIdentificationNumber, EIN..</param>
        /// <param name="clientFactsetId">Name of the column as provided by the user -  FactSet Identifier, FactSet -E,-S,-R, -L Permanent Identifier..</param>
        /// <param name="clientFitch">Name of the column as provided by the user -  FitchCreditRating, Fitch Ratings Identifier..</param>
        /// <param name="clientGvkey">Name of the column as provided by the user -  GVKEY, Compustat Global Company Key..</param>
        /// <param name="clientGvkeyIid">Name of the column as provided by the user -  GVKEY+IID, Compustat Global Company Key and Issue Identifier..</param>
        /// <param name="clientIsin">Name of the column as provided by the user -  ISIN..</param>
        /// <param name="clientJcn">Name of the column as provided by the user -  JCN , Japanese Corporate Number..</param>
        /// <param name="clientLei">Name of the column as provided by the user -  LegalEntityIdentifier, LEI..</param>
        /// <param name="clientLxid">Name of the column as provided by the user -  LXID, Markit Syndicated Loan Identifier..</param>
        /// <param name="clientMd">Name of the column as provided by the user -  MoodysIssuer, Moody&#39;s Ratings Identifier..</param>
        /// <param name="clientName">Name of the entity to match as specified in the request.</param>
        /// <param name="clientPriority">Name of the priority column as provided by the user..</param>
        /// <param name="clientRedCode">Name of the column as provided by the user -  RedCode, Markit Reference Entity Identifier..</param>
        /// <param name="clientRssd">Name of the column as provided by the user -  FederalReserveRSSDIdentifier, RSSD..</param>
        /// <param name="clientSedol">Name of the column as provided by the user -  SEDOL..</param>
        /// <param name="clientSpr">Name of the column as provided by the user -  S&amp;PRating, S&amp;P Ratings Identifier..</param>
        /// <param name="clientState">State code specified in the request..</param>
        /// <param name="clientTicker">Name of the column as provided by the user -  PriceTicker..</param>
        /// <param name="clientTickerExchange">Name of the column as provided by the user -  TickerExch..</param>
        /// <param name="clientTickerRegion">Name of the column as provided by the user -  TickerRegion.</param>
        /// <param name="clientUkch">Name of the column as provided by the user -  UKCompanyHouse.</param>
        /// <param name="clientUrl">URL specified in the request..</param>
        /// <param name="clientValoren">Name of the column as provided by the user -  VALOR, Valoren (\&quot;Valor\&quot;) Identification..</param>
        /// <param name="clientWkn">Name of the column as provided by the user -  WKN, German Securities Identification..</param>
        /// <param name="clientAdditionalContext">Any additional context column along with their values in the input file or single search.  To be used by Managed Service for any unmapped records. .</param>
        /// <param name="symbolMatchType">Source type of the Symbol that matched.</param>
        /// <param name="rowIndex">Row number for match in the request or input file..</param>
        /// <param name="matchFlag">Flag denoting if the row is a match..</param>
        /// <param name="entityId">FactSet Entity Identifier of the entity matched respective to the requested Name submitted. For more detail, visit [FactSet Permanent Security Identifier](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881) .</param>
        /// <param name="entityName">Full name corresponding to the matched entity..</param>
        /// <param name="url">URL of the matched entity..</param>
        /// <param name="mapStatus">Concordance status of the submitted, where -    * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)   * UNMAPPED - The requested Entity Name is unmapped by FactSet.   * INDETERMINATE - The requested Entity Name has unable to make a mapping. .</param>
        /// <param name="similarityScore">Probability of the match being similar to the entity requested as determined by the Concordance algorithm. A similarityScore of 1 is the highest level of similarity. .</param>
        /// <param name="confidenceScore">Additional statistic calculated by the algorithm that is used to ensure the validity of the match result. A confidenceScore of 1 is the highest level of confidence. .</param>
        /// <param name="countryCode">ISO2 country code corresponding to the location of the matched entity..</param>
        /// <param name="countryName">Country name corresponding to the location of the matched entity.</param>
        /// <param name="stateCode">Two character state code corresponding to the location of the matched entity..</param>
        /// <param name="stateName">State name corresponding to the location of the matched entity..</param>
        /// <param name="sicCode">Standard Industrial Classification (SIC) Code of the matched entity..</param>
        /// <param name="entityTypeCode">Code representing the entity type of the matched entity. See the related request parameter for a table of all Codes and their respective descriptions..</param>
        /// <param name="entityTypeDescription">Description of of the matched entity&#39;s type..</param>
        /// <param name="entitySubTypeCode">Code representing the entity subtype of the matched entity. See the related request parameter for a table of all Codes and their respective descriptions..</param>
        /// <param name="locationCity">City where the matched entity is located..</param>
        /// <param name="regionName">Region where the matched entity is located..</param>
        /// <param name="factsetIndustryCode">FactSet Industry Classification Code of the matched entity..</param>
        /// <param name="factsetIndustryName">Name of the matched entity&#39;s FactSet Industry Classification..</param>
        /// <param name="factsetSectorCode">Name of the matched entity&#39;s FactSet Sector Classification Code..</param>
        /// <param name="factsetSectorName">Name of the matched entity&#39;s FactSet Sector Classification..</param>
        /// <param name="parentName">Name of the matched entity&#39;s parent entity..</param>
        /// <param name="parentMatchFlag">Flag denoting that the matched entity is the parent of another match..</param>
        /// <param name="nameMatchString">String on which the Concordance algorithm mapped the submitted entity..</param>
        /// <param name="nameMatchSource">Type of name that the nameMatchString matched..</param>
        /// <param name="clientExcludeEntityType">Entity types to exclude from the search. If provided, entities with the specified entity types will not be considered. .</param>
        /// <param name="clientExcludeEntitySubType">Entity sub-types to exclude from the search. If provided, entities with the specified entity sub-types will not be considered. .</param>
        /// <param name="clientIncludeEntityType">Entity types to include in the search. If provided, only entities with the specified entity types will be considered. .</param>
        /// <param name="clientIncludeEntitySubType">Entity sub-types to include in the search. If provided, only entities with the specified entity sub-types will be considered. .</param>
        public EntityMatch(int? taskId = default(int?), int? universeId = default(int?), string clientId = default(string), string clientBbgFigi = default(string), string clientBbgTicker = default(string), string clientBic = default(string), string clientCik = default(string), string clientCountry = default(string), string clientCrd = default(string), string clientCusip = default(string), string clientEin = default(string), string clientFactsetId = default(string), string clientFitch = default(string), string clientGvkey = default(string), string clientGvkeyIid = default(string), string clientIsin = default(string), string clientJcn = default(string), string clientLei = default(string), string clientLxid = default(string), string clientMd = default(string), string clientName = default(string), string clientPriority = default(string), string clientRedCode = default(string), string clientRssd = default(string), string clientSedol = default(string), string clientSpr = default(string), string clientState = default(string), string clientTicker = default(string), string clientTickerExchange = default(string), string clientTickerRegion = default(string), string clientUkch = default(string), string clientUrl = default(string), string clientValoren = default(string), string clientWkn = default(string), Dictionary<string, string> clientAdditionalContext = default(Dictionary<string, string>), string symbolMatchType = default(string), int? rowIndex = default(int?), bool? matchFlag = default(bool?), string entityId = default(string), string entityName = default(string), string url = default(string), MapStatusEnum? mapStatus = default(MapStatusEnum?), double? similarityScore = default(double?), double? confidenceScore = default(double?), string countryCode = default(string), string countryName = default(string), string stateCode = default(string), string stateName = default(string), string sicCode = default(string), string entityTypeCode = default(string), string entityTypeDescription = default(string), string entitySubTypeCode = default(string), string locationCity = default(string), string regionName = default(string), string factsetIndustryCode = default(string), string factsetIndustryName = default(string), string factsetSectorCode = default(string), string factsetSectorName = default(string), string parentName = default(string), bool? parentMatchFlag = default(bool?), string nameMatchString = default(string), string nameMatchSource = default(string), List<string> clientExcludeEntityType = default(List<string>), List<string> clientExcludeEntitySubType = default(List<string>), List<string> clientIncludeEntityType = default(List<string>), List<string> clientIncludeEntitySubType = default(List<string>))
        {
            this.TaskId = taskId;
            this.UniverseId = universeId;
            this.ClientId = clientId;
            this.ClientBbgFigi = clientBbgFigi;
            this.ClientBbgTicker = clientBbgTicker;
            this.ClientBic = clientBic;
            this.ClientCik = clientCik;
            this.ClientCountry = clientCountry;
            this.ClientCrd = clientCrd;
            this.ClientCusip = clientCusip;
            this.ClientEin = clientEin;
            this.ClientFactsetId = clientFactsetId;
            this.ClientFitch = clientFitch;
            this.ClientGvkey = clientGvkey;
            this.ClientGvkeyIid = clientGvkeyIid;
            this.ClientIsin = clientIsin;
            this.ClientJcn = clientJcn;
            this.ClientLei = clientLei;
            this.ClientLxid = clientLxid;
            this.ClientMd = clientMd;
            this.ClientName = clientName;
            this.ClientPriority = clientPriority;
            this.ClientRedCode = clientRedCode;
            this.ClientRssd = clientRssd;
            this.ClientSedol = clientSedol;
            this.ClientSpr = clientSpr;
            this.ClientState = clientState;
            this.ClientTicker = clientTicker;
            this.ClientTickerExchange = clientTickerExchange;
            this.ClientTickerRegion = clientTickerRegion;
            this.ClientUkch = clientUkch;
            this.ClientUrl = clientUrl;
            this.ClientValoren = clientValoren;
            this.ClientWkn = clientWkn;
            this.ClientAdditionalContext = clientAdditionalContext;
            this.SymbolMatchType = symbolMatchType;
            this.RowIndex = rowIndex;
            this.MatchFlag = matchFlag;
            this.EntityId = entityId;
            this.EntityName = entityName;
            this.Url = url;
            this.MapStatus = mapStatus;
            this.SimilarityScore = similarityScore;
            this.ConfidenceScore = confidenceScore;
            this.CountryCode = countryCode;
            this.CountryName = countryName;
            this.StateCode = stateCode;
            this.StateName = stateName;
            this.SicCode = sicCode;
            this.EntityTypeCode = entityTypeCode;
            this.EntityTypeDescription = entityTypeDescription;
            this.EntitySubTypeCode = entitySubTypeCode;
            this.LocationCity = locationCity;
            this.RegionName = regionName;
            this.FactsetIndustryCode = factsetIndustryCode;
            this.FactsetIndustryName = factsetIndustryName;
            this.FactsetSectorCode = factsetSectorCode;
            this.FactsetSectorName = factsetSectorName;
            this.ParentName = parentName;
            this.ParentMatchFlag = parentMatchFlag;
            this.NameMatchString = nameMatchString;
            this.NameMatchSource = nameMatchSource;
            this.ClientExcludeEntityType = clientExcludeEntityType;
            this.ClientExcludeEntitySubType = clientExcludeEntitySubType;
            this.ClientIncludeEntityType = clientIncludeEntityType;
            this.ClientIncludeEntitySubType = clientIncludeEntitySubType;
        }

        /// <summary>
        /// Identifier denoting a specific Concordance task submitted by the user. This value will be null for /entity-match endpoint responses and is only available when using the \&quot;Bulk\&quot; workflow. 
        /// </summary>
        /// <value>Identifier denoting a specific Concordance task submitted by the user. This value will be null for /entity-match endpoint responses and is only available when using the \&quot;Bulk\&quot; workflow. </value>
        [DataMember(Name = "taskId", EmitDefaultValue = true)]
        public int? TaskId { get; set; }

        /// <summary>
        /// The id of the universe that entities should be mapped to
        /// </summary>
        /// <value>The id of the universe that entities should be mapped to</value>
        [DataMember(Name = "universeId", EmitDefaultValue = true)]
        public int? UniverseId { get; set; }

        /// <summary>
        /// Unique Identifer provided by the user in the request to represent the entity Name being requested.
        /// </summary>
        /// <value>Unique Identifer provided by the user in the request to represent the entity Name being requested.</value>
        [DataMember(Name = "clientId", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  Bloomberg Listing/Regional/Security ID.
        /// </summary>
        /// <value>Name of the column as provided by the user -  Bloomberg Listing/Regional/Security ID.</value>
        [DataMember(Name = "clientBbgFigi", EmitDefaultValue = true)]
        public string ClientBbgFigi { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  Bloomberg Listing and Regional Ticker.
        /// </summary>
        /// <value>Name of the column as provided by the user -  Bloomberg Listing and Regional Ticker.</value>
        [DataMember(Name = "clientBbgTicker", EmitDefaultValue = true)]
        public string ClientBbgTicker { get; set; }

        /// <summary>
        /// Name of the column as provided by the user - BICCode, bank indentification code
        /// </summary>
        /// <value>Name of the column as provided by the user - BICCode, bank indentification code</value>
        [DataMember(Name = "clientBic", EmitDefaultValue = true)]
        public string ClientBic { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  CIK, Edgar Central Index Keys
        /// </summary>
        /// <value>Name of the column as provided by the user -  CIK, Edgar Central Index Keys</value>
        [DataMember(Name = "clientCik", EmitDefaultValue = true)]
        public string ClientCik { get; set; }

        /// <summary>
        /// ISO2 country code specified in the request.
        /// </summary>
        /// <value>ISO2 country code specified in the request.</value>
        [DataMember(Name = "clientCountry", EmitDefaultValue = true)]
        public string ClientCountry { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  CRD, Central Registration Depository
        /// </summary>
        /// <value>Name of the column as provided by the user -  CRD, Central Registration Depository</value>
        [DataMember(Name = "clientCrd", EmitDefaultValue = true)]
        public string ClientCrd { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  CUSIP.
        /// </summary>
        /// <value>Name of the column as provided by the user -  CUSIP.</value>
        [DataMember(Name = "clientCusip", EmitDefaultValue = true)]
        public string ClientCusip { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  EmployerIdentificationNumber, EIN.
        /// </summary>
        /// <value>Name of the column as provided by the user -  EmployerIdentificationNumber, EIN.</value>
        [DataMember(Name = "clientEin", EmitDefaultValue = true)]
        public string ClientEin { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  FactSet Identifier, FactSet -E,-S,-R, -L Permanent Identifier.
        /// </summary>
        /// <value>Name of the column as provided by the user -  FactSet Identifier, FactSet -E,-S,-R, -L Permanent Identifier.</value>
        [DataMember(Name = "clientFactsetId", EmitDefaultValue = true)]
        public string ClientFactsetId { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  FitchCreditRating, Fitch Ratings Identifier.
        /// </summary>
        /// <value>Name of the column as provided by the user -  FitchCreditRating, Fitch Ratings Identifier.</value>
        [DataMember(Name = "clientFitch", EmitDefaultValue = true)]
        public string ClientFitch { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  GVKEY, Compustat Global Company Key.
        /// </summary>
        /// <value>Name of the column as provided by the user -  GVKEY, Compustat Global Company Key.</value>
        [DataMember(Name = "clientGvkey", EmitDefaultValue = true)]
        public string ClientGvkey { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  GVKEY+IID, Compustat Global Company Key and Issue Identifier.
        /// </summary>
        /// <value>Name of the column as provided by the user -  GVKEY+IID, Compustat Global Company Key and Issue Identifier.</value>
        [DataMember(Name = "clientGvkeyIid", EmitDefaultValue = true)]
        public string ClientGvkeyIid { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  ISIN.
        /// </summary>
        /// <value>Name of the column as provided by the user -  ISIN.</value>
        [DataMember(Name = "clientIsin", EmitDefaultValue = true)]
        public string ClientIsin { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  JCN , Japanese Corporate Number.
        /// </summary>
        /// <value>Name of the column as provided by the user -  JCN , Japanese Corporate Number.</value>
        [DataMember(Name = "clientJcn", EmitDefaultValue = true)]
        public string ClientJcn { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  LegalEntityIdentifier, LEI.
        /// </summary>
        /// <value>Name of the column as provided by the user -  LegalEntityIdentifier, LEI.</value>
        [DataMember(Name = "clientLei", EmitDefaultValue = true)]
        public string ClientLei { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  LXID, Markit Syndicated Loan Identifier.
        /// </summary>
        /// <value>Name of the column as provided by the user -  LXID, Markit Syndicated Loan Identifier.</value>
        [DataMember(Name = "clientLxid", EmitDefaultValue = true)]
        public string ClientLxid { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  MoodysIssuer, Moody&#39;s Ratings Identifier.
        /// </summary>
        /// <value>Name of the column as provided by the user -  MoodysIssuer, Moody&#39;s Ratings Identifier.</value>
        [DataMember(Name = "clientMd", EmitDefaultValue = true)]
        public string ClientMd { get; set; }

        /// <summary>
        /// Name of the entity to match as specified in the request
        /// </summary>
        /// <value>Name of the entity to match as specified in the request</value>
        [DataMember(Name = "clientName", EmitDefaultValue = true)]
        public string ClientName { get; set; }

        /// <summary>
        /// Name of the priority column as provided by the user.
        /// </summary>
        /// <value>Name of the priority column as provided by the user.</value>
        [DataMember(Name = "clientPriority", EmitDefaultValue = true)]
        public string ClientPriority { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  RedCode, Markit Reference Entity Identifier.
        /// </summary>
        /// <value>Name of the column as provided by the user -  RedCode, Markit Reference Entity Identifier.</value>
        [DataMember(Name = "clientRedCode", EmitDefaultValue = true)]
        public string ClientRedCode { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  FederalReserveRSSDIdentifier, RSSD.
        /// </summary>
        /// <value>Name of the column as provided by the user -  FederalReserveRSSDIdentifier, RSSD.</value>
        [DataMember(Name = "clientRssd", EmitDefaultValue = true)]
        public string ClientRssd { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  SEDOL.
        /// </summary>
        /// <value>Name of the column as provided by the user -  SEDOL.</value>
        [DataMember(Name = "clientSedol", EmitDefaultValue = true)]
        public string ClientSedol { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  S&amp;PRating, S&amp;P Ratings Identifier.
        /// </summary>
        /// <value>Name of the column as provided by the user -  S&amp;PRating, S&amp;P Ratings Identifier.</value>
        [DataMember(Name = "clientSpr", EmitDefaultValue = true)]
        public string ClientSpr { get; set; }

        /// <summary>
        /// State code specified in the request.
        /// </summary>
        /// <value>State code specified in the request.</value>
        [DataMember(Name = "clientState", EmitDefaultValue = true)]
        public string ClientState { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  PriceTicker.
        /// </summary>
        /// <value>Name of the column as provided by the user -  PriceTicker.</value>
        [DataMember(Name = "clientTicker", EmitDefaultValue = true)]
        public string ClientTicker { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  TickerExch.
        /// </summary>
        /// <value>Name of the column as provided by the user -  TickerExch.</value>
        [DataMember(Name = "clientTickerExchange", EmitDefaultValue = true)]
        public string ClientTickerExchange { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  TickerRegion
        /// </summary>
        /// <value>Name of the column as provided by the user -  TickerRegion</value>
        [DataMember(Name = "clientTickerRegion", EmitDefaultValue = true)]
        public string ClientTickerRegion { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  UKCompanyHouse
        /// </summary>
        /// <value>Name of the column as provided by the user -  UKCompanyHouse</value>
        [DataMember(Name = "clientUkch", EmitDefaultValue = true)]
        public string ClientUkch { get; set; }

        /// <summary>
        /// URL specified in the request.
        /// </summary>
        /// <value>URL specified in the request.</value>
        [DataMember(Name = "clientUrl", EmitDefaultValue = true)]
        public string ClientUrl { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  VALOR, Valoren (\&quot;Valor\&quot;) Identification.
        /// </summary>
        /// <value>Name of the column as provided by the user -  VALOR, Valoren (\&quot;Valor\&quot;) Identification.</value>
        [DataMember(Name = "clientValoren", EmitDefaultValue = true)]
        public string ClientValoren { get; set; }

        /// <summary>
        /// Name of the column as provided by the user -  WKN, German Securities Identification.
        /// </summary>
        /// <value>Name of the column as provided by the user -  WKN, German Securities Identification.</value>
        [DataMember(Name = "clientWkn", EmitDefaultValue = true)]
        public string ClientWkn { get; set; }

        /// <summary>
        /// Any additional context column along with their values in the input file or single search.  To be used by Managed Service for any unmapped records. 
        /// </summary>
        /// <value>Any additional context column along with their values in the input file or single search.  To be used by Managed Service for any unmapped records. </value>
        [DataMember(Name = "clientAdditionalContext", EmitDefaultValue = false)]
        public Dictionary<string, string> ClientAdditionalContext { get; set; }

        /// <summary>
        /// Source type of the Symbol that matched
        /// </summary>
        /// <value>Source type of the Symbol that matched</value>
        [DataMember(Name = "symbolMatchType", EmitDefaultValue = true)]
        public string SymbolMatchType { get; set; }

        /// <summary>
        /// Row number for match in the request or input file.
        /// </summary>
        /// <value>Row number for match in the request or input file.</value>
        [DataMember(Name = "rowIndex", EmitDefaultValue = true)]
        public int? RowIndex { get; set; }

        /// <summary>
        /// Flag denoting if the row is a match.
        /// </summary>
        /// <value>Flag denoting if the row is a match.</value>
        [DataMember(Name = "matchFlag", EmitDefaultValue = true)]
        public bool? MatchFlag { get; set; }

        /// <summary>
        /// FactSet Entity Identifier of the entity matched respective to the requested Name submitted. For more detail, visit [FactSet Permanent Security Identifier](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881) 
        /// </summary>
        /// <value>FactSet Entity Identifier of the entity matched respective to the requested Name submitted. For more detail, visit [FactSet Permanent Security Identifier](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881) </value>
        [DataMember(Name = "entityId", EmitDefaultValue = true)]
        public string EntityId { get; set; }

        /// <summary>
        /// Full name corresponding to the matched entity.
        /// </summary>
        /// <value>Full name corresponding to the matched entity.</value>
        [DataMember(Name = "entityName", EmitDefaultValue = true)]
        public string EntityName { get; set; }

        /// <summary>
        /// URL of the matched entity.
        /// </summary>
        /// <value>URL of the matched entity.</value>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Probability of the match being similar to the entity requested as determined by the Concordance algorithm. A similarityScore of 1 is the highest level of similarity. 
        /// </summary>
        /// <value>Probability of the match being similar to the entity requested as determined by the Concordance algorithm. A similarityScore of 1 is the highest level of similarity. </value>
        [DataMember(Name = "similarityScore", EmitDefaultValue = true)]
        public double? SimilarityScore { get; set; }

        /// <summary>
        /// Additional statistic calculated by the algorithm that is used to ensure the validity of the match result. A confidenceScore of 1 is the highest level of confidence. 
        /// </summary>
        /// <value>Additional statistic calculated by the algorithm that is used to ensure the validity of the match result. A confidenceScore of 1 is the highest level of confidence. </value>
        [DataMember(Name = "confidenceScore", EmitDefaultValue = true)]
        public double? ConfidenceScore { get; set; }

        /// <summary>
        /// ISO2 country code corresponding to the location of the matched entity.
        /// </summary>
        /// <value>ISO2 country code corresponding to the location of the matched entity.</value>
        [DataMember(Name = "countryCode", EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Country name corresponding to the location of the matched entity
        /// </summary>
        /// <value>Country name corresponding to the location of the matched entity</value>
        [DataMember(Name = "countryName", EmitDefaultValue = true)]
        public string CountryName { get; set; }

        /// <summary>
        /// Two character state code corresponding to the location of the matched entity.
        /// </summary>
        /// <value>Two character state code corresponding to the location of the matched entity.</value>
        [DataMember(Name = "stateCode", EmitDefaultValue = true)]
        public string StateCode { get; set; }

        /// <summary>
        /// State name corresponding to the location of the matched entity.
        /// </summary>
        /// <value>State name corresponding to the location of the matched entity.</value>
        [DataMember(Name = "stateName", EmitDefaultValue = true)]
        public string StateName { get; set; }

        /// <summary>
        /// Standard Industrial Classification (SIC) Code of the matched entity.
        /// </summary>
        /// <value>Standard Industrial Classification (SIC) Code of the matched entity.</value>
        [DataMember(Name = "sicCode", EmitDefaultValue = true)]
        public string SicCode { get; set; }

        /// <summary>
        /// Code representing the entity type of the matched entity. See the related request parameter for a table of all Codes and their respective descriptions.
        /// </summary>
        /// <value>Code representing the entity type of the matched entity. See the related request parameter for a table of all Codes and their respective descriptions.</value>
        [DataMember(Name = "entityTypeCode", EmitDefaultValue = true)]
        public string EntityTypeCode { get; set; }

        /// <summary>
        /// Description of of the matched entity&#39;s type.
        /// </summary>
        /// <value>Description of of the matched entity&#39;s type.</value>
        [DataMember(Name = "entityTypeDescription", EmitDefaultValue = true)]
        public string EntityTypeDescription { get; set; }

        /// <summary>
        /// Code representing the entity subtype of the matched entity. See the related request parameter for a table of all Codes and their respective descriptions.
        /// </summary>
        /// <value>Code representing the entity subtype of the matched entity. See the related request parameter for a table of all Codes and their respective descriptions.</value>
        [DataMember(Name = "entitySubTypeCode", EmitDefaultValue = true)]
        public string EntitySubTypeCode { get; set; }

        /// <summary>
        /// City where the matched entity is located.
        /// </summary>
        /// <value>City where the matched entity is located.</value>
        [DataMember(Name = "locationCity", EmitDefaultValue = true)]
        public string LocationCity { get; set; }

        /// <summary>
        /// Region where the matched entity is located.
        /// </summary>
        /// <value>Region where the matched entity is located.</value>
        [DataMember(Name = "regionName", EmitDefaultValue = true)]
        public string RegionName { get; set; }

        /// <summary>
        /// FactSet Industry Classification Code of the matched entity.
        /// </summary>
        /// <value>FactSet Industry Classification Code of the matched entity.</value>
        [DataMember(Name = "factsetIndustryCode", EmitDefaultValue = true)]
        public string FactsetIndustryCode { get; set; }

        /// <summary>
        /// Name of the matched entity&#39;s FactSet Industry Classification.
        /// </summary>
        /// <value>Name of the matched entity&#39;s FactSet Industry Classification.</value>
        [DataMember(Name = "factsetIndustryName", EmitDefaultValue = true)]
        public string FactsetIndustryName { get; set; }

        /// <summary>
        /// Name of the matched entity&#39;s FactSet Sector Classification Code.
        /// </summary>
        /// <value>Name of the matched entity&#39;s FactSet Sector Classification Code.</value>
        [DataMember(Name = "factsetSectorCode", EmitDefaultValue = true)]
        public string FactsetSectorCode { get; set; }

        /// <summary>
        /// Name of the matched entity&#39;s FactSet Sector Classification.
        /// </summary>
        /// <value>Name of the matched entity&#39;s FactSet Sector Classification.</value>
        [DataMember(Name = "factsetSectorName", EmitDefaultValue = true)]
        public string FactsetSectorName { get; set; }

        /// <summary>
        /// Name of the matched entity&#39;s parent entity.
        /// </summary>
        /// <value>Name of the matched entity&#39;s parent entity.</value>
        [DataMember(Name = "parentName", EmitDefaultValue = true)]
        public string ParentName { get; set; }

        /// <summary>
        /// Flag denoting that the matched entity is the parent of another match.
        /// </summary>
        /// <value>Flag denoting that the matched entity is the parent of another match.</value>
        [DataMember(Name = "parentMatchFlag", EmitDefaultValue = true)]
        public bool? ParentMatchFlag { get; set; }

        /// <summary>
        /// String on which the Concordance algorithm mapped the submitted entity.
        /// </summary>
        /// <value>String on which the Concordance algorithm mapped the submitted entity.</value>
        [DataMember(Name = "nameMatchString", EmitDefaultValue = true)]
        public string NameMatchString { get; set; }

        /// <summary>
        /// Type of name that the nameMatchString matched.
        /// </summary>
        /// <value>Type of name that the nameMatchString matched.</value>
        [DataMember(Name = "nameMatchSource", EmitDefaultValue = true)]
        public string NameMatchSource { get; set; }

        /// <summary>
        /// Entity types to exclude from the search. If provided, entities with the specified entity types will not be considered. 
        /// </summary>
        /// <value>Entity types to exclude from the search. If provided, entities with the specified entity types will not be considered. </value>
        [DataMember(Name = "clientExcludeEntityType", EmitDefaultValue = true)]
        public List<string> ClientExcludeEntityType { get; set; }

        /// <summary>
        /// Entity sub-types to exclude from the search. If provided, entities with the specified entity sub-types will not be considered. 
        /// </summary>
        /// <value>Entity sub-types to exclude from the search. If provided, entities with the specified entity sub-types will not be considered. </value>
        [DataMember(Name = "clientExcludeEntitySubType", EmitDefaultValue = true)]
        public List<string> ClientExcludeEntitySubType { get; set; }

        /// <summary>
        /// Entity types to include in the search. If provided, only entities with the specified entity types will be considered. 
        /// </summary>
        /// <value>Entity types to include in the search. If provided, only entities with the specified entity types will be considered. </value>
        [DataMember(Name = "clientIncludeEntityType", EmitDefaultValue = true)]
        public List<string> ClientIncludeEntityType { get; set; }

        /// <summary>
        /// Entity sub-types to include in the search. If provided, only entities with the specified entity sub-types will be considered. 
        /// </summary>
        /// <value>Entity sub-types to include in the search. If provided, only entities with the specified entity sub-types will be considered. </value>
        [DataMember(Name = "clientIncludeEntitySubType", EmitDefaultValue = true)]
        public List<string> ClientIncludeEntitySubType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityMatch {\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  UniverseId: ").Append(UniverseId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientBbgFigi: ").Append(ClientBbgFigi).Append("\n");
            sb.Append("  ClientBbgTicker: ").Append(ClientBbgTicker).Append("\n");
            sb.Append("  ClientBic: ").Append(ClientBic).Append("\n");
            sb.Append("  ClientCik: ").Append(ClientCik).Append("\n");
            sb.Append("  ClientCountry: ").Append(ClientCountry).Append("\n");
            sb.Append("  ClientCrd: ").Append(ClientCrd).Append("\n");
            sb.Append("  ClientCusip: ").Append(ClientCusip).Append("\n");
            sb.Append("  ClientEin: ").Append(ClientEin).Append("\n");
            sb.Append("  ClientFactsetId: ").Append(ClientFactsetId).Append("\n");
            sb.Append("  ClientFitch: ").Append(ClientFitch).Append("\n");
            sb.Append("  ClientGvkey: ").Append(ClientGvkey).Append("\n");
            sb.Append("  ClientGvkeyIid: ").Append(ClientGvkeyIid).Append("\n");
            sb.Append("  ClientIsin: ").Append(ClientIsin).Append("\n");
            sb.Append("  ClientJcn: ").Append(ClientJcn).Append("\n");
            sb.Append("  ClientLei: ").Append(ClientLei).Append("\n");
            sb.Append("  ClientLxid: ").Append(ClientLxid).Append("\n");
            sb.Append("  ClientMd: ").Append(ClientMd).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  ClientPriority: ").Append(ClientPriority).Append("\n");
            sb.Append("  ClientRedCode: ").Append(ClientRedCode).Append("\n");
            sb.Append("  ClientRssd: ").Append(ClientRssd).Append("\n");
            sb.Append("  ClientSedol: ").Append(ClientSedol).Append("\n");
            sb.Append("  ClientSpr: ").Append(ClientSpr).Append("\n");
            sb.Append("  ClientState: ").Append(ClientState).Append("\n");
            sb.Append("  ClientTicker: ").Append(ClientTicker).Append("\n");
            sb.Append("  ClientTickerExchange: ").Append(ClientTickerExchange).Append("\n");
            sb.Append("  ClientTickerRegion: ").Append(ClientTickerRegion).Append("\n");
            sb.Append("  ClientUkch: ").Append(ClientUkch).Append("\n");
            sb.Append("  ClientUrl: ").Append(ClientUrl).Append("\n");
            sb.Append("  ClientValoren: ").Append(ClientValoren).Append("\n");
            sb.Append("  ClientWkn: ").Append(ClientWkn).Append("\n");
            sb.Append("  ClientAdditionalContext: ").Append(ClientAdditionalContext).Append("\n");
            sb.Append("  SymbolMatchType: ").Append(SymbolMatchType).Append("\n");
            sb.Append("  RowIndex: ").Append(RowIndex).Append("\n");
            sb.Append("  MatchFlag: ").Append(MatchFlag).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  MapStatus: ").Append(MapStatus).Append("\n");
            sb.Append("  SimilarityScore: ").Append(SimilarityScore).Append("\n");
            sb.Append("  ConfidenceScore: ").Append(ConfidenceScore).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  StateCode: ").Append(StateCode).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  SicCode: ").Append(SicCode).Append("\n");
            sb.Append("  EntityTypeCode: ").Append(EntityTypeCode).Append("\n");
            sb.Append("  EntityTypeDescription: ").Append(EntityTypeDescription).Append("\n");
            sb.Append("  EntitySubTypeCode: ").Append(EntitySubTypeCode).Append("\n");
            sb.Append("  LocationCity: ").Append(LocationCity).Append("\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  FactsetIndustryCode: ").Append(FactsetIndustryCode).Append("\n");
            sb.Append("  FactsetIndustryName: ").Append(FactsetIndustryName).Append("\n");
            sb.Append("  FactsetSectorCode: ").Append(FactsetSectorCode).Append("\n");
            sb.Append("  FactsetSectorName: ").Append(FactsetSectorName).Append("\n");
            sb.Append("  ParentName: ").Append(ParentName).Append("\n");
            sb.Append("  ParentMatchFlag: ").Append(ParentMatchFlag).Append("\n");
            sb.Append("  NameMatchString: ").Append(NameMatchString).Append("\n");
            sb.Append("  NameMatchSource: ").Append(NameMatchSource).Append("\n");
            sb.Append("  ClientExcludeEntityType: ").Append(ClientExcludeEntityType).Append("\n");
            sb.Append("  ClientExcludeEntitySubType: ").Append(ClientExcludeEntitySubType).Append("\n");
            sb.Append("  ClientIncludeEntityType: ").Append(ClientIncludeEntityType).Append("\n");
            sb.Append("  ClientIncludeEntitySubType: ").Append(ClientIncludeEntitySubType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityMatch);
        }

        /// <summary>
        /// Returns true if EntityMatch instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityMatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityMatch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.UniverseId == input.UniverseId ||
                    (this.UniverseId != null &&
                    this.UniverseId.Equals(input.UniverseId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientBbgFigi == input.ClientBbgFigi ||
                    (this.ClientBbgFigi != null &&
                    this.ClientBbgFigi.Equals(input.ClientBbgFigi))
                ) && 
                (
                    this.ClientBbgTicker == input.ClientBbgTicker ||
                    (this.ClientBbgTicker != null &&
                    this.ClientBbgTicker.Equals(input.ClientBbgTicker))
                ) && 
                (
                    this.ClientBic == input.ClientBic ||
                    (this.ClientBic != null &&
                    this.ClientBic.Equals(input.ClientBic))
                ) && 
                (
                    this.ClientCik == input.ClientCik ||
                    (this.ClientCik != null &&
                    this.ClientCik.Equals(input.ClientCik))
                ) && 
                (
                    this.ClientCountry == input.ClientCountry ||
                    (this.ClientCountry != null &&
                    this.ClientCountry.Equals(input.ClientCountry))
                ) && 
                (
                    this.ClientCrd == input.ClientCrd ||
                    (this.ClientCrd != null &&
                    this.ClientCrd.Equals(input.ClientCrd))
                ) && 
                (
                    this.ClientCusip == input.ClientCusip ||
                    (this.ClientCusip != null &&
                    this.ClientCusip.Equals(input.ClientCusip))
                ) && 
                (
                    this.ClientEin == input.ClientEin ||
                    (this.ClientEin != null &&
                    this.ClientEin.Equals(input.ClientEin))
                ) && 
                (
                    this.ClientFactsetId == input.ClientFactsetId ||
                    (this.ClientFactsetId != null &&
                    this.ClientFactsetId.Equals(input.ClientFactsetId))
                ) && 
                (
                    this.ClientFitch == input.ClientFitch ||
                    (this.ClientFitch != null &&
                    this.ClientFitch.Equals(input.ClientFitch))
                ) && 
                (
                    this.ClientGvkey == input.ClientGvkey ||
                    (this.ClientGvkey != null &&
                    this.ClientGvkey.Equals(input.ClientGvkey))
                ) && 
                (
                    this.ClientGvkeyIid == input.ClientGvkeyIid ||
                    (this.ClientGvkeyIid != null &&
                    this.ClientGvkeyIid.Equals(input.ClientGvkeyIid))
                ) && 
                (
                    this.ClientIsin == input.ClientIsin ||
                    (this.ClientIsin != null &&
                    this.ClientIsin.Equals(input.ClientIsin))
                ) && 
                (
                    this.ClientJcn == input.ClientJcn ||
                    (this.ClientJcn != null &&
                    this.ClientJcn.Equals(input.ClientJcn))
                ) && 
                (
                    this.ClientLei == input.ClientLei ||
                    (this.ClientLei != null &&
                    this.ClientLei.Equals(input.ClientLei))
                ) && 
                (
                    this.ClientLxid == input.ClientLxid ||
                    (this.ClientLxid != null &&
                    this.ClientLxid.Equals(input.ClientLxid))
                ) && 
                (
                    this.ClientMd == input.ClientMd ||
                    (this.ClientMd != null &&
                    this.ClientMd.Equals(input.ClientMd))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.ClientPriority == input.ClientPriority ||
                    (this.ClientPriority != null &&
                    this.ClientPriority.Equals(input.ClientPriority))
                ) && 
                (
                    this.ClientRedCode == input.ClientRedCode ||
                    (this.ClientRedCode != null &&
                    this.ClientRedCode.Equals(input.ClientRedCode))
                ) && 
                (
                    this.ClientRssd == input.ClientRssd ||
                    (this.ClientRssd != null &&
                    this.ClientRssd.Equals(input.ClientRssd))
                ) && 
                (
                    this.ClientSedol == input.ClientSedol ||
                    (this.ClientSedol != null &&
                    this.ClientSedol.Equals(input.ClientSedol))
                ) && 
                (
                    this.ClientSpr == input.ClientSpr ||
                    (this.ClientSpr != null &&
                    this.ClientSpr.Equals(input.ClientSpr))
                ) && 
                (
                    this.ClientState == input.ClientState ||
                    (this.ClientState != null &&
                    this.ClientState.Equals(input.ClientState))
                ) && 
                (
                    this.ClientTicker == input.ClientTicker ||
                    (this.ClientTicker != null &&
                    this.ClientTicker.Equals(input.ClientTicker))
                ) && 
                (
                    this.ClientTickerExchange == input.ClientTickerExchange ||
                    (this.ClientTickerExchange != null &&
                    this.ClientTickerExchange.Equals(input.ClientTickerExchange))
                ) && 
                (
                    this.ClientTickerRegion == input.ClientTickerRegion ||
                    (this.ClientTickerRegion != null &&
                    this.ClientTickerRegion.Equals(input.ClientTickerRegion))
                ) && 
                (
                    this.ClientUkch == input.ClientUkch ||
                    (this.ClientUkch != null &&
                    this.ClientUkch.Equals(input.ClientUkch))
                ) && 
                (
                    this.ClientUrl == input.ClientUrl ||
                    (this.ClientUrl != null &&
                    this.ClientUrl.Equals(input.ClientUrl))
                ) && 
                (
                    this.ClientValoren == input.ClientValoren ||
                    (this.ClientValoren != null &&
                    this.ClientValoren.Equals(input.ClientValoren))
                ) && 
                (
                    this.ClientWkn == input.ClientWkn ||
                    (this.ClientWkn != null &&
                    this.ClientWkn.Equals(input.ClientWkn))
                ) && 
                (
                    this.ClientAdditionalContext == input.ClientAdditionalContext ||
                    this.ClientAdditionalContext != null &&
                    input.ClientAdditionalContext != null &&
                    this.ClientAdditionalContext.SequenceEqual(input.ClientAdditionalContext)
                ) && 
                (
                    this.SymbolMatchType == input.SymbolMatchType ||
                    (this.SymbolMatchType != null &&
                    this.SymbolMatchType.Equals(input.SymbolMatchType))
                ) && 
                (
                    this.RowIndex == input.RowIndex ||
                    (this.RowIndex != null &&
                    this.RowIndex.Equals(input.RowIndex))
                ) && 
                (
                    this.MatchFlag == input.MatchFlag ||
                    (this.MatchFlag != null &&
                    this.MatchFlag.Equals(input.MatchFlag))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityName == input.EntityName ||
                    (this.EntityName != null &&
                    this.EntityName.Equals(input.EntityName))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.MapStatus == input.MapStatus ||
                    this.MapStatus.Equals(input.MapStatus)
                ) && 
                (
                    this.SimilarityScore == input.SimilarityScore ||
                    (this.SimilarityScore != null &&
                    this.SimilarityScore.Equals(input.SimilarityScore))
                ) && 
                (
                    this.ConfidenceScore == input.ConfidenceScore ||
                    (this.ConfidenceScore != null &&
                    this.ConfidenceScore.Equals(input.ConfidenceScore))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.StateCode == input.StateCode ||
                    (this.StateCode != null &&
                    this.StateCode.Equals(input.StateCode))
                ) && 
                (
                    this.StateName == input.StateName ||
                    (this.StateName != null &&
                    this.StateName.Equals(input.StateName))
                ) && 
                (
                    this.SicCode == input.SicCode ||
                    (this.SicCode != null &&
                    this.SicCode.Equals(input.SicCode))
                ) && 
                (
                    this.EntityTypeCode == input.EntityTypeCode ||
                    (this.EntityTypeCode != null &&
                    this.EntityTypeCode.Equals(input.EntityTypeCode))
                ) && 
                (
                    this.EntityTypeDescription == input.EntityTypeDescription ||
                    (this.EntityTypeDescription != null &&
                    this.EntityTypeDescription.Equals(input.EntityTypeDescription))
                ) && 
                (
                    this.EntitySubTypeCode == input.EntitySubTypeCode ||
                    (this.EntitySubTypeCode != null &&
                    this.EntitySubTypeCode.Equals(input.EntitySubTypeCode))
                ) && 
                (
                    this.LocationCity == input.LocationCity ||
                    (this.LocationCity != null &&
                    this.LocationCity.Equals(input.LocationCity))
                ) && 
                (
                    this.RegionName == input.RegionName ||
                    (this.RegionName != null &&
                    this.RegionName.Equals(input.RegionName))
                ) && 
                (
                    this.FactsetIndustryCode == input.FactsetIndustryCode ||
                    (this.FactsetIndustryCode != null &&
                    this.FactsetIndustryCode.Equals(input.FactsetIndustryCode))
                ) && 
                (
                    this.FactsetIndustryName == input.FactsetIndustryName ||
                    (this.FactsetIndustryName != null &&
                    this.FactsetIndustryName.Equals(input.FactsetIndustryName))
                ) && 
                (
                    this.FactsetSectorCode == input.FactsetSectorCode ||
                    (this.FactsetSectorCode != null &&
                    this.FactsetSectorCode.Equals(input.FactsetSectorCode))
                ) && 
                (
                    this.FactsetSectorName == input.FactsetSectorName ||
                    (this.FactsetSectorName != null &&
                    this.FactsetSectorName.Equals(input.FactsetSectorName))
                ) && 
                (
                    this.ParentName == input.ParentName ||
                    (this.ParentName != null &&
                    this.ParentName.Equals(input.ParentName))
                ) && 
                (
                    this.ParentMatchFlag == input.ParentMatchFlag ||
                    (this.ParentMatchFlag != null &&
                    this.ParentMatchFlag.Equals(input.ParentMatchFlag))
                ) && 
                (
                    this.NameMatchString == input.NameMatchString ||
                    (this.NameMatchString != null &&
                    this.NameMatchString.Equals(input.NameMatchString))
                ) && 
                (
                    this.NameMatchSource == input.NameMatchSource ||
                    (this.NameMatchSource != null &&
                    this.NameMatchSource.Equals(input.NameMatchSource))
                ) && 
                (
                    this.ClientExcludeEntityType == input.ClientExcludeEntityType ||
                    this.ClientExcludeEntityType != null &&
                    input.ClientExcludeEntityType != null &&
                    this.ClientExcludeEntityType.SequenceEqual(input.ClientExcludeEntityType)
                ) && 
                (
                    this.ClientExcludeEntitySubType == input.ClientExcludeEntitySubType ||
                    this.ClientExcludeEntitySubType != null &&
                    input.ClientExcludeEntitySubType != null &&
                    this.ClientExcludeEntitySubType.SequenceEqual(input.ClientExcludeEntitySubType)
                ) && 
                (
                    this.ClientIncludeEntityType == input.ClientIncludeEntityType ||
                    this.ClientIncludeEntityType != null &&
                    input.ClientIncludeEntityType != null &&
                    this.ClientIncludeEntityType.SequenceEqual(input.ClientIncludeEntityType)
                ) && 
                (
                    this.ClientIncludeEntitySubType == input.ClientIncludeEntitySubType ||
                    this.ClientIncludeEntitySubType != null &&
                    input.ClientIncludeEntitySubType != null &&
                    this.ClientIncludeEntitySubType.SequenceEqual(input.ClientIncludeEntitySubType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskId != null)
                {
                    hashCode = (hashCode * 59) + this.TaskId.GetHashCode();
                }
                if (this.UniverseId != null)
                {
                    hashCode = (hashCode * 59) + this.UniverseId.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientBbgFigi != null)
                {
                    hashCode = (hashCode * 59) + this.ClientBbgFigi.GetHashCode();
                }
                if (this.ClientBbgTicker != null)
                {
                    hashCode = (hashCode * 59) + this.ClientBbgTicker.GetHashCode();
                }
                if (this.ClientBic != null)
                {
                    hashCode = (hashCode * 59) + this.ClientBic.GetHashCode();
                }
                if (this.ClientCik != null)
                {
                    hashCode = (hashCode * 59) + this.ClientCik.GetHashCode();
                }
                if (this.ClientCountry != null)
                {
                    hashCode = (hashCode * 59) + this.ClientCountry.GetHashCode();
                }
                if (this.ClientCrd != null)
                {
                    hashCode = (hashCode * 59) + this.ClientCrd.GetHashCode();
                }
                if (this.ClientCusip != null)
                {
                    hashCode = (hashCode * 59) + this.ClientCusip.GetHashCode();
                }
                if (this.ClientEin != null)
                {
                    hashCode = (hashCode * 59) + this.ClientEin.GetHashCode();
                }
                if (this.ClientFactsetId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientFactsetId.GetHashCode();
                }
                if (this.ClientFitch != null)
                {
                    hashCode = (hashCode * 59) + this.ClientFitch.GetHashCode();
                }
                if (this.ClientGvkey != null)
                {
                    hashCode = (hashCode * 59) + this.ClientGvkey.GetHashCode();
                }
                if (this.ClientGvkeyIid != null)
                {
                    hashCode = (hashCode * 59) + this.ClientGvkeyIid.GetHashCode();
                }
                if (this.ClientIsin != null)
                {
                    hashCode = (hashCode * 59) + this.ClientIsin.GetHashCode();
                }
                if (this.ClientJcn != null)
                {
                    hashCode = (hashCode * 59) + this.ClientJcn.GetHashCode();
                }
                if (this.ClientLei != null)
                {
                    hashCode = (hashCode * 59) + this.ClientLei.GetHashCode();
                }
                if (this.ClientLxid != null)
                {
                    hashCode = (hashCode * 59) + this.ClientLxid.GetHashCode();
                }
                if (this.ClientMd != null)
                {
                    hashCode = (hashCode * 59) + this.ClientMd.GetHashCode();
                }
                if (this.ClientName != null)
                {
                    hashCode = (hashCode * 59) + this.ClientName.GetHashCode();
                }
                if (this.ClientPriority != null)
                {
                    hashCode = (hashCode * 59) + this.ClientPriority.GetHashCode();
                }
                if (this.ClientRedCode != null)
                {
                    hashCode = (hashCode * 59) + this.ClientRedCode.GetHashCode();
                }
                if (this.ClientRssd != null)
                {
                    hashCode = (hashCode * 59) + this.ClientRssd.GetHashCode();
                }
                if (this.ClientSedol != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSedol.GetHashCode();
                }
                if (this.ClientSpr != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSpr.GetHashCode();
                }
                if (this.ClientState != null)
                {
                    hashCode = (hashCode * 59) + this.ClientState.GetHashCode();
                }
                if (this.ClientTicker != null)
                {
                    hashCode = (hashCode * 59) + this.ClientTicker.GetHashCode();
                }
                if (this.ClientTickerExchange != null)
                {
                    hashCode = (hashCode * 59) + this.ClientTickerExchange.GetHashCode();
                }
                if (this.ClientTickerRegion != null)
                {
                    hashCode = (hashCode * 59) + this.ClientTickerRegion.GetHashCode();
                }
                if (this.ClientUkch != null)
                {
                    hashCode = (hashCode * 59) + this.ClientUkch.GetHashCode();
                }
                if (this.ClientUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ClientUrl.GetHashCode();
                }
                if (this.ClientValoren != null)
                {
                    hashCode = (hashCode * 59) + this.ClientValoren.GetHashCode();
                }
                if (this.ClientWkn != null)
                {
                    hashCode = (hashCode * 59) + this.ClientWkn.GetHashCode();
                }
                if (this.ClientAdditionalContext != null)
                {
                    hashCode = (hashCode * 59) + this.ClientAdditionalContext.GetHashCode();
                }
                if (this.SymbolMatchType != null)
                {
                    hashCode = (hashCode * 59) + this.SymbolMatchType.GetHashCode();
                }
                if (this.RowIndex != null)
                {
                    hashCode = (hashCode * 59) + this.RowIndex.GetHashCode();
                }
                if (this.MatchFlag != null)
                {
                    hashCode = (hashCode * 59) + this.MatchFlag.GetHashCode();
                }
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                if (this.EntityName != null)
                {
                    hashCode = (hashCode * 59) + this.EntityName.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MapStatus.GetHashCode();
                if (this.SimilarityScore != null)
                {
                    hashCode = (hashCode * 59) + this.SimilarityScore.GetHashCode();
                }
                if (this.ConfidenceScore != null)
                {
                    hashCode = (hashCode * 59) + this.ConfidenceScore.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.CountryName != null)
                {
                    hashCode = (hashCode * 59) + this.CountryName.GetHashCode();
                }
                if (this.StateCode != null)
                {
                    hashCode = (hashCode * 59) + this.StateCode.GetHashCode();
                }
                if (this.StateName != null)
                {
                    hashCode = (hashCode * 59) + this.StateName.GetHashCode();
                }
                if (this.SicCode != null)
                {
                    hashCode = (hashCode * 59) + this.SicCode.GetHashCode();
                }
                if (this.EntityTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.EntityTypeCode.GetHashCode();
                }
                if (this.EntityTypeDescription != null)
                {
                    hashCode = (hashCode * 59) + this.EntityTypeDescription.GetHashCode();
                }
                if (this.EntitySubTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.EntitySubTypeCode.GetHashCode();
                }
                if (this.LocationCity != null)
                {
                    hashCode = (hashCode * 59) + this.LocationCity.GetHashCode();
                }
                if (this.RegionName != null)
                {
                    hashCode = (hashCode * 59) + this.RegionName.GetHashCode();
                }
                if (this.FactsetIndustryCode != null)
                {
                    hashCode = (hashCode * 59) + this.FactsetIndustryCode.GetHashCode();
                }
                if (this.FactsetIndustryName != null)
                {
                    hashCode = (hashCode * 59) + this.FactsetIndustryName.GetHashCode();
                }
                if (this.FactsetSectorCode != null)
                {
                    hashCode = (hashCode * 59) + this.FactsetSectorCode.GetHashCode();
                }
                if (this.FactsetSectorName != null)
                {
                    hashCode = (hashCode * 59) + this.FactsetSectorName.GetHashCode();
                }
                if (this.ParentName != null)
                {
                    hashCode = (hashCode * 59) + this.ParentName.GetHashCode();
                }
                if (this.ParentMatchFlag != null)
                {
                    hashCode = (hashCode * 59) + this.ParentMatchFlag.GetHashCode();
                }
                if (this.NameMatchString != null)
                {
                    hashCode = (hashCode * 59) + this.NameMatchString.GetHashCode();
                }
                if (this.NameMatchSource != null)
                {
                    hashCode = (hashCode * 59) + this.NameMatchSource.GetHashCode();
                }
                if (this.ClientExcludeEntityType != null)
                {
                    hashCode = (hashCode * 59) + this.ClientExcludeEntityType.GetHashCode();
                }
                if (this.ClientExcludeEntitySubType != null)
                {
                    hashCode = (hashCode * 59) + this.ClientExcludeEntitySubType.GetHashCode();
                }
                if (this.ClientIncludeEntityType != null)
                {
                    hashCode = (hashCode * 59) + this.ClientIncludeEntityType.GetHashCode();
                }
                if (this.ClientIncludeEntitySubType != null)
                {
                    hashCode = (hashCode * 59) + this.ClientIncludeEntitySubType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
