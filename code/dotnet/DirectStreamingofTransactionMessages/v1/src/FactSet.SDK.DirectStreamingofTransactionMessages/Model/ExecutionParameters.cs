/*
 * DSOTM API
 *
 * Allow clients to send transactions data to FactSet.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.DirectStreamingofTransactionMessages.Client.OpenAPIDateConverter;

namespace FactSet.SDK.DirectStreamingofTransactionMessages.Model
{
    /// <summary>
    /// ExecutionParameters
    /// </summary>
    [DataContract(Name = "ExecutionParameters")]
    public partial class ExecutionParameters : IEquatable<ExecutionParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExecutionParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionParameters" /> class.
        /// </summary>
        /// <param name="transactionStatus">Transaction Status of an Execution could be any of the following values: Executed, Booked, Cancelled. (required).</param>
        /// <param name="parentId">Unique Id of the placement which spawned this execution.</param>
        /// <param name="net">Cash value of the transaction, net of brokerage costs. (required).</param>
        /// <param name="settlementDate">Settlement date in YYYY-MM-DD format (required).</param>
        /// <param name="settlementCurrencyISO">Currency code for Settlement Value (required).</param>
        /// <param name="settlementValue">Cash value of the transaction in settlement currency (required).</param>
        /// <param name="foreignExchangeRate">FX rate to convert the net, gross fields to reporting currency..</param>
        /// <param name="broker">Execution broker id..</param>
        /// <param name="custodian">Execution custodian Id..</param>
        /// <param name="accruedInterest">Execution accrued interest..</param>
        /// <param name="commission">Execution commission value..</param>
        /// <param name="clearingCommission">Execution clearing commission value..</param>
        /// <param name="localTax">Execution local tax value..</param>
        /// <param name="localFee">Execution local fee value..</param>
        /// <param name="brokerFee">Execution broker fee value..</param>
        /// <param name="exchangeFee">Execution exchange fee value..</param>
        /// <param name="miscellaneousFee">Execution miscellaneous fee value..</param>
        /// <param name="transactionId">Unique Id for the transaction (required).</param>
        /// <param name="orderId">Unique Id of the order which originated the record.</param>
        /// <param name="portfolio">Path of the portfolio (Ex: Client:/folder1/testing.ofdb) (required).</param>
        /// <param name="symbol">Symbol corresponding to the traded instrument. (required).</param>
        /// <param name="description">Description (required).</param>
        /// <param name="tradeType">Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively. (required).</param>
        /// <param name="unitType">Unit type could be one of Quantity or Value. (required).</param>
        /// <param name="transactionLeaves">Shares that have been ordered and not executed.</param>
        /// <param name="quantity">Quantity of the instrument traded. (required).</param>
        /// <param name="gross">Cash value of the transaction (required).</param>
        /// <param name="price">The transaction price.</param>
        /// <param name="currencyISO">The currency code of cash valued fields, Net Amount and Gross Amount. (required).</param>
        /// <param name="tradeDate">Trade date which is in the format YYYY-MM-DD (required).</param>
        /// <param name="addedDateTime">Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF.</param>
        /// <param name="updatedDateTime">Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF.</param>
        public ExecutionParameters(string transactionStatus, double net, string settlementDate, string settlementCurrencyISO, double settlementValue, string transactionId, string portfolio, string symbol, string description, string tradeType, string unitType, double quantity, double gross, string currencyISO, string tradeDate,string parentId = default(string), float foreignExchangeRate = default(float), string broker = default(string), string custodian = default(string), double accruedInterest = default(double), double commission = default(double), double clearingCommission = default(double), double localTax = default(double), double localFee = default(double), double brokerFee = default(double), double exchangeFee = default(double), double miscellaneousFee = default(double), string orderId = default(string), double transactionLeaves = default(double), double price = default(double), string addedDateTime = default(string), string updatedDateTime = default(string), string entity = default(string), string status = default(string))
        {
            // to ensure "transactionStatus" is required (not null)
            if (transactionStatus == null) {
                throw new ArgumentNullException("transactionStatus is a required property for ExecutionParameters and cannot be null");
            }
            this.TransactionStatus = transactionStatus;
            this.Net = net;
            // to ensure "settlementDate" is required (not null)
            if (settlementDate == null) {
                throw new ArgumentNullException("settlementDate is a required property for ExecutionParameters and cannot be null");
            }
            this.SettlementDate = settlementDate;
            // to ensure "settlementCurrencyISO" is required (not null)
            if (settlementCurrencyISO == null) {
                throw new ArgumentNullException("settlementCurrencyISO is a required property for ExecutionParameters and cannot be null");
            }
            this.SettlementCurrencyISO = settlementCurrencyISO;
            this.SettlementValue = settlementValue;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null) {
                throw new ArgumentNullException("transactionId is a required property for ExecutionParameters and cannot be null");
            }
            this.TransactionId = transactionId;
            // to ensure "portfolio" is required (not null)
            if (portfolio == null) {
                throw new ArgumentNullException("portfolio is a required property for ExecutionParameters and cannot be null");
            }
            this.Portfolio = portfolio;
            // to ensure "symbol" is required (not null)
            if (symbol == null) {
                throw new ArgumentNullException("symbol is a required property for ExecutionParameters and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for ExecutionParameters and cannot be null");
            }
            this.Description = description;
            // to ensure "tradeType" is required (not null)
            if (tradeType == null) {
                throw new ArgumentNullException("tradeType is a required property for ExecutionParameters and cannot be null");
            }
            this.TradeType = tradeType;
            // to ensure "unitType" is required (not null)
            if (unitType == null) {
                throw new ArgumentNullException("unitType is a required property for ExecutionParameters and cannot be null");
            }
            this.UnitType = unitType;
            this.Quantity = quantity;
            this.Gross = gross;
            // to ensure "currencyISO" is required (not null)
            if (currencyISO == null) {
                throw new ArgumentNullException("currencyISO is a required property for ExecutionParameters and cannot be null");
            }
            this.CurrencyISO = currencyISO;
            // to ensure "tradeDate" is required (not null)
            if (tradeDate == null) {
                throw new ArgumentNullException("tradeDate is a required property for ExecutionParameters and cannot be null");
            }
            this.TradeDate = tradeDate;
            this.ParentId = parentId;
            this.ForeignExchangeRate = foreignExchangeRate;
            this.Broker = broker;
            this.Custodian = custodian;
            this.AccruedInterest = accruedInterest;
            this.Commission = commission;
            this.ClearingCommission = clearingCommission;
            this.LocalTax = localTax;
            this.LocalFee = localFee;
            this.BrokerFee = brokerFee;
            this.ExchangeFee = exchangeFee;
            this.MiscellaneousFee = miscellaneousFee;
            this.OrderId = orderId;
            this.TransactionLeaves = transactionLeaves;
            this.Price = price;
            this.AddedDateTime = addedDateTime;
            this.UpdatedDateTime = updatedDateTime;
        }

        /// <summary>
        /// Transaction Status of an Execution could be any of the following values: Executed, Booked, Cancelled.
        /// </summary>
        /// <value>Transaction Status of an Execution could be any of the following values: Executed, Booked, Cancelled.</value>
        [DataMember(Name = "transactionStatus", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionStatus { get; set; }

        /// <summary>
        /// Unique Id of the placement which spawned this execution
        /// </summary>
        /// <value>Unique Id of the placement which spawned this execution</value>
        [DataMember(Name = "parentId", EmitDefaultValue = true)]
        public string ParentId { get; set; }

        /// <summary>
        /// Cash value of the transaction, net of brokerage costs.
        /// </summary>
        /// <value>Cash value of the transaction, net of brokerage costs.</value>
        [DataMember(Name = "net", IsRequired = true, EmitDefaultValue = false)]
        public double Net { get; set; }

        /// <summary>
        /// Settlement date in YYYY-MM-DD format
        /// </summary>
        /// <value>Settlement date in YYYY-MM-DD format</value>
        [DataMember(Name = "settlementDate", IsRequired = true, EmitDefaultValue = false)]
        public string SettlementDate { get; set; }

        /// <summary>
        /// Currency code for Settlement Value
        /// </summary>
        /// <value>Currency code for Settlement Value</value>
        [DataMember(Name = "settlementCurrencyISO", IsRequired = true, EmitDefaultValue = false)]
        public string SettlementCurrencyISO { get; set; }

        /// <summary>
        /// Cash value of the transaction in settlement currency
        /// </summary>
        /// <value>Cash value of the transaction in settlement currency</value>
        [DataMember(Name = "settlementValue", IsRequired = true, EmitDefaultValue = false)]
        public double SettlementValue { get; set; }

        /// <summary>
        /// FX rate to convert the net, gross fields to reporting currency.
        /// </summary>
        /// <value>FX rate to convert the net, gross fields to reporting currency.</value>
        [DataMember(Name = "foreignExchangeRate", EmitDefaultValue = false)]
        public float ForeignExchangeRate { get; set; }

        /// <summary>
        /// Execution broker id.
        /// </summary>
        /// <value>Execution broker id.</value>
        [DataMember(Name = "broker", EmitDefaultValue = false)]
        public string Broker { get; set; }

        /// <summary>
        /// Execution custodian Id.
        /// </summary>
        /// <value>Execution custodian Id.</value>
        [DataMember(Name = "custodian", EmitDefaultValue = false)]
        public string Custodian { get; set; }

        /// <summary>
        /// Execution accrued interest.
        /// </summary>
        /// <value>Execution accrued interest.</value>
        [DataMember(Name = "accruedInterest", EmitDefaultValue = false)]
        public double AccruedInterest { get; set; }

        /// <summary>
        /// Execution commission value.
        /// </summary>
        /// <value>Execution commission value.</value>
        [DataMember(Name = "commission", EmitDefaultValue = false)]
        public double Commission { get; set; }

        /// <summary>
        /// Execution clearing commission value.
        /// </summary>
        /// <value>Execution clearing commission value.</value>
        [DataMember(Name = "clearingCommission", EmitDefaultValue = false)]
        public double ClearingCommission { get; set; }

        /// <summary>
        /// Execution local tax value.
        /// </summary>
        /// <value>Execution local tax value.</value>
        [DataMember(Name = "localTax", EmitDefaultValue = false)]
        public double LocalTax { get; set; }

        /// <summary>
        /// Execution local fee value.
        /// </summary>
        /// <value>Execution local fee value.</value>
        [DataMember(Name = "localFee", EmitDefaultValue = false)]
        public double LocalFee { get; set; }

        /// <summary>
        /// Execution broker fee value.
        /// </summary>
        /// <value>Execution broker fee value.</value>
        [DataMember(Name = "brokerFee", EmitDefaultValue = false)]
        public double BrokerFee { get; set; }

        /// <summary>
        /// Execution exchange fee value.
        /// </summary>
        /// <value>Execution exchange fee value.</value>
        [DataMember(Name = "exchangeFee", EmitDefaultValue = false)]
        public double ExchangeFee { get; set; }

        /// <summary>
        /// Execution miscellaneous fee value.
        /// </summary>
        /// <value>Execution miscellaneous fee value.</value>
        [DataMember(Name = "miscellaneousFee", EmitDefaultValue = false)]
        public double MiscellaneousFee { get; set; }

        /// <summary>
        /// Unique Id for the transaction
        /// </summary>
        /// <value>Unique Id for the transaction</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Unique Id of the order which originated the record
        /// </summary>
        /// <value>Unique Id of the order which originated the record</value>
        [DataMember(Name = "orderId", EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Path of the portfolio (Ex: Client:/folder1/testing.ofdb)
        /// </summary>
        /// <value>Path of the portfolio (Ex: Client:/folder1/testing.ofdb)</value>
        [DataMember(Name = "portfolio", IsRequired = true, EmitDefaultValue = false)]
        public string Portfolio { get; set; }

        /// <summary>
        /// Symbol corresponding to the traded instrument.
        /// </summary>
        /// <value>Symbol corresponding to the traded instrument.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.
        /// </summary>
        /// <value>Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.</value>
        [DataMember(Name = "tradeType", IsRequired = true, EmitDefaultValue = false)]
        public string TradeType { get; set; }

        /// <summary>
        /// Unit type could be one of Quantity or Value.
        /// </summary>
        /// <value>Unit type could be one of Quantity or Value.</value>
        [DataMember(Name = "unitType", IsRequired = true, EmitDefaultValue = false)]
        public string UnitType { get; set; }

        /// <summary>
        /// Shares that have been ordered and not executed
        /// </summary>
        /// <value>Shares that have been ordered and not executed</value>
        [DataMember(Name = "transactionLeaves", EmitDefaultValue = false)]
        public double TransactionLeaves { get; set; }

        /// <summary>
        /// Quantity of the instrument traded.
        /// </summary>
        /// <value>Quantity of the instrument traded.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// Cash value of the transaction
        /// </summary>
        /// <value>Cash value of the transaction</value>
        [DataMember(Name = "gross", IsRequired = true, EmitDefaultValue = false)]
        public double Gross { get; set; }

        /// <summary>
        /// The transaction price
        /// </summary>
        /// <value>The transaction price</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// The currency code of cash valued fields, Net Amount and Gross Amount.
        /// </summary>
        /// <value>The currency code of cash valued fields, Net Amount and Gross Amount.</value>
        [DataMember(Name = "currencyISO", IsRequired = true, EmitDefaultValue = false)]
        public string CurrencyISO { get; set; }

        /// <summary>
        /// Trade date which is in the format YYYY-MM-DD
        /// </summary>
        /// <value>Trade date which is in the format YYYY-MM-DD</value>
        [DataMember(Name = "tradeDate", IsRequired = true, EmitDefaultValue = false)]
        public string TradeDate { get; set; }

        /// <summary>
        /// Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF
        /// </summary>
        /// <value>Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF</value>
        [DataMember(Name = "addedDateTime", EmitDefaultValue = false)]
        public string AddedDateTime { get; set; }

        /// <summary>
        /// Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF
        /// </summary>
        /// <value>Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF</value>
        [DataMember(Name = "updatedDateTime", EmitDefaultValue = false)]
        public string UpdatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string Entity { get; private set; }

        /// <summary>
        /// Returns false as Entity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntity()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; private set; }

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExecutionParameters {\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Net: ").Append(Net).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  SettlementCurrencyISO: ").Append(SettlementCurrencyISO).Append("\n");
            sb.Append("  SettlementValue: ").Append(SettlementValue).Append("\n");
            sb.Append("  ForeignExchangeRate: ").Append(ForeignExchangeRate).Append("\n");
            sb.Append("  Broker: ").Append(Broker).Append("\n");
            sb.Append("  Custodian: ").Append(Custodian).Append("\n");
            sb.Append("  AccruedInterest: ").Append(AccruedInterest).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  ClearingCommission: ").Append(ClearingCommission).Append("\n");
            sb.Append("  LocalTax: ").Append(LocalTax).Append("\n");
            sb.Append("  LocalFee: ").Append(LocalFee).Append("\n");
            sb.Append("  BrokerFee: ").Append(BrokerFee).Append("\n");
            sb.Append("  ExchangeFee: ").Append(ExchangeFee).Append("\n");
            sb.Append("  MiscellaneousFee: ").Append(MiscellaneousFee).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Portfolio: ").Append(Portfolio).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TradeType: ").Append(TradeType).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  TransactionLeaves: ").Append(TransactionLeaves).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CurrencyISO: ").Append(CurrencyISO).Append("\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  AddedDateTime: ").Append(AddedDateTime).Append("\n");
            sb.Append("  UpdatedDateTime: ").Append(UpdatedDateTime).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecutionParameters);
        }

        /// <summary>
        /// Returns true if ExecutionParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecutionParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecutionParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    (this.TransactionStatus != null &&
                    this.TransactionStatus.Equals(input.TransactionStatus))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.Net == input.Net ||
                    this.Net.Equals(input.Net)
                ) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.SettlementCurrencyISO == input.SettlementCurrencyISO ||
                    (this.SettlementCurrencyISO != null &&
                    this.SettlementCurrencyISO.Equals(input.SettlementCurrencyISO))
                ) && 
                (
                    this.SettlementValue == input.SettlementValue ||
                    this.SettlementValue.Equals(input.SettlementValue)
                ) && 
                (
                    this.ForeignExchangeRate == input.ForeignExchangeRate ||
                    this.ForeignExchangeRate.Equals(input.ForeignExchangeRate)
                ) && 
                (
                    this.Broker == input.Broker ||
                    (this.Broker != null &&
                    this.Broker.Equals(input.Broker))
                ) && 
                (
                    this.Custodian == input.Custodian ||
                    (this.Custodian != null &&
                    this.Custodian.Equals(input.Custodian))
                ) && 
                (
                    this.AccruedInterest == input.AccruedInterest ||
                    this.AccruedInterest.Equals(input.AccruedInterest)
                ) && 
                (
                    this.Commission == input.Commission ||
                    this.Commission.Equals(input.Commission)
                ) && 
                (
                    this.ClearingCommission == input.ClearingCommission ||
                    this.ClearingCommission.Equals(input.ClearingCommission)
                ) && 
                (
                    this.LocalTax == input.LocalTax ||
                    this.LocalTax.Equals(input.LocalTax)
                ) && 
                (
                    this.LocalFee == input.LocalFee ||
                    this.LocalFee.Equals(input.LocalFee)
                ) && 
                (
                    this.BrokerFee == input.BrokerFee ||
                    this.BrokerFee.Equals(input.BrokerFee)
                ) && 
                (
                    this.ExchangeFee == input.ExchangeFee ||
                    this.ExchangeFee.Equals(input.ExchangeFee)
                ) && 
                (
                    this.MiscellaneousFee == input.MiscellaneousFee ||
                    this.MiscellaneousFee.Equals(input.MiscellaneousFee)
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Portfolio == input.Portfolio ||
                    (this.Portfolio != null &&
                    this.Portfolio.Equals(input.Portfolio))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TradeType == input.TradeType ||
                    (this.TradeType != null &&
                    this.TradeType.Equals(input.TradeType))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.TransactionLeaves == input.TransactionLeaves ||
                    this.TransactionLeaves.Equals(input.TransactionLeaves)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Gross == input.Gross ||
                    this.Gross.Equals(input.Gross)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.CurrencyISO == input.CurrencyISO ||
                    (this.CurrencyISO != null &&
                    this.CurrencyISO.Equals(input.CurrencyISO))
                ) && 
                (
                    this.TradeDate == input.TradeDate ||
                    (this.TradeDate != null &&
                    this.TradeDate.Equals(input.TradeDate))
                ) && 
                (
                    this.AddedDateTime == input.AddedDateTime ||
                    (this.AddedDateTime != null &&
                    this.AddedDateTime.Equals(input.AddedDateTime))
                ) && 
                (
                    this.UpdatedDateTime == input.UpdatedDateTime ||
                    (this.UpdatedDateTime != null &&
                    this.UpdatedDateTime.Equals(input.UpdatedDateTime))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionStatus != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionStatus.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Net.GetHashCode();
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                if (this.SettlementCurrencyISO != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCurrencyISO.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SettlementValue.GetHashCode();
                hashCode = (hashCode * 59) + this.ForeignExchangeRate.GetHashCode();
                if (this.Broker != null)
                {
                    hashCode = (hashCode * 59) + this.Broker.GetHashCode();
                }
                if (this.Custodian != null)
                {
                    hashCode = (hashCode * 59) + this.Custodian.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccruedInterest.GetHashCode();
                hashCode = (hashCode * 59) + this.Commission.GetHashCode();
                hashCode = (hashCode * 59) + this.ClearingCommission.GetHashCode();
                hashCode = (hashCode * 59) + this.LocalTax.GetHashCode();
                hashCode = (hashCode * 59) + this.LocalFee.GetHashCode();
                hashCode = (hashCode * 59) + this.BrokerFee.GetHashCode();
                hashCode = (hashCode * 59) + this.ExchangeFee.GetHashCode();
                hashCode = (hashCode * 59) + this.MiscellaneousFee.GetHashCode();
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.Portfolio != null)
                {
                    hashCode = (hashCode * 59) + this.Portfolio.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.TradeType != null)
                {
                    hashCode = (hashCode * 59) + this.TradeType.GetHashCode();
                }
                if (this.UnitType != null)
                {
                    hashCode = (hashCode * 59) + this.UnitType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionLeaves.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.Gross.GetHashCode();
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.CurrencyISO != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyISO.GetHashCode();
                }
                if (this.TradeDate != null)
                {
                    hashCode = (hashCode * 59) + this.TradeDate.GetHashCode();
                }
                if (this.AddedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.AddedDateTime.GetHashCode();
                }
                if (this.UpdatedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDateTime.GetHashCode();
                }
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ParentId (string) maxLength
            if (this.ParentId != null && this.ParentId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, length must be less than 32.", new [] { "ParentId" });
            }

            // ParentId (string) minLength
            if (this.ParentId != null && this.ParentId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, length must be greater than 0.", new [] { "ParentId" });
            }

            // SettlementCurrencyISO (string) maxLength
            if (this.SettlementCurrencyISO != null && this.SettlementCurrencyISO.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementCurrencyISO, length must be less than 3.", new [] { "SettlementCurrencyISO" });
            }

            // SettlementCurrencyISO (string) minLength
            if (this.SettlementCurrencyISO != null && this.SettlementCurrencyISO.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementCurrencyISO, length must be greater than 0.", new [] { "SettlementCurrencyISO" });
            }

            // Broker (string) maxLength
            if (this.Broker != null && this.Broker.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Broker, length must be less than 32.", new [] { "Broker" });
            }

            // Broker (string) minLength
            if (this.Broker != null && this.Broker.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Broker, length must be greater than 0.", new [] { "Broker" });
            }

            // Custodian (string) maxLength
            if (this.Custodian != null && this.Custodian.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Custodian, length must be less than 32.", new [] { "Custodian" });
            }

            // Custodian (string) minLength
            if (this.Custodian != null && this.Custodian.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Custodian, length must be greater than 0.", new [] { "Custodian" });
            }

            // TransactionId (string) maxLength
            if (this.TransactionId != null && this.TransactionId.Length > 252)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 252.", new [] { "TransactionId" });
            }

            // TransactionId (string) minLength
            if (this.TransactionId != null && this.TransactionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 0.", new [] { "TransactionId" });
            }

            // OrderId (string) maxLength
            if (this.OrderId != null && this.OrderId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be less than 32.", new [] { "OrderId" });
            }

            // OrderId (string) minLength
            if (this.OrderId != null && this.OrderId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be greater than 0.", new [] { "OrderId" });
            }

            // Symbol (string) maxLength
            if (this.Symbol != null && this.Symbol.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Symbol, length must be less than 32.", new [] { "Symbol" });
            }

            // Symbol (string) minLength
            if (this.Symbol != null && this.Symbol.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Symbol, length must be greater than 0.", new [] { "Symbol" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 32.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // CurrencyISO (string) maxLength
            if (this.CurrencyISO != null && this.CurrencyISO.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyISO, length must be less than 3.", new [] { "CurrencyISO" });
            }

            // CurrencyISO (string) minLength
            if (this.CurrencyISO != null && this.CurrencyISO.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyISO, length must be greater than 0.", new [] { "CurrencyISO" });
            }

            yield break;
        }
    }

}
