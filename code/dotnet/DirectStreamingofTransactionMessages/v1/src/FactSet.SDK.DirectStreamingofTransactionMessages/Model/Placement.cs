/*
 * dsotm API
 *
 * Allow clients to send transactions data to FactSet.
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.DirectStreamingofTransactionMessages.Client.OpenAPIDateConverter;

namespace FactSet.SDK.DirectStreamingofTransactionMessages.Model
{
    /// <summary>
    /// Placement transaction attributes
    /// </summary>
    [DataContract(Name = "Placement")]
    public partial class Placement : IEquatable<Placement>, IValidatableObject
    {
        /// <summary>
        /// Status of the Placement
        /// </summary>
        /// <value>Status of the Placement</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionStatusEnum
        {
            /// <summary>
            /// Enum Placed for value: placed
            /// </summary>
            [EnumMember(Value = "placed")]
            Placed = 1,

            /// <summary>
            /// Enum PartialFilled for value: partialFilled
            /// </summary>
            [EnumMember(Value = "partialFilled")]
            PartialFilled = 2,

            /// <summary>
            /// Enum Filled for value: filled
            /// </summary>
            [EnumMember(Value = "filled")]
            Filled = 3,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 4,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 5,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 6

        }


        /// <summary>
        /// Status of the Placement
        /// </summary>
        /// <value>Status of the Placement</value>
        [DataMember(Name = "transactionStatus", IsRequired = true, EmitDefaultValue = false)]
        public TransactionStatusEnum TransactionStatus { get; set; }
        /// <summary>
        /// Order type indicating the price type of the Placement
        /// </summary>
        /// <value>Order type indicating the price type of the Placement</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTypeEnum
        {
            /// <summary>
            /// Enum Market for value: market
            /// </summary>
            [EnumMember(Value = "market")]
            Market = 1,

            /// <summary>
            /// Enum Limit for value: limit
            /// </summary>
            [EnumMember(Value = "limit")]
            Limit = 2,

            /// <summary>
            /// Enum StopLimit for value: stopLimit
            /// </summary>
            [EnumMember(Value = "stopLimit")]
            StopLimit = 3,

            /// <summary>
            /// Enum Stop for value: stop
            /// </summary>
            [EnumMember(Value = "stop")]
            Stop = 4

        }


        /// <summary>
        /// Order type indicating the price type of the Placement
        /// </summary>
        /// <value>Order type indicating the price type of the Placement</value>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public OrderTypeEnum? OrderType { get; set; }
        /// <summary>
        /// Time In Force of the Placement
        /// </summary>
        /// <value>Time In Force of the Placement</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TifEnum
        {
            /// <summary>
            /// Enum GoodTilCancel for value: goodTilCancel
            /// </summary>
            [EnumMember(Value = "goodTilCancel")]
            GoodTilCancel = 1,

            /// <summary>
            /// Enum GoodTilDate for value: goodTilDate
            /// </summary>
            [EnumMember(Value = "goodTilDate")]
            GoodTilDate = 2,

            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 3,

            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 4

        }


        /// <summary>
        /// Time In Force of the Placement
        /// </summary>
        /// <value>Time In Force of the Placement</value>
        [DataMember(Name = "tif", EmitDefaultValue = false)]
        public TifEnum? Tif { get; set; }
        /// <summary>
        /// Indicates placement settlement period
        /// </summary>
        /// <value>Indicates placement settlement period</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SettlementTypeEnum
        {
            /// <summary>
            /// Enum Regular for value: regular
            /// </summary>
            [EnumMember(Value = "regular")]
            Regular = 1,

            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 2,

            /// <summary>
            /// Enum NextDay for value: nextDay
            /// </summary>
            [EnumMember(Value = "nextDay")]
            NextDay = 3,

            /// <summary>
            /// Enum TPlus2 for value: tPlus2
            /// </summary>
            [EnumMember(Value = "tPlus2")]
            TPlus2 = 4,

            /// <summary>
            /// Enum TPlus3 for value: tPlus3
            /// </summary>
            [EnumMember(Value = "tPlus3")]
            TPlus3 = 5,

            /// <summary>
            /// Enum TPlus4 for value: tPlus4
            /// </summary>
            [EnumMember(Value = "tPlus4")]
            TPlus4 = 6,

            /// <summary>
            /// Enum Future for value: future
            /// </summary>
            [EnumMember(Value = "future")]
            Future = 7,

            /// <summary>
            /// Enum WhenIssued for value: whenIssued
            /// </summary>
            [EnumMember(Value = "whenIssued")]
            WhenIssued = 8,

            /// <summary>
            /// Enum SellersOption for value: sellersOption
            /// </summary>
            [EnumMember(Value = "sellersOption")]
            SellersOption = 9,

            /// <summary>
            /// Enum TPlus5 for value: tPlus5
            /// </summary>
            [EnumMember(Value = "tPlus5")]
            TPlus5 = 10

        }


        /// <summary>
        /// Indicates placement settlement period
        /// </summary>
        /// <value>Indicates placement settlement period</value>
        [DataMember(Name = "settlementType", EmitDefaultValue = false)]
        public SettlementTypeEnum? SettlementType { get; set; }
        /// <summary>
        /// Side of the order
        /// </summary>
        /// <value>Side of the order</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SideEnum
        {
            /// <summary>
            /// Enum Buy for value: buy
            /// </summary>
            [EnumMember(Value = "buy")]
            Buy = 1,

            /// <summary>
            /// Enum BuyCover for value: buyCover
            /// </summary>
            [EnumMember(Value = "buyCover")]
            BuyCover = 2,

            /// <summary>
            /// Enum Sell for value: sell
            /// </summary>
            [EnumMember(Value = "sell")]
            Sell = 3,

            /// <summary>
            /// Enum SellShort for value: sellShort
            /// </summary>
            [EnumMember(Value = "sellShort")]
            SellShort = 4

        }


        /// <summary>
        /// Side of the order
        /// </summary>
        /// <value>Side of the order</value>
        [DataMember(Name = "side", IsRequired = true, EmitDefaultValue = false)]
        public SideEnum Side { get; set; }
        /// <summary>
        /// Unit type of the order. Indicates if the trade is driven by quantity or value
        /// </summary>
        /// <value>Unit type of the order. Indicates if the trade is driven by quantity or value</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitTypeEnum
        {
            /// <summary>
            /// Enum Quantity for value: quantity
            /// </summary>
            [EnumMember(Value = "quantity")]
            Quantity = 1,

            /// <summary>
            /// Enum Value for value: value
            /// </summary>
            [EnumMember(Value = "value")]
            Value = 2

        }


        /// <summary>
        /// Unit type of the order. Indicates if the trade is driven by quantity or value
        /// </summary>
        /// <value>Unit type of the order. Indicates if the trade is driven by quantity or value</value>
        [DataMember(Name = "unitType", IsRequired = true, EmitDefaultValue = false)]
        public UnitTypeEnum UnitType { get; set; }
        /// <summary>
        /// Compliance check status
        /// </summary>
        /// <value>Compliance check status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComplianceStatusEnum
        {
            /// <summary>
            /// Enum Unchecked for value: unchecked
            /// </summary>
            [EnumMember(Value = "unchecked")]
            Unchecked = 1,

            /// <summary>
            /// Enum Pass for value: pass
            /// </summary>
            [EnumMember(Value = "pass")]
            Pass = 2,

            /// <summary>
            /// Enum Fail for value: fail
            /// </summary>
            [EnumMember(Value = "fail")]
            Fail = 3

        }


        /// <summary>
        /// Compliance check status
        /// </summary>
        /// <value>Compliance check status</value>
        [DataMember(Name = "complianceStatus", EmitDefaultValue = false)]
        public ComplianceStatusEnum? ComplianceStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Placement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Placement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Placement" /> class.
        /// </summary>
        /// <param name="placementDate">Placement date which is in the format YYYY-MM-DD (required).</param>
        /// <param name="transactionId">Unique Id of the placement (required).</param>
        /// <param name="parentId">transactionId of the order which spawned this placement.</param>
        /// <param name="orderId">orderId of the order related to this placement.</param>
        /// <param name="transactionStatus">Status of the Placement (required).</param>
        /// <param name="orderType">Order type indicating the price type of the Placement.</param>
        /// <param name="limitPrice">Price related to limit and stopLimit order types.</param>
        /// <param name="stopPrice">Price related to stop and stopLimit order types.</param>
        /// <param name="tif">Time In Force of the Placement.</param>
        /// <param name="tifDate">Time In Force date for goodTilDate placements in YYYY-MM-DD format.</param>
        /// <param name="settlementType">Indicates placement settlement period.</param>
        /// <param name="settlementDate">Settlement date in YYYY-MM-DD format.</param>
        /// <param name="account">Path of the account (required).</param>
        /// <param name="symbol">Symbol corresponding to the traded instrument (required).</param>
        /// <param name="instrumentName">Name or description of the traded instrument (required).</param>
        /// <param name="side">Side of the order (required).</param>
        /// <param name="unitType">Unit type of the order. Indicates if the trade is driven by quantity or value (required).</param>
        /// <param name="transactionLeaves">Shares that have been ordered and not executed.</param>
        /// <param name="quantity">Quantity of the instrument traded (required).</param>
        /// <param name="gross">Cash value of the transaction (required).</param>
        /// <param name="price">The transaction price.</param>
        /// <param name="currency">The iso currency code of cash valued fields, Net Amount and Gross Amount (required).</param>
        /// <param name="complianceStatus">Compliance check status.</param>
        /// <param name="addedDateTime">Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF.</param>
        /// <param name="updatedDateTime">Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF.</param>
        /// <param name="additionalFields">List of additional fields which can be used for dynamically populating other ofdb fields.</param>
        public Placement(string placementDate, string transactionId, TransactionStatusEnum transactionStatus, string account, string symbol, string instrumentName, SideEnum side, UnitTypeEnum unitType, double quantity, double gross, string currency,string parentId = default(string), string orderId = default(string), OrderTypeEnum? orderType = default(OrderTypeEnum?), double limitPrice = default(double), double stopPrice = default(double), TifEnum? tif = default(TifEnum?), string tifDate = default(string), SettlementTypeEnum? settlementType = default(SettlementTypeEnum?), string settlementDate = default(string), double? transactionLeaves = default(double?), double? price = default(double?), ComplianceStatusEnum? complianceStatus = default(ComplianceStatusEnum?), string addedDateTime = default(string), string updatedDateTime = default(string), List<AdditionalField> additionalFields = default(List<AdditionalField>))
        {
            // to ensure "placementDate" is required (not null)
            if (placementDate == null) {
                throw new ArgumentNullException("placementDate is a required property for Placement and cannot be null");
            }
            this.PlacementDate = placementDate;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null) {
                throw new ArgumentNullException("transactionId is a required property for Placement and cannot be null");
            }
            this.TransactionId = transactionId;
            this.TransactionStatus = transactionStatus;
            // to ensure "account" is required (not null)
            if (account == null) {
                throw new ArgumentNullException("account is a required property for Placement and cannot be null");
            }
            this.Account = account;
            // to ensure "symbol" is required (not null)
            if (symbol == null) {
                throw new ArgumentNullException("symbol is a required property for Placement and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "instrumentName" is required (not null)
            if (instrumentName == null) {
                throw new ArgumentNullException("instrumentName is a required property for Placement and cannot be null");
            }
            this.InstrumentName = instrumentName;
            this.Side = side;
            this.UnitType = unitType;
            this.Quantity = quantity;
            this.Gross = gross;
            // to ensure "currency" is required (not null)
            if (currency == null) {
                throw new ArgumentNullException("currency is a required property for Placement and cannot be null");
            }
            this.Currency = currency;
            this.ParentId = parentId;
            this.OrderId = orderId;
            this.OrderType = orderType;
            this.LimitPrice = limitPrice;
            this.StopPrice = stopPrice;
            this.Tif = tif;
            this.TifDate = tifDate;
            this.SettlementType = settlementType;
            this.SettlementDate = settlementDate;
            this.TransactionLeaves = transactionLeaves;
            this.Price = price;
            this.ComplianceStatus = complianceStatus;
            this.AddedDateTime = addedDateTime;
            this.UpdatedDateTime = updatedDateTime;
            this.AdditionalFields = additionalFields;
        }

        /// <summary>
        /// Placement date which is in the format YYYY-MM-DD
        /// </summary>
        /// <value>Placement date which is in the format YYYY-MM-DD</value>
        [DataMember(Name = "placementDate", IsRequired = true, EmitDefaultValue = false)]
        public string PlacementDate { get; set; }

        /// <summary>
        /// Unique Id of the placement
        /// </summary>
        /// <value>Unique Id of the placement</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// transactionId of the order which spawned this placement
        /// </summary>
        /// <value>transactionId of the order which spawned this placement</value>
        [DataMember(Name = "parentId", EmitDefaultValue = true)]
        public string ParentId { get; set; }

        /// <summary>
        /// orderId of the order related to this placement
        /// </summary>
        /// <value>orderId of the order related to this placement</value>
        [DataMember(Name = "orderId", EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Price related to limit and stopLimit order types
        /// </summary>
        /// <value>Price related to limit and stopLimit order types</value>
        [DataMember(Name = "limitPrice", EmitDefaultValue = false)]
        public double LimitPrice { get; set; }

        /// <summary>
        /// Price related to stop and stopLimit order types
        /// </summary>
        /// <value>Price related to stop and stopLimit order types</value>
        [DataMember(Name = "stopPrice", EmitDefaultValue = false)]
        public double StopPrice { get; set; }

        /// <summary>
        /// Time In Force date for goodTilDate placements in YYYY-MM-DD format
        /// </summary>
        /// <value>Time In Force date for goodTilDate placements in YYYY-MM-DD format</value>
        [DataMember(Name = "tifDate", EmitDefaultValue = true)]
        public string TifDate { get; set; }

        /// <summary>
        /// Settlement date in YYYY-MM-DD format
        /// </summary>
        /// <value>Settlement date in YYYY-MM-DD format</value>
        [DataMember(Name = "settlementDate", EmitDefaultValue = true)]
        public string SettlementDate { get; set; }

        /// <summary>
        /// Path of the account
        /// </summary>
        /// <value>Path of the account</value>
        [DataMember(Name = "account", IsRequired = true, EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Symbol corresponding to the traded instrument
        /// </summary>
        /// <value>Symbol corresponding to the traded instrument</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Name or description of the traded instrument
        /// </summary>
        /// <value>Name or description of the traded instrument</value>
        [DataMember(Name = "instrumentName", IsRequired = true, EmitDefaultValue = false)]
        public string InstrumentName { get; set; }

        /// <summary>
        /// Shares that have been ordered and not executed
        /// </summary>
        /// <value>Shares that have been ordered and not executed</value>
        [DataMember(Name = "transactionLeaves", EmitDefaultValue = true)]
        public double? TransactionLeaves { get; set; }

        /// <summary>
        /// Quantity of the instrument traded
        /// </summary>
        /// <value>Quantity of the instrument traded</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// Cash value of the transaction
        /// </summary>
        /// <value>Cash value of the transaction</value>
        [DataMember(Name = "gross", IsRequired = true, EmitDefaultValue = false)]
        public double Gross { get; set; }

        /// <summary>
        /// The transaction price
        /// </summary>
        /// <value>The transaction price</value>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public double? Price { get; set; }

        /// <summary>
        /// The iso currency code of cash valued fields, Net Amount and Gross Amount
        /// </summary>
        /// <value>The iso currency code of cash valued fields, Net Amount and Gross Amount</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF
        /// </summary>
        /// <value>Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF</value>
        [DataMember(Name = "addedDateTime", EmitDefaultValue = true)]
        public string AddedDateTime { get; set; }

        /// <summary>
        /// Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF
        /// </summary>
        /// <value>Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF</value>
        [DataMember(Name = "updatedDateTime", EmitDefaultValue = true)]
        public string UpdatedDateTime { get; set; }

        /// <summary>
        /// List of additional fields which can be used for dynamically populating other ofdb fields
        /// </summary>
        /// <value>List of additional fields which can be used for dynamically populating other ofdb fields</value>
        [DataMember(Name = "additionalFields", EmitDefaultValue = true)]
        public List<AdditionalField> AdditionalFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Placement {\n");
            sb.Append("  PlacementDate: ").Append(PlacementDate).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  Tif: ").Append(Tif).Append("\n");
            sb.Append("  TifDate: ").Append(TifDate).Append("\n");
            sb.Append("  SettlementType: ").Append(SettlementType).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  InstrumentName: ").Append(InstrumentName).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  TransactionLeaves: ").Append(TransactionLeaves).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ComplianceStatus: ").Append(ComplianceStatus).Append("\n");
            sb.Append("  AddedDateTime: ").Append(AddedDateTime).Append("\n");
            sb.Append("  UpdatedDateTime: ").Append(UpdatedDateTime).Append("\n");
            sb.Append("  AdditionalFields: ").Append(AdditionalFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Placement);
        }

        /// <summary>
        /// Returns true if Placement instances are equal
        /// </summary>
        /// <param name="input">Instance of Placement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Placement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PlacementDate == input.PlacementDate ||
                    (this.PlacementDate != null &&
                    this.PlacementDate.Equals(input.PlacementDate))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    this.TransactionStatus.Equals(input.TransactionStatus)
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    this.OrderType.Equals(input.OrderType)
                ) && 
                (
                    this.LimitPrice == input.LimitPrice ||
                    this.LimitPrice.Equals(input.LimitPrice)
                ) && 
                (
                    this.StopPrice == input.StopPrice ||
                    this.StopPrice.Equals(input.StopPrice)
                ) && 
                (
                    this.Tif == input.Tif ||
                    this.Tif.Equals(input.Tif)
                ) && 
                (
                    this.TifDate == input.TifDate ||
                    (this.TifDate != null &&
                    this.TifDate.Equals(input.TifDate))
                ) && 
                (
                    this.SettlementType == input.SettlementType ||
                    this.SettlementType.Equals(input.SettlementType)
                ) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.InstrumentName == input.InstrumentName ||
                    (this.InstrumentName != null &&
                    this.InstrumentName.Equals(input.InstrumentName))
                ) && 
                (
                    this.Side == input.Side ||
                    this.Side.Equals(input.Side)
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    this.UnitType.Equals(input.UnitType)
                ) && 
                (
                    this.TransactionLeaves == input.TransactionLeaves ||
                    (this.TransactionLeaves != null &&
                    this.TransactionLeaves.Equals(input.TransactionLeaves))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Gross == input.Gross ||
                    this.Gross.Equals(input.Gross)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ComplianceStatus == input.ComplianceStatus ||
                    this.ComplianceStatus.Equals(input.ComplianceStatus)
                ) && 
                (
                    this.AddedDateTime == input.AddedDateTime ||
                    (this.AddedDateTime != null &&
                    this.AddedDateTime.Equals(input.AddedDateTime))
                ) && 
                (
                    this.UpdatedDateTime == input.UpdatedDateTime ||
                    (this.UpdatedDateTime != null &&
                    this.UpdatedDateTime.Equals(input.UpdatedDateTime))
                ) && 
                (
                    this.AdditionalFields == input.AdditionalFields ||
                    this.AdditionalFields != null &&
                    input.AdditionalFields != null &&
                    this.AdditionalFields.SequenceEqual(input.AdditionalFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlacementDate != null)
                {
                    hashCode = (hashCode * 59) + this.PlacementDate.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderType.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.StopPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Tif.GetHashCode();
                if (this.TifDate != null)
                {
                    hashCode = (hashCode * 59) + this.TifDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SettlementType.GetHashCode();
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.InstrumentName != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Side.GetHashCode();
                hashCode = (hashCode * 59) + this.UnitType.GetHashCode();
                if (this.TransactionLeaves != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionLeaves.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.Gross.GetHashCode();
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ComplianceStatus.GetHashCode();
                if (this.AddedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.AddedDateTime.GetHashCode();
                }
                if (this.UpdatedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDateTime.GetHashCode();
                }
                if (this.AdditionalFields != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TransactionId (string) maxLength
            if (this.TransactionId != null && this.TransactionId.Length > 252)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 252.", new [] { "TransactionId" });
            }

            // TransactionId (string) minLength
            if (this.TransactionId != null && this.TransactionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 0.", new [] { "TransactionId" });
            }

            // ParentId (string) maxLength
            if (this.ParentId != null && this.ParentId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, length must be less than 32.", new [] { "ParentId" });
            }

            // ParentId (string) minLength
            if (this.ParentId != null && this.ParentId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, length must be greater than 0.", new [] { "ParentId" });
            }

            // OrderId (string) maxLength
            if (this.OrderId != null && this.OrderId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be less than 32.", new [] { "OrderId" });
            }

            // OrderId (string) minLength
            if (this.OrderId != null && this.OrderId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be greater than 0.", new [] { "OrderId" });
            }

            // Symbol (string) maxLength
            if (this.Symbol != null && this.Symbol.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Symbol, length must be less than 32.", new [] { "Symbol" });
            }

            // Symbol (string) minLength
            if (this.Symbol != null && this.Symbol.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Symbol, length must be greater than 0.", new [] { "Symbol" });
            }

            // InstrumentName (string) maxLength
            if (this.InstrumentName != null && this.InstrumentName.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentName, length must be less than 32.", new [] { "InstrumentName" });
            }

            // InstrumentName (string) minLength
            if (this.InstrumentName != null && this.InstrumentName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentName, length must be greater than 0.", new [] { "InstrumentName" });
            }

            // Currency (string) maxLength
            if (this.Currency != null && this.Currency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be less than 3.", new [] { "Currency" });
            }

            // Currency (string) minLength
            if (this.Currency != null && this.Currency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be greater than 0.", new [] { "Currency" });
            }

            yield break;
        }
    }

}
