/*
 * DSOTM API
 *
 * Allow clients to send transactions data to FactSet.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.DirectStreamingofTransactionMessages.Client.OpenAPIDateConverter;

namespace FactSet.SDK.DirectStreamingofTransactionMessages.Model
{
    /// <summary>
    /// PlacementParameters
    /// </summary>
    [DataContract(Name = "PlacementParameters")]
    public partial class PlacementParameters : IEquatable<PlacementParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacementParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlacementParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacementParameters" /> class.
        /// </summary>
        /// <param name="transactionStatus">Transaction Status of a Placement could be any of the following values: Placed, PartialFilled, Filled, Expired, Cancelled, Rejected. (required).</param>
        /// <param name="parentId">Unique Id of the order which spawned this placement.</param>
        /// <param name="instructionType">Instruction Type of a Placement could be any of the following values: Market, Limit, Stop.</param>
        /// <param name="instructionValue">InstructionValue for a Placement.</param>
        /// <param name="tif">TIF of an Order could be any of the following values: GTC, GTD, D, W.</param>
        /// <param name="tifDate">TIF date which is in the format YYYY-MM-DD.</param>
        /// <param name="transactionId">Unique Id for the transaction (required).</param>
        /// <param name="orderId">Unique Id of the order which originated the record.</param>
        /// <param name="portfolio">Path of the portfolio (Ex: Client:/folder1/testing.ofdb) (required).</param>
        /// <param name="symbol">Symbol corresponding to the traded instrument. (required).</param>
        /// <param name="description">Description (required).</param>
        /// <param name="tradeType">Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively. (required).</param>
        /// <param name="unitType">Unit type could be one of Quantity or Value. (required).</param>
        /// <param name="transactionLeaves">Shares that have been ordered and not executed.</param>
        /// <param name="quantity">Quantity of the instrument traded. (required).</param>
        /// <param name="gross">Cash value of the transaction (required).</param>
        /// <param name="price">The transaction price.</param>
        /// <param name="currencyISO">The currency code of cash valued fields, Net Amount and Gross Amount. (required).</param>
        /// <param name="tradeDate">Trade date which is in the format YYYY-MM-DD (required).</param>
        /// <param name="addedDateTime">Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF.</param>
        /// <param name="updatedDateTime">Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF.</param>
        public PlacementParameters(string transactionStatus, string transactionId, string portfolio, string symbol, string description, string tradeType, string unitType, double quantity, double gross, string currencyISO, string tradeDate,string parentId = default(string), string instructionType = default(string), double instructionValue = default(double), string tif = default(string), string tifDate = default(string), string orderId = default(string), double transactionLeaves = default(double), double price = default(double), string addedDateTime = default(string), string updatedDateTime = default(string), string entity = default(string), string status = default(string))
        {
            // to ensure "transactionStatus" is required (not null)
            if (transactionStatus == null) {
                throw new ArgumentNullException("transactionStatus is a required property for PlacementParameters and cannot be null");
            }
            this.TransactionStatus = transactionStatus;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null) {
                throw new ArgumentNullException("transactionId is a required property for PlacementParameters and cannot be null");
            }
            this.TransactionId = transactionId;
            // to ensure "portfolio" is required (not null)
            if (portfolio == null) {
                throw new ArgumentNullException("portfolio is a required property for PlacementParameters and cannot be null");
            }
            this.Portfolio = portfolio;
            // to ensure "symbol" is required (not null)
            if (symbol == null) {
                throw new ArgumentNullException("symbol is a required property for PlacementParameters and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for PlacementParameters and cannot be null");
            }
            this.Description = description;
            // to ensure "tradeType" is required (not null)
            if (tradeType == null) {
                throw new ArgumentNullException("tradeType is a required property for PlacementParameters and cannot be null");
            }
            this.TradeType = tradeType;
            // to ensure "unitType" is required (not null)
            if (unitType == null) {
                throw new ArgumentNullException("unitType is a required property for PlacementParameters and cannot be null");
            }
            this.UnitType = unitType;
            this.Quantity = quantity;
            this.Gross = gross;
            // to ensure "currencyISO" is required (not null)
            if (currencyISO == null) {
                throw new ArgumentNullException("currencyISO is a required property for PlacementParameters and cannot be null");
            }
            this.CurrencyISO = currencyISO;
            // to ensure "tradeDate" is required (not null)
            if (tradeDate == null) {
                throw new ArgumentNullException("tradeDate is a required property for PlacementParameters and cannot be null");
            }
            this.TradeDate = tradeDate;
            this.ParentId = parentId;
            this.InstructionType = instructionType;
            this.InstructionValue = instructionValue;
            this.Tif = tif;
            this.TifDate = tifDate;
            this.OrderId = orderId;
            this.TransactionLeaves = transactionLeaves;
            this.Price = price;
            this.AddedDateTime = addedDateTime;
            this.UpdatedDateTime = updatedDateTime;
        }

        /// <summary>
        /// Transaction Status of a Placement could be any of the following values: Placed, PartialFilled, Filled, Expired, Cancelled, Rejected.
        /// </summary>
        /// <value>Transaction Status of a Placement could be any of the following values: Placed, PartialFilled, Filled, Expired, Cancelled, Rejected.</value>
        [DataMember(Name = "transactionStatus", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionStatus { get; set; }

        /// <summary>
        /// Unique Id of the order which spawned this placement
        /// </summary>
        /// <value>Unique Id of the order which spawned this placement</value>
        [DataMember(Name = "parentId", EmitDefaultValue = true)]
        public string ParentId { get; set; }

        /// <summary>
        /// Instruction Type of a Placement could be any of the following values: Market, Limit, Stop
        /// </summary>
        /// <value>Instruction Type of a Placement could be any of the following values: Market, Limit, Stop</value>
        [DataMember(Name = "instructionType", EmitDefaultValue = false)]
        public string InstructionType { get; set; }

        /// <summary>
        /// InstructionValue for a Placement
        /// </summary>
        /// <value>InstructionValue for a Placement</value>
        [DataMember(Name = "instructionValue", EmitDefaultValue = false)]
        public double InstructionValue { get; set; }

        /// <summary>
        /// TIF of an Order could be any of the following values: GTC, GTD, D, W
        /// </summary>
        /// <value>TIF of an Order could be any of the following values: GTC, GTD, D, W</value>
        [DataMember(Name = "tif", EmitDefaultValue = false)]
        public string Tif { get; set; }

        /// <summary>
        /// TIF date which is in the format YYYY-MM-DD
        /// </summary>
        /// <value>TIF date which is in the format YYYY-MM-DD</value>
        [DataMember(Name = "tifDate", EmitDefaultValue = false)]
        public string TifDate { get; set; }

        /// <summary>
        /// Unique Id for the transaction
        /// </summary>
        /// <value>Unique Id for the transaction</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Unique Id of the order which originated the record
        /// </summary>
        /// <value>Unique Id of the order which originated the record</value>
        [DataMember(Name = "orderId", EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Path of the portfolio (Ex: Client:/folder1/testing.ofdb)
        /// </summary>
        /// <value>Path of the portfolio (Ex: Client:/folder1/testing.ofdb)</value>
        [DataMember(Name = "portfolio", IsRequired = true, EmitDefaultValue = false)]
        public string Portfolio { get; set; }

        /// <summary>
        /// Symbol corresponding to the traded instrument.
        /// </summary>
        /// <value>Symbol corresponding to the traded instrument.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.
        /// </summary>
        /// <value>Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.</value>
        [DataMember(Name = "tradeType", IsRequired = true, EmitDefaultValue = false)]
        public string TradeType { get; set; }

        /// <summary>
        /// Unit type could be one of Quantity or Value.
        /// </summary>
        /// <value>Unit type could be one of Quantity or Value.</value>
        [DataMember(Name = "unitType", IsRequired = true, EmitDefaultValue = false)]
        public string UnitType { get; set; }

        /// <summary>
        /// Shares that have been ordered and not executed
        /// </summary>
        /// <value>Shares that have been ordered and not executed</value>
        [DataMember(Name = "transactionLeaves", EmitDefaultValue = false)]
        public double TransactionLeaves { get; set; }

        /// <summary>
        /// Quantity of the instrument traded.
        /// </summary>
        /// <value>Quantity of the instrument traded.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// Cash value of the transaction
        /// </summary>
        /// <value>Cash value of the transaction</value>
        [DataMember(Name = "gross", IsRequired = true, EmitDefaultValue = false)]
        public double Gross { get; set; }

        /// <summary>
        /// The transaction price
        /// </summary>
        /// <value>The transaction price</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// The currency code of cash valued fields, Net Amount and Gross Amount.
        /// </summary>
        /// <value>The currency code of cash valued fields, Net Amount and Gross Amount.</value>
        [DataMember(Name = "currencyISO", IsRequired = true, EmitDefaultValue = false)]
        public string CurrencyISO { get; set; }

        /// <summary>
        /// Trade date which is in the format YYYY-MM-DD
        /// </summary>
        /// <value>Trade date which is in the format YYYY-MM-DD</value>
        [DataMember(Name = "tradeDate", IsRequired = true, EmitDefaultValue = false)]
        public string TradeDate { get; set; }

        /// <summary>
        /// Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF
        /// </summary>
        /// <value>Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF</value>
        [DataMember(Name = "addedDateTime", EmitDefaultValue = false)]
        public string AddedDateTime { get; set; }

        /// <summary>
        /// Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF
        /// </summary>
        /// <value>Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF</value>
        [DataMember(Name = "updatedDateTime", EmitDefaultValue = false)]
        public string UpdatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string Entity { get; private set; }

        /// <summary>
        /// Returns false as Entity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntity()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; private set; }

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlacementParameters {\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  InstructionType: ").Append(InstructionType).Append("\n");
            sb.Append("  InstructionValue: ").Append(InstructionValue).Append("\n");
            sb.Append("  Tif: ").Append(Tif).Append("\n");
            sb.Append("  TifDate: ").Append(TifDate).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Portfolio: ").Append(Portfolio).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TradeType: ").Append(TradeType).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  TransactionLeaves: ").Append(TransactionLeaves).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CurrencyISO: ").Append(CurrencyISO).Append("\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  AddedDateTime: ").Append(AddedDateTime).Append("\n");
            sb.Append("  UpdatedDateTime: ").Append(UpdatedDateTime).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlacementParameters);
        }

        /// <summary>
        /// Returns true if PlacementParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of PlacementParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlacementParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    (this.TransactionStatus != null &&
                    this.TransactionStatus.Equals(input.TransactionStatus))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.InstructionType == input.InstructionType ||
                    (this.InstructionType != null &&
                    this.InstructionType.Equals(input.InstructionType))
                ) && 
                (
                    this.InstructionValue == input.InstructionValue ||
                    this.InstructionValue.Equals(input.InstructionValue)
                ) && 
                (
                    this.Tif == input.Tif ||
                    (this.Tif != null &&
                    this.Tif.Equals(input.Tif))
                ) && 
                (
                    this.TifDate == input.TifDate ||
                    (this.TifDate != null &&
                    this.TifDate.Equals(input.TifDate))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Portfolio == input.Portfolio ||
                    (this.Portfolio != null &&
                    this.Portfolio.Equals(input.Portfolio))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TradeType == input.TradeType ||
                    (this.TradeType != null &&
                    this.TradeType.Equals(input.TradeType))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.TransactionLeaves == input.TransactionLeaves ||
                    this.TransactionLeaves.Equals(input.TransactionLeaves)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Gross == input.Gross ||
                    this.Gross.Equals(input.Gross)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.CurrencyISO == input.CurrencyISO ||
                    (this.CurrencyISO != null &&
                    this.CurrencyISO.Equals(input.CurrencyISO))
                ) && 
                (
                    this.TradeDate == input.TradeDate ||
                    (this.TradeDate != null &&
                    this.TradeDate.Equals(input.TradeDate))
                ) && 
                (
                    this.AddedDateTime == input.AddedDateTime ||
                    (this.AddedDateTime != null &&
                    this.AddedDateTime.Equals(input.AddedDateTime))
                ) && 
                (
                    this.UpdatedDateTime == input.UpdatedDateTime ||
                    (this.UpdatedDateTime != null &&
                    this.UpdatedDateTime.Equals(input.UpdatedDateTime))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionStatus != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionStatus.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.InstructionType != null)
                {
                    hashCode = (hashCode * 59) + this.InstructionType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstructionValue.GetHashCode();
                if (this.Tif != null)
                {
                    hashCode = (hashCode * 59) + this.Tif.GetHashCode();
                }
                if (this.TifDate != null)
                {
                    hashCode = (hashCode * 59) + this.TifDate.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.Portfolio != null)
                {
                    hashCode = (hashCode * 59) + this.Portfolio.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.TradeType != null)
                {
                    hashCode = (hashCode * 59) + this.TradeType.GetHashCode();
                }
                if (this.UnitType != null)
                {
                    hashCode = (hashCode * 59) + this.UnitType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionLeaves.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.Gross.GetHashCode();
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.CurrencyISO != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyISO.GetHashCode();
                }
                if (this.TradeDate != null)
                {
                    hashCode = (hashCode * 59) + this.TradeDate.GetHashCode();
                }
                if (this.AddedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.AddedDateTime.GetHashCode();
                }
                if (this.UpdatedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDateTime.GetHashCode();
                }
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ParentId (string) maxLength
            if (this.ParentId != null && this.ParentId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, length must be less than 32.", new [] { "ParentId" });
            }

            // ParentId (string) minLength
            if (this.ParentId != null && this.ParentId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, length must be greater than 0.", new [] { "ParentId" });
            }

            // TransactionId (string) maxLength
            if (this.TransactionId != null && this.TransactionId.Length > 252)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 252.", new [] { "TransactionId" });
            }

            // TransactionId (string) minLength
            if (this.TransactionId != null && this.TransactionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 0.", new [] { "TransactionId" });
            }

            // OrderId (string) maxLength
            if (this.OrderId != null && this.OrderId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be less than 32.", new [] { "OrderId" });
            }

            // OrderId (string) minLength
            if (this.OrderId != null && this.OrderId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be greater than 0.", new [] { "OrderId" });
            }

            // Symbol (string) maxLength
            if (this.Symbol != null && this.Symbol.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Symbol, length must be less than 32.", new [] { "Symbol" });
            }

            // Symbol (string) minLength
            if (this.Symbol != null && this.Symbol.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Symbol, length must be greater than 0.", new [] { "Symbol" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 32.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // CurrencyISO (string) maxLength
            if (this.CurrencyISO != null && this.CurrencyISO.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyISO, length must be less than 3.", new [] { "CurrencyISO" });
            }

            // CurrencyISO (string) minLength
            if (this.CurrencyISO != null && this.CurrencyISO.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyISO, length must be greater than 0.", new [] { "CurrencyISO" });
            }

            yield break;
        }
    }

}
