/*
 * dsotm API
 *
 * Allow clients to send transactions data to FactSet.
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.DirectStreamingofTransactionMessages.Client.OpenAPIDateConverter;

namespace FactSet.SDK.DirectStreamingofTransactionMessages.Model
{
    /// <summary>
    /// Execution transaction attributes
    /// </summary>
    [DataContract(Name = "Execution")]
    public partial class Execution : IEquatable<Execution>, IValidatableObject
    {
        /// <summary>
        /// Status of the Execution
        /// </summary>
        /// <value>Status of the Execution</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionStatusEnum
        {
            /// <summary>
            /// Enum Executed for value: executed
            /// </summary>
            [EnumMember(Value = "executed")]
            Executed = 1,

            /// <summary>
            /// Enum Booked for value: booked
            /// </summary>
            [EnumMember(Value = "booked")]
            Booked = 2,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 3

        }


        /// <summary>
        /// Status of the Execution
        /// </summary>
        /// <value>Status of the Execution</value>
        [DataMember(Name = "transactionStatus", IsRequired = true, EmitDefaultValue = false)]
        public TransactionStatusEnum TransactionStatus { get; set; }
        /// <summary>
        /// Side of the order
        /// </summary>
        /// <value>Side of the order</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SideEnum
        {
            /// <summary>
            /// Enum Buy for value: buy
            /// </summary>
            [EnumMember(Value = "buy")]
            Buy = 1,

            /// <summary>
            /// Enum BuyCover for value: buyCover
            /// </summary>
            [EnumMember(Value = "buyCover")]
            BuyCover = 2,

            /// <summary>
            /// Enum Sell for value: sell
            /// </summary>
            [EnumMember(Value = "sell")]
            Sell = 3,

            /// <summary>
            /// Enum SellShort for value: sellShort
            /// </summary>
            [EnumMember(Value = "sellShort")]
            SellShort = 4

        }


        /// <summary>
        /// Side of the order
        /// </summary>
        /// <value>Side of the order</value>
        [DataMember(Name = "side", IsRequired = true, EmitDefaultValue = false)]
        public SideEnum Side { get; set; }
        /// <summary>
        /// Unit type of the order. Indicates if the trade is driven by quantity or value
        /// </summary>
        /// <value>Unit type of the order. Indicates if the trade is driven by quantity or value</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitTypeEnum
        {
            /// <summary>
            /// Enum Quantity for value: quantity
            /// </summary>
            [EnumMember(Value = "quantity")]
            Quantity = 1,

            /// <summary>
            /// Enum Value for value: value
            /// </summary>
            [EnumMember(Value = "value")]
            Value = 2

        }


        /// <summary>
        /// Unit type of the order. Indicates if the trade is driven by quantity or value
        /// </summary>
        /// <value>Unit type of the order. Indicates if the trade is driven by quantity or value</value>
        [DataMember(Name = "unitType", IsRequired = true, EmitDefaultValue = false)]
        public UnitTypeEnum UnitType { get; set; }
        /// <summary>
        /// Compliance check status
        /// </summary>
        /// <value>Compliance check status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComplianceStatusEnum
        {
            /// <summary>
            /// Enum Unchecked for value: unchecked
            /// </summary>
            [EnumMember(Value = "unchecked")]
            Unchecked = 1,

            /// <summary>
            /// Enum Pass for value: pass
            /// </summary>
            [EnumMember(Value = "pass")]
            Pass = 2,

            /// <summary>
            /// Enum Fail for value: fail
            /// </summary>
            [EnumMember(Value = "fail")]
            Fail = 3,

            /// <summary>
            /// Enum Warn for value: warn
            /// </summary>
            [EnumMember(Value = "warn")]
            Warn = 4

        }


        /// <summary>
        /// Compliance check status
        /// </summary>
        /// <value>Compliance check status</value>
        [DataMember(Name = "complianceStatus", EmitDefaultValue = false)]
        public ComplianceStatusEnum? ComplianceStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Execution" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Execution() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Execution" /> class.
        /// </summary>
        /// <param name="tradeDate">Trade date which is in the format YYYY-MM-DD (required).</param>
        /// <param name="transactionId">Unique Id of the execution (required).</param>
        /// <param name="parentId">transactionId of the placement which spawned this execution.</param>
        /// <param name="orderId">orderId of the order related to this execution.</param>
        /// <param name="transactionStatus">Status of the Execution (required).</param>
        /// <param name="net">Cash value of the transaction, net of brokerage costs (required).</param>
        /// <param name="settlementDate">Settlement date in YYYY-MM-DD format (required).</param>
        /// <param name="settlementCurrency">The iso currency code of the Settlement Value (required).</param>
        /// <param name="settlementValue">Cash value of the transaction in settlement currency (required).</param>
        /// <param name="foreignExchangeRate">FX rate to convert the net, gross fields to reporting currency.</param>
        /// <param name="broker">Execution broker id.</param>
        /// <param name="custodian">Execution custodian Id.</param>
        /// <param name="accruedInterest">Execution accrued interest.</param>
        /// <param name="commission">Execution commission value.</param>
        /// <param name="clearingCommission">Execution clearing commission value.</param>
        /// <param name="localTax">Execution local tax value.</param>
        /// <param name="localFee">Execution local fee value.</param>
        /// <param name="brokerFee">Execution broker fee value.</param>
        /// <param name="exchangeFee">Execution exchange fee value.</param>
        /// <param name="miscellaneousFee">Execution miscellaneous fee value.</param>
        /// <param name="account">Path of the account (required).</param>
        /// <param name="symbol">Symbol corresponding to the traded instrument (required).</param>
        /// <param name="instrumentName">Name or description of the traded instrument (required).</param>
        /// <param name="side">Side of the order (required).</param>
        /// <param name="unitType">Unit type of the order. Indicates if the trade is driven by quantity or value (required).</param>
        /// <param name="transactionLeaves">Shares that have been ordered and not executed.</param>
        /// <param name="quantity">Quantity of the instrument traded (required).</param>
        /// <param name="gross">Cash value of the transaction (required).</param>
        /// <param name="price">The transaction price.</param>
        /// <param name="currency">The iso currency code of cash valued fields, Net Amount and Gross Amount (required).</param>
        /// <param name="complianceStatus">Compliance check status.</param>
        /// <param name="addedDateTime">Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF.</param>
        /// <param name="updatedDateTime">Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF.</param>
        /// <param name="additionalFields">List of additional fields which can be used for dynamically populating other ofdb fields.</param>
        public Execution(string tradeDate, string transactionId, TransactionStatusEnum transactionStatus, double net, string settlementDate, string settlementCurrency, double settlementValue, string account, string symbol, string instrumentName, SideEnum side, UnitTypeEnum unitType, double quantity, double gross, string currency,string parentId = default(string), string orderId = default(string), float? foreignExchangeRate = default(float?), string broker = default(string), string custodian = default(string), double? accruedInterest = default(double?), double? commission = default(double?), double? clearingCommission = default(double?), double? localTax = default(double?), double? localFee = default(double?), double? brokerFee = default(double?), double? exchangeFee = default(double?), double? miscellaneousFee = default(double?), double? transactionLeaves = default(double?), double? price = default(double?), ComplianceStatusEnum? complianceStatus = default(ComplianceStatusEnum?), string addedDateTime = default(string), string updatedDateTime = default(string), List<AdditionalField> additionalFields = default(List<AdditionalField>))
        {
            // to ensure "tradeDate" is required (not null)
            if (tradeDate == null) {
                throw new ArgumentNullException("tradeDate is a required property for Execution and cannot be null");
            }
            this.TradeDate = tradeDate;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null) {
                throw new ArgumentNullException("transactionId is a required property for Execution and cannot be null");
            }
            this.TransactionId = transactionId;
            this.TransactionStatus = transactionStatus;
            this.Net = net;
            // to ensure "settlementDate" is required (not null)
            if (settlementDate == null) {
                throw new ArgumentNullException("settlementDate is a required property for Execution and cannot be null");
            }
            this.SettlementDate = settlementDate;
            // to ensure "settlementCurrency" is required (not null)
            if (settlementCurrency == null) {
                throw new ArgumentNullException("settlementCurrency is a required property for Execution and cannot be null");
            }
            this.SettlementCurrency = settlementCurrency;
            this.SettlementValue = settlementValue;
            // to ensure "account" is required (not null)
            if (account == null) {
                throw new ArgumentNullException("account is a required property for Execution and cannot be null");
            }
            this.Account = account;
            // to ensure "symbol" is required (not null)
            if (symbol == null) {
                throw new ArgumentNullException("symbol is a required property for Execution and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "instrumentName" is required (not null)
            if (instrumentName == null) {
                throw new ArgumentNullException("instrumentName is a required property for Execution and cannot be null");
            }
            this.InstrumentName = instrumentName;
            this.Side = side;
            this.UnitType = unitType;
            this.Quantity = quantity;
            this.Gross = gross;
            // to ensure "currency" is required (not null)
            if (currency == null) {
                throw new ArgumentNullException("currency is a required property for Execution and cannot be null");
            }
            this.Currency = currency;
            this.ParentId = parentId;
            this.OrderId = orderId;
            this.ForeignExchangeRate = foreignExchangeRate;
            this.Broker = broker;
            this.Custodian = custodian;
            this.AccruedInterest = accruedInterest;
            this.Commission = commission;
            this.ClearingCommission = clearingCommission;
            this.LocalTax = localTax;
            this.LocalFee = localFee;
            this.BrokerFee = brokerFee;
            this.ExchangeFee = exchangeFee;
            this.MiscellaneousFee = miscellaneousFee;
            this.TransactionLeaves = transactionLeaves;
            this.Price = price;
            this.ComplianceStatus = complianceStatus;
            this.AddedDateTime = addedDateTime;
            this.UpdatedDateTime = updatedDateTime;
            this.AdditionalFields = additionalFields;
        }

        /// <summary>
        /// Trade date which is in the format YYYY-MM-DD
        /// </summary>
        /// <value>Trade date which is in the format YYYY-MM-DD</value>
        [DataMember(Name = "tradeDate", IsRequired = true, EmitDefaultValue = false)]
        public string TradeDate { get; set; }

        /// <summary>
        /// Unique Id of the execution
        /// </summary>
        /// <value>Unique Id of the execution</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// transactionId of the placement which spawned this execution
        /// </summary>
        /// <value>transactionId of the placement which spawned this execution</value>
        [DataMember(Name = "parentId", EmitDefaultValue = true)]
        public string ParentId { get; set; }

        /// <summary>
        /// orderId of the order related to this execution
        /// </summary>
        /// <value>orderId of the order related to this execution</value>
        [DataMember(Name = "orderId", EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Cash value of the transaction, net of brokerage costs
        /// </summary>
        /// <value>Cash value of the transaction, net of brokerage costs</value>
        [DataMember(Name = "net", IsRequired = true, EmitDefaultValue = false)]
        public double Net { get; set; }

        /// <summary>
        /// Settlement date in YYYY-MM-DD format
        /// </summary>
        /// <value>Settlement date in YYYY-MM-DD format</value>
        [DataMember(Name = "settlementDate", IsRequired = true, EmitDefaultValue = false)]
        public string SettlementDate { get; set; }

        /// <summary>
        /// The iso currency code of the Settlement Value
        /// </summary>
        /// <value>The iso currency code of the Settlement Value</value>
        [DataMember(Name = "settlementCurrency", IsRequired = true, EmitDefaultValue = false)]
        public string SettlementCurrency { get; set; }

        /// <summary>
        /// Cash value of the transaction in settlement currency
        /// </summary>
        /// <value>Cash value of the transaction in settlement currency</value>
        [DataMember(Name = "settlementValue", IsRequired = true, EmitDefaultValue = false)]
        public double SettlementValue { get; set; }

        /// <summary>
        /// FX rate to convert the net, gross fields to reporting currency
        /// </summary>
        /// <value>FX rate to convert the net, gross fields to reporting currency</value>
        [DataMember(Name = "foreignExchangeRate", EmitDefaultValue = true)]
        public float? ForeignExchangeRate { get; set; }

        /// <summary>
        /// Execution broker id
        /// </summary>
        /// <value>Execution broker id</value>
        [DataMember(Name = "broker", EmitDefaultValue = true)]
        public string Broker { get; set; }

        /// <summary>
        /// Execution custodian Id
        /// </summary>
        /// <value>Execution custodian Id</value>
        [DataMember(Name = "custodian", EmitDefaultValue = true)]
        public string Custodian { get; set; }

        /// <summary>
        /// Execution accrued interest
        /// </summary>
        /// <value>Execution accrued interest</value>
        [DataMember(Name = "accruedInterest", EmitDefaultValue = true)]
        public double? AccruedInterest { get; set; }

        /// <summary>
        /// Execution commission value
        /// </summary>
        /// <value>Execution commission value</value>
        [DataMember(Name = "commission", EmitDefaultValue = true)]
        public double? Commission { get; set; }

        /// <summary>
        /// Execution clearing commission value
        /// </summary>
        /// <value>Execution clearing commission value</value>
        [DataMember(Name = "clearingCommission", EmitDefaultValue = true)]
        public double? ClearingCommission { get; set; }

        /// <summary>
        /// Execution local tax value
        /// </summary>
        /// <value>Execution local tax value</value>
        [DataMember(Name = "localTax", EmitDefaultValue = true)]
        public double? LocalTax { get; set; }

        /// <summary>
        /// Execution local fee value
        /// </summary>
        /// <value>Execution local fee value</value>
        [DataMember(Name = "localFee", EmitDefaultValue = true)]
        public double? LocalFee { get; set; }

        /// <summary>
        /// Execution broker fee value
        /// </summary>
        /// <value>Execution broker fee value</value>
        [DataMember(Name = "brokerFee", EmitDefaultValue = true)]
        public double? BrokerFee { get; set; }

        /// <summary>
        /// Execution exchange fee value
        /// </summary>
        /// <value>Execution exchange fee value</value>
        [DataMember(Name = "exchangeFee", EmitDefaultValue = true)]
        public double? ExchangeFee { get; set; }

        /// <summary>
        /// Execution miscellaneous fee value
        /// </summary>
        /// <value>Execution miscellaneous fee value</value>
        [DataMember(Name = "miscellaneousFee", EmitDefaultValue = true)]
        public double? MiscellaneousFee { get; set; }

        /// <summary>
        /// Path of the account
        /// </summary>
        /// <value>Path of the account</value>
        [DataMember(Name = "account", IsRequired = true, EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Symbol corresponding to the traded instrument
        /// </summary>
        /// <value>Symbol corresponding to the traded instrument</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Name or description of the traded instrument
        /// </summary>
        /// <value>Name or description of the traded instrument</value>
        [DataMember(Name = "instrumentName", IsRequired = true, EmitDefaultValue = false)]
        public string InstrumentName { get; set; }

        /// <summary>
        /// Shares that have been ordered and not executed
        /// </summary>
        /// <value>Shares that have been ordered and not executed</value>
        [DataMember(Name = "transactionLeaves", EmitDefaultValue = true)]
        public double? TransactionLeaves { get; set; }

        /// <summary>
        /// Quantity of the instrument traded
        /// </summary>
        /// <value>Quantity of the instrument traded</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// Cash value of the transaction
        /// </summary>
        /// <value>Cash value of the transaction</value>
        [DataMember(Name = "gross", IsRequired = true, EmitDefaultValue = false)]
        public double Gross { get; set; }

        /// <summary>
        /// The transaction price
        /// </summary>
        /// <value>The transaction price</value>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public double? Price { get; set; }

        /// <summary>
        /// The iso currency code of cash valued fields, Net Amount and Gross Amount
        /// </summary>
        /// <value>The iso currency code of cash valued fields, Net Amount and Gross Amount</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF
        /// </summary>
        /// <value>Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF</value>
        [DataMember(Name = "addedDateTime", EmitDefaultValue = true)]
        public string AddedDateTime { get; set; }

        /// <summary>
        /// Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF
        /// </summary>
        /// <value>Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF</value>
        [DataMember(Name = "updatedDateTime", EmitDefaultValue = true)]
        public string UpdatedDateTime { get; set; }

        /// <summary>
        /// List of additional fields which can be used for dynamically populating other ofdb fields
        /// </summary>
        /// <value>List of additional fields which can be used for dynamically populating other ofdb fields</value>
        [DataMember(Name = "additionalFields", EmitDefaultValue = true)]
        public List<AdditionalField> AdditionalFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Execution {\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  Net: ").Append(Net).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  SettlementCurrency: ").Append(SettlementCurrency).Append("\n");
            sb.Append("  SettlementValue: ").Append(SettlementValue).Append("\n");
            sb.Append("  ForeignExchangeRate: ").Append(ForeignExchangeRate).Append("\n");
            sb.Append("  Broker: ").Append(Broker).Append("\n");
            sb.Append("  Custodian: ").Append(Custodian).Append("\n");
            sb.Append("  AccruedInterest: ").Append(AccruedInterest).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  ClearingCommission: ").Append(ClearingCommission).Append("\n");
            sb.Append("  LocalTax: ").Append(LocalTax).Append("\n");
            sb.Append("  LocalFee: ").Append(LocalFee).Append("\n");
            sb.Append("  BrokerFee: ").Append(BrokerFee).Append("\n");
            sb.Append("  ExchangeFee: ").Append(ExchangeFee).Append("\n");
            sb.Append("  MiscellaneousFee: ").Append(MiscellaneousFee).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  InstrumentName: ").Append(InstrumentName).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  TransactionLeaves: ").Append(TransactionLeaves).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ComplianceStatus: ").Append(ComplianceStatus).Append("\n");
            sb.Append("  AddedDateTime: ").Append(AddedDateTime).Append("\n");
            sb.Append("  UpdatedDateTime: ").Append(UpdatedDateTime).Append("\n");
            sb.Append("  AdditionalFields: ").Append(AdditionalFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Execution);
        }

        /// <summary>
        /// Returns true if Execution instances are equal
        /// </summary>
        /// <param name="input">Instance of Execution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Execution input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TradeDate == input.TradeDate ||
                    (this.TradeDate != null &&
                    this.TradeDate.Equals(input.TradeDate))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    this.TransactionStatus.Equals(input.TransactionStatus)
                ) && 
                (
                    this.Net == input.Net ||
                    this.Net.Equals(input.Net)
                ) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.SettlementCurrency == input.SettlementCurrency ||
                    (this.SettlementCurrency != null &&
                    this.SettlementCurrency.Equals(input.SettlementCurrency))
                ) && 
                (
                    this.SettlementValue == input.SettlementValue ||
                    this.SettlementValue.Equals(input.SettlementValue)
                ) && 
                (
                    this.ForeignExchangeRate == input.ForeignExchangeRate ||
                    (this.ForeignExchangeRate != null &&
                    this.ForeignExchangeRate.Equals(input.ForeignExchangeRate))
                ) && 
                (
                    this.Broker == input.Broker ||
                    (this.Broker != null &&
                    this.Broker.Equals(input.Broker))
                ) && 
                (
                    this.Custodian == input.Custodian ||
                    (this.Custodian != null &&
                    this.Custodian.Equals(input.Custodian))
                ) && 
                (
                    this.AccruedInterest == input.AccruedInterest ||
                    (this.AccruedInterest != null &&
                    this.AccruedInterest.Equals(input.AccruedInterest))
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                ) && 
                (
                    this.ClearingCommission == input.ClearingCommission ||
                    (this.ClearingCommission != null &&
                    this.ClearingCommission.Equals(input.ClearingCommission))
                ) && 
                (
                    this.LocalTax == input.LocalTax ||
                    (this.LocalTax != null &&
                    this.LocalTax.Equals(input.LocalTax))
                ) && 
                (
                    this.LocalFee == input.LocalFee ||
                    (this.LocalFee != null &&
                    this.LocalFee.Equals(input.LocalFee))
                ) && 
                (
                    this.BrokerFee == input.BrokerFee ||
                    (this.BrokerFee != null &&
                    this.BrokerFee.Equals(input.BrokerFee))
                ) && 
                (
                    this.ExchangeFee == input.ExchangeFee ||
                    (this.ExchangeFee != null &&
                    this.ExchangeFee.Equals(input.ExchangeFee))
                ) && 
                (
                    this.MiscellaneousFee == input.MiscellaneousFee ||
                    (this.MiscellaneousFee != null &&
                    this.MiscellaneousFee.Equals(input.MiscellaneousFee))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.InstrumentName == input.InstrumentName ||
                    (this.InstrumentName != null &&
                    this.InstrumentName.Equals(input.InstrumentName))
                ) && 
                (
                    this.Side == input.Side ||
                    this.Side.Equals(input.Side)
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    this.UnitType.Equals(input.UnitType)
                ) && 
                (
                    this.TransactionLeaves == input.TransactionLeaves ||
                    (this.TransactionLeaves != null &&
                    this.TransactionLeaves.Equals(input.TransactionLeaves))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Gross == input.Gross ||
                    this.Gross.Equals(input.Gross)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ComplianceStatus == input.ComplianceStatus ||
                    this.ComplianceStatus.Equals(input.ComplianceStatus)
                ) && 
                (
                    this.AddedDateTime == input.AddedDateTime ||
                    (this.AddedDateTime != null &&
                    this.AddedDateTime.Equals(input.AddedDateTime))
                ) && 
                (
                    this.UpdatedDateTime == input.UpdatedDateTime ||
                    (this.UpdatedDateTime != null &&
                    this.UpdatedDateTime.Equals(input.UpdatedDateTime))
                ) && 
                (
                    this.AdditionalFields == input.AdditionalFields ||
                    this.AdditionalFields != null &&
                    input.AdditionalFields != null &&
                    this.AdditionalFields.SequenceEqual(input.AdditionalFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TradeDate != null)
                {
                    hashCode = (hashCode * 59) + this.TradeDate.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.Net.GetHashCode();
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                if (this.SettlementCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SettlementValue.GetHashCode();
                if (this.ForeignExchangeRate != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignExchangeRate.GetHashCode();
                }
                if (this.Broker != null)
                {
                    hashCode = (hashCode * 59) + this.Broker.GetHashCode();
                }
                if (this.Custodian != null)
                {
                    hashCode = (hashCode * 59) + this.Custodian.GetHashCode();
                }
                if (this.AccruedInterest != null)
                {
                    hashCode = (hashCode * 59) + this.AccruedInterest.GetHashCode();
                }
                if (this.Commission != null)
                {
                    hashCode = (hashCode * 59) + this.Commission.GetHashCode();
                }
                if (this.ClearingCommission != null)
                {
                    hashCode = (hashCode * 59) + this.ClearingCommission.GetHashCode();
                }
                if (this.LocalTax != null)
                {
                    hashCode = (hashCode * 59) + this.LocalTax.GetHashCode();
                }
                if (this.LocalFee != null)
                {
                    hashCode = (hashCode * 59) + this.LocalFee.GetHashCode();
                }
                if (this.BrokerFee != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerFee.GetHashCode();
                }
                if (this.ExchangeFee != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeFee.GetHashCode();
                }
                if (this.MiscellaneousFee != null)
                {
                    hashCode = (hashCode * 59) + this.MiscellaneousFee.GetHashCode();
                }
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.InstrumentName != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Side.GetHashCode();
                hashCode = (hashCode * 59) + this.UnitType.GetHashCode();
                if (this.TransactionLeaves != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionLeaves.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.Gross.GetHashCode();
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ComplianceStatus.GetHashCode();
                if (this.AddedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.AddedDateTime.GetHashCode();
                }
                if (this.UpdatedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDateTime.GetHashCode();
                }
                if (this.AdditionalFields != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TransactionId (string) maxLength
            if (this.TransactionId != null && this.TransactionId.Length > 252)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 252.", new [] { "TransactionId" });
            }

            // TransactionId (string) minLength
            if (this.TransactionId != null && this.TransactionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 0.", new [] { "TransactionId" });
            }

            // ParentId (string) maxLength
            if (this.ParentId != null && this.ParentId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, length must be less than 32.", new [] { "ParentId" });
            }

            // ParentId (string) minLength
            if (this.ParentId != null && this.ParentId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, length must be greater than 0.", new [] { "ParentId" });
            }

            // OrderId (string) maxLength
            if (this.OrderId != null && this.OrderId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be less than 32.", new [] { "OrderId" });
            }

            // OrderId (string) minLength
            if (this.OrderId != null && this.OrderId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be greater than 0.", new [] { "OrderId" });
            }

            // SettlementCurrency (string) maxLength
            if (this.SettlementCurrency != null && this.SettlementCurrency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementCurrency, length must be less than 3.", new [] { "SettlementCurrency" });
            }

            // SettlementCurrency (string) minLength
            if (this.SettlementCurrency != null && this.SettlementCurrency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementCurrency, length must be greater than 0.", new [] { "SettlementCurrency" });
            }

            // Broker (string) maxLength
            if (this.Broker != null && this.Broker.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Broker, length must be less than 32.", new [] { "Broker" });
            }

            // Broker (string) minLength
            if (this.Broker != null && this.Broker.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Broker, length must be greater than 0.", new [] { "Broker" });
            }

            // Custodian (string) maxLength
            if (this.Custodian != null && this.Custodian.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Custodian, length must be less than 32.", new [] { "Custodian" });
            }

            // Custodian (string) minLength
            if (this.Custodian != null && this.Custodian.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Custodian, length must be greater than 0.", new [] { "Custodian" });
            }

            // Symbol (string) maxLength
            if (this.Symbol != null && this.Symbol.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Symbol, length must be less than 32.", new [] { "Symbol" });
            }

            // Symbol (string) minLength
            if (this.Symbol != null && this.Symbol.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Symbol, length must be greater than 0.", new [] { "Symbol" });
            }

            // InstrumentName (string) maxLength
            if (this.InstrumentName != null && this.InstrumentName.Length > 252)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentName, length must be less than 252.", new [] { "InstrumentName" });
            }

            // InstrumentName (string) minLength
            if (this.InstrumentName != null && this.InstrumentName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentName, length must be greater than 0.", new [] { "InstrumentName" });
            }

            // Currency (string) maxLength
            if (this.Currency != null && this.Currency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be less than 3.", new [] { "Currency" });
            }

            // Currency (string) minLength
            if (this.Currency != null && this.Currency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be greater than 0.", new [] { "Currency" });
            }

            yield break;
        }
    }

}
