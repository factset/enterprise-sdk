/*
 * FIAB API
 *
 * Allow clients to fetch FIAB Analytics through APIs.
 *
 * The version of the OpenAPI document: 1.3.7
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FixedIncomeAnalyticsBatcher.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FixedIncomeAnalyticsBatcher.Model
{
    /// <summary>
    /// FIABCalculationStatusSummary
    /// </summary>
    [DataContract(Name = "FIABCalculationStatusSummary")]
    public partial class FIABCalculationStatusSummary : IEquatable<FIABCalculationStatusSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FIABCalculationStatusSummary" /> class.
        /// </summary>
        /// <param name="requesttime">Request time of calculation..</param>
        /// <param name="lastpolltime">Last poll time of calculation..</param>
        public FIABCalculationStatusSummary(DateTime requesttime = default(DateTime), DateTime lastpolltime = default(DateTime))
        {
            this.Requesttime = requesttime;
            this.Lastpolltime = lastpolltime;
        }

        /// <summary>
        /// Request time of calculation.
        /// </summary>
        /// <value>Request time of calculation.</value>
        [DataMember(Name = "requesttime", EmitDefaultValue = false)]
        public DateTime Requesttime { get; set; }

        /// <summary>
        /// Last poll time of calculation.
        /// </summary>
        /// <value>Last poll time of calculation.</value>
        [DataMember(Name = "lastpolltime", EmitDefaultValue = false)]
        public DateTime Lastpolltime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FIABCalculationStatusSummary {\n");
            sb.Append("  Requesttime: ").Append(Requesttime).Append("\n");
            sb.Append("  Lastpolltime: ").Append(Lastpolltime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FIABCalculationStatusSummary);
        }

        /// <summary>
        /// Returns true if FIABCalculationStatusSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of FIABCalculationStatusSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FIABCalculationStatusSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Requesttime == input.Requesttime ||
                    (this.Requesttime != null &&
                    this.Requesttime.Equals(input.Requesttime))
                ) && 
                (
                    this.Lastpolltime == input.Lastpolltime ||
                    (this.Lastpolltime != null &&
                    this.Lastpolltime.Equals(input.Lastpolltime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Requesttime != null)
                {
                    hashCode = (hashCode * 59) + this.Requesttime.GetHashCode();
                }
                if (this.Lastpolltime != null)
                {
                    hashCode = (hashCode * 59) + this.Lastpolltime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
