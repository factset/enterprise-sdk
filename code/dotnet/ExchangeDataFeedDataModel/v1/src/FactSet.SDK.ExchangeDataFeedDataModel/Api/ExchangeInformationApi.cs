/*
 * FactSet Real-Time Data Model API
 *
 * FactSetâ€™s Real-time market data products provide access to consolidated real-time and delayed global exchange data. Proprietary technology normalizes over 250 global venues, 18+ million instruments, and 150+ data fields. Asset types integrated include equities, futures, options, warrants, fixed income, mutual funds, ETFs, indices, commodities, and FX rates. Innovative technology ensures reliability and provides scalability that allows clients to make requests based on a symbol list or an exchange. Reduce development time by powering proprietary and third-party applications with exchange data from a unified data model. <p>The Real-time Data Model API provides mappings for enumerations used in our Real-Time DataFeed products and should be used in conjunction with the DataFeed Data Model documentation available for each product. <p>The initial version of this API is limited to include mapping tables for the product codes and exchanges only.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ExchangeDataFeedDataModel.Client;
using FactSet.SDK.ExchangeDataFeedDataModel.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ExchangeDataFeedDataModel.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeInformationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Request metadata for covered Real-Time market data venues at FactSet.
        /// </summary>
        /// <remarks>
        /// Returns a list of exchanges with details like exchange code, name, market open and close times, etc.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Allows filtering of specific product codes in the response. (optional)</param>
        /// <param name="exchangeCode">Allows filtering of specific exchange codes in the response. (optional)</param>
        /// <param name="isoCode">Allows filtering on specific ISO code in the response. (optional)</param>
        /// <param name="format">The format of the output file. (optional)</param>
        /// <returns>ExchangesResponse</returns>
        ExchangesResponse GetExchanges(List<int> productCode = default(List<int>), List<int> exchangeCode = default(List<int>), List<string> isoCode = default(List<string>), string format = default(string));

        /// <summary>
        /// Request metadata for covered Real-Time market data venues at FactSet.
        /// </summary>
        /// <remarks>
        /// Returns a list of exchanges with details like exchange code, name, market open and close times, etc.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Allows filtering of specific product codes in the response. (optional)</param>
        /// <param name="exchangeCode">Allows filtering of specific exchange codes in the response. (optional)</param>
        /// <param name="isoCode">Allows filtering on specific ISO code in the response. (optional)</param>
        /// <param name="format">The format of the output file. (optional)</param>
        /// <returns>ApiResponse of ExchangesResponse</returns>
        ApiResponse<ExchangesResponse> GetExchangesWithHttpInfo(List<int> productCode = default(List<int>), List<int> exchangeCode = default(List<int>), List<string> isoCode = default(List<string>), string format = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeInformationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Request metadata for covered Real-Time market data venues at FactSet.
        /// </summary>
        /// <remarks>
        /// Returns a list of exchanges with details like exchange code, name, market open and close times, etc.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Allows filtering of specific product codes in the response. (optional)</param>
        /// <param name="exchangeCode">Allows filtering of specific exchange codes in the response. (optional)</param>
        /// <param name="isoCode">Allows filtering on specific ISO code in the response. (optional)</param>
        /// <param name="format">The format of the output file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExchangesResponse</returns>
        System.Threading.Tasks.Task<ExchangesResponse> GetExchangesAsync(List<int> productCode = default(List<int>), List<int> exchangeCode = default(List<int>), List<string> isoCode = default(List<string>), string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request metadata for covered Real-Time market data venues at FactSet.
        /// </summary>
        /// <remarks>
        /// Returns a list of exchanges with details like exchange code, name, market open and close times, etc.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Allows filtering of specific product codes in the response. (optional)</param>
        /// <param name="exchangeCode">Allows filtering of specific exchange codes in the response. (optional)</param>
        /// <param name="isoCode">Allows filtering on specific ISO code in the response. (optional)</param>
        /// <param name="format">The format of the output file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExchangesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExchangesResponse>> GetExchangesWithHttpInfoAsync(List<int> productCode = default(List<int>), List<int> exchangeCode = default(List<int>), List<string> isoCode = default(List<string>), string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeInformationApi : IExchangeInformationApiSync, IExchangeInformationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangeInformationApi : IExchangeInformationApi
    {
        private FactSet.SDK.ExchangeDataFeedDataModel.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetExchangesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ExchangesResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)402, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeInformationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeInformationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeInformationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeInformationApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ExchangeDataFeedDataModel.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ExchangeDataFeedDataModel.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ExchangeDataFeedDataModel.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ExchangeDataFeedDataModel.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeInformationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExchangeInformationApi(FactSet.SDK.ExchangeDataFeedDataModel.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ExchangeDataFeedDataModel.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ExchangeDataFeedDataModel.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ExchangeDataFeedDataModel.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeInformationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExchangeInformationApi(FactSet.SDK.ExchangeDataFeedDataModel.Client.ISynchronousClient client, FactSet.SDK.ExchangeDataFeedDataModel.Client.IAsynchronousClient asyncClient, FactSet.SDK.ExchangeDataFeedDataModel.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ExchangeDataFeedDataModel.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ExchangeDataFeedDataModel.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ExchangeDataFeedDataModel.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ExchangeDataFeedDataModel.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ExchangeDataFeedDataModel.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Request metadata for covered Real-Time market data venues at FactSet. Returns a list of exchanges with details like exchange code, name, market open and close times, etc.
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Allows filtering of specific product codes in the response. (optional)</param>
        /// <param name="exchangeCode">Allows filtering of specific exchange codes in the response. (optional)</param>
        /// <param name="isoCode">Allows filtering on specific ISO code in the response. (optional)</param>
        /// <param name="format">The format of the output file. (optional)</param>
        /// <returns>ExchangesResponse</returns>
        public ExchangesResponse GetExchanges(List<int> productCode = default(List<int>), List<int> exchangeCode = default(List<int>), List<string> isoCode = default(List<string>), string format = default(string))
        {
            var localVarResponse = GetExchangesWithHttpInfo(productCode, exchangeCode, isoCode, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request metadata for covered Real-Time market data venues at FactSet. Returns a list of exchanges with details like exchange code, name, market open and close times, etc.
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Allows filtering of specific product codes in the response. (optional)</param>
        /// <param name="exchangeCode">Allows filtering of specific exchange codes in the response. (optional)</param>
        /// <param name="isoCode">Allows filtering on specific ISO code in the response. (optional)</param>
        /// <param name="format">The format of the output file. (optional)</param>
        /// <returns>ApiResponse of ExchangesResponse</returns>
        public ApiResponse<ExchangesResponse> GetExchangesWithHttpInfo(List<int> productCode = default(List<int>), List<int> exchangeCode = default(List<int>), List<string> isoCode = default(List<string>), string format = default(string))
        {
            FactSet.SDK.ExchangeDataFeedDataModel.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ExchangeDataFeedDataModel.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (productCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.ParameterToMultiMap("csv", "product_code", productCode));
            }
            if (exchangeCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.ParameterToMultiMap("csv", "exchange_code", exchangeCode));
            }
            if (isoCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.ParameterToMultiMap("csv", "iso_code", isoCode));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetExchangesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ExchangesResponse>("/exchanges", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchanges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Request metadata for covered Real-Time market data venues at FactSet. Returns a list of exchanges with details like exchange code, name, market open and close times, etc.
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Allows filtering of specific product codes in the response. (optional)</param>
        /// <param name="exchangeCode">Allows filtering of specific exchange codes in the response. (optional)</param>
        /// <param name="isoCode">Allows filtering on specific ISO code in the response. (optional)</param>
        /// <param name="format">The format of the output file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExchangesResponse</returns>
        public async System.Threading.Tasks.Task<ExchangesResponse>GetExchangesAsync(List<int> productCode = default(List<int>), List<int> exchangeCode = default(List<int>), List<string> isoCode = default(List<string>), string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetExchangesWithHttpInfoAsync(productCode, exchangeCode, isoCode, format, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request metadata for covered Real-Time market data venues at FactSet. Returns a list of exchanges with details like exchange code, name, market open and close times, etc.
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedDataModel.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productCode">Allows filtering of specific product codes in the response. (optional)</param>
        /// <param name="exchangeCode">Allows filtering of specific exchange codes in the response. (optional)</param>
        /// <param name="isoCode">Allows filtering on specific ISO code in the response. (optional)</param>
        /// <param name="format">The format of the output file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExchangesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ExchangesResponse>> GetExchangesWithHttpInfoAsync(List<int> productCode = default(List<int>), List<int> exchangeCode = default(List<int>), List<string> isoCode = default(List<string>), string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ExchangeDataFeedDataModel.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ExchangeDataFeedDataModel.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (productCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.ParameterToMultiMap("csv", "product_code", productCode));
            }
            if (exchangeCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.ParameterToMultiMap("csv", "exchange_code", exchangeCode));
            }
            if (isoCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.ParameterToMultiMap("csv", "iso_code", isoCode));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ExchangeDataFeedDataModel.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetExchangesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExchangesResponse>("/exchanges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchanges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
