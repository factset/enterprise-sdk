/*
 * FactSet Real-Time Data Model API
 *
 * FactSetâ€™s Real-time market data products provide access to consolidated real-time and delayed global exchange data. Proprietary technology normalizes over 250 global venues, 18+ million instruments, and 150+ data fields. Asset types integrated include equities, futures, options, warrants, fixed income, mutual funds, ETFs, indices, commodities, and FX rates. Innovative technology ensures reliability and provides scalability that allows clients to make requests based on a symbol list or an exchange. Reduce development time by powering proprietary and third-party applications with exchange data from a unified data model. <p>The Real-time Data Model API provides mappings for enumerations used in our Real-Time DataFeed products and should be used in conjunction with the DataFeed Data Model documentation available for each product. <p>The initial version of this API is limited to include mapping tables for the product codes and exchanges only.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ExchangeDataFeedDataModel.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ExchangeDataFeedDataModel.Model
{
    /// <summary>
    /// Object representing a single FactSet product.
    /// </summary>
    [DataContract(Name = "ProductItem")]
    public partial class ProductItem : IEquatable<ProductItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductItem" /> class.
        /// </summary>
        /// <param name="productCode">FactSet product code, a unique identifier for a product..</param>
        /// <param name="description">A descriptive name of the product..</param>
        public ProductItem(int productCode = default(int), string description = default(string))
        {
            this.ProductCode = productCode;
            this.Description = description;
        }

        /// <summary>
        /// FactSet product code, a unique identifier for a product.
        /// </summary>
        /// <value>FactSet product code, a unique identifier for a product.</value>
        [DataMember(Name = "productCode", EmitDefaultValue = false)]
        public int ProductCode { get; set; }

        /// <summary>
        /// A descriptive name of the product.
        /// </summary>
        /// <value>A descriptive name of the product.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductItem {\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductItem);
        }

        /// <summary>
        /// Returns true if ProductItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProductCode == input.ProductCode ||
                    this.ProductCode.Equals(input.ProductCode)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ProductCode (int) maximum
            if (this.ProductCode > (int)20000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, must be a value less than or equal to 20000.", new [] { "ProductCode" });
            }

            // ProductCode (int) minimum
            if (this.ProductCode < (int)9000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, must be a value greater than or equal to 9000.", new [] { "ProductCode" });
            }

            yield break;
        }
    }

}
