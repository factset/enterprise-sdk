/*
 * FactSet People API
 *
 * The FactSet People API exposes FactSet data for individuals and their jobs.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetPeople.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetPeople.Model
{
    /// <summary>
    /// List of executives for the specified company identifier.
    /// </summary>
    [DataContract(Name = "companyPeople")]
    public partial class CompanyPeople : IEquatable<CompanyPeople>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyPeople" /> class.
        /// </summary>
        /// <param name="fsymId">FactSet Identifier for the company requested..</param>
        /// <param name="email">Email of the person.</param>
        /// <param name="name">FactSet Name of the person.</param>
        /// <param name="jobFunction1">Job Function1.</param>
        /// <param name="jobFunction2">Job Function2.</param>
        /// <param name="jobFunction3">Job Function3.</param>
        /// <param name="jobFunction4">Job Function4.</param>
        /// <param name="mainPhone">Main Phone Numbers of the executives..</param>
        /// <param name="personId">FactSet Entity Identifier for the Person..</param>
        /// <param name="phone">Phone number of the executives..</param>
        /// <param name="requestId">Original identifier used for the request..</param>
        /// <param name="title">Executive titles for a specified company..</param>
        public CompanyPeople(string fsymId = default(string), string email = default(string), string name = default(string), string jobFunction1 = default(string), string jobFunction2 = default(string), string jobFunction3 = default(string), string jobFunction4 = default(string), string mainPhone = default(string), string personId = default(string), string phone = default(string), string requestId = default(string), string title = default(string))
        {
            this.FsymId = fsymId;
            this.Email = email;
            this.Name = name;
            this.JobFunction1 = jobFunction1;
            this.JobFunction2 = jobFunction2;
            this.JobFunction3 = jobFunction3;
            this.JobFunction4 = jobFunction4;
            this.MainPhone = mainPhone;
            this.PersonId = personId;
            this.Phone = phone;
            this.RequestId = requestId;
            this.Title = title;
        }

        /// <summary>
        /// FactSet Identifier for the company requested.
        /// </summary>
        /// <value>FactSet Identifier for the company requested.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Email of the person
        /// </summary>
        /// <value>Email of the person</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// FactSet Name of the person
        /// </summary>
        /// <value>FactSet Name of the person</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Job Function1
        /// </summary>
        /// <value>Job Function1</value>
        [DataMember(Name = "jobFunction1", EmitDefaultValue = true)]
        public string JobFunction1 { get; set; }

        /// <summary>
        /// Job Function2
        /// </summary>
        /// <value>Job Function2</value>
        [DataMember(Name = "jobFunction2", EmitDefaultValue = true)]
        public string JobFunction2 { get; set; }

        /// <summary>
        /// Job Function3
        /// </summary>
        /// <value>Job Function3</value>
        [DataMember(Name = "jobFunction3", EmitDefaultValue = true)]
        public string JobFunction3 { get; set; }

        /// <summary>
        /// Job Function4
        /// </summary>
        /// <value>Job Function4</value>
        [DataMember(Name = "jobFunction4", EmitDefaultValue = true)]
        public string JobFunction4 { get; set; }

        /// <summary>
        /// Main Phone Numbers of the executives.
        /// </summary>
        /// <value>Main Phone Numbers of the executives.</value>
        [DataMember(Name = "mainPhone", EmitDefaultValue = true)]
        public string MainPhone { get; set; }

        /// <summary>
        /// FactSet Entity Identifier for the Person.
        /// </summary>
        /// <value>FactSet Entity Identifier for the Person.</value>
        [DataMember(Name = "personId", EmitDefaultValue = true)]
        public string PersonId { get; set; }

        /// <summary>
        /// Phone number of the executives.
        /// </summary>
        /// <value>Phone number of the executives.</value>
        [DataMember(Name = "phone", EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// Original identifier used for the request.
        /// </summary>
        /// <value>Original identifier used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Executive titles for a specified company.
        /// </summary>
        /// <value>Executive titles for a specified company.</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyPeople {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  JobFunction1: ").Append(JobFunction1).Append("\n");
            sb.Append("  JobFunction2: ").Append(JobFunction2).Append("\n");
            sb.Append("  JobFunction3: ").Append(JobFunction3).Append("\n");
            sb.Append("  JobFunction4: ").Append(JobFunction4).Append("\n");
            sb.Append("  MainPhone: ").Append(MainPhone).Append("\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyPeople);
        }

        /// <summary>
        /// Returns true if CompanyPeople instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyPeople to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyPeople input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.JobFunction1 == input.JobFunction1 ||
                    (this.JobFunction1 != null &&
                    this.JobFunction1.Equals(input.JobFunction1))
                ) && 
                (
                    this.JobFunction2 == input.JobFunction2 ||
                    (this.JobFunction2 != null &&
                    this.JobFunction2.Equals(input.JobFunction2))
                ) && 
                (
                    this.JobFunction3 == input.JobFunction3 ||
                    (this.JobFunction3 != null &&
                    this.JobFunction3.Equals(input.JobFunction3))
                ) && 
                (
                    this.JobFunction4 == input.JobFunction4 ||
                    (this.JobFunction4 != null &&
                    this.JobFunction4.Equals(input.JobFunction4))
                ) && 
                (
                    this.MainPhone == input.MainPhone ||
                    (this.MainPhone != null &&
                    this.MainPhone.Equals(input.MainPhone))
                ) && 
                (
                    this.PersonId == input.PersonId ||
                    (this.PersonId != null &&
                    this.PersonId.Equals(input.PersonId))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.JobFunction1 != null)
                {
                    hashCode = (hashCode * 59) + this.JobFunction1.GetHashCode();
                }
                if (this.JobFunction2 != null)
                {
                    hashCode = (hashCode * 59) + this.JobFunction2.GetHashCode();
                }
                if (this.JobFunction3 != null)
                {
                    hashCode = (hashCode * 59) + this.JobFunction3.GetHashCode();
                }
                if (this.JobFunction4 != null)
                {
                    hashCode = (hashCode * 59) + this.JobFunction4.GetHashCode();
                }
                if (this.MainPhone != null)
                {
                    hashCode = (hashCode * 59) + this.MainPhone.GetHashCode();
                }
                if (this.PersonId != null)
                {
                    hashCode = (hashCode * 59) + this.PersonId.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
