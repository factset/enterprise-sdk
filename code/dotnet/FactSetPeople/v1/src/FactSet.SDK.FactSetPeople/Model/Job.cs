/*
 * FactSet People API
 *
 * The FactSet People API exposes FactSet data for individuals and their jobs.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetPeople.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetPeople.Model
{
    /// <summary>
    /// Basic information about a person&#39;s &#x60;Job&#x60;.
    /// </summary>
    [DataContract(Name = "job")]
    public partial class Job : IEquatable<Job>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Job" /> class.
        /// </summary>
        /// <param name="companyCity">City the job is located in..</param>
        /// <param name="companyId">FactSet Identifier for the company..</param>
        /// <param name="companyName">Name of the company..</param>
        /// <param name="jobEndDate">Ending date for the Job..</param>
        /// <param name="jobFunctionCode">Job function code..</param>
        /// <param name="jobFunctionName">Description of the job..</param>
        /// <param name="jobStartDate">Starting date for the Job..</param>
        /// <param name="jobTitle">Job Title.</param>
        /// <param name="personId">FactSet Entity Identifier for the Person..</param>
        /// <param name="requestId">Original identifier used for the request..</param>
        public Job(string companyCity = default(string), string companyId = default(string), string companyName = default(string), DateTime? jobEndDate = default(DateTime?), string jobFunctionCode = default(string), string jobFunctionName = default(string), DateTime? jobStartDate = default(DateTime?), string jobTitle = default(string), string personId = default(string), string requestId = default(string))
        {
            this.CompanyCity = companyCity;
            this.CompanyId = companyId;
            this.CompanyName = companyName;
            this.JobEndDate = jobEndDate;
            this.JobFunctionCode = jobFunctionCode;
            this.JobFunctionName = jobFunctionName;
            this.JobStartDate = jobStartDate;
            this.JobTitle = jobTitle;
            this.PersonId = personId;
            this.RequestId = requestId;
        }

        /// <summary>
        /// City the job is located in.
        /// </summary>
        /// <value>City the job is located in.</value>
        [DataMember(Name = "companyCity", EmitDefaultValue = true)]
        public string CompanyCity { get; set; }

        /// <summary>
        /// FactSet Identifier for the company.
        /// </summary>
        /// <value>FactSet Identifier for the company.</value>
        [DataMember(Name = "companyId", EmitDefaultValue = true)]
        public string CompanyId { get; set; }

        /// <summary>
        /// Name of the company.
        /// </summary>
        /// <value>Name of the company.</value>
        [DataMember(Name = "companyName", EmitDefaultValue = true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Ending date for the Job.
        /// </summary>
        /// <value>Ending date for the Job.</value>
        [DataMember(Name = "jobEndDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? JobEndDate { get; set; }

        /// <summary>
        /// Job function code.
        /// </summary>
        /// <value>Job function code.</value>
        [DataMember(Name = "jobFunctionCode", EmitDefaultValue = true)]
        public string JobFunctionCode { get; set; }

        /// <summary>
        /// Description of the job.
        /// </summary>
        /// <value>Description of the job.</value>
        [DataMember(Name = "jobFunctionName", EmitDefaultValue = true)]
        public string JobFunctionName { get; set; }

        /// <summary>
        /// Starting date for the Job.
        /// </summary>
        /// <value>Starting date for the Job.</value>
        [DataMember(Name = "jobStartDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? JobStartDate { get; set; }

        /// <summary>
        /// Job Title
        /// </summary>
        /// <value>Job Title</value>
        [DataMember(Name = "jobTitle", EmitDefaultValue = true)]
        public string JobTitle { get; set; }

        /// <summary>
        /// FactSet Entity Identifier for the Person.
        /// </summary>
        /// <value>FactSet Entity Identifier for the Person.</value>
        [DataMember(Name = "personId", EmitDefaultValue = true)]
        public string PersonId { get; set; }

        /// <summary>
        /// Original identifier used for the request.
        /// </summary>
        /// <value>Original identifier used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Job {\n");
            sb.Append("  CompanyCity: ").Append(CompanyCity).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  JobEndDate: ").Append(JobEndDate).Append("\n");
            sb.Append("  JobFunctionCode: ").Append(JobFunctionCode).Append("\n");
            sb.Append("  JobFunctionName: ").Append(JobFunctionName).Append("\n");
            sb.Append("  JobStartDate: ").Append(JobStartDate).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Job);
        }

        /// <summary>
        /// Returns true if Job instances are equal
        /// </summary>
        /// <param name="input">Instance of Job to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Job input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyCity == input.CompanyCity ||
                    (this.CompanyCity != null &&
                    this.CompanyCity.Equals(input.CompanyCity))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.JobEndDate == input.JobEndDate ||
                    (this.JobEndDate != null &&
                    this.JobEndDate.Equals(input.JobEndDate))
                ) && 
                (
                    this.JobFunctionCode == input.JobFunctionCode ||
                    (this.JobFunctionCode != null &&
                    this.JobFunctionCode.Equals(input.JobFunctionCode))
                ) && 
                (
                    this.JobFunctionName == input.JobFunctionName ||
                    (this.JobFunctionName != null &&
                    this.JobFunctionName.Equals(input.JobFunctionName))
                ) && 
                (
                    this.JobStartDate == input.JobStartDate ||
                    (this.JobStartDate != null &&
                    this.JobStartDate.Equals(input.JobStartDate))
                ) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && 
                (
                    this.PersonId == input.PersonId ||
                    (this.PersonId != null &&
                    this.PersonId.Equals(input.PersonId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyCity != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyCity.GetHashCode();
                }
                if (this.CompanyId != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.JobEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.JobEndDate.GetHashCode();
                }
                if (this.JobFunctionCode != null)
                {
                    hashCode = (hashCode * 59) + this.JobFunctionCode.GetHashCode();
                }
                if (this.JobFunctionName != null)
                {
                    hashCode = (hashCode * 59) + this.JobFunctionName.GetHashCode();
                }
                if (this.JobStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.JobStartDate.GetHashCode();
                }
                if (this.JobTitle != null)
                {
                    hashCode = (hashCode * 59) + this.JobTitle.GetHashCode();
                }
                if (this.PersonId != null)
                {
                    hashCode = (hashCode * 59) + this.PersonId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
