/*
 * FactSet People API
 *
 * The FactSet People API exposes FactSet data for individuals and their jobs.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetPeople.Client;
using FactSet.SDK.FactSetPeople.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetPeople.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the compensation details of the people for the specified company identifier
        /// </summary>
        /// <remarks>
        /// Returns the list of company-level executive compensation data items for the top executives listed in annual filings.The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <returns>CompanyCompensationResponse</returns>
        CompanyCompensationResponse GetCompanyCompensation(List<string> ids);

        /// <summary>
        /// Returns the compensation details of the people for the specified company identifier
        /// </summary>
        /// <remarks>
        /// Returns the list of company-level executive compensation data items for the top executives listed in annual filings.The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <returns>ApiResponse of CompanyCompensationResponse</returns>
        ApiResponse<CompanyCompensationResponse> GetCompanyCompensationWithHttpInfo(List<string> ids);
        /// <summary>
        /// Returns the compensation details for the people for the specified company identifier
        /// </summary>
        /// <remarks>
        /// Returns the list of company-level executive compensation data items for the top executives listed in annual filings for the most recent fiscal year. The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyCompensationRequest"></param>
        /// <returns>CompanyCompensationResponse</returns>
        CompanyCompensationResponse GetCompanyCompensationForList(CompanyCompensationRequest companyCompensationRequest);

        /// <summary>
        /// Returns the compensation details for the people for the specified company identifier
        /// </summary>
        /// <remarks>
        /// Returns the list of company-level executive compensation data items for the top executives listed in annual filings for the most recent fiscal year. The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyCompensationRequest"></param>
        /// <returns>ApiResponse of CompanyCompensationResponse</returns>
        ApiResponse<CompanyCompensationResponse> GetCompanyCompensationForListWithHttpInfo(CompanyCompensationRequest companyCompensationRequest);
        /// <summary>
        /// Returns the list of people for the specified company identifiers
        /// </summary>
        /// <remarks>
        /// Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the &#x60;/profiles&#x60; endpoint to learn more about the given person. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="function">Controls the types of people returned based on high-level job functions. Filter by -    |function|description|   |- --|- --|   |PEOPLE|Retrieve **ALL** Executives of a requested company|   |OFFICER|Retrieve only the Officers of a requested company|   |DIRECTOR|Retrieve only the Directors of a requested company|  (optional, default to PEOPLE)</param>
        /// <returns>CompanyPeopleResponse</returns>
        CompanyPeopleResponse GetCompanyPeople(List<string> ids, string function = default(string));

        /// <summary>
        /// Returns the list of people for the specified company identifiers
        /// </summary>
        /// <remarks>
        /// Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the &#x60;/profiles&#x60; endpoint to learn more about the given person. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="function">Controls the types of people returned based on high-level job functions. Filter by -    |function|description|   |- --|- --|   |PEOPLE|Retrieve **ALL** Executives of a requested company|   |OFFICER|Retrieve only the Officers of a requested company|   |DIRECTOR|Retrieve only the Directors of a requested company|  (optional, default to PEOPLE)</param>
        /// <returns>ApiResponse of CompanyPeopleResponse</returns>
        ApiResponse<CompanyPeopleResponse> GetCompanyPeopleWithHttpInfo(List<string> ids, string function = default(string));
        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers
        /// </summary>
        /// <remarks>
        /// Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the /profiles endpoint to learn more about the given person. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPeopleRequest"></param>
        /// <returns>CompanyPeopleResponse</returns>
        CompanyPeopleResponse GetCompanyPeopleForList(CompanyPeopleRequest companyPeopleRequest);

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers
        /// </summary>
        /// <remarks>
        /// Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the /profiles endpoint to learn more about the given person. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPeopleRequest"></param>
        /// <returns>ApiResponse of CompanyPeopleResponse</returns>
        ApiResponse<CompanyPeopleResponse> GetCompanyPeopleForListWithHttpInfo(CompanyPeopleRequest companyPeopleRequest);
        /// <summary>
        /// Returns the list of people for the specified company identifiers and position
        /// </summary>
        /// <remarks>
        /// Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="position">Controls the position details returned for the requested company. By default, the service returns the CEO name, title, and ID for the requested company ids.   |position|description|   |- --|- --|   |CHAIR|Chairman|   |CEO|Chief Executive Officer|   |PRES|President|   |COO|Chief Operating Officer|   |CFO|Chief Financial Officer|   |CTO|Chief Technology Officer|   |CIO|Chief Investment Officer|   |FOU|Founder(s)|   |CMP|Compliance Officer|   |ADM|Admin|   |IND|Independent Director|   |BRD|Directors/Board Members|   |IR|Investor Relations|   |LEG|Legal Counsel|   |TREAS|Treasurer|   |MKT|Sales and Marketing Managers|   |HR|Human Resources|  (optional, default to CEO)</param>
        /// <returns>CompanyPositionsResponse</returns>
        CompanyPositionsResponse GetCompanyPositions(List<string> ids, string position = default(string));

        /// <summary>
        /// Returns the list of people for the specified company identifiers and position
        /// </summary>
        /// <remarks>
        /// Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="position">Controls the position details returned for the requested company. By default, the service returns the CEO name, title, and ID for the requested company ids.   |position|description|   |- --|- --|   |CHAIR|Chairman|   |CEO|Chief Executive Officer|   |PRES|President|   |COO|Chief Operating Officer|   |CFO|Chief Financial Officer|   |CTO|Chief Technology Officer|   |CIO|Chief Investment Officer|   |FOU|Founder(s)|   |CMP|Compliance Officer|   |ADM|Admin|   |IND|Independent Director|   |BRD|Directors/Board Members|   |IR|Investor Relations|   |LEG|Legal Counsel|   |TREAS|Treasurer|   |MKT|Sales and Marketing Managers|   |HR|Human Resources|  (optional, default to CEO)</param>
        /// <returns>ApiResponse of CompanyPositionsResponse</returns>
        ApiResponse<CompanyPositionsResponse> GetCompanyPositionsWithHttpInfo(List<string> ids, string position = default(string));
        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers and position
        /// </summary>
        /// <remarks>
        /// Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPositionsRequest"></param>
        /// <returns>CompanyPositionsResponse</returns>
        CompanyPositionsResponse GetCompanyPositionsForList(CompanyPositionsRequest companyPositionsRequest);

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers and position
        /// </summary>
        /// <remarks>
        /// Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPositionsRequest"></param>
        /// <returns>ApiResponse of CompanyPositionsResponse</returns>
        ApiResponse<CompanyPositionsResponse> GetCompanyPositionsForListWithHttpInfo(CompanyPositionsRequest companyPositionsRequest);
        /// <summary>
        /// Returns statistics about top leadership of a company.
        /// </summary>
        /// <remarks>
        /// Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="mbType">Search based on the management and board types. The types include -  |type|description| |- --|- --| |MB|Management &amp; Board| |MGMT|Management| |BRD|Board|  (optional, default to MB)</param>
        /// <returns>CompanyStatsResponse</returns>
        CompanyStatsResponse GetCompanyStats(List<string> ids, string mbType = default(string));

        /// <summary>
        /// Returns statistics about top leadership of a company.
        /// </summary>
        /// <remarks>
        /// Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="mbType">Search based on the management and board types. The types include -  |type|description| |- --|- --| |MB|Management &amp; Board| |MGMT|Management| |BRD|Board|  (optional, default to MB)</param>
        /// <returns>ApiResponse of CompanyStatsResponse</returns>
        ApiResponse<CompanyStatsResponse> GetCompanyStatsWithHttpInfo(List<string> ids, string mbType = default(string));
        /// <summary>
        /// Returns statistics about top leadership of a company.
        /// </summary>
        /// <remarks>
        /// Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyStatsRequest"></param>
        /// <returns>CompanyStatsResponse</returns>
        CompanyStatsResponse GetCompanyStatsForList(CompanyStatsRequest companyStatsRequest);

        /// <summary>
        /// Returns statistics about top leadership of a company.
        /// </summary>
        /// <remarks>
        /// Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyStatsRequest"></param>
        /// <returns>ApiResponse of CompanyStatsResponse</returns>
        ApiResponse<CompanyStatsResponse> GetCompanyStatsForListWithHttpInfo(CompanyStatsRequest companyStatsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the compensation details of the people for the specified company identifier
        /// </summary>
        /// <remarks>
        /// Returns the list of company-level executive compensation data items for the top executives listed in annual filings.The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyCompensationResponse</returns>
        System.Threading.Tasks.Task<CompanyCompensationResponse> GetCompanyCompensationAsync(List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the compensation details of the people for the specified company identifier
        /// </summary>
        /// <remarks>
        /// Returns the list of company-level executive compensation data items for the top executives listed in annual filings.The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyCompensationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyCompensationResponse>> GetCompanyCompensationWithHttpInfoAsync(List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the compensation details for the people for the specified company identifier
        /// </summary>
        /// <remarks>
        /// Returns the list of company-level executive compensation data items for the top executives listed in annual filings for the most recent fiscal year. The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyCompensationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyCompensationResponse</returns>
        System.Threading.Tasks.Task<CompanyCompensationResponse> GetCompanyCompensationForListAsync(CompanyCompensationRequest companyCompensationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the compensation details for the people for the specified company identifier
        /// </summary>
        /// <remarks>
        /// Returns the list of company-level executive compensation data items for the top executives listed in annual filings for the most recent fiscal year. The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyCompensationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyCompensationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyCompensationResponse>> GetCompanyCompensationForListWithHttpInfoAsync(CompanyCompensationRequest companyCompensationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the list of people for the specified company identifiers
        /// </summary>
        /// <remarks>
        /// Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the &#x60;/profiles&#x60; endpoint to learn more about the given person. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="function">Controls the types of people returned based on high-level job functions. Filter by -    |function|description|   |- --|- --|   |PEOPLE|Retrieve **ALL** Executives of a requested company|   |OFFICER|Retrieve only the Officers of a requested company|   |DIRECTOR|Retrieve only the Directors of a requested company|  (optional, default to PEOPLE)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyPeopleResponse</returns>
        System.Threading.Tasks.Task<CompanyPeopleResponse> GetCompanyPeopleAsync(List<string> ids, string function = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the list of people for the specified company identifiers
        /// </summary>
        /// <remarks>
        /// Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the &#x60;/profiles&#x60; endpoint to learn more about the given person. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="function">Controls the types of people returned based on high-level job functions. Filter by -    |function|description|   |- --|- --|   |PEOPLE|Retrieve **ALL** Executives of a requested company|   |OFFICER|Retrieve only the Officers of a requested company|   |DIRECTOR|Retrieve only the Directors of a requested company|  (optional, default to PEOPLE)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyPeopleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyPeopleResponse>> GetCompanyPeopleWithHttpInfoAsync(List<string> ids, string function = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers
        /// </summary>
        /// <remarks>
        /// Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the /profiles endpoint to learn more about the given person. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPeopleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyPeopleResponse</returns>
        System.Threading.Tasks.Task<CompanyPeopleResponse> GetCompanyPeopleForListAsync(CompanyPeopleRequest companyPeopleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers
        /// </summary>
        /// <remarks>
        /// Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the /profiles endpoint to learn more about the given person. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPeopleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyPeopleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyPeopleResponse>> GetCompanyPeopleForListWithHttpInfoAsync(CompanyPeopleRequest companyPeopleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the list of people for the specified company identifiers and position
        /// </summary>
        /// <remarks>
        /// Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="position">Controls the position details returned for the requested company. By default, the service returns the CEO name, title, and ID for the requested company ids.   |position|description|   |- --|- --|   |CHAIR|Chairman|   |CEO|Chief Executive Officer|   |PRES|President|   |COO|Chief Operating Officer|   |CFO|Chief Financial Officer|   |CTO|Chief Technology Officer|   |CIO|Chief Investment Officer|   |FOU|Founder(s)|   |CMP|Compliance Officer|   |ADM|Admin|   |IND|Independent Director|   |BRD|Directors/Board Members|   |IR|Investor Relations|   |LEG|Legal Counsel|   |TREAS|Treasurer|   |MKT|Sales and Marketing Managers|   |HR|Human Resources|  (optional, default to CEO)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyPositionsResponse</returns>
        System.Threading.Tasks.Task<CompanyPositionsResponse> GetCompanyPositionsAsync(List<string> ids, string position = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the list of people for the specified company identifiers and position
        /// </summary>
        /// <remarks>
        /// Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="position">Controls the position details returned for the requested company. By default, the service returns the CEO name, title, and ID for the requested company ids.   |position|description|   |- --|- --|   |CHAIR|Chairman|   |CEO|Chief Executive Officer|   |PRES|President|   |COO|Chief Operating Officer|   |CFO|Chief Financial Officer|   |CTO|Chief Technology Officer|   |CIO|Chief Investment Officer|   |FOU|Founder(s)|   |CMP|Compliance Officer|   |ADM|Admin|   |IND|Independent Director|   |BRD|Directors/Board Members|   |IR|Investor Relations|   |LEG|Legal Counsel|   |TREAS|Treasurer|   |MKT|Sales and Marketing Managers|   |HR|Human Resources|  (optional, default to CEO)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyPositionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyPositionsResponse>> GetCompanyPositionsWithHttpInfoAsync(List<string> ids, string position = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers and position
        /// </summary>
        /// <remarks>
        /// Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPositionsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyPositionsResponse</returns>
        System.Threading.Tasks.Task<CompanyPositionsResponse> GetCompanyPositionsForListAsync(CompanyPositionsRequest companyPositionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers and position
        /// </summary>
        /// <remarks>
        /// Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPositionsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyPositionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyPositionsResponse>> GetCompanyPositionsForListWithHttpInfoAsync(CompanyPositionsRequest companyPositionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns statistics about top leadership of a company.
        /// </summary>
        /// <remarks>
        /// Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="mbType">Search based on the management and board types. The types include -  |type|description| |- --|- --| |MB|Management &amp; Board| |MGMT|Management| |BRD|Board|  (optional, default to MB)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyStatsResponse</returns>
        System.Threading.Tasks.Task<CompanyStatsResponse> GetCompanyStatsAsync(List<string> ids, string mbType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns statistics about top leadership of a company.
        /// </summary>
        /// <remarks>
        /// Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="mbType">Search based on the management and board types. The types include -  |type|description| |- --|- --| |MB|Management &amp; Board| |MGMT|Management| |BRD|Board|  (optional, default to MB)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyStatsResponse>> GetCompanyStatsWithHttpInfoAsync(List<string> ids, string mbType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns statistics about top leadership of a company.
        /// </summary>
        /// <remarks>
        /// Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyStatsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyStatsResponse</returns>
        System.Threading.Tasks.Task<CompanyStatsResponse> GetCompanyStatsForListAsync(CompanyStatsRequest companyStatsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns statistics about top leadership of a company.
        /// </summary>
        /// <remarks>
        /// Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyStatsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyStatsResponse>> GetCompanyStatsForListWithHttpInfoAsync(CompanyStatsRequest companyStatsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanyApi : ICompanyApiSync, ICompanyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompanyApi : ICompanyApi
    {
        private FactSet.SDK.FactSetPeople.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyCompensationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CompanyCompensationResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyCompensationForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CompanyCompensationResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyPeopleResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CompanyPeopleResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyPeopleForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CompanyPeopleResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyPositionsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CompanyPositionsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyPositionsForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CompanyPositionsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyStatsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CompanyStatsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyStatsForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CompanyStatsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompanyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompanyApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetPeople.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetPeople.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetPeople.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetPeople.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetPeople.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetPeople.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompanyApi(FactSet.SDK.FactSetPeople.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetPeople.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetPeople.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetPeople.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetPeople.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetPeople.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CompanyApi(FactSet.SDK.FactSetPeople.Client.ISynchronousClient client, FactSet.SDK.FactSetPeople.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetPeople.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetPeople.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetPeople.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetPeople.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetPeople.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetPeople.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the compensation details of the people for the specified company identifier Returns the list of company-level executive compensation data items for the top executives listed in annual filings.The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <returns>CompanyCompensationResponse</returns>
        public CompanyCompensationResponse GetCompanyCompensation(List<string> ids)
        {
            var localVarResponse = GetCompanyCompensationWithHttpInfo(ids);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the compensation details of the people for the specified company identifier Returns the list of company-level executive compensation data items for the top executives listed in annual filings.The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <returns>ApiResponse of CompanyCompensationResponse</returns>
        public ApiResponse<CompanyCompensationResponse> GetCompanyCompensationWithHttpInfo(List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'ids' when calling CompanyApi->GetCompanyCompensation");
            }

            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyCompensationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CompanyCompensationResponse>("/factset-people/v1/company-compensation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyCompensation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the compensation details of the people for the specified company identifier Returns the list of company-level executive compensation data items for the top executives listed in annual filings.The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyCompensationResponse</returns>
        public async System.Threading.Tasks.Task<CompanyCompensationResponse>GetCompanyCompensationAsync(List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyCompensationWithHttpInfoAsync(ids, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the compensation details of the people for the specified company identifier Returns the list of company-level executive compensation data items for the top executives listed in annual filings.The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyCompensationResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CompanyCompensationResponse>> GetCompanyCompensationWithHttpInfoAsync(List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'ids' when calling CompanyApi->GetCompanyCompensation");
            }


            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyCompensationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompanyCompensationResponse>("/factset-people/v1/company-compensation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyCompensation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the compensation details for the people for the specified company identifier Returns the list of company-level executive compensation data items for the top executives listed in annual filings for the most recent fiscal year. The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyCompensationRequest"></param>
        /// <returns>CompanyCompensationResponse</returns>
        public CompanyCompensationResponse GetCompanyCompensationForList(CompanyCompensationRequest companyCompensationRequest)
        {
            var localVarResponse = GetCompanyCompensationForListWithHttpInfo(companyCompensationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the compensation details for the people for the specified company identifier Returns the list of company-level executive compensation data items for the top executives listed in annual filings for the most recent fiscal year. The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyCompensationRequest"></param>
        /// <returns>ApiResponse of CompanyCompensationResponse</returns>
        public ApiResponse<CompanyCompensationResponse> GetCompanyCompensationForListWithHttpInfo(CompanyCompensationRequest companyCompensationRequest)
        {
            // verify the required parameter 'companyCompensationRequest' is set
            if (companyCompensationRequest == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'companyCompensationRequest' when calling CompanyApi->GetCompanyCompensationForList");
            }

            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companyCompensationRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyCompensationForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CompanyCompensationResponse>("/factset-people/v1/company-compensation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyCompensationForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the compensation details for the people for the specified company identifier Returns the list of company-level executive compensation data items for the top executives listed in annual filings for the most recent fiscal year. The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyCompensationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyCompensationResponse</returns>
        public async System.Threading.Tasks.Task<CompanyCompensationResponse>GetCompanyCompensationForListAsync(CompanyCompensationRequest companyCompensationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyCompensationForListWithHttpInfoAsync(companyCompensationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the compensation details for the people for the specified company identifier Returns the list of company-level executive compensation data items for the top executives listed in annual filings for the most recent fiscal year. The coverage of the compensation details for the executives are limited to US region. All the compensation figures are expressed in raw units.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyCompensationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyCompensationResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CompanyCompensationResponse>> GetCompanyCompensationForListWithHttpInfoAsync(CompanyCompensationRequest companyCompensationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyCompensationRequest' is set
            if (companyCompensationRequest == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'companyCompensationRequest' when calling CompanyApi->GetCompanyCompensationForList");
            }


            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companyCompensationRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyCompensationForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompanyCompensationResponse>("/factset-people/v1/company-compensation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyCompensationForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of people for the specified company identifiers Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the &#x60;/profiles&#x60; endpoint to learn more about the given person. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="function">Controls the types of people returned based on high-level job functions. Filter by -    |function|description|   |- --|- --|   |PEOPLE|Retrieve **ALL** Executives of a requested company|   |OFFICER|Retrieve only the Officers of a requested company|   |DIRECTOR|Retrieve only the Directors of a requested company|  (optional, default to PEOPLE)</param>
        /// <returns>CompanyPeopleResponse</returns>
        public CompanyPeopleResponse GetCompanyPeople(List<string> ids, string function = default(string))
        {
            var localVarResponse = GetCompanyPeopleWithHttpInfo(ids, function);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of people for the specified company identifiers Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the &#x60;/profiles&#x60; endpoint to learn more about the given person. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="function">Controls the types of people returned based on high-level job functions. Filter by -    |function|description|   |- --|- --|   |PEOPLE|Retrieve **ALL** Executives of a requested company|   |OFFICER|Retrieve only the Officers of a requested company|   |DIRECTOR|Retrieve only the Directors of a requested company|  (optional, default to PEOPLE)</param>
        /// <returns>ApiResponse of CompanyPeopleResponse</returns>
        public ApiResponse<CompanyPeopleResponse> GetCompanyPeopleWithHttpInfo(List<string> ids, string function = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'ids' when calling CompanyApi->GetCompanyPeople");
            }

            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (function != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("", "function", function));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyPeopleResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CompanyPeopleResponse>("/factset-people/v1/company-people", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyPeople", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of people for the specified company identifiers Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the &#x60;/profiles&#x60; endpoint to learn more about the given person. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="function">Controls the types of people returned based on high-level job functions. Filter by -    |function|description|   |- --|- --|   |PEOPLE|Retrieve **ALL** Executives of a requested company|   |OFFICER|Retrieve only the Officers of a requested company|   |DIRECTOR|Retrieve only the Directors of a requested company|  (optional, default to PEOPLE)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyPeopleResponse</returns>
        public async System.Threading.Tasks.Task<CompanyPeopleResponse>GetCompanyPeopleAsync(List<string> ids, string function = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyPeopleWithHttpInfoAsync(ids, function, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of people for the specified company identifiers Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the &#x60;/profiles&#x60; endpoint to learn more about the given person. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="function">Controls the types of people returned based on high-level job functions. Filter by -    |function|description|   |- --|- --|   |PEOPLE|Retrieve **ALL** Executives of a requested company|   |OFFICER|Retrieve only the Officers of a requested company|   |DIRECTOR|Retrieve only the Directors of a requested company|  (optional, default to PEOPLE)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyPeopleResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CompanyPeopleResponse>> GetCompanyPeopleWithHttpInfoAsync(List<string> ids, string function = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'ids' when calling CompanyApi->GetCompanyPeople");
            }


            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (function != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("", "function", function));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyPeopleResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompanyPeopleResponse>("/factset-people/v1/company-people", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyPeople", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the /profiles endpoint to learn more about the given person. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPeopleRequest"></param>
        /// <returns>CompanyPeopleResponse</returns>
        public CompanyPeopleResponse GetCompanyPeopleForList(CompanyPeopleRequest companyPeopleRequest)
        {
            var localVarResponse = GetCompanyPeopleForListWithHttpInfo(companyPeopleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the /profiles endpoint to learn more about the given person. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPeopleRequest"></param>
        /// <returns>ApiResponse of CompanyPeopleResponse</returns>
        public ApiResponse<CompanyPeopleResponse> GetCompanyPeopleForListWithHttpInfo(CompanyPeopleRequest companyPeopleRequest)
        {
            // verify the required parameter 'companyPeopleRequest' is set
            if (companyPeopleRequest == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'companyPeopleRequest' when calling CompanyApi->GetCompanyPeopleForList");
            }

            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companyPeopleRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyPeopleForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CompanyPeopleResponse>("/factset-people/v1/company-people", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyPeopleForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the /profiles endpoint to learn more about the given person. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPeopleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyPeopleResponse</returns>
        public async System.Threading.Tasks.Task<CompanyPeopleResponse>GetCompanyPeopleForListAsync(CompanyPeopleRequest companyPeopleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyPeopleForListWithHttpInfoAsync(companyPeopleRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers Returns the list of executives associated the company identifier requested. Information includes the job functions, email, phone, title, name, and FactSet Entity Identifier. The personId returned can then be used in the /profiles endpoint to learn more about the given person. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPeopleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyPeopleResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CompanyPeopleResponse>> GetCompanyPeopleForListWithHttpInfoAsync(CompanyPeopleRequest companyPeopleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyPeopleRequest' is set
            if (companyPeopleRequest == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'companyPeopleRequest' when calling CompanyApi->GetCompanyPeopleForList");
            }


            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companyPeopleRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyPeopleForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompanyPeopleResponse>("/factset-people/v1/company-people", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyPeopleForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of people for the specified company identifiers and position Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="position">Controls the position details returned for the requested company. By default, the service returns the CEO name, title, and ID for the requested company ids.   |position|description|   |- --|- --|   |CHAIR|Chairman|   |CEO|Chief Executive Officer|   |PRES|President|   |COO|Chief Operating Officer|   |CFO|Chief Financial Officer|   |CTO|Chief Technology Officer|   |CIO|Chief Investment Officer|   |FOU|Founder(s)|   |CMP|Compliance Officer|   |ADM|Admin|   |IND|Independent Director|   |BRD|Directors/Board Members|   |IR|Investor Relations|   |LEG|Legal Counsel|   |TREAS|Treasurer|   |MKT|Sales and Marketing Managers|   |HR|Human Resources|  (optional, default to CEO)</param>
        /// <returns>CompanyPositionsResponse</returns>
        public CompanyPositionsResponse GetCompanyPositions(List<string> ids, string position = default(string))
        {
            var localVarResponse = GetCompanyPositionsWithHttpInfo(ids, position);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of people for the specified company identifiers and position Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="position">Controls the position details returned for the requested company. By default, the service returns the CEO name, title, and ID for the requested company ids.   |position|description|   |- --|- --|   |CHAIR|Chairman|   |CEO|Chief Executive Officer|   |PRES|President|   |COO|Chief Operating Officer|   |CFO|Chief Financial Officer|   |CTO|Chief Technology Officer|   |CIO|Chief Investment Officer|   |FOU|Founder(s)|   |CMP|Compliance Officer|   |ADM|Admin|   |IND|Independent Director|   |BRD|Directors/Board Members|   |IR|Investor Relations|   |LEG|Legal Counsel|   |TREAS|Treasurer|   |MKT|Sales and Marketing Managers|   |HR|Human Resources|  (optional, default to CEO)</param>
        /// <returns>ApiResponse of CompanyPositionsResponse</returns>
        public ApiResponse<CompanyPositionsResponse> GetCompanyPositionsWithHttpInfo(List<string> ids, string position = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'ids' when calling CompanyApi->GetCompanyPositions");
            }

            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyPositionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CompanyPositionsResponse>("/factset-people/v1/company-positions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyPositions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of people for the specified company identifiers and position Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="position">Controls the position details returned for the requested company. By default, the service returns the CEO name, title, and ID for the requested company ids.   |position|description|   |- --|- --|   |CHAIR|Chairman|   |CEO|Chief Executive Officer|   |PRES|President|   |COO|Chief Operating Officer|   |CFO|Chief Financial Officer|   |CTO|Chief Technology Officer|   |CIO|Chief Investment Officer|   |FOU|Founder(s)|   |CMP|Compliance Officer|   |ADM|Admin|   |IND|Independent Director|   |BRD|Directors/Board Members|   |IR|Investor Relations|   |LEG|Legal Counsel|   |TREAS|Treasurer|   |MKT|Sales and Marketing Managers|   |HR|Human Resources|  (optional, default to CEO)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyPositionsResponse</returns>
        public async System.Threading.Tasks.Task<CompanyPositionsResponse>GetCompanyPositionsAsync(List<string> ids, string position = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyPositionsWithHttpInfoAsync(ids, position, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of people for the specified company identifiers and position Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="position">Controls the position details returned for the requested company. By default, the service returns the CEO name, title, and ID for the requested company ids.   |position|description|   |- --|- --|   |CHAIR|Chairman|   |CEO|Chief Executive Officer|   |PRES|President|   |COO|Chief Operating Officer|   |CFO|Chief Financial Officer|   |CTO|Chief Technology Officer|   |CIO|Chief Investment Officer|   |FOU|Founder(s)|   |CMP|Compliance Officer|   |ADM|Admin|   |IND|Independent Director|   |BRD|Directors/Board Members|   |IR|Investor Relations|   |LEG|Legal Counsel|   |TREAS|Treasurer|   |MKT|Sales and Marketing Managers|   |HR|Human Resources|  (optional, default to CEO)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyPositionsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CompanyPositionsResponse>> GetCompanyPositionsWithHttpInfoAsync(List<string> ids, string position = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'ids' when calling CompanyApi->GetCompanyPositions");
            }


            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyPositionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompanyPositionsResponse>("/factset-people/v1/company-positions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyPositions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers and position Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPositionsRequest"></param>
        /// <returns>CompanyPositionsResponse</returns>
        public CompanyPositionsResponse GetCompanyPositionsForList(CompanyPositionsRequest companyPositionsRequest)
        {
            var localVarResponse = GetCompanyPositionsForListWithHttpInfo(companyPositionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers and position Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPositionsRequest"></param>
        /// <returns>ApiResponse of CompanyPositionsResponse</returns>
        public ApiResponse<CompanyPositionsResponse> GetCompanyPositionsForListWithHttpInfo(CompanyPositionsRequest companyPositionsRequest)
        {
            // verify the required parameter 'companyPositionsRequest' is set
            if (companyPositionsRequest == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'companyPositionsRequest' when calling CompanyApi->GetCompanyPositionsForList");
            }

            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companyPositionsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyPositionsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CompanyPositionsResponse>("/factset-people/v1/company-positions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyPositionsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers and position Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPositionsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyPositionsResponse</returns>
        public async System.Threading.Tasks.Task<CompanyPositionsResponse>GetCompanyPositionsForListAsync(CompanyPositionsRequest companyPositionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyPositionsForListWithHttpInfoAsync(companyPositionsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of people associated for a large list of company identitifers and position Returns the list of people, name, and title for a list of company ids and requested position. Positions include-   * Chairman   * Chief Executive Officer   * President   * Chief Operating Officer   * Chief Financial Officer   * Chief Technology Officer   * Chief Investment Officer   * Founder(s)   * Compliance Officer   * Admin   * Independent Director   * Directors/Board Members   * Investor Relations   * Legal Counsel   * Treasurer   * Sales and Marketing Managers   * Human Resources 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyPositionsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyPositionsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CompanyPositionsResponse>> GetCompanyPositionsForListWithHttpInfoAsync(CompanyPositionsRequest companyPositionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyPositionsRequest' is set
            if (companyPositionsRequest == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'companyPositionsRequest' when calling CompanyApi->GetCompanyPositionsForList");
            }


            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companyPositionsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyPositionsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompanyPositionsResponse>("/factset-people/v1/company-positions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyPositionsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns statistics about top leadership of a company. Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="mbType">Search based on the management and board types. The types include -  |type|description| |- --|- --| |MB|Management &amp; Board| |MGMT|Management| |BRD|Board|  (optional, default to MB)</param>
        /// <returns>CompanyStatsResponse</returns>
        public CompanyStatsResponse GetCompanyStats(List<string> ids, string mbType = default(string))
        {
            var localVarResponse = GetCompanyStatsWithHttpInfo(ids, mbType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns statistics about top leadership of a company. Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="mbType">Search based on the management and board types. The types include -  |type|description| |- --|- --| |MB|Management &amp; Board| |MGMT|Management| |BRD|Board|  (optional, default to MB)</param>
        /// <returns>ApiResponse of CompanyStatsResponse</returns>
        public ApiResponse<CompanyStatsResponse> GetCompanyStatsWithHttpInfo(List<string> ids, string mbType = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'ids' when calling CompanyApi->GetCompanyStats");
            }

            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (mbType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("", "mbType", mbType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyStatsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CompanyStatsResponse>("/factset-people/v1/company-stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns statistics about top leadership of a company. Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="mbType">Search based on the management and board types. The types include -  |type|description| |- --|- --| |MB|Management &amp; Board| |MGMT|Management| |BRD|Board|  (optional, default to MB)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyStatsResponse</returns>
        public async System.Threading.Tasks.Task<CompanyStatsResponse>GetCompanyStatsAsync(List<string> ids, string mbType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyStatsWithHttpInfoAsync(ids, mbType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns statistics about top leadership of a company. Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested company identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. &lt;p&gt;***ids limit** &#x3D;  1000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="mbType">Search based on the management and board types. The types include -  |type|description| |- --|- --| |MB|Management &amp; Board| |MGMT|Management| |BRD|Board|  (optional, default to MB)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyStatsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CompanyStatsResponse>> GetCompanyStatsWithHttpInfoAsync(List<string> ids, string mbType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'ids' when calling CompanyApi->GetCompanyStats");
            }


            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (mbType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetPeople.Client.ClientUtils.ParameterToMultiMap("", "mbType", mbType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyStatsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompanyStatsResponse>("/factset-people/v1/company-stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns statistics about top leadership of a company. Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyStatsRequest"></param>
        /// <returns>CompanyStatsResponse</returns>
        public CompanyStatsResponse GetCompanyStatsForList(CompanyStatsRequest companyStatsRequest)
        {
            var localVarResponse = GetCompanyStatsForListWithHttpInfo(companyStatsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns statistics about top leadership of a company. Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyStatsRequest"></param>
        /// <returns>ApiResponse of CompanyStatsResponse</returns>
        public ApiResponse<CompanyStatsResponse> GetCompanyStatsForListWithHttpInfo(CompanyStatsRequest companyStatsRequest)
        {
            // verify the required parameter 'companyStatsRequest' is set
            if (companyStatsRequest == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'companyStatsRequest' when calling CompanyApi->GetCompanyStatsForList");
            }

            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companyStatsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyStatsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CompanyStatsResponse>("/factset-people/v1/company-stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyStatsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns statistics about top leadership of a company. Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyStatsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompanyStatsResponse</returns>
        public async System.Threading.Tasks.Task<CompanyStatsResponse>GetCompanyStatsForListAsync(CompanyStatsRequest companyStatsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyStatsForListWithHttpInfoAsync(companyStatsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns statistics about top leadership of a company. Returns the statistics such as the average age, tenure, compensation of leadership, number of executives, and the gender diversity of leadership. We can utilize the data for analyzing a company&#39;s board and management.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPeople.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyStatsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompanyStatsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CompanyStatsResponse>> GetCompanyStatsForListWithHttpInfoAsync(CompanyStatsRequest companyStatsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyStatsRequest' is set
            if (companyStatsRequest == null)
            {
                throw new FactSet.SDK.FactSetPeople.Client.ApiException(400, "Missing required parameter 'companyStatsRequest' when calling CompanyApi->GetCompanyStatsForList");
            }


            FactSet.SDK.FactSetPeople.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPeople.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPeople.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companyStatsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPeople.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyStatsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompanyStatsResponse>("/factset-people/v1/company-stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyStatsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
