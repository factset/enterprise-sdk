/*
 * FactSet Ownership API
 *
 * description.md
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetOwnershipReportBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetOwnershipReportBuilder.Model
{
    /// <summary>
    /// Standard Ownership response meta object.  Contains metadata about the response at the root level.
    /// </summary>
    [DataContract(Name = "Meta")]
    public partial class Meta : IEquatable<Meta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Meta" /> class.
        /// </summary>
        /// <param name="currency">The currency ISO of the data which was returned.</param>
        /// <param name="fsymId">The resolved fsymId that corresponds to the provided requestId.</param>
        /// <param name="noData">Indicator of whether FactSet had data for this request.</param>
        /// <param name="requestId">The identifier which was requested by the client.</param>
        public Meta(string currency = default(string), string fsymId = default(string), bool? noData = default(bool?), string requestId = default(string))
        {
            this.Currency = currency;
            this.FsymId = fsymId;
            this.NoData = noData;
            this.RequestId = requestId;
        }

        /// <summary>
        /// The currency ISO of the data which was returned
        /// </summary>
        /// <value>The currency ISO of the data which was returned</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The resolved fsymId that corresponds to the provided requestId
        /// </summary>
        /// <value>The resolved fsymId that corresponds to the provided requestId</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Indicator of whether FactSet had data for this request
        /// </summary>
        /// <value>Indicator of whether FactSet had data for this request</value>
        [DataMember(Name = "noData", EmitDefaultValue = true)]
        public bool? NoData { get; set; }

        /// <summary>
        /// The identifier which was requested by the client
        /// </summary>
        /// <value>The identifier which was requested by the client</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Meta {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  NoData: ").Append(NoData).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Meta);
        }

        /// <summary>
        /// Returns true if Meta instances are equal
        /// </summary>
        /// <param name="input">Instance of Meta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Meta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.NoData == input.NoData ||
                    (this.NoData != null &&
                    this.NoData.Equals(input.NoData))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.NoData != null)
                {
                    hashCode = (hashCode * 59) + this.NoData.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
