/*
 * FactSet Ownership API
 *
 * description.md
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetOwnershipReportBuilder.Client;
using FactSet.SDK.FactSetOwnershipReportBuilder.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetOwnershipReportBuilder.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOwnershipApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Holders of a company or fund
        /// </summary>
        /// <remarks>
        /// Holders of a company or fund
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company or Fund Identifier</param>
        /// <param name="assetType">Controls the Asset Type of the data returned (optional, default to EQUITY)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned (optional, default to INSTITUTIONS)</param>
        /// <param name="entityType">Controls the type of Entity data returned. Defaults to Security data, but can also be used to display Company data. (optional, default to SECURITY)</param>
        /// <param name="topn">Limits the number of holders returned based on their Market Value position in the security. Default is ALL, otherwise use a valid number above 0.  (optional)</param>
        /// <param name="date">Top Holders as of date expressed in YYYY-MM-DD format. Defaults to latest month-end close; non-month-end dates are converted to month-end dates. (optional)</param>
        /// <returns>ResponseHolders</returns>
        ResponseHolders GetOwnershipHolders(string id, string assetType = default(string), string holderType = default(string), string entityType = default(string), string topn = default(string), DateTime? date = default(DateTime?));

        /// <summary>
        /// Holders of a company or fund
        /// </summary>
        /// <remarks>
        /// Holders of a company or fund
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company or Fund Identifier</param>
        /// <param name="assetType">Controls the Asset Type of the data returned (optional, default to EQUITY)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned (optional, default to INSTITUTIONS)</param>
        /// <param name="entityType">Controls the type of Entity data returned. Defaults to Security data, but can also be used to display Company data. (optional, default to SECURITY)</param>
        /// <param name="topn">Limits the number of holders returned based on their Market Value position in the security. Default is ALL, otherwise use a valid number above 0.  (optional)</param>
        /// <param name="date">Top Holders as of date expressed in YYYY-MM-DD format. Defaults to latest month-end close; non-month-end dates are converted to month-end dates. (optional)</param>
        /// <returns>ApiResponse of ResponseHolders</returns>
        ApiResponse<ResponseHolders> GetOwnershipHoldersWithHttpInfo(string id, string assetType = default(string), string holderType = default(string), string entityType = default(string), string topn = default(string), DateTime? date = default(DateTime?));
        /// <summary>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </summary>
        /// <remarks>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Any valid FactSet identifier which points to a security.  This could be Ticker Region, Entity ID, CUSIP, or SEDOL. </param>
        /// <param name="currency">Currency ISO code that any currency-based data should be returned in.  If excluded, the value will default to the special keyword \&quot;LOCAL\&quot; which will cause the currency-based values to be calculated in currency which is local to the exchange it is traded on.  (optional)</param>
        /// <param name="attributes">The columns to be returned in the resulting table (optional)</param>
        /// <param name="period">The period over which we should return holdings for. (optional, default to 6m)</param>
        /// <param name="holderType">The holder types which should be included in this table (optional, default to institutions)</param>
        /// <param name="date">The date as of which this data should be returned. YYYY-MM-DD format. Defaults to current date. (optional)</param>
        /// <returns>ResponseUltimateParent</returns>
        ResponseUltimateParent GetOwnershipUltimateParent(string id, string currency = default(string), List<string> attributes = default(List<string>), string period = default(string), string holderType = default(string), DateTime? date = default(DateTime?));

        /// <summary>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </summary>
        /// <remarks>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Any valid FactSet identifier which points to a security.  This could be Ticker Region, Entity ID, CUSIP, or SEDOL. </param>
        /// <param name="currency">Currency ISO code that any currency-based data should be returned in.  If excluded, the value will default to the special keyword \&quot;LOCAL\&quot; which will cause the currency-based values to be calculated in currency which is local to the exchange it is traded on.  (optional)</param>
        /// <param name="attributes">The columns to be returned in the resulting table (optional)</param>
        /// <param name="period">The period over which we should return holdings for. (optional, default to 6m)</param>
        /// <param name="holderType">The holder types which should be included in this table (optional, default to institutions)</param>
        /// <param name="date">The date as of which this data should be returned. YYYY-MM-DD format. Defaults to current date. (optional)</param>
        /// <returns>ApiResponse of ResponseUltimateParent</returns>
        ApiResponse<ResponseUltimateParent> GetOwnershipUltimateParentWithHttpInfo(string id, string currency = default(string), List<string> attributes = default(List<string>), string period = default(string), string holderType = default(string), DateTime? date = default(DateTime?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOwnershipApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Holders of a company or fund
        /// </summary>
        /// <remarks>
        /// Holders of a company or fund
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company or Fund Identifier</param>
        /// <param name="assetType">Controls the Asset Type of the data returned (optional, default to EQUITY)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned (optional, default to INSTITUTIONS)</param>
        /// <param name="entityType">Controls the type of Entity data returned. Defaults to Security data, but can also be used to display Company data. (optional, default to SECURITY)</param>
        /// <param name="topn">Limits the number of holders returned based on their Market Value position in the security. Default is ALL, otherwise use a valid number above 0.  (optional)</param>
        /// <param name="date">Top Holders as of date expressed in YYYY-MM-DD format. Defaults to latest month-end close; non-month-end dates are converted to month-end dates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseHolders</returns>
        System.Threading.Tasks.Task<ResponseHolders> GetOwnershipHoldersAsync(string id, string assetType = default(string), string holderType = default(string), string entityType = default(string), string topn = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Holders of a company or fund
        /// </summary>
        /// <remarks>
        /// Holders of a company or fund
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company or Fund Identifier</param>
        /// <param name="assetType">Controls the Asset Type of the data returned (optional, default to EQUITY)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned (optional, default to INSTITUTIONS)</param>
        /// <param name="entityType">Controls the type of Entity data returned. Defaults to Security data, but can also be used to display Company data. (optional, default to SECURITY)</param>
        /// <param name="topn">Limits the number of holders returned based on their Market Value position in the security. Default is ALL, otherwise use a valid number above 0.  (optional)</param>
        /// <param name="date">Top Holders as of date expressed in YYYY-MM-DD format. Defaults to latest month-end close; non-month-end dates are converted to month-end dates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseHolders)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseHolders>> GetOwnershipHoldersWithHttpInfoAsync(string id, string assetType = default(string), string holderType = default(string), string entityType = default(string), string topn = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </summary>
        /// <remarks>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Any valid FactSet identifier which points to a security.  This could be Ticker Region, Entity ID, CUSIP, or SEDOL. </param>
        /// <param name="currency">Currency ISO code that any currency-based data should be returned in.  If excluded, the value will default to the special keyword \&quot;LOCAL\&quot; which will cause the currency-based values to be calculated in currency which is local to the exchange it is traded on.  (optional)</param>
        /// <param name="attributes">The columns to be returned in the resulting table (optional)</param>
        /// <param name="period">The period over which we should return holdings for. (optional, default to 6m)</param>
        /// <param name="holderType">The holder types which should be included in this table (optional, default to institutions)</param>
        /// <param name="date">The date as of which this data should be returned. YYYY-MM-DD format. Defaults to current date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseUltimateParent</returns>
        System.Threading.Tasks.Task<ResponseUltimateParent> GetOwnershipUltimateParentAsync(string id, string currency = default(string), List<string> attributes = default(List<string>), string period = default(string), string holderType = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </summary>
        /// <remarks>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Any valid FactSet identifier which points to a security.  This could be Ticker Region, Entity ID, CUSIP, or SEDOL. </param>
        /// <param name="currency">Currency ISO code that any currency-based data should be returned in.  If excluded, the value will default to the special keyword \&quot;LOCAL\&quot; which will cause the currency-based values to be calculated in currency which is local to the exchange it is traded on.  (optional)</param>
        /// <param name="attributes">The columns to be returned in the resulting table (optional)</param>
        /// <param name="period">The period over which we should return holdings for. (optional, default to 6m)</param>
        /// <param name="holderType">The holder types which should be included in this table (optional, default to institutions)</param>
        /// <param name="date">The date as of which this data should be returned. YYYY-MM-DD format. Defaults to current date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseUltimateParent)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseUltimateParent>> GetOwnershipUltimateParentWithHttpInfoAsync(string id, string currency = default(string), List<string> attributes = default(List<string>), string period = default(string), string holderType = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOwnershipApi : IOwnershipApiSync, IOwnershipApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OwnershipApi : IOwnershipApi
    {
        private FactSet.SDK.FactSetOwnershipReportBuilder.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOwnershipHoldersResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ResponseHolders) },
            { (HttpStatusCode)400, typeof(ErrorWithMetaResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOwnershipUltimateParentResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ResponseUltimateParent) },
            { (HttpStatusCode)400, typeof(ErrorWithMetaResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="OwnershipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OwnershipApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OwnershipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OwnershipApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetOwnershipReportBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOwnershipReportBuilder.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetOwnershipReportBuilder.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetOwnershipReportBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OwnershipApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OwnershipApi(FactSet.SDK.FactSetOwnershipReportBuilder.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetOwnershipReportBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOwnershipReportBuilder.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetOwnershipReportBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OwnershipApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OwnershipApi(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ISynchronousClient client, FactSet.SDK.FactSetOwnershipReportBuilder.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetOwnershipReportBuilder.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetOwnershipReportBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetOwnershipReportBuilder.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetOwnershipReportBuilder.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetOwnershipReportBuilder.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetOwnershipReportBuilder.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Holders of a company or fund Holders of a company or fund
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company or Fund Identifier</param>
        /// <param name="assetType">Controls the Asset Type of the data returned (optional, default to EQUITY)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned (optional, default to INSTITUTIONS)</param>
        /// <param name="entityType">Controls the type of Entity data returned. Defaults to Security data, but can also be used to display Company data. (optional, default to SECURITY)</param>
        /// <param name="topn">Limits the number of holders returned based on their Market Value position in the security. Default is ALL, otherwise use a valid number above 0.  (optional)</param>
        /// <param name="date">Top Holders as of date expressed in YYYY-MM-DD format. Defaults to latest month-end close; non-month-end dates are converted to month-end dates. (optional)</param>
        /// <returns>ResponseHolders</returns>
        public ResponseHolders GetOwnershipHolders(string id, string assetType = default(string), string holderType = default(string), string entityType = default(string), string topn = default(string), DateTime? date = default(DateTime?))
        {
            var localVarResponse = GetOwnershipHoldersWithHttpInfo(id, assetType, holderType, entityType, topn, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Holders of a company or fund Holders of a company or fund
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company or Fund Identifier</param>
        /// <param name="assetType">Controls the Asset Type of the data returned (optional, default to EQUITY)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned (optional, default to INSTITUTIONS)</param>
        /// <param name="entityType">Controls the type of Entity data returned. Defaults to Security data, but can also be used to display Company data. (optional, default to SECURITY)</param>
        /// <param name="topn">Limits the number of holders returned based on their Market Value position in the security. Default is ALL, otherwise use a valid number above 0.  (optional)</param>
        /// <param name="date">Top Holders as of date expressed in YYYY-MM-DD format. Defaults to latest month-end close; non-month-end dates are converted to month-end dates. (optional)</param>
        /// <returns>ApiResponse of ResponseHolders</returns>
        public ApiResponse<ResponseHolders> GetOwnershipHoldersWithHttpInfo(string id, string assetType = default(string), string holderType = default(string), string entityType = default(string), string topn = default(string), DateTime? date = default(DateTime?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling OwnershipApi->GetOwnershipHolders");
            }

            FactSet.SDK.FactSetOwnershipReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnershipReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));
            }
            if (holderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "holder_type", holderType));
            }
            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "entity_type", entityType));
            }
            if (topn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "topn", topn));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "date", new DateOnlyParameter(date.Value)));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOwnershipHoldersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ResponseHolders>("/holders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnershipHolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Holders of a company or fund Holders of a company or fund
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company or Fund Identifier</param>
        /// <param name="assetType">Controls the Asset Type of the data returned (optional, default to EQUITY)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned (optional, default to INSTITUTIONS)</param>
        /// <param name="entityType">Controls the type of Entity data returned. Defaults to Security data, but can also be used to display Company data. (optional, default to SECURITY)</param>
        /// <param name="topn">Limits the number of holders returned based on their Market Value position in the security. Default is ALL, otherwise use a valid number above 0.  (optional)</param>
        /// <param name="date">Top Holders as of date expressed in YYYY-MM-DD format. Defaults to latest month-end close; non-month-end dates are converted to month-end dates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseHolders</returns>
        public async System.Threading.Tasks.Task<ResponseHolders>GetOwnershipHoldersAsync(string id, string assetType = default(string), string holderType = default(string), string entityType = default(string), string topn = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOwnershipHoldersWithHttpInfoAsync(id, assetType, holderType, entityType, topn, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Holders of a company or fund Holders of a company or fund
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company or Fund Identifier</param>
        /// <param name="assetType">Controls the Asset Type of the data returned (optional, default to EQUITY)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned (optional, default to INSTITUTIONS)</param>
        /// <param name="entityType">Controls the type of Entity data returned. Defaults to Security data, but can also be used to display Company data. (optional, default to SECURITY)</param>
        /// <param name="topn">Limits the number of holders returned based on their Market Value position in the security. Default is ALL, otherwise use a valid number above 0.  (optional)</param>
        /// <param name="date">Top Holders as of date expressed in YYYY-MM-DD format. Defaults to latest month-end close; non-month-end dates are converted to month-end dates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseHolders)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ResponseHolders>> GetOwnershipHoldersWithHttpInfoAsync(string id, string assetType = default(string), string holderType = default(string), string entityType = default(string), string topn = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling OwnershipApi->GetOwnershipHolders");
            }


            FactSet.SDK.FactSetOwnershipReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnershipReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));
            }
            if (holderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "holder_type", holderType));
            }
            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "entity_type", entityType));
            }
            if (topn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "topn", topn));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "date", new DateOnlyParameter(date.Value)));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOwnershipHoldersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseHolders>("/holders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnershipHolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure. Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Any valid FactSet identifier which points to a security.  This could be Ticker Region, Entity ID, CUSIP, or SEDOL. </param>
        /// <param name="currency">Currency ISO code that any currency-based data should be returned in.  If excluded, the value will default to the special keyword \&quot;LOCAL\&quot; which will cause the currency-based values to be calculated in currency which is local to the exchange it is traded on.  (optional)</param>
        /// <param name="attributes">The columns to be returned in the resulting table (optional)</param>
        /// <param name="period">The period over which we should return holdings for. (optional, default to 6m)</param>
        /// <param name="holderType">The holder types which should be included in this table (optional, default to institutions)</param>
        /// <param name="date">The date as of which this data should be returned. YYYY-MM-DD format. Defaults to current date. (optional)</param>
        /// <returns>ResponseUltimateParent</returns>
        public ResponseUltimateParent GetOwnershipUltimateParent(string id, string currency = default(string), List<string> attributes = default(List<string>), string period = default(string), string holderType = default(string), DateTime? date = default(DateTime?))
        {
            var localVarResponse = GetOwnershipUltimateParentWithHttpInfo(id, currency, attributes, period, holderType, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure. Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Any valid FactSet identifier which points to a security.  This could be Ticker Region, Entity ID, CUSIP, or SEDOL. </param>
        /// <param name="currency">Currency ISO code that any currency-based data should be returned in.  If excluded, the value will default to the special keyword \&quot;LOCAL\&quot; which will cause the currency-based values to be calculated in currency which is local to the exchange it is traded on.  (optional)</param>
        /// <param name="attributes">The columns to be returned in the resulting table (optional)</param>
        /// <param name="period">The period over which we should return holdings for. (optional, default to 6m)</param>
        /// <param name="holderType">The holder types which should be included in this table (optional, default to institutions)</param>
        /// <param name="date">The date as of which this data should be returned. YYYY-MM-DD format. Defaults to current date. (optional)</param>
        /// <returns>ApiResponse of ResponseUltimateParent</returns>
        public ApiResponse<ResponseUltimateParent> GetOwnershipUltimateParentWithHttpInfo(string id, string currency = default(string), List<string> attributes = default(List<string>), string period = default(string), string holderType = default(string), DateTime? date = default(DateTime?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling OwnershipApi->GetOwnershipUltimateParent");
            }

            FactSet.SDK.FactSetOwnershipReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnershipReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("multi", "attributes", attributes));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (holderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "holderType", holderType));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "date", new DateOnlyParameter(date.Value)));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOwnershipUltimateParentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ResponseUltimateParent>("/ultimate-parent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnershipUltimateParent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure. Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Any valid FactSet identifier which points to a security.  This could be Ticker Region, Entity ID, CUSIP, or SEDOL. </param>
        /// <param name="currency">Currency ISO code that any currency-based data should be returned in.  If excluded, the value will default to the special keyword \&quot;LOCAL\&quot; which will cause the currency-based values to be calculated in currency which is local to the exchange it is traded on.  (optional)</param>
        /// <param name="attributes">The columns to be returned in the resulting table (optional)</param>
        /// <param name="period">The period over which we should return holdings for. (optional, default to 6m)</param>
        /// <param name="holderType">The holder types which should be included in this table (optional, default to institutions)</param>
        /// <param name="date">The date as of which this data should be returned. YYYY-MM-DD format. Defaults to current date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseUltimateParent</returns>
        public async System.Threading.Tasks.Task<ResponseUltimateParent>GetOwnershipUltimateParentAsync(string id, string currency = default(string), List<string> attributes = default(List<string>), string period = default(string), string holderType = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOwnershipUltimateParentWithHttpInfoAsync(id, currency, attributes, period, holderType, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure. Get FactSet&#39;s ownership breakdown about a specific security.  The returned table will display the institutions, insiders, funds, and beneficial owners that comprise the ownership of the provided security.  These holders will be grouped by the ultimate parent in their entity structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Any valid FactSet identifier which points to a security.  This could be Ticker Region, Entity ID, CUSIP, or SEDOL. </param>
        /// <param name="currency">Currency ISO code that any currency-based data should be returned in.  If excluded, the value will default to the special keyword \&quot;LOCAL\&quot; which will cause the currency-based values to be calculated in currency which is local to the exchange it is traded on.  (optional)</param>
        /// <param name="attributes">The columns to be returned in the resulting table (optional)</param>
        /// <param name="period">The period over which we should return holdings for. (optional, default to 6m)</param>
        /// <param name="holderType">The holder types which should be included in this table (optional, default to institutions)</param>
        /// <param name="date">The date as of which this data should be returned. YYYY-MM-DD format. Defaults to current date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseUltimateParent)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ResponseUltimateParent>> GetOwnershipUltimateParentWithHttpInfoAsync(string id, string currency = default(string), List<string> attributes = default(List<string>), string period = default(string), string holderType = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetOwnershipReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling OwnershipApi->GetOwnershipUltimateParent");
            }


            FactSet.SDK.FactSetOwnershipReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnershipReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("multi", "attributes", attributes));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (holderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "holderType", holderType));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "date", new DateOnlyParameter(date.Value)));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnershipReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOwnershipUltimateParentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseUltimateParent>("/ultimate-parent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnershipUltimateParent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
