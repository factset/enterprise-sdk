/*
 * ModelAccounts API
 *
 * Allow clients to fetch ModelAccounts Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Portfolio.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Portfolio.Model
{
    /// <summary>
    /// ModelAccountAdditionalField
    /// </summary>
    [DataContract(Name = "ModelAccountAdditionalField")]
    public partial class ModelAccountAdditionalField : IEquatable<ModelAccountAdditionalField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelAccountAdditionalField" /> class.
        /// </summary>
        /// <param name="iteration">iteration.</param>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="description">description.</param>
        /// <param name="splitDirection">splitDirection.</param>
        /// <param name="size">size.</param>
        /// <param name="codePageFlag">codePageFlag.</param>
        public ModelAccountAdditionalField(bool iteration = default(bool), string name = default(string), string type = default(string), string description = default(string), string splitDirection = default(string), int size = default(int), string codePageFlag = default(string))
        {
            this.Iteration = iteration;
            this.Name = name;
            this.Type = type;
            this.Description = description;
            this.SplitDirection = splitDirection;
            this.Size = size;
            this.CodePageFlag = codePageFlag;
        }

        /// <summary>
        /// Gets or Sets Iteration
        /// </summary>
        [DataMember(Name = "iteration", EmitDefaultValue = true)]
        public bool Iteration { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SplitDirection
        /// </summary>
        [DataMember(Name = "splitDirection", EmitDefaultValue = true)]
        public string SplitDirection { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Gets or Sets CodePageFlag
        /// </summary>
        [DataMember(Name = "codePageFlag", EmitDefaultValue = true)]
        public string CodePageFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelAccountAdditionalField {\n");
            sb.Append("  Iteration: ").Append(Iteration).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SplitDirection: ").Append(SplitDirection).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  CodePageFlag: ").Append(CodePageFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelAccountAdditionalField);
        }

        /// <summary>
        /// Returns true if ModelAccountAdditionalField instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelAccountAdditionalField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelAccountAdditionalField input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Iteration == input.Iteration ||
                    this.Iteration.Equals(input.Iteration)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SplitDirection == input.SplitDirection ||
                    (this.SplitDirection != null &&
                    this.SplitDirection.Equals(input.SplitDirection))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.CodePageFlag == input.CodePageFlag ||
                    (this.CodePageFlag != null &&
                    this.CodePageFlag.Equals(input.CodePageFlag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Iteration.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.SplitDirection != null)
                {
                    hashCode = (hashCode * 59) + this.SplitDirection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                if (this.CodePageFlag != null)
                {
                    hashCode = (hashCode * 59) + this.CodePageFlag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
