/*
 * FactSet Entity Report Builder
 *
 * License info
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetFundamentalsReportBuilder.Client;
using FactSet.SDK.FactSetFundamentalsReportBuilder.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetFundamentalsReportBuilder.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinancialsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Balance Sheet
        /// </summary>
        /// <remarks>
        /// Returns a standardized Balance Sheet based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>Response</returns>
        Response GetFinancialsBalanceSheet(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string));

        /// <summary>
        /// Balance Sheet
        /// </summary>
        /// <remarks>
        /// Returns a standardized Balance Sheet based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> GetFinancialsBalanceSheetWithHttpInfo(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string));
        /// <summary>
        /// Cash Flow
        /// </summary>
        /// <remarks>
        /// Returns a standardized Cash Flow based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>Response</returns>
        Response GetFinancialsCashFlow(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string));

        /// <summary>
        /// Cash Flow
        /// </summary>
        /// <remarks>
        /// Returns a standardized Cash Flow based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> GetFinancialsCashFlowWithHttpInfo(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string));
        /// <summary>
        /// Income Statement
        /// </summary>
        /// <remarks>
        /// Returns a standardized Income Statement based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>Response</returns>
        Response GetFinancialsIncomeStatement(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string));

        /// <summary>
        /// Income Statement
        /// </summary>
        /// <remarks>
        /// Returns a standardized Income Statement based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> GetFinancialsIncomeStatementWithHttpInfo(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinancialsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Balance Sheet
        /// </summary>
        /// <remarks>
        /// Returns a standardized Balance Sheet based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> GetFinancialsBalanceSheetAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Balance Sheet
        /// </summary>
        /// <remarks>
        /// Returns a standardized Balance Sheet based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> GetFinancialsBalanceSheetWithHttpInfoAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cash Flow
        /// </summary>
        /// <remarks>
        /// Returns a standardized Cash Flow based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> GetFinancialsCashFlowAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cash Flow
        /// </summary>
        /// <remarks>
        /// Returns a standardized Cash Flow based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> GetFinancialsCashFlowWithHttpInfoAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Income Statement
        /// </summary>
        /// <remarks>
        /// Returns a standardized Income Statement based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> GetFinancialsIncomeStatementAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Income Statement
        /// </summary>
        /// <remarks>
        /// Returns a standardized Income Statement based on industry.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> GetFinancialsIncomeStatementWithHttpInfoAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinancialsApi : IFinancialsApiSync, IFinancialsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FinancialsApi : IFinancialsApi
    {
        private FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFinancialsBalanceSheetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(Response) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFinancialsCashFlowResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(Response) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFinancialsIncomeStatementResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(Response) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinancialsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinancialsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetFundamentalsReportBuilder.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FinancialsApi(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetFundamentalsReportBuilder.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FinancialsApi(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ISynchronousClient client, FactSet.SDK.FactSetFundamentalsReportBuilder.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetFundamentalsReportBuilder.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetFundamentalsReportBuilder.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetFundamentalsReportBuilder.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Balance Sheet Returns a standardized Balance Sheet based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>Response</returns>
        public Response GetFinancialsBalanceSheet(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string))
        {
            var localVarResponse = GetFinancialsBalanceSheetWithHttpInfo(id, periodicity, schema, reportStatus, currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Balance Sheet Returns a standardized Balance Sheet based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse<Response> GetFinancialsBalanceSheetWithHttpInfo(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling FinancialsApi->GetFinancialsBalanceSheet");
            }

            FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (periodicity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "periodicity", periodicity));
            }
            if (schema != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            }
            if (reportStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "reportStatus", reportStatus));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFinancialsBalanceSheetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Response>("/balance-sheet", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinancialsBalanceSheet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Balance Sheet Returns a standardized Balance Sheet based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response>GetFinancialsBalanceSheetAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFinancialsBalanceSheetWithHttpInfoAsync(id, periodicity, schema, reportStatus, currency, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Balance Sheet Returns a standardized Balance Sheet based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Response>> GetFinancialsBalanceSheetWithHttpInfoAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling FinancialsApi->GetFinancialsBalanceSheet");
            }


            FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (periodicity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "periodicity", periodicity));
            }
            if (schema != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            }
            if (reportStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "reportStatus", reportStatus));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFinancialsBalanceSheetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Response>("/balance-sheet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinancialsBalanceSheet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cash Flow Returns a standardized Cash Flow based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>Response</returns>
        public Response GetFinancialsCashFlow(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string))
        {
            var localVarResponse = GetFinancialsCashFlowWithHttpInfo(id, periodicity, schema, reportStatus, currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cash Flow Returns a standardized Cash Flow based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse<Response> GetFinancialsCashFlowWithHttpInfo(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling FinancialsApi->GetFinancialsCashFlow");
            }

            FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (periodicity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "periodicity", periodicity));
            }
            if (schema != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            }
            if (reportStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "reportStatus", reportStatus));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFinancialsCashFlowResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Response>("/cash-flow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinancialsCashFlow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Cash Flow Returns a standardized Cash Flow based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response>GetFinancialsCashFlowAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFinancialsCashFlowWithHttpInfoAsync(id, periodicity, schema, reportStatus, currency, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cash Flow Returns a standardized Cash Flow based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Response>> GetFinancialsCashFlowWithHttpInfoAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling FinancialsApi->GetFinancialsCashFlow");
            }


            FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (periodicity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "periodicity", periodicity));
            }
            if (schema != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            }
            if (reportStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "reportStatus", reportStatus));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFinancialsCashFlowResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Response>("/cash-flow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinancialsCashFlow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Income Statement Returns a standardized Income Statement based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>Response</returns>
        public Response GetFinancialsIncomeStatement(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string))
        {
            var localVarResponse = GetFinancialsIncomeStatementWithHttpInfo(id, periodicity, schema, reportStatus, currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Income Statement Returns a standardized Income Statement based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse<Response> GetFinancialsIncomeStatementWithHttpInfo(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling FinancialsApi->GetFinancialsIncomeStatement");
            }

            FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (periodicity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "periodicity", periodicity));
            }
            if (schema != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            }
            if (reportStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "reportStatus", reportStatus));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFinancialsIncomeStatementResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Response>("/income-statement", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinancialsIncomeStatement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Income Statement Returns a standardized Income Statement based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response>GetFinancialsIncomeStatementAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFinancialsIncomeStatementWithHttpInfoAsync(id, periodicity, schema, reportStatus, currency, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Income Statement Returns a standardized Income Statement based on industry.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company Ticker</param>
        /// <param name="periodicity">Periodicity or frequency of the fiscal periods. (optional, default to INTERIM)</param>
        /// <param name="schema">The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns  (optional, default to table_parent_child_columns)</param>
        /// <param name="reportStatus">Return historical periods as originally reported or retroactively restated (for M&amp;A, accounting changes, and other events). The following are descriptions for the accepted values: - RESTATED - retroactively restated data. - NON-RESTATED - originally reported data.   (optional, default to RESTATED)</param>
        /// <param name="currency">Currency code for currency values. \&quot;LOCAL\&quot; will return the security&#39;s pricing currency. \&quot;RPT\&quot; will return the company&#39;s reporting currency (which may differ from \&quot;LOCAL\&quot; for some companies). For a list of other currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Response>> GetFinancialsIncomeStatementWithHttpInfoAsync(string id, string periodicity = default(string), string schema = default(string), string reportStatus = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling FinancialsApi->GetFinancialsIncomeStatement");
            }


            FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFundamentalsReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (periodicity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "periodicity", periodicity));
            }
            if (schema != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            }
            if (reportStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "reportStatus", reportStatus));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFundamentalsReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFinancialsIncomeStatementResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Response>("/income-statement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinancialsIncomeStatement", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
