/*
 * Tick History
 *
 * <p>FactSetâ€™s Tick History provides cost-effective access to real-time and delayed global exchange data. Proprietary technology normalizes over 200 global exchanges and 19 tick history fields. Asset types integrated include equities, futures, options, fixed income, mutual funds, ETFs, indices, commodities, and FX rates.</p><p>Tick History provides dynamic access to tick data for a specific security intra-day or historically via standard HTTPS protocol. History is available for all quotes and trades for a trailing 6 months or 1-year, respectively. Quotes and trade data for Options is available for 30 days. Tick History data is also available in a separate end-of-day feed.</p>   
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetIntradayTickHistory.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetIntradayTickHistory.Model
{
    /// <summary>
    /// All available fields in service. FID &#x3D; Field ID Number.
    /// </summary>
    [DataContract(Name = "fields")]
    public partial class Fields : IEquatable<Fields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fields" /> class.
        /// </summary>
        /// <param name="bID1">The last bid price or last bid price in an interval. FID # 100.</param>
        /// <param name="bIDVOL1">The volume of the last bid in an interval. FID # 104.</param>
        /// <param name="bIDEXCH1">The volume of the last bid or last bid in an interval. FID # 107. Enumeration Table 7.</param>
        /// <param name="aSK1">The last ask price or last ask price in an interval. FID # 200.</param>
        /// <param name="aSKVOL1">The volume of the last ask or last ask in an interval. FID # 204.</param>
        /// <param name="aSKEXCH1">The exchange of the last ask or last ask in an interval. FID # 207. Enumeration Table 7..</param>
        /// <param name="lAST1">The last trade price or last trade price in an interval. FID # 300.</param>
        /// <param name="lASTDATE1">The date of the last trade or last trade in an interval. FID # 301.</param>
        /// <param name="lASTTIME1">The time of the last trade or last trade in an interval. FID # 302.</param>
        /// <param name="lASTVOL1">The trade volume, or the sum of all trade volumes inside a bin. FID # 304.</param>
        /// <param name="lASTEXCH1">The exchange of the last trade or last trade in an interval. FID # 307. Enumeration Table 7.</param>
        /// <param name="cUMVOL">The symbol&#39;s daily cumulative volume, or the last cumulative volume in an interval. FID # 601.</param>
        /// <param name="vWAP">The daily volume weighted average price, or the last VWAP in an interval. FID # 603.</param>
        /// <param name="oPEN1">The first trade of an interval. FID # 710.</param>
        /// <param name="hIGH1">The highest trade price in an interval. FID # 720.</param>
        /// <param name="lOW1">The lowest trade price in an interval. FID # 723.</param>
        /// <param name="tRADECONDITION">Trade Condition. FID # 2709.</param>
        /// <param name="gMTOFFSET">GMT Offset in Minutes. FID # 2037.</param>
        /// <param name="pRICECURRENCY">Price Currency Code. FID # 2032.</param>
        public Fields(float bID1 = default(float), int bIDVOL1 = default(int), string bIDEXCH1 = default(string), float aSK1 = default(float), int aSKVOL1 = default(int), string aSKEXCH1 = default(string), float lAST1 = default(float), string lASTDATE1 = default(string), string lASTTIME1 = default(string), int lASTVOL1 = default(int), string lASTEXCH1 = default(string), int cUMVOL = default(int), float vWAP = default(float), float oPEN1 = default(float), float hIGH1 = default(float), float lOW1 = default(float), string tRADECONDITION = default(string), int gMTOFFSET = default(int), string pRICECURRENCY = default(string))
        {
            this.BID1 = bID1;
            this.BIDVOL1 = bIDVOL1;
            this.BIDEXCH1 = bIDEXCH1;
            this.ASK1 = aSK1;
            this.ASKVOL1 = aSKVOL1;
            this.ASKEXCH1 = aSKEXCH1;
            this.LAST1 = lAST1;
            this.LASTDATE1 = lASTDATE1;
            this.LASTTIME1 = lASTTIME1;
            this.LASTVOL1 = lASTVOL1;
            this.LASTEXCH1 = lASTEXCH1;
            this.CUM_VOL = cUMVOL;
            this.VWAP = vWAP;
            this.OPEN1 = oPEN1;
            this.HIGH1 = hIGH1;
            this.LOW1 = lOW1;
            this.TRADE_CONDITION = tRADECONDITION;
            this.GMT_OFFSET = gMTOFFSET;
            this.PRICE_CURRENCY = pRICECURRENCY;
        }

        /// <summary>
        /// The last bid price or last bid price in an interval. FID # 100
        /// </summary>
        /// <value>The last bid price or last bid price in an interval. FID # 100</value>
        [DataMember(Name = "BID_1", EmitDefaultValue = false)]
        public float BID1 { get; set; }

        /// <summary>
        /// The volume of the last bid in an interval. FID # 104
        /// </summary>
        /// <value>The volume of the last bid in an interval. FID # 104</value>
        [DataMember(Name = "BID_VOL_1", EmitDefaultValue = false)]
        public int BIDVOL1 { get; set; }

        /// <summary>
        /// The volume of the last bid or last bid in an interval. FID # 107. Enumeration Table 7
        /// </summary>
        /// <value>The volume of the last bid or last bid in an interval. FID # 107. Enumeration Table 7</value>
        [DataMember(Name = "BID_EXCH_1", EmitDefaultValue = false)]
        public string BIDEXCH1 { get; set; }

        /// <summary>
        /// The last ask price or last ask price in an interval. FID # 200
        /// </summary>
        /// <value>The last ask price or last ask price in an interval. FID # 200</value>
        [DataMember(Name = "ASK_1", EmitDefaultValue = false)]
        public float ASK1 { get; set; }

        /// <summary>
        /// The volume of the last ask or last ask in an interval. FID # 204
        /// </summary>
        /// <value>The volume of the last ask or last ask in an interval. FID # 204</value>
        [DataMember(Name = "ASK_VOL_1", EmitDefaultValue = false)]
        public int ASKVOL1 { get; set; }

        /// <summary>
        /// The exchange of the last ask or last ask in an interval. FID # 207. Enumeration Table 7.
        /// </summary>
        /// <value>The exchange of the last ask or last ask in an interval. FID # 207. Enumeration Table 7.</value>
        [DataMember(Name = "ASK_EXCH_1", EmitDefaultValue = false)]
        public string ASKEXCH1 { get; set; }

        /// <summary>
        /// The last trade price or last trade price in an interval. FID # 300
        /// </summary>
        /// <value>The last trade price or last trade price in an interval. FID # 300</value>
        [DataMember(Name = "LAST_1", EmitDefaultValue = false)]
        public float LAST1 { get; set; }

        /// <summary>
        /// The date of the last trade or last trade in an interval. FID # 301
        /// </summary>
        /// <value>The date of the last trade or last trade in an interval. FID # 301</value>
        [DataMember(Name = "LAST_DATE_1", EmitDefaultValue = false)]
        public string LASTDATE1 { get; set; }

        /// <summary>
        /// The time of the last trade or last trade in an interval. FID # 302
        /// </summary>
        /// <value>The time of the last trade or last trade in an interval. FID # 302</value>
        [DataMember(Name = "LAST_TIME_1", EmitDefaultValue = false)]
        public string LASTTIME1 { get; set; }

        /// <summary>
        /// The trade volume, or the sum of all trade volumes inside a bin. FID # 304
        /// </summary>
        /// <value>The trade volume, or the sum of all trade volumes inside a bin. FID # 304</value>
        [DataMember(Name = "LAST_VOL_1", EmitDefaultValue = false)]
        public int LASTVOL1 { get; set; }

        /// <summary>
        /// The exchange of the last trade or last trade in an interval. FID # 307. Enumeration Table 7
        /// </summary>
        /// <value>The exchange of the last trade or last trade in an interval. FID # 307. Enumeration Table 7</value>
        [DataMember(Name = "LAST_EXCH_1", EmitDefaultValue = false)]
        public string LASTEXCH1 { get; set; }

        /// <summary>
        /// The symbol&#39;s daily cumulative volume, or the last cumulative volume in an interval. FID # 601
        /// </summary>
        /// <value>The symbol&#39;s daily cumulative volume, or the last cumulative volume in an interval. FID # 601</value>
        [DataMember(Name = "CUM_VOL", EmitDefaultValue = false)]
        public int CUM_VOL { get; set; }

        /// <summary>
        /// The daily volume weighted average price, or the last VWAP in an interval. FID # 603
        /// </summary>
        /// <value>The daily volume weighted average price, or the last VWAP in an interval. FID # 603</value>
        [DataMember(Name = "VWAP", EmitDefaultValue = false)]
        public float VWAP { get; set; }

        /// <summary>
        /// The first trade of an interval. FID # 710
        /// </summary>
        /// <value>The first trade of an interval. FID # 710</value>
        [DataMember(Name = "OPEN_1", EmitDefaultValue = false)]
        public float OPEN1 { get; set; }

        /// <summary>
        /// The highest trade price in an interval. FID # 720
        /// </summary>
        /// <value>The highest trade price in an interval. FID # 720</value>
        [DataMember(Name = "HIGH_1", EmitDefaultValue = false)]
        public float HIGH1 { get; set; }

        /// <summary>
        /// The lowest trade price in an interval. FID # 723
        /// </summary>
        /// <value>The lowest trade price in an interval. FID # 723</value>
        [DataMember(Name = "LOW_1", EmitDefaultValue = false)]
        public float LOW1 { get; set; }

        /// <summary>
        /// Trade Condition. FID # 2709
        /// </summary>
        /// <value>Trade Condition. FID # 2709</value>
        [DataMember(Name = "TRADE_CONDITION", EmitDefaultValue = false)]
        public string TRADE_CONDITION { get; set; }

        /// <summary>
        /// GMT Offset in Minutes. FID # 2037
        /// </summary>
        /// <value>GMT Offset in Minutes. FID # 2037</value>
        [DataMember(Name = "GMT_OFFSET", EmitDefaultValue = false)]
        public int GMT_OFFSET { get; set; }

        /// <summary>
        /// Price Currency Code. FID # 2032
        /// </summary>
        /// <value>Price Currency Code. FID # 2032</value>
        [DataMember(Name = "PRICE_CURRENCY", EmitDefaultValue = false)]
        public string PRICE_CURRENCY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Fields {\n");
            sb.Append("  BID1: ").Append(BID1).Append("\n");
            sb.Append("  BIDVOL1: ").Append(BIDVOL1).Append("\n");
            sb.Append("  BIDEXCH1: ").Append(BIDEXCH1).Append("\n");
            sb.Append("  ASK1: ").Append(ASK1).Append("\n");
            sb.Append("  ASKVOL1: ").Append(ASKVOL1).Append("\n");
            sb.Append("  ASKEXCH1: ").Append(ASKEXCH1).Append("\n");
            sb.Append("  LAST1: ").Append(LAST1).Append("\n");
            sb.Append("  LASTDATE1: ").Append(LASTDATE1).Append("\n");
            sb.Append("  LASTTIME1: ").Append(LASTTIME1).Append("\n");
            sb.Append("  LASTVOL1: ").Append(LASTVOL1).Append("\n");
            sb.Append("  LASTEXCH1: ").Append(LASTEXCH1).Append("\n");
            sb.Append("  CUM_VOL: ").Append(CUM_VOL).Append("\n");
            sb.Append("  VWAP: ").Append(VWAP).Append("\n");
            sb.Append("  OPEN1: ").Append(OPEN1).Append("\n");
            sb.Append("  HIGH1: ").Append(HIGH1).Append("\n");
            sb.Append("  LOW1: ").Append(LOW1).Append("\n");
            sb.Append("  TRADE_CONDITION: ").Append(TRADE_CONDITION).Append("\n");
            sb.Append("  GMT_OFFSET: ").Append(GMT_OFFSET).Append("\n");
            sb.Append("  PRICE_CURRENCY: ").Append(PRICE_CURRENCY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fields);
        }

        /// <summary>
        /// Returns true if Fields instances are equal
        /// </summary>
        /// <param name="input">Instance of Fields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fields input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BID1 == input.BID1 ||
                    this.BID1.Equals(input.BID1)
                ) && 
                (
                    this.BIDVOL1 == input.BIDVOL1 ||
                    this.BIDVOL1.Equals(input.BIDVOL1)
                ) && 
                (
                    this.BIDEXCH1 == input.BIDEXCH1 ||
                    (this.BIDEXCH1 != null &&
                    this.BIDEXCH1.Equals(input.BIDEXCH1))
                ) && 
                (
                    this.ASK1 == input.ASK1 ||
                    this.ASK1.Equals(input.ASK1)
                ) && 
                (
                    this.ASKVOL1 == input.ASKVOL1 ||
                    this.ASKVOL1.Equals(input.ASKVOL1)
                ) && 
                (
                    this.ASKEXCH1 == input.ASKEXCH1 ||
                    (this.ASKEXCH1 != null &&
                    this.ASKEXCH1.Equals(input.ASKEXCH1))
                ) && 
                (
                    this.LAST1 == input.LAST1 ||
                    this.LAST1.Equals(input.LAST1)
                ) && 
                (
                    this.LASTDATE1 == input.LASTDATE1 ||
                    (this.LASTDATE1 != null &&
                    this.LASTDATE1.Equals(input.LASTDATE1))
                ) && 
                (
                    this.LASTTIME1 == input.LASTTIME1 ||
                    (this.LASTTIME1 != null &&
                    this.LASTTIME1.Equals(input.LASTTIME1))
                ) && 
                (
                    this.LASTVOL1 == input.LASTVOL1 ||
                    this.LASTVOL1.Equals(input.LASTVOL1)
                ) && 
                (
                    this.LASTEXCH1 == input.LASTEXCH1 ||
                    (this.LASTEXCH1 != null &&
                    this.LASTEXCH1.Equals(input.LASTEXCH1))
                ) && 
                (
                    this.CUM_VOL == input.CUM_VOL ||
                    this.CUM_VOL.Equals(input.CUM_VOL)
                ) && 
                (
                    this.VWAP == input.VWAP ||
                    this.VWAP.Equals(input.VWAP)
                ) && 
                (
                    this.OPEN1 == input.OPEN1 ||
                    this.OPEN1.Equals(input.OPEN1)
                ) && 
                (
                    this.HIGH1 == input.HIGH1 ||
                    this.HIGH1.Equals(input.HIGH1)
                ) && 
                (
                    this.LOW1 == input.LOW1 ||
                    this.LOW1.Equals(input.LOW1)
                ) && 
                (
                    this.TRADE_CONDITION == input.TRADE_CONDITION ||
                    (this.TRADE_CONDITION != null &&
                    this.TRADE_CONDITION.Equals(input.TRADE_CONDITION))
                ) && 
                (
                    this.GMT_OFFSET == input.GMT_OFFSET ||
                    this.GMT_OFFSET.Equals(input.GMT_OFFSET)
                ) && 
                (
                    this.PRICE_CURRENCY == input.PRICE_CURRENCY ||
                    (this.PRICE_CURRENCY != null &&
                    this.PRICE_CURRENCY.Equals(input.PRICE_CURRENCY))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BID1.GetHashCode();
                hashCode = (hashCode * 59) + this.BIDVOL1.GetHashCode();
                if (this.BIDEXCH1 != null)
                {
                    hashCode = (hashCode * 59) + this.BIDEXCH1.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ASK1.GetHashCode();
                hashCode = (hashCode * 59) + this.ASKVOL1.GetHashCode();
                if (this.ASKEXCH1 != null)
                {
                    hashCode = (hashCode * 59) + this.ASKEXCH1.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LAST1.GetHashCode();
                if (this.LASTDATE1 != null)
                {
                    hashCode = (hashCode * 59) + this.LASTDATE1.GetHashCode();
                }
                if (this.LASTTIME1 != null)
                {
                    hashCode = (hashCode * 59) + this.LASTTIME1.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LASTVOL1.GetHashCode();
                if (this.LASTEXCH1 != null)
                {
                    hashCode = (hashCode * 59) + this.LASTEXCH1.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CUM_VOL.GetHashCode();
                hashCode = (hashCode * 59) + this.VWAP.GetHashCode();
                hashCode = (hashCode * 59) + this.OPEN1.GetHashCode();
                hashCode = (hashCode * 59) + this.HIGH1.GetHashCode();
                hashCode = (hashCode * 59) + this.LOW1.GetHashCode();
                if (this.TRADE_CONDITION != null)
                {
                    hashCode = (hashCode * 59) + this.TRADE_CONDITION.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GMT_OFFSET.GetHashCode();
                if (this.PRICE_CURRENCY != null)
                {
                    hashCode = (hashCode * 59) + this.PRICE_CURRENCY.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
