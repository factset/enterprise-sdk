/*
 * Tick History
 *
 * <p>FactSetâ€™s Tick History provides cost-effective access to real-time and delayed global exchange data. Proprietary technology normalizes over 200 global exchanges and 19 tick history fields. Asset types integrated include equities, futures, options, fixed income, mutual funds, ETFs, indices, commodities, and FX rates.</p><p>Tick History provides dynamic access to tick data for a specific security intra-day or historically via standard HTTPS protocol. History is available for all quotes and trades for a trailing 6 months or 1-year, respectively. Quotes and trade data for Options is available for 30 days. Tick History data is also available in a separate end-of-day feed.</p>   
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetIntradayTickHistory.Client;
using FactSet.SDK.FactSetIntradayTickHistory.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetIntradayTickHistory.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITickHistoryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Tick History service returns trade data and associated quotes for a client specified interval and time period
        /// </summary>
        /// <remarks>
        /// When using an HTTP GET request, the seach criteria is sent via the query string in the URL. Please make sure that all requests contain a date within the past trailing year. Fields are added using ampersands, with enumerations seperated by commas. &lt;p&gt;**Try it Out** - references a sandbox environment to simulate live reponses. Available &#x60;id&#x60; is limited to BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA. Current day data is not available.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetIntradayTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Requested symbol or security. The symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. **NOTE**: Only one identifier can be requested per request.&lt;P&gt;**TRY IT OUT** - Choose One from - BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response. (optional)</param>
        /// <param name="format">The format of the output file. **TRY IT OUT** Choose from JSON, CSV, CSV_NO_HEADER (optional, default to XML)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). See definitions for details. Default is all fields when left blank. (optional)</param>
        /// <param name="sd">This is the start date for the Snapshot History. Requests should be made in the format **YYYYMMDD**. Default is current business day. Field can be sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="ed">This is the end date for teh Snapshot History. Requests should be made in the format **YYYYMMDD**. If the period requested is larger than Max. Days requested, results will be limited to the Max Days starting at sd/date. Defautl is sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="st">Requested start time. This is the start time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;040000&quot;)</param>
        /// <param name="et">Requested end time. This is the end time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;200000&quot;)</param>
        /// <param name="interval">Requested time interval. This is the interval the data is returned from the service. Possible values from 1 Second (1S) to 1 Hour (1H). A maximum of 10 Tick History Requests and a maximum of 100,000 rows of data may be made in any one-minute period. Additional subsctiption is available to access 20 requests/200,000 rows of data per minute. Contact your FactSet team for details. (optional, default to 1M)</param>
        /// <param name="includeRequest">Flag to include request id and key in the CSV output. (optional, default to false)</param>
        /// <param name="dataset">Decides what type of trades to return, default is all trades and quotes, alternatively charting can be selected which will filter out unofficial trades. (optional)</param>
        /// <returns>TickhistoryResponse</returns>
        TickhistoryResponse GetTickHistory(string id, string reqId = default(string), string format = default(string), string fields = default(string), string sd = default(string), string ed = default(string), string st = default(string), string et = default(string), string interval = default(string), string includeRequest = default(string), string dataset = default(string));

        /// <summary>
        /// Tick History service returns trade data and associated quotes for a client specified interval and time period
        /// </summary>
        /// <remarks>
        /// When using an HTTP GET request, the seach criteria is sent via the query string in the URL. Please make sure that all requests contain a date within the past trailing year. Fields are added using ampersands, with enumerations seperated by commas. &lt;p&gt;**Try it Out** - references a sandbox environment to simulate live reponses. Available &#x60;id&#x60; is limited to BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA. Current day data is not available.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetIntradayTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Requested symbol or security. The symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. **NOTE**: Only one identifier can be requested per request.&lt;P&gt;**TRY IT OUT** - Choose One from - BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response. (optional)</param>
        /// <param name="format">The format of the output file. **TRY IT OUT** Choose from JSON, CSV, CSV_NO_HEADER (optional, default to XML)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). See definitions for details. Default is all fields when left blank. (optional)</param>
        /// <param name="sd">This is the start date for the Snapshot History. Requests should be made in the format **YYYYMMDD**. Default is current business day. Field can be sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="ed">This is the end date for teh Snapshot History. Requests should be made in the format **YYYYMMDD**. If the period requested is larger than Max. Days requested, results will be limited to the Max Days starting at sd/date. Defautl is sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="st">Requested start time. This is the start time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;040000&quot;)</param>
        /// <param name="et">Requested end time. This is the end time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;200000&quot;)</param>
        /// <param name="interval">Requested time interval. This is the interval the data is returned from the service. Possible values from 1 Second (1S) to 1 Hour (1H). A maximum of 10 Tick History Requests and a maximum of 100,000 rows of data may be made in any one-minute period. Additional subsctiption is available to access 20 requests/200,000 rows of data per minute. Contact your FactSet team for details. (optional, default to 1M)</param>
        /// <param name="includeRequest">Flag to include request id and key in the CSV output. (optional, default to false)</param>
        /// <param name="dataset">Decides what type of trades to return, default is all trades and quotes, alternatively charting can be selected which will filter out unofficial trades. (optional)</param>
        /// <returns>ApiResponse of TickhistoryResponse</returns>
        ApiResponse<TickhistoryResponse> GetTickHistoryWithHttpInfo(string id, string reqId = default(string), string format = default(string), string fields = default(string), string sd = default(string), string ed = default(string), string st = default(string), string et = default(string), string interval = default(string), string includeRequest = default(string), string dataset = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITickHistoryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Tick History service returns trade data and associated quotes for a client specified interval and time period
        /// </summary>
        /// <remarks>
        /// When using an HTTP GET request, the seach criteria is sent via the query string in the URL. Please make sure that all requests contain a date within the past trailing year. Fields are added using ampersands, with enumerations seperated by commas. &lt;p&gt;**Try it Out** - references a sandbox environment to simulate live reponses. Available &#x60;id&#x60; is limited to BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA. Current day data is not available.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetIntradayTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Requested symbol or security. The symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. **NOTE**: Only one identifier can be requested per request.&lt;P&gt;**TRY IT OUT** - Choose One from - BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response. (optional)</param>
        /// <param name="format">The format of the output file. **TRY IT OUT** Choose from JSON, CSV, CSV_NO_HEADER (optional, default to XML)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). See definitions for details. Default is all fields when left blank. (optional)</param>
        /// <param name="sd">This is the start date for the Snapshot History. Requests should be made in the format **YYYYMMDD**. Default is current business day. Field can be sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="ed">This is the end date for teh Snapshot History. Requests should be made in the format **YYYYMMDD**. If the period requested is larger than Max. Days requested, results will be limited to the Max Days starting at sd/date. Defautl is sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="st">Requested start time. This is the start time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;040000&quot;)</param>
        /// <param name="et">Requested end time. This is the end time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;200000&quot;)</param>
        /// <param name="interval">Requested time interval. This is the interval the data is returned from the service. Possible values from 1 Second (1S) to 1 Hour (1H). A maximum of 10 Tick History Requests and a maximum of 100,000 rows of data may be made in any one-minute period. Additional subsctiption is available to access 20 requests/200,000 rows of data per minute. Contact your FactSet team for details. (optional, default to 1M)</param>
        /// <param name="includeRequest">Flag to include request id and key in the CSV output. (optional, default to false)</param>
        /// <param name="dataset">Decides what type of trades to return, default is all trades and quotes, alternatively charting can be selected which will filter out unofficial trades. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TickhistoryResponse</returns>
        System.Threading.Tasks.Task<TickhistoryResponse> GetTickHistoryAsync(string id, string reqId = default(string), string format = default(string), string fields = default(string), string sd = default(string), string ed = default(string), string st = default(string), string et = default(string), string interval = default(string), string includeRequest = default(string), string dataset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tick History service returns trade data and associated quotes for a client specified interval and time period
        /// </summary>
        /// <remarks>
        /// When using an HTTP GET request, the seach criteria is sent via the query string in the URL. Please make sure that all requests contain a date within the past trailing year. Fields are added using ampersands, with enumerations seperated by commas. &lt;p&gt;**Try it Out** - references a sandbox environment to simulate live reponses. Available &#x60;id&#x60; is limited to BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA. Current day data is not available.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetIntradayTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Requested symbol or security. The symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. **NOTE**: Only one identifier can be requested per request.&lt;P&gt;**TRY IT OUT** - Choose One from - BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response. (optional)</param>
        /// <param name="format">The format of the output file. **TRY IT OUT** Choose from JSON, CSV, CSV_NO_HEADER (optional, default to XML)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). See definitions for details. Default is all fields when left blank. (optional)</param>
        /// <param name="sd">This is the start date for the Snapshot History. Requests should be made in the format **YYYYMMDD**. Default is current business day. Field can be sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="ed">This is the end date for teh Snapshot History. Requests should be made in the format **YYYYMMDD**. If the period requested is larger than Max. Days requested, results will be limited to the Max Days starting at sd/date. Defautl is sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="st">Requested start time. This is the start time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;040000&quot;)</param>
        /// <param name="et">Requested end time. This is the end time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;200000&quot;)</param>
        /// <param name="interval">Requested time interval. This is the interval the data is returned from the service. Possible values from 1 Second (1S) to 1 Hour (1H). A maximum of 10 Tick History Requests and a maximum of 100,000 rows of data may be made in any one-minute period. Additional subsctiption is available to access 20 requests/200,000 rows of data per minute. Contact your FactSet team for details. (optional, default to 1M)</param>
        /// <param name="includeRequest">Flag to include request id and key in the CSV output. (optional, default to false)</param>
        /// <param name="dataset">Decides what type of trades to return, default is all trades and quotes, alternatively charting can be selected which will filter out unofficial trades. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TickhistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TickhistoryResponse>> GetTickHistoryWithHttpInfoAsync(string id, string reqId = default(string), string format = default(string), string fields = default(string), string sd = default(string), string ed = default(string), string st = default(string), string et = default(string), string interval = default(string), string includeRequest = default(string), string dataset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITickHistoryApi : ITickHistoryApiSync, ITickHistoryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TickHistoryApi : ITickHistoryApi
    {
        private FactSet.SDK.FactSetIntradayTickHistory.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetTickHistoryResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(TickhistoryResponse) },
            { (HttpStatusCode)401, typeof(Object) },
            { (HttpStatusCode)403, typeof(Object) },
            { (HttpStatusCode)405, typeof(Object) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="TickHistoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TickHistoryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TickHistoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TickHistoryApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetIntradayTickHistory.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetIntradayTickHistory.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetIntradayTickHistory.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetIntradayTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetIntradayTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetIntradayTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TickHistoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TickHistoryApi(FactSet.SDK.FactSetIntradayTickHistory.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetIntradayTickHistory.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetIntradayTickHistory.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetIntradayTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetIntradayTickHistory.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetIntradayTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TickHistoryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TickHistoryApi(FactSet.SDK.FactSetIntradayTickHistory.Client.ISynchronousClient client, FactSet.SDK.FactSetIntradayTickHistory.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetIntradayTickHistory.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetIntradayTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetIntradayTickHistory.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetIntradayTickHistory.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetIntradayTickHistory.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetIntradayTickHistory.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Tick History service returns trade data and associated quotes for a client specified interval and time period When using an HTTP GET request, the seach criteria is sent via the query string in the URL. Please make sure that all requests contain a date within the past trailing year. Fields are added using ampersands, with enumerations seperated by commas. &lt;p&gt;**Try it Out** - references a sandbox environment to simulate live reponses. Available &#x60;id&#x60; is limited to BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA. Current day data is not available.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetIntradayTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Requested symbol or security. The symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. **NOTE**: Only one identifier can be requested per request.&lt;P&gt;**TRY IT OUT** - Choose One from - BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response. (optional)</param>
        /// <param name="format">The format of the output file. **TRY IT OUT** Choose from JSON, CSV, CSV_NO_HEADER (optional, default to XML)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). See definitions for details. Default is all fields when left blank. (optional)</param>
        /// <param name="sd">This is the start date for the Snapshot History. Requests should be made in the format **YYYYMMDD**. Default is current business day. Field can be sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="ed">This is the end date for teh Snapshot History. Requests should be made in the format **YYYYMMDD**. If the period requested is larger than Max. Days requested, results will be limited to the Max Days starting at sd/date. Defautl is sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="st">Requested start time. This is the start time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;040000&quot;)</param>
        /// <param name="et">Requested end time. This is the end time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;200000&quot;)</param>
        /// <param name="interval">Requested time interval. This is the interval the data is returned from the service. Possible values from 1 Second (1S) to 1 Hour (1H). A maximum of 10 Tick History Requests and a maximum of 100,000 rows of data may be made in any one-minute period. Additional subsctiption is available to access 20 requests/200,000 rows of data per minute. Contact your FactSet team for details. (optional, default to 1M)</param>
        /// <param name="includeRequest">Flag to include request id and key in the CSV output. (optional, default to false)</param>
        /// <param name="dataset">Decides what type of trades to return, default is all trades and quotes, alternatively charting can be selected which will filter out unofficial trades. (optional)</param>
        /// <returns>TickhistoryResponse</returns>
        public TickhistoryResponse GetTickHistory(string id, string reqId = default(string), string format = default(string), string fields = default(string), string sd = default(string), string ed = default(string), string st = default(string), string et = default(string), string interval = default(string), string includeRequest = default(string), string dataset = default(string))
        {
            var localVarResponse = GetTickHistoryWithHttpInfo(id, reqId, format, fields, sd, ed, st, et, interval, includeRequest, dataset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tick History service returns trade data and associated quotes for a client specified interval and time period When using an HTTP GET request, the seach criteria is sent via the query string in the URL. Please make sure that all requests contain a date within the past trailing year. Fields are added using ampersands, with enumerations seperated by commas. &lt;p&gt;**Try it Out** - references a sandbox environment to simulate live reponses. Available &#x60;id&#x60; is limited to BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA. Current day data is not available.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetIntradayTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Requested symbol or security. The symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. **NOTE**: Only one identifier can be requested per request.&lt;P&gt;**TRY IT OUT** - Choose One from - BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response. (optional)</param>
        /// <param name="format">The format of the output file. **TRY IT OUT** Choose from JSON, CSV, CSV_NO_HEADER (optional, default to XML)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). See definitions for details. Default is all fields when left blank. (optional)</param>
        /// <param name="sd">This is the start date for the Snapshot History. Requests should be made in the format **YYYYMMDD**. Default is current business day. Field can be sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="ed">This is the end date for teh Snapshot History. Requests should be made in the format **YYYYMMDD**. If the period requested is larger than Max. Days requested, results will be limited to the Max Days starting at sd/date. Defautl is sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="st">Requested start time. This is the start time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;040000&quot;)</param>
        /// <param name="et">Requested end time. This is the end time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;200000&quot;)</param>
        /// <param name="interval">Requested time interval. This is the interval the data is returned from the service. Possible values from 1 Second (1S) to 1 Hour (1H). A maximum of 10 Tick History Requests and a maximum of 100,000 rows of data may be made in any one-minute period. Additional subsctiption is available to access 20 requests/200,000 rows of data per minute. Contact your FactSet team for details. (optional, default to 1M)</param>
        /// <param name="includeRequest">Flag to include request id and key in the CSV output. (optional, default to false)</param>
        /// <param name="dataset">Decides what type of trades to return, default is all trades and quotes, alternatively charting can be selected which will filter out unofficial trades. (optional)</param>
        /// <returns>ApiResponse of TickhistoryResponse</returns>
        public ApiResponse<TickhistoryResponse> GetTickHistoryWithHttpInfo(string id, string reqId = default(string), string format = default(string), string fields = default(string), string sd = default(string), string ed = default(string), string st = default(string), string et = default(string), string interval = default(string), string includeRequest = default(string), string dataset = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetIntradayTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling TickHistoryApi->GetTickHistory");
            }

            FactSet.SDK.FactSetIntradayTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetIntradayTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/csv"
            };

            var localVarContentType = FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (reqId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "req_id", reqId));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (sd != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "sd", sd));
            }
            if (ed != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "ed", ed));
            }
            if (st != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "st", st));
            }
            if (et != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "et", et));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (includeRequest != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "include_request", includeRequest));
            }
            if (dataset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "dataset", dataset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTickHistoryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            TickhistoryResponse>("/TickHistory/history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTickHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Tick History service returns trade data and associated quotes for a client specified interval and time period When using an HTTP GET request, the seach criteria is sent via the query string in the URL. Please make sure that all requests contain a date within the past trailing year. Fields are added using ampersands, with enumerations seperated by commas. &lt;p&gt;**Try it Out** - references a sandbox environment to simulate live reponses. Available &#x60;id&#x60; is limited to BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA. Current day data is not available.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetIntradayTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Requested symbol or security. The symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. **NOTE**: Only one identifier can be requested per request.&lt;P&gt;**TRY IT OUT** - Choose One from - BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response. (optional)</param>
        /// <param name="format">The format of the output file. **TRY IT OUT** Choose from JSON, CSV, CSV_NO_HEADER (optional, default to XML)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). See definitions for details. Default is all fields when left blank. (optional)</param>
        /// <param name="sd">This is the start date for the Snapshot History. Requests should be made in the format **YYYYMMDD**. Default is current business day. Field can be sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="ed">This is the end date for teh Snapshot History. Requests should be made in the format **YYYYMMDD**. If the period requested is larger than Max. Days requested, results will be limited to the Max Days starting at sd/date. Defautl is sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="st">Requested start time. This is the start time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;040000&quot;)</param>
        /// <param name="et">Requested end time. This is the end time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;200000&quot;)</param>
        /// <param name="interval">Requested time interval. This is the interval the data is returned from the service. Possible values from 1 Second (1S) to 1 Hour (1H). A maximum of 10 Tick History Requests and a maximum of 100,000 rows of data may be made in any one-minute period. Additional subsctiption is available to access 20 requests/200,000 rows of data per minute. Contact your FactSet team for details. (optional, default to 1M)</param>
        /// <param name="includeRequest">Flag to include request id and key in the CSV output. (optional, default to false)</param>
        /// <param name="dataset">Decides what type of trades to return, default is all trades and quotes, alternatively charting can be selected which will filter out unofficial trades. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TickhistoryResponse</returns>
        public async System.Threading.Tasks.Task<TickhistoryResponse>GetTickHistoryAsync(string id, string reqId = default(string), string format = default(string), string fields = default(string), string sd = default(string), string ed = default(string), string st = default(string), string et = default(string), string interval = default(string), string includeRequest = default(string), string dataset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTickHistoryWithHttpInfoAsync(id, reqId, format, fields, sd, ed, st, et, interval, includeRequest, dataset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tick History service returns trade data and associated quotes for a client specified interval and time period When using an HTTP GET request, the seach criteria is sent via the query string in the URL. Please make sure that all requests contain a date within the past trailing year. Fields are added using ampersands, with enumerations seperated by commas. &lt;p&gt;**Try it Out** - references a sandbox environment to simulate live reponses. Available &#x60;id&#x60; is limited to BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA. Current day data is not available.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetIntradayTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Requested symbol or security. The symbol can be a FactSet exchange symbol, CUSIP, or SEDOL. **NOTE**: Only one identifier can be requested per request.&lt;P&gt;**TRY IT OUT** - Choose One from - BABA-USA,WALMEX-MX,7203-TKS,VOD-LON,NPN-JSE,MABAX,NZF,SPY-USA,AGG-USA,GLD-USA,AOR-USA,MNA-USA,UUP-USA,SP50-SPX,ESX-STX,XAO-ASX,WD-MSX,NG00-USA,GC00-USA,CC00-USA,C00-USA,FC00-USA,ER00-USA,EURUSD-FX1,USDMXN-FX1,AUDJPY-FX1,EURCZK-FX1,USDILS-FX1,USDZAR-FX1,US10YY-TU1,FDS#190621C00145000-USA,FDS#190621P00145000-USA</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response. (optional)</param>
        /// <param name="format">The format of the output file. **TRY IT OUT** Choose from JSON, CSV, CSV_NO_HEADER (optional, default to XML)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). See definitions for details. Default is all fields when left blank. (optional)</param>
        /// <param name="sd">This is the start date for the Snapshot History. Requests should be made in the format **YYYYMMDD**. Default is current business day. Field can be sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="ed">This is the end date for teh Snapshot History. Requests should be made in the format **YYYYMMDD**. If the period requested is larger than Max. Days requested, results will be limited to the Max Days starting at sd/date. Defautl is sd or date. **TRY IT OUT** Cannot use current day. (optional)</param>
        /// <param name="st">Requested start time. This is the start time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;040000&quot;)</param>
        /// <param name="et">Requested end time. This is the end time for the snapshot history requested. Requests should be made in a **HHMMSSS** format. Range from 000000 - 235959. **TRY IT OUT** Cannot use current day. (optional, default to &quot;200000&quot;)</param>
        /// <param name="interval">Requested time interval. This is the interval the data is returned from the service. Possible values from 1 Second (1S) to 1 Hour (1H). A maximum of 10 Tick History Requests and a maximum of 100,000 rows of data may be made in any one-minute period. Additional subsctiption is available to access 20 requests/200,000 rows of data per minute. Contact your FactSet team for details. (optional, default to 1M)</param>
        /// <param name="includeRequest">Flag to include request id and key in the CSV output. (optional, default to false)</param>
        /// <param name="dataset">Decides what type of trades to return, default is all trades and quotes, alternatively charting can be selected which will filter out unofficial trades. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TickhistoryResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TickhistoryResponse>> GetTickHistoryWithHttpInfoAsync(string id, string reqId = default(string), string format = default(string), string fields = default(string), string sd = default(string), string ed = default(string), string st = default(string), string et = default(string), string interval = default(string), string includeRequest = default(string), string dataset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetIntradayTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling TickHistoryApi->GetTickHistory");
            }


            FactSet.SDK.FactSetIntradayTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetIntradayTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/csv"
            };

            var localVarContentType = FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (reqId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "req_id", reqId));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (sd != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "sd", sd));
            }
            if (ed != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "ed", ed));
            }
            if (st != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "st", st));
            }
            if (et != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "et", et));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (includeRequest != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "include_request", includeRequest));
            }
            if (dataset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.ParameterToMultiMap("", "dataset", dataset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetIntradayTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTickHistoryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TickhistoryResponse>("/TickHistory/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTickHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
