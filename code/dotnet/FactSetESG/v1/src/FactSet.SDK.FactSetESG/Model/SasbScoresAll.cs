/*
 * FactSet ESG API
 *
 * FactSet ESG (powered by FactSet Truvalue Labs) applies machine learning to uncover risks and opportunities from companies' Environmental, Social and Governance (ESG) behavior, which are aggregated and categorized into continuously updated, material ESG scores. The service focuses on company ESG behavior from external sources and includes both positive and negative events that go beyond traditional sources of ESG risk data.<p> FactSet ESG extracts, analyzes, and generates scores from millions of documents each month collected from more than 100,000 data sources in over 30 languages. Sources include news, trade journals, NGOs, watchdog groups, trade blogs, industry reports and social media. Products deliver investable insights by revealing value and risk factors from unstructured data at the speed of current events.</p> 
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetESG.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetESG.Model
{
    /// <summary>
    /// SasbScoresAll
    /// </summary>
    [DataContract(Name = "sasbScoresAll")]
    public partial class SasbScoresAll : IEquatable<SasbScoresAll>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SasbScoresAll" /> class.
        /// </summary>
        /// <param name="date">Date for the period requested expressed in YYYY-MM-DD format..</param>
        /// <param name="fsymId">FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E)..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="scoreType">The name of the specific SASB Score type being shown in the response. This will be represented by the scoreTypes input: PULSE, INSIGHT, MOMENTUM, ART_VOL_TTM, CAT_VOL_TTM, or DYNAMIC_MAT..</param>
        /// <param name="accessAndAffordability">The Access and Affordability SASB Category..</param>
        /// <param name="airQuality">The Air Quality SASB Category..</param>
        /// <param name="allCategories">The All Categories Category. This represents the overall SASB Score for the given &#39;scoreType&#39;. When scoreType &#x3D; ESG_RANK, the data type will be string, otherwise data type will be a number with double format..</param>
        /// <param name="businessEthics">The Business Ethics Category..</param>
        /// <param name="businessModelResilience">The Business Model Resilience Category..</param>
        /// <param name="competitiveBehavior">The Competitive Behavior Category..</param>
        /// <param name="criticalIncidentRiskManagement">The Critical Incident Risk Management Category..</param>
        /// <param name="customerPrivacy">The Customer Privacy Category..</param>
        /// <param name="customerWelfare">The Customer Welfare Category..</param>
        /// <param name="dataSecurity">The Data Security Category..</param>
        /// <param name="ecologicalImpacts">The Ecological Impacts Category..</param>
        /// <param name="employeeEngagementDiversityandInclusion">The Employee Engagement Diversity and Inclusion Category..</param>
        /// <param name="employeeHealthAndSafety">The Employee Health And Safety Category..</param>
        /// <param name="energyManagement">The Energy Management Category..</param>
        /// <param name="gHGEmissions">The Greenhouse Gases Emissions Category..</param>
        /// <param name="humanRightsandCommunityRelations">The Human Rights and Community Relations Category..</param>
        /// <param name="laborPractices">The Labor Practices Category..</param>
        /// <param name="managementOfTheLegalAndRegulatoryEnvironment">The Management of the Legal and Regulatory Environment Category..</param>
        /// <param name="materialsSourcingAndEfficiency">The Materials Sourcing and Efficiency Category..</param>
        /// <param name="materiality">The Materiality Category. When scoreType &#x3D; ESG_RANK, the data type will be string, otherwise data type will be a number with double format..</param>
        /// <param name="physicalImpactsOfClimateChange">The Physical Impacts of Climate Change Category..</param>
        /// <param name="productQualityAndSafety">The Product Quality and Safety Category..</param>
        /// <param name="productDesignAndLifecycleManagement">The Product Design And Lifecycle Management Category..</param>
        /// <param name="sellingPracticesAndProductLabeling">The Selling Practices And Product Labeling Category..</param>
        /// <param name="supplyChainManagement">The Supply Chain Management Category..</param>
        /// <param name="systemicRiskManagement">The Systemic Risk Management Category..</param>
        /// <param name="wasteAndHazardousMaterialsManagement">The Waste and Hazardous Materials Management Category..</param>
        /// <param name="waterAndWastewaterManagement">The Water and Wastewater Management Category..</param>
        public SasbScoresAll(DateTime? date = default(DateTime?), string fsymId = default(string), string requestId = default(string), string scoreType = default(string), double? accessAndAffordability = default(double?), double? airQuality = default(double?), double? allCategories = default(double?), double? businessEthics = default(double?), double? businessModelResilience = default(double?), double? competitiveBehavior = default(double?), double? criticalIncidentRiskManagement = default(double?), double? customerPrivacy = default(double?), double? customerWelfare = default(double?), double? dataSecurity = default(double?), double? ecologicalImpacts = default(double?), double? employeeEngagementDiversityandInclusion = default(double?), double? employeeHealthAndSafety = default(double?), double? energyManagement = default(double?), double? gHGEmissions = default(double?), double? humanRightsandCommunityRelations = default(double?), double? laborPractices = default(double?), double? managementOfTheLegalAndRegulatoryEnvironment = default(double?), double? materialsSourcingAndEfficiency = default(double?), double? materiality = default(double?), double? physicalImpactsOfClimateChange = default(double?), double? productQualityAndSafety = default(double?), double? productDesignAndLifecycleManagement = default(double?), double? sellingPracticesAndProductLabeling = default(double?), double? supplyChainManagement = default(double?), double? systemicRiskManagement = default(double?), double? wasteAndHazardousMaterialsManagement = default(double?), double? waterAndWastewaterManagement = default(double?))
        {
            this.Date = date;
            this.FsymId = fsymId;
            this.RequestId = requestId;
            this.ScoreType = scoreType;
            this.AccessAndAffordability = accessAndAffordability;
            this.AirQuality = airQuality;
            this.AllCategories = allCategories;
            this.BusinessEthics = businessEthics;
            this.BusinessModelResilience = businessModelResilience;
            this.CompetitiveBehavior = competitiveBehavior;
            this.CriticalIncidentRiskManagement = criticalIncidentRiskManagement;
            this.CustomerPrivacy = customerPrivacy;
            this.CustomerWelfare = customerWelfare;
            this.DataSecurity = dataSecurity;
            this.EcologicalImpacts = ecologicalImpacts;
            this.EmployeeEngagementDiversityandInclusion = employeeEngagementDiversityandInclusion;
            this.EmployeeHealthAndSafety = employeeHealthAndSafety;
            this.EnergyManagement = energyManagement;
            this.GHGEmissions = gHGEmissions;
            this.HumanRightsandCommunityRelations = humanRightsandCommunityRelations;
            this.LaborPractices = laborPractices;
            this.ManagementOfTheLegalAndRegulatoryEnvironment = managementOfTheLegalAndRegulatoryEnvironment;
            this.MaterialsSourcingAndEfficiency = materialsSourcingAndEfficiency;
            this.Materiality = materiality;
            this.PhysicalImpactsOfClimateChange = physicalImpactsOfClimateChange;
            this.ProductQualityAndSafety = productQualityAndSafety;
            this.ProductDesignAndLifecycleManagement = productDesignAndLifecycleManagement;
            this.SellingPracticesAndProductLabeling = sellingPracticesAndProductLabeling;
            this.SupplyChainManagement = supplyChainManagement;
            this.SystemicRiskManagement = systemicRiskManagement;
            this.WasteAndHazardousMaterialsManagement = wasteAndHazardousMaterialsManagement;
            this.WaterAndWastewaterManagement = waterAndWastewaterManagement;
        }

        /// <summary>
        /// Date for the period requested expressed in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date for the period requested expressed in YYYY-MM-DD format.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).
        /// </summary>
        /// <value>FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// The name of the specific SASB Score type being shown in the response. This will be represented by the scoreTypes input: PULSE, INSIGHT, MOMENTUM, ART_VOL_TTM, CAT_VOL_TTM, or DYNAMIC_MAT.
        /// </summary>
        /// <value>The name of the specific SASB Score type being shown in the response. This will be represented by the scoreTypes input: PULSE, INSIGHT, MOMENTUM, ART_VOL_TTM, CAT_VOL_TTM, or DYNAMIC_MAT.</value>
        [DataMember(Name = "scoreType", EmitDefaultValue = true)]
        public string ScoreType { get; set; }

        /// <summary>
        /// The Access and Affordability SASB Category.
        /// </summary>
        /// <value>The Access and Affordability SASB Category.</value>
        [DataMember(Name = "accessAndAffordability", EmitDefaultValue = true)]
        public double? AccessAndAffordability { get; set; }

        /// <summary>
        /// The Air Quality SASB Category.
        /// </summary>
        /// <value>The Air Quality SASB Category.</value>
        [DataMember(Name = "airQuality", EmitDefaultValue = true)]
        public double? AirQuality { get; set; }

        /// <summary>
        /// The All Categories Category. This represents the overall SASB Score for the given &#39;scoreType&#39;. When scoreType &#x3D; ESG_RANK, the data type will be string, otherwise data type will be a number with double format.
        /// </summary>
        /// <value>The All Categories Category. This represents the overall SASB Score for the given &#39;scoreType&#39;. When scoreType &#x3D; ESG_RANK, the data type will be string, otherwise data type will be a number with double format.</value>
        [DataMember(Name = "allCategories", EmitDefaultValue = true)]
        public double? AllCategories { get; set; }

        /// <summary>
        /// The Business Ethics Category.
        /// </summary>
        /// <value>The Business Ethics Category.</value>
        [DataMember(Name = "businessEthics", EmitDefaultValue = true)]
        public double? BusinessEthics { get; set; }

        /// <summary>
        /// The Business Model Resilience Category.
        /// </summary>
        /// <value>The Business Model Resilience Category.</value>
        [DataMember(Name = "businessModelResilience", EmitDefaultValue = true)]
        public double? BusinessModelResilience { get; set; }

        /// <summary>
        /// The Competitive Behavior Category.
        /// </summary>
        /// <value>The Competitive Behavior Category.</value>
        [DataMember(Name = "competitiveBehavior", EmitDefaultValue = true)]
        public double? CompetitiveBehavior { get; set; }

        /// <summary>
        /// The Critical Incident Risk Management Category.
        /// </summary>
        /// <value>The Critical Incident Risk Management Category.</value>
        [DataMember(Name = "criticalIncidentRiskManagement", EmitDefaultValue = true)]
        public double? CriticalIncidentRiskManagement { get; set; }

        /// <summary>
        /// The Customer Privacy Category.
        /// </summary>
        /// <value>The Customer Privacy Category.</value>
        [DataMember(Name = "customerPrivacy", EmitDefaultValue = true)]
        public double? CustomerPrivacy { get; set; }

        /// <summary>
        /// The Customer Welfare Category.
        /// </summary>
        /// <value>The Customer Welfare Category.</value>
        [DataMember(Name = "customerWelfare", EmitDefaultValue = true)]
        public double? CustomerWelfare { get; set; }

        /// <summary>
        /// The Data Security Category.
        /// </summary>
        /// <value>The Data Security Category.</value>
        [DataMember(Name = "dataSecurity", EmitDefaultValue = true)]
        public double? DataSecurity { get; set; }

        /// <summary>
        /// The Ecological Impacts Category.
        /// </summary>
        /// <value>The Ecological Impacts Category.</value>
        [DataMember(Name = "ecologicalImpacts", EmitDefaultValue = true)]
        public double? EcologicalImpacts { get; set; }

        /// <summary>
        /// The Employee Engagement Diversity and Inclusion Category.
        /// </summary>
        /// <value>The Employee Engagement Diversity and Inclusion Category.</value>
        [DataMember(Name = "employeeEngagementDiversityandInclusion", EmitDefaultValue = true)]
        public double? EmployeeEngagementDiversityandInclusion { get; set; }

        /// <summary>
        /// The Employee Health And Safety Category.
        /// </summary>
        /// <value>The Employee Health And Safety Category.</value>
        [DataMember(Name = "employeeHealthAndSafety", EmitDefaultValue = true)]
        public double? EmployeeHealthAndSafety { get; set; }

        /// <summary>
        /// The Energy Management Category.
        /// </summary>
        /// <value>The Energy Management Category.</value>
        [DataMember(Name = "energyManagement", EmitDefaultValue = true)]
        public double? EnergyManagement { get; set; }

        /// <summary>
        /// The Greenhouse Gases Emissions Category.
        /// </summary>
        /// <value>The Greenhouse Gases Emissions Category.</value>
        [DataMember(Name = "gHGEmissions", EmitDefaultValue = true)]
        public double? GHGEmissions { get; set; }

        /// <summary>
        /// The Human Rights and Community Relations Category.
        /// </summary>
        /// <value>The Human Rights and Community Relations Category.</value>
        [DataMember(Name = "humanRightsandCommunityRelations", EmitDefaultValue = true)]
        public double? HumanRightsandCommunityRelations { get; set; }

        /// <summary>
        /// The Labor Practices Category.
        /// </summary>
        /// <value>The Labor Practices Category.</value>
        [DataMember(Name = "laborPractices", EmitDefaultValue = true)]
        public double? LaborPractices { get; set; }

        /// <summary>
        /// The Management of the Legal and Regulatory Environment Category.
        /// </summary>
        /// <value>The Management of the Legal and Regulatory Environment Category.</value>
        [DataMember(Name = "managementOfTheLegalAndRegulatoryEnvironment", EmitDefaultValue = true)]
        public double? ManagementOfTheLegalAndRegulatoryEnvironment { get; set; }

        /// <summary>
        /// The Materials Sourcing and Efficiency Category.
        /// </summary>
        /// <value>The Materials Sourcing and Efficiency Category.</value>
        [DataMember(Name = "materialsSourcingAndEfficiency", EmitDefaultValue = true)]
        public double? MaterialsSourcingAndEfficiency { get; set; }

        /// <summary>
        /// The Materiality Category. When scoreType &#x3D; ESG_RANK, the data type will be string, otherwise data type will be a number with double format.
        /// </summary>
        /// <value>The Materiality Category. When scoreType &#x3D; ESG_RANK, the data type will be string, otherwise data type will be a number with double format.</value>
        [DataMember(Name = "materiality", EmitDefaultValue = true)]
        public double? Materiality { get; set; }

        /// <summary>
        /// The Physical Impacts of Climate Change Category.
        /// </summary>
        /// <value>The Physical Impacts of Climate Change Category.</value>
        [DataMember(Name = "physicalImpactsOfClimateChange", EmitDefaultValue = true)]
        public double? PhysicalImpactsOfClimateChange { get; set; }

        /// <summary>
        /// The Product Quality and Safety Category.
        /// </summary>
        /// <value>The Product Quality and Safety Category.</value>
        [DataMember(Name = "productQualityAndSafety", EmitDefaultValue = true)]
        public double? ProductQualityAndSafety { get; set; }

        /// <summary>
        /// The Product Design And Lifecycle Management Category.
        /// </summary>
        /// <value>The Product Design And Lifecycle Management Category.</value>
        [DataMember(Name = "productDesignAndLifecycleManagement", EmitDefaultValue = true)]
        public double? ProductDesignAndLifecycleManagement { get; set; }

        /// <summary>
        /// The Selling Practices And Product Labeling Category.
        /// </summary>
        /// <value>The Selling Practices And Product Labeling Category.</value>
        [DataMember(Name = "sellingPracticesAndProductLabeling", EmitDefaultValue = true)]
        public double? SellingPracticesAndProductLabeling { get; set; }

        /// <summary>
        /// The Supply Chain Management Category.
        /// </summary>
        /// <value>The Supply Chain Management Category.</value>
        [DataMember(Name = "supplyChainManagement", EmitDefaultValue = true)]
        public double? SupplyChainManagement { get; set; }

        /// <summary>
        /// The Systemic Risk Management Category.
        /// </summary>
        /// <value>The Systemic Risk Management Category.</value>
        [DataMember(Name = "systemicRiskManagement", EmitDefaultValue = true)]
        public double? SystemicRiskManagement { get; set; }

        /// <summary>
        /// The Waste and Hazardous Materials Management Category.
        /// </summary>
        /// <value>The Waste and Hazardous Materials Management Category.</value>
        [DataMember(Name = "wasteAndHazardousMaterialsManagement", EmitDefaultValue = true)]
        public double? WasteAndHazardousMaterialsManagement { get; set; }

        /// <summary>
        /// The Water and Wastewater Management Category.
        /// </summary>
        /// <value>The Water and Wastewater Management Category.</value>
        [DataMember(Name = "waterAndWastewaterManagement", EmitDefaultValue = true)]
        public double? WaterAndWastewaterManagement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SasbScoresAll {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  ScoreType: ").Append(ScoreType).Append("\n");
            sb.Append("  AccessAndAffordability: ").Append(AccessAndAffordability).Append("\n");
            sb.Append("  AirQuality: ").Append(AirQuality).Append("\n");
            sb.Append("  AllCategories: ").Append(AllCategories).Append("\n");
            sb.Append("  BusinessEthics: ").Append(BusinessEthics).Append("\n");
            sb.Append("  BusinessModelResilience: ").Append(BusinessModelResilience).Append("\n");
            sb.Append("  CompetitiveBehavior: ").Append(CompetitiveBehavior).Append("\n");
            sb.Append("  CriticalIncidentRiskManagement: ").Append(CriticalIncidentRiskManagement).Append("\n");
            sb.Append("  CustomerPrivacy: ").Append(CustomerPrivacy).Append("\n");
            sb.Append("  CustomerWelfare: ").Append(CustomerWelfare).Append("\n");
            sb.Append("  DataSecurity: ").Append(DataSecurity).Append("\n");
            sb.Append("  EcologicalImpacts: ").Append(EcologicalImpacts).Append("\n");
            sb.Append("  EmployeeEngagementDiversityandInclusion: ").Append(EmployeeEngagementDiversityandInclusion).Append("\n");
            sb.Append("  EmployeeHealthAndSafety: ").Append(EmployeeHealthAndSafety).Append("\n");
            sb.Append("  EnergyManagement: ").Append(EnergyManagement).Append("\n");
            sb.Append("  GHGEmissions: ").Append(GHGEmissions).Append("\n");
            sb.Append("  HumanRightsandCommunityRelations: ").Append(HumanRightsandCommunityRelations).Append("\n");
            sb.Append("  LaborPractices: ").Append(LaborPractices).Append("\n");
            sb.Append("  ManagementOfTheLegalAndRegulatoryEnvironment: ").Append(ManagementOfTheLegalAndRegulatoryEnvironment).Append("\n");
            sb.Append("  MaterialsSourcingAndEfficiency: ").Append(MaterialsSourcingAndEfficiency).Append("\n");
            sb.Append("  Materiality: ").Append(Materiality).Append("\n");
            sb.Append("  PhysicalImpactsOfClimateChange: ").Append(PhysicalImpactsOfClimateChange).Append("\n");
            sb.Append("  ProductQualityAndSafety: ").Append(ProductQualityAndSafety).Append("\n");
            sb.Append("  ProductDesignAndLifecycleManagement: ").Append(ProductDesignAndLifecycleManagement).Append("\n");
            sb.Append("  SellingPracticesAndProductLabeling: ").Append(SellingPracticesAndProductLabeling).Append("\n");
            sb.Append("  SupplyChainManagement: ").Append(SupplyChainManagement).Append("\n");
            sb.Append("  SystemicRiskManagement: ").Append(SystemicRiskManagement).Append("\n");
            sb.Append("  WasteAndHazardousMaterialsManagement: ").Append(WasteAndHazardousMaterialsManagement).Append("\n");
            sb.Append("  WaterAndWastewaterManagement: ").Append(WaterAndWastewaterManagement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SasbScoresAll);
        }

        /// <summary>
        /// Returns true if SasbScoresAll instances are equal
        /// </summary>
        /// <param name="input">Instance of SasbScoresAll to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SasbScoresAll input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.ScoreType == input.ScoreType ||
                    (this.ScoreType != null &&
                    this.ScoreType.Equals(input.ScoreType))
                ) && 
                (
                    this.AccessAndAffordability == input.AccessAndAffordability ||
                    (this.AccessAndAffordability != null &&
                    this.AccessAndAffordability.Equals(input.AccessAndAffordability))
                ) && 
                (
                    this.AirQuality == input.AirQuality ||
                    (this.AirQuality != null &&
                    this.AirQuality.Equals(input.AirQuality))
                ) && 
                (
                    this.AllCategories == input.AllCategories ||
                    (this.AllCategories != null &&
                    this.AllCategories.Equals(input.AllCategories))
                ) && 
                (
                    this.BusinessEthics == input.BusinessEthics ||
                    (this.BusinessEthics != null &&
                    this.BusinessEthics.Equals(input.BusinessEthics))
                ) && 
                (
                    this.BusinessModelResilience == input.BusinessModelResilience ||
                    (this.BusinessModelResilience != null &&
                    this.BusinessModelResilience.Equals(input.BusinessModelResilience))
                ) && 
                (
                    this.CompetitiveBehavior == input.CompetitiveBehavior ||
                    (this.CompetitiveBehavior != null &&
                    this.CompetitiveBehavior.Equals(input.CompetitiveBehavior))
                ) && 
                (
                    this.CriticalIncidentRiskManagement == input.CriticalIncidentRiskManagement ||
                    (this.CriticalIncidentRiskManagement != null &&
                    this.CriticalIncidentRiskManagement.Equals(input.CriticalIncidentRiskManagement))
                ) && 
                (
                    this.CustomerPrivacy == input.CustomerPrivacy ||
                    (this.CustomerPrivacy != null &&
                    this.CustomerPrivacy.Equals(input.CustomerPrivacy))
                ) && 
                (
                    this.CustomerWelfare == input.CustomerWelfare ||
                    (this.CustomerWelfare != null &&
                    this.CustomerWelfare.Equals(input.CustomerWelfare))
                ) && 
                (
                    this.DataSecurity == input.DataSecurity ||
                    (this.DataSecurity != null &&
                    this.DataSecurity.Equals(input.DataSecurity))
                ) && 
                (
                    this.EcologicalImpacts == input.EcologicalImpacts ||
                    (this.EcologicalImpacts != null &&
                    this.EcologicalImpacts.Equals(input.EcologicalImpacts))
                ) && 
                (
                    this.EmployeeEngagementDiversityandInclusion == input.EmployeeEngagementDiversityandInclusion ||
                    (this.EmployeeEngagementDiversityandInclusion != null &&
                    this.EmployeeEngagementDiversityandInclusion.Equals(input.EmployeeEngagementDiversityandInclusion))
                ) && 
                (
                    this.EmployeeHealthAndSafety == input.EmployeeHealthAndSafety ||
                    (this.EmployeeHealthAndSafety != null &&
                    this.EmployeeHealthAndSafety.Equals(input.EmployeeHealthAndSafety))
                ) && 
                (
                    this.EnergyManagement == input.EnergyManagement ||
                    (this.EnergyManagement != null &&
                    this.EnergyManagement.Equals(input.EnergyManagement))
                ) && 
                (
                    this.GHGEmissions == input.GHGEmissions ||
                    (this.GHGEmissions != null &&
                    this.GHGEmissions.Equals(input.GHGEmissions))
                ) && 
                (
                    this.HumanRightsandCommunityRelations == input.HumanRightsandCommunityRelations ||
                    (this.HumanRightsandCommunityRelations != null &&
                    this.HumanRightsandCommunityRelations.Equals(input.HumanRightsandCommunityRelations))
                ) && 
                (
                    this.LaborPractices == input.LaborPractices ||
                    (this.LaborPractices != null &&
                    this.LaborPractices.Equals(input.LaborPractices))
                ) && 
                (
                    this.ManagementOfTheLegalAndRegulatoryEnvironment == input.ManagementOfTheLegalAndRegulatoryEnvironment ||
                    (this.ManagementOfTheLegalAndRegulatoryEnvironment != null &&
                    this.ManagementOfTheLegalAndRegulatoryEnvironment.Equals(input.ManagementOfTheLegalAndRegulatoryEnvironment))
                ) && 
                (
                    this.MaterialsSourcingAndEfficiency == input.MaterialsSourcingAndEfficiency ||
                    (this.MaterialsSourcingAndEfficiency != null &&
                    this.MaterialsSourcingAndEfficiency.Equals(input.MaterialsSourcingAndEfficiency))
                ) && 
                (
                    this.Materiality == input.Materiality ||
                    (this.Materiality != null &&
                    this.Materiality.Equals(input.Materiality))
                ) && 
                (
                    this.PhysicalImpactsOfClimateChange == input.PhysicalImpactsOfClimateChange ||
                    (this.PhysicalImpactsOfClimateChange != null &&
                    this.PhysicalImpactsOfClimateChange.Equals(input.PhysicalImpactsOfClimateChange))
                ) && 
                (
                    this.ProductQualityAndSafety == input.ProductQualityAndSafety ||
                    (this.ProductQualityAndSafety != null &&
                    this.ProductQualityAndSafety.Equals(input.ProductQualityAndSafety))
                ) && 
                (
                    this.ProductDesignAndLifecycleManagement == input.ProductDesignAndLifecycleManagement ||
                    (this.ProductDesignAndLifecycleManagement != null &&
                    this.ProductDesignAndLifecycleManagement.Equals(input.ProductDesignAndLifecycleManagement))
                ) && 
                (
                    this.SellingPracticesAndProductLabeling == input.SellingPracticesAndProductLabeling ||
                    (this.SellingPracticesAndProductLabeling != null &&
                    this.SellingPracticesAndProductLabeling.Equals(input.SellingPracticesAndProductLabeling))
                ) && 
                (
                    this.SupplyChainManagement == input.SupplyChainManagement ||
                    (this.SupplyChainManagement != null &&
                    this.SupplyChainManagement.Equals(input.SupplyChainManagement))
                ) && 
                (
                    this.SystemicRiskManagement == input.SystemicRiskManagement ||
                    (this.SystemicRiskManagement != null &&
                    this.SystemicRiskManagement.Equals(input.SystemicRiskManagement))
                ) && 
                (
                    this.WasteAndHazardousMaterialsManagement == input.WasteAndHazardousMaterialsManagement ||
                    (this.WasteAndHazardousMaterialsManagement != null &&
                    this.WasteAndHazardousMaterialsManagement.Equals(input.WasteAndHazardousMaterialsManagement))
                ) && 
                (
                    this.WaterAndWastewaterManagement == input.WaterAndWastewaterManagement ||
                    (this.WaterAndWastewaterManagement != null &&
                    this.WaterAndWastewaterManagement.Equals(input.WaterAndWastewaterManagement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.ScoreType != null)
                {
                    hashCode = (hashCode * 59) + this.ScoreType.GetHashCode();
                }
                if (this.AccessAndAffordability != null)
                {
                    hashCode = (hashCode * 59) + this.AccessAndAffordability.GetHashCode();
                }
                if (this.AirQuality != null)
                {
                    hashCode = (hashCode * 59) + this.AirQuality.GetHashCode();
                }
                if (this.AllCategories != null)
                {
                    hashCode = (hashCode * 59) + this.AllCategories.GetHashCode();
                }
                if (this.BusinessEthics != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessEthics.GetHashCode();
                }
                if (this.BusinessModelResilience != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessModelResilience.GetHashCode();
                }
                if (this.CompetitiveBehavior != null)
                {
                    hashCode = (hashCode * 59) + this.CompetitiveBehavior.GetHashCode();
                }
                if (this.CriticalIncidentRiskManagement != null)
                {
                    hashCode = (hashCode * 59) + this.CriticalIncidentRiskManagement.GetHashCode();
                }
                if (this.CustomerPrivacy != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerPrivacy.GetHashCode();
                }
                if (this.CustomerWelfare != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerWelfare.GetHashCode();
                }
                if (this.DataSecurity != null)
                {
                    hashCode = (hashCode * 59) + this.DataSecurity.GetHashCode();
                }
                if (this.EcologicalImpacts != null)
                {
                    hashCode = (hashCode * 59) + this.EcologicalImpacts.GetHashCode();
                }
                if (this.EmployeeEngagementDiversityandInclusion != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeEngagementDiversityandInclusion.GetHashCode();
                }
                if (this.EmployeeHealthAndSafety != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeHealthAndSafety.GetHashCode();
                }
                if (this.EnergyManagement != null)
                {
                    hashCode = (hashCode * 59) + this.EnergyManagement.GetHashCode();
                }
                if (this.GHGEmissions != null)
                {
                    hashCode = (hashCode * 59) + this.GHGEmissions.GetHashCode();
                }
                if (this.HumanRightsandCommunityRelations != null)
                {
                    hashCode = (hashCode * 59) + this.HumanRightsandCommunityRelations.GetHashCode();
                }
                if (this.LaborPractices != null)
                {
                    hashCode = (hashCode * 59) + this.LaborPractices.GetHashCode();
                }
                if (this.ManagementOfTheLegalAndRegulatoryEnvironment != null)
                {
                    hashCode = (hashCode * 59) + this.ManagementOfTheLegalAndRegulatoryEnvironment.GetHashCode();
                }
                if (this.MaterialsSourcingAndEfficiency != null)
                {
                    hashCode = (hashCode * 59) + this.MaterialsSourcingAndEfficiency.GetHashCode();
                }
                if (this.Materiality != null)
                {
                    hashCode = (hashCode * 59) + this.Materiality.GetHashCode();
                }
                if (this.PhysicalImpactsOfClimateChange != null)
                {
                    hashCode = (hashCode * 59) + this.PhysicalImpactsOfClimateChange.GetHashCode();
                }
                if (this.ProductQualityAndSafety != null)
                {
                    hashCode = (hashCode * 59) + this.ProductQualityAndSafety.GetHashCode();
                }
                if (this.ProductDesignAndLifecycleManagement != null)
                {
                    hashCode = (hashCode * 59) + this.ProductDesignAndLifecycleManagement.GetHashCode();
                }
                if (this.SellingPracticesAndProductLabeling != null)
                {
                    hashCode = (hashCode * 59) + this.SellingPracticesAndProductLabeling.GetHashCode();
                }
                if (this.SupplyChainManagement != null)
                {
                    hashCode = (hashCode * 59) + this.SupplyChainManagement.GetHashCode();
                }
                if (this.SystemicRiskManagement != null)
                {
                    hashCode = (hashCode * 59) + this.SystemicRiskManagement.GetHashCode();
                }
                if (this.WasteAndHazardousMaterialsManagement != null)
                {
                    hashCode = (hashCode * 59) + this.WasteAndHazardousMaterialsManagement.GetHashCode();
                }
                if (this.WaterAndWastewaterManagement != null)
                {
                    hashCode = (hashCode * 59) + this.WaterAndWastewaterManagement.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
