/*
 * FactSet ESG API
 *
 * FactSet ESG (powered by FactSet Truvalue) applies Natural Language Processing and Machine Learning to uncover risks and opportunities from companies' Environmental, Social and Governance (ESG) behavior, which are aggregated and categorized into continuously updated, material ESG scores. The service focuses on company ESG behavior from external sources and includes both positive and negative events that go beyond traditional sources of ESG risk data.<p> FactSet ESG extracts, analyzes, and generates scores from millions of documents each month collected from more than 200,000 data sources in over 38 languages. Sources include news, trade journals, NGOs, watchdog groups, trade blogs and industry reports. Products deliver investable insights by revealing value and risk factors from unstructured data at the speed of current events.</p> 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetESG.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetESG.Model
{
    /// <summary>
    /// TVL Spotlights All Object
    /// </summary>
    [DataContract(Name = "Spotlights")]
    public partial class Spotlights : IEquatable<Spotlights>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Spotlights" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Spotlights()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Spotlights" /> class.
        /// </summary>
        /// <param name="factsetEntityId">FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E). (required).</param>
        /// <param name="requestId">Identifier that was used for the request. (required).</param>
        /// <param name="liveDate">Live date of the event..</param>
        /// <param name="pulseOnStartDate">The pulse value on the start date..</param>
        /// <param name="finalArticleDate">The date of the final article related to the entry..</param>
        /// <param name="tvGroupId">Television group ID for the organization..</param>
        /// <param name="primaryArticleUrl">URL of the primary article related to the entry..</param>
        /// <param name="organizationVolumeThreshold">The volume threshold for the organization..</param>
        /// <param name="primaryArticleSource">Source of the primary article..</param>
        /// <param name="standoutLvlOnStartDate">The standout level on the start date..</param>
        /// <param name="pulseOnFinalArticleDate">The pulse score on the final article date..</param>
        /// <param name="firstArticleDate">The date of the first article..</param>
        /// <param name="meanArtScoreStartDate">The mean article score on the start date..</param>
        /// <param name="totalSpotlightVolume">Total spotlight volume..</param>
        /// <param name="primaryArticleBulletpoints">Bulletpoints from the primary article..</param>
        /// <param name="tvOrgName">Name of the television organization..</param>
        /// <param name="startDateVolume">Volume on the start date..</param>
        /// <param name="zScoreOnFinalDate">Z-Score on the final date..</param>
        /// <param name="primaryArticleHeadline">Headline of the primary article..</param>
        /// <param name="meanPulseScore">Mean value of the pulse score..</param>
        /// <param name="spotlightCategory">Category of the spotlight..</param>
        /// <param name="zScoreOnStartDate">Z-Score on the start date..</param>
        /// <param name="meanArtScoreFinalDate">Mean article score on the final date..</param>
        /// <param name="primarySpotlight">Flag to identify if it&#39;s a primary spotlight..</param>
        /// <param name="tvSpotlightId">Television spotlight Identifier..</param>
        /// <param name="removed">Flag to identify if the entry has been removed..</param>
        /// <param name="pulseBeforeFirstArticle">Pulse score before the first article..</param>
        /// <param name="standoutLvlOnFinalDate">The standout level on the final date..</param>
        /// <param name="startDate">Start date of the event..</param>
        /// <param name="status">Status of the event..</param>
        /// <param name="spotlightPillar">Pillar of the spotlight..</param>
        /// <param name="spotlightDimension">Dimension of the spotlight..</param>
        /// <param name="primaryArticleSourceLang">Language of the primary article source..</param>
        /// <param name="error">error.</param>
        public Spotlights(string factsetEntityId, string requestId,DateTime? liveDate = default(DateTime?), decimal? pulseOnStartDate = default(decimal?), DateTime? finalArticleDate = default(DateTime?), string tvGroupId = default(string), string primaryArticleUrl = default(string), int? organizationVolumeThreshold = default(int?), string primaryArticleSource = default(string), string standoutLvlOnStartDate = default(string), decimal? pulseOnFinalArticleDate = default(decimal?), DateTime? firstArticleDate = default(DateTime?), decimal? meanArtScoreStartDate = default(decimal?), int? totalSpotlightVolume = default(int?), string primaryArticleBulletpoints = default(string), string tvOrgName = default(string), int? startDateVolume = default(int?), decimal? zScoreOnFinalDate = default(decimal?), string primaryArticleHeadline = default(string), decimal? meanPulseScore = default(decimal?), string spotlightCategory = default(string), decimal? zScoreOnStartDate = default(decimal?), decimal? meanArtScoreFinalDate = default(decimal?), bool? primarySpotlight = default(bool?), string tvSpotlightId = default(string), bool? removed = default(bool?), decimal? pulseBeforeFirstArticle = default(decimal?), string standoutLvlOnFinalDate = default(string), DateTime? startDate = default(DateTime?), string status = default(string), string spotlightPillar = default(string), string spotlightDimension = default(string), string primaryArticleSourceLang = default(string), InvalidIdErrorObject error = default(InvalidIdErrorObject))
        {
            // to ensure "factsetEntityId" is required (not null)
            if (factsetEntityId == null) {
                throw new ArgumentNullException("factsetEntityId is a required property for Spotlights and cannot be null");
            }
            this.FactsetEntityId = factsetEntityId;
            // to ensure "requestId" is required (not null)
            if (requestId == null) {
                throw new ArgumentNullException("requestId is a required property for Spotlights and cannot be null");
            }
            this.RequestId = requestId;
            this.LiveDate = liveDate;
            this.PulseOnStartDate = pulseOnStartDate;
            this.FinalArticleDate = finalArticleDate;
            this.TvGroupId = tvGroupId;
            this.PrimaryArticleUrl = primaryArticleUrl;
            this.OrganizationVolumeThreshold = organizationVolumeThreshold;
            this.PrimaryArticleSource = primaryArticleSource;
            this.StandoutLvlOnStartDate = standoutLvlOnStartDate;
            this.PulseOnFinalArticleDate = pulseOnFinalArticleDate;
            this.FirstArticleDate = firstArticleDate;
            this.MeanArtScoreStartDate = meanArtScoreStartDate;
            this.TotalSpotlightVolume = totalSpotlightVolume;
            this.PrimaryArticleBulletpoints = primaryArticleBulletpoints;
            this.TvOrgName = tvOrgName;
            this.StartDateVolume = startDateVolume;
            this.ZScoreOnFinalDate = zScoreOnFinalDate;
            this.PrimaryArticleHeadline = primaryArticleHeadline;
            this.MeanPulseScore = meanPulseScore;
            this.SpotlightCategory = spotlightCategory;
            this.ZScoreOnStartDate = zScoreOnStartDate;
            this.MeanArtScoreFinalDate = meanArtScoreFinalDate;
            this.PrimarySpotlight = primarySpotlight;
            this.TvSpotlightId = tvSpotlightId;
            this.Removed = removed;
            this.PulseBeforeFirstArticle = pulseBeforeFirstArticle;
            this.StandoutLvlOnFinalDate = standoutLvlOnFinalDate;
            this.StartDate = startDate;
            this.Status = status;
            this.SpotlightPillar = spotlightPillar;
            this.SpotlightDimension = spotlightDimension;
            this.PrimaryArticleSourceLang = primaryArticleSourceLang;
            this.Error = error;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).
        /// </summary>
        /// <value>FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).</value>
        [DataMember(Name = "factsetEntityId", IsRequired = true, EmitDefaultValue = true)]
        public string FactsetEntityId { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Live date of the event.
        /// </summary>
        /// <value>Live date of the event.</value>
        [DataMember(Name = "liveDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? LiveDate { get; set; }

        /// <summary>
        /// The pulse value on the start date.
        /// </summary>
        /// <value>The pulse value on the start date.</value>
        [DataMember(Name = "pulseOnStartDate", EmitDefaultValue = true)]
        public decimal? PulseOnStartDate { get; set; }

        /// <summary>
        /// The date of the final article related to the entry.
        /// </summary>
        /// <value>The date of the final article related to the entry.</value>
        [DataMember(Name = "finalArticleDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? FinalArticleDate { get; set; }

        /// <summary>
        /// Television group ID for the organization.
        /// </summary>
        /// <value>Television group ID for the organization.</value>
        [DataMember(Name = "tvGroupId", EmitDefaultValue = true)]
        public string TvGroupId { get; set; }

        /// <summary>
        /// URL of the primary article related to the entry.
        /// </summary>
        /// <value>URL of the primary article related to the entry.</value>
        [DataMember(Name = "primaryArticleUrl", EmitDefaultValue = true)]
        public string PrimaryArticleUrl { get; set; }

        /// <summary>
        /// The volume threshold for the organization.
        /// </summary>
        /// <value>The volume threshold for the organization.</value>
        [DataMember(Name = "organizationVolumeThreshold", EmitDefaultValue = true)]
        public int? OrganizationVolumeThreshold { get; set; }

        /// <summary>
        /// Source of the primary article.
        /// </summary>
        /// <value>Source of the primary article.</value>
        [DataMember(Name = "primaryArticleSource", EmitDefaultValue = true)]
        public string PrimaryArticleSource { get; set; }

        /// <summary>
        /// The standout level on the start date.
        /// </summary>
        /// <value>The standout level on the start date.</value>
        [DataMember(Name = "standoutLvlOnStartDate", EmitDefaultValue = true)]
        public string StandoutLvlOnStartDate { get; set; }

        /// <summary>
        /// The pulse score on the final article date.
        /// </summary>
        /// <value>The pulse score on the final article date.</value>
        [DataMember(Name = "pulseOnFinalArticleDate", EmitDefaultValue = true)]
        public decimal? PulseOnFinalArticleDate { get; set; }

        /// <summary>
        /// The date of the first article.
        /// </summary>
        /// <value>The date of the first article.</value>
        [DataMember(Name = "firstArticleDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? FirstArticleDate { get; set; }

        /// <summary>
        /// The mean article score on the start date.
        /// </summary>
        /// <value>The mean article score on the start date.</value>
        [DataMember(Name = "meanArtScoreStartDate", EmitDefaultValue = true)]
        public decimal? MeanArtScoreStartDate { get; set; }

        /// <summary>
        /// Total spotlight volume.
        /// </summary>
        /// <value>Total spotlight volume.</value>
        [DataMember(Name = "totalSpotlightVolume", EmitDefaultValue = true)]
        public int? TotalSpotlightVolume { get; set; }

        /// <summary>
        /// Bulletpoints from the primary article.
        /// </summary>
        /// <value>Bulletpoints from the primary article.</value>
        [DataMember(Name = "primaryArticleBulletpoints", EmitDefaultValue = true)]
        public string PrimaryArticleBulletpoints { get; set; }

        /// <summary>
        /// Name of the television organization.
        /// </summary>
        /// <value>Name of the television organization.</value>
        [DataMember(Name = "tvOrgName", EmitDefaultValue = true)]
        public string TvOrgName { get; set; }

        /// <summary>
        /// Volume on the start date.
        /// </summary>
        /// <value>Volume on the start date.</value>
        [DataMember(Name = "startDateVolume", EmitDefaultValue = true)]
        public int? StartDateVolume { get; set; }

        /// <summary>
        /// Z-Score on the final date.
        /// </summary>
        /// <value>Z-Score on the final date.</value>
        [DataMember(Name = "zScoreOnFinalDate", EmitDefaultValue = true)]
        public decimal? ZScoreOnFinalDate { get; set; }

        /// <summary>
        /// Headline of the primary article.
        /// </summary>
        /// <value>Headline of the primary article.</value>
        [DataMember(Name = "primaryArticleHeadline", EmitDefaultValue = true)]
        public string PrimaryArticleHeadline { get; set; }

        /// <summary>
        /// Mean value of the pulse score.
        /// </summary>
        /// <value>Mean value of the pulse score.</value>
        [DataMember(Name = "meanPulseScore", EmitDefaultValue = true)]
        public decimal? MeanPulseScore { get; set; }

        /// <summary>
        /// Category of the spotlight.
        /// </summary>
        /// <value>Category of the spotlight.</value>
        [DataMember(Name = "spotlightCategory", EmitDefaultValue = true)]
        public string SpotlightCategory { get; set; }

        /// <summary>
        /// Z-Score on the start date.
        /// </summary>
        /// <value>Z-Score on the start date.</value>
        [DataMember(Name = "zScoreOnStartDate", EmitDefaultValue = true)]
        public decimal? ZScoreOnStartDate { get; set; }

        /// <summary>
        /// Mean article score on the final date.
        /// </summary>
        /// <value>Mean article score on the final date.</value>
        [DataMember(Name = "meanArtScoreFinalDate", EmitDefaultValue = true)]
        public decimal? MeanArtScoreFinalDate { get; set; }

        /// <summary>
        /// Flag to identify if it&#39;s a primary spotlight.
        /// </summary>
        /// <value>Flag to identify if it&#39;s a primary spotlight.</value>
        [DataMember(Name = "primarySpotlight", EmitDefaultValue = true)]
        public bool? PrimarySpotlight { get; set; }

        /// <summary>
        /// Television spotlight Identifier.
        /// </summary>
        /// <value>Television spotlight Identifier.</value>
        [DataMember(Name = "tvSpotlightId", EmitDefaultValue = true)]
        public string TvSpotlightId { get; set; }

        /// <summary>
        /// Flag to identify if the entry has been removed.
        /// </summary>
        /// <value>Flag to identify if the entry has been removed.</value>
        [DataMember(Name = "removed", EmitDefaultValue = true)]
        public bool? Removed { get; set; }

        /// <summary>
        /// Pulse score before the first article.
        /// </summary>
        /// <value>Pulse score before the first article.</value>
        [DataMember(Name = "pulseBeforeFirstArticle", EmitDefaultValue = true)]
        public decimal? PulseBeforeFirstArticle { get; set; }

        /// <summary>
        /// The standout level on the final date.
        /// </summary>
        /// <value>The standout level on the final date.</value>
        [DataMember(Name = "standoutLvlOnFinalDate", EmitDefaultValue = true)]
        public string StandoutLvlOnFinalDate { get; set; }

        /// <summary>
        /// Start date of the event.
        /// </summary>
        /// <value>Start date of the event.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Status of the event.
        /// </summary>
        /// <value>Status of the event.</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Pillar of the spotlight.
        /// </summary>
        /// <value>Pillar of the spotlight.</value>
        [DataMember(Name = "spotlightPillar", EmitDefaultValue = true)]
        public string SpotlightPillar { get; set; }

        /// <summary>
        /// Dimension of the spotlight.
        /// </summary>
        /// <value>Dimension of the spotlight.</value>
        [DataMember(Name = "spotlightDimension", EmitDefaultValue = true)]
        public string SpotlightDimension { get; set; }

        /// <summary>
        /// Language of the primary article source.
        /// </summary>
        /// <value>Language of the primary article source.</value>
        [DataMember(Name = "primaryArticleSourceLang", EmitDefaultValue = true)]
        public string PrimaryArticleSourceLang { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public InvalidIdErrorObject Error { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Spotlights {\n");
            sb.Append("  FactsetEntityId: ").Append(FactsetEntityId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  LiveDate: ").Append(LiveDate).Append("\n");
            sb.Append("  PulseOnStartDate: ").Append(PulseOnStartDate).Append("\n");
            sb.Append("  FinalArticleDate: ").Append(FinalArticleDate).Append("\n");
            sb.Append("  TvGroupId: ").Append(TvGroupId).Append("\n");
            sb.Append("  PrimaryArticleUrl: ").Append(PrimaryArticleUrl).Append("\n");
            sb.Append("  OrganizationVolumeThreshold: ").Append(OrganizationVolumeThreshold).Append("\n");
            sb.Append("  PrimaryArticleSource: ").Append(PrimaryArticleSource).Append("\n");
            sb.Append("  StandoutLvlOnStartDate: ").Append(StandoutLvlOnStartDate).Append("\n");
            sb.Append("  PulseOnFinalArticleDate: ").Append(PulseOnFinalArticleDate).Append("\n");
            sb.Append("  FirstArticleDate: ").Append(FirstArticleDate).Append("\n");
            sb.Append("  MeanArtScoreStartDate: ").Append(MeanArtScoreStartDate).Append("\n");
            sb.Append("  TotalSpotlightVolume: ").Append(TotalSpotlightVolume).Append("\n");
            sb.Append("  PrimaryArticleBulletpoints: ").Append(PrimaryArticleBulletpoints).Append("\n");
            sb.Append("  TvOrgName: ").Append(TvOrgName).Append("\n");
            sb.Append("  StartDateVolume: ").Append(StartDateVolume).Append("\n");
            sb.Append("  ZScoreOnFinalDate: ").Append(ZScoreOnFinalDate).Append("\n");
            sb.Append("  PrimaryArticleHeadline: ").Append(PrimaryArticleHeadline).Append("\n");
            sb.Append("  MeanPulseScore: ").Append(MeanPulseScore).Append("\n");
            sb.Append("  SpotlightCategory: ").Append(SpotlightCategory).Append("\n");
            sb.Append("  ZScoreOnStartDate: ").Append(ZScoreOnStartDate).Append("\n");
            sb.Append("  MeanArtScoreFinalDate: ").Append(MeanArtScoreFinalDate).Append("\n");
            sb.Append("  PrimarySpotlight: ").Append(PrimarySpotlight).Append("\n");
            sb.Append("  TvSpotlightId: ").Append(TvSpotlightId).Append("\n");
            sb.Append("  Removed: ").Append(Removed).Append("\n");
            sb.Append("  PulseBeforeFirstArticle: ").Append(PulseBeforeFirstArticle).Append("\n");
            sb.Append("  StandoutLvlOnFinalDate: ").Append(StandoutLvlOnFinalDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SpotlightPillar: ").Append(SpotlightPillar).Append("\n");
            sb.Append("  SpotlightDimension: ").Append(SpotlightDimension).Append("\n");
            sb.Append("  PrimaryArticleSourceLang: ").Append(PrimaryArticleSourceLang).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Spotlights);
        }

        /// <summary>
        /// Returns true if Spotlights instances are equal
        /// </summary>
        /// <param name="input">Instance of Spotlights to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Spotlights input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FactsetEntityId == input.FactsetEntityId ||
                    (this.FactsetEntityId != null &&
                    this.FactsetEntityId.Equals(input.FactsetEntityId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.LiveDate == input.LiveDate ||
                    (this.LiveDate != null &&
                    this.LiveDate.Equals(input.LiveDate))
                ) && 
                (
                    this.PulseOnStartDate == input.PulseOnStartDate ||
                    (this.PulseOnStartDate != null &&
                    this.PulseOnStartDate.Equals(input.PulseOnStartDate))
                ) && 
                (
                    this.FinalArticleDate == input.FinalArticleDate ||
                    (this.FinalArticleDate != null &&
                    this.FinalArticleDate.Equals(input.FinalArticleDate))
                ) && 
                (
                    this.TvGroupId == input.TvGroupId ||
                    (this.TvGroupId != null &&
                    this.TvGroupId.Equals(input.TvGroupId))
                ) && 
                (
                    this.PrimaryArticleUrl == input.PrimaryArticleUrl ||
                    (this.PrimaryArticleUrl != null &&
                    this.PrimaryArticleUrl.Equals(input.PrimaryArticleUrl))
                ) && 
                (
                    this.OrganizationVolumeThreshold == input.OrganizationVolumeThreshold ||
                    (this.OrganizationVolumeThreshold != null &&
                    this.OrganizationVolumeThreshold.Equals(input.OrganizationVolumeThreshold))
                ) && 
                (
                    this.PrimaryArticleSource == input.PrimaryArticleSource ||
                    (this.PrimaryArticleSource != null &&
                    this.PrimaryArticleSource.Equals(input.PrimaryArticleSource))
                ) && 
                (
                    this.StandoutLvlOnStartDate == input.StandoutLvlOnStartDate ||
                    (this.StandoutLvlOnStartDate != null &&
                    this.StandoutLvlOnStartDate.Equals(input.StandoutLvlOnStartDate))
                ) && 
                (
                    this.PulseOnFinalArticleDate == input.PulseOnFinalArticleDate ||
                    (this.PulseOnFinalArticleDate != null &&
                    this.PulseOnFinalArticleDate.Equals(input.PulseOnFinalArticleDate))
                ) && 
                (
                    this.FirstArticleDate == input.FirstArticleDate ||
                    (this.FirstArticleDate != null &&
                    this.FirstArticleDate.Equals(input.FirstArticleDate))
                ) && 
                (
                    this.MeanArtScoreStartDate == input.MeanArtScoreStartDate ||
                    (this.MeanArtScoreStartDate != null &&
                    this.MeanArtScoreStartDate.Equals(input.MeanArtScoreStartDate))
                ) && 
                (
                    this.TotalSpotlightVolume == input.TotalSpotlightVolume ||
                    (this.TotalSpotlightVolume != null &&
                    this.TotalSpotlightVolume.Equals(input.TotalSpotlightVolume))
                ) && 
                (
                    this.PrimaryArticleBulletpoints == input.PrimaryArticleBulletpoints ||
                    (this.PrimaryArticleBulletpoints != null &&
                    this.PrimaryArticleBulletpoints.Equals(input.PrimaryArticleBulletpoints))
                ) && 
                (
                    this.TvOrgName == input.TvOrgName ||
                    (this.TvOrgName != null &&
                    this.TvOrgName.Equals(input.TvOrgName))
                ) && 
                (
                    this.StartDateVolume == input.StartDateVolume ||
                    (this.StartDateVolume != null &&
                    this.StartDateVolume.Equals(input.StartDateVolume))
                ) && 
                (
                    this.ZScoreOnFinalDate == input.ZScoreOnFinalDate ||
                    (this.ZScoreOnFinalDate != null &&
                    this.ZScoreOnFinalDate.Equals(input.ZScoreOnFinalDate))
                ) && 
                (
                    this.PrimaryArticleHeadline == input.PrimaryArticleHeadline ||
                    (this.PrimaryArticleHeadline != null &&
                    this.PrimaryArticleHeadline.Equals(input.PrimaryArticleHeadline))
                ) && 
                (
                    this.MeanPulseScore == input.MeanPulseScore ||
                    (this.MeanPulseScore != null &&
                    this.MeanPulseScore.Equals(input.MeanPulseScore))
                ) && 
                (
                    this.SpotlightCategory == input.SpotlightCategory ||
                    (this.SpotlightCategory != null &&
                    this.SpotlightCategory.Equals(input.SpotlightCategory))
                ) && 
                (
                    this.ZScoreOnStartDate == input.ZScoreOnStartDate ||
                    (this.ZScoreOnStartDate != null &&
                    this.ZScoreOnStartDate.Equals(input.ZScoreOnStartDate))
                ) && 
                (
                    this.MeanArtScoreFinalDate == input.MeanArtScoreFinalDate ||
                    (this.MeanArtScoreFinalDate != null &&
                    this.MeanArtScoreFinalDate.Equals(input.MeanArtScoreFinalDate))
                ) && 
                (
                    this.PrimarySpotlight == input.PrimarySpotlight ||
                    (this.PrimarySpotlight != null &&
                    this.PrimarySpotlight.Equals(input.PrimarySpotlight))
                ) && 
                (
                    this.TvSpotlightId == input.TvSpotlightId ||
                    (this.TvSpotlightId != null &&
                    this.TvSpotlightId.Equals(input.TvSpotlightId))
                ) && 
                (
                    this.Removed == input.Removed ||
                    (this.Removed != null &&
                    this.Removed.Equals(input.Removed))
                ) && 
                (
                    this.PulseBeforeFirstArticle == input.PulseBeforeFirstArticle ||
                    (this.PulseBeforeFirstArticle != null &&
                    this.PulseBeforeFirstArticle.Equals(input.PulseBeforeFirstArticle))
                ) && 
                (
                    this.StandoutLvlOnFinalDate == input.StandoutLvlOnFinalDate ||
                    (this.StandoutLvlOnFinalDate != null &&
                    this.StandoutLvlOnFinalDate.Equals(input.StandoutLvlOnFinalDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SpotlightPillar == input.SpotlightPillar ||
                    (this.SpotlightPillar != null &&
                    this.SpotlightPillar.Equals(input.SpotlightPillar))
                ) && 
                (
                    this.SpotlightDimension == input.SpotlightDimension ||
                    (this.SpotlightDimension != null &&
                    this.SpotlightDimension.Equals(input.SpotlightDimension))
                ) && 
                (
                    this.PrimaryArticleSourceLang == input.PrimaryArticleSourceLang ||
                    (this.PrimaryArticleSourceLang != null &&
                    this.PrimaryArticleSourceLang.Equals(input.PrimaryArticleSourceLang))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FactsetEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.FactsetEntityId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.LiveDate != null)
                {
                    hashCode = (hashCode * 59) + this.LiveDate.GetHashCode();
                }
                if (this.PulseOnStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.PulseOnStartDate.GetHashCode();
                }
                if (this.FinalArticleDate != null)
                {
                    hashCode = (hashCode * 59) + this.FinalArticleDate.GetHashCode();
                }
                if (this.TvGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.TvGroupId.GetHashCode();
                }
                if (this.PrimaryArticleUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryArticleUrl.GetHashCode();
                }
                if (this.OrganizationVolumeThreshold != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationVolumeThreshold.GetHashCode();
                }
                if (this.PrimaryArticleSource != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryArticleSource.GetHashCode();
                }
                if (this.StandoutLvlOnStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StandoutLvlOnStartDate.GetHashCode();
                }
                if (this.PulseOnFinalArticleDate != null)
                {
                    hashCode = (hashCode * 59) + this.PulseOnFinalArticleDate.GetHashCode();
                }
                if (this.FirstArticleDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirstArticleDate.GetHashCode();
                }
                if (this.MeanArtScoreStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.MeanArtScoreStartDate.GetHashCode();
                }
                if (this.TotalSpotlightVolume != null)
                {
                    hashCode = (hashCode * 59) + this.TotalSpotlightVolume.GetHashCode();
                }
                if (this.PrimaryArticleBulletpoints != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryArticleBulletpoints.GetHashCode();
                }
                if (this.TvOrgName != null)
                {
                    hashCode = (hashCode * 59) + this.TvOrgName.GetHashCode();
                }
                if (this.StartDateVolume != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateVolume.GetHashCode();
                }
                if (this.ZScoreOnFinalDate != null)
                {
                    hashCode = (hashCode * 59) + this.ZScoreOnFinalDate.GetHashCode();
                }
                if (this.PrimaryArticleHeadline != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryArticleHeadline.GetHashCode();
                }
                if (this.MeanPulseScore != null)
                {
                    hashCode = (hashCode * 59) + this.MeanPulseScore.GetHashCode();
                }
                if (this.SpotlightCategory != null)
                {
                    hashCode = (hashCode * 59) + this.SpotlightCategory.GetHashCode();
                }
                if (this.ZScoreOnStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.ZScoreOnStartDate.GetHashCode();
                }
                if (this.MeanArtScoreFinalDate != null)
                {
                    hashCode = (hashCode * 59) + this.MeanArtScoreFinalDate.GetHashCode();
                }
                if (this.PrimarySpotlight != null)
                {
                    hashCode = (hashCode * 59) + this.PrimarySpotlight.GetHashCode();
                }
                if (this.TvSpotlightId != null)
                {
                    hashCode = (hashCode * 59) + this.TvSpotlightId.GetHashCode();
                }
                if (this.Removed != null)
                {
                    hashCode = (hashCode * 59) + this.Removed.GetHashCode();
                }
                if (this.PulseBeforeFirstArticle != null)
                {
                    hashCode = (hashCode * 59) + this.PulseBeforeFirstArticle.GetHashCode();
                }
                if (this.StandoutLvlOnFinalDate != null)
                {
                    hashCode = (hashCode * 59) + this.StandoutLvlOnFinalDate.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.SpotlightPillar != null)
                {
                    hashCode = (hashCode * 59) + this.SpotlightPillar.GetHashCode();
                }
                if (this.SpotlightDimension != null)
                {
                    hashCode = (hashCode * 59) + this.SpotlightDimension.GetHashCode();
                }
                if (this.PrimaryArticleSourceLang != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryArticleSourceLang.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FactsetEntityId (string) maxLength
            if (this.FactsetEntityId != null && this.FactsetEntityId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FactsetEntityId, length must be less than 50.", new [] { "FactsetEntityId" });
            }

            // FactsetEntityId (string) pattern
            Regex regexFactsetEntityId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexFactsetEntityId.Match(this.FactsetEntityId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FactsetEntityId, must match a pattern of " + regexFactsetEntityId, new [] { "FactsetEntityId" });
            }

            // RequestId (string) maxLength
            if (this.RequestId != null && this.RequestId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be less than 50.", new [] { "RequestId" });
            }

            // RequestId (string) pattern
            Regex regexRequestId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexRequestId.Match(this.RequestId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must match a pattern of " + regexRequestId, new [] { "RequestId" });
            }

            // TvGroupId (string) maxLength
            if (this.TvGroupId != null && this.TvGroupId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TvGroupId, length must be less than 50.", new [] { "TvGroupId" });
            }

            // TvGroupId (string) pattern
            Regex regexTvGroupId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexTvGroupId.Match(this.TvGroupId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TvGroupId, must match a pattern of " + regexTvGroupId, new [] { "TvGroupId" });
            }

            // PrimaryArticleUrl (string) maxLength
            if (this.PrimaryArticleUrl != null && this.PrimaryArticleUrl.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryArticleUrl, length must be less than 200.", new [] { "PrimaryArticleUrl" });
            }

            // OrganizationVolumeThreshold (int?) maximum
            if (this.OrganizationVolumeThreshold > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrganizationVolumeThreshold, must be a value less than or equal to 100.", new [] { "OrganizationVolumeThreshold" });
            }

            // OrganizationVolumeThreshold (int?) minimum
            if (this.OrganizationVolumeThreshold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrganizationVolumeThreshold, must be a value greater than or equal to 0.", new [] { "OrganizationVolumeThreshold" });
            }

            // PrimaryArticleSource (string) maxLength
            if (this.PrimaryArticleSource != null && this.PrimaryArticleSource.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryArticleSource, length must be less than 100.", new [] { "PrimaryArticleSource" });
            }

            // PrimaryArticleSource (string) pattern
            Regex regexPrimaryArticleSource = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexPrimaryArticleSource.Match(this.PrimaryArticleSource).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryArticleSource, must match a pattern of " + regexPrimaryArticleSource, new [] { "PrimaryArticleSource" });
            }

            // StandoutLvlOnStartDate (string) maxLength
            if (this.StandoutLvlOnStartDate != null && this.StandoutLvlOnStartDate.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StandoutLvlOnStartDate, length must be less than 40.", new [] { "StandoutLvlOnStartDate" });
            }

            // StandoutLvlOnStartDate (string) pattern
            Regex regexStandoutLvlOnStartDate = new Regex(@"^[A-Za-z ]+$", RegexOptions.CultureInvariant);
            if (false == regexStandoutLvlOnStartDate.Match(this.StandoutLvlOnStartDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StandoutLvlOnStartDate, must match a pattern of " + regexStandoutLvlOnStartDate, new [] { "StandoutLvlOnStartDate" });
            }

            // TotalSpotlightVolume (int?) maximum
            if (this.TotalSpotlightVolume > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalSpotlightVolume, must be a value less than or equal to 100.", new [] { "TotalSpotlightVolume" });
            }

            // TotalSpotlightVolume (int?) minimum
            if (this.TotalSpotlightVolume < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalSpotlightVolume, must be a value greater than or equal to 0.", new [] { "TotalSpotlightVolume" });
            }

            // PrimaryArticleBulletpoints (string) maxLength
            if (this.PrimaryArticleBulletpoints != null && this.PrimaryArticleBulletpoints.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryArticleBulletpoints, length must be less than 2000.", new [] { "PrimaryArticleBulletpoints" });
            }

            // PrimaryArticleBulletpoints (string) pattern
            Regex regexPrimaryArticleBulletpoints = new Regex(@"^[A-Za-z -,]+$", RegexOptions.CultureInvariant);
            if (false == regexPrimaryArticleBulletpoints.Match(this.PrimaryArticleBulletpoints).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryArticleBulletpoints, must match a pattern of " + regexPrimaryArticleBulletpoints, new [] { "PrimaryArticleBulletpoints" });
            }

            // TvOrgName (string) maxLength
            if (this.TvOrgName != null && this.TvOrgName.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TvOrgName, length must be less than 200.", new [] { "TvOrgName" });
            }

            // TvOrgName (string) pattern
            Regex regexTvOrgName = new Regex(@"^[A-Za-z0-9 -,]+$", RegexOptions.CultureInvariant);
            if (false == regexTvOrgName.Match(this.TvOrgName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TvOrgName, must match a pattern of " + regexTvOrgName, new [] { "TvOrgName" });
            }

            // StartDateVolume (int?) maximum
            if (this.StartDateVolume > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDateVolume, must be a value less than or equal to 100.", new [] { "StartDateVolume" });
            }

            // StartDateVolume (int?) minimum
            if (this.StartDateVolume < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDateVolume, must be a value greater than or equal to 0.", new [] { "StartDateVolume" });
            }

            // PrimaryArticleHeadline (string) maxLength
            if (this.PrimaryArticleHeadline != null && this.PrimaryArticleHeadline.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryArticleHeadline, length must be less than 500.", new [] { "PrimaryArticleHeadline" });
            }

            // PrimaryArticleHeadline (string) pattern
            Regex regexPrimaryArticleHeadline = new Regex(@"^[A-Za-z0-9 ,'-]+$", RegexOptions.CultureInvariant);
            if (false == regexPrimaryArticleHeadline.Match(this.PrimaryArticleHeadline).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryArticleHeadline, must match a pattern of " + regexPrimaryArticleHeadline, new [] { "PrimaryArticleHeadline" });
            }

            // SpotlightCategory (string) maxLength
            if (this.SpotlightCategory != null && this.SpotlightCategory.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpotlightCategory, length must be less than 100.", new [] { "SpotlightCategory" });
            }

            // SpotlightCategory (string) pattern
            Regex regexSpotlightCategory = new Regex(@"^[A-Za-z]+$", RegexOptions.CultureInvariant);
            if (false == regexSpotlightCategory.Match(this.SpotlightCategory).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpotlightCategory, must match a pattern of " + regexSpotlightCategory, new [] { "SpotlightCategory" });
            }

            // TvSpotlightId (string) maxLength
            if (this.TvSpotlightId != null && this.TvSpotlightId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TvSpotlightId, length must be less than 50.", new [] { "TvSpotlightId" });
            }

            // TvSpotlightId (string) pattern
            Regex regexTvSpotlightId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexTvSpotlightId.Match(this.TvSpotlightId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TvSpotlightId, must match a pattern of " + regexTvSpotlightId, new [] { "TvSpotlightId" });
            }

            // StandoutLvlOnFinalDate (string) maxLength
            if (this.StandoutLvlOnFinalDate != null && this.StandoutLvlOnFinalDate.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StandoutLvlOnFinalDate, length must be less than 20.", new [] { "StandoutLvlOnFinalDate" });
            }

            // StandoutLvlOnFinalDate (string) pattern
            Regex regexStandoutLvlOnFinalDate = new Regex(@"^[A-Za-z]+$", RegexOptions.CultureInvariant);
            if (false == regexStandoutLvlOnFinalDate.Match(this.StandoutLvlOnFinalDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StandoutLvlOnFinalDate, must match a pattern of " + regexStandoutLvlOnFinalDate, new [] { "StandoutLvlOnFinalDate" });
            }

            // Status (string) maxLength
            if (this.Status != null && this.Status.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be less than 50.", new [] { "Status" });
            }

            // Status (string) pattern
            Regex regexStatus = new Regex(@"^[A-Za-z]+$", RegexOptions.CultureInvariant);
            if (false == regexStatus.Match(this.Status).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, must match a pattern of " + regexStatus, new [] { "Status" });
            }

            // SpotlightPillar (string) maxLength
            if (this.SpotlightPillar != null && this.SpotlightPillar.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpotlightPillar, length must be less than 50.", new [] { "SpotlightPillar" });
            }

            // SpotlightPillar (string) pattern
            Regex regexSpotlightPillar = new Regex(@"^[A-Za-z _]+$", RegexOptions.CultureInvariant);
            if (false == regexSpotlightPillar.Match(this.SpotlightPillar).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpotlightPillar, must match a pattern of " + regexSpotlightPillar, new [] { "SpotlightPillar" });
            }

            // SpotlightDimension (string) maxLength
            if (this.SpotlightDimension != null && this.SpotlightDimension.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpotlightDimension, length must be less than 100.", new [] { "SpotlightDimension" });
            }

            // SpotlightDimension (string) pattern
            Regex regexSpotlightDimension = new Regex(@"^[A-Za-z _]+$", RegexOptions.CultureInvariant);
            if (false == regexSpotlightDimension.Match(this.SpotlightDimension).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpotlightDimension, must match a pattern of " + regexSpotlightDimension, new [] { "SpotlightDimension" });
            }

            // PrimaryArticleSourceLang (string) maxLength
            if (this.PrimaryArticleSourceLang != null && this.PrimaryArticleSourceLang.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryArticleSourceLang, length must be less than 50.", new [] { "PrimaryArticleSourceLang" });
            }

            // PrimaryArticleSourceLang (string) pattern
            Regex regexPrimaryArticleSourceLang = new Regex(@"^[A-Za-z ,-]+$", RegexOptions.CultureInvariant);
            if (false == regexPrimaryArticleSourceLang.Match(this.PrimaryArticleSourceLang).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryArticleSourceLang, must match a pattern of " + regexPrimaryArticleSourceLang, new [] { "PrimaryArticleSourceLang" });
            }

            yield break;
        }
    }

}
