/*
 * FactSet ESG API
 *
 * FactSet ESG (powered by FactSet Truvalue) applies Natural Language Processing and Machine Learning to uncover risks and opportunities from companies' Environmental, Social and Governance (ESG) behavior, which are aggregated and categorized into continuously updated, material ESG scores. The service focuses on company ESG behavior from external sources and includes both positive and negative events that go beyond traditional sources of ESG risk data.<p> FactSet ESG extracts, analyzes, and generates scores from millions of documents each month collected from more than 200,000 data sources in over 38 languages. Sources include news, trade journals, NGOs, watchdog groups, trade blogs and industry reports. Products deliver investable insights by revealing value and risk factors from unstructured data at the speed of current events.</p> 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetESG.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetESG.Model
{
    /// <summary>
    /// TVL Scores Object
    /// </summary>
    [DataContract(Name = "TvlScores")]
    public partial class TvlScores : IEquatable<TvlScores>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TvlScores" /> class.
        /// </summary>
        /// <param name="date">Date for the period requested expressed in YYYY-MM-DD format..</param>
        /// <param name="fsymId">FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E)..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="scoreType">The name of the specific SASB Score type being shown in the response. This will be represented by the scoreTypes input: PULSE, INSIGHT, MOMENTUM, ART_VOL_TTM, CAT_VOL_TTM, or DYNAMIC_MAT..</param>
        /// <param name="allCategoriesPulse">The overall pulse across all categories..</param>
        /// <param name="materialityPulse">The pulse related to materiality..</param>
        /// <param name="accessAffordPulse">The pulse related to access affordability..</param>
        /// <param name="airQualityPulse">The pulse related to air quality..</param>
        /// <param name="businessEthicsPulse">The pulse related to business ethics..</param>
        /// <param name="businessModelPulse">The pulse related to the business model..</param>
        /// <param name="competitivePulse">The pulse related to competitive factors..</param>
        /// <param name="criticalRiskPulse">The pulse related to critical risks..</param>
        /// <param name="customerPrivPulse">The pulse related to customer privacy..</param>
        /// <param name="customePelfarePulse">The pulse related to customer welfare..</param>
        /// <param name="dataSecurityPulse">The pulse related to data security..</param>
        /// <param name="ecologicalPulse">The pulse related to ecological factors..</param>
        /// <param name="employeeEngagementPulse">The pulse related to employee engagement..</param>
        /// <param name="employeeHealthPulse">The pulse related to employee health..</param>
        /// <param name="energyPulse">The pulse related to energy..</param>
        /// <param name="ghgEmissionsPulse">The pulse related to greenhouse gas emissions..</param>
        /// <param name="humanRightsPulse">The pulse related to human rights..</param>
        /// <param name="laborPracticesPulse">The pulse related to labor practices..</param>
        /// <param name="legalRegulationsPulse">The pulse related to legal regulations..</param>
        /// <param name="materialSourcingPulse">The pulse related to material sourcing..</param>
        /// <param name="climateChangePulse">The pulse related to climate change..</param>
        /// <param name="productLifecyclePulse">The pulse related to the product lifecycle..</param>
        /// <param name="productQualityPulse">The pulse related to product quality..</param>
        /// <param name="sellingPracticesPulse">The pulse related to selling practices..</param>
        /// <param name="supplyChainPulse">The pulse related to supply chain practices..</param>
        /// <param name="systemicRiskPulse">The pulse related to systemic risks..</param>
        /// <param name="hazardousMaterialsPulse">The pulse related to management of hazardous materials..</param>
        /// <param name="waterWasteWaterPulse">The pulse related to water and wastewater management..</param>
        /// <param name="dimBusinessCatvolDay">Category volume related to Business dimension..</param>
        /// <param name="dimEnvironmentCatvolDay">Category volume related to Environment dimension..</param>
        /// <param name="dimHumancapCatvolDay">Category volume related to Human Capital dimension..</param>
        /// <param name="dimLeadershipCatvolDay">Category volume related to Leadership dimension..</param>
        /// <param name="dimSocialcapCatvolDay">Category volume related to Social Capital dimension..</param>
        /// <param name="error">error.</param>
        public TvlScores(DateTime? date = default(DateTime?), string fsymId = default(string), string requestId = default(string), string scoreType = default(string), decimal? allCategoriesPulse = default(decimal?), decimal? materialityPulse = default(decimal?), decimal? accessAffordPulse = default(decimal?), decimal? airQualityPulse = default(decimal?), decimal? businessEthicsPulse = default(decimal?), decimal? businessModelPulse = default(decimal?), decimal? competitivePulse = default(decimal?), decimal? criticalRiskPulse = default(decimal?), decimal? customerPrivPulse = default(decimal?), decimal? customePelfarePulse = default(decimal?), decimal? dataSecurityPulse = default(decimal?), decimal? ecologicalPulse = default(decimal?), decimal? employeeEngagementPulse = default(decimal?), decimal? employeeHealthPulse = default(decimal?), decimal? energyPulse = default(decimal?), decimal? ghgEmissionsPulse = default(decimal?), decimal? humanRightsPulse = default(decimal?), decimal? laborPracticesPulse = default(decimal?), decimal? legalRegulationsPulse = default(decimal?), decimal? materialSourcingPulse = default(decimal?), decimal? climateChangePulse = default(decimal?), decimal? productLifecyclePulse = default(decimal?), decimal? productQualityPulse = default(decimal?), decimal? sellingPracticesPulse = default(decimal?), decimal? supplyChainPulse = default(decimal?), decimal? systemicRiskPulse = default(decimal?), decimal? hazardousMaterialsPulse = default(decimal?), decimal? waterWasteWaterPulse = default(decimal?), decimal? dimBusinessCatvolDay = default(decimal?), decimal? dimEnvironmentCatvolDay = default(decimal?), decimal? dimHumancapCatvolDay = default(decimal?), decimal? dimLeadershipCatvolDay = default(decimal?), decimal? dimSocialcapCatvolDay = default(decimal?), InvalidIdErrorObject error = default(InvalidIdErrorObject))
        {
            this.Date = date;
            this.FsymId = fsymId;
            this.RequestId = requestId;
            this.ScoreType = scoreType;
            this.AllCategoriesPulse = allCategoriesPulse;
            this.MaterialityPulse = materialityPulse;
            this.AccessAffordPulse = accessAffordPulse;
            this.AirQualityPulse = airQualityPulse;
            this.BusinessEthicsPulse = businessEthicsPulse;
            this.BusinessModelPulse = businessModelPulse;
            this.CompetitivePulse = competitivePulse;
            this.CriticalRiskPulse = criticalRiskPulse;
            this.CustomerPrivPulse = customerPrivPulse;
            this.CustomePelfarePulse = customePelfarePulse;
            this.DataSecurityPulse = dataSecurityPulse;
            this.EcologicalPulse = ecologicalPulse;
            this.EmployeeEngagementPulse = employeeEngagementPulse;
            this.EmployeeHealthPulse = employeeHealthPulse;
            this.EnergyPulse = energyPulse;
            this.GhgEmissionsPulse = ghgEmissionsPulse;
            this.HumanRightsPulse = humanRightsPulse;
            this.LaborPracticesPulse = laborPracticesPulse;
            this.LegalRegulationsPulse = legalRegulationsPulse;
            this.MaterialSourcingPulse = materialSourcingPulse;
            this.ClimateChangePulse = climateChangePulse;
            this.ProductLifecyclePulse = productLifecyclePulse;
            this.ProductQualityPulse = productQualityPulse;
            this.SellingPracticesPulse = sellingPracticesPulse;
            this.SupplyChainPulse = supplyChainPulse;
            this.SystemicRiskPulse = systemicRiskPulse;
            this.HazardousMaterialsPulse = hazardousMaterialsPulse;
            this.WaterWasteWaterPulse = waterWasteWaterPulse;
            this.DimBusinessCatvolDay = dimBusinessCatvolDay;
            this.DimEnvironmentCatvolDay = dimEnvironmentCatvolDay;
            this.DimHumancapCatvolDay = dimHumancapCatvolDay;
            this.DimLeadershipCatvolDay = dimLeadershipCatvolDay;
            this.DimSocialcapCatvolDay = dimSocialcapCatvolDay;
            this.Error = error;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Date for the period requested expressed in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date for the period requested expressed in YYYY-MM-DD format.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).
        /// </summary>
        /// <value>FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// The name of the specific SASB Score type being shown in the response. This will be represented by the scoreTypes input: PULSE, INSIGHT, MOMENTUM, ART_VOL_TTM, CAT_VOL_TTM, or DYNAMIC_MAT.
        /// </summary>
        /// <value>The name of the specific SASB Score type being shown in the response. This will be represented by the scoreTypes input: PULSE, INSIGHT, MOMENTUM, ART_VOL_TTM, CAT_VOL_TTM, or DYNAMIC_MAT.</value>
        [DataMember(Name = "scoreType", EmitDefaultValue = true)]
        public string ScoreType { get; set; }

        /// <summary>
        /// The overall pulse across all categories.
        /// </summary>
        /// <value>The overall pulse across all categories.</value>
        [DataMember(Name = "allCategoriesPulse", EmitDefaultValue = true)]
        public decimal? AllCategoriesPulse { get; set; }

        /// <summary>
        /// The pulse related to materiality.
        /// </summary>
        /// <value>The pulse related to materiality.</value>
        [DataMember(Name = "materialityPulse", EmitDefaultValue = true)]
        public decimal? MaterialityPulse { get; set; }

        /// <summary>
        /// The pulse related to access affordability.
        /// </summary>
        /// <value>The pulse related to access affordability.</value>
        [DataMember(Name = "accessAffordPulse", EmitDefaultValue = true)]
        public decimal? AccessAffordPulse { get; set; }

        /// <summary>
        /// The pulse related to air quality.
        /// </summary>
        /// <value>The pulse related to air quality.</value>
        [DataMember(Name = "airQualityPulse", EmitDefaultValue = true)]
        public decimal? AirQualityPulse { get; set; }

        /// <summary>
        /// The pulse related to business ethics.
        /// </summary>
        /// <value>The pulse related to business ethics.</value>
        [DataMember(Name = "businessEthicsPulse", EmitDefaultValue = true)]
        public decimal? BusinessEthicsPulse { get; set; }

        /// <summary>
        /// The pulse related to the business model.
        /// </summary>
        /// <value>The pulse related to the business model.</value>
        [DataMember(Name = "businessModelPulse", EmitDefaultValue = true)]
        public decimal? BusinessModelPulse { get; set; }

        /// <summary>
        /// The pulse related to competitive factors.
        /// </summary>
        /// <value>The pulse related to competitive factors.</value>
        [DataMember(Name = "competitivePulse", EmitDefaultValue = true)]
        public decimal? CompetitivePulse { get; set; }

        /// <summary>
        /// The pulse related to critical risks.
        /// </summary>
        /// <value>The pulse related to critical risks.</value>
        [DataMember(Name = "criticalRiskPulse", EmitDefaultValue = true)]
        public decimal? CriticalRiskPulse { get; set; }

        /// <summary>
        /// The pulse related to customer privacy.
        /// </summary>
        /// <value>The pulse related to customer privacy.</value>
        [DataMember(Name = "customerPrivPulse", EmitDefaultValue = true)]
        public decimal? CustomerPrivPulse { get; set; }

        /// <summary>
        /// The pulse related to customer welfare.
        /// </summary>
        /// <value>The pulse related to customer welfare.</value>
        [DataMember(Name = "customePelfarePulse", EmitDefaultValue = true)]
        public decimal? CustomePelfarePulse { get; set; }

        /// <summary>
        /// The pulse related to data security.
        /// </summary>
        /// <value>The pulse related to data security.</value>
        [DataMember(Name = "dataSecurityPulse", EmitDefaultValue = true)]
        public decimal? DataSecurityPulse { get; set; }

        /// <summary>
        /// The pulse related to ecological factors.
        /// </summary>
        /// <value>The pulse related to ecological factors.</value>
        [DataMember(Name = "ecologicalPulse", EmitDefaultValue = true)]
        public decimal? EcologicalPulse { get; set; }

        /// <summary>
        /// The pulse related to employee engagement.
        /// </summary>
        /// <value>The pulse related to employee engagement.</value>
        [DataMember(Name = "employeeEngagementPulse", EmitDefaultValue = true)]
        public decimal? EmployeeEngagementPulse { get; set; }

        /// <summary>
        /// The pulse related to employee health.
        /// </summary>
        /// <value>The pulse related to employee health.</value>
        [DataMember(Name = "employeeHealthPulse", EmitDefaultValue = true)]
        public decimal? EmployeeHealthPulse { get; set; }

        /// <summary>
        /// The pulse related to energy.
        /// </summary>
        /// <value>The pulse related to energy.</value>
        [DataMember(Name = "energyPulse", EmitDefaultValue = true)]
        public decimal? EnergyPulse { get; set; }

        /// <summary>
        /// The pulse related to greenhouse gas emissions.
        /// </summary>
        /// <value>The pulse related to greenhouse gas emissions.</value>
        [DataMember(Name = "ghgEmissionsPulse", EmitDefaultValue = true)]
        public decimal? GhgEmissionsPulse { get; set; }

        /// <summary>
        /// The pulse related to human rights.
        /// </summary>
        /// <value>The pulse related to human rights.</value>
        [DataMember(Name = "humanRightsPulse", EmitDefaultValue = true)]
        public decimal? HumanRightsPulse { get; set; }

        /// <summary>
        /// The pulse related to labor practices.
        /// </summary>
        /// <value>The pulse related to labor practices.</value>
        [DataMember(Name = "laborPracticesPulse", EmitDefaultValue = true)]
        public decimal? LaborPracticesPulse { get; set; }

        /// <summary>
        /// The pulse related to legal regulations.
        /// </summary>
        /// <value>The pulse related to legal regulations.</value>
        [DataMember(Name = "legalRegulationsPulse", EmitDefaultValue = true)]
        public decimal? LegalRegulationsPulse { get; set; }

        /// <summary>
        /// The pulse related to material sourcing.
        /// </summary>
        /// <value>The pulse related to material sourcing.</value>
        [DataMember(Name = "materialSourcingPulse", EmitDefaultValue = true)]
        public decimal? MaterialSourcingPulse { get; set; }

        /// <summary>
        /// The pulse related to climate change.
        /// </summary>
        /// <value>The pulse related to climate change.</value>
        [DataMember(Name = "climateChangePulse", EmitDefaultValue = true)]
        public decimal? ClimateChangePulse { get; set; }

        /// <summary>
        /// The pulse related to the product lifecycle.
        /// </summary>
        /// <value>The pulse related to the product lifecycle.</value>
        [DataMember(Name = "productLifecyclePulse", EmitDefaultValue = true)]
        public decimal? ProductLifecyclePulse { get; set; }

        /// <summary>
        /// The pulse related to product quality.
        /// </summary>
        /// <value>The pulse related to product quality.</value>
        [DataMember(Name = "productQualityPulse", EmitDefaultValue = true)]
        public decimal? ProductQualityPulse { get; set; }

        /// <summary>
        /// The pulse related to selling practices.
        /// </summary>
        /// <value>The pulse related to selling practices.</value>
        [DataMember(Name = "sellingPracticesPulse", EmitDefaultValue = true)]
        public decimal? SellingPracticesPulse { get; set; }

        /// <summary>
        /// The pulse related to supply chain practices.
        /// </summary>
        /// <value>The pulse related to supply chain practices.</value>
        [DataMember(Name = "supplyChainPulse", EmitDefaultValue = true)]
        public decimal? SupplyChainPulse { get; set; }

        /// <summary>
        /// The pulse related to systemic risks.
        /// </summary>
        /// <value>The pulse related to systemic risks.</value>
        [DataMember(Name = "systemicRiskPulse", EmitDefaultValue = true)]
        public decimal? SystemicRiskPulse { get; set; }

        /// <summary>
        /// The pulse related to management of hazardous materials.
        /// </summary>
        /// <value>The pulse related to management of hazardous materials.</value>
        [DataMember(Name = "hazardousMaterialsPulse", EmitDefaultValue = true)]
        public decimal? HazardousMaterialsPulse { get; set; }

        /// <summary>
        /// The pulse related to water and wastewater management.
        /// </summary>
        /// <value>The pulse related to water and wastewater management.</value>
        [DataMember(Name = "waterWasteWaterPulse", EmitDefaultValue = true)]
        public decimal? WaterWasteWaterPulse { get; set; }

        /// <summary>
        /// Category volume related to Business dimension.
        /// </summary>
        /// <value>Category volume related to Business dimension.</value>
        [DataMember(Name = "dimBusinessCatvolDay", EmitDefaultValue = true)]
        public decimal? DimBusinessCatvolDay { get; set; }

        /// <summary>
        /// Category volume related to Environment dimension.
        /// </summary>
        /// <value>Category volume related to Environment dimension.</value>
        [DataMember(Name = "dimEnvironmentCatvolDay", EmitDefaultValue = true)]
        public decimal? DimEnvironmentCatvolDay { get; set; }

        /// <summary>
        /// Category volume related to Human Capital dimension.
        /// </summary>
        /// <value>Category volume related to Human Capital dimension.</value>
        [DataMember(Name = "dimHumancapCatvolDay", EmitDefaultValue = true)]
        public decimal? DimHumancapCatvolDay { get; set; }

        /// <summary>
        /// Category volume related to Leadership dimension.
        /// </summary>
        /// <value>Category volume related to Leadership dimension.</value>
        [DataMember(Name = "dimLeadershipCatvolDay", EmitDefaultValue = true)]
        public decimal? DimLeadershipCatvolDay { get; set; }

        /// <summary>
        /// Category volume related to Social Capital dimension.
        /// </summary>
        /// <value>Category volume related to Social Capital dimension.</value>
        [DataMember(Name = "dimSocialcapCatvolDay", EmitDefaultValue = true)]
        public decimal? DimSocialcapCatvolDay { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public InvalidIdErrorObject Error { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TvlScores {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  ScoreType: ").Append(ScoreType).Append("\n");
            sb.Append("  AllCategoriesPulse: ").Append(AllCategoriesPulse).Append("\n");
            sb.Append("  MaterialityPulse: ").Append(MaterialityPulse).Append("\n");
            sb.Append("  AccessAffordPulse: ").Append(AccessAffordPulse).Append("\n");
            sb.Append("  AirQualityPulse: ").Append(AirQualityPulse).Append("\n");
            sb.Append("  BusinessEthicsPulse: ").Append(BusinessEthicsPulse).Append("\n");
            sb.Append("  BusinessModelPulse: ").Append(BusinessModelPulse).Append("\n");
            sb.Append("  CompetitivePulse: ").Append(CompetitivePulse).Append("\n");
            sb.Append("  CriticalRiskPulse: ").Append(CriticalRiskPulse).Append("\n");
            sb.Append("  CustomerPrivPulse: ").Append(CustomerPrivPulse).Append("\n");
            sb.Append("  CustomePelfarePulse: ").Append(CustomePelfarePulse).Append("\n");
            sb.Append("  DataSecurityPulse: ").Append(DataSecurityPulse).Append("\n");
            sb.Append("  EcologicalPulse: ").Append(EcologicalPulse).Append("\n");
            sb.Append("  EmployeeEngagementPulse: ").Append(EmployeeEngagementPulse).Append("\n");
            sb.Append("  EmployeeHealthPulse: ").Append(EmployeeHealthPulse).Append("\n");
            sb.Append("  EnergyPulse: ").Append(EnergyPulse).Append("\n");
            sb.Append("  GhgEmissionsPulse: ").Append(GhgEmissionsPulse).Append("\n");
            sb.Append("  HumanRightsPulse: ").Append(HumanRightsPulse).Append("\n");
            sb.Append("  LaborPracticesPulse: ").Append(LaborPracticesPulse).Append("\n");
            sb.Append("  LegalRegulationsPulse: ").Append(LegalRegulationsPulse).Append("\n");
            sb.Append("  MaterialSourcingPulse: ").Append(MaterialSourcingPulse).Append("\n");
            sb.Append("  ClimateChangePulse: ").Append(ClimateChangePulse).Append("\n");
            sb.Append("  ProductLifecyclePulse: ").Append(ProductLifecyclePulse).Append("\n");
            sb.Append("  ProductQualityPulse: ").Append(ProductQualityPulse).Append("\n");
            sb.Append("  SellingPracticesPulse: ").Append(SellingPracticesPulse).Append("\n");
            sb.Append("  SupplyChainPulse: ").Append(SupplyChainPulse).Append("\n");
            sb.Append("  SystemicRiskPulse: ").Append(SystemicRiskPulse).Append("\n");
            sb.Append("  HazardousMaterialsPulse: ").Append(HazardousMaterialsPulse).Append("\n");
            sb.Append("  WaterWasteWaterPulse: ").Append(WaterWasteWaterPulse).Append("\n");
            sb.Append("  DimBusinessCatvolDay: ").Append(DimBusinessCatvolDay).Append("\n");
            sb.Append("  DimEnvironmentCatvolDay: ").Append(DimEnvironmentCatvolDay).Append("\n");
            sb.Append("  DimHumancapCatvolDay: ").Append(DimHumancapCatvolDay).Append("\n");
            sb.Append("  DimLeadershipCatvolDay: ").Append(DimLeadershipCatvolDay).Append("\n");
            sb.Append("  DimSocialcapCatvolDay: ").Append(DimSocialcapCatvolDay).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TvlScores);
        }

        /// <summary>
        /// Returns true if TvlScores instances are equal
        /// </summary>
        /// <param name="input">Instance of TvlScores to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TvlScores input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.ScoreType == input.ScoreType ||
                    (this.ScoreType != null &&
                    this.ScoreType.Equals(input.ScoreType))
                ) && 
                (
                    this.AllCategoriesPulse == input.AllCategoriesPulse ||
                    (this.AllCategoriesPulse != null &&
                    this.AllCategoriesPulse.Equals(input.AllCategoriesPulse))
                ) && 
                (
                    this.MaterialityPulse == input.MaterialityPulse ||
                    (this.MaterialityPulse != null &&
                    this.MaterialityPulse.Equals(input.MaterialityPulse))
                ) && 
                (
                    this.AccessAffordPulse == input.AccessAffordPulse ||
                    (this.AccessAffordPulse != null &&
                    this.AccessAffordPulse.Equals(input.AccessAffordPulse))
                ) && 
                (
                    this.AirQualityPulse == input.AirQualityPulse ||
                    (this.AirQualityPulse != null &&
                    this.AirQualityPulse.Equals(input.AirQualityPulse))
                ) && 
                (
                    this.BusinessEthicsPulse == input.BusinessEthicsPulse ||
                    (this.BusinessEthicsPulse != null &&
                    this.BusinessEthicsPulse.Equals(input.BusinessEthicsPulse))
                ) && 
                (
                    this.BusinessModelPulse == input.BusinessModelPulse ||
                    (this.BusinessModelPulse != null &&
                    this.BusinessModelPulse.Equals(input.BusinessModelPulse))
                ) && 
                (
                    this.CompetitivePulse == input.CompetitivePulse ||
                    (this.CompetitivePulse != null &&
                    this.CompetitivePulse.Equals(input.CompetitivePulse))
                ) && 
                (
                    this.CriticalRiskPulse == input.CriticalRiskPulse ||
                    (this.CriticalRiskPulse != null &&
                    this.CriticalRiskPulse.Equals(input.CriticalRiskPulse))
                ) && 
                (
                    this.CustomerPrivPulse == input.CustomerPrivPulse ||
                    (this.CustomerPrivPulse != null &&
                    this.CustomerPrivPulse.Equals(input.CustomerPrivPulse))
                ) && 
                (
                    this.CustomePelfarePulse == input.CustomePelfarePulse ||
                    (this.CustomePelfarePulse != null &&
                    this.CustomePelfarePulse.Equals(input.CustomePelfarePulse))
                ) && 
                (
                    this.DataSecurityPulse == input.DataSecurityPulse ||
                    (this.DataSecurityPulse != null &&
                    this.DataSecurityPulse.Equals(input.DataSecurityPulse))
                ) && 
                (
                    this.EcologicalPulse == input.EcologicalPulse ||
                    (this.EcologicalPulse != null &&
                    this.EcologicalPulse.Equals(input.EcologicalPulse))
                ) && 
                (
                    this.EmployeeEngagementPulse == input.EmployeeEngagementPulse ||
                    (this.EmployeeEngagementPulse != null &&
                    this.EmployeeEngagementPulse.Equals(input.EmployeeEngagementPulse))
                ) && 
                (
                    this.EmployeeHealthPulse == input.EmployeeHealthPulse ||
                    (this.EmployeeHealthPulse != null &&
                    this.EmployeeHealthPulse.Equals(input.EmployeeHealthPulse))
                ) && 
                (
                    this.EnergyPulse == input.EnergyPulse ||
                    (this.EnergyPulse != null &&
                    this.EnergyPulse.Equals(input.EnergyPulse))
                ) && 
                (
                    this.GhgEmissionsPulse == input.GhgEmissionsPulse ||
                    (this.GhgEmissionsPulse != null &&
                    this.GhgEmissionsPulse.Equals(input.GhgEmissionsPulse))
                ) && 
                (
                    this.HumanRightsPulse == input.HumanRightsPulse ||
                    (this.HumanRightsPulse != null &&
                    this.HumanRightsPulse.Equals(input.HumanRightsPulse))
                ) && 
                (
                    this.LaborPracticesPulse == input.LaborPracticesPulse ||
                    (this.LaborPracticesPulse != null &&
                    this.LaborPracticesPulse.Equals(input.LaborPracticesPulse))
                ) && 
                (
                    this.LegalRegulationsPulse == input.LegalRegulationsPulse ||
                    (this.LegalRegulationsPulse != null &&
                    this.LegalRegulationsPulse.Equals(input.LegalRegulationsPulse))
                ) && 
                (
                    this.MaterialSourcingPulse == input.MaterialSourcingPulse ||
                    (this.MaterialSourcingPulse != null &&
                    this.MaterialSourcingPulse.Equals(input.MaterialSourcingPulse))
                ) && 
                (
                    this.ClimateChangePulse == input.ClimateChangePulse ||
                    (this.ClimateChangePulse != null &&
                    this.ClimateChangePulse.Equals(input.ClimateChangePulse))
                ) && 
                (
                    this.ProductLifecyclePulse == input.ProductLifecyclePulse ||
                    (this.ProductLifecyclePulse != null &&
                    this.ProductLifecyclePulse.Equals(input.ProductLifecyclePulse))
                ) && 
                (
                    this.ProductQualityPulse == input.ProductQualityPulse ||
                    (this.ProductQualityPulse != null &&
                    this.ProductQualityPulse.Equals(input.ProductQualityPulse))
                ) && 
                (
                    this.SellingPracticesPulse == input.SellingPracticesPulse ||
                    (this.SellingPracticesPulse != null &&
                    this.SellingPracticesPulse.Equals(input.SellingPracticesPulse))
                ) && 
                (
                    this.SupplyChainPulse == input.SupplyChainPulse ||
                    (this.SupplyChainPulse != null &&
                    this.SupplyChainPulse.Equals(input.SupplyChainPulse))
                ) && 
                (
                    this.SystemicRiskPulse == input.SystemicRiskPulse ||
                    (this.SystemicRiskPulse != null &&
                    this.SystemicRiskPulse.Equals(input.SystemicRiskPulse))
                ) && 
                (
                    this.HazardousMaterialsPulse == input.HazardousMaterialsPulse ||
                    (this.HazardousMaterialsPulse != null &&
                    this.HazardousMaterialsPulse.Equals(input.HazardousMaterialsPulse))
                ) && 
                (
                    this.WaterWasteWaterPulse == input.WaterWasteWaterPulse ||
                    (this.WaterWasteWaterPulse != null &&
                    this.WaterWasteWaterPulse.Equals(input.WaterWasteWaterPulse))
                ) && 
                (
                    this.DimBusinessCatvolDay == input.DimBusinessCatvolDay ||
                    (this.DimBusinessCatvolDay != null &&
                    this.DimBusinessCatvolDay.Equals(input.DimBusinessCatvolDay))
                ) && 
                (
                    this.DimEnvironmentCatvolDay == input.DimEnvironmentCatvolDay ||
                    (this.DimEnvironmentCatvolDay != null &&
                    this.DimEnvironmentCatvolDay.Equals(input.DimEnvironmentCatvolDay))
                ) && 
                (
                    this.DimHumancapCatvolDay == input.DimHumancapCatvolDay ||
                    (this.DimHumancapCatvolDay != null &&
                    this.DimHumancapCatvolDay.Equals(input.DimHumancapCatvolDay))
                ) && 
                (
                    this.DimLeadershipCatvolDay == input.DimLeadershipCatvolDay ||
                    (this.DimLeadershipCatvolDay != null &&
                    this.DimLeadershipCatvolDay.Equals(input.DimLeadershipCatvolDay))
                ) && 
                (
                    this.DimSocialcapCatvolDay == input.DimSocialcapCatvolDay ||
                    (this.DimSocialcapCatvolDay != null &&
                    this.DimSocialcapCatvolDay.Equals(input.DimSocialcapCatvolDay))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.ScoreType != null)
                {
                    hashCode = (hashCode * 59) + this.ScoreType.GetHashCode();
                }
                if (this.AllCategoriesPulse != null)
                {
                    hashCode = (hashCode * 59) + this.AllCategoriesPulse.GetHashCode();
                }
                if (this.MaterialityPulse != null)
                {
                    hashCode = (hashCode * 59) + this.MaterialityPulse.GetHashCode();
                }
                if (this.AccessAffordPulse != null)
                {
                    hashCode = (hashCode * 59) + this.AccessAffordPulse.GetHashCode();
                }
                if (this.AirQualityPulse != null)
                {
                    hashCode = (hashCode * 59) + this.AirQualityPulse.GetHashCode();
                }
                if (this.BusinessEthicsPulse != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessEthicsPulse.GetHashCode();
                }
                if (this.BusinessModelPulse != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessModelPulse.GetHashCode();
                }
                if (this.CompetitivePulse != null)
                {
                    hashCode = (hashCode * 59) + this.CompetitivePulse.GetHashCode();
                }
                if (this.CriticalRiskPulse != null)
                {
                    hashCode = (hashCode * 59) + this.CriticalRiskPulse.GetHashCode();
                }
                if (this.CustomerPrivPulse != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerPrivPulse.GetHashCode();
                }
                if (this.CustomePelfarePulse != null)
                {
                    hashCode = (hashCode * 59) + this.CustomePelfarePulse.GetHashCode();
                }
                if (this.DataSecurityPulse != null)
                {
                    hashCode = (hashCode * 59) + this.DataSecurityPulse.GetHashCode();
                }
                if (this.EcologicalPulse != null)
                {
                    hashCode = (hashCode * 59) + this.EcologicalPulse.GetHashCode();
                }
                if (this.EmployeeEngagementPulse != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeEngagementPulse.GetHashCode();
                }
                if (this.EmployeeHealthPulse != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeHealthPulse.GetHashCode();
                }
                if (this.EnergyPulse != null)
                {
                    hashCode = (hashCode * 59) + this.EnergyPulse.GetHashCode();
                }
                if (this.GhgEmissionsPulse != null)
                {
                    hashCode = (hashCode * 59) + this.GhgEmissionsPulse.GetHashCode();
                }
                if (this.HumanRightsPulse != null)
                {
                    hashCode = (hashCode * 59) + this.HumanRightsPulse.GetHashCode();
                }
                if (this.LaborPracticesPulse != null)
                {
                    hashCode = (hashCode * 59) + this.LaborPracticesPulse.GetHashCode();
                }
                if (this.LegalRegulationsPulse != null)
                {
                    hashCode = (hashCode * 59) + this.LegalRegulationsPulse.GetHashCode();
                }
                if (this.MaterialSourcingPulse != null)
                {
                    hashCode = (hashCode * 59) + this.MaterialSourcingPulse.GetHashCode();
                }
                if (this.ClimateChangePulse != null)
                {
                    hashCode = (hashCode * 59) + this.ClimateChangePulse.GetHashCode();
                }
                if (this.ProductLifecyclePulse != null)
                {
                    hashCode = (hashCode * 59) + this.ProductLifecyclePulse.GetHashCode();
                }
                if (this.ProductQualityPulse != null)
                {
                    hashCode = (hashCode * 59) + this.ProductQualityPulse.GetHashCode();
                }
                if (this.SellingPracticesPulse != null)
                {
                    hashCode = (hashCode * 59) + this.SellingPracticesPulse.GetHashCode();
                }
                if (this.SupplyChainPulse != null)
                {
                    hashCode = (hashCode * 59) + this.SupplyChainPulse.GetHashCode();
                }
                if (this.SystemicRiskPulse != null)
                {
                    hashCode = (hashCode * 59) + this.SystemicRiskPulse.GetHashCode();
                }
                if (this.HazardousMaterialsPulse != null)
                {
                    hashCode = (hashCode * 59) + this.HazardousMaterialsPulse.GetHashCode();
                }
                if (this.WaterWasteWaterPulse != null)
                {
                    hashCode = (hashCode * 59) + this.WaterWasteWaterPulse.GetHashCode();
                }
                if (this.DimBusinessCatvolDay != null)
                {
                    hashCode = (hashCode * 59) + this.DimBusinessCatvolDay.GetHashCode();
                }
                if (this.DimEnvironmentCatvolDay != null)
                {
                    hashCode = (hashCode * 59) + this.DimEnvironmentCatvolDay.GetHashCode();
                }
                if (this.DimHumancapCatvolDay != null)
                {
                    hashCode = (hashCode * 59) + this.DimHumancapCatvolDay.GetHashCode();
                }
                if (this.DimLeadershipCatvolDay != null)
                {
                    hashCode = (hashCode * 59) + this.DimLeadershipCatvolDay.GetHashCode();
                }
                if (this.DimSocialcapCatvolDay != null)
                {
                    hashCode = (hashCode * 59) + this.DimSocialcapCatvolDay.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FsymId (string) maxLength
            if (this.FsymId != null && this.FsymId.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FsymId, length must be less than 40.", new [] { "FsymId" });
            }

            // FsymId (string) pattern
            Regex regexFsymId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexFsymId.Match(this.FsymId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FsymId, must match a pattern of " + regexFsymId, new [] { "FsymId" });
            }

            // RequestId (string) maxLength
            if (this.RequestId != null && this.RequestId.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be less than 60.", new [] { "RequestId" });
            }

            // RequestId (string) pattern
            Regex regexRequestId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexRequestId.Match(this.RequestId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must match a pattern of " + regexRequestId, new [] { "RequestId" });
            }

            // ScoreType (string) maxLength
            if (this.ScoreType != null && this.ScoreType.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScoreType, length must be less than 30.", new [] { "ScoreType" });
            }

            // ScoreType (string) pattern
            Regex regexScoreType = new Regex(@"^[A-Za-z _]+$", RegexOptions.CultureInvariant);
            if (false == regexScoreType.Match(this.ScoreType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScoreType, must match a pattern of " + regexScoreType, new [] { "ScoreType" });
            }

            yield break;
        }
    }

}
