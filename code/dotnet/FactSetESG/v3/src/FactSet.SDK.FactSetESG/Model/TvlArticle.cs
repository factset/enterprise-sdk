/*
 * FactSet ESG API
 *
 * FactSet ESG (powered by FactSet Truvalue) applies Natural Language Processing and Machine Learning to uncover risks and opportunities from companies' Environmental, Social and Governance (ESG) behavior, which are aggregated and categorized into continuously updated, material ESG scores. The service focuses on company ESG behavior from external sources and includes both positive and negative events that go beyond traditional sources of ESG risk data.<p> FactSet ESG extracts, analyzes, and generates scores from millions of documents each month collected from more than 200,000 data sources in over 38 languages. Sources include news, trade journals, NGOs, watchdog groups, trade blogs and industry reports. Products deliver investable insights by revealing value and risk factors from unstructured data at the speed of current events.</p> 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetESG.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetESG.Model
{
    /// <summary>
    /// TVL Articles All Object
    /// </summary>
    [DataContract(Name = "TvlArticle")]
    public partial class TvlArticle : IEquatable<TvlArticle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TvlArticle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TvlArticle()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="TvlArticle" /> class.
        /// </summary>
        /// <param name="datePublication">Date of article&#39;s publication based on datePublication parameter..</param>
        /// <param name="factsetEntityId">FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E). (required).</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="articleId">Unique identifier for the article. (required).</param>
        /// <param name="error">error.</param>
        public TvlArticle(string factsetEntityId, string articleId,DateTime? datePublication = default(DateTime?), string requestId = default(string), InvalidIdErrorObject error = default(InvalidIdErrorObject))
        {
            // to ensure "factsetEntityId" is required (not null)
            if (factsetEntityId == null) {
                throw new ArgumentNullException("factsetEntityId is a required property for TvlArticle and cannot be null");
            }
            this.FactsetEntityId = factsetEntityId;
            // to ensure "articleId" is required (not null)
            if (articleId == null) {
                throw new ArgumentNullException("articleId is a required property for TvlArticle and cannot be null");
            }
            this.ArticleId = articleId;
            this.DatePublication = datePublication;
            this.RequestId = requestId;
            this.Error = error;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Date of article&#39;s publication based on datePublication parameter.
        /// </summary>
        /// <value>Date of article&#39;s publication based on datePublication parameter.</value>
        [DataMember(Name = "datePublication", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DatePublication { get; set; }

        /// <summary>
        /// FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).
        /// </summary>
        /// <value>FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).</value>
        [DataMember(Name = "factsetEntityId", IsRequired = true, EmitDefaultValue = true)]
        public string FactsetEntityId { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Unique identifier for the article.
        /// </summary>
        /// <value>Unique identifier for the article.</value>
        [DataMember(Name = "articleId", IsRequired = true, EmitDefaultValue = true)]
        public string ArticleId { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public InvalidIdErrorObject Error { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TvlArticle {\n");
            sb.Append("  DatePublication: ").Append(DatePublication).Append("\n");
            sb.Append("  FactsetEntityId: ").Append(FactsetEntityId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TvlArticle);
        }

        /// <summary>
        /// Returns true if TvlArticle instances are equal
        /// </summary>
        /// <param name="input">Instance of TvlArticle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TvlArticle input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DatePublication == input.DatePublication ||
                    (this.DatePublication != null &&
                    this.DatePublication.Equals(input.DatePublication))
                ) && 
                (
                    this.FactsetEntityId == input.FactsetEntityId ||
                    (this.FactsetEntityId != null &&
                    this.FactsetEntityId.Equals(input.FactsetEntityId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.ArticleId == input.ArticleId ||
                    (this.ArticleId != null &&
                    this.ArticleId.Equals(input.ArticleId))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatePublication != null)
                {
                    hashCode = (hashCode * 59) + this.DatePublication.GetHashCode();
                }
                if (this.FactsetEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.FactsetEntityId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.ArticleId != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleId.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FactsetEntityId (string) maxLength
            if (this.FactsetEntityId != null && this.FactsetEntityId.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FactsetEntityId, length must be less than 60.", new [] { "FactsetEntityId" });
            }

            // FactsetEntityId (string) pattern
            Regex regexFactsetEntityId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexFactsetEntityId.Match(this.FactsetEntityId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FactsetEntityId, must match a pattern of " + regexFactsetEntityId, new [] { "FactsetEntityId" });
            }

            // RequestId (string) maxLength
            if (this.RequestId != null && this.RequestId.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be less than 60.", new [] { "RequestId" });
            }

            // RequestId (string) pattern
            Regex regexRequestId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexRequestId.Match(this.RequestId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must match a pattern of " + regexRequestId, new [] { "RequestId" });
            }

            // ArticleId (string) maxLength
            if (this.ArticleId != null && this.ArticleId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArticleId, length must be less than 100.", new [] { "ArticleId" });
            }

            // ArticleId (string) pattern
            Regex regexArticleId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexArticleId.Match(this.ArticleId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArticleId, must match a pattern of " + regexArticleId, new [] { "ArticleId" });
            }

            yield break;
        }
    }

}
