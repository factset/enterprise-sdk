/*
 * FactSet ESG API
 *
 * FactSet ESG (powered by FactSet Truvalue) applies Natural Language Processing and Machine Learning to uncover risks and opportunities from companies' Environmental, Social and Governance (ESG) behavior, which are aggregated and categorized into continuously updated, material ESG scores. The service focuses on company ESG behavior from external sources and includes both positive and negative events that go beyond traditional sources of ESG risk data.<p> FactSet ESG extracts, analyzes, and generates scores from millions of documents each month collected from more than 200,000 data sources in over 38 languages. Sources include news, trade journals, NGOs, watchdog groups, trade blogs and industry reports. Products deliver investable insights by revealing value and risk factors from unstructured data at the speed of current events.</p> 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetESG.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetESG.Model
{
    /// <summary>
    /// SFDR PAI Indicators Response Object
    /// </summary>
    [DataContract(Name = "SfdrPai")]
    public partial class SfdrPai : IEquatable<SfdrPai>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SfdrPai" /> class.
        /// </summary>
        /// <param name="fsymId">FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E)..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="subTopicCode">Codes for the General, Mandatory and Additional PAI indicators.</param>
        /// <param name="subTopicName">Names for the General, Mandatory and Additional PAI indicators.</param>
        /// <param name="indicatorType">The type of indicator - General, Additional &amp; Mandatory.</param>
        /// <param name="periodEndDate">The Reporting period end date expressed in YYYY-MM-DD format.</param>
        /// <param name="reportingPeriod">The reporting period of the company expressed in YYYY format.</param>
        /// <param name="standardizedUnit">The units of measurements for the indicators.</param>
        /// <param name="standardizedValue">The PAI calculations based on the company-reported data, some metrics sourced from Factset Databases and Truvalue SASB Spotlights.</param>
        /// <param name="currency">Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="error">error.</param>
        public SfdrPai(string fsymId = default(string), string requestId = default(string), string subTopicCode = default(string), string subTopicName = default(string), string indicatorType = default(string), DateTime? periodEndDate = default(DateTime?), string reportingPeriod = default(string), string standardizedUnit = default(string), string standardizedValue = default(string), string currency = default(string), InvalidIdErrorObject error = default(InvalidIdErrorObject))
        {
            this.FsymId = fsymId;
            this.RequestId = requestId;
            this.SubTopicCode = subTopicCode;
            this.SubTopicName = subTopicName;
            this.IndicatorType = indicatorType;
            this.PeriodEndDate = periodEndDate;
            this.ReportingPeriod = reportingPeriod;
            this.StandardizedUnit = standardizedUnit;
            this.StandardizedValue = standardizedValue;
            this.Currency = currency;
            this.Error = error;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).
        /// </summary>
        /// <value>FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Codes for the General, Mandatory and Additional PAI indicators
        /// </summary>
        /// <value>Codes for the General, Mandatory and Additional PAI indicators</value>
        [DataMember(Name = "subTopicCode", EmitDefaultValue = true)]
        public string SubTopicCode { get; set; }

        /// <summary>
        /// Names for the General, Mandatory and Additional PAI indicators
        /// </summary>
        /// <value>Names for the General, Mandatory and Additional PAI indicators</value>
        [DataMember(Name = "subTopicName", EmitDefaultValue = true)]
        public string SubTopicName { get; set; }

        /// <summary>
        /// The type of indicator - General, Additional &amp; Mandatory
        /// </summary>
        /// <value>The type of indicator - General, Additional &amp; Mandatory</value>
        [DataMember(Name = "indicatorType", EmitDefaultValue = true)]
        public string IndicatorType { get; set; }

        /// <summary>
        /// The Reporting period end date expressed in YYYY-MM-DD format
        /// </summary>
        /// <value>The Reporting period end date expressed in YYYY-MM-DD format</value>
        [DataMember(Name = "periodEndDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PeriodEndDate { get; set; }

        /// <summary>
        /// The reporting period of the company expressed in YYYY format
        /// </summary>
        /// <value>The reporting period of the company expressed in YYYY format</value>
        [DataMember(Name = "reportingPeriod", EmitDefaultValue = true)]
        public string ReportingPeriod { get; set; }

        /// <summary>
        /// The units of measurements for the indicators
        /// </summary>
        /// <value>The units of measurements for the indicators</value>
        [DataMember(Name = "standardizedUnit", EmitDefaultValue = true)]
        public string StandardizedUnit { get; set; }

        /// <summary>
        /// The PAI calculations based on the company-reported data, some metrics sourced from Factset Databases and Truvalue SASB Spotlights
        /// </summary>
        /// <value>The PAI calculations based on the company-reported data, some metrics sourced from Factset Databases and Truvalue SASB Spotlights</value>
        [DataMember(Name = "standardizedValue", EmitDefaultValue = true)]
        public string StandardizedValue { get; set; }

        /// <summary>
        /// Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public InvalidIdErrorObject Error { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SfdrPai {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  SubTopicCode: ").Append(SubTopicCode).Append("\n");
            sb.Append("  SubTopicName: ").Append(SubTopicName).Append("\n");
            sb.Append("  IndicatorType: ").Append(IndicatorType).Append("\n");
            sb.Append("  PeriodEndDate: ").Append(PeriodEndDate).Append("\n");
            sb.Append("  ReportingPeriod: ").Append(ReportingPeriod).Append("\n");
            sb.Append("  StandardizedUnit: ").Append(StandardizedUnit).Append("\n");
            sb.Append("  StandardizedValue: ").Append(StandardizedValue).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SfdrPai);
        }

        /// <summary>
        /// Returns true if SfdrPai instances are equal
        /// </summary>
        /// <param name="input">Instance of SfdrPai to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SfdrPai input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.SubTopicCode == input.SubTopicCode ||
                    (this.SubTopicCode != null &&
                    this.SubTopicCode.Equals(input.SubTopicCode))
                ) && 
                (
                    this.SubTopicName == input.SubTopicName ||
                    (this.SubTopicName != null &&
                    this.SubTopicName.Equals(input.SubTopicName))
                ) && 
                (
                    this.IndicatorType == input.IndicatorType ||
                    (this.IndicatorType != null &&
                    this.IndicatorType.Equals(input.IndicatorType))
                ) && 
                (
                    this.PeriodEndDate == input.PeriodEndDate ||
                    (this.PeriodEndDate != null &&
                    this.PeriodEndDate.Equals(input.PeriodEndDate))
                ) && 
                (
                    this.ReportingPeriod == input.ReportingPeriod ||
                    (this.ReportingPeriod != null &&
                    this.ReportingPeriod.Equals(input.ReportingPeriod))
                ) && 
                (
                    this.StandardizedUnit == input.StandardizedUnit ||
                    (this.StandardizedUnit != null &&
                    this.StandardizedUnit.Equals(input.StandardizedUnit))
                ) && 
                (
                    this.StandardizedValue == input.StandardizedValue ||
                    (this.StandardizedValue != null &&
                    this.StandardizedValue.Equals(input.StandardizedValue))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.SubTopicCode != null)
                {
                    hashCode = (hashCode * 59) + this.SubTopicCode.GetHashCode();
                }
                if (this.SubTopicName != null)
                {
                    hashCode = (hashCode * 59) + this.SubTopicName.GetHashCode();
                }
                if (this.IndicatorType != null)
                {
                    hashCode = (hashCode * 59) + this.IndicatorType.GetHashCode();
                }
                if (this.PeriodEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodEndDate.GetHashCode();
                }
                if (this.ReportingPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.ReportingPeriod.GetHashCode();
                }
                if (this.StandardizedUnit != null)
                {
                    hashCode = (hashCode * 59) + this.StandardizedUnit.GetHashCode();
                }
                if (this.StandardizedValue != null)
                {
                    hashCode = (hashCode * 59) + this.StandardizedValue.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FsymId (string) maxLength
            if (this.FsymId != null && this.FsymId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FsymId, length must be less than 10.", new [] { "FsymId" });
            }

            // FsymId (string) pattern
            Regex regexFsymId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexFsymId.Match(this.FsymId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FsymId, must match a pattern of " + regexFsymId, new [] { "FsymId" });
            }

            // RequestId (string) maxLength
            if (this.RequestId != null && this.RequestId.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be less than 60.", new [] { "RequestId" });
            }

            // RequestId (string) pattern
            Regex regexRequestId = new Regex(@"^[A-Za-z0-9 -]+$", RegexOptions.CultureInvariant);
            if (false == regexRequestId.Match(this.RequestId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must match a pattern of " + regexRequestId, new [] { "RequestId" });
            }

            // SubTopicCode (string) maxLength
            if (this.SubTopicCode != null && this.SubTopicCode.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubTopicCode, length must be less than 60.", new [] { "SubTopicCode" });
            }

            // SubTopicCode (string) pattern
            Regex regexSubTopicCode = new Regex(@"^[A-Za-z0-9 '-]+$", RegexOptions.CultureInvariant);
            if (false == regexSubTopicCode.Match(this.SubTopicCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubTopicCode, must match a pattern of " + regexSubTopicCode, new [] { "SubTopicCode" });
            }

            // SubTopicName (string) maxLength
            if (this.SubTopicName != null && this.SubTopicName.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubTopicName, length must be less than 200.", new [] { "SubTopicName" });
            }

            // SubTopicName (string) pattern
            Regex regexSubTopicName = new Regex(@"^[A-Za-z0-9 ',-]+$", RegexOptions.CultureInvariant);
            if (false == regexSubTopicName.Match(this.SubTopicName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubTopicName, must match a pattern of " + regexSubTopicName, new [] { "SubTopicName" });
            }

            // IndicatorType (string) maxLength
            if (this.IndicatorType != null && this.IndicatorType.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IndicatorType, length must be less than 30.", new [] { "IndicatorType" });
            }

            // IndicatorType (string) pattern
            Regex regexIndicatorType = new Regex(@"^[A-Za-z]+$", RegexOptions.CultureInvariant);
            if (false == regexIndicatorType.Match(this.IndicatorType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IndicatorType, must match a pattern of " + regexIndicatorType, new [] { "IndicatorType" });
            }

            // ReportingPeriod (string) maxLength
            if (this.ReportingPeriod != null && this.ReportingPeriod.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReportingPeriod, length must be less than 4.", new [] { "ReportingPeriod" });
            }

            // ReportingPeriod (string) pattern
            Regex regexReportingPeriod = new Regex(@"^[0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexReportingPeriod.Match(this.ReportingPeriod).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReportingPeriod, must match a pattern of " + regexReportingPeriod, new [] { "ReportingPeriod" });
            }

            // StandardizedUnit (string) maxLength
            if (this.StandardizedUnit != null && this.StandardizedUnit.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StandardizedUnit, length must be less than 100.", new [] { "StandardizedUnit" });
            }

            // StandardizedUnit (string) pattern
            Regex regexStandardizedUnit = new Regex(@"^[A-Za-z0-9 ]+$", RegexOptions.CultureInvariant);
            if (false == regexStandardizedUnit.Match(this.StandardizedUnit).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StandardizedUnit, must match a pattern of " + regexStandardizedUnit, new [] { "StandardizedUnit" });
            }

            // StandardizedValue (string) maxLength
            if (this.StandardizedValue != null && this.StandardizedValue.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StandardizedValue, length must be less than 50.", new [] { "StandardizedValue" });
            }

            // StandardizedValue (string) pattern
            Regex regexStandardizedValue = new Regex(@"^[A-Za-z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexStandardizedValue.Match(this.StandardizedValue).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StandardizedValue, must match a pattern of " + regexStandardizedValue, new [] { "StandardizedValue" });
            }

            // Currency (string) maxLength
            if (this.Currency != null && this.Currency.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be less than 30.", new [] { "Currency" });
            }

            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"^[A-Za-z]+$", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            yield break;
        }
    }

}
