/*
 * Universal Screening API
 *
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.UniversalScreening.Client;
using FactSet.SDK.UniversalScreening.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.UniversalScreening.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScreeningOperationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of complete screen calculation. Screens with more than 10,000 rows will be returned in a paginated format. Results may be fetched in pages of 1,000 - 100,000 results with 10,000 being the default page size.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="paginationLimit">Page size limit (minumum 1000, default 10,000, maximum 100,000) (optional, default to 10000)</param>
        /// <param name="paginationCursor">Paging index (Initial request may omit) (optional, default to 0)</param>
        /// <returns>PaginatedCalculationResponse</returns>
        PaginatedCalculationResponse GetCalculateResults(Guid id, int? paginationLimit = default(int?), int? paginationCursor = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of complete screen calculation. Screens with more than 10,000 rows will be returned in a paginated format. Results may be fetched in pages of 1,000 - 100,000 results with 10,000 being the default page size.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="paginationLimit">Page size limit (minumum 1000, default 10,000, maximum 100,000) (optional, default to 10000)</param>
        /// <param name="paginationCursor">Paging index (Initial request may omit) (optional, default to 0)</param>
        /// <returns>ApiResponse of PaginatedCalculationResponse</returns>
        ApiResponse<PaginatedCalculationResponse> GetCalculateResultsWithHttpInfo(Guid id, int? paginationLimit = default(int?), int? paginationCursor = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of an export request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetExportResults(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of an export request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetExportResultsWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Polls the job with a given screen ID and returns job status
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <returns>ResourceStatusResponse</returns>
        ResourceStatusResponse PollCalculate(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Polls the job with a given screen ID and returns job status
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <returns>ApiResponse of ResourceStatusResponse</returns>
        ApiResponse<ResourceStatusResponse> PollCalculateWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins archive of screen to OFDB. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenArchiveOFDBParameters">Data required for an archive to OFDB request (optional)</param>
        /// <returns>ResourceStatusResponse</returns>
        ResourceStatusResponse SubmitArchiveOFDB(ScreenArchiveOFDBParameters screenArchiveOFDBParameters = default(ScreenArchiveOFDBParameters));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins archive of screen to OFDB. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenArchiveOFDBParameters">Data required for an archive to OFDB request (optional)</param>
        /// <returns>ApiResponse of ResourceStatusResponse</returns>
        ApiResponse<ResourceStatusResponse> SubmitArchiveOFDBWithHttpInfo(ScreenArchiveOFDBParameters screenArchiveOFDBParameters = default(ScreenArchiveOFDBParameters));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins calculation of screen. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenCalcParameters">Data required for a calculation request (optional)</param>
        /// <returns>ResourceStatusResponse</returns>
        ResourceStatusResponse SubmitCalculate(ScreenCalcParameters screenCalcParameters = default(ScreenCalcParameters));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins calculation of screen. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenCalcParameters">Data required for a calculation request (optional)</param>
        /// <returns>ApiResponse of ResourceStatusResponse</returns>
        ApiResponse<ResourceStatusResponse> SubmitCalculateWithHttpInfo(ScreenCalcParameters screenCalcParameters = default(ScreenCalcParameters));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins the calculate and export of screen to specified file format. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenExportParameters">Data required for an export request (optional)</param>
        /// <returns>SubmitExportResponse</returns>
        SubmitExportResponse SubmitExport(ScreenExportParameters screenExportParameters = default(ScreenExportParameters));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins the calculate and export of screen to specified file format. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenExportParameters">Data required for an export request (optional)</param>
        /// <returns>ApiResponse of SubmitExportResponse</returns>
        ApiResponse<SubmitExportResponse> SubmitExportWithHttpInfo(ScreenExportParameters screenExportParameters = default(ScreenExportParameters));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScreeningOperationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of complete screen calculation. Screens with more than 10,000 rows will be returned in a paginated format. Results may be fetched in pages of 1,000 - 100,000 results with 10,000 being the default page size.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="paginationLimit">Page size limit (minumum 1000, default 10,000, maximum 100,000) (optional, default to 10000)</param>
        /// <param name="paginationCursor">Paging index (Initial request may omit) (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalculationResponse</returns>
        System.Threading.Tasks.Task<PaginatedCalculationResponse> GetCalculateResultsAsync(Guid id, int? paginationLimit = default(int?), int? paginationCursor = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of complete screen calculation. Screens with more than 10,000 rows will be returned in a paginated format. Results may be fetched in pages of 1,000 - 100,000 results with 10,000 being the default page size.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="paginationLimit">Page size limit (minumum 1000, default 10,000, maximum 100,000) (optional, default to 10000)</param>
        /// <param name="paginationCursor">Paging index (Initial request may omit) (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalculationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedCalculationResponse>> GetCalculateResultsWithHttpInfoAsync(Guid id, int? paginationLimit = default(int?), int? paginationCursor = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of an export request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetExportResultsAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of an export request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetExportResultsWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Polls the job with a given screen ID and returns job status
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceStatusResponse</returns>
        System.Threading.Tasks.Task<ResourceStatusResponse> PollCalculateAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Polls the job with a given screen ID and returns job status
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceStatusResponse>> PollCalculateWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins archive of screen to OFDB. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenArchiveOFDBParameters">Data required for an archive to OFDB request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceStatusResponse</returns>
        System.Threading.Tasks.Task<ResourceStatusResponse> SubmitArchiveOFDBAsync(ScreenArchiveOFDBParameters screenArchiveOFDBParameters = default(ScreenArchiveOFDBParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins archive of screen to OFDB. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenArchiveOFDBParameters">Data required for an archive to OFDB request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceStatusResponse>> SubmitArchiveOFDBWithHttpInfoAsync(ScreenArchiveOFDBParameters screenArchiveOFDBParameters = default(ScreenArchiveOFDBParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins calculation of screen. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenCalcParameters">Data required for a calculation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceStatusResponse</returns>
        System.Threading.Tasks.Task<ResourceStatusResponse> SubmitCalculateAsync(ScreenCalcParameters screenCalcParameters = default(ScreenCalcParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins calculation of screen. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenCalcParameters">Data required for a calculation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceStatusResponse>> SubmitCalculateWithHttpInfoAsync(ScreenCalcParameters screenCalcParameters = default(ScreenCalcParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins the calculate and export of screen to specified file format. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenExportParameters">Data required for an export request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitExportResponse</returns>
        System.Threading.Tasks.Task<SubmitExportResponse> SubmitExportAsync(ScreenExportParameters screenExportParameters = default(ScreenExportParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Begins the calculate and export of screen to specified file format. Subject to rate limiting by serial.
        /// </remarks>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenExportParameters">Data required for an export request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitExportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitExportResponse>> SubmitExportWithHttpInfoAsync(ScreenExportParameters screenExportParameters = default(ScreenExportParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScreeningOperationsApi : IScreeningOperationsApiSync, IScreeningOperationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScreeningOperationsApi : IScreeningOperationsApi
    {
        private FactSet.SDK.UniversalScreening.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCalculateResultsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PaginatedCalculationResponse) },
            { (HttpStatusCode)202, typeof(ResourceStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorArray) },
            { (HttpStatusCode)401, typeof(ErrorArray) },
            { (HttpStatusCode)403, typeof(ErrorArray) },
            { (HttpStatusCode)404, typeof(ErrorArray) },
            { (HttpStatusCode)410, typeof(ErrorArray) },
            { (HttpStatusCode)429, typeof(ErrorArray) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetExportResultsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(System.IO.Stream) },
            { (HttpStatusCode)202, typeof(ResourceStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorArray) },
            { (HttpStatusCode)401, typeof(ErrorArray) },
            { (HttpStatusCode)403, typeof(ErrorArray) },
            { (HttpStatusCode)404, typeof(ErrorArray) },
            { (HttpStatusCode)410, typeof(ErrorArray) },
            { (HttpStatusCode)429, typeof(ErrorArray) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PollCalculateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(ResourceStatusResponse) },
            { (HttpStatusCode)202, typeof(ResourceStatusResponse) },
            { (HttpStatusCode)401, typeof(ErrorArray) },
            { (HttpStatusCode)403, typeof(ErrorArray) },
            { (HttpStatusCode)404, typeof(ErrorArray) },
            { (HttpStatusCode)410, typeof(ErrorArray) },
            { (HttpStatusCode)429, typeof(ErrorArray) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> SubmitArchiveOFDBResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(ResourceStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorArray) },
            { (HttpStatusCode)401, typeof(ErrorArray) },
            { (HttpStatusCode)429, typeof(ErrorArray) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> SubmitCalculateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(ResourceStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorArray) },
            { (HttpStatusCode)401, typeof(ErrorArray) },
            { (HttpStatusCode)429, typeof(ErrorArray) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> SubmitExportResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(SubmitExportResponse) },
            { (HttpStatusCode)400, typeof(ErrorArray) },
            { (HttpStatusCode)401, typeof(ErrorArray) },
            { (HttpStatusCode)429, typeof(ErrorArray) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreeningOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScreeningOperationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreeningOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScreeningOperationsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.UniversalScreening.Client.Configuration.MergeConfigurations(
                FactSet.SDK.UniversalScreening.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.UniversalScreening.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.UniversalScreening.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.UniversalScreening.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.UniversalScreening.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreeningOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScreeningOperationsApi(FactSet.SDK.UniversalScreening.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.UniversalScreening.Client.Configuration.MergeConfigurations(
                FactSet.SDK.UniversalScreening.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.UniversalScreening.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.UniversalScreening.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.UniversalScreening.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreeningOperationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScreeningOperationsApi(FactSet.SDK.UniversalScreening.Client.ISynchronousClient client, FactSet.SDK.UniversalScreening.Client.IAsynchronousClient asyncClient, FactSet.SDK.UniversalScreening.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.UniversalScreening.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.UniversalScreening.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.UniversalScreening.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.UniversalScreening.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.UniversalScreening.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieve results of complete screen calculation. Screens with more than 10,000 rows will be returned in a paginated format. Results may be fetched in pages of 1,000 - 100,000 results with 10,000 being the default page size.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="paginationLimit">Page size limit (minumum 1000, default 10,000, maximum 100,000) (optional, default to 10000)</param>
        /// <param name="paginationCursor">Paging index (Initial request may omit) (optional, default to 0)</param>
        /// <returns>PaginatedCalculationResponse</returns>
        public PaginatedCalculationResponse GetCalculateResults(Guid id, int? paginationLimit = default(int?), int? paginationCursor = default(int?))
        {
            var localVarResponse = GetCalculateResultsWithHttpInfo(id, paginationLimit, paginationCursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve results of complete screen calculation. Screens with more than 10,000 rows will be returned in a paginated format. Results may be fetched in pages of 1,000 - 100,000 results with 10,000 being the default page size.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="paginationLimit">Page size limit (minumum 1000, default 10,000, maximum 100,000) (optional, default to 10000)</param>
        /// <param name="paginationCursor">Paging index (Initial request may omit) (optional, default to 0)</param>
        /// <returns>ApiResponse of PaginatedCalculationResponse</returns>
        public ApiResponse<PaginatedCalculationResponse> GetCalculateResultsWithHttpInfo(Guid id, int? paginationLimit = default(int?), int? paginationCursor = default(int?))
        {
            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.UniversalScreening.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.UniversalScreening.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.UniversalScreening.Client.ClientUtils.ParameterToMultiMap("", "_paginationCursor", paginationCursor));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCalculateResultsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            PaginatedCalculationResponse>("/job/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalculateResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve results of complete screen calculation. Screens with more than 10,000 rows will be returned in a paginated format. Results may be fetched in pages of 1,000 - 100,000 results with 10,000 being the default page size.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="paginationLimit">Page size limit (minumum 1000, default 10,000, maximum 100,000) (optional, default to 10000)</param>
        /// <param name="paginationCursor">Paging index (Initial request may omit) (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedCalculationResponse</returns>
        public async System.Threading.Tasks.Task<PaginatedCalculationResponse>GetCalculateResultsAsync(Guid id, int? paginationLimit = default(int?), int? paginationCursor = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCalculateResultsWithHttpInfoAsync(id, paginationLimit, paginationCursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve results of complete screen calculation. Screens with more than 10,000 rows will be returned in a paginated format. Results may be fetched in pages of 1,000 - 100,000 results with 10,000 being the default page size.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="paginationLimit">Page size limit (minumum 1000, default 10,000, maximum 100,000) (optional, default to 10000)</param>
        /// <param name="paginationCursor">Paging index (Initial request may omit) (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedCalculationResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PaginatedCalculationResponse>> GetCalculateResultsWithHttpInfoAsync(Guid id, int? paginationLimit = default(int?), int? paginationCursor = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.UniversalScreening.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.UniversalScreening.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.UniversalScreening.Client.ClientUtils.ParameterToMultiMap("", "_paginationCursor", paginationCursor));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCalculateResultsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedCalculationResponse>("/job/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalculateResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve results of an export request.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetExportResults(Guid id)
        {
            var localVarResponse = GetExportResultsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve results of an export request.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetExportResultsWithHttpInfo(Guid id)
        {
            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "text/csv",
                "text/plain",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.UniversalScreening.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetExportResultsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            System.IO.Stream>("/job/{id}/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExportResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve results of an export request.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream>GetExportResultsAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetExportResultsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve results of an export request.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetExportResultsWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "text/csv",
                "text/plain",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.UniversalScreening.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetExportResultsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/job/{id}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExportResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Polls the job with a given screen ID and returns job status
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <returns>ResourceStatusResponse</returns>
        public ResourceStatusResponse PollCalculate(Guid id)
        {
            var localVarResponse = PollCalculateWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Polls the job with a given screen ID and returns job status
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <returns>ApiResponse of ResourceStatusResponse</returns>
        public ApiResponse<ResourceStatusResponse> PollCalculateWithHttpInfo(Guid id)
        {
            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.UniversalScreening.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PollCalculateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ResourceStatusResponse>("/job/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PollCalculate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Polls the job with a given screen ID and returns job status
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceStatusResponse</returns>
        public async System.Threading.Tasks.Task<ResourceStatusResponse>PollCalculateAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PollCalculateWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Polls the job with a given screen ID and returns job status
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier for a job. \&quot;Job\&quot; refers to a screen calculation or archival.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceStatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ResourceStatusResponse>> PollCalculateWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.UniversalScreening.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PollCalculateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceStatusResponse>("/job/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PollCalculate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Begins archive of screen to OFDB. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenArchiveOFDBParameters">Data required for an archive to OFDB request (optional)</param>
        /// <returns>ResourceStatusResponse</returns>
        public ResourceStatusResponse SubmitArchiveOFDB(ScreenArchiveOFDBParameters screenArchiveOFDBParameters = default(ScreenArchiveOFDBParameters))
        {
            var localVarResponse = SubmitArchiveOFDBWithHttpInfo(screenArchiveOFDBParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Begins archive of screen to OFDB. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenArchiveOFDBParameters">Data required for an archive to OFDB request (optional)</param>
        /// <returns>ApiResponse of ResourceStatusResponse</returns>
        public ApiResponse<ResourceStatusResponse> SubmitArchiveOFDBWithHttpInfo(ScreenArchiveOFDBParameters screenArchiveOFDBParameters = default(ScreenArchiveOFDBParameters))
        {
            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = screenArchiveOFDBParameters;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = SubmitArchiveOFDBResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            ResourceStatusResponse>("/job/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitArchiveOFDB", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Begins archive of screen to OFDB. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenArchiveOFDBParameters">Data required for an archive to OFDB request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceStatusResponse</returns>
        public async System.Threading.Tasks.Task<ResourceStatusResponse>SubmitArchiveOFDBAsync(ScreenArchiveOFDBParameters screenArchiveOFDBParameters = default(ScreenArchiveOFDBParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SubmitArchiveOFDBWithHttpInfoAsync(screenArchiveOFDBParameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Begins archive of screen to OFDB. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenArchiveOFDBParameters">Data required for an archive to OFDB request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceStatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ResourceStatusResponse>> SubmitArchiveOFDBWithHttpInfoAsync(ScreenArchiveOFDBParameters screenArchiveOFDBParameters = default(ScreenArchiveOFDBParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = screenArchiveOFDBParameters;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = SubmitArchiveOFDBResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceStatusResponse>("/job/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitArchiveOFDB", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Begins calculation of screen. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenCalcParameters">Data required for a calculation request (optional)</param>
        /// <returns>ResourceStatusResponse</returns>
        public ResourceStatusResponse SubmitCalculate(ScreenCalcParameters screenCalcParameters = default(ScreenCalcParameters))
        {
            var localVarResponse = SubmitCalculateWithHttpInfo(screenCalcParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Begins calculation of screen. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenCalcParameters">Data required for a calculation request (optional)</param>
        /// <returns>ApiResponse of ResourceStatusResponse</returns>
        public ApiResponse<ResourceStatusResponse> SubmitCalculateWithHttpInfo(ScreenCalcParameters screenCalcParameters = default(ScreenCalcParameters))
        {
            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = screenCalcParameters;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = SubmitCalculateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            ResourceStatusResponse>("/job/calculate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitCalculate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Begins calculation of screen. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenCalcParameters">Data required for a calculation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceStatusResponse</returns>
        public async System.Threading.Tasks.Task<ResourceStatusResponse>SubmitCalculateAsync(ScreenCalcParameters screenCalcParameters = default(ScreenCalcParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SubmitCalculateWithHttpInfoAsync(screenCalcParameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Begins calculation of screen. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenCalcParameters">Data required for a calculation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceStatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ResourceStatusResponse>> SubmitCalculateWithHttpInfoAsync(ScreenCalcParameters screenCalcParameters = default(ScreenCalcParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = screenCalcParameters;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = SubmitCalculateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceStatusResponse>("/job/calculate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitCalculate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Begins the calculate and export of screen to specified file format. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenExportParameters">Data required for an export request (optional)</param>
        /// <returns>SubmitExportResponse</returns>
        public SubmitExportResponse SubmitExport(ScreenExportParameters screenExportParameters = default(ScreenExportParameters))
        {
            var localVarResponse = SubmitExportWithHttpInfo(screenExportParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Begins the calculate and export of screen to specified file format. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenExportParameters">Data required for an export request (optional)</param>
        /// <returns>ApiResponse of SubmitExportResponse</returns>
        public ApiResponse<SubmitExportResponse> SubmitExportWithHttpInfo(ScreenExportParameters screenExportParameters = default(ScreenExportParameters))
        {
            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = screenExportParameters;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = SubmitExportResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SubmitExportResponse>("/job/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitExport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Begins the calculate and export of screen to specified file format. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenExportParameters">Data required for an export request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmitExportResponse</returns>
        public async System.Threading.Tasks.Task<SubmitExportResponse>SubmitExportAsync(ScreenExportParameters screenExportParameters = default(ScreenExportParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SubmitExportWithHttpInfoAsync(screenExportParameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Begins the calculate and export of screen to specified file format. Subject to rate limiting by serial.
        /// </summary>
        /// <exception cref="FactSet.SDK.UniversalScreening.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="screenExportParameters">Data required for an export request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmitExportResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SubmitExportResponse>> SubmitExportWithHttpInfoAsync(ScreenExportParameters screenExportParameters = default(ScreenExportParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.UniversalScreening.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.UniversalScreening.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.UniversalScreening.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = screenExportParameters;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.UniversalScreening.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = SubmitExportResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubmitExportResponse>("/job/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitExport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
