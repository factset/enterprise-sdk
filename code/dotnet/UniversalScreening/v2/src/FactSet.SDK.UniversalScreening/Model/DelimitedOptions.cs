/*
 * Universal Screening API
 *
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.UniversalScreening.Client.OpenAPIDateConverter;

namespace FactSet.SDK.UniversalScreening.Model
{
    /// <summary>
    /// Options applied to delimited output.
    /// </summary>
    [DataContract(Name = "DelimitedOptions")]
    public partial class DelimitedOptions : IEquatable<DelimitedOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DelimitedOptions" /> class.
        /// </summary>
        /// <param name="isDatabase">Output will be returned in a legacy database format.  Will be ignored if file type of \&quot;text/csv\&quot; is requested.  Default is false.  Additional access is required for this format. (default to false).</param>
        /// <param name="delimiter">Specifies the delimiter used between each data point.  A comma is the default delimiter; if this argument is not specified, a comma delimiter will be used.  If the file type of \&quot;text/csv\&quot; is requested, this field will be ignored and a comma will be used. (default to &quot;,&quot;).</param>
        /// <param name="hideHeaderRows">Specifies whether column column headers should be included in the output. By default, the option is set to true. (default to true).</param>
        /// <param name="applyQuotedStrings">Specifies whether textual data should have quotes around it (i.e., true will include quotes around textual values). By default, the option is set to true. (default to true).</param>
        /// <param name="applySavedNAFormatting">Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \&quot;NA\&quot; will be used to indicate the data that is not available. (default to false).</param>
        /// <param name="applyFilters">Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output. (default to false).</param>
        public DelimitedOptions(bool isDatabase = false, string delimiter = ",", bool? hideHeaderRows = true, bool? applyQuotedStrings = true, bool? applySavedNAFormatting = false, bool? applyFilters = false)
        {
            this.IsDatabase = isDatabase;
            // use default value if no "delimiter" provided
            this.Delimiter = delimiter ?? ",";
            // use default value if no "hideHeaderRows" provided
            this.HideHeaderRows = hideHeaderRows ?? true;
            // use default value if no "applyQuotedStrings" provided
            this.ApplyQuotedStrings = applyQuotedStrings ?? true;
            // use default value if no "applySavedNAFormatting" provided
            this.ApplySavedNAFormatting = applySavedNAFormatting ?? false;
            // use default value if no "applyFilters" provided
            this.ApplyFilters = applyFilters ?? false;
        }

        /// <summary>
        /// Output will be returned in a legacy database format.  Will be ignored if file type of \&quot;text/csv\&quot; is requested.  Default is false.  Additional access is required for this format.
        /// </summary>
        /// <value>Output will be returned in a legacy database format.  Will be ignored if file type of \&quot;text/csv\&quot; is requested.  Default is false.  Additional access is required for this format.</value>
        [DataMember(Name = "isDatabase", EmitDefaultValue = true)]
        public bool IsDatabase { get; set; }

        /// <summary>
        /// Specifies the delimiter used between each data point.  A comma is the default delimiter; if this argument is not specified, a comma delimiter will be used.  If the file type of \&quot;text/csv\&quot; is requested, this field will be ignored and a comma will be used.
        /// </summary>
        /// <value>Specifies the delimiter used between each data point.  A comma is the default delimiter; if this argument is not specified, a comma delimiter will be used.  If the file type of \&quot;text/csv\&quot; is requested, this field will be ignored and a comma will be used.</value>
        [DataMember(Name = "delimiter", EmitDefaultValue = true)]
        public string Delimiter { get; set; }

        /// <summary>
        /// Specifies whether column column headers should be included in the output. By default, the option is set to true.
        /// </summary>
        /// <value>Specifies whether column column headers should be included in the output. By default, the option is set to true.</value>
        [DataMember(Name = "hideHeaderRows", EmitDefaultValue = true)]
        public bool? HideHeaderRows { get; set; }

        /// <summary>
        /// Specifies whether textual data should have quotes around it (i.e., true will include quotes around textual values). By default, the option is set to true.
        /// </summary>
        /// <value>Specifies whether textual data should have quotes around it (i.e., true will include quotes around textual values). By default, the option is set to true.</value>
        [DataMember(Name = "applyQuotedStrings", EmitDefaultValue = true)]
        public bool? ApplyQuotedStrings { get; set; }

        /// <summary>
        /// Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \&quot;NA\&quot; will be used to indicate the data that is not available.
        /// </summary>
        /// <value>Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \&quot;NA\&quot; will be used to indicate the data that is not available.</value>
        [DataMember(Name = "applySavedNAFormatting", EmitDefaultValue = true)]
        public bool? ApplySavedNAFormatting { get; set; }

        /// <summary>
        /// Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.
        /// </summary>
        /// <value>Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.</value>
        [DataMember(Name = "applyFilters", EmitDefaultValue = true)]
        public bool? ApplyFilters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DelimitedOptions {\n");
            sb.Append("  IsDatabase: ").Append(IsDatabase).Append("\n");
            sb.Append("  Delimiter: ").Append(Delimiter).Append("\n");
            sb.Append("  HideHeaderRows: ").Append(HideHeaderRows).Append("\n");
            sb.Append("  ApplyQuotedStrings: ").Append(ApplyQuotedStrings).Append("\n");
            sb.Append("  ApplySavedNAFormatting: ").Append(ApplySavedNAFormatting).Append("\n");
            sb.Append("  ApplyFilters: ").Append(ApplyFilters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DelimitedOptions);
        }

        /// <summary>
        /// Returns true if DelimitedOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of DelimitedOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DelimitedOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsDatabase == input.IsDatabase ||
                    this.IsDatabase.Equals(input.IsDatabase)
                ) && 
                (
                    this.Delimiter == input.Delimiter ||
                    (this.Delimiter != null &&
                    this.Delimiter.Equals(input.Delimiter))
                ) && 
                (
                    this.HideHeaderRows == input.HideHeaderRows ||
                    (this.HideHeaderRows != null &&
                    this.HideHeaderRows.Equals(input.HideHeaderRows))
                ) && 
                (
                    this.ApplyQuotedStrings == input.ApplyQuotedStrings ||
                    (this.ApplyQuotedStrings != null &&
                    this.ApplyQuotedStrings.Equals(input.ApplyQuotedStrings))
                ) && 
                (
                    this.ApplySavedNAFormatting == input.ApplySavedNAFormatting ||
                    (this.ApplySavedNAFormatting != null &&
                    this.ApplySavedNAFormatting.Equals(input.ApplySavedNAFormatting))
                ) && 
                (
                    this.ApplyFilters == input.ApplyFilters ||
                    (this.ApplyFilters != null &&
                    this.ApplyFilters.Equals(input.ApplyFilters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsDatabase.GetHashCode();
                if (this.Delimiter != null)
                {
                    hashCode = (hashCode * 59) + this.Delimiter.GetHashCode();
                }
                if (this.HideHeaderRows != null)
                {
                    hashCode = (hashCode * 59) + this.HideHeaderRows.GetHashCode();
                }
                if (this.ApplyQuotedStrings != null)
                {
                    hashCode = (hashCode * 59) + this.ApplyQuotedStrings.GetHashCode();
                }
                if (this.ApplySavedNAFormatting != null)
                {
                    hashCode = (hashCode * 59) + this.ApplySavedNAFormatting.GetHashCode();
                }
                if (this.ApplyFilters != null)
                {
                    hashCode = (hashCode * 59) + this.ApplyFilters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
