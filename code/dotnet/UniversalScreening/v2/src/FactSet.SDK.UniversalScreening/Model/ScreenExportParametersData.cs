/*
 * Universal Screening API
 *
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.UniversalScreening.Client.OpenAPIDateConverter;

namespace FactSet.SDK.UniversalScreening.Model
{
    /// <summary>
    /// Object containing screen and export data
    /// </summary>
    [DataContract(Name = "ScreenExportParameters_data")]
    public partial class ScreenExportParametersData : IEquatable<ScreenExportParametersData>, IValidatableObject
    {
        /// <summary>
        /// Universe type to open a Screen 1.0 document (.usscreen) with\\ &#x60;equity&#x60;: Uses the equity universe from the Screen 1.0 document.\\ &#x60;debt&#x60;: Uses the debt universe from the Screen 1.0 document.\\ &#x60;fund&#x60;: Uses the fund universe from the Screen 1.0 document.
        /// </summary>
        /// <value>Universe type to open a Screen 1.0 document (.usscreen) with\\ &#x60;equity&#x60;: Uses the equity universe from the Screen 1.0 document.\\ &#x60;debt&#x60;: Uses the debt universe from the Screen 1.0 document.\\ &#x60;fund&#x60;: Uses the fund universe from the Screen 1.0 document.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegacyUniverseTypeEnum
        {
            /// <summary>
            /// Enum Equity for value: equity
            /// </summary>
            [EnumMember(Value = "equity")]
            Equity = 1,

            /// <summary>
            /// Enum Debt for value: debt
            /// </summary>
            [EnumMember(Value = "debt")]
            Debt = 2,

            /// <summary>
            /// Enum Fund for value: fund
            /// </summary>
            [EnumMember(Value = "fund")]
            Fund = 3

        }


        /// <summary>
        /// Universe type to open a Screen 1.0 document (.usscreen) with\\ &#x60;equity&#x60;: Uses the equity universe from the Screen 1.0 document.\\ &#x60;debt&#x60;: Uses the debt universe from the Screen 1.0 document.\\ &#x60;fund&#x60;: Uses the fund universe from the Screen 1.0 document.
        /// </summary>
        /// <value>Universe type to open a Screen 1.0 document (.usscreen) with\\ &#x60;equity&#x60;: Uses the equity universe from the Screen 1.0 document.\\ &#x60;debt&#x60;: Uses the debt universe from the Screen 1.0 document.\\ &#x60;fund&#x60;: Uses the fund universe from the Screen 1.0 document.</value>
        [DataMember(Name = "legacyUniverseType", EmitDefaultValue = true)]
        public LegacyUniverseTypeEnum? LegacyUniverseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenExportParametersData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScreenExportParametersData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenExportParametersData" /> class.
        /// </summary>
        /// <param name="screenName">File path to a valid screen (required).</param>
        /// <param name="file">Data required for file export. (required).</param>
        /// <param name="backtestDate">Specifies the backtest date used when running the screen, replacing the backtest date saved in the screen, can be written in YYYYMMDD, MM/DD/YYYY or relative (0, -1, 0/-1/0) format. Requires additional access to use..</param>
        /// <param name="globalVariablesMap">Modifies existing global variables for this calculation request, temporarily adds them if they do not already exist Variable names can only contain the characters A-Z (case insensitive). Variable values must be non-empty..</param>
        /// <param name="legacyUniverseType">Universe type to open a Screen 1.0 document (.usscreen) with\\ &#x60;equity&#x60;: Uses the equity universe from the Screen 1.0 document.\\ &#x60;debt&#x60;: Uses the debt universe from the Screen 1.0 document.\\ &#x60;fund&#x60;: Uses the fund universe from the Screen 1.0 document. (default to LegacyUniverseTypeEnum.Equity).</param>
        public ScreenExportParametersData(string screenName, Object file,string backtestDate = default(string), Dictionary<string, string> globalVariablesMap = default(Dictionary<string, string>), LegacyUniverseTypeEnum? legacyUniverseType = LegacyUniverseTypeEnum.Equity)
        {
            // to ensure "screenName" is required (not null)
            if (screenName == null) {
                throw new ArgumentNullException("screenName is a required property for ScreenExportParametersData and cannot be null");
            }
            this.ScreenName = screenName;
            // to ensure "file" is required (not null)
            if (file == null) {
                throw new ArgumentNullException("file is a required property for ScreenExportParametersData and cannot be null");
            }
            this.File = file;
            this.BacktestDate = backtestDate;
            this.GlobalVariablesMap = globalVariablesMap;
            this.LegacyUniverseType = legacyUniverseType;
        }

        /// <summary>
        /// File path to a valid screen
        /// </summary>
        /// <value>File path to a valid screen</value>
        [DataMember(Name = "screenName", IsRequired = true, EmitDefaultValue = false)]
        public string ScreenName { get; set; }

        /// <summary>
        /// Data required for file export.
        /// </summary>
        /// <value>Data required for file export.</value>
        [DataMember(Name = "file", IsRequired = true, EmitDefaultValue = true)]
        public Object File { get; set; }

        /// <summary>
        /// Specifies the backtest date used when running the screen, replacing the backtest date saved in the screen, can be written in YYYYMMDD, MM/DD/YYYY or relative (0, -1, 0/-1/0) format. Requires additional access to use.
        /// </summary>
        /// <value>Specifies the backtest date used when running the screen, replacing the backtest date saved in the screen, can be written in YYYYMMDD, MM/DD/YYYY or relative (0, -1, 0/-1/0) format. Requires additional access to use.</value>
        [DataMember(Name = "backtestDate", EmitDefaultValue = true)]
        public string BacktestDate { get; set; }

        /// <summary>
        /// Modifies existing global variables for this calculation request, temporarily adds them if they do not already exist Variable names can only contain the characters A-Z (case insensitive). Variable values must be non-empty.
        /// </summary>
        /// <value>Modifies existing global variables for this calculation request, temporarily adds them if they do not already exist Variable names can only contain the characters A-Z (case insensitive). Variable values must be non-empty.</value>
        [DataMember(Name = "globalVariablesMap", EmitDefaultValue = false)]
        public Dictionary<string, string> GlobalVariablesMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScreenExportParametersData {\n");
            sb.Append("  ScreenName: ").Append(ScreenName).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  BacktestDate: ").Append(BacktestDate).Append("\n");
            sb.Append("  GlobalVariablesMap: ").Append(GlobalVariablesMap).Append("\n");
            sb.Append("  LegacyUniverseType: ").Append(LegacyUniverseType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenExportParametersData);
        }

        /// <summary>
        /// Returns true if ScreenExportParametersData instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenExportParametersData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenExportParametersData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ScreenName == input.ScreenName ||
                    (this.ScreenName != null &&
                    this.ScreenName.Equals(input.ScreenName))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.BacktestDate == input.BacktestDate ||
                    (this.BacktestDate != null &&
                    this.BacktestDate.Equals(input.BacktestDate))
                ) && 
                (
                    this.GlobalVariablesMap == input.GlobalVariablesMap ||
                    this.GlobalVariablesMap != null &&
                    input.GlobalVariablesMap != null &&
                    this.GlobalVariablesMap.SequenceEqual(input.GlobalVariablesMap)
                ) && 
                (
                    this.LegacyUniverseType == input.LegacyUniverseType ||
                    this.LegacyUniverseType.Equals(input.LegacyUniverseType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScreenName != null)
                {
                    hashCode = (hashCode * 59) + this.ScreenName.GetHashCode();
                }
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                if (this.BacktestDate != null)
                {
                    hashCode = (hashCode * 59) + this.BacktestDate.GetHashCode();
                }
                if (this.GlobalVariablesMap != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalVariablesMap.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LegacyUniverseType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
