/*
 * Universal Screening API
 *
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.UniversalScreening.Client.OpenAPIDateConverter;

namespace FactSet.SDK.UniversalScreening.Model
{
    /// <summary>
    /// Options applied to Excel output.
    /// </summary>
    [DataContract(Name = "ExcelOptions")]
    public partial class ExcelOptions : IEquatable<ExcelOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExcelOptions" /> class.
        /// </summary>
        /// <param name="isSummary">Specifies that a summary will be generated instead of the full results output. Only the \&quot;applyFilters\&quot; option will have any affect if this is true. By default this option is set to false. (default to false).</param>
        /// <param name="applySavedNAFormatting">Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \&quot;NA\&quot; will be used to indicate the data that is not available. (default to false).</param>
        /// <param name="applyFilters">Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output. (default to false).</param>
        /// <param name="applyAlternateRowShading">Specifies whether every other row shading should be applied to the output. By default, this option is set to false, which means that every other row shading will not be included in the download. (default to false).</param>
        /// <param name="applyExcelOutlining">Specifies that the Download Outline feature will be used when putting the screen&#39;s groupings into an Excel spreadsheet. By default, this option is set to false. (default to false).</param>
        /// <param name="condenseTabsToOneSheet">Specifies whether the report will be downloaded into a single spreadsheet, or into separate sheets following the tabs in the report. By default, this option is set to false. (default to false).</param>
        public ExcelOptions(bool? isSummary = false, bool? applySavedNAFormatting = false, bool? applyFilters = false, bool? applyAlternateRowShading = false, bool? applyExcelOutlining = false, bool? condenseTabsToOneSheet = false)
        {
            // use default value if no "isSummary" provided
            this.IsSummary = isSummary ?? false;
            // use default value if no "applySavedNAFormatting" provided
            this.ApplySavedNAFormatting = applySavedNAFormatting ?? false;
            // use default value if no "applyFilters" provided
            this.ApplyFilters = applyFilters ?? false;
            // use default value if no "applyAlternateRowShading" provided
            this.ApplyAlternateRowShading = applyAlternateRowShading ?? false;
            // use default value if no "applyExcelOutlining" provided
            this.ApplyExcelOutlining = applyExcelOutlining ?? false;
            // use default value if no "condenseTabsToOneSheet" provided
            this.CondenseTabsToOneSheet = condenseTabsToOneSheet ?? false;
        }

        /// <summary>
        /// Specifies that a summary will be generated instead of the full results output. Only the \&quot;applyFilters\&quot; option will have any affect if this is true. By default this option is set to false.
        /// </summary>
        /// <value>Specifies that a summary will be generated instead of the full results output. Only the \&quot;applyFilters\&quot; option will have any affect if this is true. By default this option is set to false.</value>
        [DataMember(Name = "isSummary", EmitDefaultValue = true)]
        public bool? IsSummary { get; set; }

        /// <summary>
        /// Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \&quot;NA\&quot; will be used to indicate the data that is not available.
        /// </summary>
        /// <value>Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \&quot;NA\&quot; will be used to indicate the data that is not available.</value>
        [DataMember(Name = "applySavedNAFormatting", EmitDefaultValue = true)]
        public bool? ApplySavedNAFormatting { get; set; }

        /// <summary>
        /// Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.
        /// </summary>
        /// <value>Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.</value>
        [DataMember(Name = "applyFilters", EmitDefaultValue = true)]
        public bool? ApplyFilters { get; set; }

        /// <summary>
        /// Specifies whether every other row shading should be applied to the output. By default, this option is set to false, which means that every other row shading will not be included in the download.
        /// </summary>
        /// <value>Specifies whether every other row shading should be applied to the output. By default, this option is set to false, which means that every other row shading will not be included in the download.</value>
        [DataMember(Name = "applyAlternateRowShading", EmitDefaultValue = true)]
        public bool? ApplyAlternateRowShading { get; set; }

        /// <summary>
        /// Specifies that the Download Outline feature will be used when putting the screen&#39;s groupings into an Excel spreadsheet. By default, this option is set to false.
        /// </summary>
        /// <value>Specifies that the Download Outline feature will be used when putting the screen&#39;s groupings into an Excel spreadsheet. By default, this option is set to false.</value>
        [DataMember(Name = "applyExcelOutlining", EmitDefaultValue = true)]
        public bool? ApplyExcelOutlining { get; set; }

        /// <summary>
        /// Specifies whether the report will be downloaded into a single spreadsheet, or into separate sheets following the tabs in the report. By default, this option is set to false.
        /// </summary>
        /// <value>Specifies whether the report will be downloaded into a single spreadsheet, or into separate sheets following the tabs in the report. By default, this option is set to false.</value>
        [DataMember(Name = "condenseTabsToOneSheet", EmitDefaultValue = true)]
        public bool? CondenseTabsToOneSheet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExcelOptions {\n");
            sb.Append("  IsSummary: ").Append(IsSummary).Append("\n");
            sb.Append("  ApplySavedNAFormatting: ").Append(ApplySavedNAFormatting).Append("\n");
            sb.Append("  ApplyFilters: ").Append(ApplyFilters).Append("\n");
            sb.Append("  ApplyAlternateRowShading: ").Append(ApplyAlternateRowShading).Append("\n");
            sb.Append("  ApplyExcelOutlining: ").Append(ApplyExcelOutlining).Append("\n");
            sb.Append("  CondenseTabsToOneSheet: ").Append(CondenseTabsToOneSheet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExcelOptions);
        }

        /// <summary>
        /// Returns true if ExcelOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ExcelOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExcelOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsSummary == input.IsSummary ||
                    (this.IsSummary != null &&
                    this.IsSummary.Equals(input.IsSummary))
                ) && 
                (
                    this.ApplySavedNAFormatting == input.ApplySavedNAFormatting ||
                    (this.ApplySavedNAFormatting != null &&
                    this.ApplySavedNAFormatting.Equals(input.ApplySavedNAFormatting))
                ) && 
                (
                    this.ApplyFilters == input.ApplyFilters ||
                    (this.ApplyFilters != null &&
                    this.ApplyFilters.Equals(input.ApplyFilters))
                ) && 
                (
                    this.ApplyAlternateRowShading == input.ApplyAlternateRowShading ||
                    (this.ApplyAlternateRowShading != null &&
                    this.ApplyAlternateRowShading.Equals(input.ApplyAlternateRowShading))
                ) && 
                (
                    this.ApplyExcelOutlining == input.ApplyExcelOutlining ||
                    (this.ApplyExcelOutlining != null &&
                    this.ApplyExcelOutlining.Equals(input.ApplyExcelOutlining))
                ) && 
                (
                    this.CondenseTabsToOneSheet == input.CondenseTabsToOneSheet ||
                    (this.CondenseTabsToOneSheet != null &&
                    this.CondenseTabsToOneSheet.Equals(input.CondenseTabsToOneSheet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsSummary != null)
                {
                    hashCode = (hashCode * 59) + this.IsSummary.GetHashCode();
                }
                if (this.ApplySavedNAFormatting != null)
                {
                    hashCode = (hashCode * 59) + this.ApplySavedNAFormatting.GetHashCode();
                }
                if (this.ApplyFilters != null)
                {
                    hashCode = (hashCode * 59) + this.ApplyFilters.GetHashCode();
                }
                if (this.ApplyAlternateRowShading != null)
                {
                    hashCode = (hashCode * 59) + this.ApplyAlternateRowShading.GetHashCode();
                }
                if (this.ApplyExcelOutlining != null)
                {
                    hashCode = (hashCode * 59) + this.ApplyExcelOutlining.GetHashCode();
                }
                if (this.CondenseTabsToOneSheet != null)
                {
                    hashCode = (hashCode * 59) + this.CondenseTabsToOneSheet.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
