/*
 * FactSet Quant Factor Library API
 *
 * The FactSet FactSet Quant Factor Library (QFL) API helps to detect investment themes across global equity markets, incorporate ideas into your portfolio construction process, and transform raw data into actionable intelligence. Over 2000+ items spanning Factor Groups in-   * Classification and Reference Data - Asset Data, Country, Industry, and Size   * Market - Liquidity, Market Sensitivity, Momentum, Technical, Volatility   * Core Fundamentals - Efficiency, Growth, Management, Profitability, Quality, Solvency, Value   * Macro and Cross Asset - Commodity, FX Sensitivity, Debt, Economic   * Alternative - Analyst Sentiment, Corporate Governance, Crowding, Insider Activity. 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetQuantFactorLibrary.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetQuantFactorLibrary.Model
{
    /// <summary>
    /// Request object for requesting factors.
    /// </summary>
    [DataContract(Name = "libraryRequest")]
    public partial class LibraryRequest : IEquatable<LibraryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryRequest" /> class.
        /// </summary>
        /// <param name="factors">List of Factors. .</param>
        /// <param name="factorGroups">List of Factor Groupings to return all factors within the group. .</param>
        public LibraryRequest(List<string> factors = default(List<string>), List<string> factorGroups = default(List<string>))
        {
            this.Factors = factors;
            this.FactorGroups = factorGroups;
        }

        /// <summary>
        /// List of Factors. 
        /// </summary>
        /// <value>List of Factors. </value>
        [DataMember(Name = "factors", EmitDefaultValue = false)]
        public List<string> Factors { get; set; }

        /// <summary>
        /// List of Factor Groupings to return all factors within the group. 
        /// </summary>
        /// <value>List of Factor Groupings to return all factors within the group. </value>
        [DataMember(Name = "factorGroups", EmitDefaultValue = false)]
        public List<string> FactorGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LibraryRequest {\n");
            sb.Append("  Factors: ").Append(Factors).Append("\n");
            sb.Append("  FactorGroups: ").Append(FactorGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryRequest);
        }

        /// <summary>
        /// Returns true if LibraryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Factors == input.Factors ||
                    this.Factors != null &&
                    input.Factors != null &&
                    this.Factors.SequenceEqual(input.Factors)
                ) && 
                (
                    this.FactorGroups == input.FactorGroups ||
                    this.FactorGroups != null &&
                    input.FactorGroups != null &&
                    this.FactorGroups.SequenceEqual(input.FactorGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Factors != null)
                {
                    hashCode = (hashCode * 59) + this.Factors.GetHashCode();
                }
                if (this.FactorGroups != null)
                {
                    hashCode = (hashCode * 59) + this.FactorGroups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
