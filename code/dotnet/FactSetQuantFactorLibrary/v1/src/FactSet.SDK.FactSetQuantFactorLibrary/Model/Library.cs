/*
 * FactSet Quant Factor Library API
 *
 * The FactSet FactSet Quant Factor Library (QFL) API helps to detect investment themes across global equity markets, incorporate ideas into your portfolio construction process, and transform raw data into actionable intelligence. Over 2000+ items spanning Factor Groups in-   * Classification and Reference Data - Asset Data, Country, Industry, and Size   * Market - Liquidity, Market Sensitivity, Momentum, Technical, Volatility   * Core Fundamentals - Efficiency, Growth, Management, Profitability, Quality, Solvency, Value   * Macro and Cross Asset - Commodity, FX Sensitivity, Debt, Economic   * Alternative - Analyst Sentiment, Corporate Governance, Crowding, Insider Activity. 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetQuantFactorLibrary.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetQuantFactorLibrary.Model
{
    /// <summary>
    /// Library
    /// </summary>
    [DataContract(Name = "library")]
    public partial class Library : IEquatable<Library>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Library" /> class.
        /// </summary>
        /// <param name="factor">The Factor field that can be requested in the factors endpoint..</param>
        /// <param name="name">The Name or Description of the Factor.</param>
        /// <param name="factorGroup">The Factor Group associated to the Factor..</param>
        /// <param name="sdfName">The Standard DataFeed name of the factor for use of mapping..</param>
        /// <param name="formula">The FactSet formula associated to the factor.</param>
        /// <param name="tags">Associated Tags regarding the factor for enhanced searching..</param>
        /// <param name="format">The data type of the factor, including integer, double, or string..</param>
        public Library(string factor = default(string), string name = default(string), string factorGroup = default(string), string sdfName = default(string), string formula = default(string), string tags = default(string), string format = default(string))
        {
            this.Factor = factor;
            this.Name = name;
            this.FactorGroup = factorGroup;
            this.SdfName = sdfName;
            this.Formula = formula;
            this.Tags = tags;
            this.Format = format;
        }

        /// <summary>
        /// The Factor field that can be requested in the factors endpoint.
        /// </summary>
        /// <value>The Factor field that can be requested in the factors endpoint.</value>
        [DataMember(Name = "factor", EmitDefaultValue = false)]
        public string Factor { get; set; }

        /// <summary>
        /// The Name or Description of the Factor
        /// </summary>
        /// <value>The Name or Description of the Factor</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The Factor Group associated to the Factor.
        /// </summary>
        /// <value>The Factor Group associated to the Factor.</value>
        [DataMember(Name = "factorGroup", EmitDefaultValue = false)]
        public string FactorGroup { get; set; }

        /// <summary>
        /// The Standard DataFeed name of the factor for use of mapping.
        /// </summary>
        /// <value>The Standard DataFeed name of the factor for use of mapping.</value>
        [DataMember(Name = "sdfName", EmitDefaultValue = false)]
        public string SdfName { get; set; }

        /// <summary>
        /// The FactSet formula associated to the factor
        /// </summary>
        /// <value>The FactSet formula associated to the factor</value>
        [DataMember(Name = "formula", EmitDefaultValue = false)]
        public string Formula { get; set; }

        /// <summary>
        /// Associated Tags regarding the factor for enhanced searching.
        /// </summary>
        /// <value>Associated Tags regarding the factor for enhanced searching.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public string Tags { get; set; }

        /// <summary>
        /// The data type of the factor, including integer, double, or string.
        /// </summary>
        /// <value>The data type of the factor, including integer, double, or string.</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Library {\n");
            sb.Append("  Factor: ").Append(Factor).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FactorGroup: ").Append(FactorGroup).Append("\n");
            sb.Append("  SdfName: ").Append(SdfName).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Library);
        }

        /// <summary>
        /// Returns true if Library instances are equal
        /// </summary>
        /// <param name="input">Instance of Library to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Library input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Factor == input.Factor ||
                    (this.Factor != null &&
                    this.Factor.Equals(input.Factor))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FactorGroup == input.FactorGroup ||
                    (this.FactorGroup != null &&
                    this.FactorGroup.Equals(input.FactorGroup))
                ) && 
                (
                    this.SdfName == input.SdfName ||
                    (this.SdfName != null &&
                    this.SdfName.Equals(input.SdfName))
                ) && 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Factor != null)
                {
                    hashCode = (hashCode * 59) + this.Factor.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FactorGroup != null)
                {
                    hashCode = (hashCode * 59) + this.FactorGroup.GetHashCode();
                }
                if (this.SdfName != null)
                {
                    hashCode = (hashCode * 59) + this.SdfName.GetHashCode();
                }
                if (this.Formula != null)
                {
                    hashCode = (hashCode * 59) + this.Formula.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Format != null)
                {
                    hashCode = (hashCode * 59) + this.Format.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
