/*
 * Documents Distributor - Documents API
 *
 * Documents APIs that provide filings such as Global Filings and XML files such as StreetAccount    Global Filings API provides the capability to search and download filings documents from various exchanges around the world. This API will provide access to the full history and the ability to search by date and dataset(source). It does not provide real-time updates to the filings documents. Filings providers currently include EDGAR       Note: The real-time updates to the filing documents will be available within week to ten days and per request able to query up to 8 days of data               StreetAccount XML API provides access to historical StreetAccount (SA) news. SA provides a summary for various corporate and market news written by journalist with background in financial markets.    The API delivers SA stories in XML format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files.      This API only supports adhoc requests to retrieve historical files and does not support real-time files and if require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or users Azure Storage)   Both historical and real-time Street Account news is also delivered via SFTP, to users QNT account, or users Azure Storage.  Files delivered contain both metadata and content body in each file. This eliminates the need to make multiple requests through multiple services to get all the information.  News API provides access to historical news. This provides a summary for various corporate and market news written by journalist with background in financial markets.  The API delivers  stories in different format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files    
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.DocumentsDistributorDocuments.Client;
using FactSet.SDK.DocumentsDistributorDocuments.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.DocumentsDistributorDocuments.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsAPIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the status and percentDone of the requested jobID and source
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID got from /request-files into /check-status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>NewscheckstatusResponse</returns>
        NewscheckstatusResponse AsynchNewsV1CheckStatusGet(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the status and percentDone of the requested jobID and source
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID got from /request-files into /check-status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of NewscheckstatusResponse</returns>
        ApiResponse<NewscheckstatusResponse> AsynchNewsV1CheckStatusGetWithHttpInfo(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the news filings for the specified daterange and source
        /// </summary>
        /// <remarks>
        /// Need to plug-in the source and jobID got from /request-files into /get-files endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>NewsgetfilesResponse</returns>
        NewsgetfilesResponse AsynchNewsV1GetFilesGet(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the news filings for the specified daterange and source
        /// </summary>
        /// <remarks>
        /// Need to plug-in the source and jobID got from /request-files into /get-files endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of NewsgetfilesResponse</returns>
        ApiResponse<NewsgetfilesResponse> AsynchNewsV1GetFilesGetWithHttpInfo(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the jobID
        /// </summary>
        /// <remarks>
        /// Give the startDate,endDate and source parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format This API only supports adhoc requests to retrieve historical files
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <returns>NewsrequestfilesResponse</returns>
        NewsrequestfilesResponse AsynchNewsV1RequestFilesGet(DateTime startDate, DateTime endDate, string source);

        /// <summary>
        /// Returns the jobID
        /// </summary>
        /// <remarks>
        /// Give the startDate,endDate and source parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format This API only supports adhoc requests to retrieve historical files
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <returns>ApiResponse of NewsrequestfilesResponse</returns>
        ApiResponse<NewsrequestfilesResponse> AsynchNewsV1RequestFilesGetWithHttpInfo(DateTime startDate, DateTime endDate, string source);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsAPIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the status and percentDone of the requested jobID and source
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID got from /request-files into /check-status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewscheckstatusResponse</returns>
        System.Threading.Tasks.Task<NewscheckstatusResponse> AsynchNewsV1CheckStatusGetAsync(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the status and percentDone of the requested jobID and source
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID got from /request-files into /check-status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewscheckstatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewscheckstatusResponse>> AsynchNewsV1CheckStatusGetWithHttpInfoAsync(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the news filings for the specified daterange and source
        /// </summary>
        /// <remarks>
        /// Need to plug-in the source and jobID got from /request-files into /get-files endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewsgetfilesResponse</returns>
        System.Threading.Tasks.Task<NewsgetfilesResponse> AsynchNewsV1GetFilesGetAsync(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the news filings for the specified daterange and source
        /// </summary>
        /// <remarks>
        /// Need to plug-in the source and jobID got from /request-files into /get-files endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewsgetfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewsgetfilesResponse>> AsynchNewsV1GetFilesGetWithHttpInfoAsync(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the jobID
        /// </summary>
        /// <remarks>
        /// Give the startDate,endDate and source parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format This API only supports adhoc requests to retrieve historical files
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewsrequestfilesResponse</returns>
        System.Threading.Tasks.Task<NewsrequestfilesResponse> AsynchNewsV1RequestFilesGetAsync(DateTime startDate, DateTime endDate, string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the jobID
        /// </summary>
        /// <remarks>
        /// Give the startDate,endDate and source parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format This API only supports adhoc requests to retrieve historical files
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewsrequestfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewsrequestfilesResponse>> AsynchNewsV1RequestFilesGetWithHttpInfoAsync(DateTime startDate, DateTime endDate, string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsAPIApi : INewsAPIApiSync, INewsAPIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NewsAPIApi : INewsAPIApi
    {
        private FactSet.SDK.DocumentsDistributorDocuments.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> AsynchNewsV1CheckStatusGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NewscheckstatusResponse) },
            { (HttpStatusCode)400, typeof(NewsStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> AsynchNewsV1GetFilesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NewsgetfilesResponse) },
            { (HttpStatusCode)400, typeof(NewsStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> AsynchNewsV1RequestFilesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NewsrequestfilesResponse) },
            { (HttpStatusCode)400, typeof(NewsStatus) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsAPIApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsAPIApi(string basePath)
        {
            this.Configuration = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.MergeConfigurations(
                FactSet.SDK.DocumentsDistributorDocuments.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NewsAPIApi(FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.MergeConfigurations(
                FactSet.SDK.DocumentsDistributorDocuments.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsAPIApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NewsAPIApi(FactSet.SDK.DocumentsDistributorDocuments.Client.ISynchronousClient client, FactSet.SDK.DocumentsDistributorDocuments.Client.IAsynchronousClient asyncClient, FactSet.SDK.DocumentsDistributorDocuments.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the status and percentDone of the requested jobID and source Need to plug-in the jobID got from /request-files into /check-status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>NewscheckstatusResponse</returns>
        public NewscheckstatusResponse AsynchNewsV1CheckStatusGet(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = AsynchNewsV1CheckStatusGetWithHttpInfo(jobID, source, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status and percentDone of the requested jobID and source Need to plug-in the jobID got from /request-files into /check-status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of NewscheckstatusResponse</returns>
        public ApiResponse<NewscheckstatusResponse> AsynchNewsV1CheckStatusGetWithHttpInfo(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'jobID' is set
            if (jobID == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'jobID' when calling NewsAPIApi->AsynchNewsV1CheckStatusGet");
            }

            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'source' when calling NewsAPIApi->AsynchNewsV1CheckStatusGet");
            }

            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "jobID", jobID));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = AsynchNewsV1CheckStatusGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NewscheckstatusResponse>("/asynch/news/v1/check-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AsynchNewsV1CheckStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the status and percentDone of the requested jobID and source Need to plug-in the jobID got from /request-files into /check-status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewscheckstatusResponse</returns>
        public async System.Threading.Tasks.Task<NewscheckstatusResponse>AsynchNewsV1CheckStatusGetAsync(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await AsynchNewsV1CheckStatusGetWithHttpInfoAsync(jobID, source, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status and percentDone of the requested jobID and source Need to plug-in the jobID got from /request-files into /check-status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewscheckstatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NewscheckstatusResponse>> AsynchNewsV1CheckStatusGetWithHttpInfoAsync(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobID' is set
            if (jobID == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'jobID' when calling NewsAPIApi->AsynchNewsV1CheckStatusGet");
            }

            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'source' when calling NewsAPIApi->AsynchNewsV1CheckStatusGet");
            }


            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "jobID", jobID));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = AsynchNewsV1CheckStatusGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NewscheckstatusResponse>("/asynch/news/v1/check-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AsynchNewsV1CheckStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the news filings for the specified daterange and source Need to plug-in the source and jobID got from /request-files into /get-files endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>NewsgetfilesResponse</returns>
        public NewsgetfilesResponse AsynchNewsV1GetFilesGet(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = AsynchNewsV1GetFilesGetWithHttpInfo(jobID, source, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the news filings for the specified daterange and source Need to plug-in the source and jobID got from /request-files into /get-files endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of NewsgetfilesResponse</returns>
        public ApiResponse<NewsgetfilesResponse> AsynchNewsV1GetFilesGetWithHttpInfo(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'jobID' is set
            if (jobID == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'jobID' when calling NewsAPIApi->AsynchNewsV1GetFilesGet");
            }

            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'source' when calling NewsAPIApi->AsynchNewsV1GetFilesGet");
            }

            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "jobID", jobID));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = AsynchNewsV1GetFilesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NewsgetfilesResponse>("/asynch/news/v1/get-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AsynchNewsV1GetFilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the news filings for the specified daterange and source Need to plug-in the source and jobID got from /request-files into /get-files endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewsgetfilesResponse</returns>
        public async System.Threading.Tasks.Task<NewsgetfilesResponse>AsynchNewsV1GetFilesGetAsync(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await AsynchNewsV1GetFilesGetWithHttpInfoAsync(jobID, source, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the news filings for the specified daterange and source Need to plug-in the source and jobID got from /request-files into /get-files endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewsgetfilesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NewsgetfilesResponse>> AsynchNewsV1GetFilesGetWithHttpInfoAsync(string jobID, string source, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobID' is set
            if (jobID == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'jobID' when calling NewsAPIApi->AsynchNewsV1GetFilesGet");
            }

            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'source' when calling NewsAPIApi->AsynchNewsV1GetFilesGet");
            }


            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "jobID", jobID));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = AsynchNewsV1GetFilesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NewsgetfilesResponse>("/asynch/news/v1/get-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AsynchNewsV1GetFilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the jobID Give the startDate,endDate and source parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format This API only supports adhoc requests to retrieve historical files
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <returns>NewsrequestfilesResponse</returns>
        public NewsrequestfilesResponse AsynchNewsV1RequestFilesGet(DateTime startDate, DateTime endDate, string source)
        {
            var localVarResponse = AsynchNewsV1RequestFilesGetWithHttpInfo(startDate, endDate, source);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the jobID Give the startDate,endDate and source parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format This API only supports adhoc requests to retrieve historical files
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <returns>ApiResponse of NewsrequestfilesResponse</returns>
        public ApiResponse<NewsrequestfilesResponse> AsynchNewsV1RequestFilesGetWithHttpInfo(DateTime startDate, DateTime endDate, string source)
        {
            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'source' when calling NewsAPIApi->AsynchNewsV1RequestFilesGet");
            }

            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "source", source));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = AsynchNewsV1RequestFilesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NewsrequestfilesResponse>("/asynch/news/v1/request-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AsynchNewsV1RequestFilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the jobID Give the startDate,endDate and source parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format This API only supports adhoc requests to retrieve historical files
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewsrequestfilesResponse</returns>
        public async System.Threading.Tasks.Task<NewsrequestfilesResponse>AsynchNewsV1RequestFilesGetAsync(DateTime startDate, DateTime endDate, string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await AsynchNewsV1RequestFilesGetWithHttpInfoAsync(startDate, endDate, source, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the jobID Give the startDate,endDate and source parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format This API only supports adhoc requests to retrieve historical files
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="source">This parameter filters the results based on the source of the filings document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewsrequestfilesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NewsrequestfilesResponse>> AsynchNewsV1RequestFilesGetWithHttpInfoAsync(DateTime startDate, DateTime endDate, string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'source' when calling NewsAPIApi->AsynchNewsV1RequestFilesGet");
            }


            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "source", source));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = AsynchNewsV1RequestFilesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NewsrequestfilesResponse>("/asynch/news/v1/request-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AsynchNewsV1RequestFilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
