/*
 * Documents Distributor - Documents API
 *
 * Documents APIs that provide filings such as Global Filings and XML files such as StreetAccount    Global Filings API provides the capability to search and download filings documents from various exchanges around the world. This API will provide access to the full history and the ability to search by date and dataset(source). It does not provide real-time updates to the filings documents. Filings providers currently include EDGAR       Note: The real-time updates to the filing documents will be available within week to ten days and per request able to query up to 8 days of data               StreetAccount XML API provides access to historical StreetAccount (SA) news. SA provides a summary for various corporate and market news written by journalist with background in financial markets.    The API delivers SA stories in XML format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files.      This API only supports adhoc requests to retrieve historical files and does not support real-time files and if require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or users Azure Storage)   Both historical and real-time Street Account news is also delivered via SFTP, to users QNT account, or users Azure Storage.  Files delivered contain both metadata and content body in each file. This eliminates the need to make multiple requests through multiple services to get all the information.  News API provides access to historical news. This provides a summary for various corporate and market news written by journalist with background in financial markets.  The API delivers  stories in different format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files    
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.DocumentsDistributorDocuments.Client;
using FactSet.SDK.DocumentsDistributorDocuments.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.DocumentsDistributorDocuments.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalFilingsAPIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve filings within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Parameters can be used to get the filings
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">This parameter filters the results based on the dataset of the filings documents.</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="endDate">The date after upto eight days of the earliest date given the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <returns>List<FilingsFiles></returns>
        List<FilingsFiles> GlobalFilingsV1ListFilesGet(string dataset, DateTime startDate, DateTime endDate);

        /// <summary>
        /// Retrieve filings within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Parameters can be used to get the filings
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">This parameter filters the results based on the dataset of the filings documents.</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="endDate">The date after upto eight days of the earliest date given the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <returns>ApiResponse of List<FilingsFiles></returns>
        ApiResponse<List<FilingsFiles>> GlobalFilingsV1ListFilesGetWithHttpInfo(string dataset, DateTime startDate, DateTime endDate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalFilingsAPIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve filings within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Parameters can be used to get the filings
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">This parameter filters the results based on the dataset of the filings documents.</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="endDate">The date after upto eight days of the earliest date given the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FilingsFiles&gt;</returns>
        System.Threading.Tasks.Task<List<FilingsFiles>> GlobalFilingsV1ListFilesGetAsync(string dataset, DateTime startDate, DateTime endDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve filings within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Parameters can be used to get the filings
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">This parameter filters the results based on the dataset of the filings documents.</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="endDate">The date after upto eight days of the earliest date given the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<FilingsFiles>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FilingsFiles>>> GlobalFilingsV1ListFilesGetWithHttpInfoAsync(string dataset, DateTime startDate, DateTime endDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalFilingsAPIApi : IGlobalFilingsAPIApiSync, IGlobalFilingsAPIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GlobalFilingsAPIApi : IGlobalFilingsAPIApi
    {
        private FactSet.SDK.DocumentsDistributorDocuments.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GlobalFilingsV1ListFilesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<FilingsFiles>) },
            { (HttpStatusCode)400, typeof(Status) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalFilingsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalFilingsAPIApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalFilingsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalFilingsAPIApi(string basePath)
        {
            this.Configuration = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.MergeConfigurations(
                FactSet.SDK.DocumentsDistributorDocuments.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalFilingsAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GlobalFilingsAPIApi(FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.MergeConfigurations(
                FactSet.SDK.DocumentsDistributorDocuments.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalFilingsAPIApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GlobalFilingsAPIApi(FactSet.SDK.DocumentsDistributorDocuments.Client.ISynchronousClient client, FactSet.SDK.DocumentsDistributorDocuments.Client.IAsynchronousClient asyncClient, FactSet.SDK.DocumentsDistributorDocuments.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve filings within FactSet coverage Parameters can be used to get the filings
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">This parameter filters the results based on the dataset of the filings documents.</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="endDate">The date after upto eight days of the earliest date given the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <returns>List<FilingsFiles></returns>
        public List<FilingsFiles> GlobalFilingsV1ListFilesGet(string dataset, DateTime startDate, DateTime endDate)
        {
            var localVarResponse = GlobalFilingsV1ListFilesGetWithHttpInfo(dataset, startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve filings within FactSet coverage Parameters can be used to get the filings
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">This parameter filters the results based on the dataset of the filings documents.</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="endDate">The date after upto eight days of the earliest date given the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <returns>ApiResponse of List&lt;FilingsFiles&gt;</returns>
        public ApiResponse<List<FilingsFiles>> GlobalFilingsV1ListFilesGetWithHttpInfo(string dataset, DateTime startDate, DateTime endDate)
        {
            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'dataset' when calling GlobalFilingsAPIApi->GlobalFilingsV1ListFilesGet");
            }

            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "dataset", dataset));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate)));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GlobalFilingsV1ListFilesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<FilingsFiles>>("/global-filings/v1/list-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalFilingsV1ListFilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve filings within FactSet coverage Parameters can be used to get the filings
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">This parameter filters the results based on the dataset of the filings documents.</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="endDate">The date after upto eight days of the earliest date given the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FilingsFiles&gt;</returns>
        public async System.Threading.Tasks.Task<List<FilingsFiles>>GlobalFilingsV1ListFilesGetAsync(string dataset, DateTime startDate, DateTime endDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GlobalFilingsV1ListFilesGetWithHttpInfoAsync(dataset, startDate, endDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve filings within FactSet coverage Parameters can be used to get the filings
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">This parameter filters the results based on the dataset of the filings documents.</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="endDate">The date after upto eight days of the earliest date given the API should fetch for. Dates can be YYYY-MM-DD format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FilingsFiles&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<FilingsFiles>>> GlobalFilingsV1ListFilesGetWithHttpInfoAsync(string dataset, DateTime startDate, DateTime endDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'dataset' when calling GlobalFilingsAPIApi->GlobalFilingsV1ListFilesGet");
            }


            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "dataset", dataset));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate)));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GlobalFilingsV1ListFilesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FilingsFiles>>("/global-filings/v1/list-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalFilingsV1ListFilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
