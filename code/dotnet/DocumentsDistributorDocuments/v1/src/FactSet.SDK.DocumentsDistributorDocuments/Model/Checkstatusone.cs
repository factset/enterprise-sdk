/*
 * Documents Distributor - Documents API
 *
 * Documents APIs that provide filings such as Global Filings and XML files such as StreetAccount    Global Filings API provides the capability to search and download filings documents from various exchanges around the world. This API will provide access to the full history and the ability to search by date and dataset(source). It does not provide real-time updates to the filings documents. Filings providers currently include EDGAR       Note: The real-time updates to the filing documents will be available within week to ten days and per request able to query up to 8 days of data               StreetAccount XML API provides access to historical StreetAccount (SA) news. SA provides a summary for various corporate and market news written by journalist with background in financial markets.    The API delivers SA stories in XML format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files.      This API only supports adhoc requests to retrieve historical files and does not support real-time files and if require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or users Azure Storage)   Both historical and real-time Street Account news is also delivered via SFTP, to users QNT account, or users Azure Storage.  Files delivered contain both metadata and content body in each file. This eliminates the need to make multiple requests through multiple services to get all the information.  News API provides access to historical news. This provides a summary for various corporate and market news written by journalist with background in financial markets.  The API delivers  stories in different format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files    
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.DocumentsDistributorDocuments.Client.OpenAPIDateConverter;

namespace FactSet.SDK.DocumentsDistributorDocuments.Model
{
    /// <summary>
    /// Checkstatusone
    /// </summary>
    [DataContract(Name = "checkstatusone")]
    public partial class Checkstatusone : IEquatable<Checkstatusone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Checkstatusone" /> class.
        /// </summary>
        /// <param name="product">Defines the name of the product.</param>
        /// <param name="jobID">Unique id to get the xml files for the requested date.</param>
        /// <param name="status">Returns any of the 2 results Submitted -&gt;Running-&gt;Completed and Failed.</param>
        /// <param name="percentDone">Returns how much percentage of  task is completed for the requested jobID.</param>
        /// <param name="startDate">The date from which the data is required in YYYY-MM-DDTHH:MM:SSZ format.</param>
        /// <param name="endDate">The date until which the data is fetched in YYYY-MM-DDTHH:MM:SSZ format.</param>
        /// <param name="part">Returns the part number of the jobID.</param>
        public Checkstatusone(string product = default(string), string jobID = default(string), string status = default(string), int percentDone = default(int), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), int part = default(int))
        {
            this.Product = product;
            this.JobID = jobID;
            this.Status = status;
            this.PercentDone = percentDone;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Part = part;
        }

        /// <summary>
        /// Defines the name of the product
        /// </summary>
        /// <value>Defines the name of the product</value>
        [DataMember(Name = "product", EmitDefaultValue = false)]
        public string Product { get; set; }

        /// <summary>
        /// Unique id to get the xml files for the requested date
        /// </summary>
        /// <value>Unique id to get the xml files for the requested date</value>
        [DataMember(Name = "jobID", EmitDefaultValue = false)]
        public string JobID { get; set; }

        /// <summary>
        /// Returns any of the 2 results Submitted -&gt;Running-&gt;Completed and Failed
        /// </summary>
        /// <value>Returns any of the 2 results Submitted -&gt;Running-&gt;Completed and Failed</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns how much percentage of  task is completed for the requested jobID
        /// </summary>
        /// <value>Returns how much percentage of  task is completed for the requested jobID</value>
        [DataMember(Name = "percentDone", EmitDefaultValue = false)]
        public int PercentDone { get; set; }

        /// <summary>
        /// The date from which the data is required in YYYY-MM-DDTHH:MM:SSZ format
        /// </summary>
        /// <value>The date from which the data is required in YYYY-MM-DDTHH:MM:SSZ format</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// The date until which the data is fetched in YYYY-MM-DDTHH:MM:SSZ format
        /// </summary>
        /// <value>The date until which the data is fetched in YYYY-MM-DDTHH:MM:SSZ format</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Returns the part number of the jobID
        /// </summary>
        /// <value>Returns the part number of the jobID</value>
        [DataMember(Name = "part", EmitDefaultValue = false)]
        public int Part { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Checkstatusone {\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  JobID: ").Append(JobID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PercentDone: ").Append(PercentDone).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Part: ").Append(Part).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Checkstatusone);
        }

        /// <summary>
        /// Returns true if Checkstatusone instances are equal
        /// </summary>
        /// <param name="input">Instance of Checkstatusone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Checkstatusone input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.JobID == input.JobID ||
                    (this.JobID != null &&
                    this.JobID.Equals(input.JobID))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.PercentDone == input.PercentDone ||
                    this.PercentDone.Equals(input.PercentDone)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Part == input.Part ||
                    this.Part.Equals(input.Part)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Product != null)
                {
                    hashCode = (hashCode * 59) + this.Product.GetHashCode();
                }
                if (this.JobID != null)
                {
                    hashCode = (hashCode * 59) + this.JobID.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PercentDone.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Part.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
