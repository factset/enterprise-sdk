/*
 * OFDB API
 *
 * OFDB API
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.OFDB.Client;
using FactSet.SDK.OFDB.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.OFDB.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeleteApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows users to delete various combinations of symbols, dates, and fields from the desired OFDB
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="bulkDelete"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 DeleteBulkItems(string path, BulkDelete bulkDelete = default(BulkDelete));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows users to delete various combinations of symbols, dates, and fields from the desired OFDB
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="bulkDelete"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> DeleteBulkItemsWithHttpInfo(string path, BulkDelete bulkDelete = default(BulkDelete));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 DeleteDate(string path, int date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> DeleteDateWithHttpInfo(string path, int date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 DeleteDateFromSymbol(string path, int date, string symbol);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> DeleteDateFromSymbolWithHttpInfo(string path, int date, string symbol);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 DeleteSymbol(string path, string symbol);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> DeleteSymbolWithHttpInfo(string path, string symbol);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 GetResourceDateFromSymbol(string path, int date, string symbol, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> GetResourceDateFromSymbolWithHttpInfo(string path, int date, string symbol, string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeleteApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows users to delete various combinations of symbols, dates, and fields from the desired OFDB
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="bulkDelete"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> DeleteBulkItemsAsync(string path, BulkDelete bulkDelete = default(BulkDelete), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows users to delete various combinations of symbols, dates, and fields from the desired OFDB
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="bulkDelete"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteBulkItemsWithHttpInfoAsync(string path, BulkDelete bulkDelete = default(BulkDelete), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> DeleteDateAsync(string path, int date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> DeleteDateWithHttpInfoAsync(string path, int date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> DeleteDateFromSymbolAsync(string path, int date, string symbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> DeleteDateFromSymbolWithHttpInfoAsync(string path, int date, string symbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> DeleteSymbolAsync(string path, string symbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> DeleteSymbolWithHttpInfoAsync(string path, string symbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> GetResourceDateFromSymbolAsync(string path, int date, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> GetResourceDateFromSymbolWithHttpInfoAsync(string path, int date, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeleteApi : IDeleteApiSync, IDeleteApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeleteApi : IDeleteApi
    {
        private FactSet.SDK.OFDB.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteBulkItemsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteDateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteDateFromSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceDateFromSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeleteApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeleteApi(string basePath)
        {
            this.Configuration = FactSet.SDK.OFDB.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OFDB.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.OFDB.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeleteApi(FactSet.SDK.OFDB.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.OFDB.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OFDB.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeleteApi(FactSet.SDK.OFDB.Client.ISynchronousClient client, FactSet.SDK.OFDB.Client.IAsynchronousClient asyncClient, FactSet.SDK.OFDB.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.OFDB.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.OFDB.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.OFDB.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.OFDB.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Allows users to delete various combinations of symbols, dates, and fields from the desired OFDB
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="bulkDelete"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 DeleteBulkItems(string path, BulkDelete bulkDelete = default(BulkDelete))
        {
            var localVarResponse = DeleteBulkItemsWithHttpInfo(path, bulkDelete);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows users to delete various combinations of symbols, dates, and fields from the desired OFDB
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="bulkDelete"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> DeleteBulkItemsWithHttpInfo(string path, BulkDelete bulkDelete = default(BulkDelete))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling DeleteApi->DeleteBulkItems");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = bulkDelete;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteBulkItemsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2003>("/database/{path}/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBulkItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Allows users to delete various combinations of symbols, dates, and fields from the desired OFDB
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="bulkDelete"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>DeleteBulkItemsAsync(string path, BulkDelete bulkDelete = default(BulkDelete), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await DeleteBulkItemsWithHttpInfoAsync(path, bulkDelete, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows users to delete various combinations of symbols, dates, and fields from the desired OFDB
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="bulkDelete"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteBulkItemsWithHttpInfoAsync(string path, BulkDelete bulkDelete = default(BulkDelete), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling DeleteApi->DeleteBulkItems");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = bulkDelete;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteBulkItemsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/database/{path}/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBulkItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 DeleteDate(string path, int date)
        {
            var localVarResponse = DeleteDateWithHttpInfo(path, date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public ApiResponse<InlineResponse202> DeleteDateWithHttpInfo(string path, int date)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling DeleteApi->DeleteDate");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            InlineResponse202>("/database/{path}/dates/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202>DeleteDateAsync(string path, int date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await DeleteDateWithHttpInfoAsync(path, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> DeleteDateWithHttpInfoAsync(string path, int date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling DeleteApi->DeleteDate");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<InlineResponse202>("/database/{path}/dates/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 DeleteDateFromSymbol(string path, int date, string symbol)
        {
            var localVarResponse = DeleteDateFromSymbolWithHttpInfo(path, date, symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public ApiResponse<InlineResponse202> DeleteDateFromSymbolWithHttpInfo(string path, int date, string symbol)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling DeleteApi->DeleteDateFromSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling DeleteApi->DeleteDateFromSymbol");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteDateFromSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            InlineResponse202>("/database/{path}/dates/{date}/symbols/{symbol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDateFromSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202>DeleteDateFromSymbolAsync(string path, int date, string symbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await DeleteDateFromSymbolWithHttpInfoAsync(path, date, symbol, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> DeleteDateFromSymbolWithHttpInfoAsync(string path, int date, string symbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling DeleteApi->DeleteDateFromSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling DeleteApi->DeleteDateFromSymbol");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteDateFromSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<InlineResponse202>("/database/{path}/dates/{date}/symbols/{symbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDateFromSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 DeleteSymbol(string path, string symbol)
        {
            var localVarResponse = DeleteSymbolWithHttpInfo(path, symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public ApiResponse<InlineResponse202> DeleteSymbolWithHttpInfo(string path, string symbol)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling DeleteApi->DeleteSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling DeleteApi->DeleteSymbol");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            InlineResponse202>("/database/{path}/symbols/{symbol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202>DeleteSymbolAsync(string path, string symbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await DeleteSymbolWithHttpInfoAsync(path, symbol, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> DeleteSymbolWithHttpInfoAsync(string path, string symbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling DeleteApi->DeleteSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling DeleteApi->DeleteSymbol");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<InlineResponse202>("/database/{path}/symbols/{symbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 GetResourceDateFromSymbol(string path, int date, string symbol, string id)
        {
            var localVarResponse = GetResourceDateFromSymbolWithHttpInfo(path, date, symbol, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public ApiResponse<InlineResponse202> GetResourceDateFromSymbolWithHttpInfo(string path, int date, string symbol, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling DeleteApi->GetResourceDateFromSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling DeleteApi->GetResourceDateFromSymbol");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling DeleteApi->GetResourceDateFromSymbol");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceDateFromSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            InlineResponse202>("/database/{path}/dates/{date}/symbols/{symbol}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDateFromSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202>GetResourceDateFromSymbolAsync(string path, int date, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceDateFromSymbolWithHttpInfoAsync(path, date, symbol, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes data specific to the symbol and date from a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> GetResourceDateFromSymbolWithHttpInfoAsync(string path, int date, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling DeleteApi->GetResourceDateFromSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling DeleteApi->GetResourceDateFromSymbol");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling DeleteApi->GetResourceDateFromSymbol");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceDateFromSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<InlineResponse202>("/database/{path}/dates/{date}/symbols/{symbol}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDateFromSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
