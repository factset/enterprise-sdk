/*
 * OFDB API
 *
 * OFDB API
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.OFDB.Client;
using FactSet.SDK.OFDB.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.OFDB.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILongRunningApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetResourceAudit(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetResourceAuditWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetResourceBulkDelete(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetResourceBulkDeleteWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetResourceData(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetResourceDataWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>CreateDatabase</returns>
        CreateDatabase GetResourceDatabase(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of CreateDatabase</returns>
        ApiResponse<CreateDatabase> GetResourceDatabaseWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>SuccessPostResponse</returns>
        SuccessPostResponse GetResourceDate(string path, int date, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        ApiResponse<SuccessPostResponse> GetResourceDateWithHttpInfo(string path, int date, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetResourceDates(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetResourceDatesWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetResourceFields(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetResourceFieldsWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetResourceStats(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetResourceStatsWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>SuccessPostResponse</returns>
        SuccessPostResponse GetResourceSymbol(string path, string symbol, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        ApiResponse<SuccessPostResponse> GetResourceSymbolWithHttpInfo(string path, string symbol, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetResourceSymbols(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetResourceSymbolsWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 GetStatus(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> GetStatusWithHttpInfo(string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILongRunningApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetResourceAuditAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetResourceAuditWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetResourceBulkDeleteAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetResourceBulkDeleteWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetResourceDataAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetResourceDataWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDatabase</returns>
        System.Threading.Tasks.Task<CreateDatabase> GetResourceDatabaseAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDatabase)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDatabase>> GetResourceDatabaseWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        System.Threading.Tasks.Task<SuccessPostResponse> GetResourceDateAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> GetResourceDateWithHttpInfoAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetResourceDatesAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetResourceDatesWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetResourceFieldsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetResourceFieldsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetResourceStatsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetResourceStatsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        System.Threading.Tasks.Task<SuccessPostResponse> GetResourceSymbolAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> GetResourceSymbolWithHttpInfoAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetResourceSymbolsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetResourceSymbolsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> GetStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> GetStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILongRunningApi : ILongRunningApiSync, ILongRunningApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LongRunningApi : ILongRunningApi
    {
        private FactSet.SDK.OFDB.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceAuditResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceBulkDeleteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceDataResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2006) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceDatabaseResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CreateDatabase) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceDateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SuccessPostResponse) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceDatesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2005) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceFieldsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceStatsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2001) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SuccessPostResponse) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceSymbolsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2004) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(InlineResponse201) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="LongRunningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LongRunningApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LongRunningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LongRunningApi(string basePath)
        {
            this.Configuration = FactSet.SDK.OFDB.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OFDB.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.OFDB.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LongRunningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LongRunningApi(FactSet.SDK.OFDB.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.OFDB.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OFDB.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LongRunningApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LongRunningApi(FactSet.SDK.OFDB.Client.ISynchronousClient client, FactSet.SDK.OFDB.Client.IAsynchronousClient asyncClient, FactSet.SDK.OFDB.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.OFDB.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.OFDB.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.OFDB.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.OFDB.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetResourceAudit(string path, string id)
        {
            var localVarResponse = GetResourceAuditWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> GetResourceAuditWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceAudit");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceAudit");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceAuditResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse200>("/database/{path}/audit/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>GetResourceAuditAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceAuditWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetResourceAuditWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceAudit");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceAudit");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceAuditResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/database/{path}/audit/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetResourceBulkDelete(string path, string id)
        {
            var localVarResponse = GetResourceBulkDeleteWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GetResourceBulkDeleteWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceBulkDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceBulkDelete");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceBulkDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2003>("/database/{path}/delete/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceBulkDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>GetResourceBulkDeleteAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceBulkDeleteWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetResourceBulkDeleteWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceBulkDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceBulkDelete");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceBulkDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/database/{path}/delete/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceBulkDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetResourceData(string path, string id)
        {
            var localVarResponse = GetResourceDataWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> GetResourceDataWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceData");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceData");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2006>("/database/{path}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006>GetResourceDataAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceDataWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetResourceDataWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceData");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceData");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/database/{path}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>CreateDatabase</returns>
        public CreateDatabase GetResourceDatabase(string path, string id)
        {
            var localVarResponse = GetResourceDatabaseWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of CreateDatabase</returns>
        public ApiResponse<CreateDatabase> GetResourceDatabaseWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDatabase");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDatabase");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceDatabaseResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CreateDatabase>("/database/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDatabase</returns>
        public async System.Threading.Tasks.Task<CreateDatabase>GetResourceDatabaseAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceDatabaseWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDatabase)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CreateDatabase>> GetResourceDatabaseWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDatabase");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDatabase");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceDatabaseResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CreateDatabase>("/database/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>SuccessPostResponse</returns>
        public SuccessPostResponse GetResourceDate(string path, int date, string id)
        {
            var localVarResponse = GetResourceDateWithHttpInfo(path, date, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        public ApiResponse<SuccessPostResponse> GetResourceDateWithHttpInfo(string path, int date, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDate");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDate");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SuccessPostResponse>("/database/{path}/dates/{date}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        public async System.Threading.Tasks.Task<SuccessPostResponse>GetResourceDateAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceDateWithHttpInfoAsync(path, date, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> GetResourceDateWithHttpInfoAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDate");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDate");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuccessPostResponse>("/database/{path}/dates/{date}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetResourceDates(string path, string id)
        {
            var localVarResponse = GetResourceDatesWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> GetResourceDatesWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDates");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDates");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2005>("/database/{path}/dates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005>GetResourceDatesAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceDatesWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetResourceDatesWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDates");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDates");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/database/{path}/dates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetResourceFields(string path, string id)
        {
            var localVarResponse = GetResourceFieldsWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> GetResourceFieldsWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceFields");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceFields");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2002>("/database/{path}/fields/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>GetResourceFieldsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceFieldsWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetResourceFieldsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceFields");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceFields");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/database/{path}/fields/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetResourceStats(string path, string id)
        {
            var localVarResponse = GetResourceStatsWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> GetResourceStatsWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceStats");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceStats");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceStatsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2001>("/database/{path}/stats/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001>GetResourceStatsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceStatsWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetResourceStatsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceStats");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceStats");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceStatsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/database/{path}/stats/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>SuccessPostResponse</returns>
        public SuccessPostResponse GetResourceSymbol(string path, string symbol, string id)
        {
            var localVarResponse = GetResourceSymbolWithHttpInfo(path, symbol, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        public ApiResponse<SuccessPostResponse> GetResourceSymbolWithHttpInfo(string path, string symbol, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling LongRunningApi->GetResourceSymbol");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceSymbol");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SuccessPostResponse>("/database/{path}/symbols/{symbol}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        public async System.Threading.Tasks.Task<SuccessPostResponse>GetResourceSymbolAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceSymbolWithHttpInfoAsync(path, symbol, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> GetResourceSymbolWithHttpInfoAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling LongRunningApi->GetResourceSymbol");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceSymbol");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuccessPostResponse>("/database/{path}/symbols/{symbol}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetResourceSymbols(string path, string id)
        {
            var localVarResponse = GetResourceSymbolsWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GetResourceSymbolsWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceSymbols");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceSymbols");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2004>("/database/{path}/symbols/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004>GetResourceSymbolsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceSymbolsWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetResourceSymbolsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceSymbols");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceSymbols");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/database/{path}/symbols/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 GetStatus(string id)
        {
            var localVarResponse = GetStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse<InlineResponse201> GetStatusWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetStatus");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse201>("/database/jobs/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201>GetStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStatusWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> GetStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetStatus");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse201>("/database/jobs/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
