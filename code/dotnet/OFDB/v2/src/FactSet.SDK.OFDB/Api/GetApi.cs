/*
 * OFDB API
 *
 * OFDB API
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.OFDB.Client;
using FactSet.SDK.OFDB.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.OFDB.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of the most recent \&quot;modificationTimes\&quot; in long datetime format
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetAudit(string path);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of the most recent \&quot;modificationTimes\&quot; in long datetime format
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetAuditWithHttpInfo(string path);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the data in the database(OFDB, OMS_OFDB, ECONOFDB) for the mentioned Symbol or Date. Atleast one parameter(Symbol/Date) is required. For a range of dates symbol parameter is mandatory.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Returns data for the symbol mentioned. e.g:sym1 (optional)</param>
        /// <param name="date">Return data for the specific date or range of dates mentioned.e.g:[date1,date2] (optional)</param>
        /// <param name="filterFields">Can specify the fields on which you want to perform field filter operations e.g: [\&quot;PRICE\&quot;,\&quot;SECTOR\&quot;]  Note:  The request will respond with 400 1. If fields which are not present on OFDB are given. 2. If filterOps or filterValues query parameters are missing    when filterFields is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterOps">Can specify the field filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;, \&quot;CT\&quot;] in respective order of values in filterFields query parameter.  The available field filter operations are :  For CHAR type fields:  \&quot;CT\&quot; : contains  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with   \&quot;EQ\&quot; : equals  For NUMERIC type fields:  \&quot;GT\&quot; : greater than  \&quot;GTEQ\&quot; : greater than or equals  \&quot;LT\&quot; : lesser than  \&quot;LTEQ\&quot; : lesser than or equals  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400  1. If operations other than the above mentioned are provided. 2. If numeric operations are given to char type fields instead of char operations. 3. If char operations are given to numeric type fields instead of numeric operations. 4. If filterFields or filterValues query parameters are missing    when filterOps is present. 5. If number of values given for filterOps,      filterFields, filterValues are different 6. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterValues">Can specify the field filter values of the field filter operations e.g: [100, 20, \&quot;AB\&quot;] in respective order of values in filterFields and filterOps query parameters .  Note:   The request will respond with 400 1. If char values are given to numeric type fields. 2. If filterFields or filterOps query parameters are missing    when filterValues is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesOps">Can specify the date filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;].  The available date filter operations are :  \&quot;GT\&quot; : after  \&quot;GTEQ\&quot; : after or equals  \&quot;LT\&quot; : before  \&quot;LTEQ\&quot; : before or equals  \&quot;EQ\&quot; : equals\&quot;  Note:  The request will respond with 400  1. If operations other than the above mentioned are given. 2. If filterDatesValues query parameter is missing when filterDatesOps is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesValues">Can specify the date filter values of the date filter operations e.g: [20200505, 20200303] in respective order of values in filterDatesOps query parameter.  Note:  The request will respond with 400 1. If invalid date values are given 2. If filterDatesOps query parameter is missing when filterDatesValues is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsOps">Can specify the symbol filter operations which you want to perform e.g: [\&quot;CT\&quot;, \&quot;SW\&quot;].  The available symbol filter operations are:  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with  \&quot;CT\&quot; : contains  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400 1. If operations other than the above mentioned are given. 2. If filterSymbolsValues query parameter is missing when filterSymbolsOps is present. 3. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 4. If date query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsValues">Can specify the symbol filter values of the date filter operations e.g: [\&quot;ab\&quot;, \&quot;xy\&quot;] in respective order of values in filterSymbolsOps query parameter.  Note: The request will respond with 400 1. If filterSymbolsOps query parameter is missing when filterSymbolsValues is present. 2. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 3. If date query parameter is not provided.  (optional)</param>
        /// <param name="sortFieldName">Can specify the name of field with respect to which user wants to sort data   Note: The request will respond with 400, If a field which doesn&#39;t exist in the OFDB is requested (optional)</param>
        /// <param name="sortFieldOrder">Can specify the order in which user wants to sort data with respect to sortFieldName query parameter   Note: The request will respond with 400, If value other than asc or desc is requested (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetData(string path, string symbol = default(string), string date = default(string), string filterFields = default(string), string filterOps = default(string), string filterValues = default(string), string filterDatesOps = default(string), string filterDatesValues = default(string), string filterSymbolsOps = default(string), string filterSymbolsValues = default(string), string sortFieldName = default(string), string sortFieldOrder = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the data in the database(OFDB, OMS_OFDB, ECONOFDB) for the mentioned Symbol or Date. Atleast one parameter(Symbol/Date) is required. For a range of dates symbol parameter is mandatory.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Returns data for the symbol mentioned. e.g:sym1 (optional)</param>
        /// <param name="date">Return data for the specific date or range of dates mentioned.e.g:[date1,date2] (optional)</param>
        /// <param name="filterFields">Can specify the fields on which you want to perform field filter operations e.g: [\&quot;PRICE\&quot;,\&quot;SECTOR\&quot;]  Note:  The request will respond with 400 1. If fields which are not present on OFDB are given. 2. If filterOps or filterValues query parameters are missing    when filterFields is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterOps">Can specify the field filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;, \&quot;CT\&quot;] in respective order of values in filterFields query parameter.  The available field filter operations are :  For CHAR type fields:  \&quot;CT\&quot; : contains  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with   \&quot;EQ\&quot; : equals  For NUMERIC type fields:  \&quot;GT\&quot; : greater than  \&quot;GTEQ\&quot; : greater than or equals  \&quot;LT\&quot; : lesser than  \&quot;LTEQ\&quot; : lesser than or equals  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400  1. If operations other than the above mentioned are provided. 2. If numeric operations are given to char type fields instead of char operations. 3. If char operations are given to numeric type fields instead of numeric operations. 4. If filterFields or filterValues query parameters are missing    when filterOps is present. 5. If number of values given for filterOps,      filterFields, filterValues are different 6. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterValues">Can specify the field filter values of the field filter operations e.g: [100, 20, \&quot;AB\&quot;] in respective order of values in filterFields and filterOps query parameters .  Note:   The request will respond with 400 1. If char values are given to numeric type fields. 2. If filterFields or filterOps query parameters are missing    when filterValues is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesOps">Can specify the date filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;].  The available date filter operations are :  \&quot;GT\&quot; : after  \&quot;GTEQ\&quot; : after or equals  \&quot;LT\&quot; : before  \&quot;LTEQ\&quot; : before or equals  \&quot;EQ\&quot; : equals\&quot;  Note:  The request will respond with 400  1. If operations other than the above mentioned are given. 2. If filterDatesValues query parameter is missing when filterDatesOps is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesValues">Can specify the date filter values of the date filter operations e.g: [20200505, 20200303] in respective order of values in filterDatesOps query parameter.  Note:  The request will respond with 400 1. If invalid date values are given 2. If filterDatesOps query parameter is missing when filterDatesValues is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsOps">Can specify the symbol filter operations which you want to perform e.g: [\&quot;CT\&quot;, \&quot;SW\&quot;].  The available symbol filter operations are:  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with  \&quot;CT\&quot; : contains  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400 1. If operations other than the above mentioned are given. 2. If filterSymbolsValues query parameter is missing when filterSymbolsOps is present. 3. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 4. If date query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsValues">Can specify the symbol filter values of the date filter operations e.g: [\&quot;ab\&quot;, \&quot;xy\&quot;] in respective order of values in filterSymbolsOps query parameter.  Note: The request will respond with 400 1. If filterSymbolsOps query parameter is missing when filterSymbolsValues is present. 2. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 3. If date query parameter is not provided.  (optional)</param>
        /// <param name="sortFieldName">Can specify the name of field with respect to which user wants to sort data   Note: The request will respond with 400, If a field which doesn&#39;t exist in the OFDB is requested (optional)</param>
        /// <param name="sortFieldOrder">Can specify the order in which user wants to sort data with respect to sortFieldName query parameter   Note: The request will respond with 400, If value other than asc or desc is requested (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetDataWithHttpInfo(string path, string symbol = default(string), string date = default(string), string filterFields = default(string), string filterOps = default(string), string filterValues = default(string), string filterDatesOps = default(string), string filterDatesValues = default(string), string filterSymbolsOps = default(string), string filterSymbolsValues = default(string), string sortFieldName = default(string), string sortFieldOrder = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the dates in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="between">Returns list of dates which are between [start,end], dates should be in the respective order of start and end (optional)</param>
        /// <param name="equals">Returns the date which matches given date (optional)</param>
        /// <param name="before">Returns list of dates which are before mentioned date (optional)</param>
        /// <param name="after">Returns list of dates which are after mentioned date (optional)</param>
        /// <param name="orderBy">Returns dates in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetDates(string path, string between = default(string), string equals = default(string), string before = default(string), string after = default(string), string orderBy = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the dates in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="between">Returns list of dates which are between [start,end], dates should be in the respective order of start and end (optional)</param>
        /// <param name="equals">Returns the date which matches given date (optional)</param>
        /// <param name="before">Returns list of dates which are before mentioned date (optional)</param>
        /// <param name="after">Returns list of dates which are after mentioned date (optional)</param>
        /// <param name="orderBy">Returns dates in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetDatesWithHttpInfo(string path, string between = default(string), string equals = default(string), string before = default(string), string after = default(string), string orderBy = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetFields(string path);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetFieldsWithHttpInfo(string path);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary of OFDB metadata and data points
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetStats(string path);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary of OFDB metadata and data points
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetStatsWithHttpInfo(string path);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the symbols in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="startsWith">Returns list of symbols which starts with mentioned string (optional)</param>
        /// <param name="endsWith">Returns list of symbols which ends with mentioned string (optional)</param>
        /// <param name="contains">Returns list of symbols which contains mentioned string (optional)</param>
        /// <param name="equals">Returns symbol which matches mentioned string (optional)</param>
        /// <param name="orderBy">Returns symbols in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetSymbols(string path, string startsWith = default(string), string endsWith = default(string), string contains = default(string), string equals = default(string), string orderBy = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the symbols in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="startsWith">Returns list of symbols which starts with mentioned string (optional)</param>
        /// <param name="endsWith">Returns list of symbols which ends with mentioned string (optional)</param>
        /// <param name="contains">Returns list of symbols which contains mentioned string (optional)</param>
        /// <param name="equals">Returns symbol which matches mentioned string (optional)</param>
        /// <param name="orderBy">Returns symbols in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetSymbolsWithHttpInfo(string path, string startsWith = default(string), string endsWith = default(string), string contains = default(string), string equals = default(string), string orderBy = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of the most recent \&quot;modificationTimes\&quot; in long datetime format
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetAuditAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of the most recent \&quot;modificationTimes\&quot; in long datetime format
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetAuditWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the data in the database(OFDB, OMS_OFDB, ECONOFDB) for the mentioned Symbol or Date. Atleast one parameter(Symbol/Date) is required. For a range of dates symbol parameter is mandatory.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Returns data for the symbol mentioned. e.g:sym1 (optional)</param>
        /// <param name="date">Return data for the specific date or range of dates mentioned.e.g:[date1,date2] (optional)</param>
        /// <param name="filterFields">Can specify the fields on which you want to perform field filter operations e.g: [\&quot;PRICE\&quot;,\&quot;SECTOR\&quot;]  Note:  The request will respond with 400 1. If fields which are not present on OFDB are given. 2. If filterOps or filterValues query parameters are missing    when filterFields is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterOps">Can specify the field filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;, \&quot;CT\&quot;] in respective order of values in filterFields query parameter.  The available field filter operations are :  For CHAR type fields:  \&quot;CT\&quot; : contains  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with   \&quot;EQ\&quot; : equals  For NUMERIC type fields:  \&quot;GT\&quot; : greater than  \&quot;GTEQ\&quot; : greater than or equals  \&quot;LT\&quot; : lesser than  \&quot;LTEQ\&quot; : lesser than or equals  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400  1. If operations other than the above mentioned are provided. 2. If numeric operations are given to char type fields instead of char operations. 3. If char operations are given to numeric type fields instead of numeric operations. 4. If filterFields or filterValues query parameters are missing    when filterOps is present. 5. If number of values given for filterOps,      filterFields, filterValues are different 6. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterValues">Can specify the field filter values of the field filter operations e.g: [100, 20, \&quot;AB\&quot;] in respective order of values in filterFields and filterOps query parameters .  Note:   The request will respond with 400 1. If char values are given to numeric type fields. 2. If filterFields or filterOps query parameters are missing    when filterValues is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesOps">Can specify the date filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;].  The available date filter operations are :  \&quot;GT\&quot; : after  \&quot;GTEQ\&quot; : after or equals  \&quot;LT\&quot; : before  \&quot;LTEQ\&quot; : before or equals  \&quot;EQ\&quot; : equals\&quot;  Note:  The request will respond with 400  1. If operations other than the above mentioned are given. 2. If filterDatesValues query parameter is missing when filterDatesOps is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesValues">Can specify the date filter values of the date filter operations e.g: [20200505, 20200303] in respective order of values in filterDatesOps query parameter.  Note:  The request will respond with 400 1. If invalid date values are given 2. If filterDatesOps query parameter is missing when filterDatesValues is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsOps">Can specify the symbol filter operations which you want to perform e.g: [\&quot;CT\&quot;, \&quot;SW\&quot;].  The available symbol filter operations are:  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with  \&quot;CT\&quot; : contains  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400 1. If operations other than the above mentioned are given. 2. If filterSymbolsValues query parameter is missing when filterSymbolsOps is present. 3. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 4. If date query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsValues">Can specify the symbol filter values of the date filter operations e.g: [\&quot;ab\&quot;, \&quot;xy\&quot;] in respective order of values in filterSymbolsOps query parameter.  Note: The request will respond with 400 1. If filterSymbolsOps query parameter is missing when filterSymbolsValues is present. 2. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 3. If date query parameter is not provided.  (optional)</param>
        /// <param name="sortFieldName">Can specify the name of field with respect to which user wants to sort data   Note: The request will respond with 400, If a field which doesn&#39;t exist in the OFDB is requested (optional)</param>
        /// <param name="sortFieldOrder">Can specify the order in which user wants to sort data with respect to sortFieldName query parameter   Note: The request will respond with 400, If value other than asc or desc is requested (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetDataAsync(string path, string symbol = default(string), string date = default(string), string filterFields = default(string), string filterOps = default(string), string filterValues = default(string), string filterDatesOps = default(string), string filterDatesValues = default(string), string filterSymbolsOps = default(string), string filterSymbolsValues = default(string), string sortFieldName = default(string), string sortFieldOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the data in the database(OFDB, OMS_OFDB, ECONOFDB) for the mentioned Symbol or Date. Atleast one parameter(Symbol/Date) is required. For a range of dates symbol parameter is mandatory.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Returns data for the symbol mentioned. e.g:sym1 (optional)</param>
        /// <param name="date">Return data for the specific date or range of dates mentioned.e.g:[date1,date2] (optional)</param>
        /// <param name="filterFields">Can specify the fields on which you want to perform field filter operations e.g: [\&quot;PRICE\&quot;,\&quot;SECTOR\&quot;]  Note:  The request will respond with 400 1. If fields which are not present on OFDB are given. 2. If filterOps or filterValues query parameters are missing    when filterFields is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterOps">Can specify the field filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;, \&quot;CT\&quot;] in respective order of values in filterFields query parameter.  The available field filter operations are :  For CHAR type fields:  \&quot;CT\&quot; : contains  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with   \&quot;EQ\&quot; : equals  For NUMERIC type fields:  \&quot;GT\&quot; : greater than  \&quot;GTEQ\&quot; : greater than or equals  \&quot;LT\&quot; : lesser than  \&quot;LTEQ\&quot; : lesser than or equals  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400  1. If operations other than the above mentioned are provided. 2. If numeric operations are given to char type fields instead of char operations. 3. If char operations are given to numeric type fields instead of numeric operations. 4. If filterFields or filterValues query parameters are missing    when filterOps is present. 5. If number of values given for filterOps,      filterFields, filterValues are different 6. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterValues">Can specify the field filter values of the field filter operations e.g: [100, 20, \&quot;AB\&quot;] in respective order of values in filterFields and filterOps query parameters .  Note:   The request will respond with 400 1. If char values are given to numeric type fields. 2. If filterFields or filterOps query parameters are missing    when filterValues is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesOps">Can specify the date filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;].  The available date filter operations are :  \&quot;GT\&quot; : after  \&quot;GTEQ\&quot; : after or equals  \&quot;LT\&quot; : before  \&quot;LTEQ\&quot; : before or equals  \&quot;EQ\&quot; : equals\&quot;  Note:  The request will respond with 400  1. If operations other than the above mentioned are given. 2. If filterDatesValues query parameter is missing when filterDatesOps is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesValues">Can specify the date filter values of the date filter operations e.g: [20200505, 20200303] in respective order of values in filterDatesOps query parameter.  Note:  The request will respond with 400 1. If invalid date values are given 2. If filterDatesOps query parameter is missing when filterDatesValues is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsOps">Can specify the symbol filter operations which you want to perform e.g: [\&quot;CT\&quot;, \&quot;SW\&quot;].  The available symbol filter operations are:  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with  \&quot;CT\&quot; : contains  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400 1. If operations other than the above mentioned are given. 2. If filterSymbolsValues query parameter is missing when filterSymbolsOps is present. 3. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 4. If date query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsValues">Can specify the symbol filter values of the date filter operations e.g: [\&quot;ab\&quot;, \&quot;xy\&quot;] in respective order of values in filterSymbolsOps query parameter.  Note: The request will respond with 400 1. If filterSymbolsOps query parameter is missing when filterSymbolsValues is present. 2. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 3. If date query parameter is not provided.  (optional)</param>
        /// <param name="sortFieldName">Can specify the name of field with respect to which user wants to sort data   Note: The request will respond with 400, If a field which doesn&#39;t exist in the OFDB is requested (optional)</param>
        /// <param name="sortFieldOrder">Can specify the order in which user wants to sort data with respect to sortFieldName query parameter   Note: The request will respond with 400, If value other than asc or desc is requested (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetDataWithHttpInfoAsync(string path, string symbol = default(string), string date = default(string), string filterFields = default(string), string filterOps = default(string), string filterValues = default(string), string filterDatesOps = default(string), string filterDatesValues = default(string), string filterSymbolsOps = default(string), string filterSymbolsValues = default(string), string sortFieldName = default(string), string sortFieldOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the dates in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="between">Returns list of dates which are between [start,end], dates should be in the respective order of start and end (optional)</param>
        /// <param name="equals">Returns the date which matches given date (optional)</param>
        /// <param name="before">Returns list of dates which are before mentioned date (optional)</param>
        /// <param name="after">Returns list of dates which are after mentioned date (optional)</param>
        /// <param name="orderBy">Returns dates in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetDatesAsync(string path, string between = default(string), string equals = default(string), string before = default(string), string after = default(string), string orderBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the dates in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="between">Returns list of dates which are between [start,end], dates should be in the respective order of start and end (optional)</param>
        /// <param name="equals">Returns the date which matches given date (optional)</param>
        /// <param name="before">Returns list of dates which are before mentioned date (optional)</param>
        /// <param name="after">Returns list of dates which are after mentioned date (optional)</param>
        /// <param name="orderBy">Returns dates in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetDatesWithHttpInfoAsync(string path, string between = default(string), string equals = default(string), string before = default(string), string after = default(string), string orderBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetFieldsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the fields in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetFieldsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary of OFDB metadata and data points
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetStatsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary of OFDB metadata and data points
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetStatsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the symbols in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="startsWith">Returns list of symbols which starts with mentioned string (optional)</param>
        /// <param name="endsWith">Returns list of symbols which ends with mentioned string (optional)</param>
        /// <param name="contains">Returns list of symbols which contains mentioned string (optional)</param>
        /// <param name="equals">Returns symbol which matches mentioned string (optional)</param>
        /// <param name="orderBy">Returns symbols in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetSymbolsAsync(string path, string startsWith = default(string), string endsWith = default(string), string contains = default(string), string equals = default(string), string orderBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all the symbols in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="startsWith">Returns list of symbols which starts with mentioned string (optional)</param>
        /// <param name="endsWith">Returns list of symbols which ends with mentioned string (optional)</param>
        /// <param name="contains">Returns list of symbols which contains mentioned string (optional)</param>
        /// <param name="equals">Returns symbol which matches mentioned string (optional)</param>
        /// <param name="orderBy">Returns symbols in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetSymbolsWithHttpInfoAsync(string path, string startsWith = default(string), string endsWith = default(string), string contains = default(string), string equals = default(string), string orderBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetApi : IGetApiSync, IGetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GetApi : IGetApi
    {
        private FactSet.SDK.OFDB.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetAuditResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetDataResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2006) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetDatesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2005) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetFieldsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetStatsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2001) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSymbolsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2004) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="GetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GetApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GetApi(string basePath)
        {
            this.Configuration = FactSet.SDK.OFDB.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OFDB.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.OFDB.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GetApi(FactSet.SDK.OFDB.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.OFDB.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OFDB.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GetApi(FactSet.SDK.OFDB.Client.ISynchronousClient client, FactSet.SDK.OFDB.Client.IAsynchronousClient asyncClient, FactSet.SDK.OFDB.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.OFDB.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.OFDB.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.OFDB.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.OFDB.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns a list of the most recent \&quot;modificationTimes\&quot; in long datetime format
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetAudit(string path)
        {
            var localVarResponse = GetAuditWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of the most recent \&quot;modificationTimes\&quot; in long datetime format
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> GetAuditWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetAudit");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAuditResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse200>("/database/{path}/audit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of the most recent \&quot;modificationTimes\&quot; in long datetime format
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>GetAuditAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAuditWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of the most recent \&quot;modificationTimes\&quot; in long datetime format
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetAuditWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetAudit");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAuditResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/database/{path}/audit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the data in the database(OFDB, OMS_OFDB, ECONOFDB) for the mentioned Symbol or Date. Atleast one parameter(Symbol/Date) is required. For a range of dates symbol parameter is mandatory.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Returns data for the symbol mentioned. e.g:sym1 (optional)</param>
        /// <param name="date">Return data for the specific date or range of dates mentioned.e.g:[date1,date2] (optional)</param>
        /// <param name="filterFields">Can specify the fields on which you want to perform field filter operations e.g: [\&quot;PRICE\&quot;,\&quot;SECTOR\&quot;]  Note:  The request will respond with 400 1. If fields which are not present on OFDB are given. 2. If filterOps or filterValues query parameters are missing    when filterFields is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterOps">Can specify the field filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;, \&quot;CT\&quot;] in respective order of values in filterFields query parameter.  The available field filter operations are :  For CHAR type fields:  \&quot;CT\&quot; : contains  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with   \&quot;EQ\&quot; : equals  For NUMERIC type fields:  \&quot;GT\&quot; : greater than  \&quot;GTEQ\&quot; : greater than or equals  \&quot;LT\&quot; : lesser than  \&quot;LTEQ\&quot; : lesser than or equals  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400  1. If operations other than the above mentioned are provided. 2. If numeric operations are given to char type fields instead of char operations. 3. If char operations are given to numeric type fields instead of numeric operations. 4. If filterFields or filterValues query parameters are missing    when filterOps is present. 5. If number of values given for filterOps,      filterFields, filterValues are different 6. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterValues">Can specify the field filter values of the field filter operations e.g: [100, 20, \&quot;AB\&quot;] in respective order of values in filterFields and filterOps query parameters .  Note:   The request will respond with 400 1. If char values are given to numeric type fields. 2. If filterFields or filterOps query parameters are missing    when filterValues is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesOps">Can specify the date filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;].  The available date filter operations are :  \&quot;GT\&quot; : after  \&quot;GTEQ\&quot; : after or equals  \&quot;LT\&quot; : before  \&quot;LTEQ\&quot; : before or equals  \&quot;EQ\&quot; : equals\&quot;  Note:  The request will respond with 400  1. If operations other than the above mentioned are given. 2. If filterDatesValues query parameter is missing when filterDatesOps is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesValues">Can specify the date filter values of the date filter operations e.g: [20200505, 20200303] in respective order of values in filterDatesOps query parameter.  Note:  The request will respond with 400 1. If invalid date values are given 2. If filterDatesOps query parameter is missing when filterDatesValues is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsOps">Can specify the symbol filter operations which you want to perform e.g: [\&quot;CT\&quot;, \&quot;SW\&quot;].  The available symbol filter operations are:  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with  \&quot;CT\&quot; : contains  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400 1. If operations other than the above mentioned are given. 2. If filterSymbolsValues query parameter is missing when filterSymbolsOps is present. 3. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 4. If date query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsValues">Can specify the symbol filter values of the date filter operations e.g: [\&quot;ab\&quot;, \&quot;xy\&quot;] in respective order of values in filterSymbolsOps query parameter.  Note: The request will respond with 400 1. If filterSymbolsOps query parameter is missing when filterSymbolsValues is present. 2. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 3. If date query parameter is not provided.  (optional)</param>
        /// <param name="sortFieldName">Can specify the name of field with respect to which user wants to sort data   Note: The request will respond with 400, If a field which doesn&#39;t exist in the OFDB is requested (optional)</param>
        /// <param name="sortFieldOrder">Can specify the order in which user wants to sort data with respect to sortFieldName query parameter   Note: The request will respond with 400, If value other than asc or desc is requested (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetData(string path, string symbol = default(string), string date = default(string), string filterFields = default(string), string filterOps = default(string), string filterValues = default(string), string filterDatesOps = default(string), string filterDatesValues = default(string), string filterSymbolsOps = default(string), string filterSymbolsValues = default(string), string sortFieldName = default(string), string sortFieldOrder = default(string))
        {
            var localVarResponse = GetDataWithHttpInfo(path, symbol, date, filterFields, filterOps, filterValues, filterDatesOps, filterDatesValues, filterSymbolsOps, filterSymbolsValues, sortFieldName, sortFieldOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the data in the database(OFDB, OMS_OFDB, ECONOFDB) for the mentioned Symbol or Date. Atleast one parameter(Symbol/Date) is required. For a range of dates symbol parameter is mandatory.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Returns data for the symbol mentioned. e.g:sym1 (optional)</param>
        /// <param name="date">Return data for the specific date or range of dates mentioned.e.g:[date1,date2] (optional)</param>
        /// <param name="filterFields">Can specify the fields on which you want to perform field filter operations e.g: [\&quot;PRICE\&quot;,\&quot;SECTOR\&quot;]  Note:  The request will respond with 400 1. If fields which are not present on OFDB are given. 2. If filterOps or filterValues query parameters are missing    when filterFields is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterOps">Can specify the field filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;, \&quot;CT\&quot;] in respective order of values in filterFields query parameter.  The available field filter operations are :  For CHAR type fields:  \&quot;CT\&quot; : contains  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with   \&quot;EQ\&quot; : equals  For NUMERIC type fields:  \&quot;GT\&quot; : greater than  \&quot;GTEQ\&quot; : greater than or equals  \&quot;LT\&quot; : lesser than  \&quot;LTEQ\&quot; : lesser than or equals  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400  1. If operations other than the above mentioned are provided. 2. If numeric operations are given to char type fields instead of char operations. 3. If char operations are given to numeric type fields instead of numeric operations. 4. If filterFields or filterValues query parameters are missing    when filterOps is present. 5. If number of values given for filterOps,      filterFields, filterValues are different 6. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterValues">Can specify the field filter values of the field filter operations e.g: [100, 20, \&quot;AB\&quot;] in respective order of values in filterFields and filterOps query parameters .  Note:   The request will respond with 400 1. If char values are given to numeric type fields. 2. If filterFields or filterOps query parameters are missing    when filterValues is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesOps">Can specify the date filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;].  The available date filter operations are :  \&quot;GT\&quot; : after  \&quot;GTEQ\&quot; : after or equals  \&quot;LT\&quot; : before  \&quot;LTEQ\&quot; : before or equals  \&quot;EQ\&quot; : equals\&quot;  Note:  The request will respond with 400  1. If operations other than the above mentioned are given. 2. If filterDatesValues query parameter is missing when filterDatesOps is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesValues">Can specify the date filter values of the date filter operations e.g: [20200505, 20200303] in respective order of values in filterDatesOps query parameter.  Note:  The request will respond with 400 1. If invalid date values are given 2. If filterDatesOps query parameter is missing when filterDatesValues is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsOps">Can specify the symbol filter operations which you want to perform e.g: [\&quot;CT\&quot;, \&quot;SW\&quot;].  The available symbol filter operations are:  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with  \&quot;CT\&quot; : contains  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400 1. If operations other than the above mentioned are given. 2. If filterSymbolsValues query parameter is missing when filterSymbolsOps is present. 3. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 4. If date query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsValues">Can specify the symbol filter values of the date filter operations e.g: [\&quot;ab\&quot;, \&quot;xy\&quot;] in respective order of values in filterSymbolsOps query parameter.  Note: The request will respond with 400 1. If filterSymbolsOps query parameter is missing when filterSymbolsValues is present. 2. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 3. If date query parameter is not provided.  (optional)</param>
        /// <param name="sortFieldName">Can specify the name of field with respect to which user wants to sort data   Note: The request will respond with 400, If a field which doesn&#39;t exist in the OFDB is requested (optional)</param>
        /// <param name="sortFieldOrder">Can specify the order in which user wants to sort data with respect to sortFieldName query parameter   Note: The request will respond with 400, If value other than asc or desc is requested (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> GetDataWithHttpInfo(string path, string symbol = default(string), string date = default(string), string filterFields = default(string), string filterOps = default(string), string filterValues = default(string), string filterDatesOps = default(string), string filterDatesValues = default(string), string filterSymbolsOps = default(string), string filterSymbolsValues = default(string), string sortFieldName = default(string), string sortFieldOrder = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetData");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (symbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (filterFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterFields", filterFields));
            }
            if (filterOps != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterOps", filterOps));
            }
            if (filterValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterValues", filterValues));
            }
            if (filterDatesOps != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterDatesOps", filterDatesOps));
            }
            if (filterDatesValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterDatesValues", filterDatesValues));
            }
            if (filterSymbolsOps != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterSymbolsOps", filterSymbolsOps));
            }
            if (filterSymbolsValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterSymbolsValues", filterSymbolsValues));
            }
            if (sortFieldName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "sortFieldName", sortFieldName));
            }
            if (sortFieldOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "sortFieldOrder", sortFieldOrder));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2006>("/database/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the data in the database(OFDB, OMS_OFDB, ECONOFDB) for the mentioned Symbol or Date. Atleast one parameter(Symbol/Date) is required. For a range of dates symbol parameter is mandatory.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Returns data for the symbol mentioned. e.g:sym1 (optional)</param>
        /// <param name="date">Return data for the specific date or range of dates mentioned.e.g:[date1,date2] (optional)</param>
        /// <param name="filterFields">Can specify the fields on which you want to perform field filter operations e.g: [\&quot;PRICE\&quot;,\&quot;SECTOR\&quot;]  Note:  The request will respond with 400 1. If fields which are not present on OFDB are given. 2. If filterOps or filterValues query parameters are missing    when filterFields is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterOps">Can specify the field filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;, \&quot;CT\&quot;] in respective order of values in filterFields query parameter.  The available field filter operations are :  For CHAR type fields:  \&quot;CT\&quot; : contains  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with   \&quot;EQ\&quot; : equals  For NUMERIC type fields:  \&quot;GT\&quot; : greater than  \&quot;GTEQ\&quot; : greater than or equals  \&quot;LT\&quot; : lesser than  \&quot;LTEQ\&quot; : lesser than or equals  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400  1. If operations other than the above mentioned are provided. 2. If numeric operations are given to char type fields instead of char operations. 3. If char operations are given to numeric type fields instead of numeric operations. 4. If filterFields or filterValues query parameters are missing    when filterOps is present. 5. If number of values given for filterOps,      filterFields, filterValues are different 6. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterValues">Can specify the field filter values of the field filter operations e.g: [100, 20, \&quot;AB\&quot;] in respective order of values in filterFields and filterOps query parameters .  Note:   The request will respond with 400 1. If char values are given to numeric type fields. 2. If filterFields or filterOps query parameters are missing    when filterValues is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesOps">Can specify the date filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;].  The available date filter operations are :  \&quot;GT\&quot; : after  \&quot;GTEQ\&quot; : after or equals  \&quot;LT\&quot; : before  \&quot;LTEQ\&quot; : before or equals  \&quot;EQ\&quot; : equals\&quot;  Note:  The request will respond with 400  1. If operations other than the above mentioned are given. 2. If filterDatesValues query parameter is missing when filterDatesOps is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesValues">Can specify the date filter values of the date filter operations e.g: [20200505, 20200303] in respective order of values in filterDatesOps query parameter.  Note:  The request will respond with 400 1. If invalid date values are given 2. If filterDatesOps query parameter is missing when filterDatesValues is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsOps">Can specify the symbol filter operations which you want to perform e.g: [\&quot;CT\&quot;, \&quot;SW\&quot;].  The available symbol filter operations are:  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with  \&quot;CT\&quot; : contains  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400 1. If operations other than the above mentioned are given. 2. If filterSymbolsValues query parameter is missing when filterSymbolsOps is present. 3. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 4. If date query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsValues">Can specify the symbol filter values of the date filter operations e.g: [\&quot;ab\&quot;, \&quot;xy\&quot;] in respective order of values in filterSymbolsOps query parameter.  Note: The request will respond with 400 1. If filterSymbolsOps query parameter is missing when filterSymbolsValues is present. 2. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 3. If date query parameter is not provided.  (optional)</param>
        /// <param name="sortFieldName">Can specify the name of field with respect to which user wants to sort data   Note: The request will respond with 400, If a field which doesn&#39;t exist in the OFDB is requested (optional)</param>
        /// <param name="sortFieldOrder">Can specify the order in which user wants to sort data with respect to sortFieldName query parameter   Note: The request will respond with 400, If value other than asc or desc is requested (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006>GetDataAsync(string path, string symbol = default(string), string date = default(string), string filterFields = default(string), string filterOps = default(string), string filterValues = default(string), string filterDatesOps = default(string), string filterDatesValues = default(string), string filterSymbolsOps = default(string), string filterSymbolsValues = default(string), string sortFieldName = default(string), string sortFieldOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetDataWithHttpInfoAsync(path, symbol, date, filterFields, filterOps, filterValues, filterDatesOps, filterDatesValues, filterSymbolsOps, filterSymbolsValues, sortFieldName, sortFieldOrder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the data in the database(OFDB, OMS_OFDB, ECONOFDB) for the mentioned Symbol or Date. Atleast one parameter(Symbol/Date) is required. For a range of dates symbol parameter is mandatory.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Returns data for the symbol mentioned. e.g:sym1 (optional)</param>
        /// <param name="date">Return data for the specific date or range of dates mentioned.e.g:[date1,date2] (optional)</param>
        /// <param name="filterFields">Can specify the fields on which you want to perform field filter operations e.g: [\&quot;PRICE\&quot;,\&quot;SECTOR\&quot;]  Note:  The request will respond with 400 1. If fields which are not present on OFDB are given. 2. If filterOps or filterValues query parameters are missing    when filterFields is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterOps">Can specify the field filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;, \&quot;CT\&quot;] in respective order of values in filterFields query parameter.  The available field filter operations are :  For CHAR type fields:  \&quot;CT\&quot; : contains  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with   \&quot;EQ\&quot; : equals  For NUMERIC type fields:  \&quot;GT\&quot; : greater than  \&quot;GTEQ\&quot; : greater than or equals  \&quot;LT\&quot; : lesser than  \&quot;LTEQ\&quot; : lesser than or equals  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400  1. If operations other than the above mentioned are provided. 2. If numeric operations are given to char type fields instead of char operations. 3. If char operations are given to numeric type fields instead of numeric operations. 4. If filterFields or filterValues query parameters are missing    when filterOps is present. 5. If number of values given for filterOps,      filterFields, filterValues are different 6. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterValues">Can specify the field filter values of the field filter operations e.g: [100, 20, \&quot;AB\&quot;] in respective order of values in filterFields and filterOps query parameters .  Note:   The request will respond with 400 1. If char values are given to numeric type fields. 2. If filterFields or filterOps query parameters are missing    when filterValues is present. 3. If number of values given for filterOps,      filterFields, filterValues are different 4. If exactly one of symbol or date query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesOps">Can specify the date filter operations which you want to perform e.g: [\&quot;LT\&quot;, \&quot;GTEQ\&quot;].  The available date filter operations are :  \&quot;GT\&quot; : after  \&quot;GTEQ\&quot; : after or equals  \&quot;LT\&quot; : before  \&quot;LTEQ\&quot; : before or equals  \&quot;EQ\&quot; : equals\&quot;  Note:  The request will respond with 400  1. If operations other than the above mentioned are given. 2. If filterDatesValues query parameter is missing when filterDatesOps is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterDatesValues">Can specify the date filter values of the date filter operations e.g: [20200505, 20200303] in respective order of values in filterDatesOps query parameter.  Note:  The request will respond with 400 1. If invalid date values are given 2. If filterDatesOps query parameter is missing when filterDatesValues is present. 3. If number of values given for filterDatesOps and filterDatesValues differ. 4. If symbol query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsOps">Can specify the symbol filter operations which you want to perform e.g: [\&quot;CT\&quot;, \&quot;SW\&quot;].  The available symbol filter operations are:  \&quot;SW\&quot; : starts-with  \&quot;EW\&quot; : ends-with  \&quot;CT\&quot; : contains  \&quot;EQ\&quot; : equals  Note:  The request will respond with 400 1. If operations other than the above mentioned are given. 2. If filterSymbolsValues query parameter is missing when filterSymbolsOps is present. 3. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 4. If date query parameter is not provided.  (optional)</param>
        /// <param name="filterSymbolsValues">Can specify the symbol filter values of the date filter operations e.g: [\&quot;ab\&quot;, \&quot;xy\&quot;] in respective order of values in filterSymbolsOps query parameter.  Note: The request will respond with 400 1. If filterSymbolsOps query parameter is missing when filterSymbolsValues is present. 2. If number of values given for filterSymbolsOps and filterSymbolsValues differ. 3. If date query parameter is not provided.  (optional)</param>
        /// <param name="sortFieldName">Can specify the name of field with respect to which user wants to sort data   Note: The request will respond with 400, If a field which doesn&#39;t exist in the OFDB is requested (optional)</param>
        /// <param name="sortFieldOrder">Can specify the order in which user wants to sort data with respect to sortFieldName query parameter   Note: The request will respond with 400, If value other than asc or desc is requested (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetDataWithHttpInfoAsync(string path, string symbol = default(string), string date = default(string), string filterFields = default(string), string filterOps = default(string), string filterValues = default(string), string filterDatesOps = default(string), string filterDatesValues = default(string), string filterSymbolsOps = default(string), string filterSymbolsValues = default(string), string sortFieldName = default(string), string sortFieldOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetData");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (symbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (filterFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterFields", filterFields));
            }
            if (filterOps != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterOps", filterOps));
            }
            if (filterValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterValues", filterValues));
            }
            if (filterDatesOps != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterDatesOps", filterDatesOps));
            }
            if (filterDatesValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterDatesValues", filterDatesValues));
            }
            if (filterSymbolsOps != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterSymbolsOps", filterSymbolsOps));
            }
            if (filterSymbolsValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "filterSymbolsValues", filterSymbolsValues));
            }
            if (sortFieldName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "sortFieldName", sortFieldName));
            }
            if (sortFieldOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "sortFieldOrder", sortFieldOrder));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/database/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns all the dates in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="between">Returns list of dates which are between [start,end], dates should be in the respective order of start and end (optional)</param>
        /// <param name="equals">Returns the date which matches given date (optional)</param>
        /// <param name="before">Returns list of dates which are before mentioned date (optional)</param>
        /// <param name="after">Returns list of dates which are after mentioned date (optional)</param>
        /// <param name="orderBy">Returns dates in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetDates(string path, string between = default(string), string equals = default(string), string before = default(string), string after = default(string), string orderBy = default(string))
        {
            var localVarResponse = GetDatesWithHttpInfo(path, between, equals, before, after, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all the dates in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="between">Returns list of dates which are between [start,end], dates should be in the respective order of start and end (optional)</param>
        /// <param name="equals">Returns the date which matches given date (optional)</param>
        /// <param name="before">Returns list of dates which are before mentioned date (optional)</param>
        /// <param name="after">Returns list of dates which are after mentioned date (optional)</param>
        /// <param name="orderBy">Returns dates in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> GetDatesWithHttpInfo(string path, string between = default(string), string equals = default(string), string before = default(string), string after = default(string), string orderBy = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetDates");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (between != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "between", between));
            }
            if (equals != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "equals", equals));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2005>("/database/{path}/dates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns all the dates in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="between">Returns list of dates which are between [start,end], dates should be in the respective order of start and end (optional)</param>
        /// <param name="equals">Returns the date which matches given date (optional)</param>
        /// <param name="before">Returns list of dates which are before mentioned date (optional)</param>
        /// <param name="after">Returns list of dates which are after mentioned date (optional)</param>
        /// <param name="orderBy">Returns dates in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005>GetDatesAsync(string path, string between = default(string), string equals = default(string), string before = default(string), string after = default(string), string orderBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetDatesWithHttpInfoAsync(path, between, equals, before, after, orderBy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all the dates in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="between">Returns list of dates which are between [start,end], dates should be in the respective order of start and end (optional)</param>
        /// <param name="equals">Returns the date which matches given date (optional)</param>
        /// <param name="before">Returns list of dates which are before mentioned date (optional)</param>
        /// <param name="after">Returns list of dates which are after mentioned date (optional)</param>
        /// <param name="orderBy">Returns dates in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetDatesWithHttpInfoAsync(string path, string between = default(string), string equals = default(string), string before = default(string), string after = default(string), string orderBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetDates");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (between != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "between", between));
            }
            if (equals != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "equals", equals));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/database/{path}/dates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns all the fields in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetFields(string path)
        {
            var localVarResponse = GetFieldsWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all the fields in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> GetFieldsWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetFields");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2002>("/database/{path}/fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns all the fields in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>GetFieldsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFieldsWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all the fields in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetFieldsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetFields");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/database/{path}/fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a summary of OFDB metadata and data points
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetStats(string path)
        {
            var localVarResponse = GetStatsWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a summary of OFDB metadata and data points
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> GetStatsWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetStats");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStatsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2001>("/database/{path}/stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns a summary of OFDB metadata and data points
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001>GetStatsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStatsWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a summary of OFDB metadata and data points
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetStatsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetStats");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStatsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/database/{path}/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns all the symbols in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="startsWith">Returns list of symbols which starts with mentioned string (optional)</param>
        /// <param name="endsWith">Returns list of symbols which ends with mentioned string (optional)</param>
        /// <param name="contains">Returns list of symbols which contains mentioned string (optional)</param>
        /// <param name="equals">Returns symbol which matches mentioned string (optional)</param>
        /// <param name="orderBy">Returns symbols in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetSymbols(string path, string startsWith = default(string), string endsWith = default(string), string contains = default(string), string equals = default(string), string orderBy = default(string))
        {
            var localVarResponse = GetSymbolsWithHttpInfo(path, startsWith, endsWith, contains, equals, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all the symbols in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="startsWith">Returns list of symbols which starts with mentioned string (optional)</param>
        /// <param name="endsWith">Returns list of symbols which ends with mentioned string (optional)</param>
        /// <param name="contains">Returns list of symbols which contains mentioned string (optional)</param>
        /// <param name="equals">Returns symbol which matches mentioned string (optional)</param>
        /// <param name="orderBy">Returns symbols in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GetSymbolsWithHttpInfo(string path, string startsWith = default(string), string endsWith = default(string), string contains = default(string), string equals = default(string), string orderBy = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetSymbols");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (startsWith != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "startsWith", startsWith));
            }
            if (endsWith != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "endsWith", endsWith));
            }
            if (contains != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "contains", contains));
            }
            if (equals != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "equals", equals));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2004>("/database/{path}/symbols", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns all the symbols in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="startsWith">Returns list of symbols which starts with mentioned string (optional)</param>
        /// <param name="endsWith">Returns list of symbols which ends with mentioned string (optional)</param>
        /// <param name="contains">Returns list of symbols which contains mentioned string (optional)</param>
        /// <param name="equals">Returns symbol which matches mentioned string (optional)</param>
        /// <param name="orderBy">Returns symbols in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004>GetSymbolsAsync(string path, string startsWith = default(string), string endsWith = default(string), string contains = default(string), string equals = default(string), string orderBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSymbolsWithHttpInfoAsync(path, startsWith, endsWith, contains, equals, orderBy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all the symbols in the database(OFDB, OMS_OFDB, ECONOFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="startsWith">Returns list of symbols which starts with mentioned string (optional)</param>
        /// <param name="endsWith">Returns list of symbols which ends with mentioned string (optional)</param>
        /// <param name="contains">Returns list of symbols which contains mentioned string (optional)</param>
        /// <param name="equals">Returns symbol which matches mentioned string (optional)</param>
        /// <param name="orderBy">Returns symbols in the mentioned sorted order, should provide asc or desc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetSymbolsWithHttpInfoAsync(string path, string startsWith = default(string), string endsWith = default(string), string contains = default(string), string equals = default(string), string orderBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling GetApi->GetSymbols");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (startsWith != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "startsWith", startsWith));
            }
            if (endsWith != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "endsWith", endsWith));
            }
            if (contains != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "contains", contains));
            }
            if (equals != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "equals", equals));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OFDB.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/database/{path}/symbols", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
