/*
 * FactSet Ownership API
 *
 * FactSet's Fund Ownership API gives access to both **Holdings**, **Holders**, and **Transactions** data.<p> Factset's Holdings endpoints gives access to all the underlying securities and their position details held within a given fund. Fund Types supported include Open-End Mutual Funds, Closed-end Mutual Funds, and Exchange Traded Funds. Security Holders information retrieves all \"holder types\" and their positions across institutions, funds, insiders, and stakeholders. FactSet also provides extensive insider and institutional transactions data for multiple countries including the United States, China, and Canada.</p><p>The FactSet Ownership and Mutual Funds database collects global equity ownership data for approximately 50,000 institutions, 60,000 unique Mutual Fund portfolios, and 400,000 Insider/Stakeholders from around 110 countries. For more details review our [Data Collection](https://my.apps.factset.com/oa/cms/oaAttachment/87e162be-f2d1-4f40-a85b-bfb1b020d270/20079) methodology. </p> 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetOwnership.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetOwnership.Model
{
    /// <summary>
    /// insiderTransactions response object
    /// </summary>
    [DataContract(Name = "insiderTransactions")]
    public partial class InsiderTransactions : IEquatable<InsiderTransactions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsiderTransactions" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used in the request..</param>
        /// <param name="fsymId">FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier..</param>
        /// <param name="currency">Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="holderName">Returns the names of the insiders involved in the transactions that occurred between the specified start and end dates..</param>
        /// <param name="holderTitle">Returns the titles of the insiders involved in the transactions that occurred between the specified start and end dates..</param>
        /// <param name="holderId">Returns the holder IDs for the insiders involved in the transactions that occurred between the specified start and end dates..</param>
        /// <param name="shares">Returns the transaction shares for the transactions that occurred between the specified start and end dates..</param>
        /// <param name="price">Returns the transaction prices for the transactions that occurred between the specified start and end dates..</param>
        /// <param name="netValueChange">Returns the transaction values for the transactions that occurred between the specified start and end dates..</param>
        /// <param name="filingDate">Returns the dates on which the transactions that occurred between the specified start and end dates were processed..</param>
        /// <param name="isDerivative">Returns a Derivative/Non-Derivative flag for the transactions that occurred between the specified start and end dates. Returns true for Derivative and false for Non-Derivative..</param>
        /// <param name="isDirect">Returns a direct/indirect flag for the transactions that occurred between the specified start and end dates..</param>
        /// <param name="tradeType">Returns an acquisition/disposition flag for the transactions that occurred between the specified start and end dates..</param>
        /// <param name="formType">Returns the form types for the transactions that occurred between the specified start and end dates..</param>
        /// <param name="transactionDate">Returns the transaction dates for the transactions that occurred between the specified start and end dates..</param>
        /// <param name="sharesOwned">Returns the shares owned data for the transactions that occurred between the specified start and end dates..</param>
        /// <param name="secRule10b51">Returns rule 10b5-1 flags for the insiders involved in the transactions that occurred between the specified start and end dates..</param>
        public InsiderTransactions(string requestId = default(string), string fsymId = default(string), string currency = default(string), string holderName = default(string), string holderTitle = default(string), string holderId = default(string), decimal? shares = default(decimal?), double? price = default(double?), double? netValueChange = default(double?), string filingDate = default(string), bool? isDerivative = default(bool?), bool? isDirect = default(bool?), string tradeType = default(string), string formType = default(string), string transactionDate = default(string), decimal? sharesOwned = default(decimal?), bool? secRule10b51 = default(bool?))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Currency = currency;
            this.HolderName = holderName;
            this.HolderTitle = holderTitle;
            this.HolderId = holderId;
            this.Shares = shares;
            this.Price = price;
            this.NetValueChange = netValueChange;
            this.FilingDate = filingDate;
            this.IsDerivative = isDerivative;
            this.IsDirect = isDirect;
            this.TradeType = tradeType;
            this.FormType = formType;
            this.TransactionDate = transactionDate;
            this.SharesOwned = sharesOwned;
            this.SecRule10b51 = secRule10b51;
        }

        /// <summary>
        /// Identifier that was used in the request.
        /// </summary>
        /// <value>Identifier that was used in the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier.
        /// </summary>
        /// <value>FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the names of the insiders involved in the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the names of the insiders involved in the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "holderName", EmitDefaultValue = true)]
        public string HolderName { get; set; }

        /// <summary>
        /// Returns the titles of the insiders involved in the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the titles of the insiders involved in the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "holderTitle", EmitDefaultValue = true)]
        public string HolderTitle { get; set; }

        /// <summary>
        /// Returns the holder IDs for the insiders involved in the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the holder IDs for the insiders involved in the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "holderId", EmitDefaultValue = true)]
        public string HolderId { get; set; }

        /// <summary>
        /// Returns the transaction shares for the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the transaction shares for the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "shares", EmitDefaultValue = true)]
        public decimal? Shares { get; set; }

        /// <summary>
        /// Returns the transaction prices for the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the transaction prices for the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public double? Price { get; set; }

        /// <summary>
        /// Returns the transaction values for the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the transaction values for the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "netValueChange", EmitDefaultValue = true)]
        public double? NetValueChange { get; set; }

        /// <summary>
        /// Returns the dates on which the transactions that occurred between the specified start and end dates were processed.
        /// </summary>
        /// <value>Returns the dates on which the transactions that occurred between the specified start and end dates were processed.</value>
        [DataMember(Name = "filingDate", EmitDefaultValue = true)]
        public string FilingDate { get; set; }

        /// <summary>
        /// Returns a Derivative/Non-Derivative flag for the transactions that occurred between the specified start and end dates. Returns true for Derivative and false for Non-Derivative.
        /// </summary>
        /// <value>Returns a Derivative/Non-Derivative flag for the transactions that occurred between the specified start and end dates. Returns true for Derivative and false for Non-Derivative.</value>
        [DataMember(Name = "isDerivative", EmitDefaultValue = true)]
        public bool? IsDerivative { get; set; }

        /// <summary>
        /// Returns a direct/indirect flag for the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns a direct/indirect flag for the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "isDirect", EmitDefaultValue = true)]
        public bool? IsDirect { get; set; }

        /// <summary>
        /// Returns an acquisition/disposition flag for the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns an acquisition/disposition flag for the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "tradeType", EmitDefaultValue = true)]
        public string TradeType { get; set; }

        /// <summary>
        /// Returns the form types for the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the form types for the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "formType", EmitDefaultValue = true)]
        public string FormType { get; set; }

        /// <summary>
        /// Returns the transaction dates for the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the transaction dates for the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "transactionDate", EmitDefaultValue = true)]
        public string TransactionDate { get; set; }

        /// <summary>
        /// Returns the shares owned data for the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the shares owned data for the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "sharesOwned", EmitDefaultValue = true)]
        public decimal? SharesOwned { get; set; }

        /// <summary>
        /// Returns rule 10b5-1 flags for the insiders involved in the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns rule 10b5-1 flags for the insiders involved in the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "secRule10b51", EmitDefaultValue = true)]
        public bool? SecRule10b51 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsiderTransactions {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  HolderName: ").Append(HolderName).Append("\n");
            sb.Append("  HolderTitle: ").Append(HolderTitle).Append("\n");
            sb.Append("  HolderId: ").Append(HolderId).Append("\n");
            sb.Append("  Shares: ").Append(Shares).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  NetValueChange: ").Append(NetValueChange).Append("\n");
            sb.Append("  FilingDate: ").Append(FilingDate).Append("\n");
            sb.Append("  IsDerivative: ").Append(IsDerivative).Append("\n");
            sb.Append("  IsDirect: ").Append(IsDirect).Append("\n");
            sb.Append("  TradeType: ").Append(TradeType).Append("\n");
            sb.Append("  FormType: ").Append(FormType).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  SharesOwned: ").Append(SharesOwned).Append("\n");
            sb.Append("  SecRule10b51: ").Append(SecRule10b51).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsiderTransactions);
        }

        /// <summary>
        /// Returns true if InsiderTransactions instances are equal
        /// </summary>
        /// <param name="input">Instance of InsiderTransactions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsiderTransactions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.HolderName == input.HolderName ||
                    (this.HolderName != null &&
                    this.HolderName.Equals(input.HolderName))
                ) && 
                (
                    this.HolderTitle == input.HolderTitle ||
                    (this.HolderTitle != null &&
                    this.HolderTitle.Equals(input.HolderTitle))
                ) && 
                (
                    this.HolderId == input.HolderId ||
                    (this.HolderId != null &&
                    this.HolderId.Equals(input.HolderId))
                ) && 
                (
                    this.Shares == input.Shares ||
                    (this.Shares != null &&
                    this.Shares.Equals(input.Shares))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.NetValueChange == input.NetValueChange ||
                    (this.NetValueChange != null &&
                    this.NetValueChange.Equals(input.NetValueChange))
                ) && 
                (
                    this.FilingDate == input.FilingDate ||
                    (this.FilingDate != null &&
                    this.FilingDate.Equals(input.FilingDate))
                ) && 
                (
                    this.IsDerivative == input.IsDerivative ||
                    (this.IsDerivative != null &&
                    this.IsDerivative.Equals(input.IsDerivative))
                ) && 
                (
                    this.IsDirect == input.IsDirect ||
                    (this.IsDirect != null &&
                    this.IsDirect.Equals(input.IsDirect))
                ) && 
                (
                    this.TradeType == input.TradeType ||
                    (this.TradeType != null &&
                    this.TradeType.Equals(input.TradeType))
                ) && 
                (
                    this.FormType == input.FormType ||
                    (this.FormType != null &&
                    this.FormType.Equals(input.FormType))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.SharesOwned == input.SharesOwned ||
                    (this.SharesOwned != null &&
                    this.SharesOwned.Equals(input.SharesOwned))
                ) && 
                (
                    this.SecRule10b51 == input.SecRule10b51 ||
                    (this.SecRule10b51 != null &&
                    this.SecRule10b51.Equals(input.SecRule10b51))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.HolderName != null)
                {
                    hashCode = (hashCode * 59) + this.HolderName.GetHashCode();
                }
                if (this.HolderTitle != null)
                {
                    hashCode = (hashCode * 59) + this.HolderTitle.GetHashCode();
                }
                if (this.HolderId != null)
                {
                    hashCode = (hashCode * 59) + this.HolderId.GetHashCode();
                }
                if (this.Shares != null)
                {
                    hashCode = (hashCode * 59) + this.Shares.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.NetValueChange != null)
                {
                    hashCode = (hashCode * 59) + this.NetValueChange.GetHashCode();
                }
                if (this.FilingDate != null)
                {
                    hashCode = (hashCode * 59) + this.FilingDate.GetHashCode();
                }
                if (this.IsDerivative != null)
                {
                    hashCode = (hashCode * 59) + this.IsDerivative.GetHashCode();
                }
                if (this.IsDirect != null)
                {
                    hashCode = (hashCode * 59) + this.IsDirect.GetHashCode();
                }
                if (this.TradeType != null)
                {
                    hashCode = (hashCode * 59) + this.TradeType.GetHashCode();
                }
                if (this.FormType != null)
                {
                    hashCode = (hashCode * 59) + this.FormType.GetHashCode();
                }
                if (this.TransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionDate.GetHashCode();
                }
                if (this.SharesOwned != null)
                {
                    hashCode = (hashCode * 59) + this.SharesOwned.GetHashCode();
                }
                if (this.SecRule10b51 != null)
                {
                    hashCode = (hashCode * 59) + this.SecRule10b51.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
