/*
 * FactSet Ownership API
 *
 * FactSet's Fund Ownership API gives access to both **Holdings**, **Holders**, and **Transactions** data.<p> Factset's Holdings endpoints gives access to all the underlying securities and their position details held within a given fund. Fund Types supported include Open-End Mutual Funds, Closed-end Mutual Funds, and Exchange Traded Funds. Security Holders information retrieves all \"holder types\" and their positions across institutions, funds, insiders, and stakeholders. FactSet also provides extensive insider and institutional transactions data for multiple countries including the United States, China, and Canada.</p><p>The FactSet Ownership and Mutual Funds database collects global equity ownership data for approximately 50,000 institutions, 60,000 unique Mutual Fund portfolios, and 400,000 Insider/Stakeholders from around 110 countries. For more details review our [Data Collection](https://my.apps.factset.com/oa/cms/oaAttachment/87e162be-f2d1-4f40-a85b-bfb1b020d270/20079) methodology. </p> 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetOwnership.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetOwnership.Model
{
    /// <summary>
    /// institutionalTransactions response object
    /// </summary>
    [DataContract(Name = "institutionalTransactions")]
    public partial class InstitutionalTransactions : IEquatable<InstitutionalTransactions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstitutionalTransactions" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used in the request..</param>
        /// <param name="fsymId">FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier..</param>
        /// <param name="currency">Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="holderName">Returns the names of the institutions involved in the transactions that occurred between the specified start and end dates..</param>
        /// <param name="pctOS">Returns position held as a percentage of total outstanding data for the holders of the security whose ownership activity matches the specified change type..</param>
        /// <param name="pctChange">Returns change in position held as a percentage of total outstanding data for the holders of the security whose ownership activity matches the specified change type..</param>
        /// <param name="posChange">Returns position change data for the holders of the security whose ownership activity matches the specified change type..</param>
        /// <param name="marketVal">Returns market value data for the holders of the security whose ownership activity matches the specified change type..</param>
        /// <param name="reportDate">Returns the report date for the transactions that occurred between the specified start and end dates..</param>
        public InstitutionalTransactions(string requestId = default(string), string fsymId = default(string), string currency = default(string), string holderName = default(string), double? pctOS = default(double?), double? pctChange = default(double?), double? posChange = default(double?), double? marketVal = default(double?), string reportDate = default(string))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Currency = currency;
            this.HolderName = holderName;
            this.PctOS = pctOS;
            this.PctChange = pctChange;
            this.PosChange = posChange;
            this.MarketVal = marketVal;
            this.ReportDate = reportDate;
        }

        /// <summary>
        /// Identifier that was used in the request.
        /// </summary>
        /// <value>Identifier that was used in the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier.
        /// </summary>
        /// <value>FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the names of the institutions involved in the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the names of the institutions involved in the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "holderName", EmitDefaultValue = true)]
        public string HolderName { get; set; }

        /// <summary>
        /// Returns position held as a percentage of total outstanding data for the holders of the security whose ownership activity matches the specified change type.
        /// </summary>
        /// <value>Returns position held as a percentage of total outstanding data for the holders of the security whose ownership activity matches the specified change type.</value>
        [DataMember(Name = "pctOS", EmitDefaultValue = true)]
        public double? PctOS { get; set; }

        /// <summary>
        /// Returns change in position held as a percentage of total outstanding data for the holders of the security whose ownership activity matches the specified change type.
        /// </summary>
        /// <value>Returns change in position held as a percentage of total outstanding data for the holders of the security whose ownership activity matches the specified change type.</value>
        [DataMember(Name = "pctChange", EmitDefaultValue = true)]
        public double? PctChange { get; set; }

        /// <summary>
        /// Returns position change data for the holders of the security whose ownership activity matches the specified change type.
        /// </summary>
        /// <value>Returns position change data for the holders of the security whose ownership activity matches the specified change type.</value>
        [DataMember(Name = "posChange", EmitDefaultValue = true)]
        public double? PosChange { get; set; }

        /// <summary>
        /// Returns market value data for the holders of the security whose ownership activity matches the specified change type.
        /// </summary>
        /// <value>Returns market value data for the holders of the security whose ownership activity matches the specified change type.</value>
        [DataMember(Name = "marketVal", EmitDefaultValue = true)]
        public double? MarketVal { get; set; }

        /// <summary>
        /// Returns the report date for the transactions that occurred between the specified start and end dates.
        /// </summary>
        /// <value>Returns the report date for the transactions that occurred between the specified start and end dates.</value>
        [DataMember(Name = "reportDate", EmitDefaultValue = true)]
        public string ReportDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstitutionalTransactions {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  HolderName: ").Append(HolderName).Append("\n");
            sb.Append("  PctOS: ").Append(PctOS).Append("\n");
            sb.Append("  PctChange: ").Append(PctChange).Append("\n");
            sb.Append("  PosChange: ").Append(PosChange).Append("\n");
            sb.Append("  MarketVal: ").Append(MarketVal).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstitutionalTransactions);
        }

        /// <summary>
        /// Returns true if InstitutionalTransactions instances are equal
        /// </summary>
        /// <param name="input">Instance of InstitutionalTransactions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstitutionalTransactions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.HolderName == input.HolderName ||
                    (this.HolderName != null &&
                    this.HolderName.Equals(input.HolderName))
                ) && 
                (
                    this.PctOS == input.PctOS ||
                    (this.PctOS != null &&
                    this.PctOS.Equals(input.PctOS))
                ) && 
                (
                    this.PctChange == input.PctChange ||
                    (this.PctChange != null &&
                    this.PctChange.Equals(input.PctChange))
                ) && 
                (
                    this.PosChange == input.PosChange ||
                    (this.PosChange != null &&
                    this.PosChange.Equals(input.PosChange))
                ) && 
                (
                    this.MarketVal == input.MarketVal ||
                    (this.MarketVal != null &&
                    this.MarketVal.Equals(input.MarketVal))
                ) && 
                (
                    this.ReportDate == input.ReportDate ||
                    (this.ReportDate != null &&
                    this.ReportDate.Equals(input.ReportDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.HolderName != null)
                {
                    hashCode = (hashCode * 59) + this.HolderName.GetHashCode();
                }
                if (this.PctOS != null)
                {
                    hashCode = (hashCode * 59) + this.PctOS.GetHashCode();
                }
                if (this.PctChange != null)
                {
                    hashCode = (hashCode * 59) + this.PctChange.GetHashCode();
                }
                if (this.PosChange != null)
                {
                    hashCode = (hashCode * 59) + this.PosChange.GetHashCode();
                }
                if (this.MarketVal != null)
                {
                    hashCode = (hashCode * 59) + this.MarketVal.GetHashCode();
                }
                if (this.ReportDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReportDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
